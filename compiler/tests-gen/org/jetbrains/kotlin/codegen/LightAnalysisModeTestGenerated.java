/*
 * Copyright 2010-2024 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.codegen;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.util.KtTestUtil;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.utils.TransformersFunctions;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.test.generators.GenerateCompilerTestsKt}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("compiler/testData/codegen/box")
@TestDataPath("$PROJECT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public class LightAnalysisModeTestGenerated extends AbstractLightAnalysisModeTest {
  private void runTest(String testDataFilePath) {
    KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
  }

  public void testAllFilesPresentInBox() {
    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true, "ranges/stepped", "compileKotlinAgainstKotlin", "testsWithJava9", "testsWithJava15", "testsWithJava17", "multiplatform/k2");
  }

  @TestMetadata("compiler/testData/codegen/box/annotations")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Annotations extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInAnnotations() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/annotations"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("allowedTargets.kt")
    public void testAllowedTargets() {
      runTest("compiler/testData/codegen/box/annotations/allowedTargets.kt");
    }

    @TestMetadata("annotatedAnnotationParameter.kt")
    public void testAnnotatedAnnotationParameter() {
      runTest("compiler/testData/codegen/box/annotations/annotatedAnnotationParameter.kt");
    }

    @TestMetadata("annotatedEnumEntry.kt")
    public void testAnnotatedEnumEntry() {
      runTest("compiler/testData/codegen/box/annotations/annotatedEnumEntry.kt");
    }

    @TestMetadata("annotatedObjectLiteral.kt")
    public void testAnnotatedObjectLiteral() {
      runTest("compiler/testData/codegen/box/annotations/annotatedObjectLiteral.kt");
    }

    @TestMetadata("annotationDefaultValueOfUnsigned.kt")
    public void testAnnotationDefaultValueOfUnsigned() {
      runTest("compiler/testData/codegen/box/annotations/annotationDefaultValueOfUnsigned.kt");
    }

    @TestMetadata("annotationOnWhen.kt")
    public void testAnnotationOnWhen() {
      runTest("compiler/testData/codegen/box/annotations/annotationOnWhen.kt");
    }

    @TestMetadata("annotationProperty.kt")
    public void testAnnotationProperty() {
      runTest("compiler/testData/codegen/box/annotations/annotationProperty.kt");
    }

    @TestMetadata("annotationTargets.kt")
    public void testAnnotationTargets() {
      runTest("compiler/testData/codegen/box/annotations/annotationTargets.kt");
    }

    @TestMetadata("annotationWithDefaultArgInDifferentModule.kt")
    public void testAnnotationWithDefaultArgInDifferentModule() {
      runTest("compiler/testData/codegen/box/annotations/annotationWithDefaultArgInDifferentModule.kt");
    }

    @TestMetadata("annotationWithKotlinProperty.kt")
    public void testAnnotationWithKotlinProperty() {
      runTest("compiler/testData/codegen/box/annotations/annotationWithKotlinProperty.kt");
    }

    @TestMetadata("annotationWithKotlinPropertyFromInterfaceCompanion.kt")
    public void testAnnotationWithKotlinPropertyFromInterfaceCompanion() {
      runTest("compiler/testData/codegen/box/annotations/annotationWithKotlinPropertyFromInterfaceCompanion.kt");
    }

    @TestMetadata("annotationWithVarargAsDefaultValue.kt")
    public void testAnnotationWithVarargAsDefaultValue() {
      runTest("compiler/testData/codegen/box/annotations/annotationWithVarargAsDefaultValue.kt");
    }

    @TestMetadata("annotations0.kt")
    public void testAnnotations0() {
      runTest("compiler/testData/codegen/box/annotations/annotations0.kt");
    }

    @TestMetadata("annotationsOnDefault.kt")
    public void testAnnotationsOnDefault() {
      runTest("compiler/testData/codegen/box/annotations/annotationsOnDefault.kt");
    }

    @TestMetadata("annotationsOnLateinitAccessors.kt")
    public void testAnnotationsOnLateinitAccessors() {
      runTest("compiler/testData/codegen/box/annotations/annotationsOnLateinitAccessors.kt");
    }

    @TestMetadata("annotationsOnLateinitFields.kt")
    public void testAnnotationsOnLateinitFields() {
      runTest("compiler/testData/codegen/box/annotations/annotationsOnLateinitFields.kt");
    }

    @TestMetadata("annotationsOnNonExistentAccessors.kt")
    public void testAnnotationsOnNonExistentAccessors() {
      runTest("compiler/testData/codegen/box/annotations/annotationsOnNonExistentAccessors.kt");
    }

    @TestMetadata("annotationsOnTypeAliases.kt")
    public void testAnnotationsOnTypeAliases() {
      runTest("compiler/testData/codegen/box/annotations/annotationsOnTypeAliases.kt");
    }

    @TestMetadata("constValInAnnotation.kt")
    public void testConstValInAnnotation() {
      runTest("compiler/testData/codegen/box/annotations/constValInAnnotation.kt");
    }

    @TestMetadata("correctTypeForClassReferenceExpressionInAnnotation.kt")
    public void testCorrectTypeForClassReferenceExpressionInAnnotation() {
      runTest("compiler/testData/codegen/box/annotations/correctTypeForClassReferenceExpressionInAnnotation.kt");
    }

    @TestMetadata("defaultParameterValues.kt")
    public void testDefaultParameterValues() {
      runTest("compiler/testData/codegen/box/annotations/defaultParameterValues.kt");
    }

    @TestMetadata("delegatedPropertySetter.kt")
    public void testDelegatedPropertySetter() {
      runTest("compiler/testData/codegen/box/annotations/delegatedPropertySetter.kt");
    }

    @TestMetadata("deserializationOfNestedAnnotationOnType_1.kt")
    public void testDeserializationOfNestedAnnotationOnType_1() {
      runTest("compiler/testData/codegen/box/annotations/deserializationOfNestedAnnotationOnType_1.kt");
    }

    @TestMetadata("deserializationOfNestedAnnotationOnType_2.kt")
    public void testDeserializationOfNestedAnnotationOnType_2() {
      runTest("compiler/testData/codegen/box/annotations/deserializationOfNestedAnnotationOnType_2.kt");
    }

    @TestMetadata("deserializedLocalClassArgument.kt")
    public void testDeserializedLocalClassArgument() {
      runTest("compiler/testData/codegen/box/annotations/deserializedLocalClassArgument.kt");
    }

    @TestMetadata("divisionByZeroInJava.kt")
    public void testDivisionByZeroInJava() {
      runTest("compiler/testData/codegen/box/annotations/divisionByZeroInJava.kt");
    }

    @TestMetadata("fileClassWithFileAnnotation.kt")
    public void testFileClassWithFileAnnotation() {
      runTest("compiler/testData/codegen/box/annotations/fileClassWithFileAnnotation.kt");
    }

    @TestMetadata("genericAnnotations.kt")
    public void testGenericAnnotations() {
      runTest("compiler/testData/codegen/box/annotations/genericAnnotations.kt");
    }

    @TestMetadata("intrinsicConstEvaluationInSources.kt")
    public void testIntrinsicConstEvaluationInSources() {
      runTest("compiler/testData/codegen/box/annotations/intrinsicConstEvaluationInSources.kt");
    }

    @TestMetadata("invisibleFunctionWithReceiverWithSuppress.kt")
    public void testInvisibleFunctionWithReceiverWithSuppress() {
      runTest("compiler/testData/codegen/box/annotations/invisibleFunctionWithReceiverWithSuppress.kt");
    }

    @TestMetadata("javaAnnotationArrayValueDefault.kt")
    public void testJavaAnnotationArrayValueDefault() {
      runTest("compiler/testData/codegen/box/annotations/javaAnnotationArrayValueDefault.kt");
    }

    @TestMetadata("javaAnnotationArrayValueNoDefault.kt")
    public void testJavaAnnotationArrayValueNoDefault() {
      runTest("compiler/testData/codegen/box/annotations/javaAnnotationArrayValueNoDefault.kt");
    }

    @TestMetadata("javaAnnotationCall.kt")
    public void testJavaAnnotationCall() {
      runTest("compiler/testData/codegen/box/annotations/javaAnnotationCall.kt");
    }

    @TestMetadata("javaAnnotationDefault.kt")
    public void testJavaAnnotationDefault() {
      runTest("compiler/testData/codegen/box/annotations/javaAnnotationDefault.kt");
    }

    @TestMetadata("javaAnnotationOnProperty.kt")
    public void testJavaAnnotationOnProperty() {
      runTest("compiler/testData/codegen/box/annotations/javaAnnotationOnProperty.kt");
    }

    @TestMetadata("javaAnnotationOnSecondaryConstructorOfLocalClass.kt")
    public void testJavaAnnotationOnSecondaryConstructorOfLocalClass() {
      runTest("compiler/testData/codegen/box/annotations/javaAnnotationOnSecondaryConstructorOfLocalClass.kt");
    }

    @TestMetadata("javaAnnotationWithSingleArrayArgument.kt")
    public void testJavaAnnotationWithSingleArrayArgument() {
      runTest("compiler/testData/codegen/box/annotations/javaAnnotationWithSingleArrayArgument.kt");
    }

    @TestMetadata("javaConstAnnotationArguments.kt")
    public void testJavaConstAnnotationArguments() {
      runTest("compiler/testData/codegen/box/annotations/javaConstAnnotationArguments.kt");
    }

    @TestMetadata("javaNegativePropertyAsAnnotationParameter.kt")
    public void testJavaNegativePropertyAsAnnotationParameter() {
      runTest("compiler/testData/codegen/box/annotations/javaNegativePropertyAsAnnotationParameter.kt");
    }

    @TestMetadata("javaPropertyAsAnnotationParameter.kt")
    public void testJavaPropertyAsAnnotationParameter() {
      runTest("compiler/testData/codegen/box/annotations/javaPropertyAsAnnotationParameter.kt");
    }

    @TestMetadata("javaPropertyWithIntInitializer.kt")
    public void testJavaPropertyWithIntInitializer() {
      runTest("compiler/testData/codegen/box/annotations/javaPropertyWithIntInitializer.kt");
    }

    @TestMetadata("javaTargetOnPrimaryCtorParameter.kt")
    public void testJavaTargetOnPrimaryCtorParameter() {
      runTest("compiler/testData/codegen/box/annotations/javaTargetOnPrimaryCtorParameter.kt");
    }

    @TestMetadata("jvmAnnotationFlags.kt")
    public void testJvmAnnotationFlags() {
      runTest("compiler/testData/codegen/box/annotations/jvmAnnotationFlags.kt");
    }

    @TestMetadata("kotlinPropertyFromClassObjectAsParameter.kt")
    public void testKotlinPropertyFromClassObjectAsParameter() {
      runTest("compiler/testData/codegen/box/annotations/kotlinPropertyFromClassObjectAsParameter.kt");
    }

    @TestMetadata("kotlinTopLevelPropertyAsParameter.kt")
    public void testKotlinTopLevelPropertyAsParameter() {
      runTest("compiler/testData/codegen/box/annotations/kotlinTopLevelPropertyAsParameter.kt");
    }

    @TestMetadata("kt10136.kt")
    public void testKt10136() {
      runTest("compiler/testData/codegen/box/annotations/kt10136.kt");
    }

    @TestMetadata("kt25489.kt")
    public void testKt25489() {
      runTest("compiler/testData/codegen/box/annotations/kt25489.kt");
    }

    @TestMetadata("mustBeDocumented.kt")
    public void testMustBeDocumented() {
      runTest("compiler/testData/codegen/box/annotations/mustBeDocumented.kt");
    }

    @TestMetadata("nestedAnnotation.kt")
    public void testNestedAnnotation() {
      runTest("compiler/testData/codegen/box/annotations/nestedAnnotation.kt");
    }

    @TestMetadata("nestedClassPropertyAsParameter.kt")
    public void testNestedClassPropertyAsParameter() {
      runTest("compiler/testData/codegen/box/annotations/nestedClassPropertyAsParameter.kt");
    }

    @TestMetadata("nestedClassesInAnnotations.kt")
    public void testNestedClassesInAnnotations() {
      runTest("compiler/testData/codegen/box/annotations/nestedClassesInAnnotations.kt");
    }

    @TestMetadata("noTypeUseIfDependOnJvm6.kt")
    public void testNoTypeUseIfDependOnJvm6() {
      runTest("compiler/testData/codegen/box/annotations/noTypeUseIfDependOnJvm6.kt");
    }

    @TestMetadata("noTypeUseIfFlagIsSpecified.kt")
    public void testNoTypeUseIfFlagIsSpecified() {
      runTest("compiler/testData/codegen/box/annotations/noTypeUseIfFlagIsSpecified.kt");
    }

    @TestMetadata("parameterAnnotationInDefaultImpls.kt")
    public void testParameterAnnotationInDefaultImpls() {
      runTest("compiler/testData/codegen/box/annotations/parameterAnnotationInDefaultImpls.kt");
    }

    @TestMetadata("parameterWithPrimitiveType.kt")
    public void testParameterWithPrimitiveType() {
      runTest("compiler/testData/codegen/box/annotations/parameterWithPrimitiveType.kt");
    }

    @TestMetadata("parameters.kt")
    public void testParameters() {
      runTest("compiler/testData/codegen/box/annotations/parameters.kt");
    }

    @TestMetadata("platformDependent.kt")
    public void testPlatformDependent() {
      runTest("compiler/testData/codegen/box/annotations/platformDependent.kt");
    }

    @TestMetadata("propertyWithPropertyInInitializerAsParameter.kt")
    public void testPropertyWithPropertyInInitializerAsParameter() {
      runTest("compiler/testData/codegen/box/annotations/propertyWithPropertyInInitializerAsParameter.kt");
    }

    @TestMetadata("resolveWithLowPriorityAnnotation.kt")
    public void testResolveWithLowPriorityAnnotation() {
      runTest("compiler/testData/codegen/box/annotations/resolveWithLowPriorityAnnotation.kt");
    }

    @TestMetadata("resolvedReturnTypeForJavaEnumEntryAfterDeserialization.kt")
    public void testResolvedReturnTypeForJavaEnumEntryAfterDeserialization() {
      runTest("compiler/testData/codegen/box/annotations/resolvedReturnTypeForJavaEnumEntryAfterDeserialization.kt");
    }

    @TestMetadata("retentionInJava.kt")
    public void testRetentionInJava() {
      runTest("compiler/testData/codegen/box/annotations/retentionInJava.kt");
    }

    @TestMetadata("selfReferentialAnnotation.kt")
    public void testSelfReferentialAnnotation() {
      runTest("compiler/testData/codegen/box/annotations/selfReferentialAnnotation.kt");
    }

    @TestMetadata("singleAssignmentToVarargInAnnotation.kt")
    public void testSingleAssignmentToVarargInAnnotation() {
      runTest("compiler/testData/codegen/box/annotations/singleAssignmentToVarargInAnnotation.kt");
    }

    @TestMetadata("spreadOperatorInAnnotationArguments.kt")
    public void testSpreadOperatorInAnnotationArguments() {
      runTest("compiler/testData/codegen/box/annotations/spreadOperatorInAnnotationArguments.kt");
    }

    @TestMetadata("suppressInvisibleMember.kt")
    public void testSuppressInvisibleMember() {
      runTest("compiler/testData/codegen/box/annotations/suppressInvisibleMember.kt");
    }

    @TestMetadata("syntheticMethodForJvmStaticProperty.kt")
    public void testSyntheticMethodForJvmStaticProperty() {
      runTest("compiler/testData/codegen/box/annotations/syntheticMethodForJvmStaticProperty.kt");
    }

    @TestMetadata("syntheticMethodForProperty.kt")
    public void testSyntheticMethodForProperty() {
      runTest("compiler/testData/codegen/box/annotations/syntheticMethodForProperty.kt");
    }

    @TestMetadata("targetOnPrimaryCtorParameter.kt")
    public void testTargetOnPrimaryCtorParameter() {
      runTest("compiler/testData/codegen/box/annotations/targetOnPrimaryCtorParameter.kt");
    }

    @TestMetadata("targetOnPrimaryCtorParameterMultiModule.kt")
    public void testTargetOnPrimaryCtorParameterMultiModule() {
      runTest("compiler/testData/codegen/box/annotations/targetOnPrimaryCtorParameterMultiModule.kt");
    }

    @TestMetadata("typealiasAnnotationWithNonTrivialTypeArguments.kt")
    public void testTypealiasAnnotationWithNonTrivialTypeArguments() {
      runTest("compiler/testData/codegen/box/annotations/typealiasAnnotationWithNonTrivialTypeArguments.kt");
    }

    @TestMetadata("useTypeParameterAnnotationFromJava.kt")
    public void testUseTypeParameterAnnotationFromJava() {
      runTest("compiler/testData/codegen/box/annotations/useTypeParameterAnnotationFromJava.kt");
    }

    @TestMetadata("useTypeUseAnnotationFromJava.kt")
    public void testUseTypeUseAnnotationFromJava() {
      runTest("compiler/testData/codegen/box/annotations/useTypeUseAnnotationFromJava.kt");
    }

    @TestMetadata("varargInAnnotationParameter.kt")
    public void testVarargInAnnotationParameter() {
      runTest("compiler/testData/codegen/box/annotations/varargInAnnotationParameter.kt");
    }

    @TestMetadata("compiler/testData/codegen/box/annotations/annotatedLambda")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class AnnotatedLambda extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInAnnotatedLambda() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/annotations/annotatedLambda"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("funExpression.kt")
      public void testFunExpression() {
        runTest("compiler/testData/codegen/box/annotations/annotatedLambda/funExpression.kt");
      }

      @TestMetadata("lambda.kt")
      public void testLambda() {
        runTest("compiler/testData/codegen/box/annotations/annotatedLambda/lambda.kt");
      }

      @TestMetadata("samFunExpression.kt")
      public void testSamFunExpression() {
        runTest("compiler/testData/codegen/box/annotations/annotatedLambda/samFunExpression.kt");
      }

      @TestMetadata("samFunReference.kt")
      public void testSamFunReference() {
        runTest("compiler/testData/codegen/box/annotations/annotatedLambda/samFunReference.kt");
      }

      @TestMetadata("samLambda.kt")
      public void testSamLambda() {
        runTest("compiler/testData/codegen/box/annotations/annotatedLambda/samLambda.kt");
      }

      @TestMetadata("suspendLambda.kt")
      public void testSuspendLambda() {
        runTest("compiler/testData/codegen/box/annotations/annotatedLambda/suspendLambda.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/annotations/instances")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Instances extends AbstractLightAnalysisModeTest {
      @TestMetadata("innerAnnotationInstantiation.kt")
      public void ignoreInnerAnnotationInstantiation() {
        runTest("compiler/testData/codegen/box/annotations/instances/innerAnnotationInstantiation.kt");
      }

      @TestMetadata("javaAnnotationDefault.kt")
      public void ignoreJavaAnnotationDefault() {
        runTest("compiler/testData/codegen/box/annotations/instances/javaAnnotationDefault.kt");
      }

      @TestMetadata("javaExistingAnnotation.kt")
      public void ignoreJavaExistingAnnotation() {
        runTest("compiler/testData/codegen/box/annotations/instances/javaExistingAnnotation.kt");
      }

      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInInstances() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/annotations/instances"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("annotationEnclosingName.kt")
      public void testAnnotationEnclosingName() {
        runTest("compiler/testData/codegen/box/annotations/instances/annotationEnclosingName.kt");
      }

      @TestMetadata("annotationEqHc.kt")
      public void testAnnotationEqHc() {
        runTest("compiler/testData/codegen/box/annotations/instances/annotationEqHc.kt");
      }

      @TestMetadata("annotationFromStdlib.kt")
      public void testAnnotationFromStdlib() {
        runTest("compiler/testData/codegen/box/annotations/instances/annotationFromStdlib.kt");
      }

      @TestMetadata("annotationInstances.kt")
      public void testAnnotationInstances() {
        runTest("compiler/testData/codegen/box/annotations/instances/annotationInstances.kt");
      }

      @TestMetadata("annotationInstancesEmptyDefault.kt")
      public void testAnnotationInstancesEmptyDefault() {
        runTest("compiler/testData/codegen/box/annotations/instances/annotationInstancesEmptyDefault.kt");
      }

      @TestMetadata("annotationInstancesEmptyDefaultLowered.kt")
      public void testAnnotationInstancesEmptyDefaultLowered() {
        runTest("compiler/testData/codegen/box/annotations/instances/annotationInstancesEmptyDefaultLowered.kt");
      }

      @TestMetadata("AnnotationInstantiationWithArray.kt")
      public void testAnnotationInstantiationWithArray() {
        runTest("compiler/testData/codegen/box/annotations/instances/AnnotationInstantiationWithArray.kt");
      }

      @TestMetadata("annotationJvmHashCode.kt")
      public void testAnnotationJvmHashCode() {
        runTest("compiler/testData/codegen/box/annotations/instances/annotationJvmHashCode.kt");
      }

      @TestMetadata("annotationToString.kt")
      public void testAnnotationToString() {
        runTest("compiler/testData/codegen/box/annotations/instances/annotationToString.kt");
      }

      @TestMetadata("annotationType.kt")
      public void testAnnotationType() {
        runTest("compiler/testData/codegen/box/annotations/instances/annotationType.kt");
      }

      @TestMetadata("annotationWithTypeParameters.kt")
      public void testAnnotationWithTypeParameters() {
        runTest("compiler/testData/codegen/box/annotations/instances/annotationWithTypeParameters.kt");
      }

      @TestMetadata("annotationWithTypeParametersJvm.kt")
      public void testAnnotationWithTypeParametersJvm() {
        runTest("compiler/testData/codegen/box/annotations/instances/annotationWithTypeParametersJvm.kt");
      }

      @TestMetadata("annotationsUnsignedTypes.kt")
      public void testAnnotationsUnsignedTypes() {
        runTest("compiler/testData/codegen/box/annotations/instances/annotationsUnsignedTypes.kt");
      }

      @TestMetadata("inInlineFunction.kt")
      public void testInInlineFunction() {
        runTest("compiler/testData/codegen/box/annotations/instances/inInlineFunction.kt");
      }

      @TestMetadata("javaAnnotation.kt")
      public void testJavaAnnotation() {
        runTest("compiler/testData/codegen/box/annotations/instances/javaAnnotation.kt");
      }

      @TestMetadata("kotlinExistingAnnotation.kt")
      public void testKotlinExistingAnnotation() {
        runTest("compiler/testData/codegen/box/annotations/instances/kotlinExistingAnnotation.kt");
      }

      @TestMetadata("multifileEqHc.kt")
      public void testMultifileEqHc() {
        runTest("compiler/testData/codegen/box/annotations/instances/multifileEqHc.kt");
      }

      @TestMetadata("multimoduleCreation.kt")
      public void testMultimoduleCreation() {
        runTest("compiler/testData/codegen/box/annotations/instances/multimoduleCreation.kt");
      }

      @TestMetadata("multimoduleInlining.kt")
      public void testMultimoduleInlining() {
        runTest("compiler/testData/codegen/box/annotations/instances/multimoduleInlining.kt");
      }

      @TestMetadata("multimoduleTypeParams.kt")
      public void testMultimoduleTypeParams() {
        runTest("compiler/testData/codegen/box/annotations/instances/multimoduleTypeParams.kt");
      }

      @TestMetadata("multiplatformInstantiation.kt")
      public void testMultiplatformInstantiation() {
        runTest("compiler/testData/codegen/box/annotations/instances/multiplatformInstantiation.kt");
      }

      @TestMetadata("nestedAnnotationInstances.kt")
      public void testNestedAnnotationInstances() {
        runTest("compiler/testData/codegen/box/annotations/instances/nestedAnnotationInstances.kt");
      }

      @TestMetadata("varargInAnnotationParameterInstantiation.kt")
      public void testVarargInAnnotationParameterInstantiation() {
        runTest("compiler/testData/codegen/box/annotations/instances/varargInAnnotationParameterInstantiation.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/annotations/kClassMapping")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class KClassMapping extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInKClassMapping() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/annotations/kClassMapping"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("arrayClassParameter.kt")
      public void testArrayClassParameter() {
        runTest("compiler/testData/codegen/box/annotations/kClassMapping/arrayClassParameter.kt");
      }

      @TestMetadata("arrayClassParameterOnJavaClass.kt")
      public void testArrayClassParameterOnJavaClass() {
        runTest("compiler/testData/codegen/box/annotations/kClassMapping/arrayClassParameterOnJavaClass.kt");
      }

      @TestMetadata("classParameter.kt")
      public void testClassParameter() {
        runTest("compiler/testData/codegen/box/annotations/kClassMapping/classParameter.kt");
      }

      @TestMetadata("classParameterOnJavaClass.kt")
      public void testClassParameterOnJavaClass() {
        runTest("compiler/testData/codegen/box/annotations/kClassMapping/classParameterOnJavaClass.kt");
      }

      @TestMetadata("varargClassParameter.kt")
      public void testVarargClassParameter() {
        runTest("compiler/testData/codegen/box/annotations/kClassMapping/varargClassParameter.kt");
      }

      @TestMetadata("varargClassParameterOnJavaClass.kt")
      public void testVarargClassParameterOnJavaClass() {
        runTest("compiler/testData/codegen/box/annotations/kClassMapping/varargClassParameterOnJavaClass.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/annotations/repeatable")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Repeatable extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInRepeatable() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/annotations/repeatable"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("javaAnnotation.kt")
      public void testJavaAnnotation() {
        runTest("compiler/testData/codegen/box/annotations/repeatable/javaAnnotation.kt");
      }

      @TestMetadata("jvmRepeatableKotlinAnnotation.kt")
      public void testJvmRepeatableKotlinAnnotation() {
        runTest("compiler/testData/codegen/box/annotations/repeatable/jvmRepeatableKotlinAnnotation.kt");
      }

      @TestMetadata("kotlinAnnotation.kt")
      public void testKotlinAnnotation() {
        runTest("compiler/testData/codegen/box/annotations/repeatable/kotlinAnnotation.kt");
      }

      @TestMetadata("kotlinAnnotationInJava.kt")
      public void testKotlinAnnotationInJava() {
        runTest("compiler/testData/codegen/box/annotations/repeatable/kotlinAnnotationInJava.kt");
      }

      @TestMetadata("kotlinAnnotationWithBothRepeatables.kt")
      public void testKotlinAnnotationWithBothRepeatables() {
        runTest("compiler/testData/codegen/box/annotations/repeatable/kotlinAnnotationWithBothRepeatables.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/annotations/typeAnnotations")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class TypeAnnotations extends AbstractLightAnalysisModeTest {
      @TestMetadata("annotationWithTypeParameterOnReturnType.kt")
      public void ignoreAnnotationWithTypeParameterOnReturnType() {
        runTest("compiler/testData/codegen/box/annotations/typeAnnotations/annotationWithTypeParameterOnReturnType.kt");
      }

      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInTypeAnnotations() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/annotations/typeAnnotations"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("annotationOnSecondParameter.kt")
      public void testAnnotationOnSecondParameter() {
        runTest("compiler/testData/codegen/box/annotations/typeAnnotations/annotationOnSecondParameter.kt");
      }

      @TestMetadata("checkingNotincorporatedInputTypes.kt")
      public void testCheckingNotincorporatedInputTypes() {
        runTest("compiler/testData/codegen/box/annotations/typeAnnotations/checkingNotincorporatedInputTypes.kt");
      }

      @TestMetadata("classTypeParameterBound.kt")
      public void testClassTypeParameterBound() {
        runTest("compiler/testData/codegen/box/annotations/typeAnnotations/classTypeParameterBound.kt");
      }

      @TestMetadata("classTypeParameterBoundsJava.kt")
      public void testClassTypeParameterBoundsJava() {
        runTest("compiler/testData/codegen/box/annotations/typeAnnotations/classTypeParameterBoundsJava.kt");
      }

      @TestMetadata("functionTypeParameterBound.kt")
      public void testFunctionTypeParameterBound() {
        runTest("compiler/testData/codegen/box/annotations/typeAnnotations/functionTypeParameterBound.kt");
      }

      @TestMetadata("implicitReturn.kt")
      public void testImplicitReturn() {
        runTest("compiler/testData/codegen/box/annotations/typeAnnotations/implicitReturn.kt");
      }

      @TestMetadata("implicitReturnAgainstCompiled.kt")
      public void testImplicitReturnAgainstCompiled() {
        runTest("compiler/testData/codegen/box/annotations/typeAnnotations/implicitReturnAgainstCompiled.kt");
      }

      @TestMetadata("kt41484.kt")
      public void testKt41484() {
        runTest("compiler/testData/codegen/box/annotations/typeAnnotations/kt41484.kt");
      }

      @TestMetadata("methodParameters.kt")
      public void testMethodParameters() {
        runTest("compiler/testData/codegen/box/annotations/typeAnnotations/methodParameters.kt");
      }

      @TestMetadata("methodTypeParameters.kt")
      public void testMethodTypeParameters() {
        runTest("compiler/testData/codegen/box/annotations/typeAnnotations/methodTypeParameters.kt");
      }

      @TestMetadata("supertype.kt")
      public void testSupertype() {
        runTest("compiler/testData/codegen/box/annotations/typeAnnotations/supertype.kt");
      }

      @TestMetadata("typeAnnotationTarget6.kt")
      public void testTypeAnnotationTarget6() {
        runTest("compiler/testData/codegen/box/annotations/typeAnnotations/typeAnnotationTarget6.kt");
      }

      @TestMetadata("typeUseAnnotation.kt")
      public void testTypeUseAnnotation() {
        runTest("compiler/testData/codegen/box/annotations/typeAnnotations/typeUseAnnotation.kt");
      }

      @TestMetadata("unsafeVarianceInDependency.kt")
      public void testUnsafeVarianceInDependency() {
        runTest("compiler/testData/codegen/box/annotations/typeAnnotations/unsafeVarianceInDependency.kt");
      }
    }
  }

  @TestMetadata("compiler/testData/codegen/box/argumentOrder")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class ArgumentOrder extends AbstractLightAnalysisModeTest {
    @TestMetadata("kt17691.kt")
    public void ignoreKt17691() {
      runTest("compiler/testData/codegen/box/argumentOrder/kt17691.kt");
    }

    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInArgumentOrder() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/argumentOrder"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("argumentOrderInObjectSuperCall.kt")
    public void testArgumentOrderInObjectSuperCall() {
      runTest("compiler/testData/codegen/box/argumentOrder/argumentOrderInObjectSuperCall.kt");
    }

    @TestMetadata("argumentOrderInObjectSuperCallWithPlatformType.kt")
    public void testArgumentOrderInObjectSuperCallWithPlatformType() {
      runTest("compiler/testData/codegen/box/argumentOrder/argumentOrderInObjectSuperCallWithPlatformType.kt");
    }

    @TestMetadata("argumentOrderInSuperCall.kt")
    public void testArgumentOrderInSuperCall() {
      runTest("compiler/testData/codegen/box/argumentOrder/argumentOrderInSuperCall.kt");
    }

    @TestMetadata("arguments.kt")
    public void testArguments() {
      runTest("compiler/testData/codegen/box/argumentOrder/arguments.kt");
    }

    @TestMetadata("captured.kt")
    public void testCaptured() {
      runTest("compiler/testData/codegen/box/argumentOrder/captured.kt");
    }

    @TestMetadata("capturedInExtension.kt")
    public void testCapturedInExtension() {
      runTest("compiler/testData/codegen/box/argumentOrder/capturedInExtension.kt");
    }

    @TestMetadata("defaults.kt")
    public void testDefaults() {
      runTest("compiler/testData/codegen/box/argumentOrder/defaults.kt");
    }

    @TestMetadata("extension.kt")
    public void testExtension() {
      runTest("compiler/testData/codegen/box/argumentOrder/extension.kt");
    }

    @TestMetadata("extensionInClass.kt")
    public void testExtensionInClass() {
      runTest("compiler/testData/codegen/box/argumentOrder/extensionInClass.kt");
    }

    @TestMetadata("kt17691WithEnabledFeature.kt")
    public void testKt17691WithEnabledFeature() {
      runTest("compiler/testData/codegen/box/argumentOrder/kt17691WithEnabledFeature.kt");
    }

    @TestMetadata("kt9277.kt")
    public void testKt9277() {
      runTest("compiler/testData/codegen/box/argumentOrder/kt9277.kt");
    }

    @TestMetadata("lambdaMigration.kt")
    public void testLambdaMigration() {
      runTest("compiler/testData/codegen/box/argumentOrder/lambdaMigration.kt");
    }

    @TestMetadata("lambdaMigrationInClass.kt")
    public void testLambdaMigrationInClass() {
      runTest("compiler/testData/codegen/box/argumentOrder/lambdaMigrationInClass.kt");
    }

    @TestMetadata("simple.kt")
    public void testSimple() {
      runTest("compiler/testData/codegen/box/argumentOrder/simple.kt");
    }

    @TestMetadata("simpleInClass.kt")
    public void testSimpleInClass() {
      runTest("compiler/testData/codegen/box/argumentOrder/simpleInClass.kt");
    }

    @TestMetadata("singleSideEffect.kt")
    public void testSingleSideEffect() {
      runTest("compiler/testData/codegen/box/argumentOrder/singleSideEffect.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/arithmetic")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Arithmetic extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInArithmetic() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/arithmetic"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("basic_charConversions.kt")
    public void testBasic_charConversions() {
      runTest("compiler/testData/codegen/box/arithmetic/basic_charConversions.kt");
    }

    @TestMetadata("basic_charCornerCases.kt")
    public void testBasic_charCornerCases() {
      runTest("compiler/testData/codegen/box/arithmetic/basic_charCornerCases.kt");
    }

    @TestMetadata("basic_compareIntToFloat.kt")
    public void testBasic_compareIntToFloat() {
      runTest("compiler/testData/codegen/box/arithmetic/basic_compareIntToFloat.kt");
    }

    @TestMetadata("basic_doubleBasic.kt")
    public void testBasic_doubleBasic() {
      runTest("compiler/testData/codegen/box/arithmetic/basic_doubleBasic.kt");
    }

    @TestMetadata("basic_integralToFloat.kt")
    public void testBasic_integralToFloat() {
      runTest("compiler/testData/codegen/box/arithmetic/basic_integralToFloat.kt");
    }

    @TestMetadata("basic_kt37412.kt")
    public void testBasic_kt37412() {
      runTest("compiler/testData/codegen/box/arithmetic/basic_kt37412.kt");
    }

    @TestMetadata("basic_selfComparison.kt")
    public void testBasic_selfComparison() {
      runTest("compiler/testData/codegen/box/arithmetic/basic_selfComparison.kt");
    }

    @TestMetadata("basic_shifts.kt")
    public void testBasic_shifts() {
      runTest("compiler/testData/codegen/box/arithmetic/basic_shifts.kt");
    }

    @TestMetadata("basic_uintTests.kt")
    public void testBasic_uintTests() {
      runTest("compiler/testData/codegen/box/arithmetic/basic_uintTests.kt");
    }

    @TestMetadata("division.kt")
    public void testDivision() {
      runTest("compiler/testData/codegen/box/arithmetic/division.kt");
    }

    @TestMetadata("github1856.kt")
    public void testGithub1856() {
      runTest("compiler/testData/codegen/box/arithmetic/github1856.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/arrays")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Arrays extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInArrays() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/arrays"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("arrayConstructorWithNonInlineLambda.kt")
    public void testArrayConstructorWithNonInlineLambda() {
      runTest("compiler/testData/codegen/box/arrays/arrayConstructorWithNonInlineLambda.kt");
    }

    @TestMetadata("arrayConstructorsSimple.kt")
    public void testArrayConstructorsSimple() {
      runTest("compiler/testData/codegen/box/arrays/arrayConstructorsSimple.kt");
    }

    @TestMetadata("arrayGetAssignMultiIndex.kt")
    public void testArrayGetAssignMultiIndex() {
      runTest("compiler/testData/codegen/box/arrays/arrayGetAssignMultiIndex.kt");
    }

    @TestMetadata("arrayGetMultiIndex.kt")
    public void testArrayGetMultiIndex() {
      runTest("compiler/testData/codegen/box/arrays/arrayGetMultiIndex.kt");
    }

    @TestMetadata("arrayInstanceOf.kt")
    public void testArrayInstanceOf() {
      runTest("compiler/testData/codegen/box/arrays/arrayInstanceOf.kt");
    }

    @TestMetadata("arrayPlusAssign.kt")
    public void testArrayPlusAssign() {
      runTest("compiler/testData/codegen/box/arrays/arrayPlusAssign.kt");
    }

    @TestMetadata("arraysAreCloneable.kt")
    public void testArraysAreCloneable() {
      runTest("compiler/testData/codegen/box/arrays/arraysAreCloneable.kt");
    }

    @TestMetadata("cloneArray.kt")
    public void testCloneArray() {
      runTest("compiler/testData/codegen/box/arrays/cloneArray.kt");
    }

    @TestMetadata("clonePrimitiveArrays.kt")
    public void testClonePrimitiveArrays() {
      runTest("compiler/testData/codegen/box/arrays/clonePrimitiveArrays.kt");
    }

    @TestMetadata("collectionAssignGetMultiIndex.kt")
    public void testCollectionAssignGetMultiIndex() {
      runTest("compiler/testData/codegen/box/arrays/collectionAssignGetMultiIndex.kt");
    }

    @TestMetadata("collectionGetMultiIndex.kt")
    public void testCollectionGetMultiIndex() {
      runTest("compiler/testData/codegen/box/arrays/collectionGetMultiIndex.kt");
    }

    @TestMetadata("constantArrayOfAny.kt")
    public void testConstantArrayOfAny() {
      runTest("compiler/testData/codegen/box/arrays/constantArrayOfAny.kt");
    }

    @TestMetadata("emptyArrayDesugaring.kt")
    public void testEmptyArrayDesugaring() {
      runTest("compiler/testData/codegen/box/arrays/emptyArrayDesugaring.kt");
    }

    @TestMetadata("forEachBooleanArray.kt")
    public void testForEachBooleanArray() {
      runTest("compiler/testData/codegen/box/arrays/forEachBooleanArray.kt");
    }

    @TestMetadata("forEachByteArray.kt")
    public void testForEachByteArray() {
      runTest("compiler/testData/codegen/box/arrays/forEachByteArray.kt");
    }

    @TestMetadata("forEachCharArray.kt")
    public void testForEachCharArray() {
      runTest("compiler/testData/codegen/box/arrays/forEachCharArray.kt");
    }

    @TestMetadata("forEachDoubleArray.kt")
    public void testForEachDoubleArray() {
      runTest("compiler/testData/codegen/box/arrays/forEachDoubleArray.kt");
    }

    @TestMetadata("forEachFloatArray.kt")
    public void testForEachFloatArray() {
      runTest("compiler/testData/codegen/box/arrays/forEachFloatArray.kt");
    }

    @TestMetadata("forEachIntArray.kt")
    public void testForEachIntArray() {
      runTest("compiler/testData/codegen/box/arrays/forEachIntArray.kt");
    }

    @TestMetadata("forEachLongArray.kt")
    public void testForEachLongArray() {
      runTest("compiler/testData/codegen/box/arrays/forEachLongArray.kt");
    }

    @TestMetadata("forEachShortArray.kt")
    public void testForEachShortArray() {
      runTest("compiler/testData/codegen/box/arrays/forEachShortArray.kt");
    }

    @TestMetadata("genericArrayInObjectLiteralConstructor.kt")
    public void testGenericArrayInObjectLiteralConstructor() {
      runTest("compiler/testData/codegen/box/arrays/genericArrayInObjectLiteralConstructor.kt");
    }

    @TestMetadata("hashMap.kt")
    public void testHashMap() {
      runTest("compiler/testData/codegen/box/arrays/hashMap.kt");
    }

    @TestMetadata("inProjectionAsParameter.kt")
    public void testInProjectionAsParameter() {
      runTest("compiler/testData/codegen/box/arrays/inProjectionAsParameter.kt");
    }

    @TestMetadata("inProjectionOfArray.kt")
    public void testInProjectionOfArray() {
      runTest("compiler/testData/codegen/box/arrays/inProjectionOfArray.kt");
    }

    @TestMetadata("inProjectionOfList.kt")
    public void testInProjectionOfList() {
      runTest("compiler/testData/codegen/box/arrays/inProjectionOfList.kt");
    }

    @TestMetadata("indices.kt")
    public void testIndices() {
      runTest("compiler/testData/codegen/box/arrays/indices.kt");
    }

    @TestMetadata("indicesChar.kt")
    public void testIndicesChar() {
      runTest("compiler/testData/codegen/box/arrays/indicesChar.kt");
    }

    @TestMetadata("inlineInitializer.kt")
    public void testInlineInitializer() {
      runTest("compiler/testData/codegen/box/arrays/inlineInitializer.kt");
    }

    @TestMetadata("iterator.kt")
    public void testIterator() {
      runTest("compiler/testData/codegen/box/arrays/iterator.kt");
    }

    @TestMetadata("iteratorBooleanArray.kt")
    public void testIteratorBooleanArray() {
      runTest("compiler/testData/codegen/box/arrays/iteratorBooleanArray.kt");
    }

    @TestMetadata("iteratorByteArray.kt")
    public void testIteratorByteArray() {
      runTest("compiler/testData/codegen/box/arrays/iteratorByteArray.kt");
    }

    @TestMetadata("iteratorByteArrayNextByte.kt")
    public void testIteratorByteArrayNextByte() {
      runTest("compiler/testData/codegen/box/arrays/iteratorByteArrayNextByte.kt");
    }

    @TestMetadata("iteratorCharArray.kt")
    public void testIteratorCharArray() {
      runTest("compiler/testData/codegen/box/arrays/iteratorCharArray.kt");
    }

    @TestMetadata("iteratorDoubleArray.kt")
    public void testIteratorDoubleArray() {
      runTest("compiler/testData/codegen/box/arrays/iteratorDoubleArray.kt");
    }

    @TestMetadata("iteratorFloatArray.kt")
    public void testIteratorFloatArray() {
      runTest("compiler/testData/codegen/box/arrays/iteratorFloatArray.kt");
    }

    @TestMetadata("iteratorIntArray.kt")
    public void testIteratorIntArray() {
      runTest("compiler/testData/codegen/box/arrays/iteratorIntArray.kt");
    }

    @TestMetadata("iteratorLongArray.kt")
    public void testIteratorLongArray() {
      runTest("compiler/testData/codegen/box/arrays/iteratorLongArray.kt");
    }

    @TestMetadata("iteratorLongArrayNextLong.kt")
    public void testIteratorLongArrayNextLong() {
      runTest("compiler/testData/codegen/box/arrays/iteratorLongArrayNextLong.kt");
    }

    @TestMetadata("iteratorShortArray.kt")
    public void testIteratorShortArray() {
      runTest("compiler/testData/codegen/box/arrays/iteratorShortArray.kt");
    }

    @TestMetadata("kt1291.kt")
    public void testKt1291() {
      runTest("compiler/testData/codegen/box/arrays/kt1291.kt");
    }

    @TestMetadata("kt17134.kt")
    public void testKt17134() {
      runTest("compiler/testData/codegen/box/arrays/kt17134.kt");
    }

    @TestMetadata("kt238.kt")
    public void testKt238() {
      runTest("compiler/testData/codegen/box/arrays/kt238.kt");
    }

    @TestMetadata("kt2997.kt")
    public void testKt2997() {
      runTest("compiler/testData/codegen/box/arrays/kt2997.kt");
    }

    @TestMetadata("kt33.kt")
    public void testKt33() {
      runTest("compiler/testData/codegen/box/arrays/kt33.kt");
    }

    @TestMetadata("kt34291_16dimensions.kt")
    public void testKt34291_16dimensions() {
      runTest("compiler/testData/codegen/box/arrays/kt34291_16dimensions.kt");
    }

    @TestMetadata("kt3771.kt")
    public void testKt3771() {
      runTest("compiler/testData/codegen/box/arrays/kt3771.kt");
    }

    @TestMetadata("kt4118.kt")
    public void testKt4118() {
      runTest("compiler/testData/codegen/box/arrays/kt4118.kt");
    }

    @TestMetadata("kt42932.kt")
    public void testKt42932() {
      runTest("compiler/testData/codegen/box/arrays/kt42932.kt");
    }

    @TestMetadata("kt4348.kt")
    public void testKt4348() {
      runTest("compiler/testData/codegen/box/arrays/kt4348.kt");
    }

    @TestMetadata("kt4357.kt")
    public void testKt4357() {
      runTest("compiler/testData/codegen/box/arrays/kt4357.kt");
    }

    @TestMetadata("kt45410.kt")
    public void testKt45410() {
      runTest("compiler/testData/codegen/box/arrays/kt45410.kt");
    }

    @TestMetadata("kt47483.kt")
    public void testKt47483() {
      runTest("compiler/testData/codegen/box/arrays/kt47483.kt");
    }

    @TestMetadata("kt47499.kt")
    public void testKt47499() {
      runTest("compiler/testData/codegen/box/arrays/kt47499.kt");
    }

    @TestMetadata("kt503.kt")
    public void testKt503() {
      runTest("compiler/testData/codegen/box/arrays/kt503.kt");
    }

    @TestMetadata("kt55984.kt")
    public void testKt55984() {
      runTest("compiler/testData/codegen/box/arrays/kt55984.kt");
    }

    @TestMetadata("kt594.kt")
    public void testKt594() {
      runTest("compiler/testData/codegen/box/arrays/kt594.kt");
    }

    @TestMetadata("kt602.kt")
    public void testKt602() {
      runTest("compiler/testData/codegen/box/arrays/kt602.kt");
    }

    @TestMetadata("kt7009.kt")
    public void testKt7009() {
      runTest("compiler/testData/codegen/box/arrays/kt7009.kt");
    }

    @TestMetadata("kt7288.kt")
    public void testKt7288() {
      runTest("compiler/testData/codegen/box/arrays/kt7288.kt");
    }

    @TestMetadata("kt7338.kt")
    public void testKt7338() {
      runTest("compiler/testData/codegen/box/arrays/kt7338.kt");
    }

    @TestMetadata("kt779.kt")
    public void testKt779() {
      runTest("compiler/testData/codegen/box/arrays/kt779.kt");
    }

    @TestMetadata("kt945.kt")
    public void testKt945() {
      runTest("compiler/testData/codegen/box/arrays/kt945.kt");
    }

    @TestMetadata("kt950.kt")
    public void testKt950() {
      runTest("compiler/testData/codegen/box/arrays/kt950.kt");
    }

    @TestMetadata("longAsIndex.kt")
    public void testLongAsIndex() {
      runTest("compiler/testData/codegen/box/arrays/longAsIndex.kt");
    }

    @TestMetadata("multiArrayConstructors.kt")
    public void testMultiArrayConstructors() {
      runTest("compiler/testData/codegen/box/arrays/multiArrayConstructors.kt");
    }

    @TestMetadata("nonLocalReturnArrayConstructor.kt")
    public void testNonLocalReturnArrayConstructor() {
      runTest("compiler/testData/codegen/box/arrays/nonLocalReturnArrayConstructor.kt");
    }

    @TestMetadata("nonNullArray.kt")
    public void testNonNullArray() {
      runTest("compiler/testData/codegen/box/arrays/nonNullArray.kt");
    }

    @TestMetadata("primitiveArrays.kt")
    public void testPrimitiveArrays() {
      runTest("compiler/testData/codegen/box/arrays/primitiveArrays.kt");
    }

    @TestMetadata("stdlib.kt")
    public void testStdlib() {
      runTest("compiler/testData/codegen/box/arrays/stdlib.kt");
    }

    @TestMetadata("varargsWithJava.kt")
    public void testVarargsWithJava() {
      runTest("compiler/testData/codegen/box/arrays/varargsWithJava.kt");
    }

    @TestMetadata("compiler/testData/codegen/box/arrays/arraysOfInlineClass")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ArraysOfInlineClass extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      @TestMetadata("accessArrayOfInlineClass.kt")
      public void testAccessArrayOfInlineClass() {
        runTest("compiler/testData/codegen/box/arrays/arraysOfInlineClass/accessArrayOfInlineClass.kt");
      }

      @TestMetadata("accessArrayOfUnsigned.kt")
      public void testAccessArrayOfUnsigned() {
        runTest("compiler/testData/codegen/box/arrays/arraysOfInlineClass/accessArrayOfUnsigned.kt");
      }

      public void testAllFilesPresentInArraysOfInlineClass() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/arrays/arraysOfInlineClass"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("arrayOfInlineClassOfArrayOfInlineClass.kt")
      public void testArrayOfInlineClassOfArrayOfInlineClass() {
        runTest("compiler/testData/codegen/box/arrays/arraysOfInlineClass/arrayOfInlineClassOfArrayOfInlineClass.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/arrays/forInReversed")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ForInReversed extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInForInReversed() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/arrays/forInReversed"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("reversedArray.kt")
      public void testReversedArray() {
        runTest("compiler/testData/codegen/box/arrays/forInReversed/reversedArray.kt");
      }

      @TestMetadata("reversedArrayOriginalUpdatedInLoopBody.kt")
      public void testReversedArrayOriginalUpdatedInLoopBody() {
        runTest("compiler/testData/codegen/box/arrays/forInReversed/reversedArrayOriginalUpdatedInLoopBody.kt");
      }

      @TestMetadata("reversedArrayReversedArrayOriginalUpdatedInLoopBody.kt")
      public void testReversedArrayReversedArrayOriginalUpdatedInLoopBody() {
        runTest("compiler/testData/codegen/box/arrays/forInReversed/reversedArrayReversedArrayOriginalUpdatedInLoopBody.kt");
      }

      @TestMetadata("reversedOriginalUpdatedInLoopBody.kt")
      public void testReversedOriginalUpdatedInLoopBody() {
        runTest("compiler/testData/codegen/box/arrays/forInReversed/reversedOriginalUpdatedInLoopBody.kt");
      }

      @TestMetadata("reversedReversedOriginalUpdatedInLoopBody.kt")
      public void testReversedReversedOriginalUpdatedInLoopBody() {
        runTest("compiler/testData/codegen/box/arrays/forInReversed/reversedReversedOriginalUpdatedInLoopBody.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/arrays/forInUnsignedArray")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ForInUnsignedArray extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInForInUnsignedArray() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/arrays/forInUnsignedArray"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("forInUnsignedArray.kt")
      public void testForInUnsignedArray() {
        runTest("compiler/testData/codegen/box/arrays/forInUnsignedArray/forInUnsignedArray.kt");
      }

      @TestMetadata("forInUnsignedArrayIndices.kt")
      public void testForInUnsignedArrayIndices() {
        runTest("compiler/testData/codegen/box/arrays/forInUnsignedArray/forInUnsignedArrayIndices.kt");
      }

      @TestMetadata("forInUnsignedArrayIndicesReversed.kt")
      public void testForInUnsignedArrayIndicesReversed() {
        runTest("compiler/testData/codegen/box/arrays/forInUnsignedArray/forInUnsignedArrayIndicesReversed.kt");
      }

      @TestMetadata("forInUnsignedArrayReversed.kt")
      public void testForInUnsignedArrayReversed() {
        runTest("compiler/testData/codegen/box/arrays/forInUnsignedArray/forInUnsignedArrayReversed.kt");
      }

      @TestMetadata("forInUnsignedArrayWithIndex.kt")
      public void testForInUnsignedArrayWithIndex() {
        runTest("compiler/testData/codegen/box/arrays/forInUnsignedArray/forInUnsignedArrayWithIndex.kt");
      }

      @TestMetadata("forInUnsignedArrayWithIndexNoElementVar.kt")
      public void testForInUnsignedArrayWithIndexNoElementVar() {
        runTest("compiler/testData/codegen/box/arrays/forInUnsignedArray/forInUnsignedArrayWithIndexNoElementVar.kt");
      }

      @TestMetadata("forInUnsignedArrayWithIndexNoIndexVar.kt")
      public void testForInUnsignedArrayWithIndexNoIndexVar() {
        runTest("compiler/testData/codegen/box/arrays/forInUnsignedArray/forInUnsignedArrayWithIndexNoIndexVar.kt");
      }

      @TestMetadata("forInUnsignedArrayWithIndexReversed.kt")
      public void testForInUnsignedArrayWithIndexReversed() {
        runTest("compiler/testData/codegen/box/arrays/forInUnsignedArray/forInUnsignedArrayWithIndexReversed.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/arrays/multiDecl")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class MultiDecl extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInMultiDecl() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/arrays/multiDecl"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("kt15560.kt")
      public void testKt15560() {
        runTest("compiler/testData/codegen/box/arrays/multiDecl/kt15560.kt");
      }

      @TestMetadata("kt15568.kt")
      public void testKt15568() {
        runTest("compiler/testData/codegen/box/arrays/multiDecl/kt15568.kt");
      }

      @TestMetadata("kt15575.kt")
      public void testKt15575() {
        runTest("compiler/testData/codegen/box/arrays/multiDecl/kt15575.kt");
      }

      @TestMetadata("MultiDeclFor.kt")
      public void testMultiDeclFor() {
        runTest("compiler/testData/codegen/box/arrays/multiDecl/MultiDeclFor.kt");
      }

      @TestMetadata("MultiDeclForComponentExtensions.kt")
      public void testMultiDeclForComponentExtensions() {
        runTest("compiler/testData/codegen/box/arrays/multiDecl/MultiDeclForComponentExtensions.kt");
      }

      @TestMetadata("MultiDeclForComponentMemberExtensions.kt")
      public void testMultiDeclForComponentMemberExtensions() {
        runTest("compiler/testData/codegen/box/arrays/multiDecl/MultiDeclForComponentMemberExtensions.kt");
      }

      @TestMetadata("MultiDeclForComponentMemberExtensionsInExtensionFunction.kt")
      public void testMultiDeclForComponentMemberExtensionsInExtensionFunction() {
        runTest("compiler/testData/codegen/box/arrays/multiDecl/MultiDeclForComponentMemberExtensionsInExtensionFunction.kt");
      }

      @TestMetadata("MultiDeclForValCaptured.kt")
      public void testMultiDeclForValCaptured() {
        runTest("compiler/testData/codegen/box/arrays/multiDecl/MultiDeclForValCaptured.kt");
      }

      @TestMetadata("compiler/testData/codegen/box/arrays/multiDecl/int")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class Int extends AbstractLightAnalysisModeTest {
        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        public void testAllFilesPresentInInt() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/arrays/multiDecl/int"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("MultiDeclForComponentExtensions.kt")
        public void testMultiDeclForComponentExtensions() {
          runTest("compiler/testData/codegen/box/arrays/multiDecl/int/MultiDeclForComponentExtensions.kt");
        }

        @TestMetadata("MultiDeclForComponentExtensionsValCaptured.kt")
        public void testMultiDeclForComponentExtensionsValCaptured() {
          runTest("compiler/testData/codegen/box/arrays/multiDecl/int/MultiDeclForComponentExtensionsValCaptured.kt");
        }

        @TestMetadata("MultiDeclForComponentMemberExtensions.kt")
        public void testMultiDeclForComponentMemberExtensions() {
          runTest("compiler/testData/codegen/box/arrays/multiDecl/int/MultiDeclForComponentMemberExtensions.kt");
        }

        @TestMetadata("MultiDeclForComponentMemberExtensionsInExtensionFunction.kt")
        public void testMultiDeclForComponentMemberExtensionsInExtensionFunction() {
          runTest("compiler/testData/codegen/box/arrays/multiDecl/int/MultiDeclForComponentMemberExtensionsInExtensionFunction.kt");
        }
      }

      @TestMetadata("compiler/testData/codegen/box/arrays/multiDecl/long")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class Long extends AbstractLightAnalysisModeTest {
        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        public void testAllFilesPresentInLong() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/arrays/multiDecl/long"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("MultiDeclForComponentExtensions.kt")
        public void testMultiDeclForComponentExtensions() {
          runTest("compiler/testData/codegen/box/arrays/multiDecl/long/MultiDeclForComponentExtensions.kt");
        }

        @TestMetadata("MultiDeclForComponentExtensionsValCaptured.kt")
        public void testMultiDeclForComponentExtensionsValCaptured() {
          runTest("compiler/testData/codegen/box/arrays/multiDecl/long/MultiDeclForComponentExtensionsValCaptured.kt");
        }

        @TestMetadata("MultiDeclForComponentMemberExtensions.kt")
        public void testMultiDeclForComponentMemberExtensions() {
          runTest("compiler/testData/codegen/box/arrays/multiDecl/long/MultiDeclForComponentMemberExtensions.kt");
        }

        @TestMetadata("MultiDeclForComponentMemberExtensionsInExtensionFunction.kt")
        public void testMultiDeclForComponentMemberExtensionsInExtensionFunction() {
          runTest("compiler/testData/codegen/box/arrays/multiDecl/long/MultiDeclForComponentMemberExtensionsInExtensionFunction.kt");
        }
      }
    }
  }

  @TestMetadata("compiler/testData/codegen/box/assert")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Assert extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInAssert() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/assert"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("alwaysDisable.kt")
    public void testAlwaysDisable() {
      runTest("compiler/testData/codegen/box/assert/alwaysDisable.kt");
    }

    @TestMetadata("alwaysEnable.kt")
    public void testAlwaysEnable() {
      runTest("compiler/testData/codegen/box/assert/alwaysEnable.kt");
    }

    @TestMetadata("compiler/testData/codegen/box/assert/jvm")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Jvm extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInJvm() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/assert/jvm"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("assertionsEnabledBeforeClassInitializers.kt")
      public void testAssertionsEnabledBeforeClassInitializers() {
        runTest("compiler/testData/codegen/box/assert/jvm/assertionsEnabledBeforeClassInitializers.kt");
      }

      @TestMetadata("classAssertions.kt")
      public void testClassAssertions() {
        runTest("compiler/testData/codegen/box/assert/jvm/classAssertions.kt");
      }

      @TestMetadata("classAssertionsForCompanion.kt")
      public void testClassAssertionsForCompanion() {
        runTest("compiler/testData/codegen/box/assert/jvm/classAssertionsForCompanion.kt");
      }

      @TestMetadata("classAssertionsForInnerClasses.kt")
      public void testClassAssertionsForInnerClasses() {
        runTest("compiler/testData/codegen/box/assert/jvm/classAssertionsForInnerClasses.kt");
      }

      @TestMetadata("classAssertionsForLocalClasses.kt")
      public void testClassAssertionsForLocalClasses() {
        runTest("compiler/testData/codegen/box/assert/jvm/classAssertionsForLocalClasses.kt");
      }

      @TestMetadata("classAssertionsForNestedClasses.kt")
      public void testClassAssertionsForNestedClasses() {
        runTest("compiler/testData/codegen/box/assert/jvm/classAssertionsForNestedClasses.kt");
      }

      @TestMetadata("interfaceAssertionsDisabled.kt")
      public void testInterfaceAssertionsDisabled() {
        runTest("compiler/testData/codegen/box/assert/jvm/interfaceAssertionsDisabled.kt");
      }

      @TestMetadata("interfaceAssertionsEnabled.kt")
      public void testInterfaceAssertionsEnabled() {
        runTest("compiler/testData/codegen/box/assert/jvm/interfaceAssertionsEnabled.kt");
      }

      @TestMetadata("lambdaNotEvaluated.kt")
      public void testLambdaNotEvaluated() {
        runTest("compiler/testData/codegen/box/assert/jvm/lambdaNotEvaluated.kt");
      }

      @TestMetadata("localAnonymousFunction.kt")
      public void testLocalAnonymousFunction() {
        runTest("compiler/testData/codegen/box/assert/jvm/localAnonymousFunction.kt");
      }

      @TestMetadata("localClass.kt")
      public void testLocalClass() {
        runTest("compiler/testData/codegen/box/assert/jvm/localClass.kt");
      }

      @TestMetadata("localFunction.kt")
      public void testLocalFunction() {
        runTest("compiler/testData/codegen/box/assert/jvm/localFunction.kt");
      }

      @TestMetadata("localLambda.kt")
      public void testLocalLambda() {
        runTest("compiler/testData/codegen/box/assert/jvm/localLambda.kt");
      }

      @TestMetadata("localObject.kt")
      public void testLocalObject() {
        runTest("compiler/testData/codegen/box/assert/jvm/localObject.kt");
      }

      @TestMetadata("noUnnecessaryClassInitialization.kt")
      public void testNoUnnecessaryClassInitialization() {
        runTest("compiler/testData/codegen/box/assert/jvm/noUnnecessaryClassInitialization.kt");
      }

      @TestMetadata("nonLocalReturn.kt")
      public void testNonLocalReturn() {
        runTest("compiler/testData/codegen/box/assert/jvm/nonLocalReturn.kt");
      }

      @TestMetadata("ordinary.kt")
      public void testOrdinary() {
        runTest("compiler/testData/codegen/box/assert/jvm/ordinary.kt");
      }

      @TestMetadata("superClassInitializer.kt")
      public void testSuperClassInitializer() {
        runTest("compiler/testData/codegen/box/assert/jvm/superClassInitializer.kt");
      }

      @TestMetadata("suspendFunctionAssertionDisabled.kt")
      public void testSuspendFunctionAssertionDisabled() {
        runTest("compiler/testData/codegen/box/assert/jvm/suspendFunctionAssertionDisabled.kt");
      }

      @TestMetadata("suspendFunctionAssertionsEnabled.kt")
      public void testSuspendFunctionAssertionsEnabled() {
        runTest("compiler/testData/codegen/box/assert/jvm/suspendFunctionAssertionsEnabled.kt");
      }

      @TestMetadata("suspendLambdaAssertionsDisabled.kt")
      public void testSuspendLambdaAssertionsDisabled() {
        runTest("compiler/testData/codegen/box/assert/jvm/suspendLambdaAssertionsDisabled.kt");
      }

      @TestMetadata("suspendLambdaAssertionsEnabled.kt")
      public void testSuspendLambdaAssertionsEnabled() {
        runTest("compiler/testData/codegen/box/assert/jvm/suspendLambdaAssertionsEnabled.kt");
      }
    }
  }

  @TestMetadata("compiler/testData/codegen/box/basics")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Basics extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInBasics() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/basics"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("array_to_any.kt")
    public void testArray_to_any() {
      runTest("compiler/testData/codegen/box/basics/array_to_any.kt");
    }

    @TestMetadata("canonical_name.kt")
    public void testCanonical_name() {
      runTest("compiler/testData/codegen/box/basics/canonical_name.kt");
    }

    @TestMetadata("cast_null.kt")
    public void testCast_null() {
      runTest("compiler/testData/codegen/box/basics/cast_null.kt");
    }

    @TestMetadata("cast_simple.kt")
    public void testCast_simple() {
      runTest("compiler/testData/codegen/box/basics/cast_simple.kt");
    }

    @TestMetadata("check_type.kt")
    public void testCheck_type() {
      runTest("compiler/testData/codegen/box/basics/check_type.kt");
    }

    @TestMetadata("companion.kt")
    public void testCompanion() {
      runTest("compiler/testData/codegen/box/basics/companion.kt");
    }

    @TestMetadata("concatenation.kt")
    public void testConcatenation() {
      runTest("compiler/testData/codegen/box/basics/concatenation.kt");
    }

    @TestMetadata("const_infinity.kt")
    public void testConst_infinity() {
      runTest("compiler/testData/codegen/box/basics/const_infinity.kt");
    }

    @TestMetadata("expression_as_statement.kt")
    public void testExpression_as_statement() {
      runTest("compiler/testData/codegen/box/basics/expression_as_statement.kt");
    }

    @TestMetadata("k42000_1.kt")
    public void testK42000_1() {
      runTest("compiler/testData/codegen/box/basics/k42000_1.kt");
    }

    @TestMetadata("k42000_2.kt")
    public void testK42000_2() {
      runTest("compiler/testData/codegen/box/basics/k42000_2.kt");
    }

    @TestMetadata("kt7972.kt")
    public void testKt7972() {
      runTest("compiler/testData/codegen/box/basics/kt7972.kt");
    }

    @TestMetadata("local_variable.kt")
    public void testLocal_variable() {
      runTest("compiler/testData/codegen/box/basics/local_variable.kt");
    }

    @TestMetadata("null_check.kt")
    public void testNull_check() {
      runTest("compiler/testData/codegen/box/basics/null_check.kt");
    }

    @TestMetadata("safe_cast.kt")
    public void testSafe_cast() {
      runTest("compiler/testData/codegen/box/basics/safe_cast.kt");
    }

    @TestMetadata("spread_operator_0.kt")
    public void testSpread_operator_0() {
      runTest("compiler/testData/codegen/box/basics/spread_operator_0.kt");
    }

    @TestMetadata("statements0.kt")
    public void testStatements0() {
      runTest("compiler/testData/codegen/box/basics/statements0.kt");
    }

    @TestMetadata("superFunCall.kt")
    public void testSuperFunCall() {
      runTest("compiler/testData/codegen/box/basics/superFunCall.kt");
    }

    @TestMetadata("superGetterCall.kt")
    public void testSuperGetterCall() {
      runTest("compiler/testData/codegen/box/basics/superGetterCall.kt");
    }

    @TestMetadata("superSetterCall.kt")
    public void testSuperSetterCall() {
      runTest("compiler/testData/codegen/box/basics/superSetterCall.kt");
    }

    @TestMetadata("typealias1.kt")
    public void testTypealias1() {
      runTest("compiler/testData/codegen/box/basics/typealias1.kt");
    }

    @TestMetadata("unchecked_cast1.kt")
    public void testUnchecked_cast1() {
      runTest("compiler/testData/codegen/box/basics/unchecked_cast1.kt");
    }

    @TestMetadata("unchecked_cast10.kt")
    public void testUnchecked_cast10() {
      runTest("compiler/testData/codegen/box/basics/unchecked_cast10.kt");
    }

    @TestMetadata("unchecked_cast11.kt")
    public void testUnchecked_cast11() {
      runTest("compiler/testData/codegen/box/basics/unchecked_cast11.kt");
    }

    @TestMetadata("unchecked_cast12.kt")
    public void testUnchecked_cast12() {
      runTest("compiler/testData/codegen/box/basics/unchecked_cast12.kt");
    }

    @TestMetadata("unchecked_cast13.kt")
    public void testUnchecked_cast13() {
      runTest("compiler/testData/codegen/box/basics/unchecked_cast13.kt");
    }

    @TestMetadata("unchecked_cast2.kt")
    public void testUnchecked_cast2() {
      runTest("compiler/testData/codegen/box/basics/unchecked_cast2.kt");
    }

    @TestMetadata("unchecked_cast3.kt")
    public void testUnchecked_cast3() {
      runTest("compiler/testData/codegen/box/basics/unchecked_cast3.kt");
    }

    @TestMetadata("unchecked_cast4.kt")
    public void testUnchecked_cast4() {
      runTest("compiler/testData/codegen/box/basics/unchecked_cast4.kt");
    }

    @TestMetadata("unchecked_cast5.kt")
    public void testUnchecked_cast5() {
      runTest("compiler/testData/codegen/box/basics/unchecked_cast5.kt");
    }

    @TestMetadata("unchecked_cast6.kt")
    public void testUnchecked_cast6() {
      runTest("compiler/testData/codegen/box/basics/unchecked_cast6.kt");
    }

    @TestMetadata("unchecked_cast6x.kt")
    public void testUnchecked_cast6x() {
      runTest("compiler/testData/codegen/box/basics/unchecked_cast6x.kt");
    }

    @TestMetadata("unchecked_cast7.kt")
    public void testUnchecked_cast7() {
      runTest("compiler/testData/codegen/box/basics/unchecked_cast7.kt");
    }

    @TestMetadata("unchecked_cast8.kt")
    public void testUnchecked_cast8() {
      runTest("compiler/testData/codegen/box/basics/unchecked_cast8.kt");
    }

    @TestMetadata("unchecked_cast9.kt")
    public void testUnchecked_cast9() {
      runTest("compiler/testData/codegen/box/basics/unchecked_cast9.kt");
    }

    @TestMetadata("unit1.kt")
    public void testUnit1() {
      runTest("compiler/testData/codegen/box/basics/unit1.kt");
    }

    @TestMetadata("unit2.kt")
    public void testUnit2() {
      runTest("compiler/testData/codegen/box/basics/unit2.kt");
    }

    @TestMetadata("unit3.kt")
    public void testUnit3() {
      runTest("compiler/testData/codegen/box/basics/unit3.kt");
    }

    @TestMetadata("unit4.kt")
    public void testUnit4() {
      runTest("compiler/testData/codegen/box/basics/unit4.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/bce")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Bce extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInBce() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/bce"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("bceCases.kt")
    public void testBceCases() {
      runTest("compiler/testData/codegen/box/bce/bceCases.kt");
    }

    @TestMetadata("customGetter.kt")
    public void testCustomGetter() {
      runTest("compiler/testData/codegen/box/bce/customGetter.kt");
    }

    @TestMetadata("delegatedProperty.kt")
    public void testDelegatedProperty() {
      runTest("compiler/testData/codegen/box/bce/delegatedProperty.kt");
    }

    @TestMetadata("differentArrays.kt")
    public void testDifferentArrays() {
      runTest("compiler/testData/codegen/box/bce/differentArrays.kt");
    }

    @TestMetadata("differentObjects.kt")
    public void testDifferentObjects() {
      runTest("compiler/testData/codegen/box/bce/differentObjects.kt");
    }

    @TestMetadata("forDownToSize.kt")
    public void testForDownToSize() {
      runTest("compiler/testData/codegen/box/bce/forDownToSize.kt");
    }

    @TestMetadata("forDownToWithStep.kt")
    public void testForDownToWithStep() {
      runTest("compiler/testData/codegen/box/bce/forDownToWithStep.kt");
    }

    @TestMetadata("forEachIndexedTest.kt")
    public void testForEachIndexedTest() {
      runTest("compiler/testData/codegen/box/bce/forEachIndexedTest.kt");
    }

    @TestMetadata("forEachIndicies.kt")
    public void testForEachIndicies() {
      runTest("compiler/testData/codegen/box/bce/forEachIndicies.kt");
    }

    @TestMetadata("forIndiciesWithStep.kt")
    public void testForIndiciesWithStep() {
      runTest("compiler/testData/codegen/box/bce/forIndiciesWithStep.kt");
    }

    @TestMetadata("forRangeToSize.kt")
    public void testForRangeToSize() {
      runTest("compiler/testData/codegen/box/bce/forRangeToSize.kt");
    }

    @TestMetadata("forRangeToWithStep.kt")
    public void testForRangeToWithStep() {
      runTest("compiler/testData/codegen/box/bce/forRangeToWithStep.kt");
    }

    @TestMetadata("forReversed.kt")
    public void testForReversed() {
      runTest("compiler/testData/codegen/box/bce/forReversed.kt");
    }

    @TestMetadata("forUntilSize.kt")
    public void testForUntilSize() {
      runTest("compiler/testData/codegen/box/bce/forUntilSize.kt");
    }

    @TestMetadata("forUntilWithStep.kt")
    public void testForUntilWithStep() {
      runTest("compiler/testData/codegen/box/bce/forUntilWithStep.kt");
    }

    @TestMetadata("forWithIndex.kt")
    public void testForWithIndex() {
      runTest("compiler/testData/codegen/box/bce/forWithIndex.kt");
    }

    @TestMetadata("inheritance.kt")
    public void testInheritance() {
      runTest("compiler/testData/codegen/box/bce/inheritance.kt");
    }

    @TestMetadata("withGetter.kt")
    public void testWithGetter() {
      runTest("compiler/testData/codegen/box/bce/withGetter.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/binaryOp")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class BinaryOp extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInBinaryOp() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/binaryOp"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("bitwiseOp.kt")
    public void testBitwiseOp() {
      runTest("compiler/testData/codegen/box/binaryOp/bitwiseOp.kt");
    }

    @TestMetadata("bitwiseOpAny.kt")
    public void testBitwiseOpAny() {
      runTest("compiler/testData/codegen/box/binaryOp/bitwiseOpAny.kt");
    }

    @TestMetadata("bitwiseOpNullable.kt")
    public void testBitwiseOpNullable() {
      runTest("compiler/testData/codegen/box/binaryOp/bitwiseOpNullable.kt");
    }

    @TestMetadata("boxingOfLiteralReceiverWithIntegerValueType.kt")
    public void testBoxingOfLiteralReceiverWithIntegerValueType() {
      runTest("compiler/testData/codegen/box/binaryOp/boxingOfLiteralReceiverWithIntegerValueType.kt");
    }

    @TestMetadata("call.kt")
    public void testCall() {
      runTest("compiler/testData/codegen/box/binaryOp/call.kt");
    }

    @TestMetadata("callAny.kt")
    public void testCallAny() {
      runTest("compiler/testData/codegen/box/binaryOp/callAny.kt");
    }

    @TestMetadata("callNullable.kt")
    public void testCallNullable() {
      runTest("compiler/testData/codegen/box/binaryOp/callNullable.kt");
    }

    @TestMetadata("compareBoxedChars.kt")
    public void testCompareBoxedChars() {
      runTest("compiler/testData/codegen/box/binaryOp/compareBoxedChars.kt");
    }

    @TestMetadata("compareWithBoxedDouble.kt")
    public void testCompareWithBoxedDouble() {
      runTest("compiler/testData/codegen/box/binaryOp/compareWithBoxedDouble.kt");
    }

    @TestMetadata("compareWithBoxedLong.kt")
    public void testCompareWithBoxedLong() {
      runTest("compiler/testData/codegen/box/binaryOp/compareWithBoxedLong.kt");
    }

    @TestMetadata("compareWithBoxedNotNullDouble.kt")
    public void testCompareWithBoxedNotNullDouble() {
      runTest("compiler/testData/codegen/box/binaryOp/compareWithBoxedNotNullDouble.kt");
    }

    @TestMetadata("compareWithBoxedNotNullLong.kt")
    public void testCompareWithBoxedNotNullLong() {
      runTest("compiler/testData/codegen/box/binaryOp/compareWithBoxedNotNullLong.kt");
    }

    @TestMetadata("divisionByZero.kt")
    public void testDivisionByZero() {
      runTest("compiler/testData/codegen/box/binaryOp/divisionByZero.kt");
    }

    @TestMetadata("eqNullableDoubles.kt")
    public void testEqNullableDoubles() {
      runTest("compiler/testData/codegen/box/binaryOp/eqNullableDoubles.kt");
    }

    @TestMetadata("eqNullableDoublesToInt.kt")
    public void testEqNullableDoublesToInt() {
      runTest("compiler/testData/codegen/box/binaryOp/eqNullableDoublesToInt.kt");
    }

    @TestMetadata("eqNullableDoublesToIntWithTP.kt")
    public void testEqNullableDoublesToIntWithTP() {
      runTest("compiler/testData/codegen/box/binaryOp/eqNullableDoublesToIntWithTP.kt");
    }

    @TestMetadata("eqNullableDoublesWithTP.kt")
    public void testEqNullableDoublesWithTP() {
      runTest("compiler/testData/codegen/box/binaryOp/eqNullableDoublesWithTP.kt");
    }

    @TestMetadata("eqNullableShortToShort.kt")
    public void testEqNullableShortToShort() {
      runTest("compiler/testData/codegen/box/binaryOp/eqNullableShortToShort.kt");
    }

    @TestMetadata("eqNullableToPrimitiveWithSideEffects.kt")
    public void testEqNullableToPrimitiveWithSideEffects() {
      runTest("compiler/testData/codegen/box/binaryOp/eqNullableToPrimitiveWithSideEffects.kt");
    }

    @TestMetadata("intrinsic.kt")
    public void testIntrinsic() {
      runTest("compiler/testData/codegen/box/binaryOp/intrinsic.kt");
    }

    @TestMetadata("intrinsicAny.kt")
    public void testIntrinsicAny() {
      runTest("compiler/testData/codegen/box/binaryOp/intrinsicAny.kt");
    }

    @TestMetadata("intrinsicNullable.kt")
    public void testIntrinsicNullable() {
      runTest("compiler/testData/codegen/box/binaryOp/intrinsicNullable.kt");
    }

    @TestMetadata("kt11163.kt")
    public void testKt11163() {
      runTest("compiler/testData/codegen/box/binaryOp/kt11163.kt");
    }

    @TestMetadata("kt11163_properIeee754comparisons.kt")
    public void testKt11163_properIeee754comparisons() {
      runTest("compiler/testData/codegen/box/binaryOp/kt11163_properIeee754comparisons.kt");
    }

    @TestMetadata("kt23030_properIeee754comparisons.kt")
    public void testKt23030_properIeee754comparisons() {
      runTest("compiler/testData/codegen/box/binaryOp/kt23030_properIeee754comparisons.kt");
    }

    @TestMetadata("kt44402.kt")
    public void testKt44402() {
      runTest("compiler/testData/codegen/box/binaryOp/kt44402.kt");
    }

    @TestMetadata("kt6747_identityEquals.kt")
    public void testKt6747_identityEquals() {
      runTest("compiler/testData/codegen/box/binaryOp/kt6747_identityEquals.kt");
    }

    @TestMetadata("overflowChar.kt")
    public void testOverflowChar() {
      runTest("compiler/testData/codegen/box/binaryOp/overflowChar.kt");
    }

    @TestMetadata("overflowInt.kt")
    public void testOverflowInt() {
      runTest("compiler/testData/codegen/box/binaryOp/overflowInt.kt");
    }

    @TestMetadata("overflowLong.kt")
    public void testOverflowLong() {
      runTest("compiler/testData/codegen/box/binaryOp/overflowLong.kt");
    }

    @TestMetadata("primitiveEqualsSafeCall.kt")
    public void testPrimitiveEqualsSafeCall() {
      runTest("compiler/testData/codegen/box/binaryOp/primitiveEqualsSafeCall.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/boxing")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Boxing extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInBoxing() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/boxing"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("box_cache0.kt")
    public void testBox_cache0() {
      runTest("compiler/testData/codegen/box/boxing/box_cache0.kt");
    }

    @TestMetadata("boxing0.kt")
    public void testBoxing0() {
      runTest("compiler/testData/codegen/box/boxing/boxing0.kt");
    }

    @TestMetadata("boxing1.kt")
    public void testBoxing1() {
      runTest("compiler/testData/codegen/box/boxing/boxing1.kt");
    }

    @TestMetadata("boxing10.kt")
    public void testBoxing10() {
      runTest("compiler/testData/codegen/box/boxing/boxing10.kt");
    }

    @TestMetadata("boxing11.kt")
    public void testBoxing11() {
      runTest("compiler/testData/codegen/box/boxing/boxing11.kt");
    }

    @TestMetadata("boxing12.kt")
    public void testBoxing12() {
      runTest("compiler/testData/codegen/box/boxing/boxing12.kt");
    }

    @TestMetadata("boxing13.kt")
    public void testBoxing13() {
      runTest("compiler/testData/codegen/box/boxing/boxing13.kt");
    }

    @TestMetadata("boxing14.kt")
    public void testBoxing14() {
      runTest("compiler/testData/codegen/box/boxing/boxing14.kt");
    }

    @TestMetadata("boxing15.kt")
    public void testBoxing15() {
      runTest("compiler/testData/codegen/box/boxing/boxing15.kt");
    }

    @TestMetadata("boxing2.kt")
    public void testBoxing2() {
      runTest("compiler/testData/codegen/box/boxing/boxing2.kt");
    }

    @TestMetadata("boxing3.kt")
    public void testBoxing3() {
      runTest("compiler/testData/codegen/box/boxing/boxing3.kt");
    }

    @TestMetadata("boxing4.kt")
    public void testBoxing4() {
      runTest("compiler/testData/codegen/box/boxing/boxing4.kt");
    }

    @TestMetadata("boxing5.kt")
    public void testBoxing5() {
      runTest("compiler/testData/codegen/box/boxing/boxing5.kt");
    }

    @TestMetadata("boxing6.kt")
    public void testBoxing6() {
      runTest("compiler/testData/codegen/box/boxing/boxing6.kt");
    }

    @TestMetadata("boxing7.kt")
    public void testBoxing7() {
      runTest("compiler/testData/codegen/box/boxing/boxing7.kt");
    }

    @TestMetadata("boxing8.kt")
    public void testBoxing8() {
      runTest("compiler/testData/codegen/box/boxing/boxing8.kt");
    }

    @TestMetadata("boxing9.kt")
    public void testBoxing9() {
      runTest("compiler/testData/codegen/box/boxing/boxing9.kt");
    }

    @TestMetadata("kt53100_casts.kt")
    public void testKt53100_casts() {
      runTest("compiler/testData/codegen/box/boxing/kt53100_casts.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/boxingOptimization")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class BoxingOptimization extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInBoxingOptimization() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/boxingOptimization"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("boxedBooleanIdentity.kt")
    public void testBoxedBooleanIdentity() {
      runTest("compiler/testData/codegen/box/boxingOptimization/boxedBooleanIdentity.kt");
    }

    @TestMetadata("boxedIntegersCmp.kt")
    public void testBoxedIntegersCmp() {
      runTest("compiler/testData/codegen/box/boxingOptimization/boxedIntegersCmp.kt");
    }

    @TestMetadata("boxedPrimitivesAreEqual.kt")
    public void testBoxedPrimitivesAreEqual() {
      runTest("compiler/testData/codegen/box/boxingOptimization/boxedPrimitivesAreEqual.kt");
    }

    @TestMetadata("boxedRealsCmp.kt")
    public void testBoxedRealsCmp() {
      runTest("compiler/testData/codegen/box/boxingOptimization/boxedRealsCmp.kt");
    }

    @TestMetadata("casts.kt")
    public void testCasts() {
      runTest("compiler/testData/codegen/box/boxingOptimization/casts.kt");
    }

    @TestMetadata("checkcastAndInstanceOf.kt")
    public void testCheckcastAndInstanceOf() {
      runTest("compiler/testData/codegen/box/boxingOptimization/checkcastAndInstanceOf.kt");
    }

    @TestMetadata("checkcastAndInstanceOf2.kt")
    public void testCheckcastAndInstanceOf2() {
      runTest("compiler/testData/codegen/box/boxingOptimization/checkcastAndInstanceOf2.kt");
    }

    @TestMetadata("explicitEqualsOnDouble.kt")
    public void testExplicitEqualsOnDouble() {
      runTest("compiler/testData/codegen/box/boxingOptimization/explicitEqualsOnDouble.kt");
    }

    @TestMetadata("fold.kt")
    public void testFold() {
      runTest("compiler/testData/codegen/box/boxingOptimization/fold.kt");
    }

    @TestMetadata("foldRange.kt")
    public void testFoldRange() {
      runTest("compiler/testData/codegen/box/boxingOptimization/foldRange.kt");
    }

    @TestMetadata("intCompareTo.kt")
    public void testIntCompareTo() {
      runTest("compiler/testData/codegen/box/boxingOptimization/intCompareTo.kt");
    }

    @TestMetadata("kClassEquals.kt")
    public void testKClassEquals() {
      runTest("compiler/testData/codegen/box/boxingOptimization/kClassEquals.kt");
    }

    @TestMetadata("kt15871.kt")
    public void testKt15871() {
      runTest("compiler/testData/codegen/box/boxingOptimization/kt15871.kt");
    }

    @TestMetadata("kt17748.kt")
    public void testKt17748() {
      runTest("compiler/testData/codegen/box/boxingOptimization/kt17748.kt");
    }

    @TestMetadata("kt19767.kt")
    public void testKt19767() {
      runTest("compiler/testData/codegen/box/boxingOptimization/kt19767.kt");
    }

    @TestMetadata("kt19767_2.kt")
    public void testKt19767_2() {
      runTest("compiler/testData/codegen/box/boxingOptimization/kt19767_2.kt");
    }

    @TestMetadata("kt19767_3.kt")
    public void testKt19767_3() {
      runTest("compiler/testData/codegen/box/boxingOptimization/kt19767_3.kt");
    }

    @TestMetadata("kt19767_chain.kt")
    public void testKt19767_chain() {
      runTest("compiler/testData/codegen/box/boxingOptimization/kt19767_chain.kt");
    }

    @TestMetadata("kt46859.kt")
    public void testKt46859() {
      runTest("compiler/testData/codegen/box/boxingOptimization/kt46859.kt");
    }

    @TestMetadata("kt48394.kt")
    public void testKt48394() {
      runTest("compiler/testData/codegen/box/boxingOptimization/kt48394.kt");
    }

    @TestMetadata("kt49092a.kt")
    public void testKt49092a() {
      runTest("compiler/testData/codegen/box/boxingOptimization/kt49092a.kt");
    }

    @TestMetadata("kt49092b.kt")
    public void testKt49092b() {
      runTest("compiler/testData/codegen/box/boxingOptimization/kt49092b.kt");
    }

    @TestMetadata("kt49092c.kt")
    public void testKt49092c() {
      runTest("compiler/testData/codegen/box/boxingOptimization/kt49092c.kt");
    }

    @TestMetadata("kt49092d.kt")
    public void testKt49092d() {
      runTest("compiler/testData/codegen/box/boxingOptimization/kt49092d.kt");
    }

    @TestMetadata("kt49092e.kt")
    public void testKt49092e() {
      runTest("compiler/testData/codegen/box/boxingOptimization/kt49092e.kt");
    }

    @TestMetadata("kt49092f.kt")
    public void testKt49092f() {
      runTest("compiler/testData/codegen/box/boxingOptimization/kt49092f.kt");
    }

    @TestMetadata("kt49548.kt")
    public void testKt49548() {
      runTest("compiler/testData/codegen/box/boxingOptimization/kt49548.kt");
    }

    @TestMetadata("kt49548a.kt")
    public void testKt49548a() {
      runTest("compiler/testData/codegen/box/boxingOptimization/kt49548a.kt");
    }

    @TestMetadata("kt5493.kt")
    public void testKt5493() {
      runTest("compiler/testData/codegen/box/boxingOptimization/kt5493.kt");
    }

    @TestMetadata("kt5588.kt")
    public void testKt5588() {
      runTest("compiler/testData/codegen/box/boxingOptimization/kt5588.kt");
    }

    @TestMetadata("kt5844.kt")
    public void testKt5844() {
      runTest("compiler/testData/codegen/box/boxingOptimization/kt5844.kt");
    }

    @TestMetadata("kt6047.kt")
    public void testKt6047() {
      runTest("compiler/testData/codegen/box/boxingOptimization/kt6047.kt");
    }

    @TestMetadata("kt6842.kt")
    public void testKt6842() {
      runTest("compiler/testData/codegen/box/boxingOptimization/kt6842.kt");
    }

    @TestMetadata("maxMinByOrNull.kt")
    public void testMaxMinByOrNull() {
      runTest("compiler/testData/codegen/box/boxingOptimization/maxMinByOrNull.kt");
    }

    @TestMetadata("nullCheck.kt")
    public void testNullCheck() {
      runTest("compiler/testData/codegen/box/boxingOptimization/nullCheck.kt");
    }

    @TestMetadata("progressions.kt")
    public void testProgressions() {
      runTest("compiler/testData/codegen/box/boxingOptimization/progressions.kt");
    }

    @TestMetadata("safeCallWithElvis.kt")
    public void testSafeCallWithElvis() {
      runTest("compiler/testData/codegen/box/boxingOptimization/safeCallWithElvis.kt");
    }

    @TestMetadata("safeCallWithElvisAndEnhancedNullability.kt")
    public void testSafeCallWithElvisAndEnhancedNullability() {
      runTest("compiler/testData/codegen/box/boxingOptimization/safeCallWithElvisAndEnhancedNullability.kt");
    }

    @TestMetadata("safeCallWithElvisMultipleFiles.kt")
    public void testSafeCallWithElvisMultipleFiles() {
      runTest("compiler/testData/codegen/box/boxingOptimization/safeCallWithElvisMultipleFiles.kt");
    }

    @TestMetadata("simple.kt")
    public void testSimple() {
      runTest("compiler/testData/codegen/box/boxingOptimization/simple.kt");
    }

    @TestMetadata("simpleUninitializedMerge.kt")
    public void testSimpleUninitializedMerge() {
      runTest("compiler/testData/codegen/box/boxingOptimization/simpleUninitializedMerge.kt");
    }

    @TestMetadata("taintedValues.kt")
    public void testTaintedValues() {
      runTest("compiler/testData/codegen/box/boxingOptimization/taintedValues.kt");
    }

    @TestMetadata("taintedValuesBox.kt")
    public void testTaintedValuesBox() {
      runTest("compiler/testData/codegen/box/boxingOptimization/taintedValuesBox.kt");
    }

    @TestMetadata("unsafeRemoving.kt")
    public void testUnsafeRemoving() {
      runTest("compiler/testData/codegen/box/boxingOptimization/unsafeRemoving.kt");
    }

    @TestMetadata("unsignedArrayForEach.kt")
    public void testUnsignedArrayForEach() {
      runTest("compiler/testData/codegen/box/boxingOptimization/unsignedArrayForEach.kt");
    }

    @TestMetadata("variables.kt")
    public void testVariables() {
      runTest("compiler/testData/codegen/box/boxingOptimization/variables.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/branching")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Branching extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    @TestMetadata("advanced_when2.kt")
    public void testAdvanced_when2() {
      runTest("compiler/testData/codegen/box/branching/advanced_when2.kt");
    }

    @TestMetadata("advanced_when5.kt")
    public void testAdvanced_when5() {
      runTest("compiler/testData/codegen/box/branching/advanced_when5.kt");
    }

    public void testAllFilesPresentInBranching() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/branching"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("if_else.kt")
    public void testIf_else() {
      runTest("compiler/testData/codegen/box/branching/if_else.kt");
    }

    @TestMetadata("when2.kt")
    public void testWhen2() {
      runTest("compiler/testData/codegen/box/branching/when2.kt");
    }

    @TestMetadata("when4.kt")
    public void testWhen4() {
      runTest("compiler/testData/codegen/box/branching/when4.kt");
    }

    @TestMetadata("when5.kt")
    public void testWhen5() {
      runTest("compiler/testData/codegen/box/branching/when5.kt");
    }

    @TestMetadata("when6.kt")
    public void testWhen6() {
      runTest("compiler/testData/codegen/box/branching/when6.kt");
    }

    @TestMetadata("when7.kt")
    public void testWhen7() {
      runTest("compiler/testData/codegen/box/branching/when7.kt");
    }

    @TestMetadata("when8.kt")
    public void testWhen8() {
      runTest("compiler/testData/codegen/box/branching/when8.kt");
    }

    @TestMetadata("when9.kt")
    public void testWhen9() {
      runTest("compiler/testData/codegen/box/branching/when9.kt");
    }

    @TestMetadata("when_through.kt")
    public void testWhen_through() {
      runTest("compiler/testData/codegen/box/branching/when_through.kt");
    }

    @TestMetadata("when_with_try1.kt")
    public void testWhen_with_try1() {
      runTest("compiler/testData/codegen/box/branching/when_with_try1.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/bridges")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Bridges extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    @TestMetadata("abstractOverrideBridge.kt")
    public void testAbstractOverrideBridge() {
      runTest("compiler/testData/codegen/box/bridges/abstractOverrideBridge.kt");
    }

    public void testAllFilesPresentInBridges() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/bridges"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("bridgeInInterface.kt")
    public void testBridgeInInterface() {
      runTest("compiler/testData/codegen/box/bridges/bridgeInInterface.kt");
    }

    @TestMetadata("bridgeInInterfaceWithProperties.kt")
    public void testBridgeInInterfaceWithProperties() {
      runTest("compiler/testData/codegen/box/bridges/bridgeInInterfaceWithProperties.kt");
    }

    @TestMetadata("complexMultiInheritance.kt")
    public void testComplexMultiInheritance() {
      runTest("compiler/testData/codegen/box/bridges/complexMultiInheritance.kt");
    }

    @TestMetadata("complexTraitImpl.kt")
    public void testComplexTraitImpl() {
      runTest("compiler/testData/codegen/box/bridges/complexTraitImpl.kt");
    }

    @TestMetadata("covariantGenericDiamond.kt")
    public void testCovariantGenericDiamond() {
      runTest("compiler/testData/codegen/box/bridges/covariantGenericDiamond.kt");
    }

    @TestMetadata("delegation.kt")
    public void testDelegation() {
      runTest("compiler/testData/codegen/box/bridges/delegation.kt");
    }

    @TestMetadata("delegationComplex.kt")
    public void testDelegationComplex() {
      runTest("compiler/testData/codegen/box/bridges/delegationComplex.kt");
    }

    @TestMetadata("delegationComplexWithList.kt")
    public void testDelegationComplexWithList() {
      runTest("compiler/testData/codegen/box/bridges/delegationComplexWithList.kt");
    }

    @TestMetadata("delegationProperty.kt")
    public void testDelegationProperty() {
      runTest("compiler/testData/codegen/box/bridges/delegationProperty.kt");
    }

    @TestMetadata("diamond.kt")
    public void testDiamond() {
      runTest("compiler/testData/codegen/box/bridges/diamond.kt");
    }

    @TestMetadata("fakeCovariantOverride.kt")
    public void testFakeCovariantOverride() {
      runTest("compiler/testData/codegen/box/bridges/fakeCovariantOverride.kt");
    }

    @TestMetadata("fakeGenericCovariantOverride.kt")
    public void testFakeGenericCovariantOverride() {
      runTest("compiler/testData/codegen/box/bridges/fakeGenericCovariantOverride.kt");
    }

    @TestMetadata("fakeGenericCovariantOverrideWithDelegation.kt")
    public void testFakeGenericCovariantOverrideWithDelegation() {
      runTest("compiler/testData/codegen/box/bridges/fakeGenericCovariantOverrideWithDelegation.kt");
    }

    @TestMetadata("fakeOverrideFromInterfaceThroughIntermediateClass.kt")
    public void testFakeOverrideFromInterfaceThroughIntermediateClass() {
      runTest("compiler/testData/codegen/box/bridges/fakeOverrideFromInterfaceThroughIntermediateClass.kt");
    }

    @TestMetadata("fakeOverrideMultiFile.kt")
    public void testFakeOverrideMultiFile() {
      runTest("compiler/testData/codegen/box/bridges/fakeOverrideMultiFile.kt");
    }

    @TestMetadata("fakeOverrideOfTraitImpl.kt")
    public void testFakeOverrideOfTraitImpl() {
      runTest("compiler/testData/codegen/box/bridges/fakeOverrideOfTraitImpl.kt");
    }

    @TestMetadata("fakeOverrideThroughGenericSuperclass.kt")
    public void testFakeOverrideThroughGenericSuperclass() {
      runTest("compiler/testData/codegen/box/bridges/fakeOverrideThroughGenericSuperclass.kt");
    }

    @TestMetadata("fakeOverrideWithSeveralSuperDeclarations.kt")
    public void testFakeOverrideWithSeveralSuperDeclarations() {
      runTest("compiler/testData/codegen/box/bridges/fakeOverrideWithSeveralSuperDeclarations.kt");
    }

    @TestMetadata("fakeOverrideWithSynthesizedImplementation.kt")
    public void testFakeOverrideWithSynthesizedImplementation() {
      runTest("compiler/testData/codegen/box/bridges/fakeOverrideWithSynthesizedImplementation.kt");
    }

    @TestMetadata("genericProperty.kt")
    public void testGenericProperty() {
      runTest("compiler/testData/codegen/box/bridges/genericProperty.kt");
    }

    @TestMetadata("innerClassTypeParameters.kt")
    public void testInnerClassTypeParameters() {
      runTest("compiler/testData/codegen/box/bridges/innerClassTypeParameters.kt");
    }

    @TestMetadata("internalMethodFakeOverrideInFriendModule.kt")
    public void testInternalMethodFakeOverrideInFriendModule() {
      runTest("compiler/testData/codegen/box/bridges/internalMethodFakeOverrideInFriendModule.kt");
    }

    @TestMetadata("internalMethodOverrideInFriendModule.kt")
    public void testInternalMethodOverrideInFriendModule() {
      runTest("compiler/testData/codegen/box/bridges/internalMethodOverrideInFriendModule.kt");
    }

    @TestMetadata("internalMethodOverrideInOtherModule.kt")
    public void testInternalMethodOverrideInOtherModule() {
      runTest("compiler/testData/codegen/box/bridges/internalMethodOverrideInOtherModule.kt");
    }

    @TestMetadata("internalMethodOverrideMultipleInheritance.kt")
    public void testInternalMethodOverrideMultipleInheritance() {
      runTest("compiler/testData/codegen/box/bridges/internalMethodOverrideMultipleInheritance.kt");
    }

    @TestMetadata("internalMethodOverridePublishedApi.kt")
    public void testInternalMethodOverridePublishedApi() {
      runTest("compiler/testData/codegen/box/bridges/internalMethodOverridePublishedApi.kt");
    }

    @TestMetadata("kt12416.kt")
    public void testKt12416() {
      runTest("compiler/testData/codegen/box/bridges/kt12416.kt");
    }

    @TestMetadata("kt1939.kt")
    public void testKt1939() {
      runTest("compiler/testData/codegen/box/bridges/kt1939.kt");
    }

    @TestMetadata("kt1959.kt")
    public void testKt1959() {
      runTest("compiler/testData/codegen/box/bridges/kt1959.kt");
    }

    @TestMetadata("kt24193.kt")
    public void testKt24193() {
      runTest("compiler/testData/codegen/box/bridges/kt24193.kt");
    }

    @TestMetadata("kt2498.kt")
    public void testKt2498() {
      runTest("compiler/testData/codegen/box/bridges/kt2498.kt");
    }

    @TestMetadata("kt2702.kt")
    public void testKt2702() {
      runTest("compiler/testData/codegen/box/bridges/kt2702.kt");
    }

    @TestMetadata("kt2833.kt")
    public void testKt2833() {
      runTest("compiler/testData/codegen/box/bridges/kt2833.kt");
    }

    @TestMetadata("kt2920.kt")
    public void testKt2920() {
      runTest("compiler/testData/codegen/box/bridges/kt2920.kt");
    }

    @TestMetadata("kt318.kt")
    public void testKt318() {
      runTest("compiler/testData/codegen/box/bridges/kt318.kt");
    }

    @TestMetadata("kt42137.kt")
    public void testKt42137() {
      runTest("compiler/testData/codegen/box/bridges/kt42137.kt");
    }

    @TestMetadata("kt46389.kt")
    public void testKt46389() {
      runTest("compiler/testData/codegen/box/bridges/kt46389.kt");
    }

    @TestMetadata("kt46389_jvmDefault.kt")
    public void testKt46389_jvmDefault() {
      runTest("compiler/testData/codegen/box/bridges/kt46389_jvmDefault.kt");
    }

    @TestMetadata("longChainOneBridge.kt")
    public void testLongChainOneBridge() {
      runTest("compiler/testData/codegen/box/bridges/longChainOneBridge.kt");
    }

    @TestMetadata("manyTypeArgumentsSubstitutedSuccessively.kt")
    public void testManyTypeArgumentsSubstitutedSuccessively() {
      runTest("compiler/testData/codegen/box/bridges/manyTypeArgumentsSubstitutedSuccessively.kt");
    }

    @TestMetadata("methodFromTrait.kt")
    public void testMethodFromTrait() {
      runTest("compiler/testData/codegen/box/bridges/methodFromTrait.kt");
    }

    @TestMetadata("methodWithDefaultParameter.kt")
    public void testMethodWithDefaultParameter() {
      runTest("compiler/testData/codegen/box/bridges/methodWithDefaultParameter.kt");
    }

    @TestMetadata("multipleModules1.kt")
    public void testMultipleModules1() {
      runTest("compiler/testData/codegen/box/bridges/multipleModules1.kt");
    }

    @TestMetadata("multipleModules2.kt")
    public void testMultipleModules2() {
      runTest("compiler/testData/codegen/box/bridges/multipleModules2.kt");
    }

    @TestMetadata("nestedClassTypeParameters.kt")
    public void testNestedClassTypeParameters() {
      runTest("compiler/testData/codegen/box/bridges/nestedClassTypeParameters.kt");
    }

    @TestMetadata("noBridgeOnMutableCollectionInheritance.kt")
    public void testNoBridgeOnMutableCollectionInheritance() {
      runTest("compiler/testData/codegen/box/bridges/noBridgeOnMutableCollectionInheritance.kt");
    }

    @TestMetadata("objectClone.kt")
    public void testObjectClone() {
      runTest("compiler/testData/codegen/box/bridges/objectClone.kt");
    }

    @TestMetadata("overrideAbstractProperty.kt")
    public void testOverrideAbstractProperty() {
      runTest("compiler/testData/codegen/box/bridges/overrideAbstractProperty.kt");
    }

    @TestMetadata("overrideReturnType.kt")
    public void testOverrideReturnType() {
      runTest("compiler/testData/codegen/box/bridges/overrideReturnType.kt");
    }

    @TestMetadata("overrideWithValueClassReturn.kt")
    public void testOverrideWithValueClassReturn() {
      runTest("compiler/testData/codegen/box/bridges/overrideWithValueClassReturn.kt");
    }

    @TestMetadata("propertyAccessorsWithoutBody.kt")
    public void testPropertyAccessorsWithoutBody() {
      runTest("compiler/testData/codegen/box/bridges/propertyAccessorsWithoutBody.kt");
    }

    @TestMetadata("propertyDiamond.kt")
    public void testPropertyDiamond() {
      runTest("compiler/testData/codegen/box/bridges/propertyDiamond.kt");
    }

    @TestMetadata("propertyDiamondFakeOverride.kt")
    public void testPropertyDiamondFakeOverride() {
      runTest("compiler/testData/codegen/box/bridges/propertyDiamondFakeOverride.kt");
    }

    @TestMetadata("propertyInConstructor.kt")
    public void testPropertyInConstructor() {
      runTest("compiler/testData/codegen/box/bridges/propertyInConstructor.kt");
    }

    @TestMetadata("propertySetter.kt")
    public void testPropertySetter() {
      runTest("compiler/testData/codegen/box/bridges/propertySetter.kt");
    }

    @TestMetadata("returnTypeSignature.kt")
    public void testReturnTypeSignature() {
      runTest("compiler/testData/codegen/box/bridges/returnTypeSignature.kt");
    }

    @TestMetadata("simple.kt")
    public void testSimple() {
      runTest("compiler/testData/codegen/box/bridges/simple.kt");
    }

    @TestMetadata("simpleEnum.kt")
    public void testSimpleEnum() {
      runTest("compiler/testData/codegen/box/bridges/simpleEnum.kt");
    }

    @TestMetadata("simpleGenericMethod.kt")
    public void testSimpleGenericMethod() {
      runTest("compiler/testData/codegen/box/bridges/simpleGenericMethod.kt");
    }

    @TestMetadata("simpleObject.kt")
    public void testSimpleObject() {
      runTest("compiler/testData/codegen/box/bridges/simpleObject.kt");
    }

    @TestMetadata("simpleReturnType.kt")
    public void testSimpleReturnType() {
      runTest("compiler/testData/codegen/box/bridges/simpleReturnType.kt");
    }

    @TestMetadata("simpleTraitImpl.kt")
    public void testSimpleTraitImpl() {
      runTest("compiler/testData/codegen/box/bridges/simpleTraitImpl.kt");
    }

    @TestMetadata("simpleUpperBound.kt")
    public void testSimpleUpperBound() {
      runTest("compiler/testData/codegen/box/bridges/simpleUpperBound.kt");
    }

    @TestMetadata("special.kt")
    public void testSpecial() {
      runTest("compiler/testData/codegen/box/bridges/special.kt");
    }

    @TestMetadata("specialGeneric.kt")
    public void testSpecialGeneric() {
      runTest("compiler/testData/codegen/box/bridges/specialGeneric.kt");
    }

    @TestMetadata("strListContains.kt")
    public void testStrListContains() {
      runTest("compiler/testData/codegen/box/bridges/strListContains.kt");
    }

    @TestMetadata("strListRemove.kt")
    public void testStrListRemove() {
      runTest("compiler/testData/codegen/box/bridges/strListRemove.kt");
    }

    @TestMetadata("test0.kt")
    public void testTest0() {
      runTest("compiler/testData/codegen/box/bridges/test0.kt");
    }

    @TestMetadata("test1.kt")
    public void testTest1() {
      runTest("compiler/testData/codegen/box/bridges/test1.kt");
    }

    @TestMetadata("test10.kt")
    public void testTest10() {
      runTest("compiler/testData/codegen/box/bridges/test10.kt");
    }

    @TestMetadata("test11.kt")
    public void testTest11() {
      runTest("compiler/testData/codegen/box/bridges/test11.kt");
    }

    @TestMetadata("test12.kt")
    public void testTest12() {
      runTest("compiler/testData/codegen/box/bridges/test12.kt");
    }

    @TestMetadata("test13.kt")
    public void testTest13() {
      runTest("compiler/testData/codegen/box/bridges/test13.kt");
    }

    @TestMetadata("test14.kt")
    public void testTest14() {
      runTest("compiler/testData/codegen/box/bridges/test14.kt");
    }

    @TestMetadata("test15.kt")
    public void testTest15() {
      runTest("compiler/testData/codegen/box/bridges/test15.kt");
    }

    @TestMetadata("test16.kt")
    public void testTest16() {
      runTest("compiler/testData/codegen/box/bridges/test16.kt");
    }

    @TestMetadata("test17.kt")
    public void testTest17() {
      runTest("compiler/testData/codegen/box/bridges/test17.kt");
    }

    @TestMetadata("test18.kt")
    public void testTest18() {
      runTest("compiler/testData/codegen/box/bridges/test18.kt");
    }

    @TestMetadata("test19.kt")
    public void testTest19() {
      runTest("compiler/testData/codegen/box/bridges/test19.kt");
    }

    @TestMetadata("test2.kt")
    public void testTest2() {
      runTest("compiler/testData/codegen/box/bridges/test2.kt");
    }

    @TestMetadata("test20.kt")
    public void testTest20() {
      runTest("compiler/testData/codegen/box/bridges/test20.kt");
    }

    @TestMetadata("test21.kt")
    public void testTest21() {
      runTest("compiler/testData/codegen/box/bridges/test21.kt");
    }

    @TestMetadata("test22.kt")
    public void testTest22() {
      runTest("compiler/testData/codegen/box/bridges/test22.kt");
    }

    @TestMetadata("test23.kt")
    public void testTest23() {
      runTest("compiler/testData/codegen/box/bridges/test23.kt");
    }

    @TestMetadata("test24.kt")
    public void testTest24() {
      runTest("compiler/testData/codegen/box/bridges/test24.kt");
    }

    @TestMetadata("test25.kt")
    public void testTest25() {
      runTest("compiler/testData/codegen/box/bridges/test25.kt");
    }

    @TestMetadata("test3.kt")
    public void testTest3() {
      runTest("compiler/testData/codegen/box/bridges/test3.kt");
    }

    @TestMetadata("test4.kt")
    public void testTest4() {
      runTest("compiler/testData/codegen/box/bridges/test4.kt");
    }

    @TestMetadata("test5.kt")
    public void testTest5() {
      runTest("compiler/testData/codegen/box/bridges/test5.kt");
    }

    @TestMetadata("test6.kt")
    public void testTest6() {
      runTest("compiler/testData/codegen/box/bridges/test6.kt");
    }

    @TestMetadata("test7.kt")
    public void testTest7() {
      runTest("compiler/testData/codegen/box/bridges/test7.kt");
    }

    @TestMetadata("test8.kt")
    public void testTest8() {
      runTest("compiler/testData/codegen/box/bridges/test8.kt");
    }

    @TestMetadata("test9.kt")
    public void testTest9() {
      runTest("compiler/testData/codegen/box/bridges/test9.kt");
    }

    @TestMetadata("traitImplInheritsTraitImpl.kt")
    public void testTraitImplInheritsTraitImpl() {
      runTest("compiler/testData/codegen/box/bridges/traitImplInheritsTraitImpl.kt");
    }

    @TestMetadata("twoParentsWithDifferentMethodsTwoBridges.kt")
    public void testTwoParentsWithDifferentMethodsTwoBridges() {
      runTest("compiler/testData/codegen/box/bridges/twoParentsWithDifferentMethodsTwoBridges.kt");
    }

    @TestMetadata("twoParentsWithDifferentMethodsTwoBridges2.kt")
    public void testTwoParentsWithDifferentMethodsTwoBridges2() {
      runTest("compiler/testData/codegen/box/bridges/twoParentsWithDifferentMethodsTwoBridges2.kt");
    }

    @TestMetadata("twoParentsWithTheSameMethodOneBridge.kt")
    public void testTwoParentsWithTheSameMethodOneBridge() {
      runTest("compiler/testData/codegen/box/bridges/twoParentsWithTheSameMethodOneBridge.kt");
    }

    @TestMetadata("typeParameterInExtensionReceiver.kt")
    public void testTypeParameterInExtensionReceiver() {
      runTest("compiler/testData/codegen/box/bridges/typeParameterInExtensionReceiver.kt");
    }

    @TestMetadata("compiler/testData/codegen/box/bridges/substitutionInSuperClass")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class SubstitutionInSuperClass extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      @TestMetadata("abstractFun.kt")
      public void testAbstractFun() {
        runTest("compiler/testData/codegen/box/bridges/substitutionInSuperClass/abstractFun.kt");
      }

      public void testAllFilesPresentInSubstitutionInSuperClass() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/bridges/substitutionInSuperClass"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("boundedTypeArguments.kt")
      public void testBoundedTypeArguments() {
        runTest("compiler/testData/codegen/box/bridges/substitutionInSuperClass/boundedTypeArguments.kt");
      }

      @TestMetadata("delegation.kt")
      public void testDelegation() {
        runTest("compiler/testData/codegen/box/bridges/substitutionInSuperClass/delegation.kt");
      }

      @TestMetadata("differentErasureInSuperClass.kt")
      public void testDifferentErasureInSuperClass() {
        runTest("compiler/testData/codegen/box/bridges/substitutionInSuperClass/differentErasureInSuperClass.kt");
      }

      @TestMetadata("differentErasureInSuperClassComplex.kt")
      public void testDifferentErasureInSuperClassComplex() {
        runTest("compiler/testData/codegen/box/bridges/substitutionInSuperClass/differentErasureInSuperClassComplex.kt");
      }

      @TestMetadata("enum.kt")
      public void testEnum() {
        runTest("compiler/testData/codegen/box/bridges/substitutionInSuperClass/enum.kt");
      }

      @TestMetadata("genericMethod.kt")
      public void testGenericMethod() {
        runTest("compiler/testData/codegen/box/bridges/substitutionInSuperClass/genericMethod.kt");
      }

      @TestMetadata("object.kt")
      public void testObject() {
        runTest("compiler/testData/codegen/box/bridges/substitutionInSuperClass/object.kt");
      }

      @TestMetadata("property.kt")
      public void testProperty() {
        runTest("compiler/testData/codegen/box/bridges/substitutionInSuperClass/property.kt");
      }

      @TestMetadata("simple.kt")
      public void testSimple() {
        runTest("compiler/testData/codegen/box/bridges/substitutionInSuperClass/simple.kt");
      }

      @TestMetadata("upperBound.kt")
      public void testUpperBound() {
        runTest("compiler/testData/codegen/box/bridges/substitutionInSuperClass/upperBound.kt");
      }
    }
  }

  @TestMetadata("compiler/testData/codegen/box/builtinStubMethods")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class BuiltinStubMethods extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    @TestMetadata("abstractMember.kt")
    public void testAbstractMember() {
      runTest("compiler/testData/codegen/box/builtinStubMethods/abstractMember.kt");
    }

    public void testAllFilesPresentInBuiltinStubMethods() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/builtinStubMethods"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("Collection.kt")
    public void testCollection() {
      runTest("compiler/testData/codegen/box/builtinStubMethods/Collection.kt");
    }

    @TestMetadata("customReadOnlyIterator.kt")
    public void testCustomReadOnlyIterator() {
      runTest("compiler/testData/codegen/box/builtinStubMethods/customReadOnlyIterator.kt");
    }

    @TestMetadata("delegationToArrayList.kt")
    public void testDelegationToArrayList() {
      runTest("compiler/testData/codegen/box/builtinStubMethods/delegationToArrayList.kt");
    }

    @TestMetadata("immutableRemove.kt")
    public void testImmutableRemove() {
      runTest("compiler/testData/codegen/box/builtinStubMethods/immutableRemove.kt");
    }

    @TestMetadata("implementationInTrait.kt")
    public void testImplementationInTrait() {
      runTest("compiler/testData/codegen/box/builtinStubMethods/implementationInTrait.kt");
    }

    @TestMetadata("inheritedImplementations.kt")
    public void testInheritedImplementations() {
      runTest("compiler/testData/codegen/box/builtinStubMethods/inheritedImplementations.kt");
    }

    @TestMetadata("int2IntMap.kt")
    public void testInt2IntMap() {
      runTest("compiler/testData/codegen/box/builtinStubMethods/int2IntMap.kt");
    }

    @TestMetadata("Iterator.kt")
    public void testIterator() {
      runTest("compiler/testData/codegen/box/builtinStubMethods/Iterator.kt");
    }

    @TestMetadata("IteratorWithRemove.kt")
    public void testIteratorWithRemove() {
      runTest("compiler/testData/codegen/box/builtinStubMethods/IteratorWithRemove.kt");
    }

    @TestMetadata("List.kt")
    public void testList() {
      runTest("compiler/testData/codegen/box/builtinStubMethods/List.kt");
    }

    @TestMetadata("ListIterator.kt")
    public void testListIterator() {
      runTest("compiler/testData/codegen/box/builtinStubMethods/ListIterator.kt");
    }

    @TestMetadata("ListWithAllImplementations.kt")
    public void testListWithAllImplementations() {
      runTest("compiler/testData/codegen/box/builtinStubMethods/ListWithAllImplementations.kt");
    }

    @TestMetadata("ListWithAllInheritedImplementations.kt")
    public void testListWithAllInheritedImplementations() {
      runTest("compiler/testData/codegen/box/builtinStubMethods/ListWithAllInheritedImplementations.kt");
    }

    @TestMetadata("manyTypeParametersWithUpperBounds.kt")
    public void testManyTypeParametersWithUpperBounds() {
      runTest("compiler/testData/codegen/box/builtinStubMethods/manyTypeParametersWithUpperBounds.kt");
    }

    @TestMetadata("Map.kt")
    public void testMap() {
      runTest("compiler/testData/codegen/box/builtinStubMethods/Map.kt");
    }

    @TestMetadata("MapEntry.kt")
    public void testMapEntry() {
      runTest("compiler/testData/codegen/box/builtinStubMethods/MapEntry.kt");
    }

    @TestMetadata("MapEntryWithSetValue.kt")
    public void testMapEntryWithSetValue() {
      runTest("compiler/testData/codegen/box/builtinStubMethods/MapEntryWithSetValue.kt");
    }

    @TestMetadata("MapWithAllImplementations.kt")
    public void testMapWithAllImplementations() {
      runTest("compiler/testData/codegen/box/builtinStubMethods/MapWithAllImplementations.kt");
    }

    @TestMetadata("nonTrivialSubstitution.kt")
    public void testNonTrivialSubstitution() {
      runTest("compiler/testData/codegen/box/builtinStubMethods/nonTrivialSubstitution.kt");
    }

    @TestMetadata("nonTrivialUpperBound.kt")
    public void testNonTrivialUpperBound() {
      runTest("compiler/testData/codegen/box/builtinStubMethods/nonTrivialUpperBound.kt");
    }

    @TestMetadata("substitutedIterable.kt")
    public void testSubstitutedIterable() {
      runTest("compiler/testData/codegen/box/builtinStubMethods/substitutedIterable.kt");
    }

    @TestMetadata("SubstitutedList.kt")
    public void testSubstitutedList() {
      runTest("compiler/testData/codegen/box/builtinStubMethods/SubstitutedList.kt");
    }

    @TestMetadata("substitutedListWithExtraSuperInterface.kt")
    public void testSubstitutedListWithExtraSuperInterface() {
      runTest("compiler/testData/codegen/box/builtinStubMethods/substitutedListWithExtraSuperInterface.kt");
    }

    @TestMetadata("compiler/testData/codegen/box/builtinStubMethods/bridgesForStubs")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class BridgesForStubs extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInBridgesForStubs() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/builtinStubMethods/bridgesForStubs"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("derivedEmptyListAdd.kt")
      public void testDerivedEmptyListAdd() {
        runTest("compiler/testData/codegen/box/builtinStubMethods/bridgesForStubs/derivedEmptyListAdd.kt");
      }

      @TestMetadata("derivedEmptyListSeveralModulesAdd.kt")
      public void testDerivedEmptyListSeveralModulesAdd() {
        runTest("compiler/testData/codegen/box/builtinStubMethods/bridgesForStubs/derivedEmptyListSeveralModulesAdd.kt");
      }

      @TestMetadata("derivedEmptyStringListAdd.kt")
      public void testDerivedEmptyStringListAdd() {
        runTest("compiler/testData/codegen/box/builtinStubMethods/bridgesForStubs/derivedEmptyStringListAdd.kt");
      }

      @TestMetadata("emptyListAdd.kt")
      public void testEmptyListAdd() {
        runTest("compiler/testData/codegen/box/builtinStubMethods/bridgesForStubs/emptyListAdd.kt");
      }

      @TestMetadata("emptyListAddWithIndex.kt")
      public void testEmptyListAddWithIndex() {
        runTest("compiler/testData/codegen/box/builtinStubMethods/bridgesForStubs/emptyListAddWithIndex.kt");
      }

      @TestMetadata("emptyListSet.kt")
      public void testEmptyListSet() {
        runTest("compiler/testData/codegen/box/builtinStubMethods/bridgesForStubs/emptyListSet.kt");
      }

      @TestMetadata("emptyStringListAdd.kt")
      public void testEmptyStringListAdd() {
        runTest("compiler/testData/codegen/box/builtinStubMethods/bridgesForStubs/emptyStringListAdd.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/builtinStubMethods/extendJavaClasses")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ExtendJavaClasses extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      @TestMetadata("abstractList.kt")
      public void testAbstractList() {
        runTest("compiler/testData/codegen/box/builtinStubMethods/extendJavaClasses/abstractList.kt");
      }

      @TestMetadata("abstractMap.kt")
      public void testAbstractMap() {
        runTest("compiler/testData/codegen/box/builtinStubMethods/extendJavaClasses/abstractMap.kt");
      }

      @TestMetadata("abstractSet.kt")
      public void testAbstractSet() {
        runTest("compiler/testData/codegen/box/builtinStubMethods/extendJavaClasses/abstractSet.kt");
      }

      public void testAllFilesPresentInExtendJavaClasses() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/builtinStubMethods/extendJavaClasses"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("arrayList.kt")
      public void testArrayList() {
        runTest("compiler/testData/codegen/box/builtinStubMethods/extendJavaClasses/arrayList.kt");
      }

      @TestMetadata("charSequenceGetOverriddenInJavaSuperClass.kt")
      public void testCharSequenceGetOverriddenInJavaSuperClass() {
        runTest("compiler/testData/codegen/box/builtinStubMethods/extendJavaClasses/charSequenceGetOverriddenInJavaSuperClass.kt");
      }

      @TestMetadata("extendArrayListThroughKotlin.kt")
      public void testExtendArrayListThroughKotlin() {
        runTest("compiler/testData/codegen/box/builtinStubMethods/extendJavaClasses/extendArrayListThroughKotlin.kt");
      }

      @TestMetadata("hashMap.kt")
      public void testHashMap() {
        runTest("compiler/testData/codegen/box/builtinStubMethods/extendJavaClasses/hashMap.kt");
      }

      @TestMetadata("hashSet.kt")
      public void testHashSet() {
        runTest("compiler/testData/codegen/box/builtinStubMethods/extendJavaClasses/hashSet.kt");
      }

      @TestMetadata("kt61548.kt")
      public void testKt61548() {
        runTest("compiler/testData/codegen/box/builtinStubMethods/extendJavaClasses/kt61548.kt");
      }

      @TestMetadata("mapEntry.kt")
      public void testMapEntry() {
        runTest("compiler/testData/codegen/box/builtinStubMethods/extendJavaClasses/mapEntry.kt");
      }

      @TestMetadata("numberMixedHierarchy.kt")
      public void testNumberMixedHierarchy() {
        runTest("compiler/testData/codegen/box/builtinStubMethods/extendJavaClasses/numberMixedHierarchy.kt");
      }

      @TestMetadata("overrideAbstractSetMethod.kt")
      public void testOverrideAbstractSetMethod() {
        runTest("compiler/testData/codegen/box/builtinStubMethods/extendJavaClasses/overrideAbstractSetMethod.kt");
      }

      @TestMetadata("removeAtBridgeToJavaClass.kt")
      public void testRemoveAtBridgeToJavaClass() {
        runTest("compiler/testData/codegen/box/builtinStubMethods/extendJavaClasses/removeAtBridgeToJavaClass.kt");
      }

      @TestMetadata("removeAtBridgeToJavaDefault.kt")
      public void testRemoveAtBridgeToJavaDefault() {
        runTest("compiler/testData/codegen/box/builtinStubMethods/extendJavaClasses/removeAtBridgeToJavaDefault.kt");
      }

      @TestMetadata("removeAtBridgeToJavaSuperClass.kt")
      public void testRemoveAtBridgeToJavaSuperClass() {
        runTest("compiler/testData/codegen/box/builtinStubMethods/extendJavaClasses/removeAtBridgeToJavaSuperClass.kt");
      }

      @TestMetadata("superCallToFakeRemoveAt.kt")
      public void testSuperCallToFakeRemoveAt() {
        runTest("compiler/testData/codegen/box/builtinStubMethods/extendJavaClasses/superCallToFakeRemoveAt.kt");
      }

      @TestMetadata("superCallToRemoveAt.kt")
      public void testSuperCallToRemoveAt() {
        runTest("compiler/testData/codegen/box/builtinStubMethods/extendJavaClasses/superCallToRemoveAt.kt");
      }

      @TestMetadata("superCallToRemoveAtInJavaDefault.kt")
      public void testSuperCallToRemoveAtInJavaDefault() {
        runTest("compiler/testData/codegen/box/builtinStubMethods/extendJavaClasses/superCallToRemoveAtInJavaDefault.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/builtinStubMethods/mapGetOrDefault")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class MapGetOrDefault extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInMapGetOrDefault() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/builtinStubMethods/mapGetOrDefault"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("noTypeSafeBridge.kt")
      public void testNoTypeSafeBridge() {
        runTest("compiler/testData/codegen/box/builtinStubMethods/mapGetOrDefault/noTypeSafeBridge.kt");
      }

      @TestMetadata("typeSafeBridge.kt")
      public void testTypeSafeBridge() {
        runTest("compiler/testData/codegen/box/builtinStubMethods/mapGetOrDefault/typeSafeBridge.kt");
      }

      @TestMetadata("typeSafeBridgeNotNullAny.kt")
      public void testTypeSafeBridgeNotNullAny() {
        runTest("compiler/testData/codegen/box/builtinStubMethods/mapGetOrDefault/typeSafeBridgeNotNullAny.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/builtinStubMethods/mapRemove")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class MapRemove extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInMapRemove() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/builtinStubMethods/mapRemove"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("noDefaultImpls.kt")
      public void testNoDefaultImpls() {
        runTest("compiler/testData/codegen/box/builtinStubMethods/mapRemove/noDefaultImpls.kt");
      }

      @TestMetadata("readOnlyMap.kt")
      public void testReadOnlyMap() {
        runTest("compiler/testData/codegen/box/builtinStubMethods/mapRemove/readOnlyMap.kt");
      }

      @TestMetadata("typeSafeBridge.kt")
      public void testTypeSafeBridge() {
        runTest("compiler/testData/codegen/box/builtinStubMethods/mapRemove/typeSafeBridge.kt");
      }

      @TestMetadata("typeSafeBridgeNotNullAny.kt")
      public void testTypeSafeBridgeNotNullAny() {
        runTest("compiler/testData/codegen/box/builtinStubMethods/mapRemove/typeSafeBridgeNotNullAny.kt");
      }
    }
  }

  @TestMetadata("compiler/testData/codegen/box/callableReference")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class CallableReference extends AbstractLightAnalysisModeTest {
    @TestMetadata("kt55138.kt")
    public void ignoreKt55138() {
      runTest("compiler/testData/codegen/box/callableReference/kt55138.kt");
    }

    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInCallableReference() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/callableReference"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("arrayConstructor.kt")
    public void testArrayConstructor() {
      runTest("compiler/testData/codegen/box/callableReference/arrayConstructor.kt");
    }

    @TestMetadata("arrayConstructorArgument.kt")
    public void testArrayConstructorArgument() {
      runTest("compiler/testData/codegen/box/callableReference/arrayConstructorArgument.kt");
    }

    @TestMetadata("arrayOf.kt")
    public void testArrayOf() {
      runTest("compiler/testData/codegen/box/callableReference/arrayOf.kt");
    }

    @TestMetadata("arrayOfNulls.kt")
    public void testArrayOfNulls() {
      runTest("compiler/testData/codegen/box/callableReference/arrayOfNulls.kt");
    }

    @TestMetadata("builtinFunctionReferenceOwner.kt")
    public void testBuiltinFunctionReferenceOwner() {
      runTest("compiler/testData/codegen/box/callableReference/builtinFunctionReferenceOwner.kt");
    }

    @TestMetadata("callableReferenceOfCompanionConst.kt")
    public void testCallableReferenceOfCompanionConst() {
      runTest("compiler/testData/codegen/box/callableReference/callableReferenceOfCompanionConst.kt");
    }

    @TestMetadata("callableReferenceOfCompanionMethod.kt")
    public void testCallableReferenceOfCompanionMethod() {
      runTest("compiler/testData/codegen/box/callableReference/callableReferenceOfCompanionMethod.kt");
    }

    @TestMetadata("callableReferenceOfCompanionProperty.kt")
    public void testCallableReferenceOfCompanionProperty() {
      runTest("compiler/testData/codegen/box/callableReference/callableReferenceOfCompanionProperty.kt");
    }

    @TestMetadata("callableReferenceOfJavaNestedClass.kt")
    public void testCallableReferenceOfJavaNestedClass() {
      runTest("compiler/testData/codegen/box/callableReference/callableReferenceOfJavaNestedClass.kt");
    }

    @TestMetadata("callableReferenceOfKotlinNestedClass.kt")
    public void testCallableReferenceOfKotlinNestedClass() {
      runTest("compiler/testData/codegen/box/callableReference/callableReferenceOfKotlinNestedClass.kt");
    }

    @TestMetadata("callableReferenceOfNestedClass.kt")
    public void testCallableReferenceOfNestedClass() {
      runTest("compiler/testData/codegen/box/callableReference/callableReferenceOfNestedClass.kt");
    }

    @TestMetadata("callableReferenceOfObjectMethod.kt")
    public void testCallableReferenceOfObjectMethod() {
      runTest("compiler/testData/codegen/box/callableReference/callableReferenceOfObjectMethod.kt");
    }

    @TestMetadata("callableReferenceOfStaticField.kt")
    public void testCallableReferenceOfStaticField() {
      runTest("compiler/testData/codegen/box/callableReference/callableReferenceOfStaticField.kt");
    }

    @TestMetadata("callableReferenceOfStaticMethod.kt")
    public void testCallableReferenceOfStaticMethod() {
      runTest("compiler/testData/codegen/box/callableReference/callableReferenceOfStaticMethod.kt");
    }

    @TestMetadata("callableReferencetoInnerAndLocal.kt")
    public void testCallableReferencetoInnerAndLocal() {
      runTest("compiler/testData/codegen/box/callableReference/callableReferencetoInnerAndLocal.kt");
    }

    @TestMetadata("charArrayOf.kt")
    public void testCharArrayOf() {
      runTest("compiler/testData/codegen/box/callableReference/charArrayOf.kt");
    }

    @TestMetadata("classesAreSynthetic.kt")
    public void testClassesAreSynthetic() {
      runTest("compiler/testData/codegen/box/callableReference/classesAreSynthetic.kt");
    }

    @TestMetadata("constructor.kt")
    public void testConstructor() {
      runTest("compiler/testData/codegen/box/callableReference/constructor.kt");
    }

    @TestMetadata("genericConstructorReference.kt")
    public void testGenericConstructorReference() {
      runTest("compiler/testData/codegen/box/callableReference/genericConstructorReference.kt");
    }

    @TestMetadata("genericLocalClassConstructorReference.kt")
    public void testGenericLocalClassConstructorReference() {
      runTest("compiler/testData/codegen/box/callableReference/genericLocalClassConstructorReference.kt");
    }

    @TestMetadata("inlineArrayConstructors.kt")
    public void testInlineArrayConstructors() {
      runTest("compiler/testData/codegen/box/callableReference/inlineArrayConstructors.kt");
    }

    @TestMetadata("interfaceMethodReference.kt")
    public void testInterfaceMethodReference() {
      runTest("compiler/testData/codegen/box/callableReference/interfaceMethodReference.kt");
    }

    @TestMetadata("javaField.kt")
    public void testJavaField() {
      runTest("compiler/testData/codegen/box/callableReference/javaField.kt");
    }

    @TestMetadata("kt16412.kt")
    public void testKt16412() {
      runTest("compiler/testData/codegen/box/callableReference/kt16412.kt");
    }

    @TestMetadata("kt16752.kt")
    public void testKt16752() {
      runTest("compiler/testData/codegen/box/callableReference/kt16752.kt");
    }

    @TestMetadata("kt21014.kt")
    public void testKt21014() {
      runTest("compiler/testData/codegen/box/callableReference/kt21014.kt");
    }

    @TestMetadata("kt21092a.kt")
    public void testKt21092a() {
      runTest("compiler/testData/codegen/box/callableReference/kt21092a.kt");
    }

    @TestMetadata("kt21092b.kt")
    public void testKt21092b() {
      runTest("compiler/testData/codegen/box/callableReference/kt21092b.kt");
    }

    @TestMetadata("kt37604.kt")
    public void testKt37604() {
      runTest("compiler/testData/codegen/box/callableReference/kt37604.kt");
    }

    @TestMetadata("kt44483.kt")
    public void testKt44483() {
      runTest("compiler/testData/codegen/box/callableReference/kt44483.kt");
    }

    @TestMetadata("kt46902.kt")
    public void testKt46902() {
      runTest("compiler/testData/codegen/box/callableReference/kt46902.kt");
    }

    @TestMetadata("kt47988.kt")
    public void testKt47988() {
      runTest("compiler/testData/codegen/box/callableReference/kt47988.kt");
    }

    @TestMetadata("kt49526.kt")
    public void testKt49526() {
      runTest("compiler/testData/codegen/box/callableReference/kt49526.kt");
    }

    @TestMetadata("kt49526_sam.kt")
    public void testKt49526_sam() {
      runTest("compiler/testData/codegen/box/callableReference/kt49526_sam.kt");
    }

    @TestMetadata("kt49526a.kt")
    public void testKt49526a() {
      runTest("compiler/testData/codegen/box/callableReference/kt49526a.kt");
    }

    @TestMetadata("kt49526b.kt")
    public void testKt49526b() {
      runTest("compiler/testData/codegen/box/callableReference/kt49526b.kt");
    }

    @TestMetadata("kt50172.kt")
    public void testKt50172() {
      runTest("compiler/testData/codegen/box/callableReference/kt50172.kt");
    }

    @TestMetadata("kt51844.kt")
    public void testKt51844() {
      runTest("compiler/testData/codegen/box/callableReference/kt51844.kt");
    }

    @TestMetadata("kt52270.kt")
    public void testKt52270() {
      runTest("compiler/testData/codegen/box/callableReference/kt52270.kt");
    }

    @TestMetadata("kt62550.kt")
    public void testKt62550() {
      runTest("compiler/testData/codegen/box/callableReference/kt62550.kt");
    }

    @TestMetadata("nested.kt")
    public void testNested() {
      runTest("compiler/testData/codegen/box/callableReference/nested.kt");
    }

    @TestMetadata("optimizedSuperclasses.kt")
    public void testOptimizedSuperclasses() {
      runTest("compiler/testData/codegen/box/callableReference/optimizedSuperclasses.kt");
    }

    @TestMetadata("publicFinalField.kt")
    public void testPublicFinalField() {
      runTest("compiler/testData/codegen/box/callableReference/publicFinalField.kt");
    }

    @TestMetadata("publicMutableField.kt")
    public void testPublicMutableField() {
      runTest("compiler/testData/codegen/box/callableReference/publicMutableField.kt");
    }

    @TestMetadata("referenceToGenericSyntheticProperty.kt")
    public void testReferenceToGenericSyntheticProperty() {
      runTest("compiler/testData/codegen/box/callableReference/referenceToGenericSyntheticProperty.kt");
    }

    @TestMetadata("referenceToTypealiasConstructorInLet.kt")
    public void testReferenceToTypealiasConstructorInLet() {
      runTest("compiler/testData/codegen/box/callableReference/referenceToTypealiasConstructorInLet.kt");
    }

    @TestMetadata("returnNullFromFlexibleUnitLambda.kt")
    public void testReturnNullFromFlexibleUnitLambda() {
      runTest("compiler/testData/codegen/box/callableReference/returnNullFromFlexibleUnitLambda.kt");
    }

    @TestMetadata("staticMethod.kt")
    public void testStaticMethod() {
      runTest("compiler/testData/codegen/box/callableReference/staticMethod.kt");
    }

    @TestMetadata("compiler/testData/codegen/box/callableReference/adaptedReferences")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class AdaptedReferences extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      @TestMetadata("adaptedArrayOf.kt")
      public void testAdaptedArrayOf() {
        runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/adaptedArrayOf.kt");
      }

      @TestMetadata("adaptedVarargFunImportedFromObject.kt")
      public void testAdaptedVarargFunImportedFromObject() {
        runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/adaptedVarargFunImportedFromObject.kt");
      }

      public void testAllFilesPresentInAdaptedReferences() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/callableReference/adaptedReferences"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("bothWithCoercionToUnit.kt")
      public void testBothWithCoercionToUnit() {
        runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/bothWithCoercionToUnit.kt");
      }

      @TestMetadata("boundReferences.kt")
      public void testBoundReferences() {
        runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/boundReferences.kt");
      }

      @TestMetadata("defaultAfterVararg.kt")
      public void testDefaultAfterVararg() {
        runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/defaultAfterVararg.kt");
      }

      @TestMetadata("defaultWithGenericExpectedType.kt")
      public void testDefaultWithGenericExpectedType() {
        runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/defaultWithGenericExpectedType.kt");
      }

      @TestMetadata("emptyVarargAndDefault.kt")
      public void testEmptyVarargAndDefault() {
        runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/emptyVarargAndDefault.kt");
      }

      @TestMetadata("inlineBound.kt")
      public void testInlineBound() {
        runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/inlineBound.kt");
      }

      @TestMetadata("inlineDefault.kt")
      public void testInlineDefault() {
        runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/inlineDefault.kt");
      }

      @TestMetadata("inlineVararg.kt")
      public void testInlineVararg() {
        runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/inlineVararg.kt");
      }

      @TestMetadata("inlineVarargAndDefault.kt")
      public void testInlineVarargAndDefault() {
        runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/inlineVarargAndDefault.kt");
      }

      @TestMetadata("inlineVarargInts.kt")
      public void testInlineVarargInts() {
        runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/inlineVarargInts.kt");
      }

      @TestMetadata("innerConstructorWithVararg.kt")
      public void testInnerConstructorWithVararg() {
        runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/innerConstructorWithVararg.kt");
      }

      @TestMetadata("jvmStatic.kt")
      public void testJvmStatic() {
        runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/jvmStatic.kt");
      }

      @TestMetadata("largeVararg.kt")
      public void testLargeVararg() {
        runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/largeVararg.kt");
      }

      @TestMetadata("localFunctionWithDefault.kt")
      public void testLocalFunctionWithDefault() {
        runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/localFunctionWithDefault.kt");
      }

      @TestMetadata("manyDefaultsAndVararg.kt")
      public void testManyDefaultsAndVararg() {
        runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/manyDefaultsAndVararg.kt");
      }

      @TestMetadata("nestedClassConstructorWithDefault.kt")
      public void testNestedClassConstructorWithDefault() {
        runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/nestedClassConstructorWithDefault.kt");
      }

      @TestMetadata("noNameClashForReferencesToSameFunction.kt")
      public void testNoNameClashForReferencesToSameFunction() {
        runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/noNameClashForReferencesToSameFunction.kt");
      }

      @TestMetadata("noReflectionForAdaptedCallableReferences.kt")
      public void testNoReflectionForAdaptedCallableReferences() {
        runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/noReflectionForAdaptedCallableReferences.kt");
      }

      @TestMetadata("noReflectionForAdaptedCallableReferencesWithSuspendConversion.kt")
      public void testNoReflectionForAdaptedCallableReferencesWithSuspendConversion() {
        runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/noReflectionForAdaptedCallableReferencesWithSuspendConversion.kt");
      }

      @TestMetadata("referenceToFakeOverrideWithTypeParameter.kt")
      public void testReferenceToFakeOverrideWithTypeParameter() {
        runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/referenceToFakeOverrideWithTypeParameter.kt");
      }

      @TestMetadata("referenceToVarargWithDefaults.kt")
      public void testReferenceToVarargWithDefaults() {
        runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/referenceToVarargWithDefaults.kt");
      }

      @TestMetadata("reflectionForVarargAsArray.kt")
      public void testReflectionForVarargAsArray() {
        runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/reflectionForVarargAsArray.kt");
      }

      @TestMetadata("simpleDefaultArgument.kt")
      public void testSimpleDefaultArgument() {
        runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/simpleDefaultArgument.kt");
      }

      @TestMetadata("simpleEmptyVararg.kt")
      public void testSimpleEmptyVararg() {
        runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/simpleEmptyVararg.kt");
      }

      @TestMetadata("suspendUnitConversion.kt")
      public void testSuspendUnitConversion() {
        runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/suspendUnitConversion.kt");
      }

      @TestMetadata("toStringNoReflect.kt")
      public void testToStringNoReflect() {
        runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/toStringNoReflect.kt");
      }

      @TestMetadata("unboundReferences.kt")
      public void testUnboundReferences() {
        runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/unboundReferences.kt");
      }

      @TestMetadata("unitCoercionOverloads.kt")
      public void testUnitCoercionOverloads() {
        runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/unitCoercionOverloads.kt");
      }

      @TestMetadata("varargFromBaseClass.kt")
      public void testVarargFromBaseClass() {
        runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/varargFromBaseClass.kt");
      }

      @TestMetadata("varargOverloads.kt")
      public void testVarargOverloads() {
        runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/varargOverloads.kt");
      }

      @TestMetadata("varargViewedAsArray.kt")
      public void testVarargViewedAsArray() {
        runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/varargViewedAsArray.kt");
      }

      @TestMetadata("varargViewedAsPrimitiveArray.kt")
      public void testVarargViewedAsPrimitiveArray() {
        runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/varargViewedAsPrimitiveArray.kt");
      }

      @TestMetadata("varargWithDefaultValue.kt")
      public void testVarargWithDefaultValue() {
        runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/varargWithDefaultValue.kt");
      }

      @TestMetadata("withReceiver.kt")
      public void testWithReceiver() {
        runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/withReceiver.kt");
      }

      @TestMetadata("compiler/testData/codegen/box/callableReference/adaptedReferences/suspendConversion")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class SuspendConversion extends AbstractLightAnalysisModeTest {
        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        @TestMetadata("adaptedWithCoercionToUnit.kt")
        public void testAdaptedWithCoercionToUnit() {
          runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/suspendConversion/adaptedWithCoercionToUnit.kt");
        }

        @TestMetadata("adaptedWithDefaultArguments.kt")
        public void testAdaptedWithDefaultArguments() {
          runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/suspendConversion/adaptedWithDefaultArguments.kt");
        }

        @TestMetadata("adaptedWithVarargs.kt")
        public void testAdaptedWithVarargs() {
          runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/suspendConversion/adaptedWithVarargs.kt");
        }

        public void testAllFilesPresentInSuspendConversion() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/callableReference/adaptedReferences/suspendConversion"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("bound.kt")
        public void testBound() {
          runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/suspendConversion/bound.kt");
        }

        @TestMetadata("boundExtension.kt")
        public void testBoundExtension() {
          runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/suspendConversion/boundExtension.kt");
        }

        @TestMetadata("crossInline.kt")
        public void testCrossInline() {
          runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/suspendConversion/crossInline.kt");
        }

        @TestMetadata("inlineAdaptedWithCoercionToUnit.kt")
        public void testInlineAdaptedWithCoercionToUnit() {
          runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/suspendConversion/inlineAdaptedWithCoercionToUnit.kt");
        }

        @TestMetadata("inlineAdaptedWithDefaultArguments.kt")
        public void testInlineAdaptedWithDefaultArguments() {
          runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/suspendConversion/inlineAdaptedWithDefaultArguments.kt");
        }

        @TestMetadata("inlineAdaptedWithVarargs.kt")
        public void testInlineAdaptedWithVarargs() {
          runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/suspendConversion/inlineAdaptedWithVarargs.kt");
        }

        @TestMetadata("inlineBound.kt")
        public void testInlineBound() {
          runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/suspendConversion/inlineBound.kt");
        }

        @TestMetadata("inlineSimple.kt")
        public void testInlineSimple() {
          runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/suspendConversion/inlineSimple.kt");
        }

        @TestMetadata("inlineWithParameters.kt")
        public void testInlineWithParameters() {
          runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/suspendConversion/inlineWithParameters.kt");
        }

        @TestMetadata("isAs.kt")
        public void testIsAs() {
          runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/suspendConversion/isAs.kt");
        }

        @TestMetadata("nullableParameter.kt")
        public void testNullableParameter() {
          runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/suspendConversion/nullableParameter.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() {
          runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/suspendConversion/simple.kt");
        }

        @TestMetadata("withParameters.kt")
        public void testWithParameters() {
          runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/suspendConversion/withParameters.kt");
        }
      }
    }

    @TestMetadata("compiler/testData/codegen/box/callableReference/bound")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Bound extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      @TestMetadata("adapted.kt")
      public void testAdapted() {
        runTest("compiler/testData/codegen/box/callableReference/bound/adapted.kt");
      }

      public void testAllFilesPresentInBound() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/callableReference/bound"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("array.kt")
      public void testArray() {
        runTest("compiler/testData/codegen/box/callableReference/bound/array.kt");
      }

      @TestMetadata("arrayConstructorArgument.kt")
      public void testArrayConstructorArgument() {
        runTest("compiler/testData/codegen/box/callableReference/bound/arrayConstructorArgument.kt");
      }

      @TestMetadata("arrayGetIntrinsic.kt")
      public void testArrayGetIntrinsic() {
        runTest("compiler/testData/codegen/box/callableReference/bound/arrayGetIntrinsic.kt");
      }

      @TestMetadata("boundJvmFieldInInterfaceCompanion.kt")
      public void testBoundJvmFieldInInterfaceCompanion() {
        runTest("compiler/testData/codegen/box/callableReference/bound/boundJvmFieldInInterfaceCompanion.kt");
      }

      @TestMetadata("boundReferenceToOverloadedFunction.kt")
      public void testBoundReferenceToOverloadedFunction() {
        runTest("compiler/testData/codegen/box/callableReference/bound/boundReferenceToOverloadedFunction.kt");
      }

      @TestMetadata("captureVarInInitBlock.kt")
      public void testCaptureVarInInitBlock() {
        runTest("compiler/testData/codegen/box/callableReference/bound/captureVarInInitBlock.kt");
      }

      @TestMetadata("captureVarInPropertyInit.kt")
      public void testCaptureVarInPropertyInit() {
        runTest("compiler/testData/codegen/box/callableReference/bound/captureVarInPropertyInit.kt");
      }

      @TestMetadata("coercionToUnit.kt")
      public void testCoercionToUnit() {
        runTest("compiler/testData/codegen/box/callableReference/bound/coercionToUnit.kt");
      }

      @TestMetadata("companionObjectReceiver.kt")
      public void testCompanionObjectReceiver() {
        runTest("compiler/testData/codegen/box/callableReference/bound/companionObjectReceiver.kt");
      }

      @TestMetadata("companionObjectReceiverInheritsFromOuter.kt")
      public void testCompanionObjectReceiverInheritsFromOuter() {
        runTest("compiler/testData/codegen/box/callableReference/bound/companionObjectReceiverInheritsFromOuter.kt");
      }

      @TestMetadata("dontShareReceiver.kt")
      public void testDontShareReceiver() {
        runTest("compiler/testData/codegen/box/callableReference/bound/dontShareReceiver.kt");
      }

      @TestMetadata("emptyLHS.kt")
      public void testEmptyLHS() {
        runTest("compiler/testData/codegen/box/callableReference/bound/emptyLHS.kt");
      }

      @TestMetadata("enumEntryMember.kt")
      public void testEnumEntryMember() {
        runTest("compiler/testData/codegen/box/callableReference/bound/enumEntryMember.kt");
      }

      @TestMetadata("genericBoundPropertyAsCrossinline.kt")
      public void testGenericBoundPropertyAsCrossinline() {
        runTest("compiler/testData/codegen/box/callableReference/bound/genericBoundPropertyAsCrossinline.kt");
      }

      @TestMetadata("genericValOnLHS.kt")
      public void testGenericValOnLHS() {
        runTest("compiler/testData/codegen/box/callableReference/bound/genericValOnLHS.kt");
      }

      @TestMetadata("javaField.kt")
      public void testJavaField() {
        runTest("compiler/testData/codegen/box/callableReference/bound/javaField.kt");
      }

      @TestMetadata("kCallableNameIntrinsic.kt")
      public void testKCallableNameIntrinsic() {
        runTest("compiler/testData/codegen/box/callableReference/bound/kCallableNameIntrinsic.kt");
      }

      @TestMetadata("kt12738.kt")
      public void testKt12738() {
        runTest("compiler/testData/codegen/box/callableReference/bound/kt12738.kt");
      }

      @TestMetadata("kt15446.kt")
      public void testKt15446() {
        runTest("compiler/testData/codegen/box/callableReference/bound/kt15446.kt");
      }

      @TestMetadata("kt44636_localExtension.kt")
      public void testKt44636_localExtension() {
        runTest("compiler/testData/codegen/box/callableReference/bound/kt44636_localExtension.kt");
      }

      @TestMetadata("localUnitFunction.kt")
      public void testLocalUnitFunction() {
        runTest("compiler/testData/codegen/box/callableReference/bound/localUnitFunction.kt");
      }

      @TestMetadata("multiCase.kt")
      public void testMultiCase() {
        runTest("compiler/testData/codegen/box/callableReference/bound/multiCase.kt");
      }

      @TestMetadata("nullReceiver.kt")
      public void testNullReceiver() {
        runTest("compiler/testData/codegen/box/callableReference/bound/nullReceiver.kt");
      }

      @TestMetadata("objectReceiver.kt")
      public void testObjectReceiver() {
        runTest("compiler/testData/codegen/box/callableReference/bound/objectReceiver.kt");
      }

      @TestMetadata("primitiveReceiver.kt")
      public void testPrimitiveReceiver() {
        runTest("compiler/testData/codegen/box/callableReference/bound/primitiveReceiver.kt");
      }

      @TestMetadata("receiverEvaluatedOnce.kt")
      public void testReceiverEvaluatedOnce() {
        runTest("compiler/testData/codegen/box/callableReference/bound/receiverEvaluatedOnce.kt");
      }

      @TestMetadata("referenceToGetSetMethodsFromVararg.kt")
      public void testReferenceToGetSetMethodsFromVararg() {
        runTest("compiler/testData/codegen/box/callableReference/bound/referenceToGetSetMethodsFromVararg.kt");
      }

      @TestMetadata("simpleFunction.kt")
      public void testSimpleFunction() {
        runTest("compiler/testData/codegen/box/callableReference/bound/simpleFunction.kt");
      }

      @TestMetadata("simpleProperty.kt")
      public void testSimpleProperty() {
        runTest("compiler/testData/codegen/box/callableReference/bound/simpleProperty.kt");
      }

      @TestMetadata("smartCastForExtensionReceiver.kt")
      public void testSmartCastForExtensionReceiver() {
        runTest("compiler/testData/codegen/box/callableReference/bound/smartCastForExtensionReceiver.kt");
      }

      @TestMetadata("syntheticExtensionOnLHS.kt")
      public void testSyntheticExtensionOnLHS() {
        runTest("compiler/testData/codegen/box/callableReference/bound/syntheticExtensionOnLHS.kt");
      }

      @TestMetadata("typeAliasObjectBoundReference.kt")
      public void testTypeAliasObjectBoundReference() {
        runTest("compiler/testData/codegen/box/callableReference/bound/typeAliasObjectBoundReference.kt");
      }

      @TestMetadata("compiler/testData/codegen/box/callableReference/bound/equals")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class Equals extends AbstractLightAnalysisModeTest {
        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        public void testAllFilesPresentInEquals() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/callableReference/bound/equals"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("nullableReceiverInEquals.kt")
        public void testNullableReceiverInEquals() {
          runTest("compiler/testData/codegen/box/callableReference/bound/equals/nullableReceiverInEquals.kt");
        }

        @TestMetadata("receiverInEquals.kt")
        public void testReceiverInEquals() {
          runTest("compiler/testData/codegen/box/callableReference/bound/equals/receiverInEquals.kt");
        }

        @TestMetadata("reflectionReference.kt")
        public void testReflectionReference() {
          runTest("compiler/testData/codegen/box/callableReference/bound/equals/reflectionReference.kt");
        }
      }
    }

    @TestMetadata("compiler/testData/codegen/box/callableReference/equality")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Equality extends AbstractLightAnalysisModeTest {
      @TestMetadata("conversionCombinations.kt")
      public void ignoreConversionCombinations() {
        runTest("compiler/testData/codegen/box/callableReference/equality/conversionCombinations.kt");
      }

      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInEquality() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/callableReference/equality"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("capturedDefaults.kt")
      public void testCapturedDefaults() {
        runTest("compiler/testData/codegen/box/callableReference/equality/capturedDefaults.kt");
      }

      @TestMetadata("capturedVararg.kt")
      public void testCapturedVararg() {
        runTest("compiler/testData/codegen/box/callableReference/equality/capturedVararg.kt");
      }

      @TestMetadata("coercionToUnit.kt")
      public void testCoercionToUnit() {
        runTest("compiler/testData/codegen/box/callableReference/equality/coercionToUnit.kt");
      }

      @TestMetadata("coercionToUnitWithDefaults.kt")
      public void testCoercionToUnitWithDefaults() {
        runTest("compiler/testData/codegen/box/callableReference/equality/coercionToUnitWithDefaults.kt");
      }

      @TestMetadata("coercionToUnitWithVararg.kt")
      public void testCoercionToUnitWithVararg() {
        runTest("compiler/testData/codegen/box/callableReference/equality/coercionToUnitWithVararg.kt");
      }

      @TestMetadata("extensionReceiverVsDefault.kt")
      public void testExtensionReceiverVsDefault() {
        runTest("compiler/testData/codegen/box/callableReference/equality/extensionReceiverVsDefault.kt");
      }

      @TestMetadata("noCoercionToUnitIfFunctionAlreadyReturnsUnit.kt")
      public void testNoCoercionToUnitIfFunctionAlreadyReturnsUnit() {
        runTest("compiler/testData/codegen/box/callableReference/equality/noCoercionToUnitIfFunctionAlreadyReturnsUnit.kt");
      }

      @TestMetadata("simpleEquality.kt")
      public void testSimpleEquality() {
        runTest("compiler/testData/codegen/box/callableReference/equality/simpleEquality.kt");
      }

      @TestMetadata("suspendConversion.kt")
      public void testSuspendConversion() {
        runTest("compiler/testData/codegen/box/callableReference/equality/suspendConversion.kt");
      }

      @TestMetadata("varargAsArrayMemberOrExtension.kt")
      public void testVarargAsArrayMemberOrExtension() {
        runTest("compiler/testData/codegen/box/callableReference/equality/varargAsArrayMemberOrExtension.kt");
      }

      @TestMetadata("varargAsArrayWithDefaults.kt")
      public void testVarargAsArrayWithDefaults() {
        runTest("compiler/testData/codegen/box/callableReference/equality/varargAsArrayWithDefaults.kt");
      }

      @TestMetadata("varargWithDefaults.kt")
      public void testVarargWithDefaults() {
        runTest("compiler/testData/codegen/box/callableReference/equality/varargWithDefaults.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/callableReference/funInterfaceConstructor")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class FunInterfaceConstructor extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInFunInterfaceConstructor() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/callableReference/funInterfaceConstructor"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("funInterfaceConstructedObjectsEquality.kt")
      public void testFunInterfaceConstructedObjectsEquality() {
        runTest("compiler/testData/codegen/box/callableReference/funInterfaceConstructor/funInterfaceConstructedObjectsEquality.kt");
      }

      @TestMetadata("funInterfaceConstructor.kt")
      public void testFunInterfaceConstructor() {
        runTest("compiler/testData/codegen/box/callableReference/funInterfaceConstructor/funInterfaceConstructor.kt");
      }

      @TestMetadata("funInterfaceConstructorEquality.kt")
      public void testFunInterfaceConstructorEquality() {
        runTest("compiler/testData/codegen/box/callableReference/funInterfaceConstructor/funInterfaceConstructorEquality.kt");
      }

      @TestMetadata("funInterfaceConstructorIsKFunction.kt")
      public void testFunInterfaceConstructorIsKFunction() {
        runTest("compiler/testData/codegen/box/callableReference/funInterfaceConstructor/funInterfaceConstructorIsKFunction.kt");
      }

      @TestMetadata("funInterfaceConstructorOfImplicitKFunctionType.kt")
      public void testFunInterfaceConstructorOfImplicitKFunctionType() {
        runTest("compiler/testData/codegen/box/callableReference/funInterfaceConstructor/funInterfaceConstructorOfImplicitKFunctionType.kt");
      }

      @TestMetadata("funInterfaceConstructorThrowsNpe.kt")
      public void testFunInterfaceConstructorThrowsNpe() {
        runTest("compiler/testData/codegen/box/callableReference/funInterfaceConstructor/funInterfaceConstructorThrowsNpe.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/callableReference/function")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Function extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      @TestMetadata("abstractClassMember.kt")
      public void testAbstractClassMember() {
        runTest("compiler/testData/codegen/box/callableReference/function/abstractClassMember.kt");
      }

      public void testAllFilesPresentInFunction() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/callableReference/function"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("argumentTypes.kt")
      public void testArgumentTypes() {
        runTest("compiler/testData/codegen/box/callableReference/function/argumentTypes.kt");
      }

      @TestMetadata("argumentTypesNoinline.kt")
      public void testArgumentTypesNoinline() {
        runTest("compiler/testData/codegen/box/callableReference/function/argumentTypesNoinline.kt");
      }

      @TestMetadata("booleanNotIntrinsic.kt")
      public void testBooleanNotIntrinsic() {
        runTest("compiler/testData/codegen/box/callableReference/function/booleanNotIntrinsic.kt");
      }

      @TestMetadata("classMemberFromClass.kt")
      public void testClassMemberFromClass() {
        runTest("compiler/testData/codegen/box/callableReference/function/classMemberFromClass.kt");
      }

      @TestMetadata("classMemberFromCompanionObject.kt")
      public void testClassMemberFromCompanionObject() {
        runTest("compiler/testData/codegen/box/callableReference/function/classMemberFromCompanionObject.kt");
      }

      @TestMetadata("classMemberFromExtension.kt")
      public void testClassMemberFromExtension() {
        runTest("compiler/testData/codegen/box/callableReference/function/classMemberFromExtension.kt");
      }

      @TestMetadata("classMemberFromTopLevelStringNoArgs.kt")
      public void testClassMemberFromTopLevelStringNoArgs() {
        runTest("compiler/testData/codegen/box/callableReference/function/classMemberFromTopLevelStringNoArgs.kt");
      }

      @TestMetadata("classMemberFromTopLevelStringOneStringArg.kt")
      public void testClassMemberFromTopLevelStringOneStringArg() {
        runTest("compiler/testData/codegen/box/callableReference/function/classMemberFromTopLevelStringOneStringArg.kt");
      }

      @TestMetadata("classMemberFromTopLevelUnitNoArgs.kt")
      public void testClassMemberFromTopLevelUnitNoArgs() {
        runTest("compiler/testData/codegen/box/callableReference/function/classMemberFromTopLevelUnitNoArgs.kt");
      }

      @TestMetadata("classMemberFromTopLevelUnitOneStringArg.kt")
      public void testClassMemberFromTopLevelUnitOneStringArg() {
        runTest("compiler/testData/codegen/box/callableReference/function/classMemberFromTopLevelUnitOneStringArg.kt");
      }

      @TestMetadata("coercionToUnit.kt")
      public void testCoercionToUnit() {
        runTest("compiler/testData/codegen/box/callableReference/function/coercionToUnit.kt");
      }

      @TestMetadata("constructorFromTopLevelNoArgs.kt")
      public void testConstructorFromTopLevelNoArgs() {
        runTest("compiler/testData/codegen/box/callableReference/function/constructorFromTopLevelNoArgs.kt");
      }

      @TestMetadata("constructorFromTopLevelOneStringArg.kt")
      public void testConstructorFromTopLevelOneStringArg() {
        runTest("compiler/testData/codegen/box/callableReference/function/constructorFromTopLevelOneStringArg.kt");
      }

      @TestMetadata("dispatchReceiverType.kt")
      public void testDispatchReceiverType() {
        runTest("compiler/testData/codegen/box/callableReference/function/dispatchReceiverType.kt");
      }

      @TestMetadata("enumValueOfMethod.kt")
      public void testEnumValueOfMethod() {
        runTest("compiler/testData/codegen/box/callableReference/function/enumValueOfMethod.kt");
      }

      @TestMetadata("equalsIntrinsic.kt")
      public void testEqualsIntrinsic() {
        runTest("compiler/testData/codegen/box/callableReference/function/equalsIntrinsic.kt");
      }

      @TestMetadata("extensionFromClass.kt")
      public void testExtensionFromClass() {
        runTest("compiler/testData/codegen/box/callableReference/function/extensionFromClass.kt");
      }

      @TestMetadata("extensionFromExtension.kt")
      public void testExtensionFromExtension() {
        runTest("compiler/testData/codegen/box/callableReference/function/extensionFromExtension.kt");
      }

      @TestMetadata("extensionFromTopLevelStringNoArgs.kt")
      public void testExtensionFromTopLevelStringNoArgs() {
        runTest("compiler/testData/codegen/box/callableReference/function/extensionFromTopLevelStringNoArgs.kt");
      }

      @TestMetadata("extensionFromTopLevelStringOneStringArg.kt")
      public void testExtensionFromTopLevelStringOneStringArg() {
        runTest("compiler/testData/codegen/box/callableReference/function/extensionFromTopLevelStringOneStringArg.kt");
      }

      @TestMetadata("extensionFromTopLevelUnitNoArgs.kt")
      public void testExtensionFromTopLevelUnitNoArgs() {
        runTest("compiler/testData/codegen/box/callableReference/function/extensionFromTopLevelUnitNoArgs.kt");
      }

      @TestMetadata("extensionFromTopLevelUnitOneStringArg.kt")
      public void testExtensionFromTopLevelUnitOneStringArg() {
        runTest("compiler/testData/codegen/box/callableReference/function/extensionFromTopLevelUnitOneStringArg.kt");
      }

      @TestMetadata("extensionProperty.kt")
      public void testExtensionProperty() {
        runTest("compiler/testData/codegen/box/callableReference/function/extensionProperty.kt");
      }

      @TestMetadata("genericCallableReferenceArguments.kt")
      public void testGenericCallableReferenceArguments() {
        runTest("compiler/testData/codegen/box/callableReference/function/genericCallableReferenceArguments.kt");
      }

      @TestMetadata("genericCallableReferenceWithReifiedTypeParam.kt")
      public void testGenericCallableReferenceWithReifiedTypeParam() {
        runTest("compiler/testData/codegen/box/callableReference/function/genericCallableReferenceWithReifiedTypeParam.kt");
      }

      @TestMetadata("genericCallableReferencesWithNullableTypes.kt")
      public void testGenericCallableReferencesWithNullableTypes() {
        runTest("compiler/testData/codegen/box/callableReference/function/genericCallableReferencesWithNullableTypes.kt");
      }

      @TestMetadata("genericCallableReferencesWithOverload.kt")
      public void testGenericCallableReferencesWithOverload() {
        runTest("compiler/testData/codegen/box/callableReference/function/genericCallableReferencesWithOverload.kt");
      }

      @TestMetadata("genericMember.kt")
      public void testGenericMember() {
        runTest("compiler/testData/codegen/box/callableReference/function/genericMember.kt");
      }

      @TestMetadata("genericWithDependentType.kt")
      public void testGenericWithDependentType() {
        runTest("compiler/testData/codegen/box/callableReference/function/genericWithDependentType.kt");
      }

      @TestMetadata("getArityViaFunctionImpl.kt")
      public void testGetArityViaFunctionImpl() {
        runTest("compiler/testData/codegen/box/callableReference/function/getArityViaFunctionImpl.kt");
      }

      @TestMetadata("innerClassConstructorWithTwoReceivers.kt")
      public void testInnerClassConstructorWithTwoReceivers() {
        runTest("compiler/testData/codegen/box/callableReference/function/innerClassConstructorWithTwoReceivers.kt");
      }

      @TestMetadata("innerConstructorFromClass.kt")
      public void testInnerConstructorFromClass() {
        runTest("compiler/testData/codegen/box/callableReference/function/innerConstructorFromClass.kt");
      }

      @TestMetadata("innerConstructorFromExtension.kt")
      public void testInnerConstructorFromExtension() {
        runTest("compiler/testData/codegen/box/callableReference/function/innerConstructorFromExtension.kt");
      }

      @TestMetadata("innerConstructorFromTopLevelNoArgs.kt")
      public void testInnerConstructorFromTopLevelNoArgs() {
        runTest("compiler/testData/codegen/box/callableReference/function/innerConstructorFromTopLevelNoArgs.kt");
      }

      @TestMetadata("innerConstructorFromTopLevelOneStringArg.kt")
      public void testInnerConstructorFromTopLevelOneStringArg() {
        runTest("compiler/testData/codegen/box/callableReference/function/innerConstructorFromTopLevelOneStringArg.kt");
      }

      @TestMetadata("javaCollectionsStaticMethod.kt")
      public void testJavaCollectionsStaticMethod() {
        runTest("compiler/testData/codegen/box/callableReference/function/javaCollectionsStaticMethod.kt");
      }

      @TestMetadata("kt21787.kt")
      public void testKt21787() {
        runTest("compiler/testData/codegen/box/callableReference/function/kt21787.kt");
      }

      @TestMetadata("kt32462.kt")
      public void testKt32462() {
        runTest("compiler/testData/codegen/box/callableReference/function/kt32462.kt");
      }

      @TestMetadata("kt47741.kt")
      public void testKt47741() {
        runTest("compiler/testData/codegen/box/callableReference/function/kt47741.kt");
      }

      @TestMetadata("kt53794_protectedJavaMember.kt")
      public void testKt53794_protectedJavaMember() {
        runTest("compiler/testData/codegen/box/callableReference/function/kt53794_protectedJavaMember.kt");
      }

      @TestMetadata("nestedConstructorFromClass.kt")
      public void testNestedConstructorFromClass() {
        runTest("compiler/testData/codegen/box/callableReference/function/nestedConstructorFromClass.kt");
      }

      @TestMetadata("nestedConstructorFromTopLevelNoArgs.kt")
      public void testNestedConstructorFromTopLevelNoArgs() {
        runTest("compiler/testData/codegen/box/callableReference/function/nestedConstructorFromTopLevelNoArgs.kt");
      }

      @TestMetadata("nestedConstructorFromTopLevelOneStringArg.kt")
      public void testNestedConstructorFromTopLevelOneStringArg() {
        runTest("compiler/testData/codegen/box/callableReference/function/nestedConstructorFromTopLevelOneStringArg.kt");
      }

      @TestMetadata("newArray.kt")
      public void testNewArray() {
        runTest("compiler/testData/codegen/box/callableReference/function/newArray.kt");
      }

      @TestMetadata("overloadedFun.kt")
      public void testOverloadedFun() {
        runTest("compiler/testData/codegen/box/callableReference/function/overloadedFun.kt");
      }

      @TestMetadata("overloadedFunVsVal.kt")
      public void testOverloadedFunVsVal() {
        runTest("compiler/testData/codegen/box/callableReference/function/overloadedFunVsVal.kt");
      }

      @TestMetadata("privateClassMember.kt")
      public void testPrivateClassMember() {
        runTest("compiler/testData/codegen/box/callableReference/function/privateClassMember.kt");
      }

      @TestMetadata("referenceToCompanionMember.kt")
      public void testReferenceToCompanionMember() {
        runTest("compiler/testData/codegen/box/callableReference/function/referenceToCompanionMember.kt");
      }

      @TestMetadata("sortListOfStrings.kt")
      public void testSortListOfStrings() {
        runTest("compiler/testData/codegen/box/callableReference/function/sortListOfStrings.kt");
      }

      @TestMetadata("specialCalls.kt")
      public void testSpecialCalls() {
        runTest("compiler/testData/codegen/box/callableReference/function/specialCalls.kt");
      }

      @TestMetadata("staticFunctionReference.kt")
      public void testStaticFunctionReference() {
        runTest("compiler/testData/codegen/box/callableReference/function/staticFunctionReference.kt");
      }

      @TestMetadata("topLevelFromClass.kt")
      public void testTopLevelFromClass() {
        runTest("compiler/testData/codegen/box/callableReference/function/topLevelFromClass.kt");
      }

      @TestMetadata("topLevelFromExtension.kt")
      public void testTopLevelFromExtension() {
        runTest("compiler/testData/codegen/box/callableReference/function/topLevelFromExtension.kt");
      }

      @TestMetadata("topLevelFromTopLevelStringNoArgs.kt")
      public void testTopLevelFromTopLevelStringNoArgs() {
        runTest("compiler/testData/codegen/box/callableReference/function/topLevelFromTopLevelStringNoArgs.kt");
      }

      @TestMetadata("topLevelFromTopLevelStringOneStringArg.kt")
      public void testTopLevelFromTopLevelStringOneStringArg() {
        runTest("compiler/testData/codegen/box/callableReference/function/topLevelFromTopLevelStringOneStringArg.kt");
      }

      @TestMetadata("topLevelFromTopLevelUnitManyArgs.kt")
      public void testTopLevelFromTopLevelUnitManyArgs() {
        runTest("compiler/testData/codegen/box/callableReference/function/topLevelFromTopLevelUnitManyArgs.kt");
      }

      @TestMetadata("topLevelFromTopLevelUnitNoArgs.kt")
      public void testTopLevelFromTopLevelUnitNoArgs() {
        runTest("compiler/testData/codegen/box/callableReference/function/topLevelFromTopLevelUnitNoArgs.kt");
      }

      @TestMetadata("topLevelFromTopLevelUnitOneStringArg.kt")
      public void testTopLevelFromTopLevelUnitOneStringArg() {
        runTest("compiler/testData/codegen/box/callableReference/function/topLevelFromTopLevelUnitOneStringArg.kt");
      }

      @TestMetadata("traitImplMethodWithClassReceiver.kt")
      public void testTraitImplMethodWithClassReceiver() {
        runTest("compiler/testData/codegen/box/callableReference/function/traitImplMethodWithClassReceiver.kt");
      }

      @TestMetadata("traitMember.kt")
      public void testTraitMember() {
        runTest("compiler/testData/codegen/box/callableReference/function/traitMember.kt");
      }

      @TestMetadata("compiler/testData/codegen/box/callableReference/function/local")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class Local extends AbstractLightAnalysisModeTest {
        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        public void testAllFilesPresentInLocal() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/callableReference/function/local"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("captureOuter.kt")
        public void testCaptureOuter() {
          runTest("compiler/testData/codegen/box/callableReference/function/local/captureOuter.kt");
        }

        @TestMetadata("classMember.kt")
        public void testClassMember() {
          runTest("compiler/testData/codegen/box/callableReference/function/local/classMember.kt");
        }

        @TestMetadata("closureWithSideEffect.kt")
        public void testClosureWithSideEffect() {
          runTest("compiler/testData/codegen/box/callableReference/function/local/closureWithSideEffect.kt");
        }

        @TestMetadata("constructor.kt")
        public void testConstructor() {
          runTest("compiler/testData/codegen/box/callableReference/function/local/constructor.kt");
        }

        @TestMetadata("constructorWithInitializer.kt")
        public void testConstructorWithInitializer() {
          runTest("compiler/testData/codegen/box/callableReference/function/local/constructorWithInitializer.kt");
        }

        @TestMetadata("enumExtendsTrait.kt")
        public void testEnumExtendsTrait() {
          runTest("compiler/testData/codegen/box/callableReference/function/local/enumExtendsTrait.kt");
        }

        @TestMetadata("equalsHashCode.kt")
        public void testEqualsHashCode() {
          runTest("compiler/testData/codegen/box/callableReference/function/local/equalsHashCode.kt");
        }

        @TestMetadata("extension.kt")
        public void testExtension() {
          runTest("compiler/testData/codegen/box/callableReference/function/local/extension.kt");
        }

        @TestMetadata("extensionToLocalClass.kt")
        public void testExtensionToLocalClass() {
          runTest("compiler/testData/codegen/box/callableReference/function/local/extensionToLocalClass.kt");
        }

        @TestMetadata("extensionToPrimitive.kt")
        public void testExtensionToPrimitive() {
          runTest("compiler/testData/codegen/box/callableReference/function/local/extensionToPrimitive.kt");
        }

        @TestMetadata("extensionWithClosure.kt")
        public void testExtensionWithClosure() {
          runTest("compiler/testData/codegen/box/callableReference/function/local/extensionWithClosure.kt");
        }

        @TestMetadata("genericMember.kt")
        public void testGenericMember() {
          runTest("compiler/testData/codegen/box/callableReference/function/local/genericMember.kt");
        }

        @TestMetadata("localClassMember.kt")
        public void testLocalClassMember() {
          runTest("compiler/testData/codegen/box/callableReference/function/local/localClassMember.kt");
        }

        @TestMetadata("localFunctionName.kt")
        public void testLocalFunctionName() {
          runTest("compiler/testData/codegen/box/callableReference/function/local/localFunctionName.kt");
        }

        @TestMetadata("localLocal.kt")
        public void testLocalLocal() {
          runTest("compiler/testData/codegen/box/callableReference/function/local/localLocal.kt");
        }

        @TestMetadata("recursiveClosure.kt")
        public void testRecursiveClosure() {
          runTest("compiler/testData/codegen/box/callableReference/function/local/recursiveClosure.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() {
          runTest("compiler/testData/codegen/box/callableReference/function/local/simple.kt");
        }

        @TestMetadata("simpleClosure.kt")
        public void testSimpleClosure() {
          runTest("compiler/testData/codegen/box/callableReference/function/local/simpleClosure.kt");
        }

        @TestMetadata("simpleWithArg.kt")
        public void testSimpleWithArg() {
          runTest("compiler/testData/codegen/box/callableReference/function/local/simpleWithArg.kt");
        }

        @TestMetadata("unitWithSideEffect.kt")
        public void testUnitWithSideEffect() {
          runTest("compiler/testData/codegen/box/callableReference/function/local/unitWithSideEffect.kt");
        }

        @TestMetadata("withValueArguments.kt")
        public void testWithValueArguments() {
          runTest("compiler/testData/codegen/box/callableReference/function/local/withValueArguments.kt");
        }
      }
    }

    @TestMetadata("compiler/testData/codegen/box/callableReference/property")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Property extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      @TestMetadata("accessViaSubclass.kt")
      public void testAccessViaSubclass() {
        runTest("compiler/testData/codegen/box/callableReference/property/accessViaSubclass.kt");
      }

      @TestMetadata("accessorForPropertyWithPrivateSetter.kt")
      public void testAccessorForPropertyWithPrivateSetter() {
        runTest("compiler/testData/codegen/box/callableReference/property/accessorForPropertyWithPrivateSetter.kt");
      }

      public void testAllFilesPresentInProperty() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/callableReference/property"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("delegated.kt")
      public void testDelegated() {
        runTest("compiler/testData/codegen/box/callableReference/property/delegated.kt");
      }

      @TestMetadata("delegatedMutable.kt")
      public void testDelegatedMutable() {
        runTest("compiler/testData/codegen/box/callableReference/property/delegatedMutable.kt");
      }

      @TestMetadata("enumNameOrdinal.kt")
      public void testEnumNameOrdinal() {
        runTest("compiler/testData/codegen/box/callableReference/property/enumNameOrdinal.kt");
      }

      @TestMetadata("extensionToArray.kt")
      public void testExtensionToArray() {
        runTest("compiler/testData/codegen/box/callableReference/property/extensionToArray.kt");
      }

      @TestMetadata("genericProperty.kt")
      public void testGenericProperty() {
        runTest("compiler/testData/codegen/box/callableReference/property/genericProperty.kt");
      }

      @TestMetadata("inEnum.kt")
      public void testInEnum() {
        runTest("compiler/testData/codegen/box/callableReference/property/inEnum.kt");
      }

      @TestMetadata("inReceiverOfAnother.kt")
      public void testInReceiverOfAnother() {
        runTest("compiler/testData/codegen/box/callableReference/property/inReceiverOfAnother.kt");
      }

      @TestMetadata("invokePropertyReference.kt")
      public void testInvokePropertyReference() {
        runTest("compiler/testData/codegen/box/callableReference/property/invokePropertyReference.kt");
      }

      @TestMetadata("javaBeanConvention.kt")
      public void testJavaBeanConvention() {
        runTest("compiler/testData/codegen/box/callableReference/property/javaBeanConvention.kt");
      }

      @TestMetadata("kClassInstanceIsInitializedFirst.kt")
      public void testKClassInstanceIsInitializedFirst() {
        runTest("compiler/testData/codegen/box/callableReference/property/kClassInstanceIsInitializedFirst.kt");
      }

      @TestMetadata("kt12044.kt")
      public void testKt12044() {
        runTest("compiler/testData/codegen/box/callableReference/property/kt12044.kt");
      }

      @TestMetadata("kt12982_protectedPropertyReference.kt")
      public void testKt12982_protectedPropertyReference() {
        runTest("compiler/testData/codegen/box/callableReference/property/kt12982_protectedPropertyReference.kt");
      }

      @TestMetadata("kt14330.kt")
      public void testKt14330() {
        runTest("compiler/testData/codegen/box/callableReference/property/kt14330.kt");
      }

      @TestMetadata("kt14330_2.kt")
      public void testKt14330_2() {
        runTest("compiler/testData/codegen/box/callableReference/property/kt14330_2.kt");
      }

      @TestMetadata("kt15447.kt")
      public void testKt15447() {
        runTest("compiler/testData/codegen/box/callableReference/property/kt15447.kt");
      }

      @TestMetadata("kt6870_privatePropertyReference.kt")
      public void testKt6870_privatePropertyReference() {
        runTest("compiler/testData/codegen/box/callableReference/property/kt6870_privatePropertyReference.kt");
      }

      @TestMetadata("listOfStringsMapLength.kt")
      public void testListOfStringsMapLength() {
        runTest("compiler/testData/codegen/box/callableReference/property/listOfStringsMapLength.kt");
      }

      @TestMetadata("localClassVar.kt")
      public void testLocalClassVar() {
        runTest("compiler/testData/codegen/box/callableReference/property/localClassVar.kt");
      }

      @TestMetadata("overriddenInSubclass.kt")
      public void testOverriddenInSubclass() {
        runTest("compiler/testData/codegen/box/callableReference/property/overriddenInSubclass.kt");
      }

      @TestMetadata("privateSetOuterClass.kt")
      public void testPrivateSetOuterClass() {
        runTest("compiler/testData/codegen/box/callableReference/property/privateSetOuterClass.kt");
      }

      @TestMetadata("privateSetterInsideClass.kt")
      public void testPrivateSetterInsideClass() {
        runTest("compiler/testData/codegen/box/callableReference/property/privateSetterInsideClass.kt");
      }

      @TestMetadata("privateSetterOutsideClass.kt")
      public void testPrivateSetterOutsideClass() {
        runTest("compiler/testData/codegen/box/callableReference/property/privateSetterOutsideClass.kt");
      }

      @TestMetadata("receiverEvaluatedOnce.kt")
      public void testReceiverEvaluatedOnce() {
        runTest("compiler/testData/codegen/box/callableReference/property/receiverEvaluatedOnce.kt");
      }

      @TestMetadata("simpleExtension.kt")
      public void testSimpleExtension() {
        runTest("compiler/testData/codegen/box/callableReference/property/simpleExtension.kt");
      }

      @TestMetadata("simpleMember.kt")
      public void testSimpleMember() {
        runTest("compiler/testData/codegen/box/callableReference/property/simpleMember.kt");
      }

      @TestMetadata("simpleMutableExtension.kt")
      public void testSimpleMutableExtension() {
        runTest("compiler/testData/codegen/box/callableReference/property/simpleMutableExtension.kt");
      }

      @TestMetadata("simpleMutableMember.kt")
      public void testSimpleMutableMember() {
        runTest("compiler/testData/codegen/box/callableReference/property/simpleMutableMember.kt");
      }

      @TestMetadata("simpleMutableTopLevel.kt")
      public void testSimpleMutableTopLevel() {
        runTest("compiler/testData/codegen/box/callableReference/property/simpleMutableTopLevel.kt");
      }

      @TestMetadata("simpleTopLevel.kt")
      public void testSimpleTopLevel() {
        runTest("compiler/testData/codegen/box/callableReference/property/simpleTopLevel.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/callableReference/serializability")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Serializability extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      @TestMetadata("adaptedReferences.kt")
      public void testAdaptedReferences() {
        runTest("compiler/testData/codegen/box/callableReference/serializability/adaptedReferences.kt");
      }

      public void testAllFilesPresentInSerializability() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/callableReference/serializability"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("boundWithNotSerializableReceiver.kt")
      public void testBoundWithNotSerializableReceiver() {
        runTest("compiler/testData/codegen/box/callableReference/serializability/boundWithNotSerializableReceiver.kt");
      }

      @TestMetadata("boundWithSerializableReceiver.kt")
      public void testBoundWithSerializableReceiver() {
        runTest("compiler/testData/codegen/box/callableReference/serializability/boundWithSerializableReceiver.kt");
      }

      @TestMetadata("noReflect.kt")
      public void testNoReflect() {
        runTest("compiler/testData/codegen/box/callableReference/serializability/noReflect.kt");
      }

      @TestMetadata("referenceToCompanionFunction.kt")
      public void testReferenceToCompanionFunction() {
        runTest("compiler/testData/codegen/box/callableReference/serializability/referenceToCompanionFunction.kt");
      }

      @TestMetadata("reflectedIsNotSerialized.kt")
      public void testReflectedIsNotSerialized() {
        runTest("compiler/testData/codegen/box/callableReference/serializability/reflectedIsNotSerialized.kt");
      }

      @TestMetadata("withReflect.kt")
      public void testWithReflect() {
        runTest("compiler/testData/codegen/box/callableReference/serializability/withReflect.kt");
      }
    }
  }

  @TestMetadata("compiler/testData/codegen/box/casts")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Casts extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInCasts() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/casts"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("arrayDowncastingContravariant.kt")
    public void testArrayDowncastingContravariant() {
      runTest("compiler/testData/codegen/box/casts/arrayDowncastingContravariant.kt");
    }

    @TestMetadata("arrayDowncatingInvariant.kt")
    public void testArrayDowncatingInvariant() {
      runTest("compiler/testData/codegen/box/casts/arrayDowncatingInvariant.kt");
    }

    @TestMetadata("arrayDownctingCovariant.kt")
    public void testArrayDownctingCovariant() {
      runTest("compiler/testData/codegen/box/casts/arrayDownctingCovariant.kt");
    }

    @TestMetadata("as.kt")
    public void testAs() {
      runTest("compiler/testData/codegen/box/casts/as.kt");
    }

    @TestMetadata("asForConstants.kt")
    public void testAsForConstants() {
      runTest("compiler/testData/codegen/box/casts/asForConstants.kt");
    }

    @TestMetadata("asSafe.kt")
    public void testAsSafe() {
      runTest("compiler/testData/codegen/box/casts/asSafe.kt");
    }

    @TestMetadata("asSafeFail.kt")
    public void testAsSafeFail() {
      runTest("compiler/testData/codegen/box/casts/asSafeFail.kt");
    }

    @TestMetadata("asSafeForConstants.kt")
    public void testAsSafeForConstants() {
      runTest("compiler/testData/codegen/box/casts/asSafeForConstants.kt");
    }

    @TestMetadata("asThrowsNpe_1_4.kt")
    public void testAsThrowsNpe_1_4() {
      runTest("compiler/testData/codegen/box/casts/asThrowsNpe_1_4.kt");
    }

    @TestMetadata("asUnit.kt")
    public void testAsUnit() {
      runTest("compiler/testData/codegen/box/casts/asUnit.kt");
    }

    @TestMetadata("asWithGeneric.kt")
    public void testAsWithGeneric() {
      runTest("compiler/testData/codegen/box/casts/asWithGeneric.kt");
    }

    @TestMetadata("castGenericNull.kt")
    public void testCastGenericNull() {
      runTest("compiler/testData/codegen/box/casts/castGenericNull.kt");
    }

    @TestMetadata("castToDefinitelyNotNullType.kt")
    public void testCastToDefinitelyNotNullType() {
      runTest("compiler/testData/codegen/box/casts/castToDefinitelyNotNullType.kt");
    }

    @TestMetadata("dontCreateInconsistentTypeDuringStarProjectionSubstitution.kt")
    public void testDontCreateInconsistentTypeDuringStarProjectionSubstitution() {
      runTest("compiler/testData/codegen/box/casts/dontCreateInconsistentTypeDuringStarProjectionSubstitution.kt");
    }

    @TestMetadata("genericReturnCast.kt")
    public void testGenericReturnCast() {
      runTest("compiler/testData/codegen/box/casts/genericReturnCast.kt");
    }

    @TestMetadata("intersectionTypeMultipleBounds.kt")
    public void testIntersectionTypeMultipleBounds() {
      runTest("compiler/testData/codegen/box/casts/intersectionTypeMultipleBounds.kt");
    }

    @TestMetadata("intersectionTypeMultipleBoundsImplicitReceiver.kt")
    public void testIntersectionTypeMultipleBoundsImplicitReceiver() {
      runTest("compiler/testData/codegen/box/casts/intersectionTypeMultipleBoundsImplicitReceiver.kt");
    }

    @TestMetadata("intersectionTypeSmartcast.kt")
    public void testIntersectionTypeSmartcast() {
      runTest("compiler/testData/codegen/box/casts/intersectionTypeSmartcast.kt");
    }

    @TestMetadata("intersectionTypeWithMultipleBoundsAsReceiver.kt")
    public void testIntersectionTypeWithMultipleBoundsAsReceiver() {
      runTest("compiler/testData/codegen/box/casts/intersectionTypeWithMultipleBoundsAsReceiver.kt");
    }

    @TestMetadata("intersectionTypeWithoutGenericsAsReceiver.kt")
    public void testIntersectionTypeWithoutGenericsAsReceiver() {
      runTest("compiler/testData/codegen/box/casts/intersectionTypeWithoutGenericsAsReceiver.kt");
    }

    @TestMetadata("is.kt")
    public void testIs() {
      runTest("compiler/testData/codegen/box/casts/is.kt");
    }

    @TestMetadata("isNullablePrimitive.kt")
    public void testIsNullablePrimitive() {
      runTest("compiler/testData/codegen/box/casts/isNullablePrimitive.kt");
    }

    @TestMetadata("kt22714.kt")
    public void testKt22714() {
      runTest("compiler/testData/codegen/box/casts/kt22714.kt");
    }

    @TestMetadata("kt48927_privateMethodOnDerivedCastToBase.kt")
    public void testKt48927_privateMethodOnDerivedCastToBase() {
      runTest("compiler/testData/codegen/box/casts/kt48927_privateMethodOnDerivedCastToBase.kt");
    }

    @TestMetadata("kt50577.kt")
    public void testKt50577() {
      runTest("compiler/testData/codegen/box/casts/kt50577.kt");
    }

    @TestMetadata("kt53146.kt")
    public void testKt53146() {
      runTest("compiler/testData/codegen/box/casts/kt53146.kt");
    }

    @TestMetadata("kt53677.kt")
    public void testKt53677() {
      runTest("compiler/testData/codegen/box/casts/kt53677.kt");
    }

    @TestMetadata("kt54318.kt")
    public void testKt54318() {
      runTest("compiler/testData/codegen/box/casts/kt54318.kt");
    }

    @TestMetadata("kt54581.kt")
    public void testKt54581() {
      runTest("compiler/testData/codegen/box/casts/kt54581.kt");
    }

    @TestMetadata("kt54707.kt")
    public void testKt54707() {
      runTest("compiler/testData/codegen/box/casts/kt54707.kt");
    }

    @TestMetadata("kt54802.kt")
    public void testKt54802() {
      runTest("compiler/testData/codegen/box/casts/kt54802.kt");
    }

    @TestMetadata("kt55005.kt")
    public void testKt55005() {
      runTest("compiler/testData/codegen/box/casts/kt55005.kt");
    }

    @TestMetadata("kt58707.kt")
    public void testKt58707() {
      runTest("compiler/testData/codegen/box/casts/kt58707.kt");
    }

    @TestMetadata("kt59022.kt")
    public void testKt59022() {
      runTest("compiler/testData/codegen/box/casts/kt59022.kt");
    }

    @TestMetadata("kt65197.kt")
    public void testKt65197() {
      runTest("compiler/testData/codegen/box/casts/kt65197.kt");
    }

    @TestMetadata("kt68509.kt")
    public void testKt68509() {
      runTest("compiler/testData/codegen/box/casts/kt68509.kt");
    }

    @TestMetadata("lambdaToUnitCast.kt")
    public void testLambdaToUnitCast() {
      runTest("compiler/testData/codegen/box/casts/lambdaToUnitCast.kt");
    }

    @TestMetadata("notIs.kt")
    public void testNotIs() {
      runTest("compiler/testData/codegen/box/casts/notIs.kt");
    }

    @TestMetadata("nullableSafeCastToTypeParameterWithInterfaceUpperBound.kt")
    public void testNullableSafeCastToTypeParameterWithInterfaceUpperBound() {
      runTest("compiler/testData/codegen/box/casts/nullableSafeCastToTypeParameterWithInterfaceUpperBound.kt");
    }

    @TestMetadata("objectToPrimitiveWithAssertion.kt")
    public void testObjectToPrimitiveWithAssertion() {
      runTest("compiler/testData/codegen/box/casts/objectToPrimitiveWithAssertion.kt");
    }

    @TestMetadata("unitAsAny.kt")
    public void testUnitAsAny() {
      runTest("compiler/testData/codegen/box/casts/unitAsAny.kt");
    }

    @TestMetadata("unitAsInt.kt")
    public void testUnitAsInt() {
      runTest("compiler/testData/codegen/box/casts/unitAsInt.kt");
    }

    @TestMetadata("unitAsSafeAny.kt")
    public void testUnitAsSafeAny() {
      runTest("compiler/testData/codegen/box/casts/unitAsSafeAny.kt");
    }

    @TestMetadata("unitNullableCast.kt")
    public void testUnitNullableCast() {
      runTest("compiler/testData/codegen/box/casts/unitNullableCast.kt");
    }

    @TestMetadata("compiler/testData/codegen/box/casts/functions")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Functions extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInFunctions() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/casts/functions"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("asFunKBig.kt")
      public void testAsFunKBig() {
        runTest("compiler/testData/codegen/box/casts/functions/asFunKBig.kt");
      }

      @TestMetadata("asFunKSmall.kt")
      public void testAsFunKSmall() {
        runTest("compiler/testData/codegen/box/casts/functions/asFunKSmall.kt");
      }

      @TestMetadata("isFunKBig.kt")
      public void testIsFunKBig() {
        runTest("compiler/testData/codegen/box/casts/functions/isFunKBig.kt");
      }

      @TestMetadata("isFunKSmall.kt")
      public void testIsFunKSmall() {
        runTest("compiler/testData/codegen/box/casts/functions/isFunKSmall.kt");
      }

      @TestMetadata("isFunKSmallJVM.kt")
      public void testIsFunKSmallJVM() {
        runTest("compiler/testData/codegen/box/casts/functions/isFunKSmallJVM.kt");
      }

      @TestMetadata("isFunKSmallNonJS.kt")
      public void testIsFunKSmallNonJS() {
        runTest("compiler/testData/codegen/box/casts/functions/isFunKSmallNonJS.kt");
      }

      @TestMetadata("javaTypeIsFunK.kt")
      public void testJavaTypeIsFunK() {
        runTest("compiler/testData/codegen/box/casts/functions/javaTypeIsFunK.kt");
      }

      @TestMetadata("reifiedAsFunKBig.kt")
      public void testReifiedAsFunKBig() {
        runTest("compiler/testData/codegen/box/casts/functions/reifiedAsFunKBig.kt");
      }

      @TestMetadata("reifiedAsFunKSmall.kt")
      public void testReifiedAsFunKSmall() {
        runTest("compiler/testData/codegen/box/casts/functions/reifiedAsFunKSmall.kt");
      }

      @TestMetadata("reifiedIsFunKBig.kt")
      public void testReifiedIsFunKBig() {
        runTest("compiler/testData/codegen/box/casts/functions/reifiedIsFunKBig.kt");
      }

      @TestMetadata("reifiedIsFunKSmall.kt")
      public void testReifiedIsFunKSmall() {
        runTest("compiler/testData/codegen/box/casts/functions/reifiedIsFunKSmall.kt");
      }

      @TestMetadata("reifiedSafeAsFunKBig.kt")
      public void testReifiedSafeAsFunKBig() {
        runTest("compiler/testData/codegen/box/casts/functions/reifiedSafeAsFunKBig.kt");
      }

      @TestMetadata("reifiedSafeAsFunKSmall.kt")
      public void testReifiedSafeAsFunKSmall() {
        runTest("compiler/testData/codegen/box/casts/functions/reifiedSafeAsFunKSmall.kt");
      }

      @TestMetadata("safeAsFunKBig.kt")
      public void testSafeAsFunKBig() {
        runTest("compiler/testData/codegen/box/casts/functions/safeAsFunKBig.kt");
      }

      @TestMetadata("safeAsFunKSmall.kt")
      public void testSafeAsFunKSmall() {
        runTest("compiler/testData/codegen/box/casts/functions/safeAsFunKSmall.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/casts/javaInterop")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class JavaInterop extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInJavaInterop() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/casts/javaInterop"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("castWithWrongType.kt")
      public void testCastWithWrongType() {
        runTest("compiler/testData/codegen/box/casts/javaInterop/castWithWrongType.kt");
      }

      @TestMetadata("implicitNotNullWithWrongType.kt")
      public void testImplicitNotNullWithWrongType() {
        runTest("compiler/testData/codegen/box/casts/javaInterop/implicitNotNullWithWrongType.kt");
      }

      @TestMetadata("instanceOfWithWrongType.kt")
      public void testInstanceOfWithWrongType() {
        runTest("compiler/testData/codegen/box/casts/javaInterop/instanceOfWithWrongType.kt");
      }

      @TestMetadata("noNullCheckOnCollectionContains.kt")
      public void testNoNullCheckOnCollectionContains() {
        runTest("compiler/testData/codegen/box/casts/javaInterop/noNullCheckOnCollectionContains.kt");
      }

      @TestMetadata("noNullCheckOnCollectionRemove.kt")
      public void testNoNullCheckOnCollectionRemove() {
        runTest("compiler/testData/codegen/box/casts/javaInterop/noNullCheckOnCollectionRemove.kt");
      }

      @TestMetadata("noNullCheckOnListIndexOf.kt")
      public void testNoNullCheckOnListIndexOf() {
        runTest("compiler/testData/codegen/box/casts/javaInterop/noNullCheckOnListIndexOf.kt");
      }

      @TestMetadata("noNullCheckOnListLastIndexOf.kt")
      public void testNoNullCheckOnListLastIndexOf() {
        runTest("compiler/testData/codegen/box/casts/javaInterop/noNullCheckOnListLastIndexOf.kt");
      }

      @TestMetadata("noNullCheckOnMapContainsKey.kt")
      public void testNoNullCheckOnMapContainsKey() {
        runTest("compiler/testData/codegen/box/casts/javaInterop/noNullCheckOnMapContainsKey.kt");
      }

      @TestMetadata("noNullCheckOnMapContainsValue.kt")
      public void testNoNullCheckOnMapContainsValue() {
        runTest("compiler/testData/codegen/box/casts/javaInterop/noNullCheckOnMapContainsValue.kt");
      }

      @TestMetadata("noNullCheckOnMapGet.kt")
      public void testNoNullCheckOnMapGet() {
        runTest("compiler/testData/codegen/box/casts/javaInterop/noNullCheckOnMapGet.kt");
      }

      @TestMetadata("noNullCheckOnMapRemove.kt")
      public void testNoNullCheckOnMapRemove() {
        runTest("compiler/testData/codegen/box/casts/javaInterop/noNullCheckOnMapRemove.kt");
      }

      @TestMetadata("nullCheckOnMapGetOrDefault.kt")
      public void testNullCheckOnMapGetOrDefault() {
        runTest("compiler/testData/codegen/box/casts/javaInterop/nullCheckOnMapGetOrDefault.kt");
      }

      @TestMetadata("nullCheckOnMapRemove2.kt")
      public void testNullCheckOnMapRemove2() {
        runTest("compiler/testData/codegen/box/casts/javaInterop/nullCheckOnMapRemove2.kt");
      }

      @TestMetadata("safeCastWithWrongType.kt")
      public void testSafeCastWithWrongType() {
        runTest("compiler/testData/codegen/box/casts/javaInterop/safeCastWithWrongType.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/casts/literalExpressionAsGenericArgument")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class LiteralExpressionAsGenericArgument extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInLiteralExpressionAsGenericArgument() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/casts/literalExpressionAsGenericArgument"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("binaryExpressionCast.kt")
      public void testBinaryExpressionCast() {
        runTest("compiler/testData/codegen/box/casts/literalExpressionAsGenericArgument/binaryExpressionCast.kt");
      }

      @TestMetadata("javaBox.kt")
      public void testJavaBox() {
        runTest("compiler/testData/codegen/box/casts/literalExpressionAsGenericArgument/javaBox.kt");
      }

      @TestMetadata("labeledExpressionCast.kt")
      public void testLabeledExpressionCast() {
        runTest("compiler/testData/codegen/box/casts/literalExpressionAsGenericArgument/labeledExpressionCast.kt");
      }

      @TestMetadata("parenthesizedExpressionCast.kt")
      public void testParenthesizedExpressionCast() {
        runTest("compiler/testData/codegen/box/casts/literalExpressionAsGenericArgument/parenthesizedExpressionCast.kt");
      }

      @TestMetadata("superConstructor.kt")
      public void testSuperConstructor() {
        runTest("compiler/testData/codegen/box/casts/literalExpressionAsGenericArgument/superConstructor.kt");
      }

      @TestMetadata("unaryExpressionCast.kt")
      public void testUnaryExpressionCast() {
        runTest("compiler/testData/codegen/box/casts/literalExpressionAsGenericArgument/unaryExpressionCast.kt");
      }

      @TestMetadata("vararg.kt")
      public void testVararg() {
        runTest("compiler/testData/codegen/box/casts/literalExpressionAsGenericArgument/vararg.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/casts/mutableCollections")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class MutableCollections extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInMutableCollections() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/casts/mutableCollections"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("asWithMutable.kt")
      public void testAsWithMutable() {
        runTest("compiler/testData/codegen/box/casts/mutableCollections/asWithMutable.kt");
      }

      @TestMetadata("isWithMutable.kt")
      public void testIsWithMutable() {
        runTest("compiler/testData/codegen/box/casts/mutableCollections/isWithMutable.kt");
      }

      @TestMetadata("mutabilityMarkerInterfaces.kt")
      public void testMutabilityMarkerInterfaces() {
        runTest("compiler/testData/codegen/box/casts/mutableCollections/mutabilityMarkerInterfaces.kt");
      }

      @TestMetadata("reifiedAsWithMutable.kt")
      public void testReifiedAsWithMutable() {
        runTest("compiler/testData/codegen/box/casts/mutableCollections/reifiedAsWithMutable.kt");
      }

      @TestMetadata("reifiedIsWithMutable.kt")
      public void testReifiedIsWithMutable() {
        runTest("compiler/testData/codegen/box/casts/mutableCollections/reifiedIsWithMutable.kt");
      }

      @TestMetadata("reifiedSafeAsWithMutable.kt")
      public void testReifiedSafeAsWithMutable() {
        runTest("compiler/testData/codegen/box/casts/mutableCollections/reifiedSafeAsWithMutable.kt");
      }

      @TestMetadata("safeAsWithMutable.kt")
      public void testSafeAsWithMutable() {
        runTest("compiler/testData/codegen/box/casts/mutableCollections/safeAsWithMutable.kt");
      }

      @TestMetadata("weirdMutableCasts.kt")
      public void testWeirdMutableCasts() {
        runTest("compiler/testData/codegen/box/casts/mutableCollections/weirdMutableCasts.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/casts/nativeCCEMessage")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class NativeCCEMessage extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInNativeCCEMessage() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/casts/nativeCCEMessage"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }
    }
  }

  @TestMetadata("compiler/testData/codegen/box/checkcastOptimization")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class CheckcastOptimization extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInCheckcastOptimization() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/checkcastOptimization"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("kt19128.kt")
    public void testKt19128() {
      runTest("compiler/testData/codegen/box/checkcastOptimization/kt19128.kt");
    }

    @TestMetadata("kt19246.kt")
    public void testKt19246() {
      runTest("compiler/testData/codegen/box/checkcastOptimization/kt19246.kt");
    }

    @TestMetadata("kt47851.kt")
    public void testKt47851() {
      runTest("compiler/testData/codegen/box/checkcastOptimization/kt47851.kt");
    }

    @TestMetadata("kt47851a.kt")
    public void testKt47851a() {
      runTest("compiler/testData/codegen/box/checkcastOptimization/kt47851a.kt");
    }

    @TestMetadata("kt50215.kt")
    public void testKt50215() {
      runTest("compiler/testData/codegen/box/checkcastOptimization/kt50215.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/classDelegation")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class ClassDelegation extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInClassDelegation() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/classDelegation"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("delegationAndJavaInterfaceWithDefault.kt")
    public void testDelegationAndJavaInterfaceWithDefault() {
      runTest("compiler/testData/codegen/box/classDelegation/delegationAndJavaInterfaceWithDefault.kt");
    }

    @TestMetadata("delegationToInOutTypeParameters.kt")
    public void testDelegationToInOutTypeParameters() {
      runTest("compiler/testData/codegen/box/classDelegation/delegationToInOutTypeParameters.kt");
    }

    @TestMetadata("delegationToInTypeParameter.kt")
    public void testDelegationToInTypeParameter() {
      runTest("compiler/testData/codegen/box/classDelegation/delegationToInTypeParameter.kt");
    }

    @TestMetadata("delegationToOutTypeParameter.kt")
    public void testDelegationToOutTypeParameter() {
      runTest("compiler/testData/codegen/box/classDelegation/delegationToOutTypeParameter.kt");
    }

    @TestMetadata("delegationToTypeParameter.kt")
    public void testDelegationToTypeParameter() {
      runTest("compiler/testData/codegen/box/classDelegation/delegationToTypeParameter.kt");
    }

    @TestMetadata("delegationToTypeParameterWithRecursiveBond.kt")
    public void testDelegationToTypeParameterWithRecursiveBond() {
      runTest("compiler/testData/codegen/box/classDelegation/delegationToTypeParameterWithRecursiveBond.kt");
    }

    @TestMetadata("generic.kt")
    public void testGeneric() {
      runTest("compiler/testData/codegen/box/classDelegation/generic.kt");
    }

    @TestMetadata("hiddenDelegateAndLateinitVar.kt")
    public void testHiddenDelegateAndLateinitVar() {
      runTest("compiler/testData/codegen/box/classDelegation/hiddenDelegateAndLateinitVar.kt");
    }

    @TestMetadata("method.kt")
    public void testMethod() {
      runTest("compiler/testData/codegen/box/classDelegation/method.kt");
    }

    @TestMetadata("multipleModules.kt")
    public void testMultipleModules() {
      runTest("compiler/testData/codegen/box/classDelegation/multipleModules.kt");
    }

    @TestMetadata("property.kt")
    public void testProperty() {
      runTest("compiler/testData/codegen/box/classDelegation/property.kt");
    }

    @TestMetadata("withBridge.kt")
    public void testWithBridge() {
      runTest("compiler/testData/codegen/box/classDelegation/withBridge.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/classLiteral")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class ClassLiteral extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInClassLiteral() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/classLiteral"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("bareArray.kt")
    public void testBareArray() {
      runTest("compiler/testData/codegen/box/classLiteral/bareArray.kt");
    }

    @TestMetadata("classEquality.kt")
    public void testClassEquality() {
      runTest("compiler/testData/codegen/box/classLiteral/classEquality.kt");
    }

    @TestMetadata("primitiveClassEquality.kt")
    public void testPrimitiveClassEquality() {
      runTest("compiler/testData/codegen/box/classLiteral/primitiveClassEquality.kt");
    }

    @TestMetadata("primitiveKClassEquality.kt")
    public void testPrimitiveKClassEquality() {
      runTest("compiler/testData/codegen/box/classLiteral/primitiveKClassEquality.kt");
    }

    @TestMetadata("compiler/testData/codegen/box/classLiteral/bound")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Bound extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInBound() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/classLiteral/bound"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("javaIntrinsicWithSideEffect.kt")
      public void testJavaIntrinsicWithSideEffect() {
        runTest("compiler/testData/codegen/box/classLiteral/bound/javaIntrinsicWithSideEffect.kt");
      }

      @TestMetadata("primitives.kt")
      public void testPrimitives() {
        runTest("compiler/testData/codegen/box/classLiteral/bound/primitives.kt");
      }

      @TestMetadata("sideEffect.kt")
      public void testSideEffect() {
        runTest("compiler/testData/codegen/box/classLiteral/bound/sideEffect.kt");
      }

      @TestMetadata("simple.kt")
      public void testSimple() {
        runTest("compiler/testData/codegen/box/classLiteral/bound/simple.kt");
      }

      @TestMetadata("smartCast.kt")
      public void testSmartCast() {
        runTest("compiler/testData/codegen/box/classLiteral/bound/smartCast.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/classLiteral/java")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Java extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInJava() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/classLiteral/java"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("java.kt")
      public void testJava() {
        runTest("compiler/testData/codegen/box/classLiteral/java/java.kt");
      }

      @TestMetadata("javaObjectType.kt")
      public void testJavaObjectType() {
        runTest("compiler/testData/codegen/box/classLiteral/java/javaObjectType.kt");
      }

      @TestMetadata("javaObjectTypeReified.kt")
      public void testJavaObjectTypeReified() {
        runTest("compiler/testData/codegen/box/classLiteral/java/javaObjectTypeReified.kt");
      }

      @TestMetadata("javaPrimitiveType.kt")
      public void testJavaPrimitiveType() {
        runTest("compiler/testData/codegen/box/classLiteral/java/javaPrimitiveType.kt");
      }

      @TestMetadata("javaPrimitiveTypeReified.kt")
      public void testJavaPrimitiveTypeReified() {
        runTest("compiler/testData/codegen/box/classLiteral/java/javaPrimitiveTypeReified.kt");
      }

      @TestMetadata("javaReified.kt")
      public void testJavaReified() {
        runTest("compiler/testData/codegen/box/classLiteral/java/javaReified.kt");
      }

      @TestMetadata("kt11943.kt")
      public void testKt11943() {
        runTest("compiler/testData/codegen/box/classLiteral/java/kt11943.kt");
      }

      @TestMetadata("objectSuperConstructorCall.kt")
      public void testObjectSuperConstructorCall() {
        runTest("compiler/testData/codegen/box/classLiteral/java/objectSuperConstructorCall.kt");
      }
    }
  }

  @TestMetadata("compiler/testData/codegen/box/classes")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Classes extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInClasses() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/classes"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("boxPrimitiveTypeInClinitOfClassObject.kt")
    public void testBoxPrimitiveTypeInClinitOfClassObject() {
      runTest("compiler/testData/codegen/box/classes/boxPrimitiveTypeInClinitOfClassObject.kt");
    }

    @TestMetadata("classCompanionInitializationWithJava.kt")
    public void testClassCompanionInitializationWithJava() {
      runTest("compiler/testData/codegen/box/classes/classCompanionInitializationWithJava.kt");
    }

    @TestMetadata("classNamedAsOldPackageFacade.kt")
    public void testClassNamedAsOldPackageFacade() {
      runTest("compiler/testData/codegen/box/classes/classNamedAsOldPackageFacade.kt");
    }

    @TestMetadata("classObject.kt")
    public void testClassObject() {
      runTest("compiler/testData/codegen/box/classes/classObject.kt");
    }

    @TestMetadata("classObjectAsExtensionReceiver.kt")
    public void testClassObjectAsExtensionReceiver() {
      runTest("compiler/testData/codegen/box/classes/classObjectAsExtensionReceiver.kt");
    }

    @TestMetadata("classObjectAsStaticInitializer.kt")
    public void testClassObjectAsStaticInitializer() {
      runTest("compiler/testData/codegen/box/classes/classObjectAsStaticInitializer.kt");
    }

    @TestMetadata("classObjectField.kt")
    public void testClassObjectField() {
      runTest("compiler/testData/codegen/box/classes/classObjectField.kt");
    }

    @TestMetadata("classObjectInTrait.kt")
    public void testClassObjectInTrait() {
      runTest("compiler/testData/codegen/box/classes/classObjectInTrait.kt");
    }

    @TestMetadata("classObjectNotOfEnum.kt")
    public void testClassObjectNotOfEnum() {
      runTest("compiler/testData/codegen/box/classes/classObjectNotOfEnum.kt");
    }

    @TestMetadata("classObjectToString.kt")
    public void testClassObjectToString() {
      runTest("compiler/testData/codegen/box/classes/classObjectToString.kt");
    }

    @TestMetadata("classObjectWithPrivateGenericMember.kt")
    public void testClassObjectWithPrivateGenericMember() {
      runTest("compiler/testData/codegen/box/classes/classObjectWithPrivateGenericMember.kt");
    }

    @TestMetadata("classObjectsWithParentClasses.kt")
    public void testClassObjectsWithParentClasses() {
      runTest("compiler/testData/codegen/box/classes/classObjectsWithParentClasses.kt");
    }

    @TestMetadata("comanionObjectFieldVsClassField.kt")
    public void testComanionObjectFieldVsClassField() {
      runTest("compiler/testData/codegen/box/classes/comanionObjectFieldVsClassField.kt");
    }

    @TestMetadata("defaultObjectSameNamesAsInOuter.kt")
    public void testDefaultObjectSameNamesAsInOuter() {
      runTest("compiler/testData/codegen/box/classes/defaultObjectSameNamesAsInOuter.kt");
    }

    @TestMetadata("delegateConstructorCallWithKeywords.kt")
    public void testDelegateConstructorCallWithKeywords() {
      runTest("compiler/testData/codegen/box/classes/delegateConstructorCallWithKeywords.kt");
    }

    @TestMetadata("delegation2.kt")
    public void testDelegation2() {
      runTest("compiler/testData/codegen/box/classes/delegation2.kt");
    }

    @TestMetadata("delegation3.kt")
    public void testDelegation3() {
      runTest("compiler/testData/codegen/box/classes/delegation3.kt");
    }

    @TestMetadata("delegation4.kt")
    public void testDelegation4() {
      runTest("compiler/testData/codegen/box/classes/delegation4.kt");
    }

    @TestMetadata("delegationGenericArg.kt")
    public void testDelegationGenericArg() {
      runTest("compiler/testData/codegen/box/classes/delegationGenericArg.kt");
    }

    @TestMetadata("delegationGenericArgUpperBound.kt")
    public void testDelegationGenericArgUpperBound() {
      runTest("compiler/testData/codegen/box/classes/delegationGenericArgUpperBound.kt");
    }

    @TestMetadata("delegationGenericLongArg.kt")
    public void testDelegationGenericLongArg() {
      runTest("compiler/testData/codegen/box/classes/delegationGenericLongArg.kt");
    }

    @TestMetadata("delegationJava.kt")
    public void testDelegationJava() {
      runTest("compiler/testData/codegen/box/classes/delegationJava.kt");
    }

    @TestMetadata("delegationMethodsWithArgs.kt")
    public void testDelegationMethodsWithArgs() {
      runTest("compiler/testData/codegen/box/classes/delegationMethodsWithArgs.kt");
    }

    @TestMetadata("exceptionConstructor.kt")
    public void testExceptionConstructor() {
      runTest("compiler/testData/codegen/box/classes/exceptionConstructor.kt");
    }

    @TestMetadata("extensionFunWithDefaultParam.kt")
    public void testExtensionFunWithDefaultParam() {
      runTest("compiler/testData/codegen/box/classes/extensionFunWithDefaultParam.kt");
    }

    @TestMetadata("extensionOnNamedClassObject.kt")
    public void testExtensionOnNamedClassObject() {
      runTest("compiler/testData/codegen/box/classes/extensionOnNamedClassObject.kt");
    }

    @TestMetadata("funDelegation.kt")
    public void testFunDelegation() {
      runTest("compiler/testData/codegen/box/classes/funDelegation.kt");
    }

    @TestMetadata("implementComparableInSubclass.kt")
    public void testImplementComparableInSubclass() {
      runTest("compiler/testData/codegen/box/classes/implementComparableInSubclass.kt");
    }

    @TestMetadata("inheritSetAndHashSet.kt")
    public void testInheritSetAndHashSet() {
      runTest("compiler/testData/codegen/box/classes/inheritSetAndHashSet.kt");
    }

    @TestMetadata("inheritance.kt")
    public void testInheritance() {
      runTest("compiler/testData/codegen/box/classes/inheritance.kt");
    }

    @TestMetadata("inheritedInnerClass.kt")
    public void testInheritedInnerClass() {
      runTest("compiler/testData/codegen/box/classes/inheritedInnerClass.kt");
    }

    @TestMetadata("inheritedMethod.kt")
    public void testInheritedMethod() {
      runTest("compiler/testData/codegen/box/classes/inheritedMethod.kt");
    }

    @TestMetadata("initializerBlock.kt")
    public void testInitializerBlock() {
      runTest("compiler/testData/codegen/box/classes/initializerBlock.kt");
    }

    @TestMetadata("initializerBlockDImpl.kt")
    public void testInitializerBlockDImpl() {
      runTest("compiler/testData/codegen/box/classes/initializerBlockDImpl.kt");
    }

    @TestMetadata("initializerBlockResetToDefault.kt")
    public void testInitializerBlockResetToDefault() {
      runTest("compiler/testData/codegen/box/classes/initializerBlockResetToDefault.kt");
    }

    @TestMetadata("innerClass.kt")
    public void testInnerClass() {
      runTest("compiler/testData/codegen/box/classes/innerClass.kt");
    }

    @TestMetadata("interfaceCompanionInitializationWithJava.kt")
    public void testInterfaceCompanionInitializationWithJava() {
      runTest("compiler/testData/codegen/box/classes/interfaceCompanionInitializationWithJava.kt");
    }

    @TestMetadata("kt1018.kt")
    public void testKt1018() {
      runTest("compiler/testData/codegen/box/classes/kt1018.kt");
    }

    @TestMetadata("kt1120.kt")
    public void testKt1120() {
      runTest("compiler/testData/codegen/box/classes/kt1120.kt");
    }

    @TestMetadata("kt1134.kt")
    public void testKt1134() {
      runTest("compiler/testData/codegen/box/classes/kt1134.kt");
    }

    @TestMetadata("kt1157.kt")
    public void testKt1157() {
      runTest("compiler/testData/codegen/box/classes/kt1157.kt");
    }

    @TestMetadata("kt1247.kt")
    public void testKt1247() {
      runTest("compiler/testData/codegen/box/classes/kt1247.kt");
    }

    @TestMetadata("kt1345.kt")
    public void testKt1345() {
      runTest("compiler/testData/codegen/box/classes/kt1345.kt");
    }

    @TestMetadata("kt1439.kt")
    public void testKt1439() {
      runTest("compiler/testData/codegen/box/classes/kt1439.kt");
    }

    @TestMetadata("kt1535.kt")
    public void testKt1535() {
      runTest("compiler/testData/codegen/box/classes/kt1535.kt");
    }

    @TestMetadata("kt1538.kt")
    public void testKt1538() {
      runTest("compiler/testData/codegen/box/classes/kt1538.kt");
    }

    @TestMetadata("kt1578.kt")
    public void testKt1578() {
      runTest("compiler/testData/codegen/box/classes/kt1578.kt");
    }

    @TestMetadata("kt1611.kt")
    public void testKt1611() {
      runTest("compiler/testData/codegen/box/classes/kt1611.kt");
    }

    @TestMetadata("kt1721.kt")
    public void testKt1721() {
      runTest("compiler/testData/codegen/box/classes/kt1721.kt");
    }

    @TestMetadata("kt1726.kt")
    public void testKt1726() {
      runTest("compiler/testData/codegen/box/classes/kt1726.kt");
    }

    @TestMetadata("kt1759.kt")
    public void testKt1759() {
      runTest("compiler/testData/codegen/box/classes/kt1759.kt");
    }

    @TestMetadata("kt1891.kt")
    public void testKt1891() {
      runTest("compiler/testData/codegen/box/classes/kt1891.kt");
    }

    @TestMetadata("kt1918.kt")
    public void testKt1918() {
      runTest("compiler/testData/codegen/box/classes/kt1918.kt");
    }

    @TestMetadata("kt1976.kt")
    public void testKt1976() {
      runTest("compiler/testData/codegen/box/classes/kt1976.kt");
    }

    @TestMetadata("kt1980.kt")
    public void testKt1980() {
      runTest("compiler/testData/codegen/box/classes/kt1980.kt");
    }

    @TestMetadata("kt2224.kt")
    public void testKt2224() {
      runTest("compiler/testData/codegen/box/classes/kt2224.kt");
    }

    @TestMetadata("kt2288.kt")
    public void testKt2288() {
      runTest("compiler/testData/codegen/box/classes/kt2288.kt");
    }

    @TestMetadata("kt2384.kt")
    public void testKt2384() {
      runTest("compiler/testData/codegen/box/classes/kt2384.kt");
    }

    @TestMetadata("kt2390.kt")
    public void testKt2390() {
      runTest("compiler/testData/codegen/box/classes/kt2390.kt");
    }

    @TestMetadata("kt2391.kt")
    public void testKt2391() {
      runTest("compiler/testData/codegen/box/classes/kt2391.kt");
    }

    @TestMetadata("kt2395.kt")
    public void testKt2395() {
      runTest("compiler/testData/codegen/box/classes/kt2395.kt");
    }

    @TestMetadata("kt2417.kt")
    public void testKt2417() {
      runTest("compiler/testData/codegen/box/classes/kt2417.kt");
    }

    @TestMetadata("kt2477.kt")
    public void testKt2477() {
      runTest("compiler/testData/codegen/box/classes/kt2477.kt");
    }

    @TestMetadata("kt2480.kt")
    public void testKt2480() {
      runTest("compiler/testData/codegen/box/classes/kt2480.kt");
    }

    @TestMetadata("kt2482.kt")
    public void testKt2482() {
      runTest("compiler/testData/codegen/box/classes/kt2482.kt");
    }

    @TestMetadata("kt2485.kt")
    public void testKt2485() {
      runTest("compiler/testData/codegen/box/classes/kt2485.kt");
    }

    @TestMetadata("kt249.kt")
    public void testKt249() {
      runTest("compiler/testData/codegen/box/classes/kt249.kt");
    }

    @TestMetadata("kt2532.kt")
    public void testKt2532() {
      runTest("compiler/testData/codegen/box/classes/kt2532.kt");
    }

    @TestMetadata("kt2566.kt")
    public void testKt2566() {
      runTest("compiler/testData/codegen/box/classes/kt2566.kt");
    }

    @TestMetadata("kt2566_2.kt")
    public void testKt2566_2() {
      runTest("compiler/testData/codegen/box/classes/kt2566_2.kt");
    }

    @TestMetadata("kt2607.kt")
    public void testKt2607() {
      runTest("compiler/testData/codegen/box/classes/kt2607.kt");
    }

    @TestMetadata("kt2626.kt")
    public void testKt2626() {
      runTest("compiler/testData/codegen/box/classes/kt2626.kt");
    }

    @TestMetadata("kt2711.kt")
    public void testKt2711() {
      runTest("compiler/testData/codegen/box/classes/kt2711.kt");
    }

    @TestMetadata("kt2784.kt")
    public void testKt2784() {
      runTest("compiler/testData/codegen/box/classes/kt2784.kt");
    }

    @TestMetadata("kt285.kt")
    public void testKt285() {
      runTest("compiler/testData/codegen/box/classes/kt285.kt");
    }

    @TestMetadata("kt3001.kt")
    public void testKt3001() {
      runTest("compiler/testData/codegen/box/classes/kt3001.kt");
    }

    @TestMetadata("kt3114.kt")
    public void testKt3114() {
      runTest("compiler/testData/codegen/box/classes/kt3114.kt");
    }

    @TestMetadata("kt3414.kt")
    public void testKt3414() {
      runTest("compiler/testData/codegen/box/classes/kt3414.kt");
    }

    @TestMetadata("kt343.kt")
    public void testKt343() {
      runTest("compiler/testData/codegen/box/classes/kt343.kt");
    }

    @TestMetadata("kt3546.kt")
    public void testKt3546() {
      runTest("compiler/testData/codegen/box/classes/kt3546.kt");
    }

    @TestMetadata("kt40332.kt")
    public void testKt40332() {
      runTest("compiler/testData/codegen/box/classes/kt40332.kt");
    }

    @TestMetadata("kt454.kt")
    public void testKt454() {
      runTest("compiler/testData/codegen/box/classes/kt454.kt");
    }

    @TestMetadata("kt471.kt")
    public void testKt471() {
      runTest("compiler/testData/codegen/box/classes/kt471.kt");
    }

    @TestMetadata("kt48.kt")
    public void testKt48() {
      runTest("compiler/testData/codegen/box/classes/kt48.kt");
    }

    @TestMetadata("kt496.kt")
    public void testKt496() {
      runTest("compiler/testData/codegen/box/classes/kt496.kt");
    }

    @TestMetadata("kt500.kt")
    public void testKt500() {
      runTest("compiler/testData/codegen/box/classes/kt500.kt");
    }

    @TestMetadata("kt501.kt")
    public void testKt501() {
      runTest("compiler/testData/codegen/box/classes/kt501.kt");
    }

    @TestMetadata("kt504.kt")
    public void testKt504() {
      runTest("compiler/testData/codegen/box/classes/kt504.kt");
    }

    @TestMetadata("kt508.kt")
    public void testKt508() {
      runTest("compiler/testData/codegen/box/classes/kt508.kt");
    }

    @TestMetadata("kt53007.kt")
    public void testKt53007() {
      runTest("compiler/testData/codegen/box/classes/kt53007.kt");
    }

    @TestMetadata("kt5347.kt")
    public void testKt5347() {
      runTest("compiler/testData/codegen/box/classes/kt5347.kt");
    }

    @TestMetadata("kt6136.kt")
    public void testKt6136() {
      runTest("compiler/testData/codegen/box/classes/kt6136.kt");
    }

    @TestMetadata("kt633.kt")
    public void testKt633() {
      runTest("compiler/testData/codegen/box/classes/kt633.kt");
    }

    @TestMetadata("kt6816.kt")
    public void testKt6816() {
      runTest("compiler/testData/codegen/box/classes/kt6816.kt");
    }

    @TestMetadata("kt707.kt")
    public void testKt707() {
      runTest("compiler/testData/codegen/box/classes/kt707.kt");
    }

    @TestMetadata("kt723.kt")
    public void testKt723() {
      runTest("compiler/testData/codegen/box/classes/kt723.kt");
    }

    @TestMetadata("kt725.kt")
    public void testKt725() {
      runTest("compiler/testData/codegen/box/classes/kt725.kt");
    }

    @TestMetadata("kt8011.kt")
    public void testKt8011() {
      runTest("compiler/testData/codegen/box/classes/kt8011.kt");
    }

    @TestMetadata("kt8011a.kt")
    public void testKt8011a() {
      runTest("compiler/testData/codegen/box/classes/kt8011a.kt");
    }

    @TestMetadata("kt903.kt")
    public void testKt903() {
      runTest("compiler/testData/codegen/box/classes/kt903.kt");
    }

    @TestMetadata("kt940.kt")
    public void testKt940() {
      runTest("compiler/testData/codegen/box/classes/kt940.kt");
    }

    @TestMetadata("kt9642.kt")
    public void testKt9642() {
      runTest("compiler/testData/codegen/box/classes/kt9642.kt");
    }

    @TestMetadata("namedClassObject.kt")
    public void testNamedClassObject() {
      runTest("compiler/testData/codegen/box/classes/namedClassObject.kt");
    }

    @TestMetadata("nestedInitBlocksWithLambda.kt")
    public void testNestedInitBlocksWithLambda() {
      runTest("compiler/testData/codegen/box/classes/nestedInitBlocksWithLambda.kt");
    }

    @TestMetadata("outerThis.kt")
    public void testOuterThis() {
      runTest("compiler/testData/codegen/box/classes/outerThis.kt");
    }

    @TestMetadata("overloadBinaryOperator.kt")
    public void testOverloadBinaryOperator() {
      runTest("compiler/testData/codegen/box/classes/overloadBinaryOperator.kt");
    }

    @TestMetadata("overloadPlusAssign.kt")
    public void testOverloadPlusAssign() {
      runTest("compiler/testData/codegen/box/classes/overloadPlusAssign.kt");
    }

    @TestMetadata("overloadPlusAssignReturn.kt")
    public void testOverloadPlusAssignReturn() {
      runTest("compiler/testData/codegen/box/classes/overloadPlusAssignReturn.kt");
    }

    @TestMetadata("overloadPlusToPlusAssign.kt")
    public void testOverloadPlusToPlusAssign() {
      runTest("compiler/testData/codegen/box/classes/overloadPlusToPlusAssign.kt");
    }

    @TestMetadata("overloadUnaryOperator.kt")
    public void testOverloadUnaryOperator() {
      runTest("compiler/testData/codegen/box/classes/overloadUnaryOperator.kt");
    }

    @TestMetadata("privateOuterFunctions.kt")
    public void testPrivateOuterFunctions() {
      runTest("compiler/testData/codegen/box/classes/privateOuterFunctions.kt");
    }

    @TestMetadata("privateOuterProperty.kt")
    public void testPrivateOuterProperty() {
      runTest("compiler/testData/codegen/box/classes/privateOuterProperty.kt");
    }

    @TestMetadata("privateToThis.kt")
    public void testPrivateToThis() {
      runTest("compiler/testData/codegen/box/classes/privateToThis.kt");
    }

    @TestMetadata("propertyDelegation.kt")
    public void testPropertyDelegation() {
      runTest("compiler/testData/codegen/box/classes/propertyDelegation.kt");
    }

    @TestMetadata("propertyInInitializer.kt")
    public void testPropertyInInitializer() {
      runTest("compiler/testData/codegen/box/classes/propertyInInitializer.kt");
    }

    @TestMetadata("quotedClassName.kt")
    public void testQuotedClassName() {
      runTest("compiler/testData/codegen/box/classes/quotedClassName.kt");
    }

    @TestMetadata("rightHandOverride.kt")
    public void testRightHandOverride() {
      runTest("compiler/testData/codegen/box/classes/rightHandOverride.kt");
    }

    @TestMetadata("selfcreate.kt")
    public void testSelfcreate() {
      runTest("compiler/testData/codegen/box/classes/selfcreate.kt");
    }

    @TestMetadata("simpleBox.kt")
    public void testSimpleBox() {
      runTest("compiler/testData/codegen/box/classes/simpleBox.kt");
    }

    @TestMetadata("superConstructorCallWithComplexArg.kt")
    public void testSuperConstructorCallWithComplexArg() {
      runTest("compiler/testData/codegen/box/classes/superConstructorCallWithComplexArg.kt");
    }

    @TestMetadata("typedDelegation.kt")
    public void testTypedDelegation() {
      runTest("compiler/testData/codegen/box/classes/typedDelegation.kt");
    }

    @TestMetadata("compiler/testData/codegen/box/classes/inner")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Inner extends AbstractLightAnalysisModeTest {
      @TestMetadata("innerClassDerivedFromOuterClass.kt")
      public void ignoreInnerClassDerivedFromOuterClass() {
        runTest("compiler/testData/codegen/box/classes/inner/innerClassDerivedFromOuterClass.kt");
      }

      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInInner() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/classes/inner"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("extensionWithOuter.kt")
      public void testExtensionWithOuter() {
        runTest("compiler/testData/codegen/box/classes/inner/extensionWithOuter.kt");
      }

      @TestMetadata("instantiateInDerived.kt")
      public void testInstantiateInDerived() {
        runTest("compiler/testData/codegen/box/classes/inner/instantiateInDerived.kt");
      }

      @TestMetadata("instantiateInDerivedLabeled.kt")
      public void testInstantiateInDerivedLabeled() {
        runTest("compiler/testData/codegen/box/classes/inner/instantiateInDerivedLabeled.kt");
      }

      @TestMetadata("instantiateInSameClass.kt")
      public void testInstantiateInSameClass() {
        runTest("compiler/testData/codegen/box/classes/inner/instantiateInSameClass.kt");
      }

      @TestMetadata("kt6708.kt")
      public void testKt6708() {
        runTest("compiler/testData/codegen/box/classes/inner/kt6708.kt");
      }

      @TestMetadata("properOuter.kt")
      public void testProperOuter() {
        runTest("compiler/testData/codegen/box/classes/inner/properOuter.kt");
      }

      @TestMetadata("properSuperLinking.kt")
      public void testProperSuperLinking() {
        runTest("compiler/testData/codegen/box/classes/inner/properSuperLinking.kt");
      }
    }
  }

  @TestMetadata("compiler/testData/codegen/box/closures")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Closures extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInClosures() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/closures"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("anonymousObjectAsLastExpressionInLambda.kt")
    public void testAnonymousObjectAsLastExpressionInLambda() {
      runTest("compiler/testData/codegen/box/closures/anonymousObjectAsLastExpressionInLambda.kt");
    }

    @TestMetadata("captureExtensionReceiver.kt")
    public void testCaptureExtensionReceiver() {
      runTest("compiler/testData/codegen/box/closures/captureExtensionReceiver.kt");
    }

    @TestMetadata("captureExtensionReceiverX2.kt")
    public void testCaptureExtensionReceiverX2() {
      runTest("compiler/testData/codegen/box/closures/captureExtensionReceiverX2.kt");
    }

    @TestMetadata("capturedLocalGenericFun.kt")
    public void testCapturedLocalGenericFun() {
      runTest("compiler/testData/codegen/box/closures/capturedLocalGenericFun.kt");
    }

    @TestMetadata("closureCapturingGenericParam.kt")
    public void testClosureCapturingGenericParam() {
      runTest("compiler/testData/codegen/box/closures/closureCapturingGenericParam.kt");
    }

    @TestMetadata("closureInsideConstrucor.kt")
    public void testClosureInsideConstrucor() {
      runTest("compiler/testData/codegen/box/closures/closureInsideConstrucor.kt");
    }

    @TestMetadata("closureOnTopLevel1.kt")
    public void testClosureOnTopLevel1() {
      runTest("compiler/testData/codegen/box/closures/closureOnTopLevel1.kt");
    }

    @TestMetadata("closureOnTopLevel2.kt")
    public void testClosureOnTopLevel2() {
      runTest("compiler/testData/codegen/box/closures/closureOnTopLevel2.kt");
    }

    @TestMetadata("closureWithParameter.kt")
    public void testClosureWithParameter() {
      runTest("compiler/testData/codegen/box/closures/closureWithParameter.kt");
    }

    @TestMetadata("closureWithParameterAndBoxing.kt")
    public void testClosureWithParameterAndBoxing() {
      runTest("compiler/testData/codegen/box/closures/closureWithParameterAndBoxing.kt");
    }

    @TestMetadata("closuresAsSingleton.kt")
    public void testClosuresAsSingleton() {
      runTest("compiler/testData/codegen/box/closures/closuresAsSingleton.kt");
    }

    @TestMetadata("crossinlineLocalDeclaration.kt")
    public void testCrossinlineLocalDeclaration() {
      runTest("compiler/testData/codegen/box/closures/crossinlineLocalDeclaration.kt");
    }

    @TestMetadata("doubleEnclosedLocalVariable.kt")
    public void testDoubleEnclosedLocalVariable() {
      runTest("compiler/testData/codegen/box/closures/doubleEnclosedLocalVariable.kt");
    }

    @TestMetadata("enclosingLocalVariable.kt")
    public void testEnclosingLocalVariable() {
      runTest("compiler/testData/codegen/box/closures/enclosingLocalVariable.kt");
    }

    @TestMetadata("enclosingThis.kt")
    public void testEnclosingThis() {
      runTest("compiler/testData/codegen/box/closures/enclosingThis.kt");
    }

    @TestMetadata("extensionClosure.kt")
    public void testExtensionClosure() {
      runTest("compiler/testData/codegen/box/closures/extensionClosure.kt");
    }

    @TestMetadata("kt10044.kt")
    public void testKt10044() {
      runTest("compiler/testData/codegen/box/closures/kt10044.kt");
    }

    @TestMetadata("kt11634.kt")
    public void testKt11634() {
      runTest("compiler/testData/codegen/box/closures/kt11634.kt");
    }

    @TestMetadata("kt11634_2.kt")
    public void testKt11634_2() {
      runTest("compiler/testData/codegen/box/closures/kt11634_2.kt");
    }

    @TestMetadata("kt11634_3.kt")
    public void testKt11634_3() {
      runTest("compiler/testData/codegen/box/closures/kt11634_3.kt");
    }

    @TestMetadata("kt11634_4.kt")
    public void testKt11634_4() {
      runTest("compiler/testData/codegen/box/closures/kt11634_4.kt");
    }

    @TestMetadata("kt19389.kt")
    public void testKt19389() {
      runTest("compiler/testData/codegen/box/closures/kt19389.kt");
    }

    @TestMetadata("kt19389_set.kt")
    public void testKt19389_set() {
      runTest("compiler/testData/codegen/box/closures/kt19389_set.kt");
    }

    @TestMetadata("kt2151.kt")
    public void testKt2151() {
      runTest("compiler/testData/codegen/box/closures/kt2151.kt");
    }

    @TestMetadata("kt23881.kt")
    public void testKt23881() {
      runTest("compiler/testData/codegen/box/closures/kt23881.kt");
    }

    @TestMetadata("kt3152.kt")
    public void testKt3152() {
      runTest("compiler/testData/codegen/box/closures/kt3152.kt");
    }

    @TestMetadata("kt3523.kt")
    public void testKt3523() {
      runTest("compiler/testData/codegen/box/closures/kt3523.kt");
    }

    @TestMetadata("kt3738.kt")
    public void testKt3738() {
      runTest("compiler/testData/codegen/box/closures/kt3738.kt");
    }

    @TestMetadata("kt3905.kt")
    public void testKt3905() {
      runTest("compiler/testData/codegen/box/closures/kt3905.kt");
    }

    @TestMetadata("kt4106.kt")
    public void testKt4106() {
      runTest("compiler/testData/codegen/box/closures/kt4106.kt");
    }

    @TestMetadata("kt4137.kt")
    public void testKt4137() {
      runTest("compiler/testData/codegen/box/closures/kt4137.kt");
    }

    @TestMetadata("kt47120.kt")
    public void testKt47120() {
      runTest("compiler/testData/codegen/box/closures/kt47120.kt");
    }

    @TestMetadata("kt47120a.kt")
    public void testKt47120a() {
      runTest("compiler/testData/codegen/box/closures/kt47120a.kt");
    }

    @TestMetadata("kt47840.kt")
    public void testKt47840() {
      runTest("compiler/testData/codegen/box/closures/kt47840.kt");
    }

    @TestMetadata("kt47894_inlineFunWithObjectWithNothing.kt")
    public void testKt47894_inlineFunWithObjectWithNothing() {
      runTest("compiler/testData/codegen/box/closures/kt47894_inlineFunWithObjectWithNothing.kt");
    }

    @TestMetadata("kt5589.kt")
    public void testKt5589() {
      runTest("compiler/testData/codegen/box/closures/kt5589.kt");
    }

    @TestMetadata("localClassFunClosure.kt")
    public void testLocalClassFunClosure() {
      runTest("compiler/testData/codegen/box/closures/localClassFunClosure.kt");
    }

    @TestMetadata("localClassLambdaClosure.kt")
    public void testLocalClassLambdaClosure() {
      runTest("compiler/testData/codegen/box/closures/localClassLambdaClosure.kt");
    }

    @TestMetadata("localFunInInit.kt")
    public void testLocalFunInInit() {
      runTest("compiler/testData/codegen/box/closures/localFunInInit.kt");
    }

    @TestMetadata("localFunctionInFunction.kt")
    public void testLocalFunctionInFunction() {
      runTest("compiler/testData/codegen/box/closures/localFunctionInFunction.kt");
    }

    @TestMetadata("localFunctionInInitBlock.kt")
    public void testLocalFunctionInInitBlock() {
      runTest("compiler/testData/codegen/box/closures/localFunctionInInitBlock.kt");
    }

    @TestMetadata("localFunctionInInitializer.kt")
    public void testLocalFunctionInInitializer() {
      runTest("compiler/testData/codegen/box/closures/localFunctionInInitializer.kt");
    }

    @TestMetadata("localGenericFun.kt")
    public void testLocalGenericFun() {
      runTest("compiler/testData/codegen/box/closures/localGenericFun.kt");
    }

    @TestMetadata("localReturn.kt")
    public void testLocalReturn() {
      runTest("compiler/testData/codegen/box/closures/localReturn.kt");
    }

    @TestMetadata("localReturnWithAutolabel.kt")
    public void testLocalReturnWithAutolabel() {
      runTest("compiler/testData/codegen/box/closures/localReturnWithAutolabel.kt");
    }

    @TestMetadata("noRefToOuter.kt")
    public void testNoRefToOuter() {
      runTest("compiler/testData/codegen/box/closures/noRefToOuter.kt");
    }

    @TestMetadata("recursiveClosure.kt")
    public void testRecursiveClosure() {
      runTest("compiler/testData/codegen/box/closures/recursiveClosure.kt");
    }

    @TestMetadata("refsAreSerializable.kt")
    public void testRefsAreSerializable() {
      runTest("compiler/testData/codegen/box/closures/refsAreSerializable.kt");
    }

    @TestMetadata("simplestClosure.kt")
    public void testSimplestClosure() {
      runTest("compiler/testData/codegen/box/closures/simplestClosure.kt");
    }

    @TestMetadata("simplestClosureAndBoxing.kt")
    public void testSimplestClosureAndBoxing() {
      runTest("compiler/testData/codegen/box/closures/simplestClosureAndBoxing.kt");
    }

    @TestMetadata("staticLambda.kt")
    public void testStaticLambda() {
      runTest("compiler/testData/codegen/box/closures/staticLambda.kt");
    }

    @TestMetadata("subclosuresWithinInitializers.kt")
    public void testSubclosuresWithinInitializers() {
      runTest("compiler/testData/codegen/box/closures/subclosuresWithinInitializers.kt");
    }

    @TestMetadata("underscoreParameters.kt")
    public void testUnderscoreParameters() {
      runTest("compiler/testData/codegen/box/closures/underscoreParameters.kt");
    }

    @TestMetadata("compiler/testData/codegen/box/closures/captureInSuperConstructorCall")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class CaptureInSuperConstructorCall extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInCaptureInSuperConstructorCall() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/closures/captureInSuperConstructorCall"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("constructorParameterAndLocalCapturedInLambdaInLocalClass.kt")
      public void testConstructorParameterAndLocalCapturedInLambdaInLocalClass() {
        runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/constructorParameterAndLocalCapturedInLambdaInLocalClass.kt");
      }

      @TestMetadata("constructorParameterCapturedInLambdaInLocalClass.kt")
      public void testConstructorParameterCapturedInLambdaInLocalClass() {
        runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/constructorParameterCapturedInLambdaInLocalClass.kt");
      }

      @TestMetadata("constructorParameterCapturedInLambdaInLocalClass2.kt")
      public void testConstructorParameterCapturedInLambdaInLocalClass2() {
        runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/constructorParameterCapturedInLambdaInLocalClass2.kt");
      }

      @TestMetadata("kt13454.kt")
      public void testKt13454() {
        runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/kt13454.kt");
      }

      @TestMetadata("kt14148.kt")
      public void testKt14148() {
        runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/kt14148.kt");
      }

      @TestMetadata("kt4174.kt")
      public void testKt4174() {
        runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/kt4174.kt");
      }

      @TestMetadata("kt4174a.kt")
      public void testKt4174a() {
        runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/kt4174a.kt");
      }

      @TestMetadata("localCapturedInAnonymousObjectInLocalClass.kt")
      public void testLocalCapturedInAnonymousObjectInLocalClass() {
        runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/localCapturedInAnonymousObjectInLocalClass.kt");
      }

      @TestMetadata("localCapturedInAnonymousObjectInLocalClass2.kt")
      public void testLocalCapturedInAnonymousObjectInLocalClass2() {
        runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/localCapturedInAnonymousObjectInLocalClass2.kt");
      }

      @TestMetadata("localCapturedInLambdaInInnerClassInLocalClass.kt")
      public void testLocalCapturedInLambdaInInnerClassInLocalClass() {
        runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/localCapturedInLambdaInInnerClassInLocalClass.kt");
      }

      @TestMetadata("localCapturedInLambdaInLocalClass.kt")
      public void testLocalCapturedInLambdaInLocalClass() {
        runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/localCapturedInLambdaInLocalClass.kt");
      }

      @TestMetadata("localFunctionCapturedInLambda.kt")
      public void testLocalFunctionCapturedInLambda() {
        runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/localFunctionCapturedInLambda.kt");
      }

      @TestMetadata("outerAndLocalCapturedInLocalClass.kt")
      public void testOuterAndLocalCapturedInLocalClass() {
        runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/outerAndLocalCapturedInLocalClass.kt");
      }

      @TestMetadata("outerCapturedAsImplicitThisInBoundReference.kt")
      public void testOuterCapturedAsImplicitThisInBoundReference() {
        runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/outerCapturedAsImplicitThisInBoundReference.kt");
      }

      @TestMetadata("outerCapturedInFunctionLiteral.kt")
      public void testOuterCapturedInFunctionLiteral() {
        runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/outerCapturedInFunctionLiteral.kt");
      }

      @TestMetadata("outerCapturedInInlineLambda.kt")
      public void testOuterCapturedInInlineLambda() {
        runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/outerCapturedInInlineLambda.kt");
      }

      @TestMetadata("outerCapturedInInlineLambda2.kt")
      public void testOuterCapturedInInlineLambda2() {
        runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/outerCapturedInInlineLambda2.kt");
      }

      @TestMetadata("outerCapturedInLambda.kt")
      public void testOuterCapturedInLambda() {
        runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/outerCapturedInLambda.kt");
      }

      @TestMetadata("outerCapturedInLambda2.kt")
      public void testOuterCapturedInLambda2() {
        runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/outerCapturedInLambda2.kt");
      }

      @TestMetadata("outerCapturedInLambdaInSecondaryConstructor.kt")
      public void testOuterCapturedInLambdaInSecondaryConstructor() {
        runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/outerCapturedInLambdaInSecondaryConstructor.kt");
      }

      @TestMetadata("outerCapturedInLambdaInSubExpression.kt")
      public void testOuterCapturedInLambdaInSubExpression() {
        runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/outerCapturedInLambdaInSubExpression.kt");
      }

      @TestMetadata("outerCapturedInLocalClass.kt")
      public void testOuterCapturedInLocalClass() {
        runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/outerCapturedInLocalClass.kt");
      }

      @TestMetadata("outerCapturedInNestedLambda.kt")
      public void testOuterCapturedInNestedLambda() {
        runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/outerCapturedInNestedLambda.kt");
      }

      @TestMetadata("outerCapturedInNestedObject.kt")
      public void testOuterCapturedInNestedObject() {
        runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/outerCapturedInNestedObject.kt");
      }

      @TestMetadata("outerCapturedInObject.kt")
      public void testOuterCapturedInObject() {
        runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/outerCapturedInObject.kt");
      }

      @TestMetadata("outerCapturedInObject2.kt")
      public void testOuterCapturedInObject2() {
        runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/outerCapturedInObject2.kt");
      }

      @TestMetadata("outerCapturedInPrimaryConstructorDefaultParameter.kt")
      public void testOuterCapturedInPrimaryConstructorDefaultParameter() {
        runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/outerCapturedInPrimaryConstructorDefaultParameter.kt");
      }

      @TestMetadata("outerCapturedInSecondaryConstructorDefaultParameter.kt")
      public void testOuterCapturedInSecondaryConstructorDefaultParameter() {
        runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/outerCapturedInSecondaryConstructorDefaultParameter.kt");
      }

      @TestMetadata("outerEnumEntryCapturedInLambdaInInnerClass.kt")
      public void testOuterEnumEntryCapturedInLambdaInInnerClass() {
        runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/outerEnumEntryCapturedInLambdaInInnerClass.kt");
      }

      @TestMetadata("properValueCapturedByClosure1.kt")
      public void testProperValueCapturedByClosure1() {
        runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/properValueCapturedByClosure1.kt");
      }

      @TestMetadata("properValueCapturedByClosure2.kt")
      public void testProperValueCapturedByClosure2() {
        runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/properValueCapturedByClosure2.kt");
      }

      @TestMetadata("referenceToCapturedVariablesInMultipleLambdas.kt")
      public void testReferenceToCapturedVariablesInMultipleLambdas() {
        runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/referenceToCapturedVariablesInMultipleLambdas.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/closures/captureOuterProperty")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class CaptureOuterProperty extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInCaptureOuterProperty() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/closures/captureOuterProperty"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("captureFunctionInProperty.kt")
      public void testCaptureFunctionInProperty() {
        runTest("compiler/testData/codegen/box/closures/captureOuterProperty/captureFunctionInProperty.kt");
      }

      @TestMetadata("inFunction.kt")
      public void testInFunction() {
        runTest("compiler/testData/codegen/box/closures/captureOuterProperty/inFunction.kt");
      }

      @TestMetadata("inProperty.kt")
      public void testInProperty() {
        runTest("compiler/testData/codegen/box/closures/captureOuterProperty/inProperty.kt");
      }

      @TestMetadata("inPropertyDeepObjectChain.kt")
      public void testInPropertyDeepObjectChain() {
        runTest("compiler/testData/codegen/box/closures/captureOuterProperty/inPropertyDeepObjectChain.kt");
      }

      @TestMetadata("inPropertyFromSuperClass.kt")
      public void testInPropertyFromSuperClass() {
        runTest("compiler/testData/codegen/box/closures/captureOuterProperty/inPropertyFromSuperClass.kt");
      }

      @TestMetadata("inPropertyFromSuperSuperClass.kt")
      public void testInPropertyFromSuperSuperClass() {
        runTest("compiler/testData/codegen/box/closures/captureOuterProperty/inPropertyFromSuperSuperClass.kt");
      }

      @TestMetadata("kt4176.kt")
      public void testKt4176() {
        runTest("compiler/testData/codegen/box/closures/captureOuterProperty/kt4176.kt");
      }

      @TestMetadata("kt4656.kt")
      public void testKt4656() {
        runTest("compiler/testData/codegen/box/closures/captureOuterProperty/kt4656.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/closures/capturedVarsOptimization")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class CapturedVarsOptimization extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInCapturedVarsOptimization() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/closures/capturedVarsOptimization"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("capturedInCrossinline.kt")
      public void testCapturedInCrossinline() {
        runTest("compiler/testData/codegen/box/closures/capturedVarsOptimization/capturedInCrossinline.kt");
      }

      @TestMetadata("capturedInInlineOnlyAssign.kt")
      public void testCapturedInInlineOnlyAssign() {
        runTest("compiler/testData/codegen/box/closures/capturedVarsOptimization/capturedInInlineOnlyAssign.kt");
      }

      @TestMetadata("capturedInInlineOnlyCAO.kt")
      public void testCapturedInInlineOnlyCAO() {
        runTest("compiler/testData/codegen/box/closures/capturedVarsOptimization/capturedInInlineOnlyCAO.kt");
      }

      @TestMetadata("capturedInInlineOnlyIncrDecr.kt")
      public void testCapturedInInlineOnlyIncrDecr() {
        runTest("compiler/testData/codegen/box/closures/capturedVarsOptimization/capturedInInlineOnlyIncrDecr.kt");
      }

      @TestMetadata("capturedInInlineOnlyIndexedCAO.kt")
      public void testCapturedInInlineOnlyIndexedCAO() {
        runTest("compiler/testData/codegen/box/closures/capturedVarsOptimization/capturedInInlineOnlyIndexedCAO.kt");
      }

      @TestMetadata("capturedVarsOfSize2.kt")
      public void testCapturedVarsOfSize2() {
        runTest("compiler/testData/codegen/box/closures/capturedVarsOptimization/capturedVarsOfSize2.kt");
      }

      @TestMetadata("kt17200.kt")
      public void testKt17200() {
        runTest("compiler/testData/codegen/box/closures/capturedVarsOptimization/kt17200.kt");
      }

      @TestMetadata("kt17588.kt")
      public void testKt17588() {
        runTest("compiler/testData/codegen/box/closures/capturedVarsOptimization/kt17588.kt");
      }

      @TestMetadata("kt44347.kt")
      public void testKt44347() {
        runTest("compiler/testData/codegen/box/closures/capturedVarsOptimization/kt44347.kt");
      }

      @TestMetadata("kt45446.kt")
      public void testKt45446() {
        runTest("compiler/testData/codegen/box/closures/capturedVarsOptimization/kt45446.kt");
      }

      @TestMetadata("sharedSlotsWithCapturedVars.kt")
      public void testSharedSlotsWithCapturedVars() {
        runTest("compiler/testData/codegen/box/closures/capturedVarsOptimization/sharedSlotsWithCapturedVars.kt");
      }

      @TestMetadata("withCoroutines.kt")
      public void testWithCoroutines() {
        runTest("compiler/testData/codegen/box/closures/capturedVarsOptimization/withCoroutines.kt");
      }

      @TestMetadata("withCoroutinesNoStdLib.kt")
      public void testWithCoroutinesNoStdLib() {
        runTest("compiler/testData/codegen/box/closures/capturedVarsOptimization/withCoroutinesNoStdLib.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/closures/closureInsideClosure")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ClosureInsideClosure extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInClosureInsideClosure() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/closures/closureInsideClosure"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("localFunInsideLocalFun.kt")
      public void testLocalFunInsideLocalFun() {
        runTest("compiler/testData/codegen/box/closures/closureInsideClosure/localFunInsideLocalFun.kt");
      }

      @TestMetadata("localFunInsideLocalFunDifferentSignatures.kt")
      public void testLocalFunInsideLocalFunDifferentSignatures() {
        runTest("compiler/testData/codegen/box/closures/closureInsideClosure/localFunInsideLocalFunDifferentSignatures.kt");
      }

      @TestMetadata("propertyAndFunctionNameClash.kt")
      public void testPropertyAndFunctionNameClash() {
        runTest("compiler/testData/codegen/box/closures/closureInsideClosure/propertyAndFunctionNameClash.kt");
      }

      @TestMetadata("threeLevels.kt")
      public void testThreeLevels() {
        runTest("compiler/testData/codegen/box/closures/closureInsideClosure/threeLevels.kt");
      }

      @TestMetadata("threeLevelsDifferentSignatures.kt")
      public void testThreeLevelsDifferentSignatures() {
        runTest("compiler/testData/codegen/box/closures/closureInsideClosure/threeLevelsDifferentSignatures.kt");
      }

      @TestMetadata("varAsFunInsideLocalFun.kt")
      public void testVarAsFunInsideLocalFun() {
        runTest("compiler/testData/codegen/box/closures/closureInsideClosure/varAsFunInsideLocalFun.kt");
      }
    }
  }

  @TestMetadata("compiler/testData/codegen/box/collectionLiterals")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class CollectionLiterals extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInCollectionLiterals() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/collectionLiterals"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("collectionLiteralsInArgumentPosition.kt")
    public void testCollectionLiteralsInArgumentPosition() {
      runTest("compiler/testData/codegen/box/collectionLiterals/collectionLiteralsInArgumentPosition.kt");
    }

    @TestMetadata("collectionLiteralsWithConstants.kt")
    public void testCollectionLiteralsWithConstants() {
      runTest("compiler/testData/codegen/box/collectionLiterals/collectionLiteralsWithConstants.kt");
    }

    @TestMetadata("collectionLiteralsWithVarargs.kt")
    public void testCollectionLiteralsWithVarargs() {
      runTest("compiler/testData/codegen/box/collectionLiterals/collectionLiteralsWithVarargs.kt");
    }

    @TestMetadata("defaultAnnotationParameterValues.kt")
    public void testDefaultAnnotationParameterValues() {
      runTest("compiler/testData/codegen/box/collectionLiterals/defaultAnnotationParameterValues.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/collections")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Collections extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    @TestMetadata("addCollectionStubWithCovariantOverride.kt")
    public void testAddCollectionStubWithCovariantOverride() {
      runTest("compiler/testData/codegen/box/collections/addCollectionStubWithCovariantOverride.kt");
    }

    public void testAllFilesPresentInCollections() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/collections"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("charSequence.kt")
    public void testCharSequence() {
      runTest("compiler/testData/codegen/box/collections/charSequence.kt");
    }

    @TestMetadata("clashWithInternalMapMethod.kt")
    public void testClashWithInternalMapMethod() {
      runTest("compiler/testData/codegen/box/collections/clashWithInternalMapMethod.kt");
    }

    @TestMetadata("implementCollectionThroughKotlin.kt")
    public void testImplementCollectionThroughKotlin() {
      runTest("compiler/testData/codegen/box/collections/implementCollectionThroughKotlin.kt");
    }

    @TestMetadata("inSetWithSmartCast.kt")
    public void testInSetWithSmartCast() {
      runTest("compiler/testData/codegen/box/collections/inSetWithSmartCast.kt");
    }

    @TestMetadata("inheritFromAbstractMutableListInt.kt")
    public void testInheritFromAbstractMutableListInt() {
      runTest("compiler/testData/codegen/box/collections/inheritFromAbstractMutableListInt.kt");
    }

    @TestMetadata("inheritFromHashtable.kt")
    public void testInheritFromHashtable() {
      runTest("compiler/testData/codegen/box/collections/inheritFromHashtable.kt");
    }

    @TestMetadata("internalRemove.kt")
    public void testInternalRemove() {
      runTest("compiler/testData/codegen/box/collections/internalRemove.kt");
    }

    @TestMetadata("internalRemoveFromJava.kt")
    public void testInternalRemoveFromJava() {
      runTest("compiler/testData/codegen/box/collections/internalRemoveFromJava.kt");
    }

    @TestMetadata("irrelevantImplCharSequence.kt")
    public void testIrrelevantImplCharSequence() {
      runTest("compiler/testData/codegen/box/collections/irrelevantImplCharSequence.kt");
    }

    @TestMetadata("irrelevantImplCharSequenceKotlin.kt")
    public void testIrrelevantImplCharSequenceKotlin() {
      runTest("compiler/testData/codegen/box/collections/irrelevantImplCharSequenceKotlin.kt");
    }

    @TestMetadata("irrelevantImplCharSequenceWithExtraSupertype.kt")
    public void testIrrelevantImplCharSequenceWithExtraSupertype() {
      runTest("compiler/testData/codegen/box/collections/irrelevantImplCharSequenceWithExtraSupertype.kt");
    }

    @TestMetadata("irrelevantImplMutableList.kt")
    public void testIrrelevantImplMutableList() {
      runTest("compiler/testData/codegen/box/collections/irrelevantImplMutableList.kt");
    }

    @TestMetadata("irrelevantImplMutableListKotlin.kt")
    public void testIrrelevantImplMutableListKotlin() {
      runTest("compiler/testData/codegen/box/collections/irrelevantImplMutableListKotlin.kt");
    }

    @TestMetadata("irrelevantImplMutableListSubstitution.kt")
    public void testIrrelevantImplMutableListSubstitution() {
      runTest("compiler/testData/codegen/box/collections/irrelevantImplMutableListSubstitution.kt");
    }

    @TestMetadata("irrelevantRemoveAtOverrideInJava.kt")
    public void testIrrelevantRemoveAtOverrideInJava() {
      runTest("compiler/testData/codegen/box/collections/irrelevantRemoveAtOverrideInJava.kt");
    }

    @TestMetadata("irrelevantSizeOverrideInJava.kt")
    public void testIrrelevantSizeOverrideInJava() {
      runTest("compiler/testData/codegen/box/collections/irrelevantSizeOverrideInJava.kt");
    }

    @TestMetadata("javaCollectionWithRemovePrimitiveInt.kt")
    public void testJavaCollectionWithRemovePrimitiveInt() {
      runTest("compiler/testData/codegen/box/collections/javaCollectionWithRemovePrimitiveInt.kt");
    }

    @TestMetadata("kt40305.kt")
    public void testKt40305() {
      runTest("compiler/testData/codegen/box/collections/kt40305.kt");
    }

    @TestMetadata("kt41123.kt")
    public void testKt41123() {
      runTest("compiler/testData/codegen/box/collections/kt41123.kt");
    }

    @TestMetadata("kt44233.kt")
    public void testKt44233() {
      runTest("compiler/testData/codegen/box/collections/kt44233.kt");
    }

    @TestMetadata("kt48945.kt")
    public void testKt48945() {
      runTest("compiler/testData/codegen/box/collections/kt48945.kt");
    }

    @TestMetadata("kt48945a.kt")
    public void testKt48945a() {
      runTest("compiler/testData/codegen/box/collections/kt48945a.kt");
    }

    @TestMetadata("kt48945b.kt")
    public void testKt48945b() {
      runTest("compiler/testData/codegen/box/collections/kt48945b.kt");
    }

    @TestMetadata("kt48945c.kt")
    public void testKt48945c() {
      runTest("compiler/testData/codegen/box/collections/kt48945c.kt");
    }

    @TestMetadata("kt65555.kt")
    public void testKt65555() {
      runTest("compiler/testData/codegen/box/collections/kt65555.kt");
    }

    @TestMetadata("mutableList.kt")
    public void testMutableList() {
      runTest("compiler/testData/codegen/box/collections/mutableList.kt");
    }

    @TestMetadata("noStubsInJavaSuperClass.kt")
    public void testNoStubsInJavaSuperClass() {
      runTest("compiler/testData/codegen/box/collections/noStubsInJavaSuperClass.kt");
    }

    @TestMetadata("platformValueContains.kt")
    public void testPlatformValueContains() {
      runTest("compiler/testData/codegen/box/collections/platformValueContains.kt");
    }

    @TestMetadata("readOnlyList.kt")
    public void testReadOnlyList() {
      runTest("compiler/testData/codegen/box/collections/readOnlyList.kt");
    }

    @TestMetadata("readOnlyMap.kt")
    public void testReadOnlyMap() {
      runTest("compiler/testData/codegen/box/collections/readOnlyMap.kt");
    }

    @TestMetadata("removeAtBridgeClashWithJava.kt")
    public void testRemoveAtBridgeClashWithJava() {
      runTest("compiler/testData/codegen/box/collections/removeAtBridgeClashWithJava.kt");
    }

    @TestMetadata("removeAtInJava.kt")
    public void testRemoveAtInJava() {
      runTest("compiler/testData/codegen/box/collections/removeAtInJava.kt");
    }

    @TestMetadata("removeAtInt.kt")
    public void testRemoveAtInt() {
      runTest("compiler/testData/codegen/box/collections/removeAtInt.kt");
    }

    @TestMetadata("removeAtIntOverrideInJava.kt")
    public void testRemoveAtIntOverrideInJava() {
      runTest("compiler/testData/codegen/box/collections/removeAtIntOverrideInJava.kt");
    }

    @TestMetadata("removeAtIntOverrideInJava2.kt")
    public void testRemoveAtIntOverrideInJava2() {
      runTest("compiler/testData/codegen/box/collections/removeAtIntOverrideInJava2.kt");
    }

    @TestMetadata("removeClash.kt")
    public void testRemoveClash() {
      runTest("compiler/testData/codegen/box/collections/removeClash.kt");
    }

    @TestMetadata("removeClashJava.kt")
    public void testRemoveClashJava() {
      runTest("compiler/testData/codegen/box/collections/removeClashJava.kt");
    }

    @TestMetadata("removeClashKotlin.kt")
    public void testRemoveClashKotlin() {
      runTest("compiler/testData/codegen/box/collections/removeClashKotlin.kt");
    }

    @TestMetadata("removeClashWithGenerics.kt")
    public void testRemoveClashWithGenerics() {
      runTest("compiler/testData/codegen/box/collections/removeClashWithGenerics.kt");
    }

    @TestMetadata("removeNullFromList.kt")
    public void testRemoveNullFromList() {
      runTest("compiler/testData/codegen/box/collections/removeNullFromList.kt");
    }

    @TestMetadata("removeOverriddenInJava.kt")
    public void testRemoveOverriddenInJava() {
      runTest("compiler/testData/codegen/box/collections/removeOverriddenInJava.kt");
    }

    @TestMetadata("removeOverriddenInJava_Map.kt")
    public void testRemoveOverriddenInJava_Map() {
      runTest("compiler/testData/codegen/box/collections/removeOverriddenInJava_Map.kt");
    }

    @TestMetadata("specialBridgeForGet.kt")
    public void testSpecialBridgeForGet() {
      runTest("compiler/testData/codegen/box/collections/specialBridgeForGet.kt");
    }

    @TestMetadata("strList.kt")
    public void testStrList() {
      runTest("compiler/testData/codegen/box/collections/strList.kt");
    }

    @TestMetadata("toArrayInJavaClass.kt")
    public void testToArrayInJavaClass() {
      runTest("compiler/testData/codegen/box/collections/toArrayInJavaClass.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/companion")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Companion extends AbstractLightAnalysisModeTest {
    @TestMetadata("protectedConstValFromSuperCompanion.kt")
    public void ignoreProtectedConstValFromSuperCompanion() {
      runTest("compiler/testData/codegen/box/companion/protectedConstValFromSuperCompanion.kt");
    }

    @TestMetadata("protectedJvmFieldValFromSuperCompanion.kt")
    public void ignoreProtectedJvmFieldValFromSuperCompanion() {
      runTest("compiler/testData/codegen/box/companion/protectedJvmFieldValFromSuperCompanion.kt");
    }

    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInCompanion() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/companion"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("delegatedPropertyOnCompanion.kt")
    public void testDelegatedPropertyOnCompanion() {
      runTest("compiler/testData/codegen/box/companion/delegatedPropertyOnCompanion.kt");
    }

    @TestMetadata("genericLambdaOnStringCompanion.kt")
    public void testGenericLambdaOnStringCompanion() {
      runTest("compiler/testData/codegen/box/companion/genericLambdaOnStringCompanion.kt");
    }

    @TestMetadata("inlineFunctionCompanionPropertyAccess.kt")
    public void testInlineFunctionCompanionPropertyAccess() {
      runTest("compiler/testData/codegen/box/companion/inlineFunctionCompanionPropertyAccess.kt");
    }

    @TestMetadata("kt54645.kt")
    public void testKt54645() {
      runTest("compiler/testData/codegen/box/companion/kt54645.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/compatibility")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Compatibility extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInCompatibility() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/compatibility"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("privateCompanionObject.kt")
    public void testPrivateCompanionObject() {
      runTest("compiler/testData/codegen/box/compatibility/privateCompanionObject.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/constants")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Constants extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInConstants() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/constants"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("comparisonFalse.kt")
    public void testComparisonFalse() {
      runTest("compiler/testData/codegen/box/constants/comparisonFalse.kt");
    }

    @TestMetadata("comparisonTrue.kt")
    public void testComparisonTrue() {
      runTest("compiler/testData/codegen/box/constants/comparisonTrue.kt");
    }

    @TestMetadata("constValFromAnotherModuleInConsVal.kt")
    public void testConstValFromAnotherModuleInConsVal() {
      runTest("compiler/testData/codegen/box/constants/constValFromAnotherModuleInConsVal.kt");
    }

    @TestMetadata("constantsInWhen.kt")
    public void testConstantsInWhen() {
      runTest("compiler/testData/codegen/box/constants/constantsInWhen.kt");
    }

    @TestMetadata("divisionByZero.kt")
    public void testDivisionByZero() {
      runTest("compiler/testData/codegen/box/constants/divisionByZero.kt");
    }

    @TestMetadata("doNotTriggerInit.kt")
    public void testDoNotTriggerInit() {
      runTest("compiler/testData/codegen/box/constants/doNotTriggerInit.kt");
    }

    @TestMetadata("float.kt")
    public void testFloat() {
      runTest("compiler/testData/codegen/box/constants/float.kt");
    }

    @TestMetadata("foldingBinaryOpsUnsigned.kt")
    public void testFoldingBinaryOpsUnsigned() {
      runTest("compiler/testData/codegen/box/constants/foldingBinaryOpsUnsigned.kt");
    }

    @TestMetadata("foldingBinaryOpsUnsignedConst.kt")
    public void testFoldingBinaryOpsUnsignedConst() {
      runTest("compiler/testData/codegen/box/constants/foldingBinaryOpsUnsignedConst.kt");
    }

    @TestMetadata("kt9532.kt")
    public void testKt9532() {
      runTest("compiler/testData/codegen/box/constants/kt9532.kt");
    }

    @TestMetadata("literalToLongConversion.kt")
    public void testLiteralToLongConversion() {
      runTest("compiler/testData/codegen/box/constants/literalToLongConversion.kt");
    }

    @TestMetadata("long.kt")
    public void testLong() {
      runTest("compiler/testData/codegen/box/constants/long.kt");
    }

    @TestMetadata("numberLiteralCoercionToInferredType.kt")
    public void testNumberLiteralCoercionToInferredType() {
      runTest("compiler/testData/codegen/box/constants/numberLiteralCoercionToInferredType.kt");
    }

    @TestMetadata("privateConst.kt")
    public void testPrivateConst() {
      runTest("compiler/testData/codegen/box/constants/privateConst.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/constructor")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Constructor extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInConstructor() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/constructor"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("genericConstructor.kt")
    public void testGenericConstructor() {
      runTest("compiler/testData/codegen/box/constructor/genericConstructor.kt");
    }

    @TestMetadata("secondaryConstructor.kt")
    public void testSecondaryConstructor() {
      runTest("compiler/testData/codegen/box/constructor/secondaryConstructor.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/constructorCall")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class ConstructorCall extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInConstructorCall() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/constructorCall"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("breakInConstructorArguments.kt")
    public void testBreakInConstructorArguments() {
      runTest("compiler/testData/codegen/box/constructorCall/breakInConstructorArguments.kt");
    }

    @TestMetadata("continueInConstructorArguments.kt")
    public void testContinueInConstructorArguments() {
      runTest("compiler/testData/codegen/box/constructorCall/continueInConstructorArguments.kt");
    }

    @TestMetadata("earlyReturnInConstructorArguments.kt")
    public void testEarlyReturnInConstructorArguments() {
      runTest("compiler/testData/codegen/box/constructorCall/earlyReturnInConstructorArguments.kt");
    }

    @TestMetadata("inlineFunInConstructorCall.kt")
    public void testInlineFunInConstructorCall() {
      runTest("compiler/testData/codegen/box/constructorCall/inlineFunInConstructorCall.kt");
    }

    @TestMetadata("inlineFunInConstructorCallEvaluationOrder.kt")
    public void testInlineFunInConstructorCallEvaluationOrder() {
      runTest("compiler/testData/codegen/box/constructorCall/inlineFunInConstructorCallEvaluationOrder.kt");
    }

    @TestMetadata("inlineFunInInnerClassConstructorCall.kt")
    public void testInlineFunInInnerClassConstructorCall() {
      runTest("compiler/testData/codegen/box/constructorCall/inlineFunInInnerClassConstructorCall.kt");
    }

    @TestMetadata("inlineFunInLocalClassConstructorCall.kt")
    public void testInlineFunInLocalClassConstructorCall() {
      runTest("compiler/testData/codegen/box/constructorCall/inlineFunInLocalClassConstructorCall.kt");
    }

    @TestMetadata("kt49615.kt")
    public void testKt49615() {
      runTest("compiler/testData/codegen/box/constructorCall/kt49615.kt");
    }

    @TestMetadata("kt49615a.kt")
    public void testKt49615a() {
      runTest("compiler/testData/codegen/box/constructorCall/kt49615a.kt");
    }

    @TestMetadata("loopInInlineFun.kt")
    public void testLoopInInlineFun() {
      runTest("compiler/testData/codegen/box/constructorCall/loopInInlineFun.kt");
    }

    @TestMetadata("loopInInlineFunInSuperConstructorCall.kt")
    public void testLoopInInlineFunInSuperConstructorCall() {
      runTest("compiler/testData/codegen/box/constructorCall/loopInInlineFunInSuperConstructorCall.kt");
    }

    @TestMetadata("nestedConstructorCallWithJumpOutInConstructorArguments.kt")
    public void testNestedConstructorCallWithJumpOutInConstructorArguments() {
      runTest("compiler/testData/codegen/box/constructorCall/nestedConstructorCallWithJumpOutInConstructorArguments.kt");
    }

    @TestMetadata("nonLocalReturnInConstructorArguments.kt")
    public void testNonLocalReturnInConstructorArguments() {
      runTest("compiler/testData/codegen/box/constructorCall/nonLocalReturnInConstructorArguments.kt");
    }

    @TestMetadata("possiblyPoppedUnitializedValueInArguments.kt")
    public void testPossiblyPoppedUnitializedValueInArguments() {
      runTest("compiler/testData/codegen/box/constructorCall/possiblyPoppedUnitializedValueInArguments.kt");
    }

    @TestMetadata("regularConstructorCallEvaluationOrder.kt")
    public void testRegularConstructorCallEvaluationOrder() {
      runTest("compiler/testData/codegen/box/constructorCall/regularConstructorCallEvaluationOrder.kt");
    }

    @TestMetadata("tryCatchInConstructorCallEvaluationOrder.kt")
    public void testTryCatchInConstructorCallEvaluationOrder() {
      runTest("compiler/testData/codegen/box/constructorCall/tryCatchInConstructorCallEvaluationOrder.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/contracts")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Contracts extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInContracts() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/contracts"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("constructorArgument.kt")
    public void testConstructorArgument() {
      runTest("compiler/testData/codegen/box/contracts/constructorArgument.kt");
    }

    @TestMetadata("contractAndRawField.kt")
    public void testContractAndRawField() {
      runTest("compiler/testData/codegen/box/contracts/contractAndRawField.kt");
    }

    @TestMetadata("contractForCast.kt")
    public void testContractForCast() {
      runTest("compiler/testData/codegen/box/contracts/contractForCast.kt");
    }

    @TestMetadata("destructuredVariable.kt")
    public void testDestructuredVariable() {
      runTest("compiler/testData/codegen/box/contracts/destructuredVariable.kt");
    }

    @TestMetadata("exactlyOnceNotInline.kt")
    public void testExactlyOnceNotInline() {
      runTest("compiler/testData/codegen/box/contracts/exactlyOnceNotInline.kt");
    }

    @TestMetadata("exception.kt")
    public void testException() {
      runTest("compiler/testData/codegen/box/contracts/exception.kt");
    }

    @TestMetadata("fieldInConstructorParens.kt")
    public void testFieldInConstructorParens() {
      runTest("compiler/testData/codegen/box/contracts/fieldInConstructorParens.kt");
    }

    @TestMetadata("fieldReadInConstructor.kt")
    public void testFieldReadInConstructor() {
      runTest("compiler/testData/codegen/box/contracts/fieldReadInConstructor.kt");
    }

    @TestMetadata("forLoop.kt")
    public void testForLoop() {
      runTest("compiler/testData/codegen/box/contracts/forLoop.kt");
    }

    @TestMetadata("functionParameter.kt")
    public void testFunctionParameter() {
      runTest("compiler/testData/codegen/box/contracts/functionParameter.kt");
    }

    @TestMetadata("isNullString.kt")
    public void testIsNullString() {
      runTest("compiler/testData/codegen/box/contracts/isNullString.kt");
    }

    @TestMetadata("kt39374.kt")
    public void testKt39374() {
      runTest("compiler/testData/codegen/box/contracts/kt39374.kt");
    }

    @TestMetadata("kt45236.kt")
    public void testKt45236() {
      runTest("compiler/testData/codegen/box/contracts/kt45236.kt");
    }

    @TestMetadata("kt47168.kt")
    public void testKt47168() {
      runTest("compiler/testData/codegen/box/contracts/kt47168.kt");
    }

    @TestMetadata("kt47300.kt")
    public void testKt47300() {
      runTest("compiler/testData/codegen/box/contracts/kt47300.kt");
    }

    @TestMetadata("lambdaParameter.kt")
    public void testLambdaParameter() {
      runTest("compiler/testData/codegen/box/contracts/lambdaParameter.kt");
    }

    @TestMetadata("listAppend.kt")
    public void testListAppend() {
      runTest("compiler/testData/codegen/box/contracts/listAppend.kt");
    }

    @TestMetadata("nestedLambdaInNonInlineCallExactlyOnce.kt")
    public void testNestedLambdaInNonInlineCallExactlyOnce() {
      runTest("compiler/testData/codegen/box/contracts/nestedLambdaInNonInlineCallExactlyOnce.kt");
    }

    @TestMetadata("nonNullSmartCast.kt")
    public void testNonNullSmartCast() {
      runTest("compiler/testData/codegen/box/contracts/nonNullSmartCast.kt");
    }

    @TestMetadata("require.kt")
    public void testRequire() {
      runTest("compiler/testData/codegen/box/contracts/require.kt");
    }

    @TestMetadata("runLambdaForVal.kt")
    public void testRunLambdaForVal() {
      runTest("compiler/testData/codegen/box/contracts/runLambdaForVal.kt");
    }

    @TestMetadata("valInWhen.kt")
    public void testValInWhen() {
      runTest("compiler/testData/codegen/box/contracts/valInWhen.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/controlStructures")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class ControlStructures extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInControlStructures() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/controlStructures"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("bottles.kt")
    public void testBottles() {
      runTest("compiler/testData/codegen/box/controlStructures/bottles.kt");
    }

    @TestMetadata("breakInFinally.kt")
    public void testBreakInFinally() {
      runTest("compiler/testData/codegen/box/controlStructures/breakInFinally.kt");
    }

    @TestMetadata("breakInWhen.kt")
    public void testBreakInWhen() {
      runTest("compiler/testData/codegen/box/controlStructures/breakInWhen.kt");
    }

    @TestMetadata("compareBoxedIntegerToZero.kt")
    public void testCompareBoxedIntegerToZero() {
      runTest("compiler/testData/codegen/box/controlStructures/compareBoxedIntegerToZero.kt");
    }

    @TestMetadata("conditionOfEmptyIf.kt")
    public void testConditionOfEmptyIf() {
      runTest("compiler/testData/codegen/box/controlStructures/conditionOfEmptyIf.kt");
    }

    @TestMetadata("continueInExpr.kt")
    public void testContinueInExpr() {
      runTest("compiler/testData/codegen/box/controlStructures/continueInExpr.kt");
    }

    @TestMetadata("continueInFor.kt")
    public void testContinueInFor() {
      runTest("compiler/testData/codegen/box/controlStructures/continueInFor.kt");
    }

    @TestMetadata("continueInForCondition.kt")
    public void testContinueInForCondition() {
      runTest("compiler/testData/codegen/box/controlStructures/continueInForCondition.kt");
    }

    @TestMetadata("continueInWhen.kt")
    public void testContinueInWhen() {
      runTest("compiler/testData/codegen/box/controlStructures/continueInWhen.kt");
    }

    @TestMetadata("continueInWhile.kt")
    public void testContinueInWhile() {
      runTest("compiler/testData/codegen/box/controlStructures/continueInWhile.kt");
    }

    @TestMetadata("continueToLabelInFor.kt")
    public void testContinueToLabelInFor() {
      runTest("compiler/testData/codegen/box/controlStructures/continueToLabelInFor.kt");
    }

    @TestMetadata("doWhile.kt")
    public void testDoWhile() {
      runTest("compiler/testData/codegen/box/controlStructures/doWhile.kt");
    }

    @TestMetadata("doWhileFib.kt")
    public void testDoWhileFib() {
      runTest("compiler/testData/codegen/box/controlStructures/doWhileFib.kt");
    }

    @TestMetadata("doWhileWithContinue.kt")
    public void testDoWhileWithContinue() {
      runTest("compiler/testData/codegen/box/controlStructures/doWhileWithContinue.kt");
    }

    @TestMetadata("emptyDoWhile.kt")
    public void testEmptyDoWhile() {
      runTest("compiler/testData/codegen/box/controlStructures/emptyDoWhile.kt");
    }

    @TestMetadata("emptyFor.kt")
    public void testEmptyFor() {
      runTest("compiler/testData/codegen/box/controlStructures/emptyFor.kt");
    }

    @TestMetadata("emptyWhile.kt")
    public void testEmptyWhile() {
      runTest("compiler/testData/codegen/box/controlStructures/emptyWhile.kt");
    }

    @TestMetadata("factorialTest.kt")
    public void testFactorialTest() {
      runTest("compiler/testData/codegen/box/controlStructures/factorialTest.kt");
    }

    @TestMetadata("finallyOnEmptyReturn.kt")
    public void testFinallyOnEmptyReturn() {
      runTest("compiler/testData/codegen/box/controlStructures/finallyOnEmptyReturn.kt");
    }

    @TestMetadata("forArrayList.kt")
    public void testForArrayList() {
      runTest("compiler/testData/codegen/box/controlStructures/forArrayList.kt");
    }

    @TestMetadata("forArrayListMultiDecl.kt")
    public void testForArrayListMultiDecl() {
      runTest("compiler/testData/codegen/box/controlStructures/forArrayListMultiDecl.kt");
    }

    @TestMetadata("forInCharSequence.kt")
    public void testForInCharSequence() {
      runTest("compiler/testData/codegen/box/controlStructures/forInCharSequence.kt");
    }

    @TestMetadata("forInCharSequenceMut.kt")
    public void testForInCharSequenceMut() {
      runTest("compiler/testData/codegen/box/controlStructures/forInCharSequenceMut.kt");
    }

    @TestMetadata("forInSmartCastToArray.kt")
    public void testForInSmartCastToArray() {
      runTest("compiler/testData/codegen/box/controlStructures/forInSmartCastToArray.kt");
    }

    @TestMetadata("forLoopMemberExtensionAll.kt")
    public void testForLoopMemberExtensionAll() {
      runTest("compiler/testData/codegen/box/controlStructures/forLoopMemberExtensionAll.kt");
    }

    @TestMetadata("forLoopMemberExtensionHasNext.kt")
    public void testForLoopMemberExtensionHasNext() {
      runTest("compiler/testData/codegen/box/controlStructures/forLoopMemberExtensionHasNext.kt");
    }

    @TestMetadata("forLoopMemberExtensionNext.kt")
    public void testForLoopMemberExtensionNext() {
      runTest("compiler/testData/codegen/box/controlStructures/forLoopMemberExtensionNext.kt");
    }

    @TestMetadata("forNullableCharInString.kt")
    public void testForNullableCharInString() {
      runTest("compiler/testData/codegen/box/controlStructures/forNullableCharInString.kt");
    }

    @TestMetadata("forUserType.kt")
    public void testForUserType() {
      runTest("compiler/testData/codegen/box/controlStructures/forUserType.kt");
    }

    @TestMetadata("ifConst1.kt")
    public void testIfConst1() {
      runTest("compiler/testData/codegen/box/controlStructures/ifConst1.kt");
    }

    @TestMetadata("ifConst2.kt")
    public void testIfConst2() {
      runTest("compiler/testData/codegen/box/controlStructures/ifConst2.kt");
    }

    @TestMetadata("ifIncompatibleBranches.kt")
    public void testIfIncompatibleBranches() {
      runTest("compiler/testData/codegen/box/controlStructures/ifIncompatibleBranches.kt");
    }

    @TestMetadata("inRangeConditionsInWhen.kt")
    public void testInRangeConditionsInWhen() {
      runTest("compiler/testData/codegen/box/controlStructures/inRangeConditionsInWhen.kt");
    }

    @TestMetadata("kt12908.kt")
    public void testKt12908() {
      runTest("compiler/testData/codegen/box/controlStructures/kt12908.kt");
    }

    @TestMetadata("kt12908_2.kt")
    public void testKt12908_2() {
      runTest("compiler/testData/codegen/box/controlStructures/kt12908_2.kt");
    }

    @TestMetadata("kt1441.kt")
    public void testKt1441() {
      runTest("compiler/testData/codegen/box/controlStructures/kt1441.kt");
    }

    @TestMetadata("kt14839.kt")
    public void testKt14839() {
      runTest("compiler/testData/codegen/box/controlStructures/kt14839.kt");
    }

    @TestMetadata("kt15726.kt")
    public void testKt15726() {
      runTest("compiler/testData/codegen/box/controlStructures/kt15726.kt");
    }

    @TestMetadata("kt1688.kt")
    public void testKt1688() {
      runTest("compiler/testData/codegen/box/controlStructures/kt1688.kt");
    }

    @TestMetadata("kt17110.kt")
    public void testKt17110() {
      runTest("compiler/testData/codegen/box/controlStructures/kt17110.kt");
    }

    @TestMetadata("kt1742.kt")
    public void testKt1742() {
      runTest("compiler/testData/codegen/box/controlStructures/kt1742.kt");
    }

    @TestMetadata("kt17590.kt")
    public void testKt17590() {
      runTest("compiler/testData/codegen/box/controlStructures/kt17590.kt");
    }

    @TestMetadata("kt17590_long.kt")
    public void testKt17590_long() {
      runTest("compiler/testData/codegen/box/controlStructures/kt17590_long.kt");
    }

    @TestMetadata("kt1899.kt")
    public void testKt1899() {
      runTest("compiler/testData/codegen/box/controlStructures/kt1899.kt");
    }

    @TestMetadata("kt2147.kt")
    public void testKt2147() {
      runTest("compiler/testData/codegen/box/controlStructures/kt2147.kt");
    }

    @TestMetadata("kt2259.kt")
    public void testKt2259() {
      runTest("compiler/testData/codegen/box/controlStructures/kt2259.kt");
    }

    @TestMetadata("kt2291.kt")
    public void testKt2291() {
      runTest("compiler/testData/codegen/box/controlStructures/kt2291.kt");
    }

    @TestMetadata("kt237.kt")
    public void testKt237() {
      runTest("compiler/testData/codegen/box/controlStructures/kt237.kt");
    }

    @TestMetadata("kt2416.kt")
    public void testKt2416() {
      runTest("compiler/testData/codegen/box/controlStructures/kt2416.kt");
    }

    @TestMetadata("kt2423.kt")
    public void testKt2423() {
      runTest("compiler/testData/codegen/box/controlStructures/kt2423.kt");
    }

    @TestMetadata("kt2577.kt")
    public void testKt2577() {
      runTest("compiler/testData/codegen/box/controlStructures/kt2577.kt");
    }

    @TestMetadata("kt2597.kt")
    public void testKt2597() {
      runTest("compiler/testData/codegen/box/controlStructures/kt2597.kt");
    }

    @TestMetadata("kt299.kt")
    public void testKt299() {
      runTest("compiler/testData/codegen/box/controlStructures/kt299.kt");
    }

    @TestMetadata("kt3087.kt")
    public void testKt3087() {
      runTest("compiler/testData/codegen/box/controlStructures/kt3087.kt");
    }

    @TestMetadata("kt3203_1.kt")
    public void testKt3203_1() {
      runTest("compiler/testData/codegen/box/controlStructures/kt3203_1.kt");
    }

    @TestMetadata("kt3203_2.kt")
    public void testKt3203_2() {
      runTest("compiler/testData/codegen/box/controlStructures/kt3203_2.kt");
    }

    @TestMetadata("kt3273.kt")
    public void testKt3273() {
      runTest("compiler/testData/codegen/box/controlStructures/kt3273.kt");
    }

    @TestMetadata("kt3280.kt")
    public void testKt3280() {
      runTest("compiler/testData/codegen/box/controlStructures/kt3280.kt");
    }

    @TestMetadata("kt3574.kt")
    public void testKt3574() {
      runTest("compiler/testData/codegen/box/controlStructures/kt3574.kt");
    }

    @TestMetadata("kt416.kt")
    public void testKt416() {
      runTest("compiler/testData/codegen/box/controlStructures/kt416.kt");
    }

    @TestMetadata("kt42455.kt")
    public void testKt42455() {
      runTest("compiler/testData/codegen/box/controlStructures/kt42455.kt");
    }

    @TestMetadata("kt47245.kt")
    public void testKt47245() {
      runTest("compiler/testData/codegen/box/controlStructures/kt47245.kt");
    }

    @TestMetadata("kt513.kt")
    public void testKt513() {
      runTest("compiler/testData/codegen/box/controlStructures/kt513.kt");
    }

    @TestMetadata("kt628.kt")
    public void testKt628() {
      runTest("compiler/testData/codegen/box/controlStructures/kt628.kt");
    }

    @TestMetadata("kt769.kt")
    public void testKt769() {
      runTest("compiler/testData/codegen/box/controlStructures/kt769.kt");
    }

    @TestMetadata("kt772.kt")
    public void testKt772() {
      runTest("compiler/testData/codegen/box/controlStructures/kt772.kt");
    }

    @TestMetadata("kt773.kt")
    public void testKt773() {
      runTest("compiler/testData/codegen/box/controlStructures/kt773.kt");
    }

    @TestMetadata("kt8148.kt")
    public void testKt8148() {
      runTest("compiler/testData/codegen/box/controlStructures/kt8148.kt");
    }

    @TestMetadata("kt8148_break.kt")
    public void testKt8148_break() {
      runTest("compiler/testData/codegen/box/controlStructures/kt8148_break.kt");
    }

    @TestMetadata("kt8148_continue.kt")
    public void testKt8148_continue() {
      runTest("compiler/testData/codegen/box/controlStructures/kt8148_continue.kt");
    }

    @TestMetadata("kt870.kt")
    public void testKt870() {
      runTest("compiler/testData/codegen/box/controlStructures/kt870.kt");
    }

    @TestMetadata("kt9022Return.kt")
    public void testKt9022Return() {
      runTest("compiler/testData/codegen/box/controlStructures/kt9022Return.kt");
    }

    @TestMetadata("kt9022Throw.kt")
    public void testKt9022Throw() {
      runTest("compiler/testData/codegen/box/controlStructures/kt9022Throw.kt");
    }

    @TestMetadata("kt910.kt")
    public void testKt910() {
      runTest("compiler/testData/codegen/box/controlStructures/kt910.kt");
    }

    @TestMetadata("kt958.kt")
    public void testKt958() {
      runTest("compiler/testData/codegen/box/controlStructures/kt958.kt");
    }

    @TestMetadata("longRange.kt")
    public void testLongRange() {
      runTest("compiler/testData/codegen/box/controlStructures/longRange.kt");
    }

    @TestMetadata("parameterWithNameForFunctionType.kt")
    public void testParameterWithNameForFunctionType() {
      runTest("compiler/testData/codegen/box/controlStructures/parameterWithNameForFunctionType.kt");
    }

    @TestMetadata("quicksort.kt")
    public void testQuicksort() {
      runTest("compiler/testData/codegen/box/controlStructures/quicksort.kt");
    }

    @TestMetadata("tcbInEliminatedCondition.kt")
    public void testTcbInEliminatedCondition() {
      runTest("compiler/testData/codegen/box/controlStructures/tcbInEliminatedCondition.kt");
    }

    @TestMetadata("tryCatchExpression.kt")
    public void testTryCatchExpression() {
      runTest("compiler/testData/codegen/box/controlStructures/tryCatchExpression.kt");
    }

    @TestMetadata("tryCatchFinally.kt")
    public void testTryCatchFinally() {
      runTest("compiler/testData/codegen/box/controlStructures/tryCatchFinally.kt");
    }

    @TestMetadata("tryCatchFinallyChain.kt")
    public void testTryCatchFinallyChain() {
      runTest("compiler/testData/codegen/box/controlStructures/tryCatchFinallyChain.kt");
    }

    @TestMetadata("tryFinally.kt")
    public void testTryFinally() {
      runTest("compiler/testData/codegen/box/controlStructures/tryFinally.kt");
    }

    @TestMetadata("tryFinallyGeneric.kt")
    public void testTryFinallyGeneric() {
      runTest("compiler/testData/codegen/box/controlStructures/tryFinallyGeneric.kt");
    }

    @TestMetadata("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class BreakContinueInExpressions extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInBreakContinueInExpressions() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("breakFromOuter.kt")
      public void testBreakFromOuter() {
        runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/breakFromOuter.kt");
      }

      @TestMetadata("breakInDoWhile.kt")
      public void testBreakInDoWhile() {
        runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/breakInDoWhile.kt");
      }

      @TestMetadata("breakInExpr.kt")
      public void testBreakInExpr() {
        runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/breakInExpr.kt");
      }

      @TestMetadata("breakInLoopConditions.kt")
      public void testBreakInLoopConditions() {
        runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/breakInLoopConditions.kt");
      }

      @TestMetadata("continueInDoWhile.kt")
      public void testContinueInDoWhile() {
        runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/continueInDoWhile.kt");
      }

      @TestMetadata("continueInExpr.kt")
      public void testContinueInExpr() {
        runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/continueInExpr.kt");
      }

      @TestMetadata("inlineWithStack.kt")
      public void testInlineWithStack() {
        runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/inlineWithStack.kt");
      }

      @TestMetadata("innerLoopWithStack.kt")
      public void testInnerLoopWithStack() {
        runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/innerLoopWithStack.kt");
      }

      @TestMetadata("kt14581.kt")
      public void testKt14581() {
        runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/kt14581.kt");
      }

      @TestMetadata("kt16713.kt")
      public void testKt16713() {
        runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/kt16713.kt");
      }

      @TestMetadata("kt16713_2.kt")
      public void testKt16713_2() {
        runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/kt16713_2.kt");
      }

      @TestMetadata("kt17384.kt")
      public void testKt17384() {
        runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/kt17384.kt");
      }

      @TestMetadata("kt45704_elvisInInlineFun.kt")
      public void testKt45704_elvisInInlineFun() {
        runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/kt45704_elvisInInlineFun.kt");
      }

      @TestMetadata("kt9022And.kt")
      public void testKt9022And() {
        runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/kt9022And.kt");
      }

      @TestMetadata("kt9022Or.kt")
      public void testKt9022Or() {
        runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/kt9022Or.kt");
      }

      @TestMetadata("pathologicalDoWhile.kt")
      public void testPathologicalDoWhile() {
        runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/pathologicalDoWhile.kt");
      }

      @TestMetadata("popSizes.kt")
      public void testPopSizes() {
        runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/popSizes.kt");
      }

      @TestMetadata("tryFinally1.kt")
      public void testTryFinally1() {
        runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/tryFinally1.kt");
      }

      @TestMetadata("tryFinally2.kt")
      public void testTryFinally2() {
        runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/tryFinally2.kt");
      }

      @TestMetadata("whileTrueBreak.kt")
      public void testWhileTrueBreak() {
        runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/whileTrueBreak.kt");
      }

      @TestMetadata("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/inlinedBreakContinue")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class InlinedBreakContinue extends AbstractLightAnalysisModeTest {
        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        public void testAllFilesPresentInInlinedBreakContinue() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/inlinedBreakContinue"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("continueInTryBlock.kt")
        public void testContinueInTryBlock() {
          runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/inlinedBreakContinue/continueInTryBlock.kt");
        }

        @TestMetadata("initializerBlock.kt")
        public void testInitializerBlock() {
          runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/inlinedBreakContinue/initializerBlock.kt");
        }

        @TestMetadata("inlineConstructor.kt")
        public void testInlineConstructor() {
          runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/inlinedBreakContinue/inlineConstructor.kt");
        }

        @TestMetadata("inlineFunctionWithMultipleParameters.kt")
        public void testInlineFunctionWithMultipleParameters() {
          runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/inlinedBreakContinue/inlineFunctionWithMultipleParameters.kt");
        }

        @TestMetadata("lambdaPassedToInlineFunction.kt")
        public void testLambdaPassedToInlineFunction() {
          runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/inlinedBreakContinue/lambdaPassedToInlineFunction.kt");
        }

        @TestMetadata("loopWithinInlineFunction.kt")
        public void testLoopWithinInlineFunction() {
          runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/inlinedBreakContinue/loopWithinInlineFunction.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() {
          runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/inlinedBreakContinue/simple.kt");
        }

        @TestMetadata("simpleDoWhile.kt")
        public void testSimpleDoWhile() {
          runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/inlinedBreakContinue/simpleDoWhile.kt");
        }

        @TestMetadata("stdlibFunctions.kt")
        public void testStdlibFunctions() {
          runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/inlinedBreakContinue/stdlibFunctions.kt");
        }

        @TestMetadata("withReturnValue.kt")
        public void testWithReturnValue() {
          runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/inlinedBreakContinue/withReturnValue.kt");
        }

        @TestMetadata("withReturnValueDoWhileContinue.kt")
        public void testWithReturnValueDoWhileContinue() {
          runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/inlinedBreakContinue/withReturnValueDoWhileContinue.kt");
        }

        @TestMetadata("withReturnValueNested.kt")
        public void testWithReturnValueNested() {
          runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/inlinedBreakContinue/withReturnValueNested.kt");
        }
      }
    }

    @TestMetadata("compiler/testData/codegen/box/controlStructures/forInArray")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ForInArray extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInForInArray() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/controlStructures/forInArray"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("forInArraySpecializedToUntil.kt")
      public void testForInArraySpecializedToUntil() {
        runTest("compiler/testData/codegen/box/controlStructures/forInArray/forInArraySpecializedToUntil.kt");
      }

      @TestMetadata("forInArrayWithArrayPropertyUpdatedInLoopBody.kt")
      public void testForInArrayWithArrayPropertyUpdatedInLoopBody() {
        runTest("compiler/testData/codegen/box/controlStructures/forInArray/forInArrayWithArrayPropertyUpdatedInLoopBody.kt");
      }

      @TestMetadata("forInArrayWithArrayVarUpdatedInLoopBody13.kt")
      public void testForInArrayWithArrayVarUpdatedInLoopBody13() {
        runTest("compiler/testData/codegen/box/controlStructures/forInArray/forInArrayWithArrayVarUpdatedInLoopBody13.kt");
      }

      @TestMetadata("forInDelegatedPropertyUpdatedInLoopBody.kt")
      public void testForInDelegatedPropertyUpdatedInLoopBody() {
        runTest("compiler/testData/codegen/box/controlStructures/forInArray/forInDelegatedPropertyUpdatedInLoopBody.kt");
      }

      @TestMetadata("forInDoubleArrayWithUpcast.kt")
      public void testForInDoubleArrayWithUpcast() {
        runTest("compiler/testData/codegen/box/controlStructures/forInArray/forInDoubleArrayWithUpcast.kt");
      }

      @TestMetadata("forInFieldUpdatedInLoopBody.kt")
      public void testForInFieldUpdatedInLoopBody() {
        runTest("compiler/testData/codegen/box/controlStructures/forInArray/forInFieldUpdatedInLoopBody.kt");
      }

      @TestMetadata("forInInlineClassArrayWithUpcast.kt")
      public void testForInInlineClassArrayWithUpcast() {
        runTest("compiler/testData/codegen/box/controlStructures/forInArray/forInInlineClassArrayWithUpcast.kt");
      }

      @TestMetadata("forIntArray.kt")
      public void testForIntArray() {
        runTest("compiler/testData/codegen/box/controlStructures/forInArray/forIntArray.kt");
      }

      @TestMetadata("forNullableIntArray.kt")
      public void testForNullableIntArray() {
        runTest("compiler/testData/codegen/box/controlStructures/forInArray/forNullableIntArray.kt");
      }

      @TestMetadata("forPrimitiveIntArray.kt")
      public void testForPrimitiveIntArray() {
        runTest("compiler/testData/codegen/box/controlStructures/forInArray/forPrimitiveIntArray.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ForInArrayWithIndex extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInForInArrayWithIndex() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("forInArrayOfObjectArrayWithIndex.kt")
      public void testForInArrayOfObjectArrayWithIndex() {
        runTest("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex/forInArrayOfObjectArrayWithIndex.kt");
      }

      @TestMetadata("forInArrayOfPrimArrayWithIndex.kt")
      public void testForInArrayOfPrimArrayWithIndex() {
        runTest("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex/forInArrayOfPrimArrayWithIndex.kt");
      }

      @TestMetadata("forInArrayWithIndexBreakAndContinue.kt")
      public void testForInArrayWithIndexBreakAndContinue() {
        runTest("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex/forInArrayWithIndexBreakAndContinue.kt");
      }

      @TestMetadata("forInArrayWithIndexContinuesAsUnmodified.kt")
      public void testForInArrayWithIndexContinuesAsUnmodified() {
        runTest("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex/forInArrayWithIndexContinuesAsUnmodified.kt");
      }

      @TestMetadata("forInArrayWithIndexNoElementVar.kt")
      public void testForInArrayWithIndexNoElementVar() {
        runTest("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex/forInArrayWithIndexNoElementVar.kt");
      }

      @TestMetadata("forInArrayWithIndexNoIndexOrElementVar.kt")
      public void testForInArrayWithIndexNoIndexOrElementVar() {
        runTest("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex/forInArrayWithIndexNoIndexOrElementVar.kt");
      }

      @TestMetadata("forInArrayWithIndexNoIndexVar.kt")
      public void testForInArrayWithIndexNoIndexVar() {
        runTest("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex/forInArrayWithIndexNoIndexVar.kt");
      }

      @TestMetadata("forInArrayWithIndexNotDestructured.kt")
      public void testForInArrayWithIndexNotDestructured() {
        runTest("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex/forInArrayWithIndexNotDestructured.kt");
      }

      @TestMetadata("forInArrayWithIndexWithExplicitlyTypedIndexVariable.kt")
      public void testForInArrayWithIndexWithExplicitlyTypedIndexVariable() {
        runTest("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex/forInArrayWithIndexWithExplicitlyTypedIndexVariable.kt");
      }

      @TestMetadata("forInByteArrayWithIndex.kt")
      public void testForInByteArrayWithIndex() {
        runTest("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex/forInByteArrayWithIndex.kt");
      }

      @TestMetadata("forInByteArrayWithIndexWithSmartCast.kt")
      public void testForInByteArrayWithIndexWithSmartCast() {
        runTest("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex/forInByteArrayWithIndexWithSmartCast.kt");
      }

      @TestMetadata("forInEmptyArrayWithIndex.kt")
      public void testForInEmptyArrayWithIndex() {
        runTest("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex/forInEmptyArrayWithIndex.kt");
      }

      @TestMetadata("forInGenericArrayOfIntsWithIndex.kt")
      public void testForInGenericArrayOfIntsWithIndex() {
        runTest("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex/forInGenericArrayOfIntsWithIndex.kt");
      }

      @TestMetadata("forInGenericArrayOfIntsWithIndexWithSmartCast.kt")
      public void testForInGenericArrayOfIntsWithIndexWithSmartCast() {
        runTest("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex/forInGenericArrayOfIntsWithIndexWithSmartCast.kt");
      }

      @TestMetadata("forInGenericArrayWithIndex.kt")
      public void testForInGenericArrayWithIndex() {
        runTest("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex/forInGenericArrayWithIndex.kt");
      }

      @TestMetadata("forInIntArrayWithIndex.kt")
      public void testForInIntArrayWithIndex() {
        runTest("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex/forInIntArrayWithIndex.kt");
      }

      @TestMetadata("forInIntArrayWithIndexWithSmartCast.kt")
      public void testForInIntArrayWithIndexWithSmartCast() {
        runTest("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex/forInIntArrayWithIndexWithSmartCast.kt");
      }

      @TestMetadata("forInObjectArrayWithIndex.kt")
      public void testForInObjectArrayWithIndex() {
        runTest("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex/forInObjectArrayWithIndex.kt");
      }

      @TestMetadata("forInShortArrayWithIndex.kt")
      public void testForInShortArrayWithIndex() {
        runTest("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex/forInShortArrayWithIndex.kt");
      }

      @TestMetadata("forInShortArrayWithIndexWithSmartCast.kt")
      public void testForInShortArrayWithIndexWithSmartCast() {
        runTest("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex/forInShortArrayWithIndexWithSmartCast.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/controlStructures/forInCharSequenceWithIndex")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ForInCharSequenceWithIndex extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInForInCharSequenceWithIndex() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/controlStructures/forInCharSequenceWithIndex"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("forInCharSeqWithIndexStops.kt")
      public void testForInCharSeqWithIndexStops() {
        runTest("compiler/testData/codegen/box/controlStructures/forInCharSequenceWithIndex/forInCharSeqWithIndexStops.kt");
      }

      @TestMetadata("forInCharSequenceTypeParameterWithIndex.kt")
      public void testForInCharSequenceTypeParameterWithIndex() {
        runTest("compiler/testData/codegen/box/controlStructures/forInCharSequenceWithIndex/forInCharSequenceTypeParameterWithIndex.kt");
      }

      @TestMetadata("forInCharSequenceWithIndex.kt")
      public void testForInCharSequenceWithIndex() {
        runTest("compiler/testData/codegen/box/controlStructures/forInCharSequenceWithIndex/forInCharSequenceWithIndex.kt");
      }

      @TestMetadata("forInCharSequenceWithIndexBreakAndContinue.kt")
      public void testForInCharSequenceWithIndexBreakAndContinue() {
        runTest("compiler/testData/codegen/box/controlStructures/forInCharSequenceWithIndex/forInCharSequenceWithIndexBreakAndContinue.kt");
      }

      @TestMetadata("forInCharSequenceWithIndexCheckSideEffects.kt")
      public void testForInCharSequenceWithIndexCheckSideEffects() {
        runTest("compiler/testData/codegen/box/controlStructures/forInCharSequenceWithIndex/forInCharSequenceWithIndexCheckSideEffects.kt");
      }

      @TestMetadata("forInCharSequenceWithIndexNoElementVarCheckSideEffects.kt")
      public void testForInCharSequenceWithIndexNoElementVarCheckSideEffects() {
        runTest("compiler/testData/codegen/box/controlStructures/forInCharSequenceWithIndex/forInCharSequenceWithIndexNoElementVarCheckSideEffects.kt");
      }

      @TestMetadata("forInCharSequenceWithIndexNoIndexVarCheckSideEffects.kt")
      public void testForInCharSequenceWithIndexNoIndexVarCheckSideEffects() {
        runTest("compiler/testData/codegen/box/controlStructures/forInCharSequenceWithIndex/forInCharSequenceWithIndexNoIndexVarCheckSideEffects.kt");
      }

      @TestMetadata("forInEmptyStringWithIndex.kt")
      public void testForInEmptyStringWithIndex() {
        runTest("compiler/testData/codegen/box/controlStructures/forInCharSequenceWithIndex/forInEmptyStringWithIndex.kt");
      }

      @TestMetadata("forInStringWithIndex.kt")
      public void testForInStringWithIndex() {
        runTest("compiler/testData/codegen/box/controlStructures/forInCharSequenceWithIndex/forInStringWithIndex.kt");
      }

      @TestMetadata("forInStringWithIndexNoElementVar.kt")
      public void testForInStringWithIndexNoElementVar() {
        runTest("compiler/testData/codegen/box/controlStructures/forInCharSequenceWithIndex/forInStringWithIndexNoElementVar.kt");
      }

      @TestMetadata("forInStringWithIndexNoIndexOrElementVar.kt")
      public void testForInStringWithIndexNoIndexOrElementVar() {
        runTest("compiler/testData/codegen/box/controlStructures/forInCharSequenceWithIndex/forInStringWithIndexNoIndexOrElementVar.kt");
      }

      @TestMetadata("forInStringWithIndexNoIndexVar.kt")
      public void testForInStringWithIndexNoIndexVar() {
        runTest("compiler/testData/codegen/box/controlStructures/forInCharSequenceWithIndex/forInStringWithIndexNoIndexVar.kt");
      }

      @TestMetadata("forInStringWithIndexNotDestructured.kt")
      public void testForInStringWithIndexNotDestructured() {
        runTest("compiler/testData/codegen/box/controlStructures/forInCharSequenceWithIndex/forInStringWithIndexNotDestructured.kt");
      }

      @TestMetadata("forInStringWithIndexWithExplicitlyTypedIndexVariable.kt")
      public void testForInStringWithIndexWithExplicitlyTypedIndexVariable() {
        runTest("compiler/testData/codegen/box/controlStructures/forInCharSequenceWithIndex/forInStringWithIndexWithExplicitlyTypedIndexVariable.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/controlStructures/forInIterableWithIndex")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ForInIterableWithIndex extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInForInIterableWithIndex() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/controlStructures/forInIterableWithIndex"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("forInEmptyListWithIndex.kt")
      public void testForInEmptyListWithIndex() {
        runTest("compiler/testData/codegen/box/controlStructures/forInIterableWithIndex/forInEmptyListWithIndex.kt");
      }

      @TestMetadata("forInIterableTypeParameterWithIndex.kt")
      public void testForInIterableTypeParameterWithIndex() {
        runTest("compiler/testData/codegen/box/controlStructures/forInIterableWithIndex/forInIterableTypeParameterWithIndex.kt");
      }

      @TestMetadata("forInIterableWithIndexCheckSideEffects.kt")
      public void testForInIterableWithIndexCheckSideEffects() {
        runTest("compiler/testData/codegen/box/controlStructures/forInIterableWithIndex/forInIterableWithIndexCheckSideEffects.kt");
      }

      @TestMetadata("forInIterableWithIndexNoElementVarCheckSideEffects.kt")
      public void testForInIterableWithIndexNoElementVarCheckSideEffects() {
        runTest("compiler/testData/codegen/box/controlStructures/forInIterableWithIndex/forInIterableWithIndexNoElementVarCheckSideEffects.kt");
      }

      @TestMetadata("forInIterableWithIndexNoIndexVarCheckSideEffects.kt")
      public void testForInIterableWithIndexNoIndexVarCheckSideEffects() {
        runTest("compiler/testData/codegen/box/controlStructures/forInIterableWithIndex/forInIterableWithIndexNoIndexVarCheckSideEffects.kt");
      }

      @TestMetadata("forInListWithIndex.kt")
      public void testForInListWithIndex() {
        runTest("compiler/testData/codegen/box/controlStructures/forInIterableWithIndex/forInListWithIndex.kt");
      }

      @TestMetadata("forInListWithIndexBreak.kt")
      public void testForInListWithIndexBreak() {
        runTest("compiler/testData/codegen/box/controlStructures/forInIterableWithIndex/forInListWithIndexBreak.kt");
      }

      @TestMetadata("forInListWithIndexBreakAndContinue.kt")
      public void testForInListWithIndexBreakAndContinue() {
        runTest("compiler/testData/codegen/box/controlStructures/forInIterableWithIndex/forInListWithIndexBreakAndContinue.kt");
      }

      @TestMetadata("forInListWithIndexContinue.kt")
      public void testForInListWithIndexContinue() {
        runTest("compiler/testData/codegen/box/controlStructures/forInIterableWithIndex/forInListWithIndexContinue.kt");
      }

      @TestMetadata("forInListWithIndexNoElementVar.kt")
      public void testForInListWithIndexNoElementVar() {
        runTest("compiler/testData/codegen/box/controlStructures/forInIterableWithIndex/forInListWithIndexNoElementVar.kt");
      }

      @TestMetadata("forInListWithIndexNoIndexVar.kt")
      public void testForInListWithIndexNoIndexVar() {
        runTest("compiler/testData/codegen/box/controlStructures/forInIterableWithIndex/forInListWithIndexNoIndexVar.kt");
      }

      @TestMetadata("forInListWithIndexThrowsCME.kt")
      public void testForInListWithIndexThrowsCME() {
        runTest("compiler/testData/codegen/box/controlStructures/forInIterableWithIndex/forInListWithIndexThrowsCME.kt");
      }

      @TestMetadata("forInListWithIndexWithExplicitlyTypedIndexVariable.kt")
      public void testForInListWithIndexWithExplicitlyTypedIndexVariable() {
        runTest("compiler/testData/codegen/box/controlStructures/forInIterableWithIndex/forInListWithIndexWithExplicitlyTypedIndexVariable.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/controlStructures/forInIterator")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ForInIterator extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      @TestMetadata("abstractNext.kt")
      public void testAbstractNext() {
        runTest("compiler/testData/codegen/box/controlStructures/forInIterator/abstractNext.kt");
      }

      public void testAllFilesPresentInForInIterator() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/controlStructures/forInIterator"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("primitiveIterator.kt")
      public void testPrimitiveIterator() {
        runTest("compiler/testData/codegen/box/controlStructures/forInIterator/primitiveIterator.kt");
      }

      @TestMetadata("uintIterator.kt")
      public void testUintIterator() {
        runTest("compiler/testData/codegen/box/controlStructures/forInIterator/uintIterator.kt");
      }

      @TestMetadata("unrelatedExtensionFunctionNext.kt")
      public void testUnrelatedExtensionFunctionNext() {
        runTest("compiler/testData/codegen/box/controlStructures/forInIterator/unrelatedExtensionFunctionNext.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/controlStructures/forInSequenceWithIndex")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ForInSequenceWithIndex extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInForInSequenceWithIndex() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/controlStructures/forInSequenceWithIndex"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("forInEmptySequenceWithIndex.kt")
      public void testForInEmptySequenceWithIndex() {
        runTest("compiler/testData/codegen/box/controlStructures/forInSequenceWithIndex/forInEmptySequenceWithIndex.kt");
      }

      @TestMetadata("forInSequenceTypeParameterWithIndex.kt")
      public void testForInSequenceTypeParameterWithIndex() {
        runTest("compiler/testData/codegen/box/controlStructures/forInSequenceWithIndex/forInSequenceTypeParameterWithIndex.kt");
      }

      @TestMetadata("forInSequenceWithIndex.kt")
      public void testForInSequenceWithIndex() {
        runTest("compiler/testData/codegen/box/controlStructures/forInSequenceWithIndex/forInSequenceWithIndex.kt");
      }

      @TestMetadata("forInSequenceWithIndexBreakAndContinue.kt")
      public void testForInSequenceWithIndexBreakAndContinue() {
        runTest("compiler/testData/codegen/box/controlStructures/forInSequenceWithIndex/forInSequenceWithIndexBreakAndContinue.kt");
      }

      @TestMetadata("forInSequenceWithIndexCheckSideEffects.kt")
      public void testForInSequenceWithIndexCheckSideEffects() {
        runTest("compiler/testData/codegen/box/controlStructures/forInSequenceWithIndex/forInSequenceWithIndexCheckSideEffects.kt");
      }

      @TestMetadata("forInSequenceWithIndexNoElementVar.kt")
      public void testForInSequenceWithIndexNoElementVar() {
        runTest("compiler/testData/codegen/box/controlStructures/forInSequenceWithIndex/forInSequenceWithIndexNoElementVar.kt");
      }

      @TestMetadata("forInSequenceWithIndexNoElementVarCheckSideEffects.kt")
      public void testForInSequenceWithIndexNoElementVarCheckSideEffects() {
        runTest("compiler/testData/codegen/box/controlStructures/forInSequenceWithIndex/forInSequenceWithIndexNoElementVarCheckSideEffects.kt");
      }

      @TestMetadata("forInSequenceWithIndexNoIndexVar.kt")
      public void testForInSequenceWithIndexNoIndexVar() {
        runTest("compiler/testData/codegen/box/controlStructures/forInSequenceWithIndex/forInSequenceWithIndexNoIndexVar.kt");
      }

      @TestMetadata("forInSequenceWithIndexNoIndexVarCheckSideEffects.kt")
      public void testForInSequenceWithIndexNoIndexVarCheckSideEffects() {
        runTest("compiler/testData/codegen/box/controlStructures/forInSequenceWithIndex/forInSequenceWithIndexNoIndexVarCheckSideEffects.kt");
      }

      @TestMetadata("forInSequenceWithIndexThrowsCME.kt")
      public void testForInSequenceWithIndexThrowsCME() {
        runTest("compiler/testData/codegen/box/controlStructures/forInSequenceWithIndex/forInSequenceWithIndexThrowsCME.kt");
      }

      @TestMetadata("forInSequenceWithIndexWithExplicitlyTypedIndexVariable.kt")
      public void testForInSequenceWithIndexWithExplicitlyTypedIndexVariable() {
        runTest("compiler/testData/codegen/box/controlStructures/forInSequenceWithIndex/forInSequenceWithIndexWithExplicitlyTypedIndexVariable.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/controlStructures/returnsNothing")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ReturnsNothing extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInReturnsNothing() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/controlStructures/returnsNothing"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("ifElse.kt")
      public void testIfElse() {
        runTest("compiler/testData/codegen/box/controlStructures/returnsNothing/ifElse.kt");
      }

      @TestMetadata("inlineMethod.kt")
      public void testInlineMethod() {
        runTest("compiler/testData/codegen/box/controlStructures/returnsNothing/inlineMethod.kt");
      }

      @TestMetadata("propertyGetter.kt")
      public void testPropertyGetter() {
        runTest("compiler/testData/codegen/box/controlStructures/returnsNothing/propertyGetter.kt");
      }

      @TestMetadata("tryCatch.kt")
      public void testTryCatch() {
        runTest("compiler/testData/codegen/box/controlStructures/returnsNothing/tryCatch.kt");
      }

      @TestMetadata("when.kt")
      public void testWhen() {
        runTest("compiler/testData/codegen/box/controlStructures/returnsNothing/when.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/controlStructures/slowDsl")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class SlowDsl extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInSlowDsl() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/controlStructures/slowDsl"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("slowHtmlLikeDsl.kt")
      public void testSlowHtmlLikeDsl() {
        runTest("compiler/testData/codegen/box/controlStructures/slowDsl/slowHtmlLikeDsl.kt");
      }

      @TestMetadata("slowHtmlLikeDslNoInline.kt")
      public void testSlowHtmlLikeDslNoInline() {
        runTest("compiler/testData/codegen/box/controlStructures/slowDsl/slowHtmlLikeDslNoInline.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class TryCatchInExpressions extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInTryCatchInExpressions() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("catch.kt")
      public void testCatch() {
        runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/catch.kt");
      }

      @TestMetadata("complexChain.kt")
      public void testComplexChain() {
        runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/complexChain.kt");
      }

      @TestMetadata("deadTryCatch.kt")
      public void testDeadTryCatch() {
        runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/deadTryCatch.kt");
      }

      @TestMetadata("differentTypes.kt")
      public void testDifferentTypes() {
        runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/differentTypes.kt");
      }

      @TestMetadata("expectException.kt")
      public void testExpectException() {
        runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/expectException.kt");
      }

      @TestMetadata("finally.kt")
      public void testFinally() {
        runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/finally.kt");
      }

      @TestMetadata("inlineTryCatch.kt")
      public void testInlineTryCatch() {
        runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/inlineTryCatch.kt");
      }

      @TestMetadata("inlineTryExpr.kt")
      public void testInlineTryExpr() {
        runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/inlineTryExpr.kt");
      }

      @TestMetadata("inlineTryFinally.kt")
      public void testInlineTryFinally() {
        runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/inlineTryFinally.kt");
      }

      @TestMetadata("kt17572.kt")
      public void testKt17572() {
        runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/kt17572.kt");
      }

      @TestMetadata("kt17572_2.kt")
      public void testKt17572_2() {
        runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/kt17572_2.kt");
      }

      @TestMetadata("kt17572_2_ext.kt")
      public void testKt17572_2_ext() {
        runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/kt17572_2_ext.kt");
      }

      @TestMetadata("kt17572_ext.kt")
      public void testKt17572_ext() {
        runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/kt17572_ext.kt");
      }

      @TestMetadata("kt17572_nested.kt")
      public void testKt17572_nested() {
        runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/kt17572_nested.kt");
      }

      @TestMetadata("kt17573.kt")
      public void testKt17573() {
        runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/kt17573.kt");
      }

      @TestMetadata("kt17573_nested.kt")
      public void testKt17573_nested() {
        runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/kt17573_nested.kt");
      }

      @TestMetadata("kt8608.kt")
      public void testKt8608() {
        runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/kt8608.kt");
      }

      @TestMetadata("kt9644try.kt")
      public void testKt9644try() {
        runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/kt9644try.kt");
      }

      @TestMetadata("multipleCatchBlocks.kt")
      public void testMultipleCatchBlocks() {
        runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/multipleCatchBlocks.kt");
      }

      @TestMetadata("nonLocalReturnInTryFinally.kt")
      public void testNonLocalReturnInTryFinally() {
        runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/nonLocalReturnInTryFinally.kt");
      }

      @TestMetadata("splitTry.kt")
      public void testSplitTry() {
        runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/splitTry.kt");
      }

      @TestMetadata("try.kt")
      public void testTry() {
        runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/try.kt");
      }

      @TestMetadata("tryAfterTry.kt")
      public void testTryAfterTry() {
        runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/tryAfterTry.kt");
      }

      @TestMetadata("tryAndBreak.kt")
      public void testTryAndBreak() {
        runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/tryAndBreak.kt");
      }

      @TestMetadata("tryAndContinue.kt")
      public void testTryAndContinue() {
        runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/tryAndContinue.kt");
      }

      @TestMetadata("tryCatchAfterWhileTrue.kt")
      public void testTryCatchAfterWhileTrue() {
        runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/tryCatchAfterWhileTrue.kt");
      }

      @TestMetadata("tryFinallyOfTypeUnit.kt")
      public void testTryFinallyOfTypeUnit() {
        runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/tryFinallyOfTypeUnit.kt");
      }

      @TestMetadata("tryInsideCatch.kt")
      public void testTryInsideCatch() {
        runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/tryInsideCatch.kt");
      }

      @TestMetadata("tryInsideTry.kt")
      public void testTryInsideTry() {
        runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/tryInsideTry.kt");
      }

      @TestMetadata("unmatchedInlineMarkers.kt")
      public void testUnmatchedInlineMarkers() {
        runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/unmatchedInlineMarkers.kt");
      }
    }
  }

  @TestMetadata("compiler/testData/codegen/box/controlflow")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Controlflow extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInControlflow() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/controlflow"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("break.kt")
    public void testBreak() {
      runTest("compiler/testData/codegen/box/controlflow/break.kt");
    }

    @TestMetadata("break1.kt")
    public void testBreak1() {
      runTest("compiler/testData/codegen/box/controlflow/break1.kt");
    }

    @TestMetadata("callOnSmarcastedNothing.kt")
    public void testCallOnSmarcastedNothing() {
      runTest("compiler/testData/codegen/box/controlflow/callOnSmarcastedNothing.kt");
    }

    @TestMetadata("for_loops.kt")
    public void testFor_loops() {
      runTest("compiler/testData/codegen/box/controlflow/for_loops.kt");
    }

    @TestMetadata("for_loops_array_break_continue.kt")
    public void testFor_loops_array_break_continue() {
      runTest("compiler/testData/codegen/box/controlflow/for_loops_array_break_continue.kt");
    }

    @TestMetadata("for_loops_array_indices.kt")
    public void testFor_loops_array_indices() {
      runTest("compiler/testData/codegen/box/controlflow/for_loops_array_indices.kt");
    }

    @TestMetadata("for_loops_array_mutation.kt")
    public void testFor_loops_array_mutation() {
      runTest("compiler/testData/codegen/box/controlflow/for_loops_array_mutation.kt");
    }

    @TestMetadata("for_loops_array_nested.kt")
    public void testFor_loops_array_nested() {
      runTest("compiler/testData/codegen/box/controlflow/for_loops_array_nested.kt");
    }

    @TestMetadata("for_loops_array_nullable.kt")
    public void testFor_loops_array_nullable() {
      runTest("compiler/testData/codegen/box/controlflow/for_loops_array_nullable.kt");
    }

    @TestMetadata("for_loops_array_side_effects.kt")
    public void testFor_loops_array_side_effects() {
      runTest("compiler/testData/codegen/box/controlflow/for_loops_array_side_effects.kt");
    }

    @TestMetadata("for_loops_call_order.kt")
    public void testFor_loops_call_order() {
      runTest("compiler/testData/codegen/box/controlflow/for_loops_call_order.kt");
    }

    @TestMetadata("for_loops_coroutines.kt")
    public void testFor_loops_coroutines() {
      runTest("compiler/testData/codegen/box/controlflow/for_loops_coroutines.kt");
    }

    @TestMetadata("for_loops_empty_range.kt")
    public void testFor_loops_empty_range() {
      runTest("compiler/testData/codegen/box/controlflow/for_loops_empty_range.kt");
    }

    @TestMetadata("for_loops_errors.kt")
    public void testFor_loops_errors() {
      runTest("compiler/testData/codegen/box/controlflow/for_loops_errors.kt");
    }

    @TestMetadata("for_loops_let_with_nullable.kt")
    public void testFor_loops_let_with_nullable() {
      runTest("compiler/testData/codegen/box/controlflow/for_loops_let_with_nullable.kt");
    }

    @TestMetadata("for_loops_nested.kt")
    public void testFor_loops_nested() {
      runTest("compiler/testData/codegen/box/controlflow/for_loops_nested.kt");
    }

    @TestMetadata("for_loops_overflow.kt")
    public void testFor_loops_overflow() {
      runTest("compiler/testData/codegen/box/controlflow/for_loops_overflow.kt");
    }

    @TestMetadata("for_loops_types.kt")
    public void testFor_loops_types() {
      runTest("compiler/testData/codegen/box/controlflow/for_loops_types.kt");
    }

    @TestMetadata("smartcastOnThisInInitializationSection.kt")
    public void testSmartcastOnThisInInitializationSection() {
      runTest("compiler/testData/codegen/box/controlflow/smartcastOnThisInInitializationSection.kt");
    }

    @TestMetadata("unreachable1.kt")
    public void testUnreachable1() {
      runTest("compiler/testData/codegen/box/controlflow/unreachable1.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/coroutines")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Coroutines extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    @TestMetadata("32defaultParametersInSuspend.kt")
    public void test32defaultParametersInSuspend() {
      runTest("compiler/testData/codegen/box/coroutines/32defaultParametersInSuspend.kt");
    }

    @TestMetadata("accessorForSuspend.kt")
    public void testAccessorForSuspend() {
      runTest("compiler/testData/codegen/box/coroutines/accessorForSuspend.kt");
    }

    public void testAllFilesPresentInCoroutines() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("anonymousObject.kt")
    public void testAnonymousObject() {
      runTest("compiler/testData/codegen/box/coroutines/anonymousObject.kt");
    }

    @TestMetadata("async.kt")
    public void testAsync() {
      runTest("compiler/testData/codegen/box/coroutines/async.kt");
    }

    @TestMetadata("asyncException.kt")
    public void testAsyncException() {
      runTest("compiler/testData/codegen/box/coroutines/asyncException.kt");
    }

    @TestMetadata("asyncIteratorNullMerge_1_3.kt")
    public void testAsyncIteratorNullMerge_1_3() {
      runTest("compiler/testData/codegen/box/coroutines/asyncIteratorNullMerge_1_3.kt");
    }

    @TestMetadata("asyncIteratorToList_1_3.kt")
    public void testAsyncIteratorToList_1_3() {
      runTest("compiler/testData/codegen/box/coroutines/asyncIteratorToList_1_3.kt");
    }

    @TestMetadata("asyncIterator_1_3.kt")
    public void testAsyncIterator_1_3() {
      runTest("compiler/testData/codegen/box/coroutines/asyncIterator_1_3.kt");
    }

    @TestMetadata("await.kt")
    public void testAwait() {
      runTest("compiler/testData/codegen/box/coroutines/await.kt");
    }

    @TestMetadata("beginWithException.kt")
    public void testBeginWithException() {
      runTest("compiler/testData/codegen/box/coroutines/beginWithException.kt");
    }

    @TestMetadata("beginWithExceptionNoHandleException.kt")
    public void testBeginWithExceptionNoHandleException() {
      runTest("compiler/testData/codegen/box/coroutines/beginWithExceptionNoHandleException.kt");
    }

    @TestMetadata("builderInferenceAndGenericArrayAcessCall.kt")
    public void testBuilderInferenceAndGenericArrayAcessCall() {
      runTest("compiler/testData/codegen/box/coroutines/builderInferenceAndGenericArrayAcessCall.kt");
    }

    @TestMetadata("captureInfixFun.kt")
    public void testCaptureInfixFun() {
      runTest("compiler/testData/codegen/box/coroutines/captureInfixFun.kt");
    }

    @TestMetadata("captureMutableLocalVariableInsideCoroutineBlock.kt")
    public void testCaptureMutableLocalVariableInsideCoroutineBlock() {
      runTest("compiler/testData/codegen/box/coroutines/captureMutableLocalVariableInsideCoroutineBlock.kt");
    }

    @TestMetadata("captureUnaryOperator.kt")
    public void testCaptureUnaryOperator() {
      runTest("compiler/testData/codegen/box/coroutines/captureUnaryOperator.kt");
    }

    @TestMetadata("capturedVarInSuspendLambda.kt")
    public void testCapturedVarInSuspendLambda() {
      runTest("compiler/testData/codegen/box/coroutines/capturedVarInSuspendLambda.kt");
    }

    @TestMetadata("castWithSuspend.kt")
    public void testCastWithSuspend() {
      runTest("compiler/testData/codegen/box/coroutines/castWithSuspend.kt");
    }

    @TestMetadata("catchWithInlineInsideSuspend.kt")
    public void testCatchWithInlineInsideSuspend() {
      runTest("compiler/testData/codegen/box/coroutines/catchWithInlineInsideSuspend.kt");
    }

    @TestMetadata("coercionToUnit.kt")
    public void testCoercionToUnit() {
      runTest("compiler/testData/codegen/box/coroutines/coercionToUnit.kt");
    }

    @TestMetadata("controlFlow_chain.kt")
    public void testControlFlow_chain() {
      runTest("compiler/testData/codegen/box/coroutines/controlFlow_chain.kt");
    }

    @TestMetadata("controlFlow_finally1.kt")
    public void testControlFlow_finally1() {
      runTest("compiler/testData/codegen/box/coroutines/controlFlow_finally1.kt");
    }

    @TestMetadata("controlFlow_finally2.kt")
    public void testControlFlow_finally2() {
      runTest("compiler/testData/codegen/box/coroutines/controlFlow_finally2.kt");
    }

    @TestMetadata("controlFlow_finally3.kt")
    public void testControlFlow_finally3() {
      runTest("compiler/testData/codegen/box/coroutines/controlFlow_finally3.kt");
    }

    @TestMetadata("controlFlow_finally4.kt")
    public void testControlFlow_finally4() {
      runTest("compiler/testData/codegen/box/coroutines/controlFlow_finally4.kt");
    }

    @TestMetadata("controlFlow_finally5.kt")
    public void testControlFlow_finally5() {
      runTest("compiler/testData/codegen/box/coroutines/controlFlow_finally5.kt");
    }

    @TestMetadata("controlFlow_finally6.kt")
    public void testControlFlow_finally6() {
      runTest("compiler/testData/codegen/box/coroutines/controlFlow_finally6.kt");
    }

    @TestMetadata("controlFlow_finally7.kt")
    public void testControlFlow_finally7() {
      runTest("compiler/testData/codegen/box/coroutines/controlFlow_finally7.kt");
    }

    @TestMetadata("controlFlow_if1.kt")
    public void testControlFlow_if1() {
      runTest("compiler/testData/codegen/box/coroutines/controlFlow_if1.kt");
    }

    @TestMetadata("controlFlow_if2.kt")
    public void testControlFlow_if2() {
      runTest("compiler/testData/codegen/box/coroutines/controlFlow_if2.kt");
    }

    @TestMetadata("controlFlow_inline1.kt")
    public void testControlFlow_inline1() {
      runTest("compiler/testData/codegen/box/coroutines/controlFlow_inline1.kt");
    }

    @TestMetadata("controlFlow_inline2.kt")
    public void testControlFlow_inline2() {
      runTest("compiler/testData/codegen/box/coroutines/controlFlow_inline2.kt");
    }

    @TestMetadata("controlFlow_inline3.kt")
    public void testControlFlow_inline3() {
      runTest("compiler/testData/codegen/box/coroutines/controlFlow_inline3.kt");
    }

    @TestMetadata("controlFlow_tryCatch1.kt")
    public void testControlFlow_tryCatch1() {
      runTest("compiler/testData/codegen/box/coroutines/controlFlow_tryCatch1.kt");
    }

    @TestMetadata("controlFlow_tryCatch2.kt")
    public void testControlFlow_tryCatch2() {
      runTest("compiler/testData/codegen/box/coroutines/controlFlow_tryCatch2.kt");
    }

    @TestMetadata("controlFlow_tryCatch3.kt")
    public void testControlFlow_tryCatch3() {
      runTest("compiler/testData/codegen/box/coroutines/controlFlow_tryCatch3.kt");
    }

    @TestMetadata("controlFlow_tryCatch4.kt")
    public void testControlFlow_tryCatch4() {
      runTest("compiler/testData/codegen/box/coroutines/controlFlow_tryCatch4.kt");
    }

    @TestMetadata("controlFlow_tryCatch5.kt")
    public void testControlFlow_tryCatch5() {
      runTest("compiler/testData/codegen/box/coroutines/controlFlow_tryCatch5.kt");
    }

    @TestMetadata("controlFlow_while1.kt")
    public void testControlFlow_while1() {
      runTest("compiler/testData/codegen/box/coroutines/controlFlow_while1.kt");
    }

    @TestMetadata("controlFlow_while2.kt")
    public void testControlFlow_while2() {
      runTest("compiler/testData/codegen/box/coroutines/controlFlow_while2.kt");
    }

    @TestMetadata("controllerAccessFromInnerLambda.kt")
    public void testControllerAccessFromInnerLambda() {
      runTest("compiler/testData/codegen/box/coroutines/controllerAccessFromInnerLambda.kt");
    }

    @TestMetadata("coroutineContext1.kt")
    public void testCoroutineContext1() {
      runTest("compiler/testData/codegen/box/coroutines/coroutineContext1.kt");
    }

    @TestMetadata("coroutineContext2.kt")
    public void testCoroutineContext2() {
      runTest("compiler/testData/codegen/box/coroutines/coroutineContext2.kt");
    }

    @TestMetadata("coroutineContextInInlinedLambda.kt")
    public void testCoroutineContextInInlinedLambda() {
      runTest("compiler/testData/codegen/box/coroutines/coroutineContextInInlinedLambda.kt");
    }

    @TestMetadata("coroutineToString.kt")
    public void testCoroutineToString() {
      runTest("compiler/testData/codegen/box/coroutines/coroutineToString.kt");
    }

    @TestMetadata("correctOrder1.kt")
    public void testCorrectOrder1() {
      runTest("compiler/testData/codegen/box/coroutines/correctOrder1.kt");
    }

    @TestMetadata("createCoroutineSafe.kt")
    public void testCreateCoroutineSafe() {
      runTest("compiler/testData/codegen/box/coroutines/createCoroutineSafe.kt");
    }

    @TestMetadata("createCoroutinesOnManualInstances.kt")
    public void testCreateCoroutinesOnManualInstances() {
      runTest("compiler/testData/codegen/box/coroutines/createCoroutinesOnManualInstances.kt");
    }

    @TestMetadata("crossInlineWithCapturedOuterReceiver.kt")
    public void testCrossInlineWithCapturedOuterReceiver() {
      runTest("compiler/testData/codegen/box/coroutines/crossInlineWithCapturedOuterReceiver.kt");
    }

    @TestMetadata("defaultParameterLambdaInSuspend.kt")
    public void testDefaultParameterLambdaInSuspend() {
      runTest("compiler/testData/codegen/box/coroutines/defaultParameterLambdaInSuspend.kt");
    }

    @TestMetadata("defaultParametersInSuspend.kt")
    public void testDefaultParametersInSuspend() {
      runTest("compiler/testData/codegen/box/coroutines/defaultParametersInSuspend.kt");
    }

    @TestMetadata("defaultParametersInSuspendWithJvmOverloads.kt")
    public void testDefaultParametersInSuspendWithJvmOverloads() {
      runTest("compiler/testData/codegen/box/coroutines/defaultParametersInSuspendWithJvmOverloads.kt");
    }

    @TestMetadata("degenerate1.kt")
    public void testDegenerate1() {
      runTest("compiler/testData/codegen/box/coroutines/degenerate1.kt");
    }

    @TestMetadata("degenerate2.kt")
    public void testDegenerate2() {
      runTest("compiler/testData/codegen/box/coroutines/degenerate2.kt");
    }

    @TestMetadata("delegatedSuspendMember.kt")
    public void testDelegatedSuspendMember() {
      runTest("compiler/testData/codegen/box/coroutines/delegatedSuspendMember.kt");
    }

    @TestMetadata("deserializedSuspendFunctionProperty.kt")
    public void testDeserializedSuspendFunctionProperty() {
      runTest("compiler/testData/codegen/box/coroutines/deserializedSuspendFunctionProperty.kt");
    }

    @TestMetadata("dispatchResume.kt")
    public void testDispatchResume() {
      runTest("compiler/testData/codegen/box/coroutines/dispatchResume.kt");
    }

    @TestMetadata("doubleColonExpressionsGenerationInBuilderInference.kt")
    public void testDoubleColonExpressionsGenerationInBuilderInference() {
      runTest("compiler/testData/codegen/box/coroutines/doubleColonExpressionsGenerationInBuilderInference.kt");
    }

    @TestMetadata("emptyClosure.kt")
    public void testEmptyClosure() {
      runTest("compiler/testData/codegen/box/coroutines/emptyClosure.kt");
    }

    @TestMetadata("emptyCommonConstraintSystemForCoroutineInferenceCall.kt")
    public void testEmptyCommonConstraintSystemForCoroutineInferenceCall() {
      runTest("compiler/testData/codegen/box/coroutines/emptyCommonConstraintSystemForCoroutineInferenceCall.kt");
    }

    @TestMetadata("epam.kt")
    public void testEpam() {
      runTest("compiler/testData/codegen/box/coroutines/epam.kt");
    }

    @TestMetadata("falseUnitCoercion.kt")
    public void testFalseUnitCoercion() {
      runTest("compiler/testData/codegen/box/coroutines/falseUnitCoercion.kt");
    }

    @TestMetadata("functionReference_eqeq_name.kt")
    public void testFunctionReference_eqeq_name() {
      runTest("compiler/testData/codegen/box/coroutines/functionReference_eqeq_name.kt");
    }

    @TestMetadata("functionReference_invokeAsFunction.kt")
    public void testFunctionReference_invokeAsFunction() {
      runTest("compiler/testData/codegen/box/coroutines/functionReference_invokeAsFunction.kt");
    }

    @TestMetadata("functionReference_lambdaAsSuspendLambda.kt")
    public void testFunctionReference_lambdaAsSuspendLambda() {
      runTest("compiler/testData/codegen/box/coroutines/functionReference_lambdaAsSuspendLambda.kt");
    }

    @TestMetadata("functionReference_simple.kt")
    public void testFunctionReference_simple() {
      runTest("compiler/testData/codegen/box/coroutines/functionReference_simple.kt");
    }

    @TestMetadata("generate.kt")
    public void testGenerate() {
      runTest("compiler/testData/codegen/box/coroutines/generate.kt");
    }

    @TestMetadata("genericSignatureForSuspendImpl.kt")
    public void testGenericSignatureForSuspendImpl() {
      runTest("compiler/testData/codegen/box/coroutines/genericSignatureForSuspendImpl.kt");
    }

    @TestMetadata("handleException.kt")
    public void testHandleException() {
      runTest("compiler/testData/codegen/box/coroutines/handleException.kt");
    }

    @TestMetadata("handleResultCallEmptyBody.kt")
    public void testHandleResultCallEmptyBody() {
      runTest("compiler/testData/codegen/box/coroutines/handleResultCallEmptyBody.kt");
    }

    @TestMetadata("handleResultNonUnitExpression.kt")
    public void testHandleResultNonUnitExpression() {
      runTest("compiler/testData/codegen/box/coroutines/handleResultNonUnitExpression.kt");
    }

    @TestMetadata("handleResultSuspended.kt")
    public void testHandleResultSuspended() {
      runTest("compiler/testData/codegen/box/coroutines/handleResultSuspended.kt");
    }

    @TestMetadata("illegalState.kt")
    public void testIllegalState() {
      runTest("compiler/testData/codegen/box/coroutines/illegalState.kt");
    }

    @TestMetadata("indirectInlineUsedAsNonInline.kt")
    public void testIndirectInlineUsedAsNonInline() {
      runTest("compiler/testData/codegen/box/coroutines/indirectInlineUsedAsNonInline.kt");
    }

    @TestMetadata("infiniteLoopInNextMeaningful.kt")
    public void testInfiniteLoopInNextMeaningful() {
      runTest("compiler/testData/codegen/box/coroutines/infiniteLoopInNextMeaningful.kt");
    }

    @TestMetadata("inlineCallWithReturns.kt")
    public void testInlineCallWithReturns() {
      runTest("compiler/testData/codegen/box/coroutines/inlineCallWithReturns.kt");
    }

    @TestMetadata("inlineFunInGenericClass.kt")
    public void testInlineFunInGenericClass() {
      runTest("compiler/testData/codegen/box/coroutines/inlineFunInGenericClass.kt");
    }

    @TestMetadata("inlineFunctionInMultifileClass.kt")
    public void testInlineFunctionInMultifileClass() {
      runTest("compiler/testData/codegen/box/coroutines/inlineFunctionInMultifileClass.kt");
    }

    @TestMetadata("inlineFunctionInMultifileClassUnoptimized.kt")
    public void testInlineFunctionInMultifileClassUnoptimized() {
      runTest("compiler/testData/codegen/box/coroutines/inlineFunctionInMultifileClassUnoptimized.kt");
    }

    @TestMetadata("inlineGenericFunCalledFromSubclass.kt")
    public void testInlineGenericFunCalledFromSubclass() {
      runTest("compiler/testData/codegen/box/coroutines/inlineGenericFunCalledFromSubclass.kt");
    }

    @TestMetadata("inlineSuspendFunction.kt")
    public void testInlineSuspendFunction() {
      runTest("compiler/testData/codegen/box/coroutines/inlineSuspendFunction.kt");
    }

    @TestMetadata("inlineSuspendLambdaNonLocalReturn.kt")
    public void testInlineSuspendLambdaNonLocalReturn() {
      runTest("compiler/testData/codegen/box/coroutines/inlineSuspendLambdaNonLocalReturn.kt");
    }

    @TestMetadata("inlineSuspendTypealias.kt")
    public void testInlineSuspendTypealias() {
      runTest("compiler/testData/codegen/box/coroutines/inlineSuspendTypealias.kt");
    }

    @TestMetadata("inlinedTryCatchFinally.kt")
    public void testInlinedTryCatchFinally() {
      runTest("compiler/testData/codegen/box/coroutines/inlinedTryCatchFinally.kt");
    }

    @TestMetadata("innerSuspensionCalls.kt")
    public void testInnerSuspensionCalls() {
      runTest("compiler/testData/codegen/box/coroutines/innerSuspensionCalls.kt");
    }

    @TestMetadata("instanceOfContinuation.kt")
    public void testInstanceOfContinuation() {
      runTest("compiler/testData/codegen/box/coroutines/instanceOfContinuation.kt");
    }

    @TestMetadata("iterateOverArray.kt")
    public void testIterateOverArray() {
      runTest("compiler/testData/codegen/box/coroutines/iterateOverArray.kt");
    }

    @TestMetadata("jvmStaticAndJvmInline.kt")
    public void testJvmStaticAndJvmInline() {
      runTest("compiler/testData/codegen/box/coroutines/jvmStaticAndJvmInline.kt");
    }

    @TestMetadata("kt12958.kt")
    public void testKt12958() {
      runTest("compiler/testData/codegen/box/coroutines/kt12958.kt");
    }

    @TestMetadata("kt15016.kt")
    public void testKt15016() {
      runTest("compiler/testData/codegen/box/coroutines/kt15016.kt");
    }

    @TestMetadata("kt15017.kt")
    public void testKt15017() {
      runTest("compiler/testData/codegen/box/coroutines/kt15017.kt");
    }

    @TestMetadata("kt15930.kt")
    public void testKt15930() {
      runTest("compiler/testData/codegen/box/coroutines/kt15930.kt");
    }

    @TestMetadata("kt21080.kt")
    public void testKt21080() {
      runTest("compiler/testData/codegen/box/coroutines/kt21080.kt");
    }

    @TestMetadata("kt21605.kt")
    public void testKt21605() {
      runTest("compiler/testData/codegen/box/coroutines/kt21605.kt");
    }

    @TestMetadata("kt24135.kt")
    public void testKt24135() {
      runTest("compiler/testData/codegen/box/coroutines/kt24135.kt");
    }

    @TestMetadata("kt25912.kt")
    public void testKt25912() {
      runTest("compiler/testData/codegen/box/coroutines/kt25912.kt");
    }

    @TestMetadata("kt28844.kt")
    public void testKt28844() {
      runTest("compiler/testData/codegen/box/coroutines/kt28844.kt");
    }

    @TestMetadata("kt30858.kt")
    public void testKt30858() {
      runTest("compiler/testData/codegen/box/coroutines/kt30858.kt");
    }

    @TestMetadata("kt31784.kt")
    public void testKt31784() {
      runTest("compiler/testData/codegen/box/coroutines/kt31784.kt");
    }

    @TestMetadata("kt35967.kt")
    public void testKt35967() {
      runTest("compiler/testData/codegen/box/coroutines/kt35967.kt");
    }

    @TestMetadata("kt38099.kt")
    public void testKt38099() {
      runTest("compiler/testData/codegen/box/coroutines/kt38099.kt");
    }

    @TestMetadata("kt41394.kt")
    public void testKt41394() {
      runTest("compiler/testData/codegen/box/coroutines/kt41394.kt");
    }

    @TestMetadata("kt42028.kt")
    public void testKt42028() {
      runTest("compiler/testData/codegen/box/coroutines/kt42028.kt");
    }

    @TestMetadata("kt42554.kt")
    public void testKt42554() {
      runTest("compiler/testData/codegen/box/coroutines/kt42554.kt");
    }

    @TestMetadata("kt44221.kt")
    public void testKt44221() {
      runTest("compiler/testData/codegen/box/coroutines/kt44221.kt");
    }

    @TestMetadata("kt44710.kt")
    public void testKt44710() {
      runTest("compiler/testData/codegen/box/coroutines/kt44710.kt");
    }

    @TestMetadata("kt44781.kt")
    public void testKt44781() {
      runTest("compiler/testData/codegen/box/coroutines/kt44781.kt");
    }

    @TestMetadata("kt45377.kt")
    public void testKt45377() {
      runTest("compiler/testData/codegen/box/coroutines/kt45377.kt");
    }

    @TestMetadata("kt46813.kt")
    public void testKt46813() {
      runTest("compiler/testData/codegen/box/coroutines/kt46813.kt");
    }

    @TestMetadata("kt49168.kt")
    public void testKt49168() {
      runTest("compiler/testData/codegen/box/coroutines/kt49168.kt");
    }

    @TestMetadata("kt49317.kt")
    public void testKt49317() {
      runTest("compiler/testData/codegen/box/coroutines/kt49317.kt");
    }

    @TestMetadata("kt49645.kt")
    public void testKt49645() {
      runTest("compiler/testData/codegen/box/coroutines/kt49645.kt");
    }

    @TestMetadata("kt50277.kt")
    public void testKt50277() {
      runTest("compiler/testData/codegen/box/coroutines/kt50277.kt");
    }

    @TestMetadata("kt51530.kt")
    public void testKt51530() {
      runTest("compiler/testData/codegen/box/coroutines/kt51530.kt");
    }

    @TestMetadata("kt51718.kt")
    public void testKt51718() {
      runTest("compiler/testData/codegen/box/coroutines/kt51718.kt");
    }

    @TestMetadata("kt52311_nullOnLeft.kt")
    public void testKt52311_nullOnLeft() {
      runTest("compiler/testData/codegen/box/coroutines/kt52311_nullOnLeft.kt");
    }

    @TestMetadata("kt52311_nullOnRight.kt")
    public void testKt52311_nullOnRight() {
      runTest("compiler/testData/codegen/box/coroutines/kt52311_nullOnRight.kt");
    }

    @TestMetadata("kt52561.kt")
    public void testKt52561() {
      runTest("compiler/testData/codegen/box/coroutines/kt52561.kt");
    }

    @TestMetadata("kt55494.kt")
    public void testKt55494() {
      runTest("compiler/testData/codegen/box/coroutines/kt55494.kt");
    }

    @TestMetadata("kt56407.kt")
    public void testKt56407() {
      runTest("compiler/testData/codegen/box/coroutines/kt56407.kt");
    }

    @TestMetadata("lastExpressionIsLoop.kt")
    public void testLastExpressionIsLoop() {
      runTest("compiler/testData/codegen/box/coroutines/lastExpressionIsLoop.kt");
    }

    @TestMetadata("lastStatementInc.kt")
    public void testLastStatementInc() {
      runTest("compiler/testData/codegen/box/coroutines/lastStatementInc.kt");
    }

    @TestMetadata("lastStementAssignment.kt")
    public void testLastStementAssignment() {
      runTest("compiler/testData/codegen/box/coroutines/lastStementAssignment.kt");
    }

    @TestMetadata("lastUnitExpression.kt")
    public void testLastUnitExpression() {
      runTest("compiler/testData/codegen/box/coroutines/lastUnitExpression.kt");
    }

    @TestMetadata("localCallableRef.kt")
    public void testLocalCallableRef() {
      runTest("compiler/testData/codegen/box/coroutines/localCallableRef.kt");
    }

    @TestMetadata("localDelegate.kt")
    public void testLocalDelegate() {
      runTest("compiler/testData/codegen/box/coroutines/localDelegate.kt");
    }

    @TestMetadata("longRangeInSuspendCall.kt")
    public void testLongRangeInSuspendCall() {
      runTest("compiler/testData/codegen/box/coroutines/longRangeInSuspendCall.kt");
    }

    @TestMetadata("longRangeInSuspendFun.kt")
    public void testLongRangeInSuspendFun() {
      runTest("compiler/testData/codegen/box/coroutines/longRangeInSuspendFun.kt");
    }

    @TestMetadata("mergeNullAndString.kt")
    public void testMergeNullAndString() {
      runTest("compiler/testData/codegen/box/coroutines/mergeNullAndString.kt");
    }

    @TestMetadata("multipleInvokeCalls.kt")
    public void testMultipleInvokeCalls() {
      runTest("compiler/testData/codegen/box/coroutines/multipleInvokeCalls.kt");
    }

    @TestMetadata("multipleInvokeCallsInsideInlineLambda1.kt")
    public void testMultipleInvokeCallsInsideInlineLambda1() {
      runTest("compiler/testData/codegen/box/coroutines/multipleInvokeCallsInsideInlineLambda1.kt");
    }

    @TestMetadata("multipleInvokeCallsInsideInlineLambda2.kt")
    public void testMultipleInvokeCallsInsideInlineLambda2() {
      runTest("compiler/testData/codegen/box/coroutines/multipleInvokeCallsInsideInlineLambda2.kt");
    }

    @TestMetadata("multipleInvokeCallsInsideInlineLambda3.kt")
    public void testMultipleInvokeCallsInsideInlineLambda3() {
      runTest("compiler/testData/codegen/box/coroutines/multipleInvokeCallsInsideInlineLambda3.kt");
    }

    @TestMetadata("nestedTryCatch.kt")
    public void testNestedTryCatch() {
      runTest("compiler/testData/codegen/box/coroutines/nestedTryCatch.kt");
    }

    @TestMetadata("noSuspensionPoints.kt")
    public void testNoSuspensionPoints() {
      runTest("compiler/testData/codegen/box/coroutines/noSuspensionPoints.kt");
    }

    @TestMetadata("nonLocalReturn.kt")
    public void testNonLocalReturn() {
      runTest("compiler/testData/codegen/box/coroutines/nonLocalReturn.kt");
    }

    @TestMetadata("nonLocalReturnFromInlineLambda.kt")
    public void testNonLocalReturnFromInlineLambda() {
      runTest("compiler/testData/codegen/box/coroutines/nonLocalReturnFromInlineLambda.kt");
    }

    @TestMetadata("nonLocalReturnFromInlineLambdaDeep.kt")
    public void testNonLocalReturnFromInlineLambdaDeep() {
      runTest("compiler/testData/codegen/box/coroutines/nonLocalReturnFromInlineLambdaDeep.kt");
    }

    @TestMetadata("nullableSuspendFunctionType.kt")
    public void testNullableSuspendFunctionType() {
      runTest("compiler/testData/codegen/box/coroutines/nullableSuspendFunctionType.kt");
    }

    @TestMetadata("overrideDefaultArgument.kt")
    public void testOverrideDefaultArgument() {
      runTest("compiler/testData/codegen/box/coroutines/overrideDefaultArgument.kt");
    }

    @TestMetadata("recursiveSuspend.kt")
    public void testRecursiveSuspend() {
      runTest("compiler/testData/codegen/box/coroutines/recursiveSuspend.kt");
    }

    @TestMetadata("restrictedSuspendLambda.kt")
    public void testRestrictedSuspendLambda() {
      runTest("compiler/testData/codegen/box/coroutines/restrictedSuspendLambda.kt");
    }

    @TestMetadata("returnByLabel.kt")
    public void testReturnByLabel() {
      runTest("compiler/testData/codegen/box/coroutines/returnByLabel.kt");
    }

    @TestMetadata("returnsNothing1.kt")
    public void testReturnsNothing1() {
      runTest("compiler/testData/codegen/box/coroutines/returnsNothing1.kt");
    }

    @TestMetadata("returnsUnit1.kt")
    public void testReturnsUnit1() {
      runTest("compiler/testData/codegen/box/coroutines/returnsUnit1.kt");
    }

    @TestMetadata("simple.kt")
    public void testSimple() {
      runTest("compiler/testData/codegen/box/coroutines/simple.kt");
    }

    @TestMetadata("simple2.kt")
    public void testSimple2() {
      runTest("compiler/testData/codegen/box/coroutines/simple2.kt");
    }

    @TestMetadata("simpleException.kt")
    public void testSimpleException() {
      runTest("compiler/testData/codegen/box/coroutines/simpleException.kt");
    }

    @TestMetadata("simpleSuspendCallableReference.kt")
    public void testSimpleSuspendCallableReference() {
      runTest("compiler/testData/codegen/box/coroutines/simpleSuspendCallableReference.kt");
    }

    @TestMetadata("simpleWithDefaultValue.kt")
    public void testSimpleWithDefaultValue() {
      runTest("compiler/testData/codegen/box/coroutines/simpleWithDefaultValue.kt");
    }

    @TestMetadata("simpleWithHandleResult.kt")
    public void testSimpleWithHandleResult() {
      runTest("compiler/testData/codegen/box/coroutines/simpleWithHandleResult.kt");
    }

    @TestMetadata("statementLikeLastExpression.kt")
    public void testStatementLikeLastExpression() {
      runTest("compiler/testData/codegen/box/coroutines/statementLikeLastExpression.kt");
    }

    @TestMetadata("stopAfter.kt")
    public void testStopAfter() {
      runTest("compiler/testData/codegen/box/coroutines/stopAfter.kt");
    }

    @TestMetadata("suspendCallInSuperInterfaceCallArguments.kt")
    public void testSuspendCallInSuperInterfaceCallArguments() {
      runTest("compiler/testData/codegen/box/coroutines/suspendCallInSuperInterfaceCallArguments.kt");
    }

    @TestMetadata("suspendCallsInArguments.kt")
    public void testSuspendCallsInArguments() {
      runTest("compiler/testData/codegen/box/coroutines/suspendCallsInArguments.kt");
    }

    @TestMetadata("suspendConversion.kt")
    public void testSuspendConversion() {
      runTest("compiler/testData/codegen/box/coroutines/suspendConversion.kt");
    }

    @TestMetadata("suspendCoroutineFromStateMachine.kt")
    public void testSuspendCoroutineFromStateMachine() {
      runTest("compiler/testData/codegen/box/coroutines/suspendCoroutineFromStateMachine.kt");
    }

    @TestMetadata("suspendCovariantJavaOverrides.kt")
    public void testSuspendCovariantJavaOverrides() {
      runTest("compiler/testData/codegen/box/coroutines/suspendCovariantJavaOverrides.kt");
    }

    @TestMetadata("suspendDefaultImpl.kt")
    public void testSuspendDefaultImpl() {
      runTest("compiler/testData/codegen/box/coroutines/suspendDefaultImpl.kt");
    }

    @TestMetadata("suspendDelegation.kt")
    public void testSuspendDelegation() {
      runTest("compiler/testData/codegen/box/coroutines/suspendDelegation.kt");
    }

    @TestMetadata("suspendFromInlineLambda.kt")
    public void testSuspendFromInlineLambda() {
      runTest("compiler/testData/codegen/box/coroutines/suspendFromInlineLambda.kt");
    }

    @TestMetadata("suspendFunImportedFromObject.kt")
    public void testSuspendFunImportedFromObject() {
      runTest("compiler/testData/codegen/box/coroutines/suspendFunImportedFromObject.kt");
    }

    @TestMetadata("suspendFunctionAsSupertype.kt")
    public void testSuspendFunctionAsSupertype() {
      runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsSupertype.kt");
    }

    @TestMetadata("suspendFunctionAsSupertypeCall.kt")
    public void testSuspendFunctionAsSupertypeCall() {
      runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsSupertypeCall.kt");
    }

    @TestMetadata("suspendFunctionMethodReference.kt")
    public void testSuspendFunctionMethodReference() {
      runTest("compiler/testData/codegen/box/coroutines/suspendFunctionMethodReference.kt");
    }

    @TestMetadata("suspendImplBridge.kt")
    public void testSuspendImplBridge() {
      runTest("compiler/testData/codegen/box/coroutines/suspendImplBridge.kt");
    }

    @TestMetadata("suspendImplTypeParameters.kt")
    public void testSuspendImplTypeParameters() {
      runTest("compiler/testData/codegen/box/coroutines/suspendImplTypeParameters.kt");
    }

    @TestMetadata("suspendImplTypeParametersOuterClass.kt")
    public void testSuspendImplTypeParametersOuterClass() {
      runTest("compiler/testData/codegen/box/coroutines/suspendImplTypeParametersOuterClass.kt");
    }

    @TestMetadata("suspendInCycle.kt")
    public void testSuspendInCycle() {
      runTest("compiler/testData/codegen/box/coroutines/suspendInCycle.kt");
    }

    @TestMetadata("suspendInTheMiddleOfObjectConstruction.kt")
    public void testSuspendInTheMiddleOfObjectConstruction() {
      runTest("compiler/testData/codegen/box/coroutines/suspendInTheMiddleOfObjectConstruction.kt");
    }

    @TestMetadata("suspendInTheMiddleOfObjectConstructionEvaluationOrder.kt")
    public void testSuspendInTheMiddleOfObjectConstructionEvaluationOrder() {
      runTest("compiler/testData/codegen/box/coroutines/suspendInTheMiddleOfObjectConstructionEvaluationOrder.kt");
    }

    @TestMetadata("suspendInTheMiddleOfObjectConstructionWithJumpOut.kt")
    public void testSuspendInTheMiddleOfObjectConstructionWithJumpOut() {
      runTest("compiler/testData/codegen/box/coroutines/suspendInTheMiddleOfObjectConstructionWithJumpOut.kt");
    }

    @TestMetadata("suspendInlineReference.kt")
    public void testSuspendInlineReference() {
      runTest("compiler/testData/codegen/box/coroutines/suspendInlineReference.kt");
    }

    @TestMetadata("suspendJavaOverrides.kt")
    public void testSuspendJavaOverrides() {
      runTest("compiler/testData/codegen/box/coroutines/suspendJavaOverrides.kt");
    }

    @TestMetadata("suspendLambdaInInterface.kt")
    public void testSuspendLambdaInInterface() {
      runTest("compiler/testData/codegen/box/coroutines/suspendLambdaInInterface.kt");
    }

    @TestMetadata("suspendLambdaWithArgumentRearrangement.kt")
    public void testSuspendLambdaWithArgumentRearrangement() {
      runTest("compiler/testData/codegen/box/coroutines/suspendLambdaWithArgumentRearrangement.kt");
    }

    @TestMetadata("suspendReturningPlatformType.kt")
    public void testSuspendReturningPlatformType() {
      runTest("compiler/testData/codegen/box/coroutines/suspendReturningPlatformType.kt");
    }

    @TestMetadata("suspensionInsideSafeCall.kt")
    public void testSuspensionInsideSafeCall() {
      runTest("compiler/testData/codegen/box/coroutines/suspensionInsideSafeCall.kt");
    }

    @TestMetadata("suspensionInsideSafeCallWithElvis.kt")
    public void testSuspensionInsideSafeCallWithElvis() {
      runTest("compiler/testData/codegen/box/coroutines/suspensionInsideSafeCallWithElvis.kt");
    }

    @TestMetadata("tailCallToNothing.kt")
    public void testTailCallToNothing() {
      runTest("compiler/testData/codegen/box/coroutines/tailCallToNothing.kt");
    }

    @TestMetadata("tryCatchFinallyWithHandleResult.kt")
    public void testTryCatchFinallyWithHandleResult() {
      runTest("compiler/testData/codegen/box/coroutines/tryCatchFinallyWithHandleResult.kt");
    }

    @TestMetadata("tryCatchWithHandleResult.kt")
    public void testTryCatchWithHandleResult() {
      runTest("compiler/testData/codegen/box/coroutines/tryCatchWithHandleResult.kt");
    }

    @TestMetadata("tryFinallyInsideInlineLambda.kt")
    public void testTryFinallyInsideInlineLambda() {
      runTest("compiler/testData/codegen/box/coroutines/tryFinallyInsideInlineLambda.kt");
    }

    @TestMetadata("tryFinallyWithHandleResult.kt")
    public void testTryFinallyWithHandleResult() {
      runTest("compiler/testData/codegen/box/coroutines/tryFinallyWithHandleResult.kt");
    }

    @TestMetadata("varCaptuedInCoroutineIntrinsic.kt")
    public void testVarCaptuedInCoroutineIntrinsic() {
      runTest("compiler/testData/codegen/box/coroutines/varCaptuedInCoroutineIntrinsic.kt");
    }

    @TestMetadata("varValueConflictsWithTable.kt")
    public void testVarValueConflictsWithTable() {
      runTest("compiler/testData/codegen/box/coroutines/varValueConflictsWithTable.kt");
    }

    @TestMetadata("varValueConflictsWithTableSameSort.kt")
    public void testVarValueConflictsWithTableSameSort() {
      runTest("compiler/testData/codegen/box/coroutines/varValueConflictsWithTableSameSort.kt");
    }

    @TestMetadata("varargCallFromSuspend.kt")
    public void testVarargCallFromSuspend() {
      runTest("compiler/testData/codegen/box/coroutines/varargCallFromSuspend.kt");
    }

    @TestMetadata("withReceiver.kt")
    public void testWithReceiver() {
      runTest("compiler/testData/codegen/box/coroutines/withReceiver.kt");
    }

    @TestMetadata("compiler/testData/codegen/box/coroutines/bridges")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Bridges extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInBridges() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/bridges"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("interfaceGenericDefault.kt")
      public void testInterfaceGenericDefault() {
        runTest("compiler/testData/codegen/box/coroutines/bridges/interfaceGenericDefault.kt");
      }

      @TestMetadata("interfaceSpecialization.kt")
      public void testInterfaceSpecialization() {
        runTest("compiler/testData/codegen/box/coroutines/bridges/interfaceSpecialization.kt");
      }

      @TestMetadata("lambdaWithLongReceiver.kt")
      public void testLambdaWithLongReceiver() {
        runTest("compiler/testData/codegen/box/coroutines/bridges/lambdaWithLongReceiver.kt");
      }

      @TestMetadata("lambdaWithMultipleParameters.kt")
      public void testLambdaWithMultipleParameters() {
        runTest("compiler/testData/codegen/box/coroutines/bridges/lambdaWithMultipleParameters.kt");
      }

      @TestMetadata("mapSuspendAbstractClear.kt")
      public void testMapSuspendAbstractClear() {
        runTest("compiler/testData/codegen/box/coroutines/bridges/mapSuspendAbstractClear.kt");
      }

      @TestMetadata("mapSuspendClear.kt")
      public void testMapSuspendClear() {
        runTest("compiler/testData/codegen/box/coroutines/bridges/mapSuspendClear.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/coroutines/controlFlow")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ControlFlow extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInControlFlow() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/controlFlow"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("breakFinally.kt")
      public void testBreakFinally() {
        runTest("compiler/testData/codegen/box/coroutines/controlFlow/breakFinally.kt");
      }

      @TestMetadata("breakStatement.kt")
      public void testBreakStatement() {
        runTest("compiler/testData/codegen/box/coroutines/controlFlow/breakStatement.kt");
      }

      @TestMetadata("complexChainSuspend.kt")
      public void testComplexChainSuspend() {
        runTest("compiler/testData/codegen/box/coroutines/controlFlow/complexChainSuspend.kt");
      }

      @TestMetadata("doWhileStatement.kt")
      public void testDoWhileStatement() {
        runTest("compiler/testData/codegen/box/coroutines/controlFlow/doWhileStatement.kt");
      }

      @TestMetadata("doWhileWithInline.kt")
      public void testDoWhileWithInline() {
        runTest("compiler/testData/codegen/box/coroutines/controlFlow/doWhileWithInline.kt");
      }

      @TestMetadata("doubleBreak.kt")
      public void testDoubleBreak() {
        runTest("compiler/testData/codegen/box/coroutines/controlFlow/doubleBreak.kt");
      }

      @TestMetadata("finallyCatch.kt")
      public void testFinallyCatch() {
        runTest("compiler/testData/codegen/box/coroutines/controlFlow/finallyCatch.kt");
      }

      @TestMetadata("forContinue.kt")
      public void testForContinue() {
        runTest("compiler/testData/codegen/box/coroutines/controlFlow/forContinue.kt");
      }

      @TestMetadata("forStatement.kt")
      public void testForStatement() {
        runTest("compiler/testData/codegen/box/coroutines/controlFlow/forStatement.kt");
      }

      @TestMetadata("forWithStep.kt")
      public void testForWithStep() {
        runTest("compiler/testData/codegen/box/coroutines/controlFlow/forWithStep.kt");
      }

      @TestMetadata("ifStatement.kt")
      public void testIfStatement() {
        runTest("compiler/testData/codegen/box/coroutines/controlFlow/ifStatement.kt");
      }

      @TestMetadata("kt22694_1_3.kt")
      public void testKt22694_1_3() {
        runTest("compiler/testData/codegen/box/coroutines/controlFlow/kt22694_1_3.kt");
      }

      @TestMetadata("labeledWhile.kt")
      public void testLabeledWhile() {
        runTest("compiler/testData/codegen/box/coroutines/controlFlow/labeledWhile.kt");
      }

      @TestMetadata("multipleCatchBlocksSuspend.kt")
      public void testMultipleCatchBlocksSuspend() {
        runTest("compiler/testData/codegen/box/coroutines/controlFlow/multipleCatchBlocksSuspend.kt");
      }

      @TestMetadata("returnFromFinally.kt")
      public void testReturnFromFinally() {
        runTest("compiler/testData/codegen/box/coroutines/controlFlow/returnFromFinally.kt");
      }

      @TestMetadata("returnWithFinally.kt")
      public void testReturnWithFinally() {
        runTest("compiler/testData/codegen/box/coroutines/controlFlow/returnWithFinally.kt");
      }

      @TestMetadata("suspendInStringTemplate.kt")
      public void testSuspendInStringTemplate() {
        runTest("compiler/testData/codegen/box/coroutines/controlFlow/suspendInStringTemplate.kt");
      }

      @TestMetadata("switchLikeWhen.kt")
      public void testSwitchLikeWhen() {
        runTest("compiler/testData/codegen/box/coroutines/controlFlow/switchLikeWhen.kt");
      }

      @TestMetadata("throwFromCatch.kt")
      public void testThrowFromCatch() {
        runTest("compiler/testData/codegen/box/coroutines/controlFlow/throwFromCatch.kt");
      }

      @TestMetadata("throwFromFinally.kt")
      public void testThrowFromFinally() {
        runTest("compiler/testData/codegen/box/coroutines/controlFlow/throwFromFinally.kt");
      }

      @TestMetadata("throwInTryWithHandleResult.kt")
      public void testThrowInTryWithHandleResult() {
        runTest("compiler/testData/codegen/box/coroutines/controlFlow/throwInTryWithHandleResult.kt");
      }

      @TestMetadata("whenWithSuspensions.kt")
      public void testWhenWithSuspensions() {
        runTest("compiler/testData/codegen/box/coroutines/controlFlow/whenWithSuspensions.kt");
      }

      @TestMetadata("whileStatement.kt")
      public void testWhileStatement() {
        runTest("compiler/testData/codegen/box/coroutines/controlFlow/whileStatement.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/coroutines/debug")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Debug extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInDebug() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/debug"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("debuggerMetadata.kt")
      public void testDebuggerMetadata() {
        runTest("compiler/testData/codegen/box/coroutines/debug/debuggerMetadata.kt");
      }

      @TestMetadata("elvisLineNumber.kt")
      public void testElvisLineNumber() {
        runTest("compiler/testData/codegen/box/coroutines/debug/elvisLineNumber.kt");
      }

      @TestMetadata("firstSuspensionPoint.kt")
      public void testFirstSuspensionPoint() {
        runTest("compiler/testData/codegen/box/coroutines/debug/firstSuspensionPoint.kt");
      }

      @TestMetadata("fqName.kt")
      public void testFqName() {
        runTest("compiler/testData/codegen/box/coroutines/debug/fqName.kt");
      }

      @TestMetadata("multipleSuspendCallsOnSameLine.kt")
      public void testMultipleSuspendCallsOnSameLine() {
        runTest("compiler/testData/codegen/box/coroutines/debug/multipleSuspendCallsOnSameLine.kt");
      }

      @TestMetadata("runtimeDebugMetadata.kt")
      public void testRuntimeDebugMetadata() {
        runTest("compiler/testData/codegen/box/coroutines/debug/runtimeDebugMetadata.kt");
      }

      @TestMetadata("throwsOnSameLine.kt")
      public void testThrowsOnSameLine() {
        runTest("compiler/testData/codegen/box/coroutines/debug/throwsOnSameLine.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/coroutines/featureIntersection")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class FeatureIntersection extends AbstractLightAnalysisModeTest {
      @TestMetadata("suspendFunctionAsSupertypeIsCheckWithArity.kt")
      public void ignoreSuspendFunctionAsSupertypeIsCheckWithArity() {
        runTest("compiler/testData/codegen/box/coroutines/featureIntersection/suspendFunctionAsSupertypeIsCheckWithArity.kt");
      }

      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInFeatureIntersection() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/featureIntersection"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("breakWithNonEmptyStack.kt")
      public void testBreakWithNonEmptyStack() {
        runTest("compiler/testData/codegen/box/coroutines/featureIntersection/breakWithNonEmptyStack.kt");
      }

      @TestMetadata("defaultExpect.kt")
      public void testDefaultExpect() {
        runTest("compiler/testData/codegen/box/coroutines/featureIntersection/defaultExpect.kt");
      }

      @TestMetadata("delegate.kt")
      public void testDelegate() {
        runTest("compiler/testData/codegen/box/coroutines/featureIntersection/delegate.kt");
      }

      @TestMetadata("destructuringInLambdas.kt")
      public void testDestructuringInLambdas() {
        runTest("compiler/testData/codegen/box/coroutines/featureIntersection/destructuringInLambdas.kt");
      }

      @TestMetadata("funInterface.kt")
      public void testFunInterface() {
        runTest("compiler/testData/codegen/box/coroutines/featureIntersection/funInterface.kt");
      }

      @TestMetadata("inlineSuspendFinally.kt")
      public void testInlineSuspendFinally() {
        runTest("compiler/testData/codegen/box/coroutines/featureIntersection/inlineSuspendFinally.kt");
      }

      @TestMetadata("interfaceMethodWithBody.kt")
      public void testInterfaceMethodWithBody() {
        runTest("compiler/testData/codegen/box/coroutines/featureIntersection/interfaceMethodWithBody.kt");
      }

      @TestMetadata("interfaceMethodWithBodyGeneric.kt")
      public void testInterfaceMethodWithBodyGeneric() {
        runTest("compiler/testData/codegen/box/coroutines/featureIntersection/interfaceMethodWithBodyGeneric.kt");
      }

      @TestMetadata("overrideInInlineClass.kt")
      public void testOverrideInInlineClass() {
        runTest("compiler/testData/codegen/box/coroutines/featureIntersection/overrideInInlineClass.kt");
      }

      @TestMetadata("overrideInInnerClass.kt")
      public void testOverrideInInnerClass() {
        runTest("compiler/testData/codegen/box/coroutines/featureIntersection/overrideInInnerClass.kt");
      }

      @TestMetadata("safeCallOnTwoReceivers.kt")
      public void testSafeCallOnTwoReceivers() {
        runTest("compiler/testData/codegen/box/coroutines/featureIntersection/safeCallOnTwoReceivers.kt");
      }

      @TestMetadata("safeCallOnTwoReceiversLong.kt")
      public void testSafeCallOnTwoReceiversLong() {
        runTest("compiler/testData/codegen/box/coroutines/featureIntersection/safeCallOnTwoReceiversLong.kt");
      }

      @TestMetadata("suspendDestructuringInLambdas.kt")
      public void testSuspendDestructuringInLambdas() {
        runTest("compiler/testData/codegen/box/coroutines/featureIntersection/suspendDestructuringInLambdas.kt");
      }

      @TestMetadata("suspendFunctionAsSupertypeIsCheck.kt")
      public void testSuspendFunctionAsSupertypeIsCheck() {
        runTest("compiler/testData/codegen/box/coroutines/featureIntersection/suspendFunctionAsSupertypeIsCheck.kt");
      }

      @TestMetadata("suspendFunctionIsAs.kt")
      public void testSuspendFunctionIsAs() {
        runTest("compiler/testData/codegen/box/coroutines/featureIntersection/suspendFunctionIsAs.kt");
      }

      @TestMetadata("suspendInlineSuspendFinally.kt")
      public void testSuspendInlineSuspendFinally() {
        runTest("compiler/testData/codegen/box/coroutines/featureIntersection/suspendInlineSuspendFinally.kt");
      }

      @TestMetadata("suspendOperatorPlus.kt")
      public void testSuspendOperatorPlus() {
        runTest("compiler/testData/codegen/box/coroutines/featureIntersection/suspendOperatorPlus.kt");
      }

      @TestMetadata("suspendOperatorPlusAssign.kt")
      public void testSuspendOperatorPlusAssign() {
        runTest("compiler/testData/codegen/box/coroutines/featureIntersection/suspendOperatorPlusAssign.kt");
      }

      @TestMetadata("suspendOperatorPlusCallFromLambda.kt")
      public void testSuspendOperatorPlusCallFromLambda() {
        runTest("compiler/testData/codegen/box/coroutines/featureIntersection/suspendOperatorPlusCallFromLambda.kt");
      }

      @TestMetadata("compiler/testData/codegen/box/coroutines/featureIntersection/callableReference")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class CallableReference extends AbstractLightAnalysisModeTest {
        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        public void testAllFilesPresentInCallableReference() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/featureIntersection/callableReference"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("bigArity.kt")
        public void testBigArity() {
          runTest("compiler/testData/codegen/box/coroutines/featureIntersection/callableReference/bigArity.kt");
        }

        @TestMetadata("fromJava.kt")
        public void testFromJava() {
          runTest("compiler/testData/codegen/box/coroutines/featureIntersection/callableReference/fromJava.kt");
        }

        @TestMetadata("kt48732_genericSignature.kt")
        public void testKt48732_genericSignature() {
          runTest("compiler/testData/codegen/box/coroutines/featureIntersection/callableReference/kt48732_genericSignature.kt");
        }

        @TestMetadata("lambdaParameterUsed.kt")
        public void testLambdaParameterUsed() {
          runTest("compiler/testData/codegen/box/coroutines/featureIntersection/callableReference/lambdaParameterUsed.kt");
        }

        @TestMetadata("longArgs.kt")
        public void testLongArgs() {
          runTest("compiler/testData/codegen/box/coroutines/featureIntersection/callableReference/longArgs.kt");
        }

        @TestMetadata("compiler/testData/codegen/box/coroutines/featureIntersection/callableReference/bound")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Bound extends AbstractLightAnalysisModeTest {
          private void runTest(String testDataFilePath) {
            KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
          }

          public void testAllFilesPresentInBound() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/featureIntersection/callableReference/bound"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }

          @TestMetadata("emptyLHS.kt")
          public void testEmptyLHS() {
            runTest("compiler/testData/codegen/box/coroutines/featureIntersection/callableReference/bound/emptyLHS.kt");
          }
        }

        @TestMetadata("compiler/testData/codegen/box/coroutines/featureIntersection/callableReference/function")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Function extends AbstractLightAnalysisModeTest {
          private void runTest(String testDataFilePath) {
            KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
          }

          @TestMetadata("adapted.kt")
          public void testAdapted() {
            runTest("compiler/testData/codegen/box/coroutines/featureIntersection/callableReference/function/adapted.kt");
          }

          public void testAllFilesPresentInFunction() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/featureIntersection/callableReference/function"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }

          @TestMetadata("genericCallableReferenceArguments.kt")
          public void testGenericCallableReferenceArguments() {
            runTest("compiler/testData/codegen/box/coroutines/featureIntersection/callableReference/function/genericCallableReferenceArguments.kt");
          }

          @TestMetadata("genericCallableReferencesWithNullableTypes.kt")
          public void testGenericCallableReferencesWithNullableTypes() {
            runTest("compiler/testData/codegen/box/coroutines/featureIntersection/callableReference/function/genericCallableReferencesWithNullableTypes.kt");
          }

          @TestMetadata("getArityViaFunctionImpl.kt")
          public void testGetArityViaFunctionImpl() {
            runTest("compiler/testData/codegen/box/coroutines/featureIntersection/callableReference/function/getArityViaFunctionImpl.kt");
          }

          @TestMetadata("compiler/testData/codegen/box/coroutines/featureIntersection/callableReference/function/local")
          @TestDataPath("$PROJECT_ROOT")
          @RunWith(JUnit3RunnerWithInners.class)
          public static class Local extends AbstractLightAnalysisModeTest {
            private void runTest(String testDataFilePath) {
              KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
            }

            public void testAllFilesPresentInLocal() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/featureIntersection/callableReference/function/local"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }

            @TestMetadata("equalsHashCode.kt")
            public void testEqualsHashCode() {
              runTest("compiler/testData/codegen/box/coroutines/featureIntersection/callableReference/function/local/equalsHashCode.kt");
            }
          }
        }
      }

      @TestMetadata("compiler/testData/codegen/box/coroutines/featureIntersection/funInterface")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class FunInterface extends AbstractLightAnalysisModeTest {
        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        public void testAllFilesPresentInFunInterface() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/featureIntersection/funInterface"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("kt47549.kt")
        public void testKt47549() {
          runTest("compiler/testData/codegen/box/coroutines/featureIntersection/funInterface/kt47549.kt");
        }

        @TestMetadata("kt47549_1.kt")
        public void testKt47549_1() {
          runTest("compiler/testData/codegen/box/coroutines/featureIntersection/funInterface/kt47549_1.kt");
        }

        @TestMetadata("kt49294.kt")
        public void testKt49294() {
          runTest("compiler/testData/codegen/box/coroutines/featureIntersection/funInterface/kt49294.kt");
        }

        @TestMetadata("kt50950.kt")
        public void testKt50950() {
          runTest("compiler/testData/codegen/box/coroutines/featureIntersection/funInterface/kt50950.kt");
        }
      }

      @TestMetadata("compiler/testData/codegen/box/coroutines/featureIntersection/jvmDefault")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class JvmDefault extends AbstractLightAnalysisModeTest {
        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        @TestMetadata("all.kt")
        public void testAll() {
          runTest("compiler/testData/codegen/box/coroutines/featureIntersection/jvmDefault/all.kt");
        }

        public void testAllFilesPresentInJvmDefault() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/featureIntersection/jvmDefault"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("compiler/testData/codegen/box/coroutines/featureIntersection/jvmDefault/kt46007")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Kt46007 extends AbstractLightAnalysisModeTest {
          private void runTest(String testDataFilePath) {
            KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
          }

          @TestMetadata("all.kt")
          public void testAll() {
            runTest("compiler/testData/codegen/box/coroutines/featureIntersection/jvmDefault/kt46007/all.kt");
          }

          public void testAllFilesPresentInKt46007() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/featureIntersection/jvmDefault/kt46007"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }

          @TestMetadata("all-compatibility.kt")
          public void testAll_compatibility() {
            runTest("compiler/testData/codegen/box/coroutines/featureIntersection/jvmDefault/kt46007/all-compatibility.kt");
          }

          @TestMetadata("disable.kt")
          public void testDisable() {
            runTest("compiler/testData/codegen/box/coroutines/featureIntersection/jvmDefault/kt46007/disable.kt");
          }
        }
      }

      @TestMetadata("compiler/testData/codegen/box/coroutines/featureIntersection/tailrec")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class Tailrec extends AbstractLightAnalysisModeTest {
        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        public void testAllFilesPresentInTailrec() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/featureIntersection/tailrec"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("controlFlowIf.kt")
        public void testControlFlowIf() {
          runTest("compiler/testData/codegen/box/coroutines/featureIntersection/tailrec/controlFlowIf.kt");
        }

        @TestMetadata("controlFlowWhen.kt")
        public void testControlFlowWhen() {
          runTest("compiler/testData/codegen/box/coroutines/featureIntersection/tailrec/controlFlowWhen.kt");
        }

        @TestMetadata("extention.kt")
        public void testExtention() {
          runTest("compiler/testData/codegen/box/coroutines/featureIntersection/tailrec/extention.kt");
        }

        @TestMetadata("infixCall.kt")
        public void testInfixCall() {
          runTest("compiler/testData/codegen/box/coroutines/featureIntersection/tailrec/infixCall.kt");
        }

        @TestMetadata("infixRecursiveCall.kt")
        public void testInfixRecursiveCall() {
          runTest("compiler/testData/codegen/box/coroutines/featureIntersection/tailrec/infixRecursiveCall.kt");
        }

        @TestMetadata("kt38920_localTailrec.kt")
        public void testKt38920_localTailrec() {
          runTest("compiler/testData/codegen/box/coroutines/featureIntersection/tailrec/kt38920_localTailrec.kt");
        }

        @TestMetadata("realIteratorFoldl.kt")
        public void testRealIteratorFoldl() {
          runTest("compiler/testData/codegen/box/coroutines/featureIntersection/tailrec/realIteratorFoldl.kt");
        }

        @TestMetadata("realStringEscape.kt")
        public void testRealStringEscape() {
          runTest("compiler/testData/codegen/box/coroutines/featureIntersection/tailrec/realStringEscape.kt");
        }

        @TestMetadata("realStringRepeat.kt")
        public void testRealStringRepeat() {
          runTest("compiler/testData/codegen/box/coroutines/featureIntersection/tailrec/realStringRepeat.kt");
        }

        @TestMetadata("returnInParentheses.kt")
        public void testReturnInParentheses() {
          runTest("compiler/testData/codegen/box/coroutines/featureIntersection/tailrec/returnInParentheses.kt");
        }

        @TestMetadata("sum.kt")
        public void testSum() {
          runTest("compiler/testData/codegen/box/coroutines/featureIntersection/tailrec/sum.kt");
        }

        @TestMetadata("tailCallInBlockInParentheses.kt")
        public void testTailCallInBlockInParentheses() {
          runTest("compiler/testData/codegen/box/coroutines/featureIntersection/tailrec/tailCallInBlockInParentheses.kt");
        }

        @TestMetadata("tailCallInParentheses.kt")
        public void testTailCallInParentheses() {
          runTest("compiler/testData/codegen/box/coroutines/featureIntersection/tailrec/tailCallInParentheses.kt");
        }

        @TestMetadata("whenWithIs.kt")
        public void testWhenWithIs() {
          runTest("compiler/testData/codegen/box/coroutines/featureIntersection/tailrec/whenWithIs.kt");
        }
      }
    }

    @TestMetadata("compiler/testData/codegen/box/coroutines/inlineClasses")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class InlineClasses extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInInlineClasses() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/inlineClasses"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("genericParameterResult.kt")
      public void testGenericParameterResult() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/genericParameterResult.kt");
      }

      @TestMetadata("kt47129.kt")
      public void testKt47129() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/kt47129.kt");
      }

      @TestMetadata("nonLocalReturn.kt")
      public void testNonLocalReturn() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/nonLocalReturn.kt");
      }

      @TestMetadata("compiler/testData/codegen/box/coroutines/inlineClasses/direct")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class Direct extends AbstractLightAnalysisModeTest {
        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        public void testAllFilesPresentInDirect() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/inlineClasses/direct"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("boxReturnValueOfSuspendFunctionReference.kt")
        public void testBoxReturnValueOfSuspendFunctionReference() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/boxReturnValueOfSuspendFunctionReference.kt");
        }

        @TestMetadata("boxReturnValueOfSuspendLambda.kt")
        public void testBoxReturnValueOfSuspendLambda() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/boxReturnValueOfSuspendLambda.kt");
        }

        @TestMetadata("boxTypeParameterOfSuperType.kt")
        public void testBoxTypeParameterOfSuperType() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/boxTypeParameterOfSuperType.kt");
        }

        @TestMetadata("boxTypeParameterOfSuperTypeResult.kt")
        public void testBoxTypeParameterOfSuperTypeResult() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/boxTypeParameterOfSuperTypeResult.kt");
        }

        @TestMetadata("boxUnboxInsideCoroutine.kt")
        public void testBoxUnboxInsideCoroutine() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/boxUnboxInsideCoroutine.kt");
        }

        @TestMetadata("boxUnboxInsideCoroutine_Any.kt")
        public void testBoxUnboxInsideCoroutine_Any() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/boxUnboxInsideCoroutine_Any.kt");
        }

        @TestMetadata("boxUnboxInsideCoroutine_InlineAny.kt")
        public void testBoxUnboxInsideCoroutine_InlineAny() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/boxUnboxInsideCoroutine_InlineAny.kt");
        }

        @TestMetadata("boxUnboxInsideCoroutine_InlineInt.kt")
        public void testBoxUnboxInsideCoroutine_InlineInt() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/boxUnboxInsideCoroutine_InlineInt.kt");
        }

        @TestMetadata("boxUnboxInsideCoroutine_Int.kt")
        public void testBoxUnboxInsideCoroutine_Int() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/boxUnboxInsideCoroutine_Int.kt");
        }

        @TestMetadata("boxUnboxInsideCoroutine_Long.kt")
        public void testBoxUnboxInsideCoroutine_Long() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/boxUnboxInsideCoroutine_Long.kt");
        }

        @TestMetadata("boxUnboxInsideCoroutine_NAny.kt")
        public void testBoxUnboxInsideCoroutine_NAny() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/boxUnboxInsideCoroutine_NAny.kt");
        }

        @TestMetadata("boxUnboxInsideCoroutine_nonLocalReturn.kt")
        public void testBoxUnboxInsideCoroutine_nonLocalReturn() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/boxUnboxInsideCoroutine_nonLocalReturn.kt");
        }

        @TestMetadata("boxUnboxInsideCoroutine_suspendFunType.kt")
        public void testBoxUnboxInsideCoroutine_suspendFunType() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/boxUnboxInsideCoroutine_suspendFunType.kt");
        }

        @TestMetadata("bridgeGenerationCrossinline.kt")
        public void testBridgeGenerationCrossinline() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/bridgeGenerationCrossinline.kt");
        }

        @TestMetadata("bridgeGenerationNonInline.kt")
        public void testBridgeGenerationNonInline() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/bridgeGenerationNonInline.kt");
        }

        @TestMetadata("covariantOverrideSuspendFun.kt")
        public void testCovariantOverrideSuspendFun() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/covariantOverrideSuspendFun.kt");
        }

        @TestMetadata("covariantOverrideSuspendFunSameJvmType.kt")
        public void testCovariantOverrideSuspendFunSameJvmType() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/covariantOverrideSuspendFunSameJvmType.kt");
        }

        @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass.kt")
        public void testCovariantOverrideSuspendFunWithNullableInlineClass() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/covariantOverrideSuspendFunWithNullableInlineClass.kt");
        }

        @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClassSameJvmType.kt")
        public void testCovariantOverrideSuspendFunWithNullableInlineClassSameJvmType() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/covariantOverrideSuspendFunWithNullableInlineClassSameJvmType.kt");
        }

        @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass_Any.kt")
        public void testCovariantOverrideSuspendFunWithNullableInlineClass_Any() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/covariantOverrideSuspendFunWithNullableInlineClass_Any.kt");
        }

        @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass_Int.kt")
        public void testCovariantOverrideSuspendFunWithNullableInlineClass_Int() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/covariantOverrideSuspendFunWithNullableInlineClass_Int.kt");
        }

        @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass_NullableAny.kt")
        public void testCovariantOverrideSuspendFunWithNullableInlineClass_NullableAny() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/covariantOverrideSuspendFunWithNullableInlineClass_NullableAny.kt");
        }

        @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass_NullableAny_null.kt")
        public void testCovariantOverrideSuspendFunWithNullableInlineClass_NullableAny_null() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/covariantOverrideSuspendFunWithNullableInlineClass_NullableAny_null.kt");
        }

        @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass_NullableInt.kt")
        public void testCovariantOverrideSuspendFunWithNullableInlineClass_NullableInt() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/covariantOverrideSuspendFunWithNullableInlineClass_NullableInt.kt");
        }

        @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass_NullableInt_null.kt")
        public void testCovariantOverrideSuspendFunWithNullableInlineClass_NullableInt_null() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/covariantOverrideSuspendFunWithNullableInlineClass_NullableInt_null.kt");
        }

        @TestMetadata("covariantOverrideSuspendFun_Any.kt")
        public void testCovariantOverrideSuspendFun_Any() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/covariantOverrideSuspendFun_Any.kt");
        }

        @TestMetadata("covariantOverrideSuspendFun_Int.kt")
        public void testCovariantOverrideSuspendFun_Int() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/covariantOverrideSuspendFun_Int.kt");
        }

        @TestMetadata("createMangling.kt")
        public void testCreateMangling() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/createMangling.kt");
        }

        @TestMetadata("createOverride.kt")
        public void testCreateOverride() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/createOverride.kt");
        }

        @TestMetadata("defaultStub.kt")
        public void testDefaultStub() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/defaultStub.kt");
        }

        @TestMetadata("genericOverrideSuspendFun.kt")
        public void testGenericOverrideSuspendFun() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/genericOverrideSuspendFun.kt");
        }

        @TestMetadata("genericOverrideSuspendFun_Any.kt")
        public void testGenericOverrideSuspendFun_Any() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/genericOverrideSuspendFun_Any.kt");
        }

        @TestMetadata("genericOverrideSuspendFun_Any_NullableInlineClassUpperBound.kt")
        public void testGenericOverrideSuspendFun_Any_NullableInlineClassUpperBound() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/genericOverrideSuspendFun_Any_NullableInlineClassUpperBound.kt");
        }

        @TestMetadata("genericOverrideSuspendFun_Int.kt")
        public void testGenericOverrideSuspendFun_Int() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/genericOverrideSuspendFun_Int.kt");
        }

        @TestMetadata("genericOverrideSuspendFun_NullableAny.kt")
        public void testGenericOverrideSuspendFun_NullableAny() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/genericOverrideSuspendFun_NullableAny.kt");
        }

        @TestMetadata("genericOverrideSuspendFun_NullableAny_null.kt")
        public void testGenericOverrideSuspendFun_NullableAny_null() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/genericOverrideSuspendFun_NullableAny_null.kt");
        }

        @TestMetadata("genericOverrideSuspendFun_NullableInt.kt")
        public void testGenericOverrideSuspendFun_NullableInt() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/genericOverrideSuspendFun_NullableInt.kt");
        }

        @TestMetadata("genericOverrideSuspendFun_NullableInt_null.kt")
        public void testGenericOverrideSuspendFun_NullableInt_null() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/genericOverrideSuspendFun_NullableInt_null.kt");
        }

        @TestMetadata("interfaceDelegateWithInlineClass.kt")
        public void testInterfaceDelegateWithInlineClass() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/interfaceDelegateWithInlineClass.kt");
        }

        @TestMetadata("invokeOperator.kt")
        public void testInvokeOperator() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/invokeOperator.kt");
        }

        @TestMetadata("multifileBridge.kt")
        public void testMultifileBridge() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/multifileBridge.kt");
        }

        @TestMetadata("overrideSuspendFun.kt")
        public void testOverrideSuspendFun() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/overrideSuspendFun.kt");
        }

        @TestMetadata("overrideSuspendFun_Any.kt")
        public void testOverrideSuspendFun_Any() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/overrideSuspendFun_Any.kt");
        }

        @TestMetadata("overrideSuspendFun_Any_itf.kt")
        public void testOverrideSuspendFun_Any_itf() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/overrideSuspendFun_Any_itf.kt");
        }

        @TestMetadata("overrideSuspendFun_Any_this.kt")
        public void testOverrideSuspendFun_Any_this() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/overrideSuspendFun_Any_this.kt");
        }

        @TestMetadata("overrideSuspendFun_Int.kt")
        public void testOverrideSuspendFun_Int() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/overrideSuspendFun_Int.kt");
        }

        @TestMetadata("returnResult.kt")
        public void testReturnResult() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/returnResult.kt");
        }

        @TestMetadata("syntheticAccessor.kt")
        public void testSyntheticAccessor() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/syntheticAccessor.kt");
        }
      }

      @TestMetadata("compiler/testData/codegen/box/coroutines/inlineClasses/resume")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class Resume extends AbstractLightAnalysisModeTest {
        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        public void testAllFilesPresentInResume() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/inlineClasses/resume"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("boxReturnValueOfSuspendFunctionReference.kt")
        public void testBoxReturnValueOfSuspendFunctionReference() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/boxReturnValueOfSuspendFunctionReference.kt");
        }

        @TestMetadata("boxReturnValueOfSuspendLambda.kt")
        public void testBoxReturnValueOfSuspendLambda() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/boxReturnValueOfSuspendLambda.kt");
        }

        @TestMetadata("boxTypeParameterOfSuperType.kt")
        public void testBoxTypeParameterOfSuperType() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/boxTypeParameterOfSuperType.kt");
        }

        @TestMetadata("boxTypeParameterOfSuperTypeResult.kt")
        public void testBoxTypeParameterOfSuperTypeResult() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/boxTypeParameterOfSuperTypeResult.kt");
        }

        @TestMetadata("boxUnboxInsideCoroutine.kt")
        public void testBoxUnboxInsideCoroutine() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/boxUnboxInsideCoroutine.kt");
        }

        @TestMetadata("boxUnboxInsideCoroutine_Any.kt")
        public void testBoxUnboxInsideCoroutine_Any() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/boxUnboxInsideCoroutine_Any.kt");
        }

        @TestMetadata("boxUnboxInsideCoroutine_InlineAny.kt")
        public void testBoxUnboxInsideCoroutine_InlineAny() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/boxUnboxInsideCoroutine_InlineAny.kt");
        }

        @TestMetadata("boxUnboxInsideCoroutine_InlineInt.kt")
        public void testBoxUnboxInsideCoroutine_InlineInt() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/boxUnboxInsideCoroutine_InlineInt.kt");
        }

        @TestMetadata("boxUnboxInsideCoroutine_Int.kt")
        public void testBoxUnboxInsideCoroutine_Int() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/boxUnboxInsideCoroutine_Int.kt");
        }

        @TestMetadata("boxUnboxInsideCoroutine_Long.kt")
        public void testBoxUnboxInsideCoroutine_Long() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/boxUnboxInsideCoroutine_Long.kt");
        }

        @TestMetadata("boxUnboxInsideCoroutine_NAny.kt")
        public void testBoxUnboxInsideCoroutine_NAny() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/boxUnboxInsideCoroutine_NAny.kt");
        }

        @TestMetadata("boxUnboxInsideCoroutine_nonLocalReturn.kt")
        public void testBoxUnboxInsideCoroutine_nonLocalReturn() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/boxUnboxInsideCoroutine_nonLocalReturn.kt");
        }

        @TestMetadata("boxUnboxInsideCoroutine_suspendFunType.kt")
        public void testBoxUnboxInsideCoroutine_suspendFunType() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/boxUnboxInsideCoroutine_suspendFunType.kt");
        }

        @TestMetadata("bridgeGenerationCrossinline.kt")
        public void testBridgeGenerationCrossinline() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/bridgeGenerationCrossinline.kt");
        }

        @TestMetadata("bridgeGenerationNonInline.kt")
        public void testBridgeGenerationNonInline() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/bridgeGenerationNonInline.kt");
        }

        @TestMetadata("covariantOverrideSuspendFun.kt")
        public void testCovariantOverrideSuspendFun() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/covariantOverrideSuspendFun.kt");
        }

        @TestMetadata("covariantOverrideSuspendFunSameJvmType.kt")
        public void testCovariantOverrideSuspendFunSameJvmType() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/covariantOverrideSuspendFunSameJvmType.kt");
        }

        @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass.kt")
        public void testCovariantOverrideSuspendFunWithNullableInlineClass() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/covariantOverrideSuspendFunWithNullableInlineClass.kt");
        }

        @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClassSameJvmType.kt")
        public void testCovariantOverrideSuspendFunWithNullableInlineClassSameJvmType() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/covariantOverrideSuspendFunWithNullableInlineClassSameJvmType.kt");
        }

        @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass_Any.kt")
        public void testCovariantOverrideSuspendFunWithNullableInlineClass_Any() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/covariantOverrideSuspendFunWithNullableInlineClass_Any.kt");
        }

        @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass_Int.kt")
        public void testCovariantOverrideSuspendFunWithNullableInlineClass_Int() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/covariantOverrideSuspendFunWithNullableInlineClass_Int.kt");
        }

        @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass_NullableAny.kt")
        public void testCovariantOverrideSuspendFunWithNullableInlineClass_NullableAny() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/covariantOverrideSuspendFunWithNullableInlineClass_NullableAny.kt");
        }

        @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass_NullableAny_null.kt")
        public void testCovariantOverrideSuspendFunWithNullableInlineClass_NullableAny_null() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/covariantOverrideSuspendFunWithNullableInlineClass_NullableAny_null.kt");
        }

        @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass_NullableInt.kt")
        public void testCovariantOverrideSuspendFunWithNullableInlineClass_NullableInt() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/covariantOverrideSuspendFunWithNullableInlineClass_NullableInt.kt");
        }

        @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass_NullableInt_null.kt")
        public void testCovariantOverrideSuspendFunWithNullableInlineClass_NullableInt_null() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/covariantOverrideSuspendFunWithNullableInlineClass_NullableInt_null.kt");
        }

        @TestMetadata("covariantOverrideSuspendFun_Any.kt")
        public void testCovariantOverrideSuspendFun_Any() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/covariantOverrideSuspendFun_Any.kt");
        }

        @TestMetadata("covariantOverrideSuspendFun_Int.kt")
        public void testCovariantOverrideSuspendFun_Int() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/covariantOverrideSuspendFun_Int.kt");
        }

        @TestMetadata("createMangling.kt")
        public void testCreateMangling() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/createMangling.kt");
        }

        @TestMetadata("createOverride.kt")
        public void testCreateOverride() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/createOverride.kt");
        }

        @TestMetadata("defaultStub.kt")
        public void testDefaultStub() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/defaultStub.kt");
        }

        @TestMetadata("genericOverrideSuspendFun.kt")
        public void testGenericOverrideSuspendFun() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/genericOverrideSuspendFun.kt");
        }

        @TestMetadata("genericOverrideSuspendFun_Any.kt")
        public void testGenericOverrideSuspendFun_Any() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/genericOverrideSuspendFun_Any.kt");
        }

        @TestMetadata("genericOverrideSuspendFun_Any_NullableInlineClassUpperBound.kt")
        public void testGenericOverrideSuspendFun_Any_NullableInlineClassUpperBound() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/genericOverrideSuspendFun_Any_NullableInlineClassUpperBound.kt");
        }

        @TestMetadata("genericOverrideSuspendFun_Int.kt")
        public void testGenericOverrideSuspendFun_Int() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/genericOverrideSuspendFun_Int.kt");
        }

        @TestMetadata("genericOverrideSuspendFun_NullableAny.kt")
        public void testGenericOverrideSuspendFun_NullableAny() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/genericOverrideSuspendFun_NullableAny.kt");
        }

        @TestMetadata("genericOverrideSuspendFun_NullableAny_null.kt")
        public void testGenericOverrideSuspendFun_NullableAny_null() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/genericOverrideSuspendFun_NullableAny_null.kt");
        }

        @TestMetadata("genericOverrideSuspendFun_NullableInt.kt")
        public void testGenericOverrideSuspendFun_NullableInt() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/genericOverrideSuspendFun_NullableInt.kt");
        }

        @TestMetadata("genericOverrideSuspendFun_NullableInt_null.kt")
        public void testGenericOverrideSuspendFun_NullableInt_null() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/genericOverrideSuspendFun_NullableInt_null.kt");
        }

        @TestMetadata("interfaceDelegateWithInlineClass.kt")
        public void testInterfaceDelegateWithInlineClass() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/interfaceDelegateWithInlineClass.kt");
        }

        @TestMetadata("invokeOperator.kt")
        public void testInvokeOperator() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/invokeOperator.kt");
        }

        @TestMetadata("multifileBridge.kt")
        public void testMultifileBridge() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/multifileBridge.kt");
        }

        @TestMetadata("overrideSuspendFun.kt")
        public void testOverrideSuspendFun() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/overrideSuspendFun.kt");
        }

        @TestMetadata("overrideSuspendFun_Any.kt")
        public void testOverrideSuspendFun_Any() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/overrideSuspendFun_Any.kt");
        }

        @TestMetadata("overrideSuspendFun_Any_itf.kt")
        public void testOverrideSuspendFun_Any_itf() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/overrideSuspendFun_Any_itf.kt");
        }

        @TestMetadata("overrideSuspendFun_Any_this.kt")
        public void testOverrideSuspendFun_Any_this() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/overrideSuspendFun_Any_this.kt");
        }

        @TestMetadata("overrideSuspendFun_Int.kt")
        public void testOverrideSuspendFun_Int() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/overrideSuspendFun_Int.kt");
        }

        @TestMetadata("returnResult.kt")
        public void testReturnResult() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/returnResult.kt");
        }

        @TestMetadata("syntheticAccessor.kt")
        public void testSyntheticAccessor() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/syntheticAccessor.kt");
        }
      }

      @TestMetadata("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class ResumeWithException extends AbstractLightAnalysisModeTest {
        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        public void testAllFilesPresentInResumeWithException() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("boxReturnValueOfSuspendFunctionReference.kt")
        public void testBoxReturnValueOfSuspendFunctionReference() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/boxReturnValueOfSuspendFunctionReference.kt");
        }

        @TestMetadata("boxReturnValueOfSuspendLambda.kt")
        public void testBoxReturnValueOfSuspendLambda() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/boxReturnValueOfSuspendLambda.kt");
        }

        @TestMetadata("boxTypeParameterOfSuperType.kt")
        public void testBoxTypeParameterOfSuperType() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/boxTypeParameterOfSuperType.kt");
        }

        @TestMetadata("boxTypeParameterOfSuperTypeResult.kt")
        public void testBoxTypeParameterOfSuperTypeResult() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/boxTypeParameterOfSuperTypeResult.kt");
        }

        @TestMetadata("boxUnboxInsideCoroutine.kt")
        public void testBoxUnboxInsideCoroutine() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/boxUnboxInsideCoroutine.kt");
        }

        @TestMetadata("boxUnboxInsideCoroutine_Any.kt")
        public void testBoxUnboxInsideCoroutine_Any() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/boxUnboxInsideCoroutine_Any.kt");
        }

        @TestMetadata("boxUnboxInsideCoroutine_InlineAny.kt")
        public void testBoxUnboxInsideCoroutine_InlineAny() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/boxUnboxInsideCoroutine_InlineAny.kt");
        }

        @TestMetadata("boxUnboxInsideCoroutine_InlineInt.kt")
        public void testBoxUnboxInsideCoroutine_InlineInt() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/boxUnboxInsideCoroutine_InlineInt.kt");
        }

        @TestMetadata("boxUnboxInsideCoroutine_Int.kt")
        public void testBoxUnboxInsideCoroutine_Int() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/boxUnboxInsideCoroutine_Int.kt");
        }

        @TestMetadata("boxUnboxInsideCoroutine_Long.kt")
        public void testBoxUnboxInsideCoroutine_Long() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/boxUnboxInsideCoroutine_Long.kt");
        }

        @TestMetadata("boxUnboxInsideCoroutine_NAny.kt")
        public void testBoxUnboxInsideCoroutine_NAny() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/boxUnboxInsideCoroutine_NAny.kt");
        }

        @TestMetadata("boxUnboxInsideCoroutine_nonLocalReturn.kt")
        public void testBoxUnboxInsideCoroutine_nonLocalReturn() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/boxUnboxInsideCoroutine_nonLocalReturn.kt");
        }

        @TestMetadata("boxUnboxInsideCoroutine_suspendFunType.kt")
        public void testBoxUnboxInsideCoroutine_suspendFunType() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/boxUnboxInsideCoroutine_suspendFunType.kt");
        }

        @TestMetadata("bridgeGenerationCrossinline.kt")
        public void testBridgeGenerationCrossinline() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/bridgeGenerationCrossinline.kt");
        }

        @TestMetadata("bridgeGenerationNonInline.kt")
        public void testBridgeGenerationNonInline() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/bridgeGenerationNonInline.kt");
        }

        @TestMetadata("covariantOverrideSuspendFun.kt")
        public void testCovariantOverrideSuspendFun() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/covariantOverrideSuspendFun.kt");
        }

        @TestMetadata("covariantOverrideSuspendFunSameJvmType.kt")
        public void testCovariantOverrideSuspendFunSameJvmType() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/covariantOverrideSuspendFunSameJvmType.kt");
        }

        @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass.kt")
        public void testCovariantOverrideSuspendFunWithNullableInlineClass() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/covariantOverrideSuspendFunWithNullableInlineClass.kt");
        }

        @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClassSameJvmType.kt")
        public void testCovariantOverrideSuspendFunWithNullableInlineClassSameJvmType() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/covariantOverrideSuspendFunWithNullableInlineClassSameJvmType.kt");
        }

        @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass_Any.kt")
        public void testCovariantOverrideSuspendFunWithNullableInlineClass_Any() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/covariantOverrideSuspendFunWithNullableInlineClass_Any.kt");
        }

        @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass_Int.kt")
        public void testCovariantOverrideSuspendFunWithNullableInlineClass_Int() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/covariantOverrideSuspendFunWithNullableInlineClass_Int.kt");
        }

        @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass_NullableAny.kt")
        public void testCovariantOverrideSuspendFunWithNullableInlineClass_NullableAny() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/covariantOverrideSuspendFunWithNullableInlineClass_NullableAny.kt");
        }

        @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass_NullableAny_null.kt")
        public void testCovariantOverrideSuspendFunWithNullableInlineClass_NullableAny_null() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/covariantOverrideSuspendFunWithNullableInlineClass_NullableAny_null.kt");
        }

        @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass_NullableInt.kt")
        public void testCovariantOverrideSuspendFunWithNullableInlineClass_NullableInt() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/covariantOverrideSuspendFunWithNullableInlineClass_NullableInt.kt");
        }

        @TestMetadata("covariantOverrideSuspendFun_Any.kt")
        public void testCovariantOverrideSuspendFun_Any() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/covariantOverrideSuspendFun_Any.kt");
        }

        @TestMetadata("covariantOverrideSuspendFun_Int.kt")
        public void testCovariantOverrideSuspendFun_Int() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/covariantOverrideSuspendFun_Int.kt");
        }

        @TestMetadata("createMangling.kt")
        public void testCreateMangling() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/createMangling.kt");
        }

        @TestMetadata("createOverride.kt")
        public void testCreateOverride() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/createOverride.kt");
        }

        @TestMetadata("genericOverrideSuspendFun.kt")
        public void testGenericOverrideSuspendFun() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/genericOverrideSuspendFun.kt");
        }

        @TestMetadata("genericOverrideSuspendFun_Any.kt")
        public void testGenericOverrideSuspendFun_Any() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/genericOverrideSuspendFun_Any.kt");
        }

        @TestMetadata("genericOverrideSuspendFun_Any_NullableInlineClassUpperBound.kt")
        public void testGenericOverrideSuspendFun_Any_NullableInlineClassUpperBound() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/genericOverrideSuspendFun_Any_NullableInlineClassUpperBound.kt");
        }

        @TestMetadata("genericOverrideSuspendFun_Int.kt")
        public void testGenericOverrideSuspendFun_Int() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/genericOverrideSuspendFun_Int.kt");
        }

        @TestMetadata("genericOverrideSuspendFun_NullableAny.kt")
        public void testGenericOverrideSuspendFun_NullableAny() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/genericOverrideSuspendFun_NullableAny.kt");
        }

        @TestMetadata("genericOverrideSuspendFun_NullableInt.kt")
        public void testGenericOverrideSuspendFun_NullableInt() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/genericOverrideSuspendFun_NullableInt.kt");
        }

        @TestMetadata("interfaceDelegateWithInlineClass.kt")
        public void testInterfaceDelegateWithInlineClass() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/interfaceDelegateWithInlineClass.kt");
        }

        @TestMetadata("invokeOperator.kt")
        public void testInvokeOperator() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/invokeOperator.kt");
        }

        @TestMetadata("overrideSuspendFun.kt")
        public void testOverrideSuspendFun() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/overrideSuspendFun.kt");
        }

        @TestMetadata("overrideSuspendFun_Any.kt")
        public void testOverrideSuspendFun_Any() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/overrideSuspendFun_Any.kt");
        }

        @TestMetadata("overrideSuspendFun_Any_itf.kt")
        public void testOverrideSuspendFun_Any_itf() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/overrideSuspendFun_Any_itf.kt");
        }

        @TestMetadata("overrideSuspendFun_Any_this.kt")
        public void testOverrideSuspendFun_Any_this() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/overrideSuspendFun_Any_this.kt");
        }

        @TestMetadata("overrideSuspendFun_Int.kt")
        public void testOverrideSuspendFun_Int() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/overrideSuspendFun_Int.kt");
        }

        @TestMetadata("returnResult.kt")
        public void testReturnResult() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/returnResult.kt");
        }
      }
    }

    @TestMetadata("compiler/testData/codegen/box/coroutines/intLikeVarSpilling")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class IntLikeVarSpilling extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInIntLikeVarSpilling() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/intLikeVarSpilling"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("complicatedMerge.kt")
      public void testComplicatedMerge() {
        runTest("compiler/testData/codegen/box/coroutines/intLikeVarSpilling/complicatedMerge.kt");
      }

      @TestMetadata("i2bResult.kt")
      public void testI2bResult() {
        runTest("compiler/testData/codegen/box/coroutines/intLikeVarSpilling/i2bResult.kt");
      }

      @TestMetadata("listThrowablePairInOneSlot.kt")
      public void testListThrowablePairInOneSlot() {
        runTest("compiler/testData/codegen/box/coroutines/intLikeVarSpilling/listThrowablePairInOneSlot.kt");
      }

      @TestMetadata("loadFromBooleanArray.kt")
      public void testLoadFromBooleanArray() {
        runTest("compiler/testData/codegen/box/coroutines/intLikeVarSpilling/loadFromBooleanArray.kt");
      }

      @TestMetadata("loadFromByteArray.kt")
      public void testLoadFromByteArray() {
        runTest("compiler/testData/codegen/box/coroutines/intLikeVarSpilling/loadFromByteArray.kt");
      }

      @TestMetadata("noVariableInTable.kt")
      public void testNoVariableInTable() {
        runTest("compiler/testData/codegen/box/coroutines/intLikeVarSpilling/noVariableInTable.kt");
      }

      @TestMetadata("sameIconst1ManyVars.kt")
      public void testSameIconst1ManyVars() {
        runTest("compiler/testData/codegen/box/coroutines/intLikeVarSpilling/sameIconst1ManyVars.kt");
      }

      @TestMetadata("unusedCatchVar.kt")
      public void testUnusedCatchVar() {
        runTest("compiler/testData/codegen/box/coroutines/intLikeVarSpilling/unusedCatchVar.kt");
      }

      @TestMetadata("usedInArrayStore.kt")
      public void testUsedInArrayStore() {
        runTest("compiler/testData/codegen/box/coroutines/intLikeVarSpilling/usedInArrayStore.kt");
      }

      @TestMetadata("usedInMethodCall.kt")
      public void testUsedInMethodCall() {
        runTest("compiler/testData/codegen/box/coroutines/intLikeVarSpilling/usedInMethodCall.kt");
      }

      @TestMetadata("usedInPutfield.kt")
      public void testUsedInPutfield() {
        runTest("compiler/testData/codegen/box/coroutines/intLikeVarSpilling/usedInPutfield.kt");
      }

      @TestMetadata("usedInVarStore.kt")
      public void testUsedInVarStore() {
        runTest("compiler/testData/codegen/box/coroutines/intLikeVarSpilling/usedInVarStore.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/coroutines/intrinsicSemantics")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class IntrinsicSemantics extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInIntrinsicSemantics() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/intrinsicSemantics"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("coroutineContext.kt")
      public void testCoroutineContext() {
        runTest("compiler/testData/codegen/box/coroutines/intrinsicSemantics/coroutineContext.kt");
      }

      @TestMetadata("coroutineContextReceiver.kt")
      public void testCoroutineContextReceiver() {
        runTest("compiler/testData/codegen/box/coroutines/intrinsicSemantics/coroutineContextReceiver.kt");
      }

      @TestMetadata("coroutineContextReceiverNotIntrinsic.kt")
      public void testCoroutineContextReceiverNotIntrinsic() {
        runTest("compiler/testData/codegen/box/coroutines/intrinsicSemantics/coroutineContextReceiverNotIntrinsic.kt");
      }

      @TestMetadata("intercepted.kt")
      public void testIntercepted() {
        runTest("compiler/testData/codegen/box/coroutines/intrinsicSemantics/intercepted.kt");
      }

      @TestMetadata("releaseIntercepted.kt")
      public void testReleaseIntercepted() {
        runTest("compiler/testData/codegen/box/coroutines/intrinsicSemantics/releaseIntercepted.kt");
      }

      @TestMetadata("resultExceptionOrNullInLambda.kt")
      public void testResultExceptionOrNullInLambda() {
        runTest("compiler/testData/codegen/box/coroutines/intrinsicSemantics/resultExceptionOrNullInLambda.kt");
      }

      @TestMetadata("startCoroutine.kt")
      public void testStartCoroutine() {
        runTest("compiler/testData/codegen/box/coroutines/intrinsicSemantics/startCoroutine.kt");
      }

      @TestMetadata("startCoroutineUninterceptedOrReturn.kt")
      public void testStartCoroutineUninterceptedOrReturn() {
        runTest("compiler/testData/codegen/box/coroutines/intrinsicSemantics/startCoroutineUninterceptedOrReturn.kt");
      }

      @TestMetadata("startCoroutineUninterceptedOrReturnInterception.kt")
      public void testStartCoroutineUninterceptedOrReturnInterception() {
        runTest("compiler/testData/codegen/box/coroutines/intrinsicSemantics/startCoroutineUninterceptedOrReturnInterception.kt");
      }

      @TestMetadata("suspendCoroutineUninterceptedOrReturn.kt")
      public void testSuspendCoroutineUninterceptedOrReturn() {
        runTest("compiler/testData/codegen/box/coroutines/intrinsicSemantics/suspendCoroutineUninterceptedOrReturn.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/coroutines/javaInterop")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class JavaInterop extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInJavaInterop() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/javaInterop"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("objectWithSeveralSuspends.kt")
      public void testObjectWithSeveralSuspends() {
        runTest("compiler/testData/codegen/box/coroutines/javaInterop/objectWithSeveralSuspends.kt");
      }

      @TestMetadata("returnLambda.kt")
      public void testReturnLambda() {
        runTest("compiler/testData/codegen/box/coroutines/javaInterop/returnLambda.kt");
      }

      @TestMetadata("returnObject.kt")
      public void testReturnObject() {
        runTest("compiler/testData/codegen/box/coroutines/javaInterop/returnObject.kt");
      }

      @TestMetadata("severalCaptures.kt")
      public void testSeveralCaptures() {
        runTest("compiler/testData/codegen/box/coroutines/javaInterop/severalCaptures.kt");
      }

      @TestMetadata("suspendInlineWithCrossinline.kt")
      public void testSuspendInlineWithCrossinline() {
        runTest("compiler/testData/codegen/box/coroutines/javaInterop/suspendInlineWithCrossinline.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/coroutines/localFunctions")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class LocalFunctions extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInLocalFunctions() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/localFunctions"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("compiler/testData/codegen/box/coroutines/localFunctions/named")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class Named extends AbstractLightAnalysisModeTest {
        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        public void testAllFilesPresentInNamed() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/localFunctions/named"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("callTopLevelFromLocal.kt")
        public void testCallTopLevelFromLocal() {
          runTest("compiler/testData/codegen/box/coroutines/localFunctions/named/callTopLevelFromLocal.kt");
        }

        @TestMetadata("capturedParameters.kt")
        public void testCapturedParameters() {
          runTest("compiler/testData/codegen/box/coroutines/localFunctions/named/capturedParameters.kt");
        }

        @TestMetadata("capturedVariables.kt")
        public void testCapturedVariables() {
          runTest("compiler/testData/codegen/box/coroutines/localFunctions/named/capturedVariables.kt");
        }

        @TestMetadata("defaultArgument.kt")
        public void testDefaultArgument() {
          runTest("compiler/testData/codegen/box/coroutines/localFunctions/named/defaultArgument.kt");
        }

        @TestMetadata("extension.kt")
        public void testExtension() {
          runTest("compiler/testData/codegen/box/coroutines/localFunctions/named/extension.kt");
        }

        @TestMetadata("infix.kt")
        public void testInfix() {
          runTest("compiler/testData/codegen/box/coroutines/localFunctions/named/infix.kt");
        }

        @TestMetadata("insideLambda.kt")
        public void testInsideLambda() {
          runTest("compiler/testData/codegen/box/coroutines/localFunctions/named/insideLambda.kt");
        }

        @TestMetadata("nestedLocals.kt")
        public void testNestedLocals() {
          runTest("compiler/testData/codegen/box/coroutines/localFunctions/named/nestedLocals.kt");
        }

        @TestMetadata("rec.kt")
        public void testRec() {
          runTest("compiler/testData/codegen/box/coroutines/localFunctions/named/rec.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() {
          runTest("compiler/testData/codegen/box/coroutines/localFunctions/named/simple.kt");
        }

        @TestMetadata("simpleSuspensionPoint.kt")
        public void testSimpleSuspensionPoint() {
          runTest("compiler/testData/codegen/box/coroutines/localFunctions/named/simpleSuspensionPoint.kt");
        }

        @TestMetadata("stateMachine.kt")
        public void testStateMachine() {
          runTest("compiler/testData/codegen/box/coroutines/localFunctions/named/stateMachine.kt");
        }

        @TestMetadata("withArguments.kt")
        public void testWithArguments() {
          runTest("compiler/testData/codegen/box/coroutines/localFunctions/named/withArguments.kt");
        }
      }
    }

    @TestMetadata("compiler/testData/codegen/box/coroutines/multiModule")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class MultiModule extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInMultiModule() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/multiModule"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("inheritFromAnotherModule.kt")
      public void testInheritFromAnotherModule() {
        runTest("compiler/testData/codegen/box/coroutines/multiModule/inheritFromAnotherModule.kt");
      }

      @TestMetadata("inlineCrossModule.kt")
      public void testInlineCrossModule() {
        runTest("compiler/testData/codegen/box/coroutines/multiModule/inlineCrossModule.kt");
      }

      @TestMetadata("inlineFunctionWithOptionalParam.kt")
      public void testInlineFunctionWithOptionalParam() {
        runTest("compiler/testData/codegen/box/coroutines/multiModule/inlineFunctionWithOptionalParam.kt");
      }

      @TestMetadata("inlineMultiModule.kt")
      public void testInlineMultiModule() {
        runTest("compiler/testData/codegen/box/coroutines/multiModule/inlineMultiModule.kt");
      }

      @TestMetadata("inlineMultiModuleOverride.kt")
      public void testInlineMultiModuleOverride() {
        runTest("compiler/testData/codegen/box/coroutines/multiModule/inlineMultiModuleOverride.kt");
      }

      @TestMetadata("inlineMultiModuleWithController.kt")
      public void testInlineMultiModuleWithController() {
        runTest("compiler/testData/codegen/box/coroutines/multiModule/inlineMultiModuleWithController.kt");
      }

      @TestMetadata("inlineMultiModuleWithInnerInlining.kt")
      public void testInlineMultiModuleWithInnerInlining() {
        runTest("compiler/testData/codegen/box/coroutines/multiModule/inlineMultiModuleWithInnerInlining.kt");
      }

      @TestMetadata("inlineTailCall.kt")
      public void testInlineTailCall() {
        runTest("compiler/testData/codegen/box/coroutines/multiModule/inlineTailCall.kt");
      }

      @TestMetadata("inlineWithJava.kt")
      public void testInlineWithJava() {
        runTest("compiler/testData/codegen/box/coroutines/multiModule/inlineWithJava.kt");
      }

      @TestMetadata("simple.kt")
      public void testSimple() {
        runTest("compiler/testData/codegen/box/coroutines/multiModule/simple.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/coroutines/redundantLocalsElimination")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class RedundantLocalsElimination extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInRedundantLocalsElimination() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/redundantLocalsElimination"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("ktor_receivedMessage.kt")
      public void testKtor_receivedMessage() {
        runTest("compiler/testData/codegen/box/coroutines/redundantLocalsElimination/ktor_receivedMessage.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/coroutines/reflect")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Reflect extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInReflect() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/reflect"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("bigArity.kt")
      public void testBigArity() {
        runTest("compiler/testData/codegen/box/coroutines/reflect/bigArity.kt");
      }

      @TestMetadata("bigArityLambda.kt")
      public void testBigArityLambda() {
        runTest("compiler/testData/codegen/box/coroutines/reflect/bigArityLambda.kt");
      }

      @TestMetadata("callSuspend.kt")
      public void testCallSuspend() {
        runTest("compiler/testData/codegen/box/coroutines/reflect/callSuspend.kt");
      }

      @TestMetadata("callSuspendBy.kt")
      public void testCallSuspendBy() {
        runTest("compiler/testData/codegen/box/coroutines/reflect/callSuspendBy.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/coroutines/stackUnwinding")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class StackUnwinding extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInStackUnwinding() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/stackUnwinding"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("exception.kt")
      public void testException() {
        runTest("compiler/testData/codegen/box/coroutines/stackUnwinding/exception.kt");
      }

      @TestMetadata("inlineSuspendFunction.kt")
      public void testInlineSuspendFunction() {
        runTest("compiler/testData/codegen/box/coroutines/stackUnwinding/inlineSuspendFunction.kt");
      }

      @TestMetadata("rethrowInFinally.kt")
      public void testRethrowInFinally() {
        runTest("compiler/testData/codegen/box/coroutines/stackUnwinding/rethrowInFinally.kt");
      }

      @TestMetadata("rethrowInFinallyWithSuspension.kt")
      public void testRethrowInFinallyWithSuspension() {
        runTest("compiler/testData/codegen/box/coroutines/stackUnwinding/rethrowInFinallyWithSuspension.kt");
      }

      @TestMetadata("simple.kt")
      public void testSimple() {
        runTest("compiler/testData/codegen/box/coroutines/stackUnwinding/simple.kt");
      }

      @TestMetadata("suspendInCycle.kt")
      public void testSuspendInCycle() {
        runTest("compiler/testData/codegen/box/coroutines/stackUnwinding/suspendInCycle.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/coroutines/suspendConversion")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class SuspendConversion extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInSuspendConversion() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/suspendConversion"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("intersectionTypeToSubtypeConversion.kt")
      public void testIntersectionTypeToSubtypeConversion() {
        runTest("compiler/testData/codegen/box/coroutines/suspendConversion/intersectionTypeToSubtypeConversion.kt");
      }

      @TestMetadata("onArgument.kt")
      public void testOnArgument() {
        runTest("compiler/testData/codegen/box/coroutines/suspendConversion/onArgument.kt");
      }

      @TestMetadata("onInlineArgument.kt")
      public void testOnInlineArgument() {
        runTest("compiler/testData/codegen/box/coroutines/suspendConversion/onInlineArgument.kt");
      }

      @TestMetadata("subtypeOfFunctionalTypeToSuspendConversion.kt")
      public void testSubtypeOfFunctionalTypeToSuspendConversion() {
        runTest("compiler/testData/codegen/box/coroutines/suspendConversion/subtypeOfFunctionalTypeToSuspendConversion.kt");
      }

      @TestMetadata("suspendConversionBetweenFunInterfaces.kt")
      public void testSuspendConversionBetweenFunInterfaces() {
        runTest("compiler/testData/codegen/box/coroutines/suspendConversion/suspendConversionBetweenFunInterfaces.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class SuspendFunctionAsCoroutine extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInSuspendFunctionAsCoroutine() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("dispatchResume.kt")
      public void testDispatchResume() {
        runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/dispatchResume.kt");
      }

      @TestMetadata("handleException.kt")
      public void testHandleException() {
        runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/handleException.kt");
      }

      @TestMetadata("ifExpressionInsideCoroutine_1_3.kt")
      public void testIfExpressionInsideCoroutine_1_3() {
        runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/ifExpressionInsideCoroutine_1_3.kt");
      }

      @TestMetadata("inline.kt")
      public void testInline() {
        runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/inline.kt");
      }

      @TestMetadata("inlineTwoReceivers.kt")
      public void testInlineTwoReceivers() {
        runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/inlineTwoReceivers.kt");
      }

      @TestMetadata("member.kt")
      public void testMember() {
        runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/member.kt");
      }

      @TestMetadata("noinlineTwoReceivers.kt")
      public void testNoinlineTwoReceivers() {
        runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/noinlineTwoReceivers.kt");
      }

      @TestMetadata("openFunWithJava.kt")
      public void testOpenFunWithJava() {
        runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/openFunWithJava.kt");
      }

      @TestMetadata("operators.kt")
      public void testOperators() {
        runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/operators.kt");
      }

      @TestMetadata("privateFunctions.kt")
      public void testPrivateFunctions() {
        runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/privateFunctions.kt");
      }

      @TestMetadata("privateInFile.kt")
      public void testPrivateInFile() {
        runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/privateInFile.kt");
      }

      @TestMetadata("returnNoSuspend.kt")
      public void testReturnNoSuspend() {
        runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/returnNoSuspend.kt");
      }

      @TestMetadata("simple.kt")
      public void testSimple() {
        runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/simple.kt");
      }

      @TestMetadata("superCall.kt")
      public void testSuperCall() {
        runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/superCall.kt");
      }

      @TestMetadata("superCallAbstractClass.kt")
      public void testSuperCallAbstractClass() {
        runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/superCallAbstractClass.kt");
      }

      @TestMetadata("superCallInterface.kt")
      public void testSuperCallInterface() {
        runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/superCallInterface.kt");
      }

      @TestMetadata("superCallOverload.kt")
      public void testSuperCallOverload() {
        runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/superCallOverload.kt");
      }

      @TestMetadata("withVariables.kt")
      public void testWithVariables() {
        runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/withVariables.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/coroutines/suspendFunctionTypeCall")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class SuspendFunctionTypeCall extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInSuspendFunctionTypeCall() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/suspendFunctionTypeCall"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("localVal.kt")
      public void testLocalVal() {
        runTest("compiler/testData/codegen/box/coroutines/suspendFunctionTypeCall/localVal.kt");
      }

      @TestMetadata("manyParameters.kt")
      public void testManyParameters() {
        runTest("compiler/testData/codegen/box/coroutines/suspendFunctionTypeCall/manyParameters.kt");
      }

      @TestMetadata("manyParametersNoCapture.kt")
      public void testManyParametersNoCapture() {
        runTest("compiler/testData/codegen/box/coroutines/suspendFunctionTypeCall/manyParametersNoCapture.kt");
      }

      @TestMetadata("simple.kt")
      public void testSimple() {
        runTest("compiler/testData/codegen/box/coroutines/suspendFunctionTypeCall/simple.kt");
      }

      @TestMetadata("suspendModifier.kt")
      public void testSuspendModifier() {
        runTest("compiler/testData/codegen/box/coroutines/suspendFunctionTypeCall/suspendModifier.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/coroutines/tailCallOptimizations")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class TailCallOptimizations extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInTailCallOptimizations() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/tailCallOptimizations"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("also.kt")
      public void testAlso() {
        runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/also.kt");
      }

      @TestMetadata("checkcast.kt")
      public void testCheckcast() {
        runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/checkcast.kt");
      }

      @TestMetadata("checkcast2.kt")
      public void testCheckcast2() {
        runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/checkcast2.kt");
      }

      @TestMetadata("crossinline.kt")
      public void testCrossinline() {
        runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/crossinline.kt");
      }

      @TestMetadata("deferredAwaitSuspendImpl.kt")
      public void testDeferredAwaitSuspendImpl() {
        runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/deferredAwaitSuspendImpl.kt");
      }

      @TestMetadata("inlineWithStateMachine.kt")
      public void testInlineWithStateMachine() {
        runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/inlineWithStateMachine.kt");
      }

      @TestMetadata("inlineWithoutStateMachine.kt")
      public void testInlineWithoutStateMachine() {
        runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/inlineWithoutStateMachine.kt");
      }

      @TestMetadata("innerObjectRetransformation.kt")
      public void testInnerObjectRetransformation() {
        runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/innerObjectRetransformation.kt");
      }

      @TestMetadata("interfaceDelegation.kt")
      public void testInterfaceDelegation() {
        runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/interfaceDelegation.kt");
      }

      @TestMetadata("lambdaParameterInlining.kt")
      public void testLambdaParameterInlining() {
        runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/lambdaParameterInlining.kt");
      }

      @TestMetadata("returnInlineClass.kt")
      public void testReturnInlineClass() {
        runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/returnInlineClass.kt");
      }

      @TestMetadata("simple.kt")
      public void testSimple() {
        runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/simple.kt");
      }

      @TestMetadata("tailCallIfReturnUnit.kt")
      public void testTailCallIfReturnUnit() {
        runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/tailCallIfReturnUnit.kt");
      }

      @TestMetadata("tailCallIntrinsics.kt")
      public void testTailCallIntrinsics() {
        runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/tailCallIntrinsics.kt");
      }

      @TestMetadata("tailSuspendUnitFun.kt")
      public void testTailSuspendUnitFun() {
        runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/tailSuspendUnitFun.kt");
      }

      @TestMetadata("tryCatch.kt")
      public void testTryCatch() {
        runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/tryCatch.kt");
      }

      @TestMetadata("tryCatchTailCall.kt")
      public void testTryCatchTailCall() {
        runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/tryCatchTailCall.kt");
      }

      @TestMetadata("unreachable.kt")
      public void testUnreachable() {
        runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/unreachable.kt");
      }

      @TestMetadata("whenUnit.kt")
      public void testWhenUnit() {
        runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/whenUnit.kt");
      }

      @TestMetadata("compiler/testData/codegen/box/coroutines/tailCallOptimizations/unit")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class Unit extends AbstractLightAnalysisModeTest {
        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        public void testAllFilesPresentInUnit() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/tailCallOptimizations/unit"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("functionReference.kt")
        public void testFunctionReference() {
          runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/unit/functionReference.kt");
        }

        @TestMetadata("inline.kt")
        public void testInline() {
          runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/unit/inline.kt");
        }

        @TestMetadata("override.kt")
        public void testOverride() {
          runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/unit/override.kt");
        }

        @TestMetadata("override2.kt")
        public void testOverride2() {
          runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/unit/override2.kt");
        }

        @TestMetadata("override3.kt")
        public void testOverride3() {
          runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/unit/override3.kt");
        }

        @TestMetadata("override4.kt")
        public void testOverride4() {
          runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/unit/override4.kt");
        }

        @TestMetadata("override5.kt")
        public void testOverride5() {
          runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/unit/override5.kt");
        }

        @TestMetadata("override6.kt")
        public void testOverride6() {
          runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/unit/override6.kt");
        }

        @TestMetadata("overrideCrossinline.kt")
        public void testOverrideCrossinline() {
          runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/unit/overrideCrossinline.kt");
        }

        @TestMetadata("overrideOverriden.kt")
        public void testOverrideOverriden() {
          runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/unit/overrideOverriden.kt");
        }

        @TestMetadata("reflection.kt")
        public void testReflection() {
          runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/unit/reflection.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() {
          runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/unit/simple.kt");
        }
      }
    }

    @TestMetadata("compiler/testData/codegen/box/coroutines/tailOperations")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class TailOperations extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInTailOperations() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/tailOperations"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("suspendWithIf.kt")
      public void testSuspendWithIf() {
        runTest("compiler/testData/codegen/box/coroutines/tailOperations/suspendWithIf.kt");
      }

      @TestMetadata("suspendWithTryCatch.kt")
      public void testSuspendWithTryCatch() {
        runTest("compiler/testData/codegen/box/coroutines/tailOperations/suspendWithTryCatch.kt");
      }

      @TestMetadata("suspendWithWhen.kt")
      public void testSuspendWithWhen() {
        runTest("compiler/testData/codegen/box/coroutines/tailOperations/suspendWithWhen.kt");
      }

      @TestMetadata("tailInlining.kt")
      public void testTailInlining() {
        runTest("compiler/testData/codegen/box/coroutines/tailOperations/tailInlining.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/coroutines/unitTypeReturn")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class UnitTypeReturn extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInUnitTypeReturn() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/unitTypeReturn"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("coroutineNonLocalReturn.kt")
      public void testCoroutineNonLocalReturn() {
        runTest("compiler/testData/codegen/box/coroutines/unitTypeReturn/coroutineNonLocalReturn.kt");
      }

      @TestMetadata("coroutineReturn.kt")
      public void testCoroutineReturn() {
        runTest("compiler/testData/codegen/box/coroutines/unitTypeReturn/coroutineReturn.kt");
      }

      @TestMetadata("inlineUnitFunction.kt")
      public void testInlineUnitFunction() {
        runTest("compiler/testData/codegen/box/coroutines/unitTypeReturn/inlineUnitFunction.kt");
      }

      @TestMetadata("interfaceDelegation.kt")
      public void testInterfaceDelegation() {
        runTest("compiler/testData/codegen/box/coroutines/unitTypeReturn/interfaceDelegation.kt");
      }

      @TestMetadata("suspendNonLocalReturn.kt")
      public void testSuspendNonLocalReturn() {
        runTest("compiler/testData/codegen/box/coroutines/unitTypeReturn/suspendNonLocalReturn.kt");
      }

      @TestMetadata("suspendReturn.kt")
      public void testSuspendReturn() {
        runTest("compiler/testData/codegen/box/coroutines/unitTypeReturn/suspendReturn.kt");
      }

      @TestMetadata("unitSafeCall.kt")
      public void testUnitSafeCall() {
        runTest("compiler/testData/codegen/box/coroutines/unitTypeReturn/unitSafeCall.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/coroutines/varSpilling")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class VarSpilling extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInVarSpilling() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/varSpilling"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("fakeInlinerVariables.kt")
      public void testFakeInlinerVariables() {
        runTest("compiler/testData/codegen/box/coroutines/varSpilling/fakeInlinerVariables.kt");
      }

      @TestMetadata("kt19475.kt")
      public void testKt19475() {
        runTest("compiler/testData/codegen/box/coroutines/varSpilling/kt19475.kt");
      }

      @TestMetadata("kt38925.kt")
      public void testKt38925() {
        runTest("compiler/testData/codegen/box/coroutines/varSpilling/kt38925.kt");
      }

      @TestMetadata("kt49834.kt")
      public void testKt49834() {
        runTest("compiler/testData/codegen/box/coroutines/varSpilling/kt49834.kt");
      }

      @TestMetadata("kt64139.kt")
      public void testKt64139() {
        runTest("compiler/testData/codegen/box/coroutines/varSpilling/kt64139.kt");
      }

      @TestMetadata("lvtWithInlineOnly.kt")
      public void testLvtWithInlineOnly() {
        runTest("compiler/testData/codegen/box/coroutines/varSpilling/lvtWithInlineOnly.kt");
      }

      @TestMetadata("nullSpilling.kt")
      public void testNullSpilling() {
        runTest("compiler/testData/codegen/box/coroutines/varSpilling/nullSpilling.kt");
      }

      @TestMetadata("refinedIntTypesAnalysis.kt")
      public void testRefinedIntTypesAnalysis() {
        runTest("compiler/testData/codegen/box/coroutines/varSpilling/refinedIntTypesAnalysis.kt");
      }

      @TestMetadata("safeCallElvis.kt")
      public void testSafeCallElvis() {
        runTest("compiler/testData/codegen/box/coroutines/varSpilling/safeCallElvis.kt");
      }

      @TestMetadata("compiler/testData/codegen/box/coroutines/varSpilling/cleanup")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class Cleanup extends AbstractLightAnalysisModeTest {
        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        public void testAllFilesPresentInCleanup() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/varSpilling/cleanup"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("backEdge.kt")
        public void testBackEdge() {
          runTest("compiler/testData/codegen/box/coroutines/varSpilling/cleanup/backEdge.kt");
        }

        @TestMetadata("if.kt")
        public void testIf() {
          runTest("compiler/testData/codegen/box/coroutines/varSpilling/cleanup/if.kt");
        }

        @TestMetadata("nullCleanup.kt")
        public void testNullCleanup() {
          runTest("compiler/testData/codegen/box/coroutines/varSpilling/cleanup/nullCleanup.kt");
        }

        @TestMetadata("nullNotSpill.kt")
        public void testNullNotSpill() {
          runTest("compiler/testData/codegen/box/coroutines/varSpilling/cleanup/nullNotSpill.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() {
          runTest("compiler/testData/codegen/box/coroutines/varSpilling/cleanup/simple.kt");
        }

        @TestMetadata("twoRefs.kt")
        public void testTwoRefs() {
          runTest("compiler/testData/codegen/box/coroutines/varSpilling/cleanup/twoRefs.kt");
        }

        @TestMetadata("unusedParamNotSpill.kt")
        public void testUnusedParamNotSpill() {
          runTest("compiler/testData/codegen/box/coroutines/varSpilling/cleanup/unusedParamNotSpill.kt");
        }

        @TestMetadata("when.kt")
        public void testWhen() {
          runTest("compiler/testData/codegen/box/coroutines/varSpilling/cleanup/when.kt");
        }
      }

      @TestMetadata("compiler/testData/codegen/box/coroutines/varSpilling/debugMode")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class DebugMode extends AbstractLightAnalysisModeTest {
        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        public void testAllFilesPresentInDebugMode() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/varSpilling/debugMode"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("backEdge.kt")
        public void testBackEdge() {
          runTest("compiler/testData/codegen/box/coroutines/varSpilling/debugMode/backEdge.kt");
        }

        @TestMetadata("if.kt")
        public void testIf() {
          runTest("compiler/testData/codegen/box/coroutines/varSpilling/debugMode/if.kt");
        }

        @TestMetadata("inlineOnly.kt")
        public void testInlineOnly() {
          runTest("compiler/testData/codegen/box/coroutines/varSpilling/debugMode/inlineOnly.kt");
        }

        @TestMetadata("nullCleanup.kt")
        public void testNullCleanup() {
          runTest("compiler/testData/codegen/box/coroutines/varSpilling/debugMode/nullCleanup.kt");
        }

        @TestMetadata("nullNotSpill.kt")
        public void testNullNotSpill() {
          runTest("compiler/testData/codegen/box/coroutines/varSpilling/debugMode/nullNotSpill.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() {
          runTest("compiler/testData/codegen/box/coroutines/varSpilling/debugMode/simple.kt");
        }

        @TestMetadata("twoRefs.kt")
        public void testTwoRefs() {
          runTest("compiler/testData/codegen/box/coroutines/varSpilling/debugMode/twoRefs.kt");
        }

        @TestMetadata("unusedParamNotSpill.kt")
        public void testUnusedParamNotSpill() {
          runTest("compiler/testData/codegen/box/coroutines/varSpilling/debugMode/unusedParamNotSpill.kt");
        }

        @TestMetadata("when.kt")
        public void testWhen() {
          runTest("compiler/testData/codegen/box/coroutines/varSpilling/debugMode/when.kt");
        }
      }
    }
  }

  @TestMetadata("compiler/testData/codegen/box/correctFrontendCode")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class CorrectFrontendCode extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInCorrectFrontendCode() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/correctFrontendCode"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("privateNestedClassInSuper.kt")
    public void testPrivateNestedClassInSuper() {
      runTest("compiler/testData/codegen/box/correctFrontendCode/privateNestedClassInSuper.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/cycles")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Cycles extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInCycles() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/cycles"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("cycle.kt")
    public void testCycle() {
      runTest("compiler/testData/codegen/box/cycles/cycle.kt");
    }

    @TestMetadata("cycle_do.kt")
    public void testCycle_do() {
      runTest("compiler/testData/codegen/box/cycles/cycle_do.kt");
    }

    @TestMetadata("cycle_for.kt")
    public void testCycle_for() {
      runTest("compiler/testData/codegen/box/cycles/cycle_for.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/dataClasses")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class DataClasses extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInDataClasses() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/dataClasses"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("arrayParams.kt")
    public void testArrayParams() {
      runTest("compiler/testData/codegen/box/dataClasses/arrayParams.kt");
    }

    @TestMetadata("changingVarParam.kt")
    public void testChangingVarParam() {
      runTest("compiler/testData/codegen/box/dataClasses/changingVarParam.kt");
    }

    @TestMetadata("dataClassWithManyFields.kt")
    public void testDataClassWithManyFields() {
      runTest("compiler/testData/codegen/box/dataClasses/dataClassWithManyFields.kt");
    }

    @TestMetadata("doubleParam.kt")
    public void testDoubleParam() {
      runTest("compiler/testData/codegen/box/dataClasses/doubleParam.kt");
    }

    @TestMetadata("equalityChecksPrimitiveUnboxed.kt")
    public void testEqualityChecksPrimitiveUnboxed() {
      runTest("compiler/testData/codegen/box/dataClasses/equalityChecksPrimitiveUnboxed.kt");
    }

    @TestMetadata("floatParam.kt")
    public void testFloatParam() {
      runTest("compiler/testData/codegen/box/dataClasses/floatParam.kt");
    }

    @TestMetadata("fromOtherModule.kt")
    public void testFromOtherModule() {
      runTest("compiler/testData/codegen/box/dataClasses/fromOtherModule.kt");
    }

    @TestMetadata("genericParam.kt")
    public void testGenericParam() {
      runTest("compiler/testData/codegen/box/dataClasses/genericParam.kt");
    }

    @TestMetadata("kt49715.kt")
    public void testKt49715() {
      runTest("compiler/testData/codegen/box/dataClasses/kt49715.kt");
    }

    @TestMetadata("kt49715_behaviorChange.kt")
    public void testKt49715_behaviorChange() {
      runTest("compiler/testData/codegen/box/dataClasses/kt49715_behaviorChange.kt");
    }

    @TestMetadata("kt5002.kt")
    public void testKt5002() {
      runTest("compiler/testData/codegen/box/dataClasses/kt5002.kt");
    }

    @TestMetadata("mixedParams.kt")
    public void testMixedParams() {
      runTest("compiler/testData/codegen/box/dataClasses/mixedParams.kt");
    }

    @TestMetadata("multiDeclaration.kt")
    public void testMultiDeclaration() {
      runTest("compiler/testData/codegen/box/dataClasses/multiDeclaration.kt");
    }

    @TestMetadata("multiDeclarationFor.kt")
    public void testMultiDeclarationFor() {
      runTest("compiler/testData/codegen/box/dataClasses/multiDeclarationFor.kt");
    }

    @TestMetadata("nonTrivialFinalMemberInSuperClass.kt")
    public void testNonTrivialFinalMemberInSuperClass() {
      runTest("compiler/testData/codegen/box/dataClasses/nonTrivialFinalMemberInSuperClass.kt");
    }

    @TestMetadata("nonTrivialMemberInSuperClass.kt")
    public void testNonTrivialMemberInSuperClass() {
      runTest("compiler/testData/codegen/box/dataClasses/nonTrivialMemberInSuperClass.kt");
    }

    @TestMetadata("privateValParams.kt")
    public void testPrivateValParams() {
      runTest("compiler/testData/codegen/box/dataClasses/privateValParams.kt");
    }

    @TestMetadata("propertyOfDnnType.kt")
    public void testPropertyOfDnnType() {
      runTest("compiler/testData/codegen/box/dataClasses/propertyOfDnnType.kt");
    }

    @TestMetadata("twoValParams.kt")
    public void testTwoValParams() {
      runTest("compiler/testData/codegen/box/dataClasses/twoValParams.kt");
    }

    @TestMetadata("twoVarParams.kt")
    public void testTwoVarParams() {
      runTest("compiler/testData/codegen/box/dataClasses/twoVarParams.kt");
    }

    @TestMetadata("typeParameterWithNonTrivialBound.kt")
    public void testTypeParameterWithNonTrivialBound() {
      runTest("compiler/testData/codegen/box/dataClasses/typeParameterWithNonTrivialBound.kt");
    }

    @TestMetadata("unitComponent.kt")
    public void testUnitComponent() {
      runTest("compiler/testData/codegen/box/dataClasses/unitComponent.kt");
    }

    @TestMetadata("compiler/testData/codegen/box/dataClasses/components")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Components extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInComponents() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/dataClasses/components"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("kt49812.kt")
      public void testKt49812() {
        runTest("compiler/testData/codegen/box/dataClasses/components/kt49812.kt");
      }

      @TestMetadata("kt49936.kt")
      public void testKt49936() {
        runTest("compiler/testData/codegen/box/dataClasses/components/kt49936.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/dataClasses/copy")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Copy extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInCopy() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/dataClasses/copy"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("constructorWithDefaultParam.kt")
      public void testConstructorWithDefaultParam() {
        runTest("compiler/testData/codegen/box/dataClasses/copy/constructorWithDefaultParam.kt");
      }

      @TestMetadata("copyInObjectNestedDataClass.kt")
      public void testCopyInObjectNestedDataClass() {
        runTest("compiler/testData/codegen/box/dataClasses/copy/copyInObjectNestedDataClass.kt");
      }

      @TestMetadata("kt12708.kt")
      public void testKt12708() {
        runTest("compiler/testData/codegen/box/dataClasses/copy/kt12708.kt");
      }

      @TestMetadata("kt3033.kt")
      public void testKt3033() {
        runTest("compiler/testData/codegen/box/dataClasses/copy/kt3033.kt");
      }

      @TestMetadata("valInConstructorParams.kt")
      public void testValInConstructorParams() {
        runTest("compiler/testData/codegen/box/dataClasses/copy/valInConstructorParams.kt");
      }

      @TestMetadata("varInConstructorParams.kt")
      public void testVarInConstructorParams() {
        runTest("compiler/testData/codegen/box/dataClasses/copy/varInConstructorParams.kt");
      }

      @TestMetadata("withGenericParameter.kt")
      public void testWithGenericParameter() {
        runTest("compiler/testData/codegen/box/dataClasses/copy/withGenericParameter.kt");
      }

      @TestMetadata("withSecondaryConstructor.kt")
      public void testWithSecondaryConstructor() {
        runTest("compiler/testData/codegen/box/dataClasses/copy/withSecondaryConstructor.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/dataClasses/equals")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Equals extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInEquals() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/dataClasses/equals"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("alreadyDeclared.kt")
      public void testAlreadyDeclared() {
        runTest("compiler/testData/codegen/box/dataClasses/equals/alreadyDeclared.kt");
      }

      @TestMetadata("alreadyDeclaredWrongSignature.kt")
      public void testAlreadyDeclaredWrongSignature() {
        runTest("compiler/testData/codegen/box/dataClasses/equals/alreadyDeclaredWrongSignature.kt");
      }

      @TestMetadata("genericarray.kt")
      public void testGenericarray() {
        runTest("compiler/testData/codegen/box/dataClasses/equals/genericarray.kt");
      }

      @TestMetadata("intarray.kt")
      public void testIntarray() {
        runTest("compiler/testData/codegen/box/dataClasses/equals/intarray.kt");
      }

      @TestMetadata("null.kt")
      public void testNull() {
        runTest("compiler/testData/codegen/box/dataClasses/equals/null.kt");
      }

      @TestMetadata("nullother.kt")
      public void testNullother() {
        runTest("compiler/testData/codegen/box/dataClasses/equals/nullother.kt");
      }

      @TestMetadata("sameinstance.kt")
      public void testSameinstance() {
        runTest("compiler/testData/codegen/box/dataClasses/equals/sameinstance.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/dataClasses/hashCode")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class HashCode extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInHashCode() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/dataClasses/hashCode"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("alreadyDeclared.kt")
      public void testAlreadyDeclared() {
        runTest("compiler/testData/codegen/box/dataClasses/hashCode/alreadyDeclared.kt");
      }

      @TestMetadata("alreadyDeclaredWrongSignature.kt")
      public void testAlreadyDeclaredWrongSignature() {
        runTest("compiler/testData/codegen/box/dataClasses/hashCode/alreadyDeclaredWrongSignature.kt");
      }

      @TestMetadata("array.kt")
      public void testArray() {
        runTest("compiler/testData/codegen/box/dataClasses/hashCode/array.kt");
      }

      @TestMetadata("boolean.kt")
      public void testBoolean() {
        runTest("compiler/testData/codegen/box/dataClasses/hashCode/boolean.kt");
      }

      @TestMetadata("byte.kt")
      public void testByte() {
        runTest("compiler/testData/codegen/box/dataClasses/hashCode/byte.kt");
      }

      @TestMetadata("char.kt")
      public void testChar() {
        runTest("compiler/testData/codegen/box/dataClasses/hashCode/char.kt");
      }

      @TestMetadata("double.kt")
      public void testDouble() {
        runTest("compiler/testData/codegen/box/dataClasses/hashCode/double.kt");
      }

      @TestMetadata("float.kt")
      public void testFloat() {
        runTest("compiler/testData/codegen/box/dataClasses/hashCode/float.kt");
      }

      @TestMetadata("genericNull.kt")
      public void testGenericNull() {
        runTest("compiler/testData/codegen/box/dataClasses/hashCode/genericNull.kt");
      }

      @TestMetadata("int.kt")
      public void testInt() {
        runTest("compiler/testData/codegen/box/dataClasses/hashCode/int.kt");
      }

      @TestMetadata("long.kt")
      public void testLong() {
        runTest("compiler/testData/codegen/box/dataClasses/hashCode/long.kt");
      }

      @TestMetadata("null.kt")
      public void testNull() {
        runTest("compiler/testData/codegen/box/dataClasses/hashCode/null.kt");
      }

      @TestMetadata("short.kt")
      public void testShort() {
        runTest("compiler/testData/codegen/box/dataClasses/hashCode/short.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/dataClasses/toString")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ToString extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInToString() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/dataClasses/toString"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("alreadyDeclared.kt")
      public void testAlreadyDeclared() {
        runTest("compiler/testData/codegen/box/dataClasses/toString/alreadyDeclared.kt");
      }

      @TestMetadata("alreadyDeclaredWrongSignature.kt")
      public void testAlreadyDeclaredWrongSignature() {
        runTest("compiler/testData/codegen/box/dataClasses/toString/alreadyDeclaredWrongSignature.kt");
      }

      @TestMetadata("arrayParams.kt")
      public void testArrayParams() {
        runTest("compiler/testData/codegen/box/dataClasses/toString/arrayParams.kt");
      }

      @TestMetadata("changingVarParam.kt")
      public void testChangingVarParam() {
        runTest("compiler/testData/codegen/box/dataClasses/toString/changingVarParam.kt");
      }

      @TestMetadata("genericParam.kt")
      public void testGenericParam() {
        runTest("compiler/testData/codegen/box/dataClasses/toString/genericParam.kt");
      }

      @TestMetadata("mixedParams.kt")
      public void testMixedParams() {
        runTest("compiler/testData/codegen/box/dataClasses/toString/mixedParams.kt");
      }

      @TestMetadata("primitiveArrays.kt")
      public void testPrimitiveArrays() {
        runTest("compiler/testData/codegen/box/dataClasses/toString/primitiveArrays.kt");
      }

      @TestMetadata("unitComponent.kt")
      public void testUnitComponent() {
        runTest("compiler/testData/codegen/box/dataClasses/toString/unitComponent.kt");
      }
    }
  }

  @TestMetadata("compiler/testData/codegen/box/dataObjects")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class DataObjects extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInDataObjects() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/dataObjects"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("equals.kt")
    public void testEquals() {
      runTest("compiler/testData/codegen/box/dataObjects/equals.kt");
    }

    @TestMetadata("hashCode.kt")
    public void testHashCode() {
      runTest("compiler/testData/codegen/box/dataObjects/hashCode.kt");
    }

    @TestMetadata("multipleInstances.kt")
    public void testMultipleInstances() {
      runTest("compiler/testData/codegen/box/dataObjects/multipleInstances.kt");
    }

    @TestMetadata("serialization.kt")
    public void testSerialization() {
      runTest("compiler/testData/codegen/box/dataObjects/serialization.kt");
    }

    @TestMetadata("toString.kt")
    public void testToString() {
      runTest("compiler/testData/codegen/box/dataObjects/toString.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/dataflow")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Dataflow extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInDataflow() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/dataflow"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("scope1.kt")
    public void testScope1() {
      runTest("compiler/testData/codegen/box/dataflow/scope1.kt");
    }

    @TestMetadata("uninitialized_val.kt")
    public void testUninitialized_val() {
      runTest("compiler/testData/codegen/box/dataflow/uninitialized_val.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/deadCodeElimination")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class DeadCodeElimination extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInDeadCodeElimination() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/deadCodeElimination"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("emptyVariableRange.kt")
    public void testEmptyVariableRange() {
      runTest("compiler/testData/codegen/box/deadCodeElimination/emptyVariableRange.kt");
    }

    @TestMetadata("intersectingVariableRange.kt")
    public void testIntersectingVariableRange() {
      runTest("compiler/testData/codegen/box/deadCodeElimination/intersectingVariableRange.kt");
    }

    @TestMetadata("intersectingVariableRangeInFinally.kt")
    public void testIntersectingVariableRangeInFinally() {
      runTest("compiler/testData/codegen/box/deadCodeElimination/intersectingVariableRangeInFinally.kt");
    }

    @TestMetadata("kt14357.kt")
    public void testKt14357() {
      runTest("compiler/testData/codegen/box/deadCodeElimination/kt14357.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/defaultArguments")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class DefaultArguments extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInDefaultArguments() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/defaultArguments"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("callDefaultFromInitializer.kt")
    public void testCallDefaultFromInitializer() {
      runTest("compiler/testData/codegen/box/defaultArguments/callDefaultFromInitializer.kt");
    }

    @TestMetadata("captureInTailrec.kt")
    public void testCaptureInTailrec() {
      runTest("compiler/testData/codegen/box/defaultArguments/captureInTailrec.kt");
    }

    @TestMetadata("complexInheritance.kt")
    public void testComplexInheritance() {
      runTest("compiler/testData/codegen/box/defaultArguments/complexInheritance.kt");
    }

    @TestMetadata("implementedByFake.kt")
    public void testImplementedByFake() {
      runTest("compiler/testData/codegen/box/defaultArguments/implementedByFake.kt");
    }

    @TestMetadata("implementedByFake2.kt")
    public void testImplementedByFake2() {
      runTest("compiler/testData/codegen/box/defaultArguments/implementedByFake2.kt");
    }

    @TestMetadata("implementedByFake3.kt")
    public void testImplementedByFake3() {
      runTest("compiler/testData/codegen/box/defaultArguments/implementedByFake3.kt");
    }

    @TestMetadata("inheritedFromInterfaceViaAbstractSuperclass.kt")
    public void testInheritedFromInterfaceViaAbstractSuperclass() {
      runTest("compiler/testData/codegen/box/defaultArguments/inheritedFromInterfaceViaAbstractSuperclass.kt");
    }

    @TestMetadata("kt36853.kt")
    public void testKt36853() {
      runTest("compiler/testData/codegen/box/defaultArguments/kt36853.kt");
    }

    @TestMetadata("kt36853_fibonacci.kt")
    public void testKt36853_fibonacci() {
      runTest("compiler/testData/codegen/box/defaultArguments/kt36853_fibonacci.kt");
    }

    @TestMetadata("kt36853_nestedObject.kt")
    public void testKt36853_nestedObject() {
      runTest("compiler/testData/codegen/box/defaultArguments/kt36853_nestedObject.kt");
    }

    @TestMetadata("kt36853a.kt")
    public void testKt36853a() {
      runTest("compiler/testData/codegen/box/defaultArguments/kt36853a.kt");
    }

    @TestMetadata("kt36972_companion.kt")
    public void testKt36972_companion() {
      runTest("compiler/testData/codegen/box/defaultArguments/kt36972_companion.kt");
    }

    @TestMetadata("kt36972_object.kt")
    public void testKt36972_object() {
      runTest("compiler/testData/codegen/box/defaultArguments/kt36972_object.kt");
    }

    @TestMetadata("kt46189.kt")
    public void testKt46189() {
      runTest("compiler/testData/codegen/box/defaultArguments/kt46189.kt");
    }

    @TestMetadata("kt47073.kt")
    public void testKt47073() {
      runTest("compiler/testData/codegen/box/defaultArguments/kt47073.kt");
    }

    @TestMetadata("kt47073_nested.kt")
    public void testKt47073_nested() {
      runTest("compiler/testData/codegen/box/defaultArguments/kt47073_nested.kt");
    }

    @TestMetadata("kt48391.kt")
    public void testKt48391() {
      runTest("compiler/testData/codegen/box/defaultArguments/kt48391.kt");
    }

    @TestMetadata("kt52702.kt")
    public void testKt52702() {
      runTest("compiler/testData/codegen/box/defaultArguments/kt52702.kt");
    }

    @TestMetadata("kt6382.kt")
    public void testKt6382() {
      runTest("compiler/testData/codegen/box/defaultArguments/kt6382.kt");
    }

    @TestMetadata("protected.kt")
    public void testProtected() {
      runTest("compiler/testData/codegen/box/defaultArguments/protected.kt");
    }

    @TestMetadata("recursiveDefaultArguments.kt")
    public void testRecursiveDefaultArguments() {
      runTest("compiler/testData/codegen/box/defaultArguments/recursiveDefaultArguments.kt");
    }

    @TestMetadata("referenceAsArg.kt")
    public void testReferenceAsArg() {
      runTest("compiler/testData/codegen/box/defaultArguments/referenceAsArg.kt");
    }

    @TestMetadata("simpleFromOtherFile.kt")
    public void testSimpleFromOtherFile() {
      runTest("compiler/testData/codegen/box/defaultArguments/simpleFromOtherFile.kt");
    }

    @TestMetadata("superCallCheck.kt")
    public void testSuperCallCheck() {
      runTest("compiler/testData/codegen/box/defaultArguments/superCallCheck.kt");
    }

    @TestMetadata("superCallHandlerOrder.kt")
    public void testSuperCallHandlerOrder() {
      runTest("compiler/testData/codegen/box/defaultArguments/superCallHandlerOrder.kt");
    }

    @TestMetadata("useNextParamInLambda.kt")
    public void testUseNextParamInLambda() {
      runTest("compiler/testData/codegen/box/defaultArguments/useNextParamInLambda.kt");
    }

    @TestMetadata("useNextParamInLambdaTailrec.kt")
    public void testUseNextParamInLambdaTailrec() {
      runTest("compiler/testData/codegen/box/defaultArguments/useNextParamInLambdaTailrec.kt");
    }

    @TestMetadata("useThisInLambda.kt")
    public void testUseThisInLambda() {
      runTest("compiler/testData/codegen/box/defaultArguments/useThisInLambda.kt");
    }

    @TestMetadata("compiler/testData/codegen/box/defaultArguments/constructor")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Constructor extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInConstructor() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/defaultArguments/constructor"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("annotation.kt")
      public void testAnnotation() {
        runTest("compiler/testData/codegen/box/defaultArguments/constructor/annotation.kt");
      }

      @TestMetadata("annotationWithEmptyArray.kt")
      public void testAnnotationWithEmptyArray() {
        runTest("compiler/testData/codegen/box/defaultArguments/constructor/annotationWithEmptyArray.kt");
      }

      @TestMetadata("checkIfConstructorIsSynthetic.kt")
      public void testCheckIfConstructorIsSynthetic() {
        runTest("compiler/testData/codegen/box/defaultArguments/constructor/checkIfConstructorIsSynthetic.kt");
      }

      @TestMetadata("defArgs1.kt")
      public void testDefArgs1() {
        runTest("compiler/testData/codegen/box/defaultArguments/constructor/defArgs1.kt");
      }

      @TestMetadata("defArgs1InnerClass.kt")
      public void testDefArgs1InnerClass() {
        runTest("compiler/testData/codegen/box/defaultArguments/constructor/defArgs1InnerClass.kt");
      }

      @TestMetadata("defArgs2.kt")
      public void testDefArgs2() {
        runTest("compiler/testData/codegen/box/defaultArguments/constructor/defArgs2.kt");
      }

      @TestMetadata("doubleDefArgs1InnerClass.kt")
      public void testDoubleDefArgs1InnerClass() {
        runTest("compiler/testData/codegen/box/defaultArguments/constructor/doubleDefArgs1InnerClass.kt");
      }

      @TestMetadata("enum.kt")
      public void testEnum() {
        runTest("compiler/testData/codegen/box/defaultArguments/constructor/enum.kt");
      }

      @TestMetadata("enumWithOneDefArg.kt")
      public void testEnumWithOneDefArg() {
        runTest("compiler/testData/codegen/box/defaultArguments/constructor/enumWithOneDefArg.kt");
      }

      @TestMetadata("enumWithTwoDefArgs.kt")
      public void testEnumWithTwoDefArgs() {
        runTest("compiler/testData/codegen/box/defaultArguments/constructor/enumWithTwoDefArgs.kt");
      }

      @TestMetadata("enumWithTwoDoubleDefArgs.kt")
      public void testEnumWithTwoDoubleDefArgs() {
        runTest("compiler/testData/codegen/box/defaultArguments/constructor/enumWithTwoDoubleDefArgs.kt");
      }

      @TestMetadata("innerClass32Args.kt")
      public void testInnerClass32Args() {
        runTest("compiler/testData/codegen/box/defaultArguments/constructor/innerClass32Args.kt");
      }

      @TestMetadata("kt2852.kt")
      public void testKt2852() {
        runTest("compiler/testData/codegen/box/defaultArguments/constructor/kt2852.kt");
      }

      @TestMetadata("kt30517.kt")
      public void testKt30517() {
        runTest("compiler/testData/codegen/box/defaultArguments/constructor/kt30517.kt");
      }

      @TestMetadata("kt3060.kt")
      public void testKt3060() {
        runTest("compiler/testData/codegen/box/defaultArguments/constructor/kt3060.kt");
      }

      @TestMetadata("manyArgs.kt")
      public void testManyArgs() {
        runTest("compiler/testData/codegen/box/defaultArguments/constructor/manyArgs.kt");
      }

      @TestMetadata("objectExpressionDelegatingToSecondaryConstructor.kt")
      public void testObjectExpressionDelegatingToSecondaryConstructor() {
        runTest("compiler/testData/codegen/box/defaultArguments/constructor/objectExpressionDelegatingToSecondaryConstructor.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/defaultArguments/convention")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Convention extends AbstractLightAnalysisModeTest {
      @TestMetadata("kt16520_old.kt")
      public void ignoreKt16520_old() {
        runTest("compiler/testData/codegen/box/defaultArguments/convention/kt16520_old.kt");
      }

      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInConvention() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/defaultArguments/convention"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("incWithDefaultInGetter.kt")
      public void testIncWithDefaultInGetter() {
        runTest("compiler/testData/codegen/box/defaultArguments/convention/incWithDefaultInGetter.kt");
      }

      @TestMetadata("incWithDefaults.kt")
      public void testIncWithDefaults() {
        runTest("compiler/testData/codegen/box/defaultArguments/convention/incWithDefaults.kt");
      }

      @TestMetadata("kt16520.kt")
      public void testKt16520() {
        runTest("compiler/testData/codegen/box/defaultArguments/convention/kt16520.kt");
      }

      @TestMetadata("kt9140.kt")
      public void testKt9140() {
        runTest("compiler/testData/codegen/box/defaultArguments/convention/kt9140.kt");
      }

      @TestMetadata("plusAssignWithDefaultInGetter.kt")
      public void testPlusAssignWithDefaultInGetter() {
        runTest("compiler/testData/codegen/box/defaultArguments/convention/plusAssignWithDefaultInGetter.kt");
      }

      @TestMetadata("plusAssignWithDefaults.kt")
      public void testPlusAssignWithDefaults() {
        runTest("compiler/testData/codegen/box/defaultArguments/convention/plusAssignWithDefaults.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/defaultArguments/function")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Function extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      @TestMetadata("abstractClass.kt")
      public void testAbstractClass() {
        runTest("compiler/testData/codegen/box/defaultArguments/function/abstractClass.kt");
      }

      public void testAllFilesPresentInFunction() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/defaultArguments/function"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("complexInheritance.kt")
      public void testComplexInheritance() {
        runTest("compiler/testData/codegen/box/defaultArguments/function/complexInheritance.kt");
      }

      @TestMetadata("covariantOverride.kt")
      public void testCovariantOverride() {
        runTest("compiler/testData/codegen/box/defaultArguments/function/covariantOverride.kt");
      }

      @TestMetadata("covariantOverrideGeneric.kt")
      public void testCovariantOverrideGeneric() {
        runTest("compiler/testData/codegen/box/defaultArguments/function/covariantOverrideGeneric.kt");
      }

      @TestMetadata("defaultLambdaInline.kt")
      public void testDefaultLambdaInline() {
        runTest("compiler/testData/codegen/box/defaultArguments/function/defaultLambdaInline.kt");
      }

      @TestMetadata("extensionFunctionManyArgs.kt")
      public void testExtensionFunctionManyArgs() {
        runTest("compiler/testData/codegen/box/defaultArguments/function/extensionFunctionManyArgs.kt");
      }

      @TestMetadata("extentionFunction.kt")
      public void testExtentionFunction() {
        runTest("compiler/testData/codegen/box/defaultArguments/function/extentionFunction.kt");
      }

      @TestMetadata("extentionFunctionDouble.kt")
      public void testExtentionFunctionDouble() {
        runTest("compiler/testData/codegen/box/defaultArguments/function/extentionFunctionDouble.kt");
      }

      @TestMetadata("extentionFunctionDoubleTwoArgs.kt")
      public void testExtentionFunctionDoubleTwoArgs() {
        runTest("compiler/testData/codegen/box/defaultArguments/function/extentionFunctionDoubleTwoArgs.kt");
      }

      @TestMetadata("extentionFunctionInClassObject.kt")
      public void testExtentionFunctionInClassObject() {
        runTest("compiler/testData/codegen/box/defaultArguments/function/extentionFunctionInClassObject.kt");
      }

      @TestMetadata("extentionFunctionInObject.kt")
      public void testExtentionFunctionInObject() {
        runTest("compiler/testData/codegen/box/defaultArguments/function/extentionFunctionInObject.kt");
      }

      @TestMetadata("extentionFunctionWithOneDefArg.kt")
      public void testExtentionFunctionWithOneDefArg() {
        runTest("compiler/testData/codegen/box/defaultArguments/function/extentionFunctionWithOneDefArg.kt");
      }

      @TestMetadata("funInTrait.kt")
      public void testFunInTrait() {
        runTest("compiler/testData/codegen/box/defaultArguments/function/funInTrait.kt");
      }

      @TestMetadata("funInTraitChain.kt")
      public void testFunInTraitChain() {
        runTest("compiler/testData/codegen/box/defaultArguments/function/funInTraitChain.kt");
      }

      @TestMetadata("innerExtentionFunction.kt")
      public void testInnerExtentionFunction() {
        runTest("compiler/testData/codegen/box/defaultArguments/function/innerExtentionFunction.kt");
      }

      @TestMetadata("innerExtentionFunctionDouble.kt")
      public void testInnerExtentionFunctionDouble() {
        runTest("compiler/testData/codegen/box/defaultArguments/function/innerExtentionFunctionDouble.kt");
      }

      @TestMetadata("innerExtentionFunctionDoubleTwoArgs.kt")
      public void testInnerExtentionFunctionDoubleTwoArgs() {
        runTest("compiler/testData/codegen/box/defaultArguments/function/innerExtentionFunctionDoubleTwoArgs.kt");
      }

      @TestMetadata("innerExtentionFunctionManyArgs.kt")
      public void testInnerExtentionFunctionManyArgs() {
        runTest("compiler/testData/codegen/box/defaultArguments/function/innerExtentionFunctionManyArgs.kt");
      }

      @TestMetadata("kt15971.kt")
      public void testKt15971() {
        runTest("compiler/testData/codegen/box/defaultArguments/function/kt15971.kt");
      }

      @TestMetadata("kt15971_2.kt")
      public void testKt15971_2() {
        runTest("compiler/testData/codegen/box/defaultArguments/function/kt15971_2.kt");
      }

      @TestMetadata("kt15971_3.kt")
      public void testKt15971_3() {
        runTest("compiler/testData/codegen/box/defaultArguments/function/kt15971_3.kt");
      }

      @TestMetadata("kt36188.kt")
      public void testKt36188() {
        runTest("compiler/testData/codegen/box/defaultArguments/function/kt36188.kt");
      }

      @TestMetadata("kt36188_2.kt")
      public void testKt36188_2() {
        runTest("compiler/testData/codegen/box/defaultArguments/function/kt36188_2.kt");
      }

      @TestMetadata("kt5232.kt")
      public void testKt5232() {
        runTest("compiler/testData/codegen/box/defaultArguments/function/kt5232.kt");
      }

      @TestMetadata("memberFunctionManyArgs.kt")
      public void testMemberFunctionManyArgs() {
        runTest("compiler/testData/codegen/box/defaultArguments/function/memberFunctionManyArgs.kt");
      }

      @TestMetadata("mixingNamedAndPositioned.kt")
      public void testMixingNamedAndPositioned() {
        runTest("compiler/testData/codegen/box/defaultArguments/function/mixingNamedAndPositioned.kt");
      }

      @TestMetadata("topLevelManyArgs.kt")
      public void testTopLevelManyArgs() {
        runTest("compiler/testData/codegen/box/defaultArguments/function/topLevelManyArgs.kt");
      }

      @TestMetadata("trait.kt")
      public void testTrait() {
        runTest("compiler/testData/codegen/box/defaultArguments/function/trait.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/defaultArguments/private")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Private extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInPrivate() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/defaultArguments/private"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("memberExtensionFunction.kt")
      public void testMemberExtensionFunction() {
        runTest("compiler/testData/codegen/box/defaultArguments/private/memberExtensionFunction.kt");
      }

      @TestMetadata("memberFunction.kt")
      public void testMemberFunction() {
        runTest("compiler/testData/codegen/box/defaultArguments/private/memberFunction.kt");
      }

      @TestMetadata("primaryConstructor.kt")
      public void testPrimaryConstructor() {
        runTest("compiler/testData/codegen/box/defaultArguments/private/primaryConstructor.kt");
      }

      @TestMetadata("secondaryConstructor.kt")
      public void testSecondaryConstructor() {
        runTest("compiler/testData/codegen/box/defaultArguments/private/secondaryConstructor.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/defaultArguments/signature")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Signature extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInSignature() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/defaultArguments/signature"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("kt2789.kt")
      public void testKt2789() {
        runTest("compiler/testData/codegen/box/defaultArguments/signature/kt2789.kt");
      }

      @TestMetadata("kt9428.kt")
      public void testKt9428() {
        runTest("compiler/testData/codegen/box/defaultArguments/signature/kt9428.kt");
      }

      @TestMetadata("kt9924.kt")
      public void testKt9924() {
        runTest("compiler/testData/codegen/box/defaultArguments/signature/kt9924.kt");
      }
    }
  }

  @TestMetadata("compiler/testData/codegen/box/delegatedProperty")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class DelegatedProperty extends AbstractLightAnalysisModeTest {
    @TestMetadata("genericDelegateUncheckedCast2.kt")
    public void ignoreGenericDelegateUncheckedCast2() {
      runTest("compiler/testData/codegen/box/delegatedProperty/genericDelegateUncheckedCast2.kt");
    }

    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    @TestMetadata("accessTopLevelDelegatedPropertyInClinit.kt")
    public void testAccessTopLevelDelegatedPropertyInClinit() {
      runTest("compiler/testData/codegen/box/delegatedProperty/accessTopLevelDelegatedPropertyInClinit.kt");
    }

    public void testAllFilesPresentInDelegatedProperty() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/delegatedProperty"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("beforeDeclarationContainerOptimization.kt")
    public void testBeforeDeclarationContainerOptimization() {
      runTest("compiler/testData/codegen/box/delegatedProperty/beforeDeclarationContainerOptimization.kt");
    }

    @TestMetadata("callableReferenceAsSecondArgumentOfDelegate.kt")
    public void testCallableReferenceAsSecondArgumentOfDelegate() {
      runTest("compiler/testData/codegen/box/delegatedProperty/callableReferenceAsSecondArgumentOfDelegate.kt");
    }

    @TestMetadata("capturePropertyInClosure.kt")
    public void testCapturePropertyInClosure() {
      runTest("compiler/testData/codegen/box/delegatedProperty/capturePropertyInClosure.kt");
    }

    @TestMetadata("castGetReturnType.kt")
    public void testCastGetReturnType() {
      runTest("compiler/testData/codegen/box/delegatedProperty/castGetReturnType.kt");
    }

    @TestMetadata("castSetParameter.kt")
    public void testCastSetParameter() {
      runTest("compiler/testData/codegen/box/delegatedProperty/castSetParameter.kt");
    }

    @TestMetadata("correctFieldsOrder.kt")
    public void testCorrectFieldsOrder() {
      runTest("compiler/testData/codegen/box/delegatedProperty/correctFieldsOrder.kt");
    }

    @TestMetadata("delegateAsInnerClass.kt")
    public void testDelegateAsInnerClass() {
      runTest("compiler/testData/codegen/box/delegatedProperty/delegateAsInnerClass.kt");
    }

    @TestMetadata("delegateByOtherProperty.kt")
    public void testDelegateByOtherProperty() {
      runTest("compiler/testData/codegen/box/delegatedProperty/delegateByOtherProperty.kt");
    }

    @TestMetadata("delegateByTopLevelFun.kt")
    public void testDelegateByTopLevelFun() {
      runTest("compiler/testData/codegen/box/delegatedProperty/delegateByTopLevelFun.kt");
    }

    @TestMetadata("delegateByTopLevelProperty.kt")
    public void testDelegateByTopLevelProperty() {
      runTest("compiler/testData/codegen/box/delegatedProperty/delegateByTopLevelProperty.kt");
    }

    @TestMetadata("delegateForExtProperty.kt")
    public void testDelegateForExtProperty() {
      runTest("compiler/testData/codegen/box/delegatedProperty/delegateForExtProperty.kt");
    }

    @TestMetadata("delegateForExtPropertyInClass.kt")
    public void testDelegateForExtPropertyInClass() {
      runTest("compiler/testData/codegen/box/delegatedProperty/delegateForExtPropertyInClass.kt");
    }

    @TestMetadata("delegateToConstVal.kt")
    public void testDelegateToConstVal() {
      runTest("compiler/testData/codegen/box/delegatedProperty/delegateToConstVal.kt");
    }

    @TestMetadata("delegateToConstructorParameter.kt")
    public void testDelegateToConstructorParameter() {
      runTest("compiler/testData/codegen/box/delegatedProperty/delegateToConstructorParameter.kt");
    }

    @TestMetadata("delegateToJavaFinalStaticField.kt")
    public void testDelegateToJavaFinalStaticField() {
      runTest("compiler/testData/codegen/box/delegatedProperty/delegateToJavaFinalStaticField.kt");
    }

    @TestMetadata("delegateWithPrivateSet.kt")
    public void testDelegateWithPrivateSet() {
      runTest("compiler/testData/codegen/box/delegatedProperty/delegateWithPrivateSet.kt");
    }

    @TestMetadata("delegatedOverride.kt")
    public void testDelegatedOverride() {
      runTest("compiler/testData/codegen/box/delegatedProperty/delegatedOverride.kt");
    }

    @TestMetadata("delegatedPropertyInEnum.kt")
    public void testDelegatedPropertyInEnum() {
      runTest("compiler/testData/codegen/box/delegatedProperty/delegatedPropertyInEnum.kt");
    }

    @TestMetadata("DelegationByFunctionWithEnumUpperBound.kt")
    public void testDelegationByFunctionWithEnumUpperBound() {
      runTest("compiler/testData/codegen/box/delegatedProperty/DelegationByFunctionWithEnumUpperBound.kt");
    }

    @TestMetadata("extensionDelegatesWithSameNames.kt")
    public void testExtensionDelegatesWithSameNames() {
      runTest("compiler/testData/codegen/box/delegatedProperty/extensionDelegatesWithSameNames.kt");
    }

    @TestMetadata("extensionPropertyAndExtensionGetValue.kt")
    public void testExtensionPropertyAndExtensionGetValue() {
      runTest("compiler/testData/codegen/box/delegatedProperty/extensionPropertyAndExtensionGetValue.kt");
    }

    @TestMetadata("functionRefDelefate.kt")
    public void testFunctionRefDelefate() {
      runTest("compiler/testData/codegen/box/delegatedProperty/functionRefDelefate.kt");
    }

    @TestMetadata("genericDelegate.kt")
    public void testGenericDelegate() {
      runTest("compiler/testData/codegen/box/delegatedProperty/genericDelegate.kt");
    }

    @TestMetadata("genericDelegateUncheckedCast1.kt")
    public void testGenericDelegateUncheckedCast1() {
      runTest("compiler/testData/codegen/box/delegatedProperty/genericDelegateUncheckedCast1.kt");
    }

    @TestMetadata("genericSetValueViaSyntheticAccessor.kt")
    public void testGenericSetValueViaSyntheticAccessor() {
      runTest("compiler/testData/codegen/box/delegatedProperty/genericSetValueViaSyntheticAccessor.kt");
    }

    @TestMetadata("getAsExtensionFun.kt")
    public void testGetAsExtensionFun() {
      runTest("compiler/testData/codegen/box/delegatedProperty/getAsExtensionFun.kt");
    }

    @TestMetadata("getAsExtensionFunInClass.kt")
    public void testGetAsExtensionFunInClass() {
      runTest("compiler/testData/codegen/box/delegatedProperty/getAsExtensionFunInClass.kt");
    }

    @TestMetadata("getDelegateWithoutReflection.kt")
    public void testGetDelegateWithoutReflection() {
      runTest("compiler/testData/codegen/box/delegatedProperty/getDelegateWithoutReflection.kt");
    }

    @TestMetadata("inClassVal.kt")
    public void testInClassVal() {
      runTest("compiler/testData/codegen/box/delegatedProperty/inClassVal.kt");
    }

    @TestMetadata("inClassVar.kt")
    public void testInClassVar() {
      runTest("compiler/testData/codegen/box/delegatedProperty/inClassVar.kt");
    }

    @TestMetadata("inTrait.kt")
    public void testInTrait() {
      runTest("compiler/testData/codegen/box/delegatedProperty/inTrait.kt");
    }

    @TestMetadata("inferredPropertyType.kt")
    public void testInferredPropertyType() {
      runTest("compiler/testData/codegen/box/delegatedProperty/inferredPropertyType.kt");
    }

    @TestMetadata("insideInlinedObjectMultiModule.kt")
    public void testInsideInlinedObjectMultiModule() {
      runTest("compiler/testData/codegen/box/delegatedProperty/insideInlinedObjectMultiModule.kt");
    }

    @TestMetadata("javaDelegateTopLevel.kt")
    public void testJavaDelegateTopLevel() {
      runTest("compiler/testData/codegen/box/delegatedProperty/javaDelegateTopLevel.kt");
    }

    @TestMetadata("kt35707.kt")
    public void testKt35707() {
      runTest("compiler/testData/codegen/box/delegatedProperty/kt35707.kt");
    }

    @TestMetadata("kt37204.kt")
    public void testKt37204() {
      runTest("compiler/testData/codegen/box/delegatedProperty/kt37204.kt");
    }

    @TestMetadata("kt4138.kt")
    public void testKt4138() {
      runTest("compiler/testData/codegen/box/delegatedProperty/kt4138.kt");
    }

    @TestMetadata("kt45431.kt")
    public void testKt45431() {
      runTest("compiler/testData/codegen/box/delegatedProperty/kt45431.kt");
    }

    @TestMetadata("kt6722.kt")
    public void testKt6722() {
      runTest("compiler/testData/codegen/box/delegatedProperty/kt6722.kt");
    }

    @TestMetadata("kt9712.kt")
    public void testKt9712() {
      runTest("compiler/testData/codegen/box/delegatedProperty/kt9712.kt");
    }

    @TestMetadata("lazy.kt")
    public void testLazy() {
      runTest("compiler/testData/codegen/box/delegatedProperty/lazy.kt");
    }

    @TestMetadata("local.kt")
    public void testLocal() {
      runTest("compiler/testData/codegen/box/delegatedProperty/local.kt");
    }

    @TestMetadata("map.kt")
    public void testMap() {
      runTest("compiler/testData/codegen/box/delegatedProperty/map.kt");
    }

    @TestMetadata("noTypeVariablesLeft.kt")
    public void testNoTypeVariablesLeft() {
      runTest("compiler/testData/codegen/box/delegatedProperty/noTypeVariablesLeft.kt");
    }

    @TestMetadata("observable.kt")
    public void testObservable() {
      runTest("compiler/testData/codegen/box/delegatedProperty/observable.kt");
    }

    @TestMetadata("packageLevel.kt")
    public void testPackageLevel() {
      runTest("compiler/testData/codegen/box/delegatedProperty/packageLevel.kt");
    }

    @TestMetadata("privateInSubClass.kt")
    public void testPrivateInSubClass() {
      runTest("compiler/testData/codegen/box/delegatedProperty/privateInSubClass.kt");
    }

    @TestMetadata("privateSetterKPropertyIsNotMutable.kt")
    public void testPrivateSetterKPropertyIsNotMutable() {
      runTest("compiler/testData/codegen/box/delegatedProperty/privateSetterKPropertyIsNotMutable.kt");
    }

    @TestMetadata("privateVar.kt")
    public void testPrivateVar() {
      runTest("compiler/testData/codegen/box/delegatedProperty/privateVar.kt");
    }

    @TestMetadata("propertyMetadataShouldBeCached.kt")
    public void testPropertyMetadataShouldBeCached() {
      runTest("compiler/testData/codegen/box/delegatedProperty/propertyMetadataShouldBeCached.kt");
    }

    @TestMetadata("protectedVarWithPrivateSet.kt")
    public void testProtectedVarWithPrivateSet() {
      runTest("compiler/testData/codegen/box/delegatedProperty/protectedVarWithPrivateSet.kt");
    }

    @TestMetadata("referenceEnclosingClassFieldInReceiver.kt")
    public void testReferenceEnclosingClassFieldInReceiver() {
      runTest("compiler/testData/codegen/box/delegatedProperty/referenceEnclosingClassFieldInReceiver.kt");
    }

    @TestMetadata("referenceEnclosingClassFieldInReceiver2.kt")
    public void testReferenceEnclosingClassFieldInReceiver2() {
      runTest("compiler/testData/codegen/box/delegatedProperty/referenceEnclosingClassFieldInReceiver2.kt");
    }

    @TestMetadata("resolveGetValueWithWholeDelegate.kt")
    public void testResolveGetValueWithWholeDelegate() {
      runTest("compiler/testData/codegen/box/delegatedProperty/resolveGetValueWithWholeDelegate.kt");
    }

    @TestMetadata("setAsExtensionFun.kt")
    public void testSetAsExtensionFun() {
      runTest("compiler/testData/codegen/box/delegatedProperty/setAsExtensionFun.kt");
    }

    @TestMetadata("setAsExtensionFunInClass.kt")
    public void testSetAsExtensionFunInClass() {
      runTest("compiler/testData/codegen/box/delegatedProperty/setAsExtensionFunInClass.kt");
    }

    @TestMetadata("simpleVal.kt")
    public void testSimpleVal() {
      runTest("compiler/testData/codegen/box/delegatedProperty/simpleVal.kt");
    }

    @TestMetadata("simpleVar.kt")
    public void testSimpleVar() {
      runTest("compiler/testData/codegen/box/delegatedProperty/simpleVar.kt");
    }

    @TestMetadata("stackOverflowOnCallFromGetValue.kt")
    public void testStackOverflowOnCallFromGetValue() {
      runTest("compiler/testData/codegen/box/delegatedProperty/stackOverflowOnCallFromGetValue.kt");
    }

    @TestMetadata("topLevelVal.kt")
    public void testTopLevelVal() {
      runTest("compiler/testData/codegen/box/delegatedProperty/topLevelVal.kt");
    }

    @TestMetadata("topLevelVar.kt")
    public void testTopLevelVar() {
      runTest("compiler/testData/codegen/box/delegatedProperty/topLevelVar.kt");
    }

    @TestMetadata("twoPropByOneDelegete.kt")
    public void testTwoPropByOneDelegete() {
      runTest("compiler/testData/codegen/box/delegatedProperty/twoPropByOneDelegete.kt");
    }

    @TestMetadata("typeParameterInDelegatedProperty.kt")
    public void testTypeParameterInDelegatedProperty() {
      runTest("compiler/testData/codegen/box/delegatedProperty/typeParameterInDelegatedProperty.kt");
    }

    @TestMetadata("useKPropertyLater.kt")
    public void testUseKPropertyLater() {
      runTest("compiler/testData/codegen/box/delegatedProperty/useKPropertyLater.kt");
    }

    @TestMetadata("useReflectionOnKProperty.kt")
    public void testUseReflectionOnKProperty() {
      runTest("compiler/testData/codegen/box/delegatedProperty/useReflectionOnKProperty.kt");
    }

    @TestMetadata("valByMapDelegatedProperty.kt")
    public void testValByMapDelegatedProperty() {
      runTest("compiler/testData/codegen/box/delegatedProperty/valByMapDelegatedProperty.kt");
    }

    @TestMetadata("valInInnerClass.kt")
    public void testValInInnerClass() {
      runTest("compiler/testData/codegen/box/delegatedProperty/valInInnerClass.kt");
    }

    @TestMetadata("varInInnerClass.kt")
    public void testVarInInnerClass() {
      runTest("compiler/testData/codegen/box/delegatedProperty/varInInnerClass.kt");
    }

    @TestMetadata("compiler/testData/codegen/box/delegatedProperty/delegateToAnother")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class DelegateToAnother extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInDelegateToAnother() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/delegatedProperty/delegateToAnother"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("custom.kt")
      public void testCustom() {
        runTest("compiler/testData/codegen/box/delegatedProperty/delegateToAnother/custom.kt");
      }

      @TestMetadata("genericJavaProperty.kt")
      public void testGenericJavaProperty() {
        runTest("compiler/testData/codegen/box/delegatedProperty/delegateToAnother/genericJavaProperty.kt");
      }

      @TestMetadata("kt49793_companionObject.kt")
      public void testKt49793_companionObject() {
        runTest("compiler/testData/codegen/box/delegatedProperty/delegateToAnother/kt49793_companionObject.kt");
      }

      @TestMetadata("kt49793_interfaceCompanionObject.kt")
      public void testKt49793_interfaceCompanionObject() {
        runTest("compiler/testData/codegen/box/delegatedProperty/delegateToAnother/kt49793_interfaceCompanionObject.kt");
      }

      @TestMetadata("kt49793_object.kt")
      public void testKt49793_object() {
        runTest("compiler/testData/codegen/box/delegatedProperty/delegateToAnother/kt49793_object.kt");
      }

      @TestMetadata("kt57955.kt")
      public void testKt57955() {
        runTest("compiler/testData/codegen/box/delegatedProperty/delegateToAnother/kt57955.kt");
      }

      @TestMetadata("mutable.kt")
      public void testMutable() {
        runTest("compiler/testData/codegen/box/delegatedProperty/delegateToAnother/mutable.kt");
      }

      @TestMetadata("openProperty.kt")
      public void testOpenProperty() {
        runTest("compiler/testData/codegen/box/delegatedProperty/delegateToAnother/openProperty.kt");
      }

      @TestMetadata("simple.kt")
      public void testSimple() {
        runTest("compiler/testData/codegen/box/delegatedProperty/delegateToAnother/simple.kt");
      }

      @TestMetadata("withSideEffects.kt")
      public void testWithSideEffects() {
        runTest("compiler/testData/codegen/box/delegatedProperty/delegateToAnother/withSideEffects.kt");
      }

      @TestMetadata("withSideEffectsFromFileClass.kt")
      public void testWithSideEffectsFromFileClass() {
        runTest("compiler/testData/codegen/box/delegatedProperty/delegateToAnother/withSideEffectsFromFileClass.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/delegatedProperty/delegateToConst")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class DelegateToConst extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInDelegateToConst() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/delegatedProperty/delegateToConst"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("delegateToConst.kt")
      public void testDelegateToConst() {
        runTest("compiler/testData/codegen/box/delegatedProperty/delegateToConst/delegateToConst.kt");
      }

      @TestMetadata("delegateToConstProperty.kt")
      public void testDelegateToConstProperty() {
        runTest("compiler/testData/codegen/box/delegatedProperty/delegateToConst/delegateToConstProperty.kt");
      }

      @TestMetadata("delegateToNull.kt")
      public void testDelegateToNull() {
        runTest("compiler/testData/codegen/box/delegatedProperty/delegateToConst/delegateToNull.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/delegatedProperty/delegateToFinalProperty")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class DelegateToFinalProperty extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInDelegateToFinalProperty() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/delegatedProperty/delegateToFinalProperty"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("chain.kt")
      public void testChain() {
        runTest("compiler/testData/codegen/box/delegatedProperty/delegateToFinalProperty/chain.kt");
      }

      @TestMetadata("delegateToFinalInstanceProperty.kt")
      public void testDelegateToFinalInstanceProperty() {
        runTest("compiler/testData/codegen/box/delegatedProperty/delegateToFinalProperty/delegateToFinalInstanceProperty.kt");
      }

      @TestMetadata("delegateToFinalObjectProperty.kt")
      public void testDelegateToFinalObjectProperty() {
        runTest("compiler/testData/codegen/box/delegatedProperty/delegateToFinalProperty/delegateToFinalObjectProperty.kt");
      }

      @TestMetadata("delegateToFinalProperty.kt")
      public void testDelegateToFinalProperty() {
        runTest("compiler/testData/codegen/box/delegatedProperty/delegateToFinalProperty/delegateToFinalProperty.kt");
      }

      @TestMetadata("finalPropertyInAnotherFile.kt")
      public void testFinalPropertyInAnotherFile() {
        runTest("compiler/testData/codegen/box/delegatedProperty/delegateToFinalProperty/finalPropertyInAnotherFile.kt");
      }

      @TestMetadata("initializeContainerOfTopLevelProperties.kt")
      public void testInitializeContainerOfTopLevelProperties() {
        runTest("compiler/testData/codegen/box/delegatedProperty/delegateToFinalProperty/initializeContainerOfTopLevelProperties.kt");
      }

      @TestMetadata("kt54463_platformType.kt")
      public void testKt54463_platformType() {
        runTest("compiler/testData/codegen/box/delegatedProperty/delegateToFinalProperty/kt54463_platformType.kt");
      }

      @TestMetadata("memberExtensionPropertyAndImportFromObject.kt")
      public void testMemberExtensionPropertyAndImportFromObject() {
        runTest("compiler/testData/codegen/box/delegatedProperty/delegateToFinalProperty/memberExtensionPropertyAndImportFromObject.kt");
      }

      @TestMetadata("memberExtensionPropertyAndLocalDelegatedProperty.kt")
      public void testMemberExtensionPropertyAndLocalDelegatedProperty() {
        runTest("compiler/testData/codegen/box/delegatedProperty/delegateToFinalProperty/memberExtensionPropertyAndLocalDelegatedProperty.kt");
      }

      @TestMetadata("multimodule.kt")
      public void testMultimodule() {
        runTest("compiler/testData/codegen/box/delegatedProperty/delegateToFinalProperty/multimodule.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/delegatedProperty/delegateToSingleton")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class DelegateToSingleton extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInDelegateToSingleton() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/delegatedProperty/delegateToSingleton"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("delegateToEnum.kt")
      public void testDelegateToEnum() {
        runTest("compiler/testData/codegen/box/delegatedProperty/delegateToSingleton/delegateToEnum.kt");
      }

      @TestMetadata("delegateToEnumInAClass.kt")
      public void testDelegateToEnumInAClass() {
        runTest("compiler/testData/codegen/box/delegatedProperty/delegateToSingleton/delegateToEnumInAClass.kt");
      }

      @TestMetadata("delegateToSingleton.kt")
      public void testDelegateToSingleton() {
        runTest("compiler/testData/codegen/box/delegatedProperty/delegateToSingleton/delegateToSingleton.kt");
      }

      @TestMetadata("noInitializationOfOuterClass.kt")
      public void testNoInitializationOfOuterClass() {
        runTest("compiler/testData/codegen/box/delegatedProperty/delegateToSingleton/noInitializationOfOuterClass.kt");
      }

      @TestMetadata("withSideEffects.kt")
      public void testWithSideEffects() {
        runTest("compiler/testData/codegen/box/delegatedProperty/delegateToSingleton/withSideEffects.kt");
      }

      @TestMetadata("withSideEffectsFromFileClass.kt")
      public void testWithSideEffectsFromFileClass() {
        runTest("compiler/testData/codegen/box/delegatedProperty/delegateToSingleton/withSideEffectsFromFileClass.kt");
      }

      @TestMetadata("withSideEffectsToEnum.kt")
      public void testWithSideEffectsToEnum() {
        runTest("compiler/testData/codegen/box/delegatedProperty/delegateToSingleton/withSideEffectsToEnum.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/delegatedProperty/delegateToThis")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class DelegateToThis extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInDelegateToThis() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/delegatedProperty/delegateToThis"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("delegateToOuterThis.kt")
      public void testDelegateToOuterThis() {
        runTest("compiler/testData/codegen/box/delegatedProperty/delegateToThis/delegateToOuterThis.kt");
      }

      @TestMetadata("delegateToThis.kt")
      public void testDelegateToThis() {
        runTest("compiler/testData/codegen/box/delegatedProperty/delegateToThis/delegateToThis.kt");
      }

      @TestMetadata("delegateToThisByExtension.kt")
      public void testDelegateToThisByExtension() {
        runTest("compiler/testData/codegen/box/delegatedProperty/delegateToThis/delegateToThisByExtension.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/delegatedProperty/local")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Local extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInLocal() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/delegatedProperty/local"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("capturedLocalVal.kt")
      public void testCapturedLocalVal() {
        runTest("compiler/testData/codegen/box/delegatedProperty/local/capturedLocalVal.kt");
      }

      @TestMetadata("capturedLocalValNoInline.kt")
      public void testCapturedLocalValNoInline() {
        runTest("compiler/testData/codegen/box/delegatedProperty/local/capturedLocalValNoInline.kt");
      }

      @TestMetadata("capturedLocalVar.kt")
      public void testCapturedLocalVar() {
        runTest("compiler/testData/codegen/box/delegatedProperty/local/capturedLocalVar.kt");
      }

      @TestMetadata("capturedLocalVarNoInline.kt")
      public void testCapturedLocalVarNoInline() {
        runTest("compiler/testData/codegen/box/delegatedProperty/local/capturedLocalVarNoInline.kt");
      }

      @TestMetadata("inlineGetValue.kt")
      public void testInlineGetValue() {
        runTest("compiler/testData/codegen/box/delegatedProperty/local/inlineGetValue.kt");
      }

      @TestMetadata("inlineOperators.kt")
      public void testInlineOperators() {
        runTest("compiler/testData/codegen/box/delegatedProperty/local/inlineOperators.kt");
      }

      @TestMetadata("kt12891.kt")
      public void testKt12891() {
        runTest("compiler/testData/codegen/box/delegatedProperty/local/kt12891.kt");
      }

      @TestMetadata("kt13557.kt")
      public void testKt13557() {
        runTest("compiler/testData/codegen/box/delegatedProperty/local/kt13557.kt");
      }

      @TestMetadata("kt16864.kt")
      public void testKt16864() {
        runTest("compiler/testData/codegen/box/delegatedProperty/local/kt16864.kt");
      }

      @TestMetadata("kt19690.kt")
      public void testKt19690() {
        runTest("compiler/testData/codegen/box/delegatedProperty/local/kt19690.kt");
      }

      @TestMetadata("kt21085.kt")
      public void testKt21085() {
        runTest("compiler/testData/codegen/box/delegatedProperty/local/kt21085.kt");
      }

      @TestMetadata("kt23117.kt")
      public void testKt23117() {
        runTest("compiler/testData/codegen/box/delegatedProperty/local/kt23117.kt");
      }

      @TestMetadata("localVal.kt")
      public void testLocalVal() {
        runTest("compiler/testData/codegen/box/delegatedProperty/local/localVal.kt");
      }

      @TestMetadata("localValNoExplicitType.kt")
      public void testLocalValNoExplicitType() {
        runTest("compiler/testData/codegen/box/delegatedProperty/local/localValNoExplicitType.kt");
      }

      @TestMetadata("localVar.kt")
      public void testLocalVar() {
        runTest("compiler/testData/codegen/box/delegatedProperty/local/localVar.kt");
      }

      @TestMetadata("localVarNoExplicitType.kt")
      public void testLocalVarNoExplicitType() {
        runTest("compiler/testData/codegen/box/delegatedProperty/local/localVarNoExplicitType.kt");
      }

      @TestMetadata("useReflectionForLocalVarInLambda.kt")
      public void testUseReflectionForLocalVarInLambda() {
        runTest("compiler/testData/codegen/box/delegatedProperty/local/useReflectionForLocalVarInLambda.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/delegatedProperty/optimizedDelegatedProperties")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class OptimizedDelegatedProperties extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInOptimizedDelegatedProperties() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/delegatedProperty/optimizedDelegatedProperties"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("definedInSources.kt")
      public void testDefinedInSources() {
        runTest("compiler/testData/codegen/box/delegatedProperty/optimizedDelegatedProperties/definedInSources.kt");
      }

      @TestMetadata("definedInSourcesWithNonNullParameter.kt")
      public void testDefinedInSourcesWithNonNullParameter() {
        runTest("compiler/testData/codegen/box/delegatedProperty/optimizedDelegatedProperties/definedInSourcesWithNonNullParameter.kt");
      }

      @TestMetadata("inSeparateModule.kt")
      public void testInSeparateModule() {
        runTest("compiler/testData/codegen/box/delegatedProperty/optimizedDelegatedProperties/inSeparateModule.kt");
      }

      @TestMetadata("inSeparateModuleWithNonNullParameter.kt")
      public void testInSeparateModuleWithNonNullParameter() {
        runTest("compiler/testData/codegen/box/delegatedProperty/optimizedDelegatedProperties/inSeparateModuleWithNonNullParameter.kt");
      }

      @TestMetadata("kt40815.kt")
      public void testKt40815() {
        runTest("compiler/testData/codegen/box/delegatedProperty/optimizedDelegatedProperties/kt40815.kt");
      }

      @TestMetadata("kt40815_2.kt")
      public void testKt40815_2() {
        runTest("compiler/testData/codegen/box/delegatedProperty/optimizedDelegatedProperties/kt40815_2.kt");
      }

      @TestMetadata("kt40815_3.kt")
      public void testKt40815_3() {
        runTest("compiler/testData/codegen/box/delegatedProperty/optimizedDelegatedProperties/kt40815_3.kt");
      }

      @TestMetadata("kt42253.kt")
      public void testKt42253() {
        runTest("compiler/testData/codegen/box/delegatedProperty/optimizedDelegatedProperties/kt42253.kt");
      }

      @TestMetadata("kt48825.kt")
      public void testKt48825() {
        runTest("compiler/testData/codegen/box/delegatedProperty/optimizedDelegatedProperties/kt48825.kt");
      }

      @TestMetadata("lazy.kt")
      public void testLazy() {
        runTest("compiler/testData/codegen/box/delegatedProperty/optimizedDelegatedProperties/lazy.kt");
      }

      @TestMetadata("mixedArgumentSizes.kt")
      public void testMixedArgumentSizes() {
        runTest("compiler/testData/codegen/box/delegatedProperty/optimizedDelegatedProperties/mixedArgumentSizes.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/delegatedProperty/provideDelegate")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ProvideDelegate extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInProvideDelegate() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/delegatedProperty/provideDelegate"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("commonCaseForInference.kt")
      public void testCommonCaseForInference() {
        runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/commonCaseForInference.kt");
      }

      @TestMetadata("delegatedPropertyWithIdProvideDelegate.kt")
      public void testDelegatedPropertyWithIdProvideDelegate() {
        runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/delegatedPropertyWithIdProvideDelegate.kt");
      }

      @TestMetadata("differentReceivers.kt")
      public void testDifferentReceivers() {
        runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/differentReceivers.kt");
      }

      @TestMetadata("evaluationOrder.kt")
      public void testEvaluationOrder() {
        runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/evaluationOrder.kt");
      }

      @TestMetadata("evaluationOrderVar.kt")
      public void testEvaluationOrderVar() {
        runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/evaluationOrderVar.kt");
      }

      @TestMetadata("extensionDelegated.kt")
      public void testExtensionDelegated() {
        runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/extensionDelegated.kt");
      }

      @TestMetadata("generic.kt")
      public void testGeneric() {
        runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/generic.kt");
      }

      @TestMetadata("genericDelegateWithNoAdditionalInfo.kt")
      public void testGenericDelegateWithNoAdditionalInfo() {
        runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/genericDelegateWithNoAdditionalInfo.kt");
      }

      @TestMetadata("genericProvideDelegateOnNumberLiteral.kt")
      public void testGenericProvideDelegateOnNumberLiteral() {
        runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/genericProvideDelegateOnNumberLiteral.kt");
      }

      @TestMetadata("hostCheck.kt")
      public void testHostCheck() {
        runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/hostCheck.kt");
      }

      @TestMetadata("inClass.kt")
      public void testInClass() {
        runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/inClass.kt");
      }

      @TestMetadata("inferenceFromReceiver2.kt")
      public void testInferenceFromReceiver2() {
        runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/inferenceFromReceiver2.kt");
      }

      @TestMetadata("inlineProvideDelegate.kt")
      public void testInlineProvideDelegate() {
        runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/inlineProvideDelegate.kt");
      }

      @TestMetadata("jvmStaticInObject.kt")
      public void testJvmStaticInObject() {
        runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/jvmStaticInObject.kt");
      }

      @TestMetadata("kt15437.kt")
      public void testKt15437() {
        runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/kt15437.kt");
      }

      @TestMetadata("kt16441.kt")
      public void testKt16441() {
        runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/kt16441.kt");
      }

      @TestMetadata("kt18902.kt")
      public void testKt18902() {
        runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/kt18902.kt");
      }

      @TestMetadata("kt39588.kt")
      public void testKt39588() {
        runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/kt39588.kt");
      }

      @TestMetadata("local.kt")
      public void testLocal() {
        runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/local.kt");
      }

      @TestMetadata("localCaptured.kt")
      public void testLocalCaptured() {
        runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/localCaptured.kt");
      }

      @TestMetadata("localDifferentReceivers.kt")
      public void testLocalDifferentReceivers() {
        runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/localDifferentReceivers.kt");
      }

      @TestMetadata("memberExtension.kt")
      public void testMemberExtension() {
        runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/memberExtension.kt");
      }

      @TestMetadata("notNullAssertionInLocalDelegated.kt")
      public void testNotNullAssertionInLocalDelegated() {
        runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/notNullAssertionInLocalDelegated.kt");
      }

      @TestMetadata("propertyMetadata.kt")
      public void testPropertyMetadata() {
        runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/propertyMetadata.kt");
      }

      @TestMetadata("provideDelegateByExtensionFunction.kt")
      public void testProvideDelegateByExtensionFunction() {
        runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/provideDelegateByExtensionFunction.kt");
      }

      @TestMetadata("setValue.kt")
      public void testSetValue() {
        runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/setValue.kt");
      }
    }
  }

  @TestMetadata("compiler/testData/codegen/box/delegation")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Delegation extends AbstractLightAnalysisModeTest {
    @TestMetadata("doubleDelegationEqualsHashcode.kt")
    public void ignoreDoubleDelegationEqualsHashcode() {
      runTest("compiler/testData/codegen/box/delegation/doubleDelegationEqualsHashcode.kt");
    }

    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInDelegation() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/delegation"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("byMiddleInterface.kt")
    public void testByMiddleInterface() {
      runTest("compiler/testData/codegen/box/delegation/byMiddleInterface.kt");
    }

    @TestMetadata("computeIfAbsent.kt")
    public void testComputeIfAbsent() {
      runTest("compiler/testData/codegen/box/delegation/computeIfAbsent.kt");
    }

    @TestMetadata("defaultOverride.kt")
    public void testDefaultOverride() {
      runTest("compiler/testData/codegen/box/delegation/defaultOverride.kt");
    }

    @TestMetadata("delegatedAnonymousObject_noParametersOnDelegate.kt")
    public void testDelegatedAnonymousObject_noParametersOnDelegate() {
      runTest("compiler/testData/codegen/box/delegation/delegatedAnonymousObject_noParametersOnDelegate.kt");
    }

    @TestMetadata("delegatedAnonymousObject_someParametersOnDelegate.kt")
    public void testDelegatedAnonymousObject_someParametersOnDelegate() {
      runTest("compiler/testData/codegen/box/delegation/delegatedAnonymousObject_someParametersOnDelegate.kt");
    }

    @TestMetadata("delegationAndInheritanceFromJava.kt")
    public void testDelegationAndInheritanceFromJava() {
      runTest("compiler/testData/codegen/box/delegation/delegationAndInheritanceFromJava.kt");
    }

    @TestMetadata("delegationDifferentModule.kt")
    public void testDelegationDifferentModule() {
      runTest("compiler/testData/codegen/box/delegation/delegationDifferentModule.kt");
    }

    @TestMetadata("delegationDifferentModule2.kt")
    public void testDelegationDifferentModule2() {
      runTest("compiler/testData/codegen/box/delegation/delegationDifferentModule2.kt");
    }

    @TestMetadata("delegationToIntersectionType.kt")
    public void testDelegationToIntersectionType() {
      runTest("compiler/testData/codegen/box/delegation/delegationToIntersectionType.kt");
    }

    @TestMetadata("delegationToIntersectionType2.kt")
    public void testDelegationToIntersectionType2() {
      runTest("compiler/testData/codegen/box/delegation/delegationToIntersectionType2.kt");
    }

    @TestMetadata("delegationToMap.kt")
    public void testDelegationToMap() {
      runTest("compiler/testData/codegen/box/delegation/delegationToMap.kt");
    }

    @TestMetadata("delegationToVal.kt")
    public void testDelegationToVal() {
      runTest("compiler/testData/codegen/box/delegation/delegationToVal.kt");
    }

    @TestMetadata("delegationToVar.kt")
    public void testDelegationToVar() {
      runTest("compiler/testData/codegen/box/delegation/delegationToVar.kt");
    }

    @TestMetadata("delegationWithPrivateConstructor.kt")
    public void testDelegationWithPrivateConstructor() {
      runTest("compiler/testData/codegen/box/delegation/delegationWithPrivateConstructor.kt");
    }

    @TestMetadata("diamond.kt")
    public void testDiamond() {
      runTest("compiler/testData/codegen/box/delegation/diamond.kt");
    }

    @TestMetadata("diamond2.kt")
    public void testDiamond2() {
      runTest("compiler/testData/codegen/box/delegation/diamond2.kt");
    }

    @TestMetadata("differentModules.kt")
    public void testDifferentModules() {
      runTest("compiler/testData/codegen/box/delegation/differentModules.kt");
    }

    @TestMetadata("genericFunctionInGenericInterface.kt")
    public void testGenericFunctionInGenericInterface() {
      runTest("compiler/testData/codegen/box/delegation/genericFunctionInGenericInterface.kt");
    }

    @TestMetadata("genericProperty.kt")
    public void testGenericProperty() {
      runTest("compiler/testData/codegen/box/delegation/genericProperty.kt");
    }

    @TestMetadata("hiddenSuperOverrideIn1.0.kt")
    public void testHiddenSuperOverrideIn1_0() {
      runTest("compiler/testData/codegen/box/delegation/hiddenSuperOverrideIn1.0.kt");
    }

    @TestMetadata("ifWithCallableReferenceInLazy.kt")
    public void testIfWithCallableReferenceInLazy() {
      runTest("compiler/testData/codegen/box/delegation/ifWithCallableReferenceInLazy.kt");
    }

    @TestMetadata("inClassDeclaration.kt")
    public void testInClassDeclaration() {
      runTest("compiler/testData/codegen/box/delegation/inClassDeclaration.kt");
    }

    @TestMetadata("inDataClass.kt")
    public void testInDataClass() {
      runTest("compiler/testData/codegen/box/delegation/inDataClass.kt");
    }

    @TestMetadata("inlineClassProperty.kt")
    public void testInlineClassProperty() {
      runTest("compiler/testData/codegen/box/delegation/inlineClassProperty.kt");
    }

    @TestMetadata("kt30102_comparable.kt")
    public void testKt30102_comparable() {
      runTest("compiler/testData/codegen/box/delegation/kt30102_comparable.kt");
    }

    @TestMetadata("kt44199.kt")
    public void testKt44199() {
      runTest("compiler/testData/codegen/box/delegation/kt44199.kt");
    }

    @TestMetadata("kt54654.kt")
    public void testKt54654() {
      runTest("compiler/testData/codegen/box/delegation/kt54654.kt");
    }

    @TestMetadata("kt8154.kt")
    public void testKt8154() {
      runTest("compiler/testData/codegen/box/delegation/kt8154.kt");
    }

    @TestMetadata("mixed.kt")
    public void testMixed() {
      runTest("compiler/testData/codegen/box/delegation/mixed.kt");
    }

    @TestMetadata("nestedNameClash.kt")
    public void testNestedNameClash() {
      runTest("compiler/testData/codegen/box/delegation/nestedNameClash.kt");
    }

    @TestMetadata("nestedNameClash2.kt")
    public void testNestedNameClash2() {
      runTest("compiler/testData/codegen/box/delegation/nestedNameClash2.kt");
    }

    @TestMetadata("sealedClass.kt")
    public void testSealedClass() {
      runTest("compiler/testData/codegen/box/delegation/sealedClass.kt");
    }

    @TestMetadata("simple.kt")
    public void testSimple() {
      runTest("compiler/testData/codegen/box/delegation/simple.kt");
    }

    @TestMetadata("smartCastedDelegation.kt")
    public void testSmartCastedDelegation() {
      runTest("compiler/testData/codegen/box/delegation/smartCastedDelegation.kt");
    }

    @TestMetadata("valueClassImplementingJavaInterfaceWithDefault.kt")
    public void testValueClassImplementingJavaInterfaceWithDefault() {
      runTest("compiler/testData/codegen/box/delegation/valueClassImplementingJavaInterfaceWithDefault.kt");
    }

    @TestMetadata("viaTypeAlias.kt")
    public void testViaTypeAlias() {
      runTest("compiler/testData/codegen/box/delegation/viaTypeAlias.kt");
    }

    @TestMetadata("withDefaultParameters.kt")
    public void testWithDefaultParameters() {
      runTest("compiler/testData/codegen/box/delegation/withDefaultParameters.kt");
    }

    @TestMetadata("withDefaultsMultipleFilesOrder.kt")
    public void testWithDefaultsMultipleFilesOrder() {
      runTest("compiler/testData/codegen/box/delegation/withDefaultsMultipleFilesOrder.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/deprecated")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Deprecated extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInDeprecated() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/deprecated"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("deprecatedSinceKotlin.kt")
    public void testDeprecatedSinceKotlin() {
      runTest("compiler/testData/codegen/box/deprecated/deprecatedSinceKotlin.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/destructuringDeclInLambdaParam")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class DestructuringDeclInLambdaParam extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInDestructuringDeclInLambdaParam() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/destructuringDeclInLambdaParam"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("extensionComponents.kt")
    public void testExtensionComponents() {
      runTest("compiler/testData/codegen/box/destructuringDeclInLambdaParam/extensionComponents.kt");
    }

    @TestMetadata("generic.kt")
    public void testGeneric() {
      runTest("compiler/testData/codegen/box/destructuringDeclInLambdaParam/generic.kt");
    }

    @TestMetadata("inline.kt")
    public void testInline() {
      runTest("compiler/testData/codegen/box/destructuringDeclInLambdaParam/inline.kt");
    }

    @TestMetadata("lambdaInLambda.kt")
    public void testLambdaInLambda() {
      runTest("compiler/testData/codegen/box/destructuringDeclInLambdaParam/lambdaInLambda.kt");
    }

    @TestMetadata("otherParameters.kt")
    public void testOtherParameters() {
      runTest("compiler/testData/codegen/box/destructuringDeclInLambdaParam/otherParameters.kt");
    }

    @TestMetadata("simple.kt")
    public void testSimple() {
      runTest("compiler/testData/codegen/box/destructuringDeclInLambdaParam/simple.kt");
    }

    @TestMetadata("stdlibUsages.kt")
    public void testStdlibUsages() {
      runTest("compiler/testData/codegen/box/destructuringDeclInLambdaParam/stdlibUsages.kt");
    }

    @TestMetadata("underscoreNames.kt")
    public void testUnderscoreNames() {
      runTest("compiler/testData/codegen/box/destructuringDeclInLambdaParam/underscoreNames.kt");
    }

    @TestMetadata("withIndexed.kt")
    public void testWithIndexed() {
      runTest("compiler/testData/codegen/box/destructuringDeclInLambdaParam/withIndexed.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/devirtualization")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Devirtualization extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInDevirtualization() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/devirtualization"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("anonymousObject.kt")
    public void testAnonymousObject() {
      runTest("compiler/testData/codegen/box/devirtualization/anonymousObject.kt");
    }

    @TestMetadata("getter_looking_as_box_function.kt")
    public void testGetter_looking_as_box_function() {
      runTest("compiler/testData/codegen/box/devirtualization/getter_looking_as_box_function.kt");
    }

    @TestMetadata("inline_getter.kt")
    public void testInline_getter() {
      runTest("compiler/testData/codegen/box/devirtualization/inline_getter.kt");
    }

    @TestMetadata("kt67218c.kt")
    public void testKt67218c() {
      runTest("compiler/testData/codegen/box/devirtualization/kt67218c.kt");
    }

    @TestMetadata("kt67218i.kt")
    public void testKt67218i() {
      runTest("compiler/testData/codegen/box/devirtualization/kt67218i.kt");
    }

    @TestMetadata("lateinitInterface.kt")
    public void testLateinitInterface() {
      runTest("compiler/testData/codegen/box/devirtualization/lateinitInterface.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/diagnostics")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Diagnostics extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInDiagnostics() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/diagnostics"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("compiler/testData/codegen/box/diagnostics/functions")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Functions extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInFunctions() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/diagnostics/functions"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("compiler/testData/codegen/box/diagnostics/functions/inference")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class Inference extends AbstractLightAnalysisModeTest {
        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        public void testAllFilesPresentInInference() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/diagnostics/functions/inference"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("kt6176.kt")
        public void testKt6176() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/inference/kt6176.kt");
        }
      }

      @TestMetadata("compiler/testData/codegen/box/diagnostics/functions/invoke")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class Invoke extends AbstractLightAnalysisModeTest {
        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        public void testAllFilesPresentInInvoke() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/diagnostics/functions/invoke"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("compiler/testData/codegen/box/diagnostics/functions/invoke/onObjects")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class OnObjects extends AbstractLightAnalysisModeTest {
          private void runTest(String testDataFilePath) {
            KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
          }

          public void testAllFilesPresentInOnObjects() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/diagnostics/functions/invoke/onObjects"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }

          @TestMetadata("invokeOnClassObject1.kt")
          public void testInvokeOnClassObject1() {
            runTest("compiler/testData/codegen/box/diagnostics/functions/invoke/onObjects/invokeOnClassObject1.kt");
          }

          @TestMetadata("invokeOnClassObject2.kt")
          public void testInvokeOnClassObject2() {
            runTest("compiler/testData/codegen/box/diagnostics/functions/invoke/onObjects/invokeOnClassObject2.kt");
          }

          @TestMetadata("invokeOnClassObjectOfNestedClass1.kt")
          public void testInvokeOnClassObjectOfNestedClass1() {
            runTest("compiler/testData/codegen/box/diagnostics/functions/invoke/onObjects/invokeOnClassObjectOfNestedClass1.kt");
          }

          @TestMetadata("invokeOnClassObjectOfNestedClass2.kt")
          public void testInvokeOnClassObjectOfNestedClass2() {
            runTest("compiler/testData/codegen/box/diagnostics/functions/invoke/onObjects/invokeOnClassObjectOfNestedClass2.kt");
          }

          @TestMetadata("invokeOnEnum1.kt")
          public void testInvokeOnEnum1() {
            runTest("compiler/testData/codegen/box/diagnostics/functions/invoke/onObjects/invokeOnEnum1.kt");
          }

          @TestMetadata("invokeOnEnum2.kt")
          public void testInvokeOnEnum2() {
            runTest("compiler/testData/codegen/box/diagnostics/functions/invoke/onObjects/invokeOnEnum2.kt");
          }

          @TestMetadata("invokeOnImportedEnum1.kt")
          public void testInvokeOnImportedEnum1() {
            runTest("compiler/testData/codegen/box/diagnostics/functions/invoke/onObjects/invokeOnImportedEnum1.kt");
          }

          @TestMetadata("invokeOnImportedEnum2.kt")
          public void testInvokeOnImportedEnum2() {
            runTest("compiler/testData/codegen/box/diagnostics/functions/invoke/onObjects/invokeOnImportedEnum2.kt");
          }

          @TestMetadata("invokeOnObject1.kt")
          public void testInvokeOnObject1() {
            runTest("compiler/testData/codegen/box/diagnostics/functions/invoke/onObjects/invokeOnObject1.kt");
          }

          @TestMetadata("invokeOnObject2.kt")
          public void testInvokeOnObject2() {
            runTest("compiler/testData/codegen/box/diagnostics/functions/invoke/onObjects/invokeOnObject2.kt");
          }
        }
      }

      @TestMetadata("compiler/testData/codegen/box/diagnostics/functions/tailRecursion")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class TailRecursion extends AbstractLightAnalysisModeTest {
        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        public void testAllFilesPresentInTailRecursion() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/diagnostics/functions/tailRecursion"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("defaultArgs.kt")
        public void testDefaultArgs() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/defaultArgs.kt");
        }

        @TestMetadata("defaultArgs2.kt")
        public void testDefaultArgs2() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/defaultArgs2.kt");
        }

        @TestMetadata("defaultArgsOverridden.kt")
        public void testDefaultArgsOverridden() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/defaultArgsOverridden.kt");
        }

        @TestMetadata("defaultArgsWithSideEffects.kt")
        public void testDefaultArgsWithSideEffects() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/defaultArgsWithSideEffects.kt");
        }

        @TestMetadata("defaultArgsWithSideEffects2.kt")
        public void testDefaultArgsWithSideEffects2() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/defaultArgsWithSideEffects2.kt");
        }

        @TestMetadata("defaultArgsWithSideEffectsOld.kt")
        public void testDefaultArgsWithSideEffectsOld() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/defaultArgsWithSideEffectsOld.kt");
        }

        @TestMetadata("extensionTailCall.kt")
        public void testExtensionTailCall() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/extensionTailCall.kt");
        }

        @TestMetadata("functionWithNoTails.kt")
        public void testFunctionWithNoTails() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/functionWithNoTails.kt");
        }

        @TestMetadata("functionWithNonTailRecursions.kt")
        public void testFunctionWithNonTailRecursions() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/functionWithNonTailRecursions.kt");
        }

        @TestMetadata("functionWithoutAnnotation.kt")
        public void testFunctionWithoutAnnotation() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/functionWithoutAnnotation.kt");
        }

        @TestMetadata("infixCall.kt")
        public void testInfixCall() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/infixCall.kt");
        }

        @TestMetadata("infixRecursiveCall.kt")
        public void testInfixRecursiveCall() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/infixRecursiveCall.kt");
        }

        @TestMetadata("insideElvis.kt")
        public void testInsideElvis() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/insideElvis.kt");
        }

        @TestMetadata("kt47084_lambdaInDefaultArgument.kt")
        public void testKt47084_lambdaInDefaultArgument() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/kt47084_lambdaInDefaultArgument.kt");
        }

        @TestMetadata("labeledThisReferences.kt")
        public void testLabeledThisReferences() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/labeledThisReferences.kt");
        }

        @TestMetadata("loops.kt")
        public void testLoops() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/loops.kt");
        }

        @TestMetadata("multilevelBlocks.kt")
        public void testMultilevelBlocks() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/multilevelBlocks.kt");
        }

        @TestMetadata("realIteratorFoldl.kt")
        public void testRealIteratorFoldl() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/realIteratorFoldl.kt");
        }

        @TestMetadata("realStringEscape.kt")
        public void testRealStringEscape() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/realStringEscape.kt");
        }

        @TestMetadata("realStringRepeat.kt")
        public void testRealStringRepeat() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/realStringRepeat.kt");
        }

        @TestMetadata("recursiveCallInInlineLambda.kt")
        public void testRecursiveCallInInlineLambda() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/recursiveCallInInlineLambda.kt");
        }

        @TestMetadata("recursiveCallInInlineLambdaWithCapture.kt")
        public void testRecursiveCallInInlineLambdaWithCapture() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/recursiveCallInInlineLambdaWithCapture.kt");
        }

        @TestMetadata("recursiveCallInLambda.kt")
        public void testRecursiveCallInLambda() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/recursiveCallInLambda.kt");
        }

        @TestMetadata("recursiveCallInLocalFunction.kt")
        public void testRecursiveCallInLocalFunction() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/recursiveCallInLocalFunction.kt");
        }

        @TestMetadata("recursiveInnerFunction.kt")
        public void testRecursiveInnerFunction() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/recursiveInnerFunction.kt");
        }

        @TestMetadata("returnIf.kt")
        public void testReturnIf() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/returnIf.kt");
        }

        @TestMetadata("returnInCatch.kt")
        public void testReturnInCatch() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/returnInCatch.kt");
        }

        @TestMetadata("returnInFinally.kt")
        public void testReturnInFinally() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/returnInFinally.kt");
        }

        @TestMetadata("returnInIfInFinally.kt")
        public void testReturnInIfInFinally() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/returnInIfInFinally.kt");
        }

        @TestMetadata("returnInParentheses.kt")
        public void testReturnInParentheses() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/returnInParentheses.kt");
        }

        @TestMetadata("returnInTry.kt")
        public void testReturnInTry() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/returnInTry.kt");
        }

        @TestMetadata("simpleBlock.kt")
        public void testSimpleBlock() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/simpleBlock.kt");
        }

        @TestMetadata("simpleReturn.kt")
        public void testSimpleReturn() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/simpleReturn.kt");
        }

        @TestMetadata("simpleReturnWithElse.kt")
        public void testSimpleReturnWithElse() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/simpleReturnWithElse.kt");
        }

        @TestMetadata("sum.kt")
        public void testSum() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/sum.kt");
        }

        @TestMetadata("tailCallInBlockInParentheses.kt")
        public void testTailCallInBlockInParentheses() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/tailCallInBlockInParentheses.kt");
        }

        @TestMetadata("tailCallInParentheses.kt")
        public void testTailCallInParentheses() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/tailCallInParentheses.kt");
        }

        @TestMetadata("tailRecursionInFinally.kt")
        public void testTailRecursionInFinally() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/tailRecursionInFinally.kt");
        }

        @TestMetadata("tailrecWithExplicitCompanionObjectDispatcher.kt")
        public void testTailrecWithExplicitCompanionObjectDispatcher() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/tailrecWithExplicitCompanionObjectDispatcher.kt");
        }

        @TestMetadata("tailrecWithExplicitObjectDispatcher.kt")
        public void testTailrecWithExplicitObjectDispatcher() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/tailrecWithExplicitObjectDispatcher.kt");
        }

        @TestMetadata("thisReferences.kt")
        public void testThisReferences() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/thisReferences.kt");
        }

        @TestMetadata("unitBlocks.kt")
        public void testUnitBlocks() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/unitBlocks.kt");
        }

        @TestMetadata("whenWithCondition.kt")
        public void testWhenWithCondition() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/whenWithCondition.kt");
        }

        @TestMetadata("whenWithInRange.kt")
        public void testWhenWithInRange() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/whenWithInRange.kt");
        }

        @TestMetadata("whenWithIs.kt")
        public void testWhenWithIs() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/whenWithIs.kt");
        }

        @TestMetadata("whenWithoutCondition.kt")
        public void testWhenWithoutCondition() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/whenWithoutCondition.kt");
        }
      }
    }

    @TestMetadata("compiler/testData/codegen/box/diagnostics/vararg")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Vararg extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInVararg() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/diagnostics/vararg"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("kt4172.kt")
      public void testKt4172() {
        runTest("compiler/testData/codegen/box/diagnostics/vararg/kt4172.kt");
      }
    }
  }

  @TestMetadata("compiler/testData/codegen/box/differentDependencyVersion")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class DifferentDependencyVersion extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInDifferentDependencyVersion() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/differentDependencyVersion"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("kt51194_java.kt")
    public void testKt51194_java() {
      runTest("compiler/testData/codegen/box/differentDependencyVersion/kt51194_java.kt");
    }

    @TestMetadata("kt51194_javaAndKotlin.kt")
    public void testKt51194_javaAndKotlin() {
      runTest("compiler/testData/codegen/box/differentDependencyVersion/kt51194_javaAndKotlin.kt");
    }

    @TestMetadata("kt51194_kotlin.kt")
    public void testKt51194_kotlin() {
      runTest("compiler/testData/codegen/box/differentDependencyVersion/kt51194_kotlin.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/directInvokeOptimization")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class DirectInvokeOptimization extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInDirectInvokeOptimization() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/directInvokeOptimization"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("boundInnerContructorRef.kt")
    public void testBoundInnerContructorRef() {
      runTest("compiler/testData/codegen/box/directInvokeOptimization/boundInnerContructorRef.kt");
    }

    @TestMetadata("boundMemberRef.kt")
    public void testBoundMemberRef() {
      runTest("compiler/testData/codegen/box/directInvokeOptimization/boundMemberRef.kt");
    }

    @TestMetadata("canary.kt")
    public void testCanary() {
      runTest("compiler/testData/codegen/box/directInvokeOptimization/canary.kt");
    }

    @TestMetadata("capturingLambda.kt")
    public void testCapturingLambda() {
      runTest("compiler/testData/codegen/box/directInvokeOptimization/capturingLambda.kt");
    }

    @TestMetadata("contructorRef.kt")
    public void testContructorRef() {
      runTest("compiler/testData/codegen/box/directInvokeOptimization/contructorRef.kt");
    }

    @TestMetadata("kt53202.kt")
    public void testKt53202() {
      runTest("compiler/testData/codegen/box/directInvokeOptimization/kt53202.kt");
    }

    @TestMetadata("kt53202_funLiteral.kt")
    public void testKt53202_funLiteral() {
      runTest("compiler/testData/codegen/box/directInvokeOptimization/kt53202_funLiteral.kt");
    }

    @TestMetadata("kt53202_returns.kt")
    public void testKt53202_returns() {
      runTest("compiler/testData/codegen/box/directInvokeOptimization/kt53202_returns.kt");
    }

    @TestMetadata("nestedLambdas.kt")
    public void testNestedLambdas() {
      runTest("compiler/testData/codegen/box/directInvokeOptimization/nestedLambdas.kt");
    }

    @TestMetadata("simpleAnonymousFun.kt")
    public void testSimpleAnonymousFun() {
      runTest("compiler/testData/codegen/box/directInvokeOptimization/simpleAnonymousFun.kt");
    }

    @TestMetadata("simpleFunRef.kt")
    public void testSimpleFunRef() {
      runTest("compiler/testData/codegen/box/directInvokeOptimization/simpleFunRef.kt");
    }

    @TestMetadata("simpleLambda.kt")
    public void testSimpleLambda() {
      runTest("compiler/testData/codegen/box/directInvokeOptimization/simpleLambda.kt");
    }

    @TestMetadata("unboundInnerContructorRef.kt")
    public void testUnboundInnerContructorRef() {
      runTest("compiler/testData/codegen/box/directInvokeOptimization/unboundInnerContructorRef.kt");
    }

    @TestMetadata("unboundMemberRef.kt")
    public void testUnboundMemberRef() {
      runTest("compiler/testData/codegen/box/directInvokeOptimization/unboundMemberRef.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/elvis")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Elvis extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInElvis() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/elvis"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("genericElvisWithMoreSpecificLHS.kt")
    public void testGenericElvisWithMoreSpecificLHS() {
      runTest("compiler/testData/codegen/box/elvis/genericElvisWithMoreSpecificLHS.kt");
    }

    @TestMetadata("genericElvisWithNullLHS.kt")
    public void testGenericElvisWithNullLHS() {
      runTest("compiler/testData/codegen/box/elvis/genericElvisWithNullLHS.kt");
    }

    @TestMetadata("genericNull.kt")
    public void testGenericNull() {
      runTest("compiler/testData/codegen/box/elvis/genericNull.kt");
    }

    @TestMetadata("kt24209.kt")
    public void testKt24209() {
      runTest("compiler/testData/codegen/box/elvis/kt24209.kt");
    }

    @TestMetadata("kt6694ExactAnnotationForElvis.kt")
    public void testKt6694ExactAnnotationForElvis() {
      runTest("compiler/testData/codegen/box/elvis/kt6694ExactAnnotationForElvis.kt");
    }

    @TestMetadata("nullNullOk.kt")
    public void testNullNullOk() {
      runTest("compiler/testData/codegen/box/elvis/nullNullOk.kt");
    }

    @TestMetadata("ofNonNullableResultType.kt")
    public void testOfNonNullableResultType() {
      runTest("compiler/testData/codegen/box/elvis/ofNonNullableResultType.kt");
    }

    @TestMetadata("primitive.kt")
    public void testPrimitive() {
      runTest("compiler/testData/codegen/box/elvis/primitive.kt");
    }

    @TestMetadata("withReturn.kt")
    public void testWithReturn() {
      runTest("compiler/testData/codegen/box/elvis/withReturn.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/enum")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Enum extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    @TestMetadata("abstractMethodInEnum.kt")
    public void testAbstractMethodInEnum() {
      runTest("compiler/testData/codegen/box/enum/abstractMethodInEnum.kt");
    }

    @TestMetadata("abstractNestedClass.kt")
    public void testAbstractNestedClass() {
      runTest("compiler/testData/codegen/box/enum/abstractNestedClass.kt");
    }

    public void testAllFilesPresentInEnum() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/enum"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("annotatedParameter.kt")
    public void testAnnotatedParameter() {
      runTest("compiler/testData/codegen/box/enum/annotatedParameter.kt");
    }

    @TestMetadata("annotatedParameter2.kt")
    public void testAnnotatedParameter2() {
      runTest("compiler/testData/codegen/box/enum/annotatedParameter2.kt");
    }

    @TestMetadata("asReturnExpression.kt")
    public void testAsReturnExpression() {
      runTest("compiler/testData/codegen/box/enum/asReturnExpression.kt");
    }

    @TestMetadata("bigEnum.kt")
    public void testBigEnum() {
      runTest("compiler/testData/codegen/box/enum/bigEnum.kt");
    }

    @TestMetadata("classForEnumEntry.kt")
    public void testClassForEnumEntry() {
      runTest("compiler/testData/codegen/box/enum/classForEnumEntry.kt");
    }

    @TestMetadata("companionAccessingEnumValue.kt")
    public void testCompanionAccessingEnumValue() {
      runTest("compiler/testData/codegen/box/enum/companionAccessingEnumValue.kt");
    }

    @TestMetadata("companionObject.kt")
    public void testCompanionObject() {
      runTest("compiler/testData/codegen/box/enum/companionObject.kt");
    }

    @TestMetadata("companionObjectInEnum.kt")
    public void testCompanionObjectInEnum() {
      runTest("compiler/testData/codegen/box/enum/companionObjectInEnum.kt");
    }

    @TestMetadata("constructorWithReordering.kt")
    public void testConstructorWithReordering() {
      runTest("compiler/testData/codegen/box/enum/constructorWithReordering.kt");
    }

    @TestMetadata("declaringClassOnEnumObject.kt")
    public void testDeclaringClassOnEnumObject() {
      runTest("compiler/testData/codegen/box/enum/declaringClassOnEnumObject.kt");
    }

    @TestMetadata("deepInnerClassInEnumEntryClass.kt")
    public void testDeepInnerClassInEnumEntryClass() {
      runTest("compiler/testData/codegen/box/enum/deepInnerClassInEnumEntryClass.kt");
    }

    @TestMetadata("deepInnerClassInEnumEntryClass2.kt")
    public void testDeepInnerClassInEnumEntryClass2() {
      runTest("compiler/testData/codegen/box/enum/deepInnerClassInEnumEntryClass2.kt");
    }

    @TestMetadata("emptyConstructor.kt")
    public void testEmptyConstructor() {
      runTest("compiler/testData/codegen/box/enum/emptyConstructor.kt");
    }

    @TestMetadata("emptyEnumValuesValueOf.kt")
    public void testEmptyEnumValuesValueOf() {
      runTest("compiler/testData/codegen/box/enum/emptyEnumValuesValueOf.kt");
    }

    @TestMetadata("enumCompanionInit.kt")
    public void testEnumCompanionInit() {
      runTest("compiler/testData/codegen/box/enum/enumCompanionInit.kt");
    }

    @TestMetadata("enumConstructorParameterClashWithDefaults.kt")
    public void testEnumConstructorParameterClashWithDefaults() {
      runTest("compiler/testData/codegen/box/enum/enumConstructorParameterClashWithDefaults.kt");
    }

    @TestMetadata("enumEntries.kt")
    public void testEnumEntries() {
      runTest("compiler/testData/codegen/box/enum/enumEntries.kt");
    }

    @TestMetadata("enumEntriesCompatibilityCheck.kt")
    public void testEnumEntriesCompatibilityCheck() {
      runTest("compiler/testData/codegen/box/enum/enumEntriesCompatibilityCheck.kt");
    }

    @TestMetadata("enumEntriesCompatibilityCheckNoPrioritizedEnumEntries.kt")
    public void testEnumEntriesCompatibilityCheckNoPrioritizedEnumEntries() {
      runTest("compiler/testData/codegen/box/enum/enumEntriesCompatibilityCheckNoPrioritizedEnumEntries.kt");
    }

    @TestMetadata("enumEntriesFromJava.kt")
    public void testEnumEntriesFromJava() {
      runTest("compiler/testData/codegen/box/enum/enumEntriesFromJava.kt");
    }

    @TestMetadata("enumEntriesInCompanion.kt")
    public void testEnumEntriesInCompanion() {
      runTest("compiler/testData/codegen/box/enum/enumEntriesInCompanion.kt");
    }

    @TestMetadata("enumEntriesIntrinsicForJava.kt")
    public void testEnumEntriesIntrinsicForJava() {
      runTest("compiler/testData/codegen/box/enum/enumEntriesIntrinsicForJava.kt");
    }

    @TestMetadata("enumEntriesIntrinsicMultipleEnums.kt")
    public void testEnumEntriesIntrinsicMultipleEnums() {
      runTest("compiler/testData/codegen/box/enum/enumEntriesIntrinsicMultipleEnums.kt");
    }

    @TestMetadata("enumEntriesIntrinsicWithoutFeature.kt")
    public void testEnumEntriesIntrinsicWithoutFeature() {
      runTest("compiler/testData/codegen/box/enum/enumEntriesIntrinsicWithoutFeature.kt");
    }

    @TestMetadata("enumEntriesMultimodule.kt")
    public void testEnumEntriesMultimodule() {
      runTest("compiler/testData/codegen/box/enum/enumEntriesMultimodule.kt");
    }

    @TestMetadata("enumEntriesMultimoduleMultipleMappings.kt")
    public void testEnumEntriesMultimoduleMultipleMappings() {
      runTest("compiler/testData/codegen/box/enum/enumEntriesMultimoduleMultipleMappings.kt");
    }

    @TestMetadata("enumEntriesMultimoduleMultipleMappingsForMultipleClassfiles.kt")
    public void testEnumEntriesMultimoduleMultipleMappingsForMultipleClassfiles() {
      runTest("compiler/testData/codegen/box/enum/enumEntriesMultimoduleMultipleMappingsForMultipleClassfiles.kt");
    }

    @TestMetadata("enumEntriesMultimoduleNoMappings.kt")
    public void testEnumEntriesMultimoduleNoMappings() {
      runTest("compiler/testData/codegen/box/enum/enumEntriesMultimoduleNoMappings.kt");
    }

    @TestMetadata("enumEntriesNameClashes.kt")
    public void testEnumEntriesNameClashes() {
      runTest("compiler/testData/codegen/box/enum/enumEntriesNameClashes.kt");
    }

    @TestMetadata("enumEntryHashCode.kt")
    public void testEnumEntryHashCode() {
      runTest("compiler/testData/codegen/box/enum/enumEntryHashCode.kt");
    }

    @TestMetadata("enumEntryMembers.kt")
    public void testEnumEntryMembers() {
      runTest("compiler/testData/codegen/box/enum/enumEntryMembers.kt");
    }

    @TestMetadata("enumEntryReferenceFromInnerClassConstructor1.kt")
    public void testEnumEntryReferenceFromInnerClassConstructor1() {
      runTest("compiler/testData/codegen/box/enum/enumEntryReferenceFromInnerClassConstructor1.kt");
    }

    @TestMetadata("enumEntryReferenceFromInnerClassConstructor2.kt")
    public void testEnumEntryReferenceFromInnerClassConstructor2() {
      runTest("compiler/testData/codegen/box/enum/enumEntryReferenceFromInnerClassConstructor2.kt");
    }

    @TestMetadata("enumEntryReferenceFromInnerClassConstructor3.kt")
    public void testEnumEntryReferenceFromInnerClassConstructor3() {
      runTest("compiler/testData/codegen/box/enum/enumEntryReferenceFromInnerClassConstructor3.kt");
    }

    @TestMetadata("enumInheritedFromTrait.kt")
    public void testEnumInheritedFromTrait() {
      runTest("compiler/testData/codegen/box/enum/enumInheritedFromTrait.kt");
    }

    @TestMetadata("enumMultiModule.kt")
    public void testEnumMultiModule() {
      runTest("compiler/testData/codegen/box/enum/enumMultiModule.kt");
    }

    @TestMetadata("enumShort.kt")
    public void testEnumShort() {
      runTest("compiler/testData/codegen/box/enum/enumShort.kt");
    }

    @TestMetadata("enumValueOf.kt")
    public void testEnumValueOf() {
      runTest("compiler/testData/codegen/box/enum/enumValueOf.kt");
    }

    @TestMetadata("enumWithLambdaParameter.kt")
    public void testEnumWithLambdaParameter() {
      runTest("compiler/testData/codegen/box/enum/enumWithLambdaParameter.kt");
    }

    @TestMetadata("enum_equals.kt")
    public void testEnum_equals() {
      runTest("compiler/testData/codegen/box/enum/enum_equals.kt");
    }

    @TestMetadata("getEnumEntityByOrdinal.kt")
    public void testGetEnumEntityByOrdinal() {
      runTest("compiler/testData/codegen/box/enum/getEnumEntityByOrdinal.kt");
    }

    @TestMetadata("inPackage.kt")
    public void testInPackage() {
      runTest("compiler/testData/codegen/box/enum/inPackage.kt");
    }

    @TestMetadata("inclassobj.kt")
    public void testInclassobj() {
      runTest("compiler/testData/codegen/box/enum/inclassobj.kt");
    }

    @TestMetadata("initEntriesInCompanionObject.kt")
    public void testInitEntriesInCompanionObject() {
      runTest("compiler/testData/codegen/box/enum/initEntriesInCompanionObject.kt");
    }

    @TestMetadata("initEntriesInCompanionObject2.kt")
    public void testInitEntriesInCompanionObject2() {
      runTest("compiler/testData/codegen/box/enum/initEntriesInCompanionObject2.kt");
    }

    @TestMetadata("initEntriesInValueOf.kt")
    public void testInitEntriesInValueOf() {
      runTest("compiler/testData/codegen/box/enum/initEntriesInValueOf.kt");
    }

    @TestMetadata("initEnumAfterObjectAccess.kt")
    public void testInitEnumAfterObjectAccess() {
      runTest("compiler/testData/codegen/box/enum/initEnumAfterObjectAccess.kt");
    }

    @TestMetadata("inner.kt")
    public void testInner() {
      runTest("compiler/testData/codegen/box/enum/inner.kt");
    }

    @TestMetadata("innerClassInEnumEntryClass.kt")
    public void testInnerClassInEnumEntryClass() {
      runTest("compiler/testData/codegen/box/enum/innerClassInEnumEntryClass.kt");
    }

    @TestMetadata("innerClassMethodInEnumEntryClass.kt")
    public void testInnerClassMethodInEnumEntryClass() {
      runTest("compiler/testData/codegen/box/enum/innerClassMethodInEnumEntryClass.kt");
    }

    @TestMetadata("innerClassMethodInEnumEntryClass2.kt")
    public void testInnerClassMethodInEnumEntryClass2() {
      runTest("compiler/testData/codegen/box/enum/innerClassMethodInEnumEntryClass2.kt");
    }

    @TestMetadata("innerWithExistingClassObject.kt")
    public void testInnerWithExistingClassObject() {
      runTest("compiler/testData/codegen/box/enum/innerWithExistingClassObject.kt");
    }

    @TestMetadata("interfaceCallNoEntryClass.kt")
    public void testInterfaceCallNoEntryClass() {
      runTest("compiler/testData/codegen/box/enum/interfaceCallNoEntryClass.kt");
    }

    @TestMetadata("interfaceCallWithEntryClass.kt")
    public void testInterfaceCallWithEntryClass() {
      runTest("compiler/testData/codegen/box/enum/interfaceCallWithEntryClass.kt");
    }

    @TestMetadata("javaClassWithNestedEnum.kt")
    public void testJavaClassWithNestedEnum() {
      runTest("compiler/testData/codegen/box/enum/javaClassWithNestedEnum.kt");
    }

    @TestMetadata("javaEnumValueOf.kt")
    public void testJavaEnumValueOf() {
      runTest("compiler/testData/codegen/box/enum/javaEnumValueOf.kt");
    }

    @TestMetadata("javaEnumValueOf2.kt")
    public void testJavaEnumValueOf2() {
      runTest("compiler/testData/codegen/box/enum/javaEnumValueOf2.kt");
    }

    @TestMetadata("javaEnumValues.kt")
    public void testJavaEnumValues() {
      runTest("compiler/testData/codegen/box/enum/javaEnumValues.kt");
    }

    @TestMetadata("javaEnumValues2.kt")
    public void testJavaEnumValues2() {
      runTest("compiler/testData/codegen/box/enum/javaEnumValues2.kt");
    }

    @TestMetadata("javaEnumValues3.kt")
    public void testJavaEnumValues3() {
      runTest("compiler/testData/codegen/box/enum/javaEnumValues3.kt");
    }

    @TestMetadata("k54079.kt")
    public void testK54079() {
      runTest("compiler/testData/codegen/box/enum/k54079.kt");
    }

    @TestMetadata("kt1119.kt")
    public void testKt1119() {
      runTest("compiler/testData/codegen/box/enum/kt1119.kt");
    }

    @TestMetadata("kt18731.kt")
    public void testKt18731() {
      runTest("compiler/testData/codegen/box/enum/kt18731.kt");
    }

    @TestMetadata("kt18731_2.kt")
    public void testKt18731_2() {
      runTest("compiler/testData/codegen/box/enum/kt18731_2.kt");
    }

    @TestMetadata("kt20651.kt")
    public void testKt20651() {
      runTest("compiler/testData/codegen/box/enum/kt20651.kt");
    }

    @TestMetadata("kt20651_inlineLambda.kt")
    public void testKt20651_inlineLambda() {
      runTest("compiler/testData/codegen/box/enum/kt20651_inlineLambda.kt");
    }

    @TestMetadata("kt20651a.kt")
    public void testKt20651a() {
      runTest("compiler/testData/codegen/box/enum/kt20651a.kt");
    }

    @TestMetadata("kt20651b.kt")
    public void testKt20651b() {
      runTest("compiler/testData/codegen/box/enum/kt20651b.kt");
    }

    @TestMetadata("kt2350.kt")
    public void testKt2350() {
      runTest("compiler/testData/codegen/box/enum/kt2350.kt");
    }

    @TestMetadata("kt38540.kt")
    public void testKt38540() {
      runTest("compiler/testData/codegen/box/enum/kt38540.kt");
    }

    @TestMetadata("kt38996.kt")
    public void testKt38996() {
      runTest("compiler/testData/codegen/box/enum/kt38996.kt");
    }

    @TestMetadata("kt44744.kt")
    public void testKt44744() {
      runTest("compiler/testData/codegen/box/enum/kt44744.kt");
    }

    @TestMetadata("kt44744_innerClass.kt")
    public void testKt44744_innerClass() {
      runTest("compiler/testData/codegen/box/enum/kt44744_innerClass.kt");
    }

    @TestMetadata("kt46605.kt")
    public void testKt46605() {
      runTest("compiler/testData/codegen/box/enum/kt46605.kt");
    }

    @TestMetadata("kt7257.kt")
    public void testKt7257() {
      runTest("compiler/testData/codegen/box/enum/kt7257.kt");
    }

    @TestMetadata("kt7257_anonObjectInit.kt")
    public void testKt7257_anonObjectInit() {
      runTest("compiler/testData/codegen/box/enum/kt7257_anonObjectInit.kt");
    }

    @TestMetadata("kt7257_anonObjectMethod.kt")
    public void testKt7257_anonObjectMethod() {
      runTest("compiler/testData/codegen/box/enum/kt7257_anonObjectMethod.kt");
    }

    @TestMetadata("kt7257_boundReference1.kt")
    public void testKt7257_boundReference1() {
      runTest("compiler/testData/codegen/box/enum/kt7257_boundReference1.kt");
    }

    @TestMetadata("kt7257_boundReference2.kt")
    public void testKt7257_boundReference2() {
      runTest("compiler/testData/codegen/box/enum/kt7257_boundReference2.kt");
    }

    @TestMetadata("kt7257_boundReferenceWithImplicitReceiver.kt")
    public void testKt7257_boundReferenceWithImplicitReceiver() {
      runTest("compiler/testData/codegen/box/enum/kt7257_boundReferenceWithImplicitReceiver.kt");
    }

    @TestMetadata("kt7257_explicitReceiver.kt")
    public void testKt7257_explicitReceiver() {
      runTest("compiler/testData/codegen/box/enum/kt7257_explicitReceiver.kt");
    }

    @TestMetadata("kt7257_fullyQualifiedReceiver.kt")
    public void testKt7257_fullyQualifiedReceiver() {
      runTest("compiler/testData/codegen/box/enum/kt7257_fullyQualifiedReceiver.kt");
    }

    @TestMetadata("kt7257_namedLocalFun.kt")
    public void testKt7257_namedLocalFun() {
      runTest("compiler/testData/codegen/box/enum/kt7257_namedLocalFun.kt");
    }

    @TestMetadata("kt7257_notInline.kt")
    public void testKt7257_notInline() {
      runTest("compiler/testData/codegen/box/enum/kt7257_notInline.kt");
    }

    @TestMetadata("kt9711.kt")
    public void testKt9711() {
      runTest("compiler/testData/codegen/box/enum/kt9711.kt");
    }

    @TestMetadata("kt9711_2.kt")
    public void testKt9711_2() {
      runTest("compiler/testData/codegen/box/enum/kt9711_2.kt");
    }

    @TestMetadata("lambdaInDefault.kt")
    public void testLambdaInDefault() {
      runTest("compiler/testData/codegen/box/enum/lambdaInDefault.kt");
    }

    @TestMetadata("loop.kt")
    public void testLoop() {
      runTest("compiler/testData/codegen/box/enum/loop.kt");
    }

    @TestMetadata("manyDefaultParameters.kt")
    public void testManyDefaultParameters() {
      runTest("compiler/testData/codegen/box/enum/manyDefaultParameters.kt");
    }

    @TestMetadata("memberNameInJavaEnum.kt")
    public void testMemberNameInJavaEnum() {
      runTest("compiler/testData/codegen/box/enum/memberNameInJavaEnum.kt");
    }

    @TestMetadata("modifierFlags.kt")
    public void testModifierFlags() {
      runTest("compiler/testData/codegen/box/enum/modifierFlags.kt");
    }

    @TestMetadata("multipleModules.kt")
    public void testMultipleModules() {
      runTest("compiler/testData/codegen/box/enum/multipleModules.kt");
    }

    @TestMetadata("nameClashWithCompanion.kt")
    public void testNameClashWithCompanion() {
      runTest("compiler/testData/codegen/box/enum/nameClashWithCompanion.kt");
    }

    @TestMetadata("nameConflict.kt")
    public void testNameConflict() {
      runTest("compiler/testData/codegen/box/enum/nameConflict.kt");
    }

    @TestMetadata("nested.kt")
    public void testNested() {
      runTest("compiler/testData/codegen/box/enum/nested.kt");
    }

    @TestMetadata("noClassForSimpleEnum.kt")
    public void testNoClassForSimpleEnum() {
      runTest("compiler/testData/codegen/box/enum/noClassForSimpleEnum.kt");
    }

    @TestMetadata("openMethodNoOverrides.kt")
    public void testOpenMethodNoOverrides() {
      runTest("compiler/testData/codegen/box/enum/openMethodNoOverrides.kt");
    }

    @TestMetadata("ordinal.kt")
    public void testOrdinal() {
      runTest("compiler/testData/codegen/box/enum/ordinal.kt");
    }

    @TestMetadata("ordinalsWithEnumEntitiesOverrides.kt")
    public void testOrdinalsWithEnumEntitiesOverrides() {
      runTest("compiler/testData/codegen/box/enum/ordinalsWithEnumEntitiesOverrides.kt");
    }

    @TestMetadata("overloadedEnumValues.kt")
    public void testOverloadedEnumValues() {
      runTest("compiler/testData/codegen/box/enum/overloadedEnumValues.kt");
    }

    @TestMetadata("overloadedEnumValuesStatic.kt")
    public void testOverloadedEnumValuesStatic() {
      runTest("compiler/testData/codegen/box/enum/overloadedEnumValuesStatic.kt");
    }

    @TestMetadata("refToThis.kt")
    public void testRefToThis() {
      runTest("compiler/testData/codegen/box/enum/refToThis.kt");
    }

    @TestMetadata("reorderedArguments.kt")
    public void testReorderedArguments() {
      runTest("compiler/testData/codegen/box/enum/reorderedArguments.kt");
    }

    @TestMetadata("simple.kt")
    public void testSimple() {
      runTest("compiler/testData/codegen/box/enum/simple.kt");
    }

    @TestMetadata("simpleJavaEnum.kt")
    public void testSimpleJavaEnum() {
      runTest("compiler/testData/codegen/box/enum/simpleJavaEnum.kt");
    }

    @TestMetadata("simpleJavaEnumWithFunction.kt")
    public void testSimpleJavaEnumWithFunction() {
      runTest("compiler/testData/codegen/box/enum/simpleJavaEnumWithFunction.kt");
    }

    @TestMetadata("simpleJavaEnumWithStaticImport.kt")
    public void testSimpleJavaEnumWithStaticImport() {
      runTest("compiler/testData/codegen/box/enum/simpleJavaEnumWithStaticImport.kt");
    }

    @TestMetadata("simpleJavaInnerEnum.kt")
    public void testSimpleJavaInnerEnum() {
      runTest("compiler/testData/codegen/box/enum/simpleJavaInnerEnum.kt");
    }

    @TestMetadata("sortEnumEntries.kt")
    public void testSortEnumEntries() {
      runTest("compiler/testData/codegen/box/enum/sortEnumEntries.kt");
    }

    @TestMetadata("staticField.kt")
    public void testStaticField() {
      runTest("compiler/testData/codegen/box/enum/staticField.kt");
    }

    @TestMetadata("staticMethod.kt")
    public void testStaticMethod() {
      runTest("compiler/testData/codegen/box/enum/staticMethod.kt");
    }

    @TestMetadata("superCallInEnumLiteral.kt")
    public void testSuperCallInEnumLiteral() {
      runTest("compiler/testData/codegen/box/enum/superCallInEnumLiteral.kt");
    }

    @TestMetadata("switchLowering.kt")
    public void testSwitchLowering() {
      runTest("compiler/testData/codegen/box/enum/switchLowering.kt");
    }

    @TestMetadata("test0.kt")
    public void testTest0() {
      runTest("compiler/testData/codegen/box/enum/test0.kt");
    }

    @TestMetadata("test1.kt")
    public void testTest1() {
      runTest("compiler/testData/codegen/box/enum/test1.kt");
    }

    @TestMetadata("toString.kt")
    public void testToString() {
      runTest("compiler/testData/codegen/box/enum/toString.kt");
    }

    @TestMetadata("vCallNoEntryClass.kt")
    public void testVCallNoEntryClass() {
      runTest("compiler/testData/codegen/box/enum/vCallNoEntryClass.kt");
    }

    @TestMetadata("vCallWithEntryClass.kt")
    public void testVCallWithEntryClass() {
      runTest("compiler/testData/codegen/box/enum/vCallWithEntryClass.kt");
    }

    @TestMetadata("valueOf2.kt")
    public void testValueOf2() {
      runTest("compiler/testData/codegen/box/enum/valueOf2.kt");
    }

    @TestMetadata("valueof.kt")
    public void testValueof() {
      runTest("compiler/testData/codegen/box/enum/valueof.kt");
    }

    @TestMetadata("values.kt")
    public void testValues() {
      runTest("compiler/testData/codegen/box/enum/values.kt");
    }

    @TestMetadata("varargParam.kt")
    public void testVarargParam() {
      runTest("compiler/testData/codegen/box/enum/varargParam.kt");
    }

    @TestMetadata("whenInObject.kt")
    public void testWhenInObject() {
      runTest("compiler/testData/codegen/box/enum/whenInObject.kt");
    }

    @TestMetadata("compiler/testData/codegen/box/enum/defaultCtor")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class DefaultCtor extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInDefaultCtor() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/enum/defaultCtor"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("constructorWithDefaultArguments.kt")
      public void testConstructorWithDefaultArguments() {
        runTest("compiler/testData/codegen/box/enum/defaultCtor/constructorWithDefaultArguments.kt");
      }

      @TestMetadata("constructorWithVararg.kt")
      public void testConstructorWithVararg() {
        runTest("compiler/testData/codegen/box/enum/defaultCtor/constructorWithVararg.kt");
      }

      @TestMetadata("entryClassConstructorWithDefaultArguments.kt")
      public void testEntryClassConstructorWithDefaultArguments() {
        runTest("compiler/testData/codegen/box/enum/defaultCtor/entryClassConstructorWithDefaultArguments.kt");
      }

      @TestMetadata("entryClassConstructorWithVarargs.kt")
      public void testEntryClassConstructorWithVarargs() {
        runTest("compiler/testData/codegen/box/enum/defaultCtor/entryClassConstructorWithVarargs.kt");
      }

      @TestMetadata("noPrimaryConstructor.kt")
      public void testNoPrimaryConstructor() {
        runTest("compiler/testData/codegen/box/enum/defaultCtor/noPrimaryConstructor.kt");
      }

      @TestMetadata("secondaryConstructorWithDefaultArguments.kt")
      public void testSecondaryConstructorWithDefaultArguments() {
        runTest("compiler/testData/codegen/box/enum/defaultCtor/secondaryConstructorWithDefaultArguments.kt");
      }

      @TestMetadata("secondaryConstructorWithVararg.kt")
      public void testSecondaryConstructorWithVararg() {
        runTest("compiler/testData/codegen/box/enum/defaultCtor/secondaryConstructorWithVararg.kt");
      }
    }
  }

  @TestMetadata("compiler/testData/codegen/box/equivalentCalls")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class EquivalentCalls extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInEquivalentCalls() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/equivalentCalls"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("localEquivalentWins.kt")
    public void testLocalEquivalentWins() {
      runTest("compiler/testData/codegen/box/equivalentCalls/localEquivalentWins.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/escapeAnalysis")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class EscapeAnalysis extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInEscapeAnalysis() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/escapeAnalysis"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("recursion.kt")
    public void testRecursion() {
      runTest("compiler/testData/codegen/box/escapeAnalysis/recursion.kt");
    }

    @TestMetadata("stack_array.kt")
    public void testStack_array() {
      runTest("compiler/testData/codegen/box/escapeAnalysis/stack_array.kt");
    }

    @TestMetadata("test1.kt")
    public void testTest1() {
      runTest("compiler/testData/codegen/box/escapeAnalysis/test1.kt");
    }

    @TestMetadata("test10.kt")
    public void testTest10() {
      runTest("compiler/testData/codegen/box/escapeAnalysis/test10.kt");
    }

    @TestMetadata("test11.kt")
    public void testTest11() {
      runTest("compiler/testData/codegen/box/escapeAnalysis/test11.kt");
    }

    @TestMetadata("test12.kt")
    public void testTest12() {
      runTest("compiler/testData/codegen/box/escapeAnalysis/test12.kt");
    }

    @TestMetadata("test13.kt")
    public void testTest13() {
      runTest("compiler/testData/codegen/box/escapeAnalysis/test13.kt");
    }

    @TestMetadata("test2.kt")
    public void testTest2() {
      runTest("compiler/testData/codegen/box/escapeAnalysis/test2.kt");
    }

    @TestMetadata("test3.kt")
    public void testTest3() {
      runTest("compiler/testData/codegen/box/escapeAnalysis/test3.kt");
    }

    @TestMetadata("test4.kt")
    public void testTest4() {
      runTest("compiler/testData/codegen/box/escapeAnalysis/test4.kt");
    }

    @TestMetadata("test5.kt")
    public void testTest5() {
      runTest("compiler/testData/codegen/box/escapeAnalysis/test5.kt");
    }

    @TestMetadata("test6.kt")
    public void testTest6() {
      runTest("compiler/testData/codegen/box/escapeAnalysis/test6.kt");
    }

    @TestMetadata("test7.kt")
    public void testTest7() {
      runTest("compiler/testData/codegen/box/escapeAnalysis/test7.kt");
    }

    @TestMetadata("test8.kt")
    public void testTest8() {
      runTest("compiler/testData/codegen/box/escapeAnalysis/test8.kt");
    }

    @TestMetadata("test9.kt")
    public void testTest9() {
      runTest("compiler/testData/codegen/box/escapeAnalysis/test9.kt");
    }

    @TestMetadata("zeroOutObjectOnAlloc.kt")
    public void testZeroOutObjectOnAlloc() {
      runTest("compiler/testData/codegen/box/escapeAnalysis/zeroOutObjectOnAlloc.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/evaluate")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Evaluate extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInEvaluate() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/evaluate"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("char.kt")
    public void testChar() {
      runTest("compiler/testData/codegen/box/evaluate/char.kt");
    }

    @TestMetadata("divide.kt")
    public void testDivide() {
      runTest("compiler/testData/codegen/box/evaluate/divide.kt");
    }

    @TestMetadata("floorDiv.kt")
    public void testFloorDiv() {
      runTest("compiler/testData/codegen/box/evaluate/floorDiv.kt");
    }

    @TestMetadata("intrinsics.kt")
    public void testIntrinsics() {
      runTest("compiler/testData/codegen/box/evaluate/intrinsics.kt");
    }

    @TestMetadata("kt9443.kt")
    public void testKt9443() {
      runTest("compiler/testData/codegen/box/evaluate/kt9443.kt");
    }

    @TestMetadata("maxValue.kt")
    public void testMaxValue() {
      runTest("compiler/testData/codegen/box/evaluate/maxValue.kt");
    }

    @TestMetadata("maxValueByte.kt")
    public void testMaxValueByte() {
      runTest("compiler/testData/codegen/box/evaluate/maxValueByte.kt");
    }

    @TestMetadata("maxValueInt.kt")
    public void testMaxValueInt() {
      runTest("compiler/testData/codegen/box/evaluate/maxValueInt.kt");
    }

    @TestMetadata("minus.kt")
    public void testMinus() {
      runTest("compiler/testData/codegen/box/evaluate/minus.kt");
    }

    @TestMetadata("mod.kt")
    public void testMod() {
      runTest("compiler/testData/codegen/box/evaluate/mod.kt");
    }

    @TestMetadata("multiply.kt")
    public void testMultiply() {
      runTest("compiler/testData/codegen/box/evaluate/multiply.kt");
    }

    @TestMetadata("parenthesized.kt")
    public void testParenthesized() {
      runTest("compiler/testData/codegen/box/evaluate/parenthesized.kt");
    }

    @TestMetadata("plus.kt")
    public void testPlus() {
      runTest("compiler/testData/codegen/box/evaluate/plus.kt");
    }

    @TestMetadata("rem.kt")
    public void testRem() {
      runTest("compiler/testData/codegen/box/evaluate/rem.kt");
    }

    @TestMetadata("simpleCallBinary.kt")
    public void testSimpleCallBinary() {
      runTest("compiler/testData/codegen/box/evaluate/simpleCallBinary.kt");
    }

    @TestMetadata("unaryMinus.kt")
    public void testUnaryMinus() {
      runTest("compiler/testData/codegen/box/evaluate/unaryMinus.kt");
    }

    @TestMetadata("unaryPlus.kt")
    public void testUnaryPlus() {
      runTest("compiler/testData/codegen/box/evaluate/unaryPlus.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/exceptions")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Exceptions extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInExceptions() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/exceptions"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("catch1.kt")
    public void testCatch1() {
      runTest("compiler/testData/codegen/box/exceptions/catch1.kt");
    }

    @TestMetadata("catch2.kt")
    public void testCatch2() {
      runTest("compiler/testData/codegen/box/exceptions/catch2.kt");
    }

    @TestMetadata("catch7.kt")
    public void testCatch7() {
      runTest("compiler/testData/codegen/box/exceptions/catch7.kt");
    }

    @TestMetadata("extend0.kt")
    public void testExtend0() {
      runTest("compiler/testData/codegen/box/exceptions/extend0.kt");
    }

    @TestMetadata("rethrow.kt")
    public void testRethrow() {
      runTest("compiler/testData/codegen/box/exceptions/rethrow.kt");
    }

    @TestMetadata("throw0.kt")
    public void testThrow0() {
      runTest("compiler/testData/codegen/box/exceptions/throw0.kt");
    }

    @TestMetadata("throw_from_catch.kt")
    public void testThrow_from_catch() {
      runTest("compiler/testData/codegen/box/exceptions/throw_from_catch.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/exclExcl")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class ExclExcl extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInExclExcl() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/exclExcl"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("genericNull.kt")
    public void testGenericNull() {
      runTest("compiler/testData/codegen/box/exclExcl/genericNull.kt");
    }

    @TestMetadata("kt48440.kt")
    public void testKt48440() {
      runTest("compiler/testData/codegen/box/exclExcl/kt48440.kt");
    }

    @TestMetadata("kt48440_2.kt")
    public void testKt48440_2() {
      runTest("compiler/testData/codegen/box/exclExcl/kt48440_2.kt");
    }

    @TestMetadata("primitive.kt")
    public void testPrimitive() {
      runTest("compiler/testData/codegen/box/exclExcl/primitive.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/extensionClasses")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class ExtensionClasses extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInExtensionClasses() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/extensionClasses"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("constructors.kt")
    public void testConstructors() {
      runTest("compiler/testData/codegen/box/extensionClasses/constructors.kt");
    }

    @TestMetadata("contextualPrimaryConstructorWithParams.kt")
    public void testContextualPrimaryConstructorWithParams() {
      runTest("compiler/testData/codegen/box/extensionClasses/contextualPrimaryConstructorWithParams.kt");
    }

    @TestMetadata("edouble.kt")
    public void testEdouble() {
      runTest("compiler/testData/codegen/box/extensionClasses/edouble.kt");
    }

    @TestMetadata("genericCollection.kt")
    public void testGenericCollection() {
      runTest("compiler/testData/codegen/box/extensionClasses/genericCollection.kt");
    }

    @TestMetadata("generics.kt")
    public void testGenerics() {
      runTest("compiler/testData/codegen/box/extensionClasses/generics.kt");
    }

    @TestMetadata("lambdaReceiverFromContext.kt")
    public void testLambdaReceiverFromContext() {
      runTest("compiler/testData/codegen/box/extensionClasses/lambdaReceiverFromContext.kt");
    }

    @TestMetadata("multiple.kt")
    public void testMultiple() {
      runTest("compiler/testData/codegen/box/extensionClasses/multiple.kt");
    }

    @TestMetadata("noRedeclaration.kt")
    public void testNoRedeclaration() {
      runTest("compiler/testData/codegen/box/extensionClasses/noRedeclaration.kt");
    }

    @TestMetadata("propertyWithContext.kt")
    public void testPropertyWithContext() {
      runTest("compiler/testData/codegen/box/extensionClasses/propertyWithContext.kt");
    }

    @TestMetadata("simple.kt")
    public void testSimple() {
      runTest("compiler/testData/codegen/box/extensionClasses/simple.kt");
    }

    @TestMetadata("typealiasForContextualClass.kt")
    public void testTypealiasForContextualClass() {
      runTest("compiler/testData/codegen/box/extensionClasses/typealiasForContextualClass.kt");
    }

    @TestMetadata("useFromAnotherModule.kt")
    public void testUseFromAnotherModule() {
      runTest("compiler/testData/codegen/box/extensionClasses/useFromAnotherModule.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/extensionFunctions")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class ExtensionFunctions extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInExtensionFunctions() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/extensionFunctions"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("classMethodCallExtensionSuper.kt")
    public void testClassMethodCallExtensionSuper() {
      runTest("compiler/testData/codegen/box/extensionFunctions/classMethodCallExtensionSuper.kt");
    }

    @TestMetadata("defaultMethodInterfaceCallExtensionSuper.kt")
    public void testDefaultMethodInterfaceCallExtensionSuper() {
      runTest("compiler/testData/codegen/box/extensionFunctions/defaultMethodInterfaceCallExtensionSuper.kt");
    }

    @TestMetadata("executionOrder.kt")
    public void testExecutionOrder() {
      runTest("compiler/testData/codegen/box/extensionFunctions/executionOrder.kt");
    }

    @TestMetadata("extensionFunctionAsSupertype.kt")
    public void testExtensionFunctionAsSupertype() {
      runTest("compiler/testData/codegen/box/extensionFunctions/extensionFunctionAsSupertype.kt");
    }

    @TestMetadata("kt1061.kt")
    public void testKt1061() {
      runTest("compiler/testData/codegen/box/extensionFunctions/kt1061.kt");
    }

    @TestMetadata("kt1249.kt")
    public void testKt1249() {
      runTest("compiler/testData/codegen/box/extensionFunctions/kt1249.kt");
    }

    @TestMetadata("kt1290.kt")
    public void testKt1290() {
      runTest("compiler/testData/codegen/box/extensionFunctions/kt1290.kt");
    }

    @TestMetadata("kt13312.kt")
    public void testKt13312() {
      runTest("compiler/testData/codegen/box/extensionFunctions/kt13312.kt");
    }

    @TestMetadata("kt1776.kt")
    public void testKt1776() {
      runTest("compiler/testData/codegen/box/extensionFunctions/kt1776.kt");
    }

    @TestMetadata("kt1953.kt")
    public void testKt1953() {
      runTest("compiler/testData/codegen/box/extensionFunctions/kt1953.kt");
    }

    @TestMetadata("kt1953_class.kt")
    public void testKt1953_class() {
      runTest("compiler/testData/codegen/box/extensionFunctions/kt1953_class.kt");
    }

    @TestMetadata("kt23675.kt")
    public void testKt23675() {
      runTest("compiler/testData/codegen/box/extensionFunctions/kt23675.kt");
    }

    @TestMetadata("kt3285.kt")
    public void testKt3285() {
      runTest("compiler/testData/codegen/box/extensionFunctions/kt3285.kt");
    }

    @TestMetadata("kt3298.kt")
    public void testKt3298() {
      runTest("compiler/testData/codegen/box/extensionFunctions/kt3298.kt");
    }

    @TestMetadata("kt3646.kt")
    public void testKt3646() {
      runTest("compiler/testData/codegen/box/extensionFunctions/kt3646.kt");
    }

    @TestMetadata("kt3969.kt")
    public void testKt3969() {
      runTest("compiler/testData/codegen/box/extensionFunctions/kt3969.kt");
    }

    @TestMetadata("kt4228.kt")
    public void testKt4228() {
      runTest("compiler/testData/codegen/box/extensionFunctions/kt4228.kt");
    }

    @TestMetadata("kt475.kt")
    public void testKt475() {
      runTest("compiler/testData/codegen/box/extensionFunctions/kt475.kt");
    }

    @TestMetadata("kt5467.kt")
    public void testKt5467() {
      runTest("compiler/testData/codegen/box/extensionFunctions/kt5467.kt");
    }

    @TestMetadata("kt606.kt")
    public void testKt606() {
      runTest("compiler/testData/codegen/box/extensionFunctions/kt606.kt");
    }

    @TestMetadata("kt865.kt")
    public void testKt865() {
      runTest("compiler/testData/codegen/box/extensionFunctions/kt865.kt");
    }

    @TestMetadata("memberExtensionEqualsHashCodeToStringInInterface.kt")
    public void testMemberExtensionEqualsHashCodeToStringInInterface() {
      runTest("compiler/testData/codegen/box/extensionFunctions/memberExtensionEqualsHashCodeToStringInInterface.kt");
    }

    @TestMetadata("nested2.kt")
    public void testNested2() {
      runTest("compiler/testData/codegen/box/extensionFunctions/nested2.kt");
    }

    @TestMetadata("shared.kt")
    public void testShared() {
      runTest("compiler/testData/codegen/box/extensionFunctions/shared.kt");
    }

    @TestMetadata("simple.kt")
    public void testSimple() {
      runTest("compiler/testData/codegen/box/extensionFunctions/simple.kt");
    }

    @TestMetadata("thisMethodInObjectLiteral.kt")
    public void testThisMethodInObjectLiteral() {
      runTest("compiler/testData/codegen/box/extensionFunctions/thisMethodInObjectLiteral.kt");
    }

    @TestMetadata("virtual.kt")
    public void testVirtual() {
      runTest("compiler/testData/codegen/box/extensionFunctions/virtual.kt");
    }

    @TestMetadata("whenFail.kt")
    public void testWhenFail() {
      runTest("compiler/testData/codegen/box/extensionFunctions/whenFail.kt");
    }

    @TestMetadata("compiler/testData/codegen/box/extensionFunctions/contextReceivers")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ContextReceivers extends AbstractLightAnalysisModeTest {
      @TestMetadata("contextAndNoContextOverloads.kt")
      public void ignoreContextAndNoContextOverloads() {
        runTest("compiler/testData/codegen/box/extensionFunctions/contextReceivers/contextAndNoContextOverloads.kt");
      }

      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInContextReceivers() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/extensionFunctions/contextReceivers"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("arrayAccessCompositeOperators.kt")
      public void testArrayAccessCompositeOperators() {
        runTest("compiler/testData/codegen/box/extensionFunctions/contextReceivers/arrayAccessCompositeOperators.kt");
      }

      @TestMetadata("arrayAccessOperators.kt")
      public void testArrayAccessOperators() {
        runTest("compiler/testData/codegen/box/extensionFunctions/contextReceivers/arrayAccessOperators.kt");
      }

      @TestMetadata("compoundAssignmentOperators.kt")
      public void testCompoundAssignmentOperators() {
        runTest("compiler/testData/codegen/box/extensionFunctions/contextReceivers/compoundAssignmentOperators.kt");
      }

      @TestMetadata("contextAndExtensionLambdaIndy.kt")
      public void testContextAndExtensionLambdaIndy() {
        runTest("compiler/testData/codegen/box/extensionFunctions/contextReceivers/contextAndExtensionLambdaIndy.kt");
      }

      @TestMetadata("contextAndExtensionSameName.kt")
      public void testContextAndExtensionSameName() {
        runTest("compiler/testData/codegen/box/extensionFunctions/contextReceivers/contextAndExtensionSameName.kt");
      }

      @TestMetadata("contextualFunctionConversion.kt")
      public void testContextualFunctionConversion() {
        runTest("compiler/testData/codegen/box/extensionFunctions/contextReceivers/contextualFunctionConversion.kt");
      }

      @TestMetadata("contextualInlineCall.kt")
      public void testContextualInlineCall() {
        runTest("compiler/testData/codegen/box/extensionFunctions/contextReceivers/contextualInlineCall.kt");
      }

      @TestMetadata("delegatedPropertiesOperators.kt")
      public void testDelegatedPropertiesOperators() {
        runTest("compiler/testData/codegen/box/extensionFunctions/contextReceivers/delegatedPropertiesOperators.kt");
      }

      @TestMetadata("inferGenericPropertyType.kt")
      public void testInferGenericPropertyType() {
        runTest("compiler/testData/codegen/box/extensionFunctions/contextReceivers/inferGenericPropertyType.kt");
      }

      @TestMetadata("iteratorOperator.kt")
      public void testIteratorOperator() {
        runTest("compiler/testData/codegen/box/extensionFunctions/contextReceivers/iteratorOperator.kt");
      }

      @TestMetadata("kt51247.kt")
      public void testKt51247() {
        runTest("compiler/testData/codegen/box/extensionFunctions/contextReceivers/kt51247.kt");
      }

      @TestMetadata("kt51277.kt")
      public void testKt51277() {
        runTest("compiler/testData/codegen/box/extensionFunctions/contextReceivers/kt51277.kt");
      }

      @TestMetadata("kt51284.kt")
      public void testKt51284() {
        runTest("compiler/testData/codegen/box/extensionFunctions/contextReceivers/kt51284.kt");
      }

      @TestMetadata("kt51290.kt")
      public void testKt51290() {
        runTest("compiler/testData/codegen/box/extensionFunctions/contextReceivers/kt51290.kt");
      }

      @TestMetadata("kt51397.kt")
      public void testKt51397() {
        runTest("compiler/testData/codegen/box/extensionFunctions/contextReceivers/kt51397.kt");
      }

      @TestMetadata("kt51475.kt")
      public void testKt51475() {
        runTest("compiler/testData/codegen/box/extensionFunctions/contextReceivers/kt51475.kt");
      }

      @TestMetadata("kt51863.kt")
      public void testKt51863() {
        runTest("compiler/testData/codegen/box/extensionFunctions/contextReceivers/kt51863.kt");
      }

      @TestMetadata("kt51951.kt")
      public void testKt51951() {
        runTest("compiler/testData/codegen/box/extensionFunctions/contextReceivers/kt51951.kt");
      }

      @TestMetadata("kt52207.kt")
      public void testKt52207() {
        runTest("compiler/testData/codegen/box/extensionFunctions/contextReceivers/kt52207.kt");
      }

      @TestMetadata("kt52213.kt")
      public void testKt52213() {
        runTest("compiler/testData/codegen/box/extensionFunctions/contextReceivers/kt52213.kt");
      }

      @TestMetadata("kt52373.kt")
      public void testKt52373() {
        runTest("compiler/testData/codegen/box/extensionFunctions/contextReceivers/kt52373.kt");
      }

      @TestMetadata("kt52459.kt")
      public void testKt52459() {
        runTest("compiler/testData/codegen/box/extensionFunctions/contextReceivers/kt52459.kt");
      }

      @TestMetadata("kt53551.kt")
      public void testKt53551() {
        runTest("compiler/testData/codegen/box/extensionFunctions/contextReceivers/kt53551.kt");
      }

      @TestMetadata("kt53846.kt")
      public void testKt53846() {
        runTest("compiler/testData/codegen/box/extensionFunctions/contextReceivers/kt53846.kt");
      }

      @TestMetadata("kt54357.kt")
      public void testKt54357() {
        runTest("compiler/testData/codegen/box/extensionFunctions/contextReceivers/kt54357.kt");
      }

      @TestMetadata("kt56508.kt")
      public void testKt56508() {
        runTest("compiler/testData/codegen/box/extensionFunctions/contextReceivers/kt56508.kt");
      }

      @TestMetadata("kt58476.kt")
      public void testKt58476() {
        runTest("compiler/testData/codegen/box/extensionFunctions/contextReceivers/kt58476.kt");
      }

      @TestMetadata("kt63430.kt")
      public void testKt63430() {
        runTest("compiler/testData/codegen/box/extensionFunctions/contextReceivers/kt63430.kt");
      }

      @TestMetadata("overload.kt")
      public void testOverload() {
        runTest("compiler/testData/codegen/box/extensionFunctions/contextReceivers/overload.kt");
      }

      @TestMetadata("overloading.kt")
      public void testOverloading() {
        runTest("compiler/testData/codegen/box/extensionFunctions/contextReceivers/overloading.kt");
      }

      @TestMetadata("parameterizedContextualLambda.kt")
      public void testParameterizedContextualLambda() {
        runTest("compiler/testData/codegen/box/extensionFunctions/contextReceivers/parameterizedContextualLambda.kt");
      }

      @TestMetadata("passingLambdaToContextualParam.kt")
      public void testPassingLambdaToContextualParam() {
        runTest("compiler/testData/codegen/box/extensionFunctions/contextReceivers/passingLambdaToContextualParam.kt");
      }

      @TestMetadata("plusAssign.kt")
      public void testPlusAssign() {
        runTest("compiler/testData/codegen/box/extensionFunctions/contextReceivers/plusAssign.kt");
      }

      @TestMetadata("plusMatrix.kt")
      public void testPlusMatrix() {
        runTest("compiler/testData/codegen/box/extensionFunctions/contextReceivers/plusMatrix.kt");
      }

      @TestMetadata("propertyCompoundAssignment.kt")
      public void testPropertyCompoundAssignment() {
        runTest("compiler/testData/codegen/box/extensionFunctions/contextReceivers/propertyCompoundAssignment.kt");
      }

      @TestMetadata("receiversOrder.kt")
      public void testReceiversOrder() {
        runTest("compiler/testData/codegen/box/extensionFunctions/contextReceivers/receiversOrder.kt");
      }

      @TestMetadata("simpleCall.kt")
      public void testSimpleCall() {
        runTest("compiler/testData/codegen/box/extensionFunctions/contextReceivers/simpleCall.kt");
      }

      @TestMetadata("substitutedContextReceivers.kt")
      public void testSubstitutedContextReceivers() {
        runTest("compiler/testData/codegen/box/extensionFunctions/contextReceivers/substitutedContextReceivers.kt");
      }

      @TestMetadata("superClassAndSubClassWithContextReceiver.kt")
      public void testSuperClassAndSubClassWithContextReceiver() {
        runTest("compiler/testData/codegen/box/extensionFunctions/contextReceivers/superClassAndSubClassWithContextReceiver.kt");
      }

      @TestMetadata("superClassAndSubClassWithContextReceiverSubstituted.kt")
      public void testSuperClassAndSubClassWithContextReceiverSubstituted() {
        runTest("compiler/testData/codegen/box/extensionFunctions/contextReceivers/superClassAndSubClassWithContextReceiverSubstituted.kt");
      }

      @TestMetadata("suspendContextualWithExtension.kt")
      public void testSuspendContextualWithExtension() {
        runTest("compiler/testData/codegen/box/extensionFunctions/contextReceivers/suspendContextualWithExtension.kt");
      }

      @TestMetadata("this.kt")
      public void testThis() {
        runTest("compiler/testData/codegen/box/extensionFunctions/contextReceivers/this.kt");
      }

      @TestMetadata("unaryOperators.kt")
      public void testUnaryOperators() {
        runTest("compiler/testData/codegen/box/extensionFunctions/contextReceivers/unaryOperators.kt");
      }

      @TestMetadata("useContextReceiverInPropertyInitializer.kt")
      public void testUseContextReceiverInPropertyInitializer() {
        runTest("compiler/testData/codegen/box/extensionFunctions/contextReceivers/useContextReceiverInPropertyInitializer.kt");
      }

      @TestMetadata("useFromAnotherModule.kt")
      public void testUseFromAnotherModule() {
        runTest("compiler/testData/codegen/box/extensionFunctions/contextReceivers/useFromAnotherModule.kt");
      }

      @TestMetadata("useFromAnotherModuleSuspending.kt")
      public void testUseFromAnotherModuleSuspending() {
        runTest("compiler/testData/codegen/box/extensionFunctions/contextReceivers/useFromAnotherModuleSuspending.kt");
      }

      @TestMetadata("useFromAnotherModuleWithDefaultParameterValues.kt")
      public void testUseFromAnotherModuleWithDefaultParameterValues() {
        runTest("compiler/testData/codegen/box/extensionFunctions/contextReceivers/useFromAnotherModuleWithDefaultParameterValues.kt");
      }

      @TestMetadata("withTwoContextReceivers.kt")
      public void testWithTwoContextReceivers() {
        runTest("compiler/testData/codegen/box/extensionFunctions/contextReceivers/withTwoContextReceivers.kt");
      }

      @TestMetadata("compiler/testData/codegen/box/extensionFunctions/contextReceivers/fromKEEP")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class FromKEEP extends AbstractLightAnalysisModeTest {
        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        public void testAllFilesPresentInFromKEEP() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/extensionFunctions/contextReceivers/fromKEEP"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("canvas.kt")
        public void testCanvas() {
          runTest("compiler/testData/codegen/box/extensionFunctions/contextReceivers/fromKEEP/canvas.kt");
        }

        @TestMetadata("compareTo.kt")
        public void testCompareTo() {
          runTest("compiler/testData/codegen/box/extensionFunctions/contextReceivers/fromKEEP/compareTo.kt");
        }

        @TestMetadata("decimateEveryEvenThird.kt")
        public void testDecimateEveryEvenThird() {
          runTest("compiler/testData/codegen/box/extensionFunctions/contextReceivers/fromKEEP/decimateEveryEvenThird.kt");
        }

        @TestMetadata("dp.kt")
        public void testDp() {
          runTest("compiler/testData/codegen/box/extensionFunctions/contextReceivers/fromKEEP/dp.kt");
        }

        @TestMetadata("functionalType.kt")
        public void testFunctionalType() {
          runTest("compiler/testData/codegen/box/extensionFunctions/contextReceivers/fromKEEP/functionalType.kt");
        }

        @TestMetadata("monoidSum.kt")
        public void testMonoidSum() {
          runTest("compiler/testData/codegen/box/extensionFunctions/contextReceivers/fromKEEP/monoidSum.kt");
        }

        @TestMetadata("structuredConcurrency.kt")
        public void testStructuredConcurrency() {
          runTest("compiler/testData/codegen/box/extensionFunctions/contextReceivers/fromKEEP/structuredConcurrency.kt");
        }
      }
    }
  }

  @TestMetadata("compiler/testData/codegen/box/extensionProperties")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class ExtensionProperties extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    @TestMetadata("accessorForPrivateSetter.kt")
    public void testAccessorForPrivateSetter() {
      runTest("compiler/testData/codegen/box/extensionProperties/accessorForPrivateSetter.kt");
    }

    public void testAllFilesPresentInExtensionProperties() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/extensionProperties"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("genericContextOverride.kt")
    public void testGenericContextOverride() {
      runTest("compiler/testData/codegen/box/extensionProperties/genericContextOverride.kt");
    }

    @TestMetadata("genericValForPrimitiveType.kt")
    public void testGenericValForPrimitiveType() {
      runTest("compiler/testData/codegen/box/extensionProperties/genericValForPrimitiveType.kt");
    }

    @TestMetadata("genericValMultipleUpperBounds.kt")
    public void testGenericValMultipleUpperBounds() {
      runTest("compiler/testData/codegen/box/extensionProperties/genericValMultipleUpperBounds.kt");
    }

    @TestMetadata("genericVarForPrimitiveType.kt")
    public void testGenericVarForPrimitiveType() {
      runTest("compiler/testData/codegen/box/extensionProperties/genericVarForPrimitiveType.kt");
    }

    @TestMetadata("inClass.kt")
    public void testInClass() {
      runTest("compiler/testData/codegen/box/extensionProperties/inClass.kt");
    }

    @TestMetadata("inClassLongTypeInReceiver.kt")
    public void testInClassLongTypeInReceiver() {
      runTest("compiler/testData/codegen/box/extensionProperties/inClassLongTypeInReceiver.kt");
    }

    @TestMetadata("inClassWithGetter.kt")
    public void testInClassWithGetter() {
      runTest("compiler/testData/codegen/box/extensionProperties/inClassWithGetter.kt");
    }

    @TestMetadata("inClassWithPrivateGetter.kt")
    public void testInClassWithPrivateGetter() {
      runTest("compiler/testData/codegen/box/extensionProperties/inClassWithPrivateGetter.kt");
    }

    @TestMetadata("inClassWithPrivateSetter.kt")
    public void testInClassWithPrivateSetter() {
      runTest("compiler/testData/codegen/box/extensionProperties/inClassWithPrivateSetter.kt");
    }

    @TestMetadata("inClassWithSetter.kt")
    public void testInClassWithSetter() {
      runTest("compiler/testData/codegen/box/extensionProperties/inClassWithSetter.kt");
    }

    @TestMetadata("kt46952.kt")
    public void testKt46952() {
      runTest("compiler/testData/codegen/box/extensionProperties/kt46952.kt");
    }

    @TestMetadata("kt9897.kt")
    public void testKt9897() {
      runTest("compiler/testData/codegen/box/extensionProperties/kt9897.kt");
    }

    @TestMetadata("kt9897_topLevel.kt")
    public void testKt9897_topLevel() {
      runTest("compiler/testData/codegen/box/extensionProperties/kt9897_topLevel.kt");
    }

    @TestMetadata("nonAbstractInInterface.kt")
    public void testNonAbstractInInterface() {
      runTest("compiler/testData/codegen/box/extensionProperties/nonAbstractInInterface.kt");
    }

    @TestMetadata("topLevel.kt")
    public void testTopLevel() {
      runTest("compiler/testData/codegen/box/extensionProperties/topLevel.kt");
    }

    @TestMetadata("topLevelLongTypeInReceiver.kt")
    public void testTopLevelLongTypeInReceiver() {
      runTest("compiler/testData/codegen/box/extensionProperties/topLevelLongTypeInReceiver.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/external")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class External extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInExternal() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/external"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("jvmStaticExternal.kt")
    public void testJvmStaticExternal() {
      runTest("compiler/testData/codegen/box/external/jvmStaticExternal.kt");
    }

    @TestMetadata("jvmStaticExternalPrivate.kt")
    public void testJvmStaticExternalPrivate() {
      runTest("compiler/testData/codegen/box/external/jvmStaticExternalPrivate.kt");
    }

    @TestMetadata("withDefaultArg.kt")
    public void testWithDefaultArg() {
      runTest("compiler/testData/codegen/box/external/withDefaultArg.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/fakeOverride")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class FakeOverride extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInFakeOverride() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/fakeOverride"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("complexOverriddensInLazyFunctions.kt")
    public void testComplexOverriddensInLazyFunctions() {
      runTest("compiler/testData/codegen/box/fakeOverride/complexOverriddensInLazyFunctions.kt");
    }

    @TestMetadata("diamondFunction.kt")
    public void testDiamondFunction() {
      runTest("compiler/testData/codegen/box/fakeOverride/diamondFunction.kt");
    }

    @TestMetadata("diamondWithNullabilityAnnotations.kt")
    public void testDiamondWithNullabilityAnnotations() {
      runTest("compiler/testData/codegen/box/fakeOverride/diamondWithNullabilityAnnotations.kt");
    }

    @TestMetadata("fakeOverrideInAnonymousObject.kt")
    public void testFakeOverrideInAnonymousObject() {
      runTest("compiler/testData/codegen/box/fakeOverride/fakeOverrideInAnonymousObject.kt");
    }

    @TestMetadata("fakeOverrideOfPrivateSetter.kt")
    public void testFakeOverrideOfPrivateSetter() {
      runTest("compiler/testData/codegen/box/fakeOverride/fakeOverrideOfPrivateSetter.kt");
    }

    @TestMetadata("fakeOverrideWithMissingClassInSignature.kt")
    public void testFakeOverrideWithMissingClassInSignature() {
      runTest("compiler/testData/codegen/box/fakeOverride/fakeOverrideWithMissingClassInSignature.kt");
    }

    @TestMetadata("fieldInJKJKHierarchy.kt")
    public void testFieldInJKJKHierarchy() {
      runTest("compiler/testData/codegen/box/fakeOverride/fieldInJKJKHierarchy.kt");
    }

    @TestMetadata("function.kt")
    public void testFunction() {
      runTest("compiler/testData/codegen/box/fakeOverride/function.kt");
    }

    @TestMetadata("hierarchyOfExceptions.kt")
    public void testHierarchyOfExceptions() {
      runTest("compiler/testData/codegen/box/fakeOverride/hierarchyOfExceptions.kt");
    }

    @TestMetadata("internalFromFriendModule.kt")
    public void testInternalFromFriendModule() {
      runTest("compiler/testData/codegen/box/fakeOverride/internalFromFriendModule.kt");
    }

    @TestMetadata("intersectionInLocal.kt")
    public void testIntersectionInLocal() {
      runTest("compiler/testData/codegen/box/fakeOverride/intersectionInLocal.kt");
    }

    @TestMetadata("intersectionOverrideBetweenValAndVar.kt")
    public void testIntersectionOverrideBetweenValAndVar() {
      runTest("compiler/testData/codegen/box/fakeOverride/intersectionOverrideBetweenValAndVar.kt");
    }

    @TestMetadata("javaInheritsKotlinIntersectionOverride.kt")
    public void testJavaInheritsKotlinIntersectionOverride() {
      runTest("compiler/testData/codegen/box/fakeOverride/javaInheritsKotlinIntersectionOverride.kt");
    }

    @TestMetadata("kjkWithPackagePrivate.kt")
    public void testKjkWithPackagePrivate() {
      runTest("compiler/testData/codegen/box/fakeOverride/kjkWithPackagePrivate.kt");
    }

    @TestMetadata("kt40180.kt")
    public void testKt40180() {
      runTest("compiler/testData/codegen/box/fakeOverride/kt40180.kt");
    }

    @TestMetadata("kt40180_2.kt")
    public void testKt40180_2() {
      runTest("compiler/testData/codegen/box/fakeOverride/kt40180_2.kt");
    }

    @TestMetadata("kt40180_3.kt")
    public void testKt40180_3() {
      runTest("compiler/testData/codegen/box/fakeOverride/kt40180_3.kt");
    }

    @TestMetadata("kt49371.kt")
    public void testKt49371() {
      runTest("compiler/testData/codegen/box/fakeOverride/kt49371.kt");
    }

    @TestMetadata("kt65116.kt")
    public void testKt65116() {
      runTest("compiler/testData/codegen/box/fakeOverride/kt65116.kt");
    }

    @TestMetadata("kt65274.kt")
    public void testKt65274() {
      runTest("compiler/testData/codegen/box/fakeOverride/kt65274.kt");
    }

    @TestMetadata("kt65695.kt")
    public void testKt65695() {
      runTest("compiler/testData/codegen/box/fakeOverride/kt65695.kt");
    }

    @TestMetadata("kt65707.kt")
    public void testKt65707() {
      runTest("compiler/testData/codegen/box/fakeOverride/kt65707.kt");
    }

    @TestMetadata("methodOfAnyFromInterface.kt")
    public void testMethodOfAnyFromInterface() {
      runTest("compiler/testData/codegen/box/fakeOverride/methodOfAnyFromInterface.kt");
    }

    @TestMetadata("privateFakeOverrides0.kt")
    public void testPrivateFakeOverrides0() {
      runTest("compiler/testData/codegen/box/fakeOverride/privateFakeOverrides0.kt");
    }

    @TestMetadata("privateFakeOverrides1.kt")
    public void testPrivateFakeOverrides1() {
      runTest("compiler/testData/codegen/box/fakeOverride/privateFakeOverrides1.kt");
    }

    @TestMetadata("propertyGetter.kt")
    public void testPropertyGetter() {
      runTest("compiler/testData/codegen/box/fakeOverride/propertyGetter.kt");
    }

    @TestMetadata("propertySetter.kt")
    public void testPropertySetter() {
      runTest("compiler/testData/codegen/box/fakeOverride/propertySetter.kt");
    }

    @TestMetadata("staticFakeOverridesInJKKJKHierarchyMultimodule.kt")
    public void testStaticFakeOverridesInJKKJKHierarchyMultimodule() {
      runTest("compiler/testData/codegen/box/fakeOverride/staticFakeOverridesInJKKJKHierarchyMultimodule.kt");
    }

    @TestMetadata("staticFakeOverridesInJKKJKHierarchyMultimodule_additionalInterfaces.kt")
    public void testStaticFakeOverridesInJKKJKHierarchyMultimodule_additionalInterfaces() {
      runTest("compiler/testData/codegen/box/fakeOverride/staticFakeOverridesInJKKJKHierarchyMultimodule_additionalInterfaces.kt");
    }

    @TestMetadata("substitutionInLocal.kt")
    public void testSubstitutionInLocal() {
      runTest("compiler/testData/codegen/box/fakeOverride/substitutionInLocal.kt");
    }

    @TestMetadata("varianceOverload.kt")
    public void testVarianceOverload() {
      runTest("compiler/testData/codegen/box/fakeOverride/varianceOverload.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/fieldRename")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class FieldRename extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInFieldRename() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/fieldRename"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("constructorAndClassObject.kt")
    public void testConstructorAndClassObject() {
      runTest("compiler/testData/codegen/box/fieldRename/constructorAndClassObject.kt");
    }

    @TestMetadata("delegates.kt")
    public void testDelegates() {
      runTest("compiler/testData/codegen/box/fieldRename/delegates.kt");
    }

    @TestMetadata("genericPropertyWithItself.kt")
    public void testGenericPropertyWithItself() {
      runTest("compiler/testData/codegen/box/fieldRename/genericPropertyWithItself.kt");
    }

    @TestMetadata("jvmFieldNoClash1.kt")
    public void testJvmFieldNoClash1() {
      runTest("compiler/testData/codegen/box/fieldRename/jvmFieldNoClash1.kt");
    }

    @TestMetadata("jvmFieldNoClash2.kt")
    public void testJvmFieldNoClash2() {
      runTest("compiler/testData/codegen/box/fieldRename/jvmFieldNoClash2.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/finally")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Finally extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInFinally() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/finally"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("breakAndOuterFinally.kt")
    public void testBreakAndOuterFinally() {
      runTest("compiler/testData/codegen/box/finally/breakAndOuterFinally.kt");
    }

    @TestMetadata("continueAndOuterFinally.kt")
    public void testContinueAndOuterFinally() {
      runTest("compiler/testData/codegen/box/finally/continueAndOuterFinally.kt");
    }

    @TestMetadata("decrementInFinally.kt")
    public void testDecrementInFinally() {
      runTest("compiler/testData/codegen/box/finally/decrementInFinally.kt");
    }

    @TestMetadata("finallyAndFinally.kt")
    public void testFinallyAndFinally() {
      runTest("compiler/testData/codegen/box/finally/finallyAndFinally.kt");
    }

    @TestMetadata("kt31923_break.kt")
    public void testKt31923_break() {
      runTest("compiler/testData/codegen/box/finally/kt31923_break.kt");
    }

    @TestMetadata("kt31923_continue.kt")
    public void testKt31923_continue() {
      runTest("compiler/testData/codegen/box/finally/kt31923_continue.kt");
    }

    @TestMetadata("kt31923_return.kt")
    public void testKt31923_return() {
      runTest("compiler/testData/codegen/box/finally/kt31923_return.kt");
    }

    @TestMetadata("kt31923_wrong.kt")
    public void testKt31923_wrong() {
      runTest("compiler/testData/codegen/box/finally/kt31923_wrong.kt");
    }

    @TestMetadata("kt3549.kt")
    public void testKt3549() {
      runTest("compiler/testData/codegen/box/finally/kt3549.kt");
    }

    @TestMetadata("kt3706.kt")
    public void testKt3706() {
      runTest("compiler/testData/codegen/box/finally/kt3706.kt");
    }

    @TestMetadata("kt3867.kt")
    public void testKt3867() {
      runTest("compiler/testData/codegen/box/finally/kt3867.kt");
    }

    @TestMetadata("kt3874.kt")
    public void testKt3874() {
      runTest("compiler/testData/codegen/box/finally/kt3874.kt");
    }

    @TestMetadata("kt3894.kt")
    public void testKt3894() {
      runTest("compiler/testData/codegen/box/finally/kt3894.kt");
    }

    @TestMetadata("kt4134.kt")
    public void testKt4134() {
      runTest("compiler/testData/codegen/box/finally/kt4134.kt");
    }

    @TestMetadata("loopAndFinally.kt")
    public void testLoopAndFinally() {
      runTest("compiler/testData/codegen/box/finally/loopAndFinally.kt");
    }

    @TestMetadata("nestedFinallyAndNonFinallyTry.kt")
    public void testNestedFinallyAndNonFinallyTry() {
      runTest("compiler/testData/codegen/box/finally/nestedFinallyAndNonFinallyTry.kt");
    }

    @TestMetadata("nestedFinallyAndNonFinallyTry2.kt")
    public void testNestedFinallyAndNonFinallyTry2() {
      runTest("compiler/testData/codegen/box/finally/nestedFinallyAndNonFinallyTry2.kt");
    }

    @TestMetadata("nestedFinallyAndNonFinallyTry3.kt")
    public void testNestedFinallyAndNonFinallyTry3() {
      runTest("compiler/testData/codegen/box/finally/nestedFinallyAndNonFinallyTry3.kt");
    }

    @TestMetadata("nestedFinallyAndNonFinallyTry4.kt")
    public void testNestedFinallyAndNonFinallyTry4() {
      runTest("compiler/testData/codegen/box/finally/nestedFinallyAndNonFinallyTry4.kt");
    }

    @TestMetadata("notChainCatch.kt")
    public void testNotChainCatch() {
      runTest("compiler/testData/codegen/box/finally/notChainCatch.kt");
    }

    @TestMetadata("objectInFinally.kt")
    public void testObjectInFinally() {
      runTest("compiler/testData/codegen/box/finally/objectInFinally.kt");
    }

    @TestMetadata("returnNullFromInlined.kt")
    public void testReturnNullFromInlined() {
      runTest("compiler/testData/codegen/box/finally/returnNullFromInlined.kt");
    }

    @TestMetadata("someStuff.kt")
    public void testSomeStuff() {
      runTest("compiler/testData/codegen/box/finally/someStuff.kt");
    }

    @TestMetadata("tryFinally.kt")
    public void testTryFinally() {
      runTest("compiler/testData/codegen/box/finally/tryFinally.kt");
    }

    @TestMetadata("tryLoopTry.kt")
    public void testTryLoopTry() {
      runTest("compiler/testData/codegen/box/finally/tryLoopTry.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/fir")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Fir extends AbstractLightAnalysisModeTest {
    @TestMetadata("callableReferenceConversionTopLevel.kt")
    public void ignoreCallableReferenceConversionTopLevel() {
      runTest("compiler/testData/codegen/box/fir/callableReferenceConversionTopLevel.kt");
    }

    @TestMetadata("emptyIntersectionWarning.kt")
    public void ignoreEmptyIntersectionWarning() {
      runTest("compiler/testData/codegen/box/fir/emptyIntersectionWarning.kt");
    }

    @TestMetadata("selectingLambdas.kt")
    public void ignoreSelectingLambdas() {
      runTest("compiler/testData/codegen/box/fir/selectingLambdas.kt");
    }

    @TestMetadata("typeParameterInClashingAccessor.kt")
    public void ignoreTypeParameterInClashingAccessor() {
      runTest("compiler/testData/codegen/box/fir/typeParameterInClashingAccessor.kt");
    }

    @TestMetadata("unqualifiedEnum.kt")
    public void ignoreUnqualifiedEnum() {
      runTest("compiler/testData/codegen/box/fir/unqualifiedEnum.kt");
    }

    @TestMetadata("vararg.kt")
    public void ignoreVararg() {
      runTest("compiler/testData/codegen/box/fir/vararg.kt");
    }

    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInFir() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/fir"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("anonymousOverrideWithDefaultInLocalOverridden.kt")
    public void testAnonymousOverrideWithDefaultInLocalOverridden() {
      runTest("compiler/testData/codegen/box/fir/anonymousOverrideWithDefaultInLocalOverridden.kt");
    }

    @TestMetadata("anonymousOverrideWithDefaultInOverridden.kt")
    public void testAnonymousOverrideWithDefaultInOverridden() {
      runTest("compiler/testData/codegen/box/fir/anonymousOverrideWithDefaultInOverridden.kt");
    }

    @TestMetadata("assertEqualsFakeOverride.kt")
    public void testAssertEqualsFakeOverride() {
      runTest("compiler/testData/codegen/box/fir/assertEqualsFakeOverride.kt");
    }

    @TestMetadata("callableReferenceToJavaField.kt")
    public void testCallableReferenceToJavaField() {
      runTest("compiler/testData/codegen/box/fir/callableReferenceToJavaField.kt");
    }

    @TestMetadata("callableReferenceToStaticFunction.kt")
    public void testCallableReferenceToStaticFunction() {
      runTest("compiler/testData/codegen/box/fir/callableReferenceToStaticFunction.kt");
    }

    @TestMetadata("cannotCastToFunctionInIf.kt")
    public void testCannotCastToFunctionInIf() {
      runTest("compiler/testData/codegen/box/fir/cannotCastToFunctionInIf.kt");
    }

    @TestMetadata("capitalizationNotEnhanced.kt")
    public void testCapitalizationNotEnhanced() {
      runTest("compiler/testData/codegen/box/fir/capitalizationNotEnhanced.kt");
    }

    @TestMetadata("charAtAndOverloadWithAbstractGet.kt")
    public void testCharAtAndOverloadWithAbstractGet() {
      runTest("compiler/testData/codegen/box/fir/charAtAndOverloadWithAbstractGet.kt");
    }

    @TestMetadata("charAtAndOverloadWithAbstractGetAndProxy.kt")
    public void testCharAtAndOverloadWithAbstractGetAndProxy() {
      runTest("compiler/testData/codegen/box/fir/charAtAndOverloadWithAbstractGetAndProxy.kt");
    }

    @TestMetadata("charAtFinalAndOverload.kt")
    public void testCharAtFinalAndOverload() {
      runTest("compiler/testData/codegen/box/fir/charAtFinalAndOverload.kt");
    }

    @TestMetadata("ClassBuilder.kt")
    public void testClassBuilder() {
      runTest("compiler/testData/codegen/box/fir/ClassBuilder.kt");
    }

    @TestMetadata("classCanNotBeCastedToVoid.kt")
    public void testClassCanNotBeCastedToVoid() {
      runTest("compiler/testData/codegen/box/fir/classCanNotBeCastedToVoid.kt");
    }

    @TestMetadata("ColorValuePanel.kt")
    public void testColorValuePanel() {
      runTest("compiler/testData/codegen/box/fir/ColorValuePanel.kt");
    }

    @TestMetadata("complexAnnotations.kt")
    public void testComplexAnnotations() {
      runTest("compiler/testData/codegen/box/fir/complexAnnotations.kt");
    }

    @TestMetadata("ConstValAccess.kt")
    public void testConstValAccess() {
      runTest("compiler/testData/codegen/box/fir/ConstValAccess.kt");
    }

    @TestMetadata("contextReceiverToExtensionReceiver.kt")
    public void testContextReceiverToExtensionReceiver() {
      runTest("compiler/testData/codegen/box/fir/contextReceiverToExtensionReceiver.kt");
    }

    @TestMetadata("copyOnObject.kt")
    public void testCopyOnObject() {
      runTest("compiler/testData/codegen/box/fir/copyOnObject.kt");
    }

    @TestMetadata("CustomHashSetSize.kt")
    public void testCustomHashSetSize() {
      runTest("compiler/testData/codegen/box/fir/CustomHashSetSize.kt");
    }

    @TestMetadata("CustomThrowableMessage.kt")
    public void testCustomThrowableMessage() {
      runTest("compiler/testData/codegen/box/fir/CustomThrowableMessage.kt");
    }

    @TestMetadata("delegatedAndDataTogether.kt")
    public void testDelegatedAndDataTogether() {
      runTest("compiler/testData/codegen/box/fir/delegatedAndDataTogether.kt");
    }

    @TestMetadata("deserializedOptInDeprecated.kt")
    public void testDeserializedOptInDeprecated() {
      runTest("compiler/testData/codegen/box/fir/deserializedOptInDeprecated.kt");
    }

    @TestMetadata("differentSinceKotlin.kt")
    public void testDifferentSinceKotlin() {
      runTest("compiler/testData/codegen/box/fir/differentSinceKotlin.kt");
    }

    @TestMetadata("enumEntryInTypeJavaAnnotation.kt")
    public void testEnumEntryInTypeJavaAnnotation() {
      runTest("compiler/testData/codegen/box/fir/enumEntryInTypeJavaAnnotation.kt");
    }

    @TestMetadata("ExtensionAlias.kt")
    public void testExtensionAlias() {
      runTest("compiler/testData/codegen/box/fir/ExtensionAlias.kt");
    }

    @TestMetadata("externalInDependency.kt")
    public void testExternalInDependency() {
      runTest("compiler/testData/codegen/box/fir/externalInDependency.kt");
    }

    @TestMetadata("FakeOverrideBuilder.kt")
    public void testFakeOverrideBuilder() {
      runTest("compiler/testData/codegen/box/fir/FakeOverrideBuilder.kt");
    }

    @TestMetadata("falsePositiveBoundSmartcast.kt")
    public void testFalsePositiveBoundSmartcast() {
      runTest("compiler/testData/codegen/box/fir/falsePositiveBoundSmartcast.kt");
    }

    @TestMetadata("findAnnotationOnDefaultMethodParameter.kt")
    public void testFindAnnotationOnDefaultMethodParameter() {
      runTest("compiler/testData/codegen/box/fir/findAnnotationOnDefaultMethodParameter.kt");
    }

    @TestMetadata("Fir2IrClassifierStorage.kt")
    public void testFir2IrClassifierStorage() {
      runTest("compiler/testData/codegen/box/fir/Fir2IrClassifierStorage.kt");
    }

    @TestMetadata("flexibleIntegerLiterals.kt")
    public void testFlexibleIntegerLiterals() {
      runTest("compiler/testData/codegen/box/fir/flexibleIntegerLiterals.kt");
    }

    @TestMetadata("flexibleStaticConstantFromJava.kt")
    public void testFlexibleStaticConstantFromJava() {
      runTest("compiler/testData/codegen/box/fir/flexibleStaticConstantFromJava.kt");
    }

    @TestMetadata("functionsDifferInTypeParameterBounds.kt")
    public void testFunctionsDifferInTypeParameterBounds() {
      runTest("compiler/testData/codegen/box/fir/functionsDifferInTypeParameterBounds.kt");
    }

    @TestMetadata("functionsDifferInTypeParameterBounds2.kt")
    public void testFunctionsDifferInTypeParameterBounds2() {
      runTest("compiler/testData/codegen/box/fir/functionsDifferInTypeParameterBounds2.kt");
    }

    @TestMetadata("functionsDifferInTypeParameterBounds3.kt")
    public void testFunctionsDifferInTypeParameterBounds3() {
      runTest("compiler/testData/codegen/box/fir/functionsDifferInTypeParameterBounds3.kt");
    }

    @TestMetadata("getOnNullableTypeAlias.kt")
    public void testGetOnNullableTypeAlias() {
      runTest("compiler/testData/codegen/box/fir/getOnNullableTypeAlias.kt");
    }

    @TestMetadata("implicitNothingInDelegate.kt")
    public void testImplicitNothingInDelegate() {
      runTest("compiler/testData/codegen/box/fir/implicitNothingInDelegate.kt");
    }

    @TestMetadata("inaccessibleLambdaParameter.kt")
    public void testInaccessibleLambdaParameter() {
      runTest("compiler/testData/codegen/box/fir/inaccessibleLambdaParameter.kt");
    }

    @TestMetadata("inaccessibleLambdaReceiver.kt")
    public void testInaccessibleLambdaReceiver() {
      runTest("compiler/testData/codegen/box/fir/inaccessibleLambdaReceiver.kt");
    }

    @TestMetadata("incorrectBytecodeWithEnhancedNullability.kt")
    public void testIncorrectBytecodeWithEnhancedNullability() {
      runTest("compiler/testData/codegen/box/fir/incorrectBytecodeWithEnhancedNullability.kt");
    }

    @TestMetadata("inferenceWithTypeAliasFromOtherModule.kt")
    public void testInferenceWithTypeAliasFromOtherModule() {
      runTest("compiler/testData/codegen/box/fir/inferenceWithTypeAliasFromOtherModule.kt");
    }

    @TestMetadata("initializationInLocalInnerClassWithSecondaryConstructor.kt")
    public void testInitializationInLocalInnerClassWithSecondaryConstructor() {
      runTest("compiler/testData/codegen/box/fir/initializationInLocalInnerClassWithSecondaryConstructor.kt");
    }

    @TestMetadata("internalPotentialOverride.kt")
    public void testInternalPotentialOverride() {
      runTest("compiler/testData/codegen/box/fir/internalPotentialOverride.kt");
    }

    @TestMetadata("intersectionWithCapturedTypeWithRawUpperBound.kt")
    public void testIntersectionWithCapturedTypeWithRawUpperBound() {
      runTest("compiler/testData/codegen/box/fir/intersectionWithCapturedTypeWithRawUpperBound.kt");
    }

    @TestMetadata("IrBuiltIns.kt")
    public void testIrBuiltIns() {
      runTest("compiler/testData/codegen/box/fir/IrBuiltIns.kt");
    }

    @TestMetadata("JKEnumConstant.kt")
    public void testJKEnumConstant() {
      runTest("compiler/testData/codegen/box/fir/JKEnumConstant.kt");
    }

    @TestMetadata("javaAnnotationWithDefaultValueForenumArray.kt")
    public void testJavaAnnotationWithDefaultValueForenumArray() {
      runTest("compiler/testData/codegen/box/fir/javaAnnotationWithDefaultValueForenumArray.kt");
    }

    @TestMetadata("jvmFieldInLocalClass.kt")
    public void testJvmFieldInLocalClass() {
      runTest("compiler/testData/codegen/box/fir/jvmFieldInLocalClass.kt");
    }

    @TestMetadata("KotlinDocumentationProvider.kt")
    public void testKotlinDocumentationProvider() {
      runTest("compiler/testData/codegen/box/fir/KotlinDocumentationProvider.kt");
    }

    @TestMetadata("kotlinJavaKotlin.kt")
    public void testKotlinJavaKotlin() {
      runTest("compiler/testData/codegen/box/fir/kotlinJavaKotlin.kt");
    }

    @TestMetadata("kotlinJavaStaticFromInterfaceAccidentalOverride.kt")
    public void testKotlinJavaStaticFromInterfaceAccidentalOverride() {
      runTest("compiler/testData/codegen/box/fir/kotlinJavaStaticFromInterfaceAccidentalOverride.kt");
    }

    @TestMetadata("kt61856.kt")
    public void testKt61856() {
      runTest("compiler/testData/codegen/box/fir/kt61856.kt");
    }

    @TestMetadata("kt68806.kt")
    public void testKt68806() {
      runTest("compiler/testData/codegen/box/fir/kt68806.kt");
    }

    @TestMetadata("linkViaSignatures.kt")
    public void testLinkViaSignatures() {
      runTest("compiler/testData/codegen/box/fir/linkViaSignatures.kt");
    }

    @TestMetadata("listAssignmentInWhen.kt")
    public void testListAssignmentInWhen() {
      runTest("compiler/testData/codegen/box/fir/listAssignmentInWhen.kt");
    }

    @TestMetadata("localInvokeExtension.kt")
    public void testLocalInvokeExtension() {
      runTest("compiler/testData/codegen/box/fir/localInvokeExtension.kt");
    }

    @TestMetadata("localOverrideWithDefaultInLocalOverridden.kt")
    public void testLocalOverrideWithDefaultInLocalOverridden() {
      runTest("compiler/testData/codegen/box/fir/localOverrideWithDefaultInLocalOverridden.kt");
    }

    @TestMetadata("localOverrideWithDefaultInOverridden.kt")
    public void testLocalOverrideWithDefaultInOverridden() {
      runTest("compiler/testData/codegen/box/fir/localOverrideWithDefaultInOverridden.kt");
    }

    @TestMetadata("LookupTags.kt")
    public void testLookupTags() {
      runTest("compiler/testData/codegen/box/fir/LookupTags.kt");
    }

    @TestMetadata("manyImplFromOneJavaInterfaceWithDelegation.kt")
    public void testManyImplFromOneJavaInterfaceWithDelegation() {
      runTest("compiler/testData/codegen/box/fir/manyImplFromOneJavaInterfaceWithDelegation.kt");
    }

    @TestMetadata("manyImplFromOneJavaInterfaceWithDelegation2.kt")
    public void testManyImplFromOneJavaInterfaceWithDelegation2() {
      runTest("compiler/testData/codegen/box/fir/manyImplFromOneJavaInterfaceWithDelegation2.kt");
    }

    @TestMetadata("missingDependencyClassInTypeArguments.kt")
    public void testMissingDependencyClassInTypeArguments() {
      runTest("compiler/testData/codegen/box/fir/missingDependencyClassInTypeArguments.kt");
    }

    @TestMetadata("Mockito.kt")
    public void testMockito() {
      runTest("compiler/testData/codegen/box/fir/Mockito.kt");
    }

    @TestMetadata("multipleDefaultsFalsePositiveDelegation.kt")
    public void testMultipleDefaultsFalsePositiveDelegation() {
      runTest("compiler/testData/codegen/box/fir/multipleDefaultsFalsePositiveDelegation.kt");
    }

    @TestMetadata("NameHighlighter.kt")
    public void testNameHighlighter() {
      runTest("compiler/testData/codegen/box/fir/NameHighlighter.kt");
    }

    @TestMetadata("namedArgumentOnTypeAnnotation.kt")
    public void testNamedArgumentOnTypeAnnotation() {
      runTest("compiler/testData/codegen/box/fir/namedArgumentOnTypeAnnotation.kt");
    }

    @TestMetadata("nestedClassTypeParameterDeserialization.kt")
    public void testNestedClassTypeParameterDeserialization() {
      runTest("compiler/testData/codegen/box/fir/nestedClassTypeParameterDeserialization.kt");
    }

    @TestMetadata("noInfer.kt")
    public void testNoInfer() {
      runTest("compiler/testData/codegen/box/fir/noInfer.kt");
    }

    @TestMetadata("noRecursiveProblemWithProjection.kt")
    public void testNoRecursiveProblemWithProjection() {
      runTest("compiler/testData/codegen/box/fir/noRecursiveProblemWithProjection.kt");
    }

    @TestMetadata("noSymbolForIntRangeIterator.kt")
    public void testNoSymbolForIntRangeIterator() {
      runTest("compiler/testData/codegen/box/fir/noSymbolForIntRangeIterator.kt");
    }

    @TestMetadata("notFoundClasses.kt")
    public void testNotFoundClasses() {
      runTest("compiler/testData/codegen/box/fir/notFoundClasses.kt");
    }

    @TestMetadata("overriddenPropertyInComplexHierarchy.kt")
    public void testOverriddenPropertyInComplexHierarchy() {
      runTest("compiler/testData/codegen/box/fir/overriddenPropertyInComplexHierarchy.kt");
    }

    @TestMetadata("publicMethodCallViaPackagePrivateCommon.kt")
    public void testPublicMethodCallViaPackagePrivateCommon() {
      runTest("compiler/testData/codegen/box/fir/publicMethodCallViaPackagePrivateCommon.kt");
    }

    @TestMetadata("SamWithReceiverMavenProjectImportHandler.kt")
    public void testSamWithReceiverMavenProjectImportHandler() {
      runTest("compiler/testData/codegen/box/fir/SamWithReceiverMavenProjectImportHandler.kt");
    }

    @TestMetadata("smartCastToInvisibleClassMember.kt")
    public void testSmartCastToInvisibleClassMember() {
      runTest("compiler/testData/codegen/box/fir/smartCastToInvisibleClassMember.kt");
    }

    @TestMetadata("sourceBinarySource.kt")
    public void testSourceBinarySource() {
      runTest("compiler/testData/codegen/box/fir/sourceBinarySource.kt");
    }

    @TestMetadata("StackOverflowInAnnotationLoader.kt")
    public void testStackOverflowInAnnotationLoader() {
      runTest("compiler/testData/codegen/box/fir/StackOverflowInAnnotationLoader.kt");
    }

    @TestMetadata("starProjectionLambdaNullReturn.kt")
    public void testStarProjectionLambdaNullReturn() {
      runTest("compiler/testData/codegen/box/fir/starProjectionLambdaNullReturn.kt");
    }

    @TestMetadata("staticImportFromEnum.kt")
    public void testStaticImportFromEnum() {
      runTest("compiler/testData/codegen/box/fir/staticImportFromEnum.kt");
    }

    @TestMetadata("staticImportFromEnumJava.kt")
    public void testStaticImportFromEnumJava() {
      runTest("compiler/testData/codegen/box/fir/staticImportFromEnumJava.kt");
    }

    @TestMetadata("staticImportFromObject.kt")
    public void testStaticImportFromObject() {
      runTest("compiler/testData/codegen/box/fir/staticImportFromObject.kt");
    }

    @TestMetadata("staticImportViaInheritance.kt")
    public void testStaticImportViaInheritance() {
      runTest("compiler/testData/codegen/box/fir/staticImportViaInheritance.kt");
    }

    @TestMetadata("suppressedInvisibleReferenceQualifier.kt")
    public void testSuppressedInvisibleReferenceQualifier() {
      runTest("compiler/testData/codegen/box/fir/suppressedInvisibleReferenceQualifier.kt");
    }

    @TestMetadata("SuspendExtension.kt")
    public void testSuspendExtension() {
      runTest("compiler/testData/codegen/box/fir/SuspendExtension.kt");
    }

    @TestMetadata("SuspendFunctionReference.kt")
    public void testSuspendFunctionReference() {
      runTest("compiler/testData/codegen/box/fir/SuspendFunctionReference.kt");
    }

    @TestMetadata("syntheticPropertyThroughJava.kt")
    public void testSyntheticPropertyThroughJava() {
      runTest("compiler/testData/codegen/box/fir/syntheticPropertyThroughJava.kt");
    }

    @TestMetadata("syntheticPropertyThroughJavaMultiModule.kt")
    public void testSyntheticPropertyThroughJavaMultiModule() {
      runTest("compiler/testData/codegen/box/fir/syntheticPropertyThroughJavaMultiModule.kt");
    }

    @TestMetadata("syntheticPropertyThroughJavaWithSetter.kt")
    public void testSyntheticPropertyThroughJavaWithSetter() {
      runTest("compiler/testData/codegen/box/fir/syntheticPropertyThroughJavaWithSetter.kt");
    }

    @TestMetadata("toLong.kt")
    public void testToLong() {
      runTest("compiler/testData/codegen/box/fir/toLong.kt");
    }

    @TestMetadata("TypeParameterInNestedClass.kt")
    public void testTypeParameterInNestedClass() {
      runTest("compiler/testData/codegen/box/fir/TypeParameterInNestedClass.kt");
    }

    @TestMetadata("TypeParameterInNestedClass2.kt")
    public void testTypeParameterInNestedClass2() {
      runTest("compiler/testData/codegen/box/fir/TypeParameterInNestedClass2.kt");
    }

    @TestMetadata("compiler/testData/codegen/box/fir/primitivesInJava")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class PrimitivesInJava extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInPrimitivesInJava() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/fir/primitivesInJava"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("primitiveDoubleJavaKotlinIntersection.kt")
      public void testPrimitiveDoubleJavaKotlinIntersection() {
        runTest("compiler/testData/codegen/box/fir/primitivesInJava/primitiveDoubleJavaKotlinIntersection.kt");
      }

      @TestMetadata("triangleWithFlexibleType.kt")
      public void testTriangleWithFlexibleType() {
        runTest("compiler/testData/codegen/box/fir/primitivesInJava/triangleWithFlexibleType.kt");
      }

      @TestMetadata("triangleWithFlexibleTypeAndSubstitution.kt")
      public void testTriangleWithFlexibleTypeAndSubstitution() {
        runTest("compiler/testData/codegen/box/fir/primitivesInJava/triangleWithFlexibleTypeAndSubstitution.kt");
      }

      @TestMetadata("triangleWithFlexibleTypeAndSubstitution2.kt")
      public void testTriangleWithFlexibleTypeAndSubstitution2() {
        runTest("compiler/testData/codegen/box/fir/primitivesInJava/triangleWithFlexibleTypeAndSubstitution2.kt");
      }

      @TestMetadata("triangleWithFlexibleTypeAndSubstitution3.kt")
      public void testTriangleWithFlexibleTypeAndSubstitution3() {
        runTest("compiler/testData/codegen/box/fir/primitivesInJava/triangleWithFlexibleTypeAndSubstitution3.kt");
      }

      @TestMetadata("triangleWithFlexibleTypeAndSubstitution5.kt")
      public void testTriangleWithFlexibleTypeAndSubstitution5() {
        runTest("compiler/testData/codegen/box/fir/primitivesInJava/triangleWithFlexibleTypeAndSubstitution5.kt");
      }

      @TestMetadata("triangleWithNullableType.kt")
      public void testTriangleWithNullableType() {
        runTest("compiler/testData/codegen/box/fir/primitivesInJava/triangleWithNullableType.kt");
      }
    }
  }

  @TestMetadata("compiler/testData/codegen/box/fullJdk")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class FullJdk extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInFullJdk() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/fullJdk"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("charBuffer.kt")
    public void testCharBuffer() {
      runTest("compiler/testData/codegen/box/fullJdk/charBuffer.kt");
    }

    @TestMetadata("ifInWhile.kt")
    public void testIfInWhile() {
      runTest("compiler/testData/codegen/box/fullJdk/ifInWhile.kt");
    }

    @TestMetadata("intCountDownLatchExtension.kt")
    public void testIntCountDownLatchExtension() {
      runTest("compiler/testData/codegen/box/fullJdk/intCountDownLatchExtension.kt");
    }

    @TestMetadata("kt31757.kt")
    public void testKt31757() {
      runTest("compiler/testData/codegen/box/fullJdk/kt31757.kt");
    }

    @TestMetadata("kt434.kt")
    public void testKt434() {
      runTest("compiler/testData/codegen/box/fullJdk/kt434.kt");
    }

    @TestMetadata("kt46540.kt")
    public void testKt46540() {
      runTest("compiler/testData/codegen/box/fullJdk/kt46540.kt");
    }

    @TestMetadata("platformTypeAssertionStackTrace.kt")
    public void testPlatformTypeAssertionStackTrace() {
      runTest("compiler/testData/codegen/box/fullJdk/platformTypeAssertionStackTrace.kt");
    }

    @TestMetadata("compiler/testData/codegen/box/fullJdk/native")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Native extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInNative() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/fullJdk/native"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("nativePropertyAccessors.kt")
      public void testNativePropertyAccessors() {
        runTest("compiler/testData/codegen/box/fullJdk/native/nativePropertyAccessors.kt");
      }

      @TestMetadata("simpleNative.kt")
      public void testSimpleNative() {
        runTest("compiler/testData/codegen/box/fullJdk/native/simpleNative.kt");
      }

      @TestMetadata("topLevel.kt")
      public void testTopLevel() {
        runTest("compiler/testData/codegen/box/fullJdk/native/topLevel.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/fullJdk/regressions")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Regressions extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInRegressions() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/fullJdk/regressions"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("kt15112.kt")
      public void testKt15112() {
        runTest("compiler/testData/codegen/box/fullJdk/regressions/kt15112.kt");
      }

      @TestMetadata("kt1770.kt")
      public void testKt1770() {
        runTest("compiler/testData/codegen/box/fullJdk/regressions/kt1770.kt");
      }
    }
  }

  @TestMetadata("compiler/testData/codegen/box/funInterface")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class FunInterface extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInFunInterface() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/funInterface"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("basicFunInterface.kt")
    public void testBasicFunInterface() {
      runTest("compiler/testData/codegen/box/funInterface/basicFunInterface.kt");
    }

    @TestMetadata("basicFunInterfaceConversion.kt")
    public void testBasicFunInterfaceConversion() {
      runTest("compiler/testData/codegen/box/funInterface/basicFunInterfaceConversion.kt");
    }

    @TestMetadata("basicFunInterfaceConversionClash.kt")
    public void testBasicFunInterfaceConversionClash() {
      runTest("compiler/testData/codegen/box/funInterface/basicFunInterfaceConversionClash.kt");
    }

    @TestMetadata("castFromAny.kt")
    public void testCastFromAny() {
      runTest("compiler/testData/codegen/box/funInterface/castFromAny.kt");
    }

    @TestMetadata("contravariantIntersectionType.kt")
    public void testContravariantIntersectionType() {
      runTest("compiler/testData/codegen/box/funInterface/contravariantIntersectionType.kt");
    }

    @TestMetadata("contravariantIntersectionTypeWithNonTrivialCommonSupertype.kt")
    public void testContravariantIntersectionTypeWithNonTrivialCommonSupertype() {
      runTest("compiler/testData/codegen/box/funInterface/contravariantIntersectionTypeWithNonTrivialCommonSupertype.kt");
    }

    @TestMetadata("contravariantIntersectionTypeWithNonTrivialCommonSupertype2.kt")
    public void testContravariantIntersectionTypeWithNonTrivialCommonSupertype2() {
      runTest("compiler/testData/codegen/box/funInterface/contravariantIntersectionTypeWithNonTrivialCommonSupertype2.kt");
    }

    @TestMetadata("funConversionInVararg.kt")
    public void testFunConversionInVararg() {
      runTest("compiler/testData/codegen/box/funInterface/funConversionInVararg.kt");
    }

    @TestMetadata("funInterfaceCallInLambda.kt")
    public void testFunInterfaceCallInLambda() {
      runTest("compiler/testData/codegen/box/funInterface/funInterfaceCallInLambda.kt");
    }

    @TestMetadata("funInterfaceInheritance.kt")
    public void testFunInterfaceInheritance() {
      runTest("compiler/testData/codegen/box/funInterface/funInterfaceInheritance.kt");
    }

    @TestMetadata("funInterfaceTypealias.kt")
    public void testFunInterfaceTypealias() {
      runTest("compiler/testData/codegen/box/funInterface/funInterfaceTypealias.kt");
    }

    @TestMetadata("funInterfaceWithReceiver.kt")
    public void testFunInterfaceWithReceiver() {
      runTest("compiler/testData/codegen/box/funInterface/funInterfaceWithReceiver.kt");
    }

    @TestMetadata("funInterfaceWithSuspendMethod.kt")
    public void testFunInterfaceWithSuspendMethod() {
      runTest("compiler/testData/codegen/box/funInterface/funInterfaceWithSuspendMethod.kt");
    }

    @TestMetadata("implIsNotFunction.kt")
    public void testImplIsNotFunction() {
      runTest("compiler/testData/codegen/box/funInterface/implIsNotFunction.kt");
    }

    @TestMetadata("inlinedSamWrapper.kt")
    public void testInlinedSamWrapper() {
      runTest("compiler/testData/codegen/box/funInterface/inlinedSamWrapper.kt");
    }

    @TestMetadata("intersectionTypeToFunInterfaceConversion.kt")
    public void testIntersectionTypeToFunInterfaceConversion() {
      runTest("compiler/testData/codegen/box/funInterface/intersectionTypeToFunInterfaceConversion.kt");
    }

    @TestMetadata("irrelevantPrivateDeclarations.kt")
    public void testIrrelevantPrivateDeclarations() {
      runTest("compiler/testData/codegen/box/funInterface/irrelevantPrivateDeclarations.kt");
    }

    @TestMetadata("kt41670.kt")
    public void testKt41670() {
      runTest("compiler/testData/codegen/box/funInterface/kt41670.kt");
    }

    @TestMetadata("kt44827_funInterface.kt")
    public void testKt44827_funInterface() {
      runTest("compiler/testData/codegen/box/funInterface/kt44827_funInterface.kt");
    }

    @TestMetadata("kt45444_privateFunInterface.kt")
    public void testKt45444_privateFunInterface() {
      runTest("compiler/testData/codegen/box/funInterface/kt45444_privateFunInterface.kt");
    }

    @TestMetadata("kt46512_indyFunInterfaceOverCallableReference.kt")
    public void testKt46512_indyFunInterfaceOverCallableReference() {
      runTest("compiler/testData/codegen/box/funInterface/kt46512_indyFunInterfaceOverCallableReference.kt");
    }

    @TestMetadata("kt46908_functionSupertype.kt")
    public void testKt46908_functionSupertype() {
      runTest("compiler/testData/codegen/box/funInterface/kt46908_functionSupertype.kt");
    }

    @TestMetadata("kt49384.kt")
    public void testKt49384() {
      runTest("compiler/testData/codegen/box/funInterface/kt49384.kt");
    }

    @TestMetadata("kt49384_getSame.kt")
    public void testKt49384_getSame() {
      runTest("compiler/testData/codegen/box/funInterface/kt49384_getSame.kt");
    }

    @TestMetadata("multimodule.kt")
    public void testMultimodule() {
      runTest("compiler/testData/codegen/box/funInterface/multimodule.kt");
    }

    @TestMetadata("nonAbstractMethod.kt")
    public void testNonAbstractMethod() {
      runTest("compiler/testData/codegen/box/funInterface/nonAbstractMethod.kt");
    }

    @TestMetadata("nonTrivialProjectionInSuperType.kt")
    public void testNonTrivialProjectionInSuperType() {
      runTest("compiler/testData/codegen/box/funInterface/nonTrivialProjectionInSuperType.kt");
    }

    @TestMetadata("nullableSam.kt")
    public void testNullableSam() {
      runTest("compiler/testData/codegen/box/funInterface/nullableSam.kt");
    }

    @TestMetadata("partialSam.kt")
    public void testPartialSam() {
      runTest("compiler/testData/codegen/box/funInterface/partialSam.kt");
    }

    @TestMetadata("primitiveConversions.kt")
    public void testPrimitiveConversions() {
      runTest("compiler/testData/codegen/box/funInterface/primitiveConversions.kt");
    }

    @TestMetadata("receiverEvaluatedOnce.kt")
    public void testReceiverEvaluatedOnce() {
      runTest("compiler/testData/codegen/box/funInterface/receiverEvaluatedOnce.kt");
    }

    @TestMetadata("samConstructorExplicitInvocation.kt")
    public void testSamConstructorExplicitInvocation() {
      runTest("compiler/testData/codegen/box/funInterface/samConstructorExplicitInvocation.kt");
    }

    @TestMetadata("samConversionToGenericInterfaceInGenericFun.kt")
    public void testSamConversionToGenericInterfaceInGenericFun() {
      runTest("compiler/testData/codegen/box/funInterface/samConversionToGenericInterfaceInGenericFun.kt");
    }

    @TestMetadata("subtypeOfFunctionalTypeToFunInterfaceConversion.kt")
    public void testSubtypeOfFunctionalTypeToFunInterfaceConversion() {
      runTest("compiler/testData/codegen/box/funInterface/subtypeOfFunctionalTypeToFunInterfaceConversion.kt");
    }

    @TestMetadata("suspendFunInterfaceConversionCodegen.kt")
    public void testSuspendFunInterfaceConversionCodegen() {
      runTest("compiler/testData/codegen/box/funInterface/suspendFunInterfaceConversionCodegen.kt");
    }

    @TestMetadata("compiler/testData/codegen/box/funInterface/equality")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Equality extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInEquality() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/funInterface/equality"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("functionReferencesBound.kt")
      public void testFunctionReferencesBound() {
        runTest("compiler/testData/codegen/box/funInterface/equality/functionReferencesBound.kt");
      }

      @TestMetadata("functionReferencesUnbound.kt")
      public void testFunctionReferencesUnbound() {
        runTest("compiler/testData/codegen/box/funInterface/equality/functionReferencesUnbound.kt");
      }

      @TestMetadata("lambdaRuntimeConversion.kt")
      public void testLambdaRuntimeConversion() {
        runTest("compiler/testData/codegen/box/funInterface/equality/lambdaRuntimeConversion.kt");
      }

      @TestMetadata("localFunctionReferences.kt")
      public void testLocalFunctionReferences() {
        runTest("compiler/testData/codegen/box/funInterface/equality/localFunctionReferences.kt");
      }

      @TestMetadata("simpleLambdas.kt")
      public void testSimpleLambdas() {
        runTest("compiler/testData/codegen/box/funInterface/equality/simpleLambdas.kt");
      }
    }
  }

  @TestMetadata("compiler/testData/codegen/box/function")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Function extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInFunction() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/function"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("arithmetic.kt")
    public void testArithmetic() {
      runTest("compiler/testData/codegen/box/function/arithmetic.kt");
    }

    @TestMetadata("boolean.kt")
    public void testBoolean() {
      runTest("compiler/testData/codegen/box/function/boolean.kt");
    }

    @TestMetadata("defaults.kt")
    public void testDefaults() {
      runTest("compiler/testData/codegen/box/function/defaults.kt");
    }

    @TestMetadata("defaults1.kt")
    public void testDefaults1() {
      runTest("compiler/testData/codegen/box/function/defaults1.kt");
    }

    @TestMetadata("defaults10.kt")
    public void testDefaults10() {
      runTest("compiler/testData/codegen/box/function/defaults10.kt");
    }

    @TestMetadata("defaults2.kt")
    public void testDefaults2() {
      runTest("compiler/testData/codegen/box/function/defaults2.kt");
    }

    @TestMetadata("defaults3.kt")
    public void testDefaults3() {
      runTest("compiler/testData/codegen/box/function/defaults3.kt");
    }

    @TestMetadata("defaults4.kt")
    public void testDefaults4() {
      runTest("compiler/testData/codegen/box/function/defaults4.kt");
    }

    @TestMetadata("defaults5.kt")
    public void testDefaults5() {
      runTest("compiler/testData/codegen/box/function/defaults5.kt");
    }

    @TestMetadata("defaults6.kt")
    public void testDefaults6() {
      runTest("compiler/testData/codegen/box/function/defaults6.kt");
    }

    @TestMetadata("defaults7.kt")
    public void testDefaults7() {
      runTest("compiler/testData/codegen/box/function/defaults7.kt");
    }

    @TestMetadata("defaults8.kt")
    public void testDefaults8() {
      runTest("compiler/testData/codegen/box/function/defaults8.kt");
    }

    @TestMetadata("defaults9.kt")
    public void testDefaults9() {
      runTest("compiler/testData/codegen/box/function/defaults9.kt");
    }

    @TestMetadata("defaultsFromFakeOverride.kt")
    public void testDefaultsFromFakeOverride() {
      runTest("compiler/testData/codegen/box/function/defaultsFromFakeOverride.kt");
    }

    @TestMetadata("defaultsWithInlineClasses.kt")
    public void testDefaultsWithInlineClasses() {
      runTest("compiler/testData/codegen/box/function/defaultsWithInlineClasses.kt");
    }

    @TestMetadata("defaultsWithVarArg1.kt")
    public void testDefaultsWithVarArg1() {
      runTest("compiler/testData/codegen/box/function/defaultsWithVarArg1.kt");
    }

    @TestMetadata("defaultsWithVarArg2.kt")
    public void testDefaultsWithVarArg2() {
      runTest("compiler/testData/codegen/box/function/defaultsWithVarArg2.kt");
    }

    @TestMetadata("eqeq.kt")
    public void testEqeq() {
      runTest("compiler/testData/codegen/box/function/eqeq.kt");
    }

    @TestMetadata("extension.kt")
    public void testExtension() {
      runTest("compiler/testData/codegen/box/function/extension.kt");
    }

    @TestMetadata("intrinsic.kt")
    public void testIntrinsic() {
      runTest("compiler/testData/codegen/box/function/intrinsic.kt");
    }

    @TestMetadata("localFunction.kt")
    public void testLocalFunction() {
      runTest("compiler/testData/codegen/box/function/localFunction.kt");
    }

    @TestMetadata("localFunction2.kt")
    public void testLocalFunction2() {
      runTest("compiler/testData/codegen/box/function/localFunction2.kt");
    }

    @TestMetadata("localFunction3.kt")
    public void testLocalFunction3() {
      runTest("compiler/testData/codegen/box/function/localFunction3.kt");
    }

    @TestMetadata("minus_eq.kt")
    public void testMinus_eq() {
      runTest("compiler/testData/codegen/box/function/minus_eq.kt");
    }

    @TestMetadata("named.kt")
    public void testNamed() {
      runTest("compiler/testData/codegen/box/function/named.kt");
    }

    @TestMetadata("nothingNReturningSafeCall.kt")
    public void testNothingNReturningSafeCall() {
      runTest("compiler/testData/codegen/box/function/nothingNReturningSafeCall.kt");
    }

    @TestMetadata("plus_eq.kt")
    public void testPlus_eq() {
      runTest("compiler/testData/codegen/box/function/plus_eq.kt");
    }

    @TestMetadata("referenceBigArity.kt")
    public void testReferenceBigArity() {
      runTest("compiler/testData/codegen/box/function/referenceBigArity.kt");
    }

    @TestMetadata("sum.kt")
    public void testSum() {
      runTest("compiler/testData/codegen/box/function/sum.kt");
    }

    @TestMetadata("sum_3const.kt")
    public void testSum_3const() {
      runTest("compiler/testData/codegen/box/function/sum_3const.kt");
    }

    @TestMetadata("sum_foo_bar.kt")
    public void testSum_foo_bar() {
      runTest("compiler/testData/codegen/box/function/sum_foo_bar.kt");
    }

    @TestMetadata("sum_func.kt")
    public void testSum_func() {
      runTest("compiler/testData/codegen/box/function/sum_func.kt");
    }

    @TestMetadata("sum_imm.kt")
    public void testSum_imm() {
      runTest("compiler/testData/codegen/box/function/sum_imm.kt");
    }

    @TestMetadata("sum_mixed.kt")
    public void testSum_mixed() {
      runTest("compiler/testData/codegen/box/function/sum_mixed.kt");
    }

    @TestMetadata("sum_silly.kt")
    public void testSum_silly() {
      runTest("compiler/testData/codegen/box/function/sum_silly.kt");
    }

    @TestMetadata("unreachableStatementAfterReturn.kt")
    public void testUnreachableStatementAfterReturn() {
      runTest("compiler/testData/codegen/box/function/unreachableStatementAfterReturn.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/functions")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Functions extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInFunctions() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/functions"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("coerceVoidToArray.kt")
    public void testCoerceVoidToArray() {
      runTest("compiler/testData/codegen/box/functions/coerceVoidToArray.kt");
    }

    @TestMetadata("coerceVoidToObject.kt")
    public void testCoerceVoidToObject() {
      runTest("compiler/testData/codegen/box/functions/coerceVoidToObject.kt");
    }

    @TestMetadata("constructor.kt")
    public void testConstructor() {
      runTest("compiler/testData/codegen/box/functions/constructor.kt");
    }

    @TestMetadata("dataLocalVariable.kt")
    public void testDataLocalVariable() {
      runTest("compiler/testData/codegen/box/functions/dataLocalVariable.kt");
    }

    @TestMetadata("defaultargs.kt")
    public void testDefaultargs() {
      runTest("compiler/testData/codegen/box/functions/defaultargs.kt");
    }

    @TestMetadata("defaultargs1.kt")
    public void testDefaultargs1() {
      runTest("compiler/testData/codegen/box/functions/defaultargs1.kt");
    }

    @TestMetadata("defaultargs2.kt")
    public void testDefaultargs2() {
      runTest("compiler/testData/codegen/box/functions/defaultargs2.kt");
    }

    @TestMetadata("defaultargs3.kt")
    public void testDefaultargs3() {
      runTest("compiler/testData/codegen/box/functions/defaultargs3.kt");
    }

    @TestMetadata("defaultargs4.kt")
    public void testDefaultargs4() {
      runTest("compiler/testData/codegen/box/functions/defaultargs4.kt");
    }

    @TestMetadata("defaultargs5.kt")
    public void testDefaultargs5() {
      runTest("compiler/testData/codegen/box/functions/defaultargs5.kt");
    }

    @TestMetadata("defaultargs6.kt")
    public void testDefaultargs6() {
      runTest("compiler/testData/codegen/box/functions/defaultargs6.kt");
    }

    @TestMetadata("defaultargs7.kt")
    public void testDefaultargs7() {
      runTest("compiler/testData/codegen/box/functions/defaultargs7.kt");
    }

    @TestMetadata("delegatedPropertyWithMultipleOverriddens_generics.kt")
    public void testDelegatedPropertyWithMultipleOverriddens_generics() {
      runTest("compiler/testData/codegen/box/functions/delegatedPropertyWithMultipleOverriddens_generics.kt");
    }

    @TestMetadata("delegatedPropertyWithMultipleOverriddens_noGenerics.kt")
    public void testDelegatedPropertyWithMultipleOverriddens_noGenerics() {
      runTest("compiler/testData/codegen/box/functions/delegatedPropertyWithMultipleOverriddens_noGenerics.kt");
    }

    @TestMetadata("ea33909.kt")
    public void testEa33909() {
      runTest("compiler/testData/codegen/box/functions/ea33909.kt");
    }

    @TestMetadata("fakeDescriptorWithSeveralOverridenOne.kt")
    public void testFakeDescriptorWithSeveralOverridenOne() {
      runTest("compiler/testData/codegen/box/functions/fakeDescriptorWithSeveralOverridenOne.kt");
    }

    @TestMetadata("functionNtoString.kt")
    public void testFunctionNtoString() {
      runTest("compiler/testData/codegen/box/functions/functionNtoString.kt");
    }

    @TestMetadata("functionNtoStringGeneric.kt")
    public void testFunctionNtoStringGeneric() {
      runTest("compiler/testData/codegen/box/functions/functionNtoStringGeneric.kt");
    }

    @TestMetadata("functionNtoStringNoReflect.kt")
    public void testFunctionNtoStringNoReflect() {
      runTest("compiler/testData/codegen/box/functions/functionNtoStringNoReflect.kt");
    }

    @TestMetadata("infixRecursiveCall.kt")
    public void testInfixRecursiveCall() {
      runTest("compiler/testData/codegen/box/functions/infixRecursiveCall.kt");
    }

    @TestMetadata("kt1038.kt")
    public void testKt1038() {
      runTest("compiler/testData/codegen/box/functions/kt1038.kt");
    }

    @TestMetadata("kt1199.kt")
    public void testKt1199() {
      runTest("compiler/testData/codegen/box/functions/kt1199.kt");
    }

    @TestMetadata("kt1413.kt")
    public void testKt1413() {
      runTest("compiler/testData/codegen/box/functions/kt1413.kt");
    }

    @TestMetadata("kt1649_1.kt")
    public void testKt1649_1() {
      runTest("compiler/testData/codegen/box/functions/kt1649_1.kt");
    }

    @TestMetadata("kt1649_2.kt")
    public void testKt1649_2() {
      runTest("compiler/testData/codegen/box/functions/kt1649_2.kt");
    }

    @TestMetadata("kt1739.kt")
    public void testKt1739() {
      runTest("compiler/testData/codegen/box/functions/kt1739.kt");
    }

    @TestMetadata("kt2270.kt")
    public void testKt2270() {
      runTest("compiler/testData/codegen/box/functions/kt2270.kt");
    }

    @TestMetadata("kt2271.kt")
    public void testKt2271() {
      runTest("compiler/testData/codegen/box/functions/kt2271.kt");
    }

    @TestMetadata("kt2280.kt")
    public void testKt2280() {
      runTest("compiler/testData/codegen/box/functions/kt2280.kt");
    }

    @TestMetadata("kt2481.kt")
    public void testKt2481() {
      runTest("compiler/testData/codegen/box/functions/kt2481.kt");
    }

    @TestMetadata("kt2716.kt")
    public void testKt2716() {
      runTest("compiler/testData/codegen/box/functions/kt2716.kt");
    }

    @TestMetadata("kt2739.kt")
    public void testKt2739() {
      runTest("compiler/testData/codegen/box/functions/kt2739.kt");
    }

    @TestMetadata("kt2929.kt")
    public void testKt2929() {
      runTest("compiler/testData/codegen/box/functions/kt2929.kt");
    }

    @TestMetadata("kt3214.kt")
    public void testKt3214() {
      runTest("compiler/testData/codegen/box/functions/kt3214.kt");
    }

    @TestMetadata("kt3313.kt")
    public void testKt3313() {
      runTest("compiler/testData/codegen/box/functions/kt3313.kt");
    }

    @TestMetadata("kt3573.kt")
    public void testKt3573() {
      runTest("compiler/testData/codegen/box/functions/kt3573.kt");
    }

    @TestMetadata("kt3724.kt")
    public void testKt3724() {
      runTest("compiler/testData/codegen/box/functions/kt3724.kt");
    }

    @TestMetadata("kt395.kt")
    public void testKt395() {
      runTest("compiler/testData/codegen/box/functions/kt395.kt");
    }

    @TestMetadata("kt47449.kt")
    public void testKt47449() {
      runTest("compiler/testData/codegen/box/functions/kt47449.kt");
    }

    @TestMetadata("kt47527.kt")
    public void testKt47527() {
      runTest("compiler/testData/codegen/box/functions/kt47527.kt");
    }

    @TestMetadata("kt48058.kt")
    public void testKt48058() {
      runTest("compiler/testData/codegen/box/functions/kt48058.kt");
    }

    @TestMetadata("kt48989.kt")
    public void testKt48989() {
      runTest("compiler/testData/codegen/box/functions/kt48989.kt");
    }

    @TestMetadata("kt58825_arrayOverloads.kt")
    public void testKt58825_arrayOverloads() {
      runTest("compiler/testData/codegen/box/functions/kt58825_arrayOverloads.kt");
    }

    @TestMetadata("kt785.kt")
    public void testKt785() {
      runTest("compiler/testData/codegen/box/functions/kt785.kt");
    }

    @TestMetadata("kt873.kt")
    public void testKt873() {
      runTest("compiler/testData/codegen/box/functions/kt873.kt");
    }

    @TestMetadata("lambdaWithTwoContextReceivers.kt")
    public void testLambdaWithTwoContextReceivers() {
      runTest("compiler/testData/codegen/box/functions/lambdaWithTwoContextReceivers.kt");
    }

    @TestMetadata("localFunction.kt")
    public void testLocalFunction() {
      runTest("compiler/testData/codegen/box/functions/localFunction.kt");
    }

    @TestMetadata("localReturnInsideFunctionExpression.kt")
    public void testLocalReturnInsideFunctionExpression() {
      runTest("compiler/testData/codegen/box/functions/localReturnInsideFunctionExpression.kt");
    }

    @TestMetadata("max.kt")
    public void testMax() {
      runTest("compiler/testData/codegen/box/functions/max.kt");
    }

    @TestMetadata("mutualInline.kt")
    public void testMutualInline() {
      runTest("compiler/testData/codegen/box/functions/mutualInline.kt");
    }

    @TestMetadata("nothisnoclosure.kt")
    public void testNothisnoclosure() {
      runTest("compiler/testData/codegen/box/functions/nothisnoclosure.kt");
    }

    @TestMetadata("overloadByInterfaceType.kt")
    public void testOverloadByInterfaceType() {
      runTest("compiler/testData/codegen/box/functions/overloadByInterfaceType.kt");
    }

    @TestMetadata("prefixRecursiveCall.kt")
    public void testPrefixRecursiveCall() {
      runTest("compiler/testData/codegen/box/functions/prefixRecursiveCall.kt");
    }

    @TestMetadata("recursiveCompareTo.kt")
    public void testRecursiveCompareTo() {
      runTest("compiler/testData/codegen/box/functions/recursiveCompareTo.kt");
    }

    @TestMetadata("recursiveIncrementCall.kt")
    public void testRecursiveIncrementCall() {
      runTest("compiler/testData/codegen/box/functions/recursiveIncrementCall.kt");
    }

    @TestMetadata("referencesStaticInnerClassMethod.kt")
    public void testReferencesStaticInnerClassMethod() {
      runTest("compiler/testData/codegen/box/functions/referencesStaticInnerClassMethod.kt");
    }

    @TestMetadata("referencesStaticInnerClassMethodL2.kt")
    public void testReferencesStaticInnerClassMethodL2() {
      runTest("compiler/testData/codegen/box/functions/referencesStaticInnerClassMethodL2.kt");
    }

    @TestMetadata("typeParameterAsUpperBound.kt")
    public void testTypeParameterAsUpperBound() {
      runTest("compiler/testData/codegen/box/functions/typeParameterAsUpperBound.kt");
    }

    @TestMetadata("typeParametersInLocalFunction.kt")
    public void testTypeParametersInLocalFunction() {
      runTest("compiler/testData/codegen/box/functions/typeParametersInLocalFunction.kt");
    }

    @TestMetadata("unrelatedUpperBounds.kt")
    public void testUnrelatedUpperBounds() {
      runTest("compiler/testData/codegen/box/functions/unrelatedUpperBounds.kt");
    }

    @TestMetadata("compiler/testData/codegen/box/functions/bigArity")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class BigArity extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInBigArity() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/functions/bigArity"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("callFromJava.kt")
      public void testCallFromJava() {
        runTest("compiler/testData/codegen/box/functions/bigArity/callFromJava.kt");
      }

      @TestMetadata("callFunViaVararg.kt")
      public void testCallFunViaVararg() {
        runTest("compiler/testData/codegen/box/functions/bigArity/callFunViaVararg.kt");
      }

      @TestMetadata("callWithIncorrectNumberOfArguments.kt")
      public void testCallWithIncorrectNumberOfArguments() {
        runTest("compiler/testData/codegen/box/functions/bigArity/callWithIncorrectNumberOfArguments.kt");
      }

      @TestMetadata("function255.kt")
      public void testFunction255() {
        runTest("compiler/testData/codegen/box/functions/bigArity/function255.kt");
      }

      @TestMetadata("instanceOfCallableReference.kt")
      public void testInstanceOfCallableReference() {
        runTest("compiler/testData/codegen/box/functions/bigArity/instanceOfCallableReference.kt");
      }

      @TestMetadata("invokeCallableReference.kt")
      public void testInvokeCallableReference() {
        runTest("compiler/testData/codegen/box/functions/bigArity/invokeCallableReference.kt");
      }

      @TestMetadata("invokeLambda.kt")
      public void testInvokeLambda() {
        runTest("compiler/testData/codegen/box/functions/bigArity/invokeLambda.kt");
      }

      @TestMetadata("invokeMemberCallableReference.kt")
      public void testInvokeMemberCallableReference() {
        runTest("compiler/testData/codegen/box/functions/bigArity/invokeMemberCallableReference.kt");
      }

      @TestMetadata("javaLambda.kt")
      public void testJavaLambda() {
        runTest("compiler/testData/codegen/box/functions/bigArity/javaLambda.kt");
      }

      @TestMetadata("nestedBigArityFunCalls.kt")
      public void testNestedBigArityFunCalls() {
        runTest("compiler/testData/codegen/box/functions/bigArity/nestedBigArityFunCalls.kt");
      }

      @TestMetadata("subclass.kt")
      public void testSubclass() {
        runTest("compiler/testData/codegen/box/functions/bigArity/subclass.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/functions/functionExpression")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class FunctionExpression extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInFunctionExpression() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/functions/functionExpression"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("functionExpression.kt")
      public void testFunctionExpression() {
        runTest("compiler/testData/codegen/box/functions/functionExpression/functionExpression.kt");
      }

      @TestMetadata("functionExpressionWithThisReference.kt")
      public void testFunctionExpressionWithThisReference() {
        runTest("compiler/testData/codegen/box/functions/functionExpression/functionExpressionWithThisReference.kt");
      }

      @TestMetadata("functionLiteralExpression.kt")
      public void testFunctionLiteralExpression() {
        runTest("compiler/testData/codegen/box/functions/functionExpression/functionLiteralExpression.kt");
      }

      @TestMetadata("insideGenericLambda.kt")
      public void testInsideGenericLambda() {
        runTest("compiler/testData/codegen/box/functions/functionExpression/insideGenericLambda.kt");
      }

      @TestMetadata("underscoreParameters.kt")
      public void testUnderscoreParameters() {
        runTest("compiler/testData/codegen/box/functions/functionExpression/underscoreParameters.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/functions/invoke")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Invoke extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInInvoke() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/functions/invoke"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("castFunctionToExtension.kt")
      public void testCastFunctionToExtension() {
        runTest("compiler/testData/codegen/box/functions/invoke/castFunctionToExtension.kt");
      }

      @TestMetadata("extensionInvokeOnExpr.kt")
      public void testExtensionInvokeOnExpr() {
        runTest("compiler/testData/codegen/box/functions/invoke/extensionInvokeOnExpr.kt");
      }

      @TestMetadata("implicitInvokeInCompanionObjectWithFunctionalArgument.kt")
      public void testImplicitInvokeInCompanionObjectWithFunctionalArgument() {
        runTest("compiler/testData/codegen/box/functions/invoke/implicitInvokeInCompanionObjectWithFunctionalArgument.kt");
      }

      @TestMetadata("implicitInvokeWithFunctionLiteralArgument.kt")
      public void testImplicitInvokeWithFunctionLiteralArgument() {
        runTest("compiler/testData/codegen/box/functions/invoke/implicitInvokeWithFunctionLiteralArgument.kt");
      }

      @TestMetadata("invoke.kt")
      public void testInvoke() {
        runTest("compiler/testData/codegen/box/functions/invoke/invoke.kt");
      }

      @TestMetadata("invokeOnExprByConvention.kt")
      public void testInvokeOnExprByConvention() {
        runTest("compiler/testData/codegen/box/functions/invoke/invokeOnExprByConvention.kt");
      }

      @TestMetadata("invokeOnSyntheticProperty.kt")
      public void testInvokeOnSyntheticProperty() {
        runTest("compiler/testData/codegen/box/functions/invoke/invokeOnSyntheticProperty.kt");
      }

      @TestMetadata("kt3189.kt")
      public void testKt3189() {
        runTest("compiler/testData/codegen/box/functions/invoke/kt3189.kt");
      }

      @TestMetadata("kt3190.kt")
      public void testKt3190() {
        runTest("compiler/testData/codegen/box/functions/invoke/kt3190.kt");
      }

      @TestMetadata("kt3297.kt")
      public void testKt3297() {
        runTest("compiler/testData/codegen/box/functions/invoke/kt3297.kt");
      }

      @TestMetadata("kt3450getAndInvoke.kt")
      public void testKt3450getAndInvoke() {
        runTest("compiler/testData/codegen/box/functions/invoke/kt3450getAndInvoke.kt");
      }

      @TestMetadata("kt3631invokeOnString.kt")
      public void testKt3631invokeOnString() {
        runTest("compiler/testData/codegen/box/functions/invoke/kt3631invokeOnString.kt");
      }

      @TestMetadata("kt3772.kt")
      public void testKt3772() {
        runTest("compiler/testData/codegen/box/functions/invoke/kt3772.kt");
      }

      @TestMetadata("kt3821invokeOnThis.kt")
      public void testKt3821invokeOnThis() {
        runTest("compiler/testData/codegen/box/functions/invoke/kt3821invokeOnThis.kt");
      }

      @TestMetadata("kt3822invokeOnThis.kt")
      public void testKt3822invokeOnThis() {
        runTest("compiler/testData/codegen/box/functions/invoke/kt3822invokeOnThis.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/functions/localFunctions")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class LocalFunctions extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInLocalFunctions() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/functions/localFunctions"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("boundTypeParameterInSupertype.kt")
      public void testBoundTypeParameterInSupertype() {
        runTest("compiler/testData/codegen/box/functions/localFunctions/boundTypeParameterInSupertype.kt");
      }

      @TestMetadata("boundTypeParameterInVararg.kt")
      public void testBoundTypeParameterInVararg() {
        runTest("compiler/testData/codegen/box/functions/localFunctions/boundTypeParameterInVararg.kt");
      }

      @TestMetadata("callBetweenLocalFunctions.kt")
      public void testCallBetweenLocalFunctions() {
        runTest("compiler/testData/codegen/box/functions/localFunctions/callBetweenLocalFunctions.kt");
      }

      @TestMetadata("callInlineLocalInLambda.kt")
      public void testCallInlineLocalInLambda() {
        runTest("compiler/testData/codegen/box/functions/localFunctions/callInlineLocalInLambda.kt");
      }

      @TestMetadata("captureUpperBoundedTypeParameter.kt")
      public void testCaptureUpperBoundedTypeParameter() {
        runTest("compiler/testData/codegen/box/functions/localFunctions/captureUpperBoundedTypeParameter.kt");
      }

      @TestMetadata("definedWithinLambda.kt")
      public void testDefinedWithinLambda() {
        runTest("compiler/testData/codegen/box/functions/localFunctions/definedWithinLambda.kt");
      }

      @TestMetadata("definedWithinLambdaInnerUsage1.kt")
      public void testDefinedWithinLambdaInnerUsage1() {
        runTest("compiler/testData/codegen/box/functions/localFunctions/definedWithinLambdaInnerUsage1.kt");
      }

      @TestMetadata("definedWithinLambdaInnerUsage2.kt")
      public void testDefinedWithinLambdaInnerUsage2() {
        runTest("compiler/testData/codegen/box/functions/localFunctions/definedWithinLambdaInnerUsage2.kt");
      }

      @TestMetadata("kt2895.kt")
      public void testKt2895() {
        runTest("compiler/testData/codegen/box/functions/localFunctions/kt2895.kt");
      }

      @TestMetadata("kt3308.kt")
      public void testKt3308() {
        runTest("compiler/testData/codegen/box/functions/localFunctions/kt3308.kt");
      }

      @TestMetadata("kt3978.kt")
      public void testKt3978() {
        runTest("compiler/testData/codegen/box/functions/localFunctions/kt3978.kt");
      }

      @TestMetadata("kt3978_2.kt")
      public void testKt3978_2() {
        runTest("compiler/testData/codegen/box/functions/localFunctions/kt3978_2.kt");
      }

      @TestMetadata("kt4119.kt")
      public void testKt4119() {
        runTest("compiler/testData/codegen/box/functions/localFunctions/kt4119.kt");
      }

      @TestMetadata("kt4119_2.kt")
      public void testKt4119_2() {
        runTest("compiler/testData/codegen/box/functions/localFunctions/kt4119_2.kt");
      }

      @TestMetadata("kt4514.kt")
      public void testKt4514() {
        runTest("compiler/testData/codegen/box/functions/localFunctions/kt4514.kt");
      }

      @TestMetadata("kt4777.kt")
      public void testKt4777() {
        runTest("compiler/testData/codegen/box/functions/localFunctions/kt4777.kt");
      }

      @TestMetadata("kt4783.kt")
      public void testKt4783() {
        runTest("compiler/testData/codegen/box/functions/localFunctions/kt4783.kt");
      }

      @TestMetadata("kt4784.kt")
      public void testKt4784() {
        runTest("compiler/testData/codegen/box/functions/localFunctions/kt4784.kt");
      }

      @TestMetadata("kt4989.kt")
      public void testKt4989() {
        runTest("compiler/testData/codegen/box/functions/localFunctions/kt4989.kt");
      }

      @TestMetadata("localExtensionOnNullableParameter.kt")
      public void testLocalExtensionOnNullableParameter() {
        runTest("compiler/testData/codegen/box/functions/localFunctions/localExtensionOnNullableParameter.kt");
      }

      @TestMetadata("localFunctionInConstructor.kt")
      public void testLocalFunctionInConstructor() {
        runTest("compiler/testData/codegen/box/functions/localFunctions/localFunctionInConstructor.kt");
      }

      @TestMetadata("localFunctionVsLocalVariable.kt")
      public void testLocalFunctionVsLocalVariable() {
        runTest("compiler/testData/codegen/box/functions/localFunctions/localFunctionVsLocalVariable.kt");
      }

      @TestMetadata("nameClash.kt")
      public void testNameClash() {
        runTest("compiler/testData/codegen/box/functions/localFunctions/nameClash.kt");
      }

      @TestMetadata("nameClashAcrossDifferentContainers.kt")
      public void testNameClashAcrossDifferentContainers() {
        runTest("compiler/testData/codegen/box/functions/localFunctions/nameClashAcrossDifferentContainers.kt");
      }

      @TestMetadata("overloadedLocalFunWithoutClosure.kt")
      public void testOverloadedLocalFunWithoutClosure() {
        runTest("compiler/testData/codegen/box/functions/localFunctions/overloadedLocalFunWithoutClosure.kt");
      }

      @TestMetadata("overloadedLocalFunction.kt")
      public void testOverloadedLocalFunction() {
        runTest("compiler/testData/codegen/box/functions/localFunctions/overloadedLocalFunction.kt");
      }

      @TestMetadata("overloadedLocalFunction1.kt")
      public void testOverloadedLocalFunction1() {
        runTest("compiler/testData/codegen/box/functions/localFunctions/overloadedLocalFunction1.kt");
      }

      @TestMetadata("overloadedLocalFunction2.kt")
      public void testOverloadedLocalFunction2() {
        runTest("compiler/testData/codegen/box/functions/localFunctions/overloadedLocalFunction2.kt");
      }

      @TestMetadata("overloadedLocalFunction3.kt")
      public void testOverloadedLocalFunction3() {
        runTest("compiler/testData/codegen/box/functions/localFunctions/overloadedLocalFunction3.kt");
      }

      @TestMetadata("parameterAsDefaultValue.kt")
      public void testParameterAsDefaultValue() {
        runTest("compiler/testData/codegen/box/functions/localFunctions/parameterAsDefaultValue.kt");
      }
    }
  }

  @TestMetadata("compiler/testData/codegen/box/ieee754")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Ieee754 extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInIeee754() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ieee754"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("anyCastToPrimitiveCompareTo1.kt")
    public void testAnyCastToPrimitiveCompareTo1() {
      runTest("compiler/testData/codegen/box/ieee754/anyCastToPrimitiveCompareTo1.kt");
    }

    @TestMetadata("anyCastToPrimitiveCompareTo2.kt")
    public void testAnyCastToPrimitiveCompareTo2() {
      runTest("compiler/testData/codegen/box/ieee754/anyCastToPrimitiveCompareTo2.kt");
    }

    @TestMetadata("anyToReal.kt")
    public void testAnyToReal() {
      runTest("compiler/testData/codegen/box/ieee754/anyToReal.kt");
    }

    @TestMetadata("anyToReal_AgainstCompiled.kt")
    public void testAnyToReal_AgainstCompiled() {
      runTest("compiler/testData/codegen/box/ieee754/anyToReal_AgainstCompiled.kt");
    }

    @TestMetadata("asComparableToDouble.kt")
    public void testAsComparableToDouble() {
      runTest("compiler/testData/codegen/box/ieee754/asComparableToDouble.kt");
    }

    @TestMetadata("asComparableToDouble_properIeeeComparisons.kt")
    public void testAsComparableToDouble_properIeeeComparisons() {
      runTest("compiler/testData/codegen/box/ieee754/asComparableToDouble_properIeeeComparisons.kt");
    }

    @TestMetadata("comparableToTWithT_properIeeeComparisons.kt")
    public void testComparableToTWithT_properIeeeComparisons() {
      runTest("compiler/testData/codegen/box/ieee754/comparableToTWithT_properIeeeComparisons.kt");
    }

    @TestMetadata("comparableTypeCast.kt")
    public void testComparableTypeCast() {
      runTest("compiler/testData/codegen/box/ieee754/comparableTypeCast.kt");
    }

    @TestMetadata("comparableTypeCast_AgainstCompiled.kt")
    public void testComparableTypeCast_AgainstCompiled() {
      runTest("compiler/testData/codegen/box/ieee754/comparableTypeCast_AgainstCompiled.kt");
    }

    @TestMetadata("dataClass.kt")
    public void testDataClass() {
      runTest("compiler/testData/codegen/box/ieee754/dataClass.kt");
    }

    @TestMetadata("differentTypesComparison.kt")
    public void testDifferentTypesComparison() {
      runTest("compiler/testData/codegen/box/ieee754/differentTypesComparison.kt");
    }

    @TestMetadata("double.kt")
    public void testDouble() {
      runTest("compiler/testData/codegen/box/ieee754/double.kt");
    }

    @TestMetadata("equalsDouble.kt")
    public void testEqualsDouble() {
      runTest("compiler/testData/codegen/box/ieee754/equalsDouble.kt");
    }

    @TestMetadata("equalsDouble_properIeeeComparisons.kt")
    public void testEqualsDouble_properIeeeComparisons() {
      runTest("compiler/testData/codegen/box/ieee754/equalsDouble_properIeeeComparisons.kt");
    }

    @TestMetadata("equalsFloat.kt")
    public void testEqualsFloat() {
      runTest("compiler/testData/codegen/box/ieee754/equalsFloat.kt");
    }

    @TestMetadata("equalsFloat_properIeeeComparisons.kt")
    public void testEqualsFloat_properIeeeComparisons() {
      runTest("compiler/testData/codegen/box/ieee754/equalsFloat_properIeeeComparisons.kt");
    }

    @TestMetadata("equalsNaN.kt")
    public void testEqualsNaN() {
      runTest("compiler/testData/codegen/box/ieee754/equalsNaN.kt");
    }

    @TestMetadata("equalsNaN_properIeeeComparisons.kt")
    public void testEqualsNaN_properIeeeComparisons() {
      runTest("compiler/testData/codegen/box/ieee754/equalsNaN_properIeeeComparisons.kt");
    }

    @TestMetadata("equalsNullableDouble.kt")
    public void testEqualsNullableDouble() {
      runTest("compiler/testData/codegen/box/ieee754/equalsNullableDouble.kt");
    }

    @TestMetadata("equalsNullableDouble_properIeeeComparisons.kt")
    public void testEqualsNullableDouble_properIeeeComparisons() {
      runTest("compiler/testData/codegen/box/ieee754/equalsNullableDouble_properIeeeComparisons.kt");
    }

    @TestMetadata("equalsNullableFloat.kt")
    public void testEqualsNullableFloat() {
      runTest("compiler/testData/codegen/box/ieee754/equalsNullableFloat.kt");
    }

    @TestMetadata("equalsNullableFloat_properIeeeComparisons.kt")
    public void testEqualsNullableFloat_properIeeeComparisons() {
      runTest("compiler/testData/codegen/box/ieee754/equalsNullableFloat_properIeeeComparisons.kt");
    }

    @TestMetadata("explicitCompareCall.kt")
    public void testExplicitCompareCall() {
      runTest("compiler/testData/codegen/box/ieee754/explicitCompareCall.kt");
    }

    @TestMetadata("explicitCompareCall_AgainstCompiled.kt")
    public void testExplicitCompareCall_AgainstCompiled() {
      runTest("compiler/testData/codegen/box/ieee754/explicitCompareCall_AgainstCompiled.kt");
    }

    @TestMetadata("explicitEqualsCall.kt")
    public void testExplicitEqualsCall() {
      runTest("compiler/testData/codegen/box/ieee754/explicitEqualsCall.kt");
    }

    @TestMetadata("explicitEqualsCall_AgainstCompiled.kt")
    public void testExplicitEqualsCall_AgainstCompiled() {
      runTest("compiler/testData/codegen/box/ieee754/explicitEqualsCall_AgainstCompiled.kt");
    }

    @TestMetadata("float.kt")
    public void testFloat() {
      runTest("compiler/testData/codegen/box/ieee754/float.kt");
    }

    @TestMetadata("generic.kt")
    public void testGeneric() {
      runTest("compiler/testData/codegen/box/ieee754/generic.kt");
    }

    @TestMetadata("generic_AgainstCompiled.kt")
    public void testGeneric_AgainstCompiled() {
      runTest("compiler/testData/codegen/box/ieee754/generic_AgainstCompiled.kt");
    }

    @TestMetadata("greaterDouble.kt")
    public void testGreaterDouble() {
      runTest("compiler/testData/codegen/box/ieee754/greaterDouble.kt");
    }

    @TestMetadata("greaterDouble_properIeeeComparisons.kt")
    public void testGreaterDouble_properIeeeComparisons() {
      runTest("compiler/testData/codegen/box/ieee754/greaterDouble_properIeeeComparisons.kt");
    }

    @TestMetadata("greaterFloat.kt")
    public void testGreaterFloat() {
      runTest("compiler/testData/codegen/box/ieee754/greaterFloat.kt");
    }

    @TestMetadata("greaterFloat_properIeeeComparisons.kt")
    public void testGreaterFloat_properIeeeComparisons() {
      runTest("compiler/testData/codegen/box/ieee754/greaterFloat_properIeeeComparisons.kt");
    }

    @TestMetadata("inline.kt")
    public void testInline() {
      runTest("compiler/testData/codegen/box/ieee754/inline.kt");
    }

    @TestMetadata("kt48648_genericField.kt")
    public void testKt48648_genericField() {
      runTest("compiler/testData/codegen/box/ieee754/kt48648_genericField.kt");
    }

    @TestMetadata("lessDouble.kt")
    public void testLessDouble() {
      runTest("compiler/testData/codegen/box/ieee754/lessDouble.kt");
    }

    @TestMetadata("lessDouble_properIeeeAndNewInference.kt")
    public void testLessDouble_properIeeeAndNewInference() {
      runTest("compiler/testData/codegen/box/ieee754/lessDouble_properIeeeAndNewInference.kt");
    }

    @TestMetadata("lessDouble_properIeeeComparisons.kt")
    public void testLessDouble_properIeeeComparisons() {
      runTest("compiler/testData/codegen/box/ieee754/lessDouble_properIeeeComparisons.kt");
    }

    @TestMetadata("lessFloat.kt")
    public void testLessFloat() {
      runTest("compiler/testData/codegen/box/ieee754/lessFloat.kt");
    }

    @TestMetadata("lessFloat_properIeeeComparisons.kt")
    public void testLessFloat_properIeeeComparisons() {
      runTest("compiler/testData/codegen/box/ieee754/lessFloat_properIeeeComparisons.kt");
    }

    @TestMetadata("nullableAnyToReal.kt")
    public void testNullableAnyToReal() {
      runTest("compiler/testData/codegen/box/ieee754/nullableAnyToReal.kt");
    }

    @TestMetadata("nullableAnyToReal_AgainstCompiled.kt")
    public void testNullableAnyToReal_AgainstCompiled() {
      runTest("compiler/testData/codegen/box/ieee754/nullableAnyToReal_AgainstCompiled.kt");
    }

    @TestMetadata("nullableDoubleEquals.kt")
    public void testNullableDoubleEquals() {
      runTest("compiler/testData/codegen/box/ieee754/nullableDoubleEquals.kt");
    }

    @TestMetadata("nullableDoubleEqualsLV13.kt")
    public void testNullableDoubleEqualsLV13() {
      runTest("compiler/testData/codegen/box/ieee754/nullableDoubleEqualsLV13.kt");
    }

    @TestMetadata("nullableDoubleNotEquals.kt")
    public void testNullableDoubleNotEquals() {
      runTest("compiler/testData/codegen/box/ieee754/nullableDoubleNotEquals.kt");
    }

    @TestMetadata("nullableFloatEquals.kt")
    public void testNullableFloatEquals() {
      runTest("compiler/testData/codegen/box/ieee754/nullableFloatEquals.kt");
    }

    @TestMetadata("nullableFloatNotEquals.kt")
    public void testNullableFloatNotEquals() {
      runTest("compiler/testData/codegen/box/ieee754/nullableFloatNotEquals.kt");
    }

    @TestMetadata("nullableIntEquals.kt")
    public void testNullableIntEquals() {
      runTest("compiler/testData/codegen/box/ieee754/nullableIntEquals.kt");
    }

    @TestMetadata("safeCall.kt")
    public void testSafeCall() {
      runTest("compiler/testData/codegen/box/ieee754/safeCall.kt");
    }

    @TestMetadata("smartCastOnWhenSubjectAfterCheckInBranch_properIeeeComparisons.kt")
    public void testSmartCastOnWhenSubjectAfterCheckInBranch_properIeeeComparisons() {
      runTest("compiler/testData/codegen/box/ieee754/smartCastOnWhenSubjectAfterCheckInBranch_properIeeeComparisons.kt");
    }

    @TestMetadata("smartCastToDifferentTypes.kt")
    public void testSmartCastToDifferentTypes() {
      runTest("compiler/testData/codegen/box/ieee754/smartCastToDifferentTypes.kt");
    }

    @TestMetadata("smartCastToDifferentTypesWithNumericPromotion.kt")
    public void testSmartCastToDifferentTypesWithNumericPromotion() {
      runTest("compiler/testData/codegen/box/ieee754/smartCastToDifferentTypesWithNumericPromotion.kt");
    }

    @TestMetadata("smartCastToDifferentTypesWithNumericPromotion_properIeeeComparisons.kt")
    public void testSmartCastToDifferentTypesWithNumericPromotion_properIeeeComparisons() {
      runTest("compiler/testData/codegen/box/ieee754/smartCastToDifferentTypesWithNumericPromotion_properIeeeComparisons.kt");
    }

    @TestMetadata("smartCastToDifferentTypes_properIeeeComparisons.kt")
    public void testSmartCastToDifferentTypes_properIeeeComparisons() {
      runTest("compiler/testData/codegen/box/ieee754/smartCastToDifferentTypes_properIeeeComparisons.kt");
    }

    @TestMetadata("smartCastToDoubleAndComparableToDouble.kt")
    public void testSmartCastToDoubleAndComparableToDouble() {
      runTest("compiler/testData/codegen/box/ieee754/smartCastToDoubleAndComparableToDouble.kt");
    }

    @TestMetadata("smartCastToInt.kt")
    public void testSmartCastToInt() {
      runTest("compiler/testData/codegen/box/ieee754/smartCastToInt.kt");
    }

    @TestMetadata("when.kt")
    public void testWhen() {
      runTest("compiler/testData/codegen/box/ieee754/when.kt");
    }

    @TestMetadata("whenNoSubject.kt")
    public void testWhenNoSubject() {
      runTest("compiler/testData/codegen/box/ieee754/whenNoSubject.kt");
    }

    @TestMetadata("whenNoSubject_properIeeeComparisons.kt")
    public void testWhenNoSubject_properIeeeComparisons() {
      runTest("compiler/testData/codegen/box/ieee754/whenNoSubject_properIeeeComparisons.kt");
    }

    @TestMetadata("whenNullableSmartCast.kt")
    public void testWhenNullableSmartCast() {
      runTest("compiler/testData/codegen/box/ieee754/whenNullableSmartCast.kt");
    }

    @TestMetadata("when_properIeeeComparisons.kt")
    public void testWhen_properIeeeComparisons() {
      runTest("compiler/testData/codegen/box/ieee754/when_properIeeeComparisons.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/increment")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Increment extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInIncrement() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/increment"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("argumentWithSideEffects.kt")
    public void testArgumentWithSideEffects() {
      runTest("compiler/testData/codegen/box/increment/argumentWithSideEffects.kt");
    }

    @TestMetadata("arrayElement.kt")
    public void testArrayElement() {
      runTest("compiler/testData/codegen/box/increment/arrayElement.kt");
    }

    @TestMetadata("assignPlusOnSmartCast.kt")
    public void testAssignPlusOnSmartCast() {
      runTest("compiler/testData/codegen/box/increment/assignPlusOnSmartCast.kt");
    }

    @TestMetadata("augmentedAssignmentWithComplexRhs.kt")
    public void testAugmentedAssignmentWithComplexRhs() {
      runTest("compiler/testData/codegen/box/increment/augmentedAssignmentWithComplexRhs.kt");
    }

    @TestMetadata("classNaryGetSet.kt")
    public void testClassNaryGetSet() {
      runTest("compiler/testData/codegen/box/increment/classNaryGetSet.kt");
    }

    @TestMetadata("classVarargGetSet.kt")
    public void testClassVarargGetSet() {
      runTest("compiler/testData/codegen/box/increment/classVarargGetSet.kt");
    }

    @TestMetadata("classVarargGetSetEvaluationOrder.kt")
    public void testClassVarargGetSetEvaluationOrder() {
      runTest("compiler/testData/codegen/box/increment/classVarargGetSetEvaluationOrder.kt");
    }

    @TestMetadata("classWithGetSet.kt")
    public void testClassWithGetSet() {
      runTest("compiler/testData/codegen/box/increment/classWithGetSet.kt");
    }

    @TestMetadata("extOnLong.kt")
    public void testExtOnLong() {
      runTest("compiler/testData/codegen/box/increment/extOnLong.kt");
    }

    @TestMetadata("genericClassWithGetSet.kt")
    public void testGenericClassWithGetSet() {
      runTest("compiler/testData/codegen/box/increment/genericClassWithGetSet.kt");
    }

    @TestMetadata("kt36956.kt")
    public void testKt36956() {
      runTest("compiler/testData/codegen/box/increment/kt36956.kt");
    }

    @TestMetadata("memberExtOnLong.kt")
    public void testMemberExtOnLong() {
      runTest("compiler/testData/codegen/box/increment/memberExtOnLong.kt");
    }

    @TestMetadata("mutableListElement.kt")
    public void testMutableListElement() {
      runTest("compiler/testData/codegen/box/increment/mutableListElement.kt");
    }

    @TestMetadata("nullable.kt")
    public void testNullable() {
      runTest("compiler/testData/codegen/box/increment/nullable.kt");
    }

    @TestMetadata("postfixIncrementDoubleSmartCast.kt")
    public void testPostfixIncrementDoubleSmartCast() {
      runTest("compiler/testData/codegen/box/increment/postfixIncrementDoubleSmartCast.kt");
    }

    @TestMetadata("postfixIncrementOnClass.kt")
    public void testPostfixIncrementOnClass() {
      runTest("compiler/testData/codegen/box/increment/postfixIncrementOnClass.kt");
    }

    @TestMetadata("postfixIncrementOnClassSmartCast.kt")
    public void testPostfixIncrementOnClassSmartCast() {
      runTest("compiler/testData/codegen/box/increment/postfixIncrementOnClassSmartCast.kt");
    }

    @TestMetadata("postfixIncrementOnShortSmartCast.kt")
    public void testPostfixIncrementOnShortSmartCast() {
      runTest("compiler/testData/codegen/box/increment/postfixIncrementOnShortSmartCast.kt");
    }

    @TestMetadata("postfixIncrementOnSmartCast.kt")
    public void testPostfixIncrementOnSmartCast() {
      runTest("compiler/testData/codegen/box/increment/postfixIncrementOnSmartCast.kt");
    }

    @TestMetadata("postfixNullableClassIncrement.kt")
    public void testPostfixNullableClassIncrement() {
      runTest("compiler/testData/codegen/box/increment/postfixNullableClassIncrement.kt");
    }

    @TestMetadata("postfixNullableIncrement.kt")
    public void testPostfixNullableIncrement() {
      runTest("compiler/testData/codegen/box/increment/postfixNullableIncrement.kt");
    }

    @TestMetadata("prefixIncrementOnClass.kt")
    public void testPrefixIncrementOnClass() {
      runTest("compiler/testData/codegen/box/increment/prefixIncrementOnClass.kt");
    }

    @TestMetadata("prefixIncrementOnClassSmartCast.kt")
    public void testPrefixIncrementOnClassSmartCast() {
      runTest("compiler/testData/codegen/box/increment/prefixIncrementOnClassSmartCast.kt");
    }

    @TestMetadata("prefixIncrementOnSmartCast.kt")
    public void testPrefixIncrementOnSmartCast() {
      runTest("compiler/testData/codegen/box/increment/prefixIncrementOnSmartCast.kt");
    }

    @TestMetadata("prefixNullableClassIncrement.kt")
    public void testPrefixNullableClassIncrement() {
      runTest("compiler/testData/codegen/box/increment/prefixNullableClassIncrement.kt");
    }

    @TestMetadata("prefixNullableIncrement.kt")
    public void testPrefixNullableIncrement() {
      runTest("compiler/testData/codegen/box/increment/prefixNullableIncrement.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/inference")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Inference extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInInference() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inference"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("approximateNonTopLevelCapturedTypes.kt")
    public void testApproximateNonTopLevelCapturedTypes() {
      runTest("compiler/testData/codegen/box/inference/approximateNonTopLevelCapturedTypes.kt");
    }

    @TestMetadata("builderAndDelegateInference.kt")
    public void testBuilderAndDelegateInference() {
      runTest("compiler/testData/codegen/box/inference/builderAndDelegateInference.kt");
    }

    @TestMetadata("builderInference.kt")
    public void testBuilderInference() {
      runTest("compiler/testData/codegen/box/inference/builderInference.kt");
    }

    @TestMetadata("builderInferenceLeakingVariable.kt")
    public void testBuilderInferenceLeakingVariable() {
      runTest("compiler/testData/codegen/box/inference/builderInferenceLeakingVariable.kt");
    }

    @TestMetadata("builderInferenceWithAnnotation.kt")
    public void testBuilderInferenceWithAnnotation() {
      runTest("compiler/testData/codegen/box/inference/builderInferenceWithAnnotation.kt");
    }

    @TestMetadata("capturedStarProjection.kt")
    public void testCapturedStarProjection() {
      runTest("compiler/testData/codegen/box/inference/capturedStarProjection.kt");
    }

    @TestMetadata("capturedTypesSubstitutionIntoAbbreviation.kt")
    public void testCapturedTypesSubstitutionIntoAbbreviation() {
      runTest("compiler/testData/codegen/box/inference/capturedTypesSubstitutionIntoAbbreviation.kt");
    }

    @TestMetadata("coercionToUnitForLambdaReturnTypeWithFlexibleConstraint.kt")
    public void testCoercionToUnitForLambdaReturnTypeWithFlexibleConstraint() {
      runTest("compiler/testData/codegen/box/inference/coercionToUnitForLambdaReturnTypeWithFlexibleConstraint.kt");
    }

    @TestMetadata("coercionToUnitWithLastLambdaExpression.kt")
    public void testCoercionToUnitWithLastLambdaExpression() {
      runTest("compiler/testData/codegen/box/inference/coercionToUnitWithLastLambdaExpression.kt");
    }

    @TestMetadata("coerctionToUnitForLastExpressionWithStarProjection.kt")
    public void testCoerctionToUnitForLastExpressionWithStarProjection() {
      runTest("compiler/testData/codegen/box/inference/coerctionToUnitForLastExpressionWithStarProjection.kt");
    }

    @TestMetadata("earlyReturnInsideCrossinlineLambda.kt")
    public void testEarlyReturnInsideCrossinlineLambda() {
      runTest("compiler/testData/codegen/box/inference/earlyReturnInsideCrossinlineLambda.kt");
    }

    @TestMetadata("inferenceWithTypeVariableInsideCapturedType.kt")
    public void testInferenceWithTypeVariableInsideCapturedType() {
      runTest("compiler/testData/codegen/box/inference/inferenceWithTypeVariableInsideCapturedType.kt");
    }

    @TestMetadata("integerLiteralTypeInLamdaReturnType.kt")
    public void testIntegerLiteralTypeInLamdaReturnType() {
      runTest("compiler/testData/codegen/box/inference/integerLiteralTypeInLamdaReturnType.kt");
    }

    @TestMetadata("intersectionTypeInArguments.kt")
    public void testIntersectionTypeInArguments() {
      runTest("compiler/testData/codegen/box/inference/intersectionTypeInArguments.kt");
    }

    @TestMetadata("intersectionWithInvisibleComponent.kt")
    public void testIntersectionWithInvisibleComponent() {
      runTest("compiler/testData/codegen/box/inference/intersectionWithInvisibleComponent.kt");
    }

    @TestMetadata("kt10822.kt")
    public void testKt10822() {
      runTest("compiler/testData/codegen/box/inference/kt10822.kt");
    }

    @TestMetadata("kt26345.kt")
    public void testKt26345() {
      runTest("compiler/testData/codegen/box/inference/kt26345.kt");
    }

    @TestMetadata("kt32429.kt")
    public void testKt32429() {
      runTest("compiler/testData/codegen/box/inference/kt32429.kt");
    }

    @TestMetadata("kt35684.kt")
    public void testKt35684() {
      runTest("compiler/testData/codegen/box/inference/kt35684.kt");
    }

    @TestMetadata("kt36446.kt")
    public void testKt36446() {
      runTest("compiler/testData/codegen/box/inference/kt36446.kt");
    }

    @TestMetadata("kt38664.kt")
    public void testKt38664() {
      runTest("compiler/testData/codegen/box/inference/kt38664.kt");
    }

    @TestMetadata("kt39824.kt")
    public void testKt39824() {
      runTest("compiler/testData/codegen/box/inference/kt39824.kt");
    }

    @TestMetadata("kt42042.kt")
    public void testKt42042() {
      runTest("compiler/testData/codegen/box/inference/kt42042.kt");
    }

    @TestMetadata("kt42130.kt")
    public void testKt42130() {
      runTest("compiler/testData/codegen/box/inference/kt42130.kt");
    }

    @TestMetadata("kt45118.kt")
    public void testKt45118() {
      runTest("compiler/testData/codegen/box/inference/kt45118.kt");
    }

    @TestMetadata("kt47316.kt")
    public void testKt47316() {
      runTest("compiler/testData/codegen/box/inference/kt47316.kt");
    }

    @TestMetadata("kt49838.kt")
    public void testKt49838() {
      runTest("compiler/testData/codegen/box/inference/kt49838.kt");
    }

    @TestMetadata("kt51040.kt")
    public void testKt51040() {
      runTest("compiler/testData/codegen/box/inference/kt51040.kt");
    }

    @TestMetadata("kt65882.kt")
    public void testKt65882() {
      runTest("compiler/testData/codegen/box/inference/kt65882.kt");
    }

    @TestMetadata("kt67609.kt")
    public void testKt67609() {
      runTest("compiler/testData/codegen/box/inference/kt67609.kt");
    }

    @TestMetadata("lambdaWithStarReturn.kt")
    public void testLambdaWithStarReturn() {
      runTest("compiler/testData/codegen/box/inference/lambdaWithStarReturn.kt");
    }

    @TestMetadata("lambdasWithExtensionFunctionType.kt")
    public void testLambdasWithExtensionFunctionType() {
      runTest("compiler/testData/codegen/box/inference/lambdasWithExtensionFunctionType.kt");
    }

    @TestMetadata("lastExpressionOfLambdaWithNothingConstraint.kt")
    public void testLastExpressionOfLambdaWithNothingConstraint() {
      runTest("compiler/testData/codegen/box/inference/lastExpressionOfLambdaWithNothingConstraint.kt");
    }

    @TestMetadata("manyConstraintsDueToFlexibleRawTypes.kt")
    public void testManyConstraintsDueToFlexibleRawTypes() {
      runTest("compiler/testData/codegen/box/inference/manyConstraintsDueToFlexibleRawTypes.kt");
    }

    @TestMetadata("manyFlexibleTypeParametersFromJavaAndConversions.kt")
    public void testManyFlexibleTypeParametersFromJavaAndConversions() {
      runTest("compiler/testData/codegen/box/inference/manyFlexibleTypeParametersFromJavaAndConversions.kt");
    }

    @TestMetadata("mapCollectChainWithNullResult.kt")
    public void testMapCollectChainWithNullResult() {
      runTest("compiler/testData/codegen/box/inference/mapCollectChainWithNullResult.kt");
    }

    @TestMetadata("noCoercionToUniForNullableLambdaReturnType.kt")
    public void testNoCoercionToUniForNullableLambdaReturnType() {
      runTest("compiler/testData/codegen/box/inference/noCoercionToUniForNullableLambdaReturnType.kt");
    }

    @TestMetadata("noCoercionToUnitWithEqualityConstraintForNullableReturnType.kt")
    public void testNoCoercionToUnitWithEqualityConstraintForNullableReturnType() {
      runTest("compiler/testData/codegen/box/inference/noCoercionToUnitWithEqualityConstraintForNullableReturnType.kt");
    }

    @TestMetadata("noNothingValueInsideSpecialCall.kt")
    public void testNoNothingValueInsideSpecialCall() {
      runTest("compiler/testData/codegen/box/inference/noNothingValueInsideSpecialCall.kt");
    }

    @TestMetadata("overrideDefaultProperty.kt")
    public void testOverrideDefaultProperty() {
      runTest("compiler/testData/codegen/box/inference/overrideDefaultProperty.kt");
    }

    @TestMetadata("overrideGenericDefaultMethod.kt")
    public void testOverrideGenericDefaultMethod() {
      runTest("compiler/testData/codegen/box/inference/overrideGenericDefaultMethod.kt");
    }

    @TestMetadata("packagePrivateCst.kt")
    public void testPackagePrivateCst() {
      runTest("compiler/testData/codegen/box/inference/packagePrivateCst.kt");
    }

    @TestMetadata("plusAssignInsideLambda.kt")
    public void testPlusAssignInsideLambda() {
      runTest("compiler/testData/codegen/box/inference/plusAssignInsideLambda.kt");
    }

    @TestMetadata("recursiveConstraintInsideTypeArgumentWithStarProjection.kt")
    public void testRecursiveConstraintInsideTypeArgumentWithStarProjection() {
      runTest("compiler/testData/codegen/box/inference/recursiveConstraintInsideTypeArgumentWithStarProjection.kt");
    }

    @TestMetadata("referenceToCatchParameterFromLambdaExpression.kt")
    public void testReferenceToCatchParameterFromLambdaExpression() {
      runTest("compiler/testData/codegen/box/inference/referenceToCatchParameterFromLambdaExpression.kt");
    }

    @TestMetadata("safeCastWithElvis.kt")
    public void testSafeCastWithElvis() {
      runTest("compiler/testData/codegen/box/inference/safeCastWithElvis.kt");
    }

    @TestMetadata("specialCallsWithCallableReferences.kt")
    public void testSpecialCallsWithCallableReferences() {
      runTest("compiler/testData/codegen/box/inference/specialCallsWithCallableReferences.kt");
    }

    @TestMetadata("substituteIntersectionTypeInsideCapType.kt")
    public void testSubstituteIntersectionTypeInsideCapType() {
      runTest("compiler/testData/codegen/box/inference/substituteIntersectionTypeInsideCapType.kt");
    }

    @TestMetadata("subtypingOfIntersectionIltInsideFlexible.kt")
    public void testSubtypingOfIntersectionIltInsideFlexible() {
      runTest("compiler/testData/codegen/box/inference/subtypingOfIntersectionIltInsideFlexible.kt");
    }

    @TestMetadata("sumOfOverloads.kt")
    public void testSumOfOverloads() {
      runTest("compiler/testData/codegen/box/inference/sumOfOverloads.kt");
    }

    @TestMetadata("suspendExtensionRecevierFromConstraint.kt")
    public void testSuspendExtensionRecevierFromConstraint() {
      runTest("compiler/testData/codegen/box/inference/suspendExtensionRecevierFromConstraint.kt");
    }

    @TestMetadata("unsafeVarianceCodegen.kt")
    public void testUnsafeVarianceCodegen() {
      runTest("compiler/testData/codegen/box/inference/unsafeVarianceCodegen.kt");
    }

    @TestMetadata("violatingUpperBoundForSelfType.kt")
    public void testViolatingUpperBoundForSelfType() {
      runTest("compiler/testData/codegen/box/inference/violatingUpperBoundForSelfType.kt");
    }

    @TestMetadata("compiler/testData/codegen/box/inference/pcla")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Pcla extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInPcla() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inference/pcla"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("builderCallAsReturnTypeInLocalClass.kt")
      public void testBuilderCallAsReturnTypeInLocalClass() {
        runTest("compiler/testData/codegen/box/inference/pcla/builderCallAsReturnTypeInLocalClass.kt");
      }

      @TestMetadata("callableReferenceAndCoercionToUnit.kt")
      public void testCallableReferenceAndCoercionToUnit() {
        runTest("compiler/testData/codegen/box/inference/pcla/callableReferenceAndCoercionToUnit.kt");
      }

      @TestMetadata("callableReferencesProperCompletion.kt")
      public void testCallableReferencesProperCompletion() {
        runTest("compiler/testData/codegen/box/inference/pcla/callableReferencesProperCompletion.kt");
      }

      @TestMetadata("capturedTypes.kt")
      public void testCapturedTypes() {
        runTest("compiler/testData/codegen/box/inference/pcla/capturedTypes.kt");
      }

      @TestMetadata("changingResolveIfDontUseBuilderInferenceDisabledFeature.kt")
      public void testChangingResolveIfDontUseBuilderInferenceDisabledFeature() {
        runTest("compiler/testData/codegen/box/inference/pcla/changingResolveIfDontUseBuilderInferenceDisabledFeature.kt");
      }

      @TestMetadata("commonSuperType.kt")
      public void testCommonSuperType() {
        runTest("compiler/testData/codegen/box/inference/pcla/commonSuperType.kt");
      }

      @TestMetadata("commonSuperTypeContravariant.kt")
      public void testCommonSuperTypeContravariant() {
        runTest("compiler/testData/codegen/box/inference/pcla/commonSuperTypeContravariant.kt");
      }

      @TestMetadata("commonSuperTypeCovariant.kt")
      public void testCommonSuperTypeCovariant() {
        runTest("compiler/testData/codegen/box/inference/pcla/commonSuperTypeCovariant.kt");
      }

      @TestMetadata("commonSuperTypeInvariant.kt")
      public void testCommonSuperTypeInvariant() {
        runTest("compiler/testData/codegen/box/inference/pcla/commonSuperTypeInvariant.kt");
      }

      @TestMetadata("commonSuperTypeNullable.kt")
      public void testCommonSuperTypeNullable() {
        runTest("compiler/testData/codegen/box/inference/pcla/commonSuperTypeNullable.kt");
      }

      @TestMetadata("constraintsBetweenTwoStubVariables.kt")
      public void testConstraintsBetweenTwoStubVariables() {
        runTest("compiler/testData/codegen/box/inference/pcla/constraintsBetweenTwoStubVariables.kt");
      }

      @TestMetadata("contextReceivers.kt")
      public void testContextReceivers() {
        runTest("compiler/testData/codegen/box/inference/pcla/contextReceivers.kt");
      }

      @TestMetadata("cstBasedOnTwoBuilderInferenceLambda.kt")
      public void testCstBasedOnTwoBuilderInferenceLambda() {
        runTest("compiler/testData/codegen/box/inference/pcla/cstBasedOnTwoBuilderInferenceLambda.kt");
      }

      @TestMetadata("inferFromExpectedType.kt")
      public void testInferFromExpectedType() {
        runTest("compiler/testData/codegen/box/inference/pcla/inferFromExpectedType.kt");
      }

      @TestMetadata("intersect.kt")
      public void testIntersect() {
        runTest("compiler/testData/codegen/box/inference/pcla/intersect.kt");
      }

      @TestMetadata("labaledCall.kt")
      public void testLabaledCall() {
        runTest("compiler/testData/codegen/box/inference/pcla/labaledCall.kt");
      }

      @TestMetadata("lackOfNullCheckOnNullableInsideBuild.kt")
      public void testLackOfNullCheckOnNullableInsideBuild() {
        runTest("compiler/testData/codegen/box/inference/pcla/lackOfNullCheckOnNullableInsideBuild.kt");
      }

      @TestMetadata("lambdaParameterHasTVType.kt")
      public void testLambdaParameterHasTVType() {
        runTest("compiler/testData/codegen/box/inference/pcla/lambdaParameterHasTVType.kt");
      }

      @TestMetadata("memberScope.kt")
      public void testMemberScope() {
        runTest("compiler/testData/codegen/box/inference/pcla/memberScope.kt");
      }

      @TestMetadata("nestedNonExhaustiveIf.kt")
      public void testNestedNonExhaustiveIf() {
        runTest("compiler/testData/codegen/box/inference/pcla/nestedNonExhaustiveIf.kt");
      }

      @TestMetadata("nullability.kt")
      public void testNullability() {
        runTest("compiler/testData/codegen/box/inference/pcla/nullability.kt");
      }

      @TestMetadata("partiallyResolvedCallInReturnArgument.kt")
      public void testPartiallyResolvedCallInReturnArgument() {
        runTest("compiler/testData/codegen/box/inference/pcla/partiallyResolvedCallInReturnArgument.kt");
      }

      @TestMetadata("partiallyResolvedCallInReturnArgumentNonLast.kt")
      public void testPartiallyResolvedCallInReturnArgumentNonLast() {
        runTest("compiler/testData/codegen/box/inference/pcla/partiallyResolvedCallInReturnArgumentNonLast.kt");
      }

      @TestMetadata("partiallyResolvedCallInReturnArgumentNonUnit.kt")
      public void testPartiallyResolvedCallInReturnArgumentNonUnit() {
        runTest("compiler/testData/codegen/box/inference/pcla/partiallyResolvedCallInReturnArgumentNonUnit.kt");
      }

      @TestMetadata("pcaRootIsDelegatedConstructorCall.kt")
      public void testPcaRootIsDelegatedConstructorCall() {
        runTest("compiler/testData/codegen/box/inference/pcla/pcaRootIsDelegatedConstructorCall.kt");
      }

      @TestMetadata("pclaRootIsElvisSynthetic.kt")
      public void testPclaRootIsElvisSynthetic() {
        runTest("compiler/testData/codegen/box/inference/pcla/pclaRootIsElvisSynthetic.kt");
      }

      @TestMetadata("pclaRootIsIfWhenSyntheticCall.kt")
      public void testPclaRootIsIfWhenSyntheticCall() {
        runTest("compiler/testData/codegen/box/inference/pcla/pclaRootIsIfWhenSyntheticCall.kt");
      }

      @TestMetadata("pclaRootIsTrySyntheticCall.kt")
      public void testPclaRootIsTrySyntheticCall() {
        runTest("compiler/testData/codegen/box/inference/pcla/pclaRootIsTrySyntheticCall.kt");
      }

      @TestMetadata("pclaRootIsTrySyntheticCallWithDelegate.kt")
      public void testPclaRootIsTrySyntheticCallWithDelegate() {
        runTest("compiler/testData/codegen/box/inference/pcla/pclaRootIsTrySyntheticCallWithDelegate.kt");
      }

      @TestMetadata("posptonedPCLACallInsideStringInterpolation.kt")
      public void testPosptonedPCLACallInsideStringInterpolation() {
        runTest("compiler/testData/codegen/box/inference/pcla/posptonedPCLACallInsideStringInterpolation.kt");
      }

      @TestMetadata("propagateInferenceSessionIntoDeclarationAnalyzers.kt")
      public void testPropagateInferenceSessionIntoDeclarationAnalyzers() {
        runTest("compiler/testData/codegen/box/inference/pcla/propagateInferenceSessionIntoDeclarationAnalyzers.kt");
      }

      @TestMetadata("propertyInvokeInsidePCLALambda.kt")
      public void testPropertyInvokeInsidePCLALambda() {
        runTest("compiler/testData/codegen/box/inference/pcla/propertyInvokeInsidePCLALambda.kt");
      }

      @TestMetadata("receiverUsesOuterTVButReturnTypeIsProper.kt")
      public void testReceiverUsesOuterTVButReturnTypeIsProper() {
        runTest("compiler/testData/codegen/box/inference/pcla/receiverUsesOuterTVButReturnTypeIsProper.kt");
      }

      @TestMetadata("specialCallsWithCallableReferences.kt")
      public void testSpecialCallsWithCallableReferences() {
        runTest("compiler/testData/codegen/box/inference/pcla/specialCallsWithCallableReferences.kt");
      }

      @TestMetadata("specialCallsWithCallableReferencesDontRewriteAtSlice.kt")
      public void testSpecialCallsWithCallableReferencesDontRewriteAtSlice() {
        runTest("compiler/testData/codegen/box/inference/pcla/specialCallsWithCallableReferencesDontRewriteAtSlice.kt");
      }

      @TestMetadata("specialCallsWithCallableReferencesErrorType.kt")
      public void testSpecialCallsWithCallableReferencesErrorType() {
        runTest("compiler/testData/codegen/box/inference/pcla/specialCallsWithCallableReferencesErrorType.kt");
      }

      @TestMetadata("specialCallsWithCallableReferencesNonStrictOnlyInputTypes.kt")
      public void testSpecialCallsWithCallableReferencesNonStrictOnlyInputTypes() {
        runTest("compiler/testData/codegen/box/inference/pcla/specialCallsWithCallableReferencesNonStrictOnlyInputTypes.kt");
      }

      @TestMetadata("specialCallsWithLambdas.kt")
      public void testSpecialCallsWithLambdas() {
        runTest("compiler/testData/codegen/box/inference/pcla/specialCallsWithLambdas.kt");
      }

      @TestMetadata("substituteStubTypeIntoCR.kt")
      public void testSubstituteStubTypeIntoCR() {
        runTest("compiler/testData/codegen/box/inference/pcla/substituteStubTypeIntoCR.kt");
      }

      @TestMetadata("substituteStubTypeIntolambdaParameterDescriptor.kt")
      public void testSubstituteStubTypeIntolambdaParameterDescriptor() {
        runTest("compiler/testData/codegen/box/inference/pcla/substituteStubTypeIntolambdaParameterDescriptor.kt");
      }

      @TestMetadata("substituteTypeVariableIntolambdaParameterDescriptor.kt")
      public void testSubstituteTypeVariableIntolambdaParameterDescriptor() {
        runTest("compiler/testData/codegen/box/inference/pcla/substituteTypeVariableIntolambdaParameterDescriptor.kt");
      }

      @TestMetadata("substitutelambdaExtensionReceiverType.kt")
      public void testSubstitutelambdaExtensionReceiverType() {
        runTest("compiler/testData/codegen/box/inference/pcla/substitutelambdaExtensionReceiverType.kt");
      }

      @TestMetadata("topDownCompletionBreakedByNonBuilderInferenceSession.kt")
      public void testTopDownCompletionBreakedByNonBuilderInferenceSession() {
        runTest("compiler/testData/codegen/box/inference/pcla/topDownCompletionBreakedByNonBuilderInferenceSession.kt");
      }

      @TestMetadata("topDownCompletionWithThreeBuilderInferenceCalls.kt")
      public void testTopDownCompletionWithThreeBuilderInferenceCalls() {
        runTest("compiler/testData/codegen/box/inference/pcla/topDownCompletionWithThreeBuilderInferenceCalls.kt");
      }

      @TestMetadata("topDownCompletionWithThreeBuilderInferenceCallsSameLevel.kt")
      public void testTopDownCompletionWithThreeBuilderInferenceCallsSameLevel() {
        runTest("compiler/testData/codegen/box/inference/pcla/topDownCompletionWithThreeBuilderInferenceCallsSameLevel.kt");
      }

      @TestMetadata("topDownCompletionWithTwoBuilderInferenceCalls.kt")
      public void testTopDownCompletionWithTwoBuilderInferenceCalls() {
        runTest("compiler/testData/codegen/box/inference/pcla/topDownCompletionWithTwoBuilderInferenceCalls.kt");
      }

      @TestMetadata("withExpectedType.kt")
      public void testWithExpectedType() {
        runTest("compiler/testData/codegen/box/inference/pcla/withExpectedType.kt");
      }

      @TestMetadata("withoutAnnotation.kt")
      public void testWithoutAnnotation() {
        runTest("compiler/testData/codegen/box/inference/pcla/withoutAnnotation.kt");
      }

      @TestMetadata("compiler/testData/codegen/box/inference/pcla/issues")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class Issues extends AbstractLightAnalysisModeTest {
        @TestMetadata("kt64069.kt")
        public void ignoreKt64069() {
          runTest("compiler/testData/codegen/box/inference/pcla/issues/kt64069.kt");
        }

        @TestMetadata("kt66272.kt")
        public void ignoreKt66272() {
          runTest("compiler/testData/codegen/box/inference/pcla/issues/kt66272.kt");
        }

        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        public void testAllFilesPresentInIssues() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inference/pcla/issues"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("kt41164.kt")
        public void testKt41164() {
          runTest("compiler/testData/codegen/box/inference/pcla/issues/kt41164.kt");
        }

        @TestMetadata("kt42139.kt")
        public void testKt42139() {
          runTest("compiler/testData/codegen/box/inference/pcla/issues/kt42139.kt");
        }

        @TestMetadata("kt43710.kt")
        public void testKt43710() {
          runTest("compiler/testData/codegen/box/inference/pcla/issues/kt43710.kt");
        }

        @TestMetadata("kt44241.kt")
        public void testKt44241() {
          runTest("compiler/testData/codegen/box/inference/pcla/issues/kt44241.kt");
        }

        @TestMetadata("kt45083.kt")
        public void testKt45083() {
          runTest("compiler/testData/codegen/box/inference/pcla/issues/kt45083.kt");
        }

        @TestMetadata("kt47052.kt")
        public void testKt47052() {
          runTest("compiler/testData/codegen/box/inference/pcla/issues/kt47052.kt");
        }

        @TestMetadata("kt47744.kt")
        public void testKt47744() {
          runTest("compiler/testData/codegen/box/inference/pcla/issues/kt47744.kt");
        }

        @TestMetadata("kt47989a.kt")
        public void testKt47989a() {
          runTest("compiler/testData/codegen/box/inference/pcla/issues/kt47989a.kt");
        }

        @TestMetadata("kt47989b.kt")
        public void testKt47989b() {
          runTest("compiler/testData/codegen/box/inference/pcla/issues/kt47989b.kt");
        }

        @TestMetadata("kt48633.kt")
        public void testKt48633() {
          runTest("compiler/testData/codegen/box/inference/pcla/issues/kt48633.kt");
        }

        @TestMetadata("kt49160a.kt")
        public void testKt49160a() {
          runTest("compiler/testData/codegen/box/inference/pcla/issues/kt49160a.kt");
        }

        @TestMetadata("kt49160b.kt")
        public void testKt49160b() {
          runTest("compiler/testData/codegen/box/inference/pcla/issues/kt49160b.kt");
        }

        @TestMetadata("kt49160c.kt")
        public void testKt49160c() {
          runTest("compiler/testData/codegen/box/inference/pcla/issues/kt49160c.kt");
        }

        @TestMetadata("kt49160d.kt")
        public void testKt49160d() {
          runTest("compiler/testData/codegen/box/inference/pcla/issues/kt49160d.kt");
        }

        @TestMetadata("kt49160e.kt")
        public void testKt49160e() {
          runTest("compiler/testData/codegen/box/inference/pcla/issues/kt49160e.kt");
        }

        @TestMetadata("kt49263.kt")
        public void testKt49263() {
          runTest("compiler/testData/codegen/box/inference/pcla/issues/kt49263.kt");
        }

        @TestMetadata("kt49283.kt")
        public void testKt49283() {
          runTest("compiler/testData/codegen/box/inference/pcla/issues/kt49283.kt");
        }

        @TestMetadata("kt49887.kt")
        public void testKt49887() {
          runTest("compiler/testData/codegen/box/inference/pcla/issues/kt49887.kt");
        }

        @TestMetadata("kt50453.kt")
        public void testKt50453() {
          runTest("compiler/testData/codegen/box/inference/pcla/issues/kt50453.kt");
        }

        @TestMetadata("kt50827a.kt")
        public void testKt50827a() {
          runTest("compiler/testData/codegen/box/inference/pcla/issues/kt50827a.kt");
        }

        @TestMetadata("kt50827b.kt")
        public void testKt50827b() {
          runTest("compiler/testData/codegen/box/inference/pcla/issues/kt50827b.kt");
        }

        @TestMetadata("kt51988.kt")
        public void testKt51988() {
          runTest("compiler/testData/codegen/box/inference/pcla/issues/kt51988.kt");
        }

        @TestMetadata("kt52757.kt")
        public void testKt52757() {
          runTest("compiler/testData/codegen/box/inference/pcla/issues/kt52757.kt");
        }

        @TestMetadata("kt52838a.kt")
        public void testKt52838a() {
          runTest("compiler/testData/codegen/box/inference/pcla/issues/kt52838a.kt");
        }

        @TestMetadata("kt52838b.kt")
        public void testKt52838b() {
          runTest("compiler/testData/codegen/box/inference/pcla/issues/kt52838b.kt");
        }

        @TestMetadata("kt52838c.kt")
        public void testKt52838c() {
          runTest("compiler/testData/codegen/box/inference/pcla/issues/kt52838c.kt");
        }

        @TestMetadata("kt53109.kt")
        public void testKt53109() {
          runTest("compiler/testData/codegen/box/inference/pcla/issues/kt53109.kt");
        }

        @TestMetadata("kt53422a.kt")
        public void testKt53422a() {
          runTest("compiler/testData/codegen/box/inference/pcla/issues/kt53422a.kt");
        }

        @TestMetadata("kt53422b.kt")
        public void testKt53422b() {
          runTest("compiler/testData/codegen/box/inference/pcla/issues/kt53422b.kt");
        }

        @TestMetadata("kt53478.kt")
        public void testKt53478() {
          runTest("compiler/testData/codegen/box/inference/pcla/issues/kt53478.kt");
        }

        @TestMetadata("kt53553.kt")
        public void testKt53553() {
          runTest("compiler/testData/codegen/box/inference/pcla/issues/kt53553.kt");
        }

        @TestMetadata("kt53639.kt")
        public void testKt53639() {
          runTest("compiler/testData/codegen/box/inference/pcla/issues/kt53639.kt");
        }

        @TestMetadata("kt53740a.kt")
        public void testKt53740a() {
          runTest("compiler/testData/codegen/box/inference/pcla/issues/kt53740a.kt");
        }

        @TestMetadata("kt53740b.kt")
        public void testKt53740b() {
          runTest("compiler/testData/codegen/box/inference/pcla/issues/kt53740b.kt");
        }

        @TestMetadata("kt54400a.kt")
        public void testKt54400a() {
          runTest("compiler/testData/codegen/box/inference/pcla/issues/kt54400a.kt");
        }

        @TestMetadata("kt54400b.kt")
        public void testKt54400b() {
          runTest("compiler/testData/codegen/box/inference/pcla/issues/kt54400b.kt");
        }

        @TestMetadata("kt54400c.kt")
        public void testKt54400c() {
          runTest("compiler/testData/codegen/box/inference/pcla/issues/kt54400c.kt");
        }

        @TestMetadata("kt54664.kt")
        public void testKt54664() {
          runTest("compiler/testData/codegen/box/inference/pcla/issues/kt54664.kt");
        }

        @TestMetadata("kt54767a.kt")
        public void testKt54767a() {
          runTest("compiler/testData/codegen/box/inference/pcla/issues/kt54767a.kt");
        }

        @TestMetadata("kt54767b.kt")
        public void testKt54767b() {
          runTest("compiler/testData/codegen/box/inference/pcla/issues/kt54767b.kt");
        }

        @TestMetadata("kt55056.kt")
        public void testKt55056() {
          runTest("compiler/testData/codegen/box/inference/pcla/issues/kt55056.kt");
        }

        @TestMetadata("kt55252.kt")
        public void testKt55252() {
          runTest("compiler/testData/codegen/box/inference/pcla/issues/kt55252.kt");
        }

        @TestMetadata("kt55281.kt")
        public void testKt55281() {
          runTest("compiler/testData/codegen/box/inference/pcla/issues/kt55281.kt");
        }

        @TestMetadata("kt56949.kt")
        public void testKt56949() {
          runTest("compiler/testData/codegen/box/inference/pcla/issues/kt56949.kt");
        }

        @TestMetadata("kt57707.kt")
        public void testKt57707() {
          runTest("compiler/testData/codegen/box/inference/pcla/issues/kt57707.kt");
        }

        @TestMetadata("kt57709.kt")
        public void testKt57709() {
          runTest("compiler/testData/codegen/box/inference/pcla/issues/kt57709.kt");
        }

        @TestMetadata("kt57834.kt")
        public void testKt57834() {
          runTest("compiler/testData/codegen/box/inference/pcla/issues/kt57834.kt");
        }

        @TestMetadata("kt59426.kt")
        public void testKt59426() {
          runTest("compiler/testData/codegen/box/inference/pcla/issues/kt59426.kt");
        }

        @TestMetadata("kt59798.kt")
        public void testKt59798() {
          runTest("compiler/testData/codegen/box/inference/pcla/issues/kt59798.kt");
        }

        @TestMetadata("kt60291a.kt")
        public void testKt60291a() {
          runTest("compiler/testData/codegen/box/inference/pcla/issues/kt60291a.kt");
        }

        @TestMetadata("kt60291b.kt")
        public void testKt60291b() {
          runTest("compiler/testData/codegen/box/inference/pcla/issues/kt60291b.kt");
        }

        @TestMetadata("kt60291c.kt")
        public void testKt60291c() {
          runTest("compiler/testData/codegen/box/inference/pcla/issues/kt60291c.kt");
        }

        @TestMetadata("kt60447a.kt")
        public void testKt60447a() {
          runTest("compiler/testData/codegen/box/inference/pcla/issues/kt60447a.kt");
        }

        @TestMetadata("kt60447b.kt")
        public void testKt60447b() {
          runTest("compiler/testData/codegen/box/inference/pcla/issues/kt60447b.kt");
        }

        @TestMetadata("kt61310.kt")
        public void testKt61310() {
          runTest("compiler/testData/codegen/box/inference/pcla/issues/kt61310.kt");
        }

        @TestMetadata("kt63733.kt")
        public void testKt63733() {
          runTest("compiler/testData/codegen/box/inference/pcla/issues/kt63733.kt");
        }

        @TestMetadata("kt63840a.kt")
        public void testKt63840a() {
          runTest("compiler/testData/codegen/box/inference/pcla/issues/kt63840a.kt");
        }

        @TestMetadata("kt63840b.kt")
        public void testKt63840b() {
          runTest("compiler/testData/codegen/box/inference/pcla/issues/kt63840b.kt");
        }

        @TestMetadata("kt63840c.kt")
        public void testKt63840c() {
          runTest("compiler/testData/codegen/box/inference/pcla/issues/kt63840c.kt");
        }

        @TestMetadata("kt64066.kt")
        public void testKt64066() {
          runTest("compiler/testData/codegen/box/inference/pcla/issues/kt64066.kt");
        }

        @TestMetadata("kt65300a.kt")
        public void testKt65300a() {
          runTest("compiler/testData/codegen/box/inference/pcla/issues/kt65300a.kt");
        }

        @TestMetadata("kt65300b.kt")
        public void testKt65300b() {
          runTest("compiler/testData/codegen/box/inference/pcla/issues/kt65300b.kt");
        }

        @TestMetadata("kt65300c.kt")
        public void testKt65300c() {
          runTest("compiler/testData/codegen/box/inference/pcla/issues/kt65300c.kt");
        }

        @TestMetadata("kt65300d.kt")
        public void testKt65300d() {
          runTest("compiler/testData/codegen/box/inference/pcla/issues/kt65300d.kt");
        }

        @TestMetadata("kt65300e.kt")
        public void testKt65300e() {
          runTest("compiler/testData/codegen/box/inference/pcla/issues/kt65300e.kt");
        }

        @TestMetadata("kt65300f.kt")
        public void testKt65300f() {
          runTest("compiler/testData/codegen/box/inference/pcla/issues/kt65300f.kt");
        }

        @TestMetadata("kt65300g.kt")
        public void testKt65300g() {
          runTest("compiler/testData/codegen/box/inference/pcla/issues/kt65300g.kt");
        }

        @TestMetadata("kt65300h.kt")
        public void testKt65300h() {
          runTest("compiler/testData/codegen/box/inference/pcla/issues/kt65300h.kt");
        }

        @TestMetadata("kt65300i.kt")
        public void testKt65300i() {
          runTest("compiler/testData/codegen/box/inference/pcla/issues/kt65300i.kt");
        }

        @TestMetadata("kt65300j.kt")
        public void testKt65300j() {
          runTest("compiler/testData/codegen/box/inference/pcla/issues/kt65300j.kt");
        }

        @TestMetadata("kt65341.kt")
        public void testKt65341() {
          runTest("compiler/testData/codegen/box/inference/pcla/issues/kt65341.kt");
        }

        @TestMetadata("kt66229.kt")
        public void testKt66229() {
          runTest("compiler/testData/codegen/box/inference/pcla/issues/kt66229.kt");
        }

        @TestMetadata("kt66243.kt")
        public void testKt66243() {
          runTest("compiler/testData/codegen/box/inference/pcla/issues/kt66243.kt");
        }

        @TestMetadata("kt67993.kt")
        public void testKt67993() {
          runTest("compiler/testData/codegen/box/inference/pcla/issues/kt67993.kt");
        }
      }

      @TestMetadata("compiler/testData/codegen/box/inference/pcla/oneParameter")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class OneParameter extends AbstractLightAnalysisModeTest {
        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        public void testAllFilesPresentInOneParameter() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inference/pcla/oneParameter"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("compiler/testData/codegen/box/inference/pcla/oneParameter/oneTypeVariable")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class OneTypeVariable extends AbstractLightAnalysisModeTest {
          private void runTest(String testDataFilePath) {
            KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
          }

          public void testAllFilesPresentInOneTypeVariable() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inference/pcla/oneParameter/oneTypeVariable"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }

          @TestMetadata("compiler/testData/codegen/box/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin")
          @TestDataPath("$PROJECT_ROOT")
          @RunWith(JUnit3RunnerWithInners.class)
          public static class OneTypeInfoOrigin extends AbstractLightAnalysisModeTest {
            private void runTest(String testDataFilePath) {
              KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
            }

            public void testAllFilesPresentInOneTypeInfoOrigin() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }

            @TestMetadata("AnonymousFunctionArgumentAndBuildeeParameter.kt")
            public void testAnonymousFunctionArgumentAndBuildeeParameter() {
              runTest("compiler/testData/codegen/box/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/AnonymousFunctionArgumentAndBuildeeParameter.kt");
            }

            @TestMetadata("AnonymousFunctionArgumentAndBuildeeReceiver.kt")
            public void testAnonymousFunctionArgumentAndBuildeeReceiver() {
              runTest("compiler/testData/codegen/box/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/AnonymousFunctionArgumentAndBuildeeReceiver.kt");
            }

            @TestMetadata("LambdaArgumentAndBuildeeParameter.kt")
            public void testLambdaArgumentAndBuildeeParameter() {
              runTest("compiler/testData/codegen/box/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/LambdaArgumentAndBuildeeParameter.kt");
            }

            @TestMetadata("LambdaArgumentAndBuildeeReceiver.kt")
            public void testLambdaArgumentAndBuildeeReceiver() {
              runTest("compiler/testData/codegen/box/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/LambdaArgumentAndBuildeeReceiver.kt");
            }

            @TestMetadata("compiler/testData/codegen/box/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/sourceSinkFeedContexts")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class SourceSinkFeedContexts extends AbstractLightAnalysisModeTest {
              private void runTest(String testDataFilePath) {
                KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
              }

              public void testAllFilesPresentInSourceSinkFeedContexts() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/sourceSinkFeedContexts"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
              }

              @TestMetadata("ByAssignmentToALocalVariableMaterializeCase.kt")
              public void testByAssignmentToALocalVariableMaterializeCase() {
                runTest("compiler/testData/codegen/box/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/sourceSinkFeedContexts/ByAssignmentToALocalVariableMaterializeCase.kt");
              }

              @TestMetadata("ByAssignmentToALocalVariableYieldCase.kt")
              public void testByAssignmentToALocalVariableYieldCase() {
                runTest("compiler/testData/codegen/box/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/sourceSinkFeedContexts/ByAssignmentToALocalVariableYieldCase.kt");
              }

              @TestMetadata("InsideAnonymousObject.kt")
              public void testInsideAnonymousObject() {
                runTest("compiler/testData/codegen/box/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/sourceSinkFeedContexts/InsideAnonymousObject.kt");
              }

              @TestMetadata("InsideLocalClass.kt")
              public void testInsideLocalClass() {
                runTest("compiler/testData/codegen/box/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/sourceSinkFeedContexts/InsideLocalClass.kt");
              }

              @TestMetadata("InsideNestedLambda.kt")
              public void testInsideNestedLambda() {
                runTest("compiler/testData/codegen/box/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/sourceSinkFeedContexts/InsideNestedLambda.kt");
              }

              @TestMetadata("ThroughDelegatedLocalVariableMaterializeCase.kt")
              public void testThroughDelegatedLocalVariableMaterializeCase() {
                runTest("compiler/testData/codegen/box/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/sourceSinkFeedContexts/ThroughDelegatedLocalVariableMaterializeCase.kt");
              }

              @TestMetadata("ThroughDelegatedLocalVariableYieldCase.kt")
              public void testThroughDelegatedLocalVariableYieldCase() {
                runTest("compiler/testData/codegen/box/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/sourceSinkFeedContexts/ThroughDelegatedLocalVariableYieldCase.kt");
              }

              @TestMetadata("ThroughGenericFunctionCall.kt")
              public void testThroughGenericFunctionCall() {
                runTest("compiler/testData/codegen/box/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/sourceSinkFeedContexts/ThroughGenericFunctionCall.kt");
              }

              @TestMetadata("ThroughLocalVariable.kt")
              public void testThroughLocalVariable() {
                runTest("compiler/testData/codegen/box/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/sourceSinkFeedContexts/ThroughLocalVariable.kt");
              }
            }

            @TestMetadata("compiler/testData/codegen/box/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class TargetTypes extends AbstractLightAnalysisModeTest {
              private void runTest(String testDataFilePath) {
                KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
              }

              public void testAllFilesPresentInTargetTypes() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
              }

              @TestMetadata("AnonymousObject.kt")
              public void testAnonymousObject() {
                runTest("compiler/testData/codegen/box/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/AnonymousObject.kt");
              }

              @TestMetadata("DefinitelyNonNullableTypeParameter.kt")
              public void testDefinitelyNonNullableTypeParameter() {
                runTest("compiler/testData/codegen/box/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/DefinitelyNonNullableTypeParameter.kt");
              }

              @TestMetadata("EnclosingClass.kt")
              public void testEnclosingClass() {
                runTest("compiler/testData/codegen/box/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/EnclosingClass.kt");
              }

              @TestMetadata("EnclosingEnumerationEntryType.kt")
              public void testEnclosingEnumerationEntryType() {
                runTest("compiler/testData/codegen/box/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/EnclosingEnumerationEntryType.kt");
              }

              @TestMetadata("EnclosingEnumerationType.kt")
              public void testEnclosingEnumerationType() {
                runTest("compiler/testData/codegen/box/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/EnclosingEnumerationType.kt");
              }

              @TestMetadata("EnclosingExplicitlyGenericInnerClass.kt")
              public void testEnclosingExplicitlyGenericInnerClass() {
                runTest("compiler/testData/codegen/box/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/EnclosingExplicitlyGenericInnerClass.kt");
              }

              @TestMetadata("EnclosingGenericClass.kt")
              public void testEnclosingGenericClass() {
                runTest("compiler/testData/codegen/box/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/EnclosingGenericClass.kt");
              }

              @TestMetadata("EnclosingImplicitlyGenericInnerClass.kt")
              public void testEnclosingImplicitlyGenericInnerClass() {
                runTest("compiler/testData/codegen/box/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/EnclosingImplicitlyGenericInnerClass.kt");
              }

              @TestMetadata("EnclosingInnerClass.kt")
              public void testEnclosingInnerClass() {
                runTest("compiler/testData/codegen/box/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/EnclosingInnerClass.kt");
              }

              @TestMetadata("EnumerationType.kt")
              public void testEnumerationType() {
                runTest("compiler/testData/codegen/box/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/EnumerationType.kt");
              }

              @TestMetadata("ExplicitlyGenericInnerClass.kt")
              public void testExplicitlyGenericInnerClass() {
                runTest("compiler/testData/codegen/box/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/ExplicitlyGenericInnerClass.kt");
              }

              @TestMetadata("FunctionWithParameterToUnit.kt")
              public void testFunctionWithParameterToUnit() {
                runTest("compiler/testData/codegen/box/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/FunctionWithParameterToUnit.kt");
              }

              @TestMetadata("FunctionWithReceiverToUnit.kt")
              public void testFunctionWithReceiverToUnit() {
                runTest("compiler/testData/codegen/box/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/FunctionWithReceiverToUnit.kt");
              }

              @TestMetadata("GenericLocalClass.kt")
              public void testGenericLocalClass() {
                runTest("compiler/testData/codegen/box/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/GenericLocalClass.kt");
              }

              @TestMetadata("GenericLocalClassWithLeakingTypeParameter.kt")
              public void testGenericLocalClassWithLeakingTypeParameter() {
                runTest("compiler/testData/codegen/box/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/GenericLocalClassWithLeakingTypeParameter.kt");
              }

              @TestMetadata("GenericWithContravariantTypeParameter.kt")
              public void testGenericWithContravariantTypeParameter() {
                runTest("compiler/testData/codegen/box/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/GenericWithContravariantTypeParameter.kt");
              }

              @TestMetadata("GenericWithCovariantTypeParameter.kt")
              public void testGenericWithCovariantTypeParameter() {
                runTest("compiler/testData/codegen/box/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/GenericWithCovariantTypeParameter.kt");
              }

              @TestMetadata("GenericWithInProjectedTypeArgument.kt")
              public void testGenericWithInProjectedTypeArgument() {
                runTest("compiler/testData/codegen/box/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/GenericWithInProjectedTypeArgument.kt");
              }

              @TestMetadata("GenericWithInvariantTypeParameter.kt")
              public void testGenericWithInvariantTypeParameter() {
                runTest("compiler/testData/codegen/box/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/GenericWithInvariantTypeParameter.kt");
              }

              @TestMetadata("GenericWithOutProjectedTypeArgument.kt")
              public void testGenericWithOutProjectedTypeArgument() {
                runTest("compiler/testData/codegen/box/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/GenericWithOutProjectedTypeArgument.kt");
              }

              @TestMetadata("GenericWithStarProjectedTypeArgument.kt")
              public void testGenericWithStarProjectedTypeArgument() {
                runTest("compiler/testData/codegen/box/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/GenericWithStarProjectedTypeArgument.kt");
              }

              @TestMetadata("ImplicitlyGenericInnerClass.kt")
              public void testImplicitlyGenericInnerClass() {
                runTest("compiler/testData/codegen/box/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/ImplicitlyGenericInnerClass.kt");
              }

              @TestMetadata("InnerClass.kt")
              public void testInnerClass() {
                runTest("compiler/testData/codegen/box/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/InnerClass.kt");
              }

              @TestMetadata("Int.kt")
              public void testInt() {
                runTest("compiler/testData/codegen/box/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/Int.kt");
              }

              @TestMetadata("IntersectionType.kt")
              public void testIntersectionType() {
                runTest("compiler/testData/codegen/box/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/IntersectionType.kt");
              }

              @TestMetadata("LocalClass.kt")
              public void testLocalClass() {
                runTest("compiler/testData/codegen/box/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/LocalClass.kt");
              }

              @TestMetadata("NothingYieldCase.kt")
              public void testNothingYieldCase() {
                runTest("compiler/testData/codegen/box/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/NothingYieldCase.kt");
              }

              @TestMetadata("NullableNothing.kt")
              public void testNullableNothing() {
                runTest("compiler/testData/codegen/box/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/NullableNothing.kt");
              }

              @TestMetadata("NullableNothingNullLiteralYieldCase.kt")
              public void testNullableNothingNullLiteralYieldCase() {
                runTest("compiler/testData/codegen/box/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/NullableNothingNullLiteralYieldCase.kt");
              }

              @TestMetadata("NullableType.kt")
              public void testNullableType() {
                runTest("compiler/testData/codegen/box/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/NullableType.kt");
              }

              @TestMetadata("NullableTypeParameter.kt")
              public void testNullableTypeParameter() {
                runTest("compiler/testData/codegen/box/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/NullableTypeParameter.kt");
              }

              @TestMetadata("NullaryFunctionToUnit.kt")
              public void testNullaryFunctionToUnit() {
                runTest("compiler/testData/codegen/box/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/NullaryFunctionToUnit.kt");
              }

              @TestMetadata("NullaryFunctionWithReturnValue.kt")
              public void testNullaryFunctionWithReturnValue() {
                runTest("compiler/testData/codegen/box/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/NullaryFunctionWithReturnValue.kt");
              }

              @TestMetadata("String.kt")
              public void testString() {
                runTest("compiler/testData/codegen/box/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/String.kt");
              }

              @TestMetadata("SuspendingFunction.kt")
              public void testSuspendingFunction() {
                runTest("compiler/testData/codegen/box/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/SuspendingFunction.kt");
              }

              @TestMetadata("TypeParameter.kt")
              public void testTypeParameter() {
                runTest("compiler/testData/codegen/box/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/TypeParameter.kt");
              }
            }

            @TestMetadata("compiler/testData/codegen/box/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/typeInfoSinks")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class TypeInfoSinks extends AbstractLightAnalysisModeTest {
              private void runTest(String testDataFilePath) {
                KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
              }

              public void testAllFilesPresentInTypeInfoSinks() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/typeInfoSinks"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
              }

              @TestMetadata("ExtensionFunctions.kt")
              public void testExtensionFunctions() {
                runTest("compiler/testData/codegen/box/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/typeInfoSinks/ExtensionFunctions.kt");
              }

              @TestMetadata("ImmutableExtensionProperties.kt")
              public void testImmutableExtensionProperties() {
                runTest("compiler/testData/codegen/box/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/typeInfoSinks/ImmutableExtensionProperties.kt");
              }

              @TestMetadata("ImmutableProperties.kt")
              public void testImmutableProperties() {
                runTest("compiler/testData/codegen/box/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/typeInfoSinks/ImmutableProperties.kt");
              }

              @TestMetadata("MutableExtensionPropertiesMaterializeCase.kt")
              public void testMutableExtensionPropertiesMaterializeCase() {
                runTest("compiler/testData/codegen/box/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/typeInfoSinks/MutableExtensionPropertiesMaterializeCase.kt");
              }

              @TestMetadata("MutableExtensionPropertiesYieldCase.kt")
              public void testMutableExtensionPropertiesYieldCase() {
                runTest("compiler/testData/codegen/box/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/typeInfoSinks/MutableExtensionPropertiesYieldCase.kt");
              }

              @TestMetadata("MutablePropertiesMaterializeCase.kt")
              public void testMutablePropertiesMaterializeCase() {
                runTest("compiler/testData/codegen/box/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/typeInfoSinks/MutablePropertiesMaterializeCase.kt");
              }

              @TestMetadata("MutablePropertiesYieldCase.kt")
              public void testMutablePropertiesYieldCase() {
                runTest("compiler/testData/codegen/box/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/typeInfoSinks/MutablePropertiesYieldCase.kt");
              }

              @TestMetadata("ParametersOfBuilderArguments.kt")
              public void testParametersOfBuilderArguments() {
                runTest("compiler/testData/codegen/box/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/typeInfoSinks/ParametersOfBuilderArguments.kt");
              }

              @TestMetadata("ReceiversOfBuilderArguments.kt")
              public void testReceiversOfBuilderArguments() {
                runTest("compiler/testData/codegen/box/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/typeInfoSinks/ReceiversOfBuilderArguments.kt");
              }
            }

            @TestMetadata("compiler/testData/codegen/box/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/typeInfoSources")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class TypeInfoSources extends AbstractLightAnalysisModeTest {
              private void runTest(String testDataFilePath) {
                KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
              }

              public void testAllFilesPresentInTypeInfoSources() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/typeInfoSources"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
              }

              @TestMetadata("ExtensionFunctions.kt")
              public void testExtensionFunctions() {
                runTest("compiler/testData/codegen/box/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/typeInfoSources/ExtensionFunctions.kt");
              }

              @TestMetadata("ExtensionProperties.kt")
              public void testExtensionProperties() {
                runTest("compiler/testData/codegen/box/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/typeInfoSources/ExtensionProperties.kt");
              }

              @TestMetadata("ParametersOfBuilderArguments.kt")
              public void testParametersOfBuilderArguments() {
                runTest("compiler/testData/codegen/box/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/typeInfoSources/ParametersOfBuilderArguments.kt");
              }

              @TestMetadata("ReceiversOfBuilderArguments.kt")
              public void testReceiversOfBuilderArguments() {
                runTest("compiler/testData/codegen/box/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/typeInfoSources/ReceiversOfBuilderArguments.kt");
              }

              @TestMetadata("ReturnTypesOfBuilderParameters.kt")
              public void testReturnTypesOfBuilderParameters() {
                runTest("compiler/testData/codegen/box/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/typeInfoSources/ReturnTypesOfBuilderParameters.kt");
              }

              @TestMetadata("UnitReturnTypeOfBuilderParametersExplicitReturnCase.kt")
              public void testUnitReturnTypeOfBuilderParametersExplicitReturnCase() {
                runTest("compiler/testData/codegen/box/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/typeInfoSources/UnitReturnTypeOfBuilderParametersExplicitReturnCase.kt");
              }
            }
          }
        }
      }
    }
  }

  @TestMetadata("compiler/testData/codegen/box/initializers")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Initializers extends AbstractLightAnalysisModeTest {
    @TestMetadata("initializers9.kt")
    public void ignoreInitializers9() {
      runTest("compiler/testData/codegen/box/initializers/initializers9.kt");
    }

    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInInitializers() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/initializers"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("correctOrder1.kt")
    public void testCorrectOrder1() {
      runTest("compiler/testData/codegen/box/initializers/correctOrder1.kt");
    }

    @TestMetadata("correctOrder2.kt")
    public void testCorrectOrder2() {
      runTest("compiler/testData/codegen/box/initializers/correctOrder2.kt");
    }

    @TestMetadata("initializers0.kt")
    public void testInitializers0() {
      runTest("compiler/testData/codegen/box/initializers/initializers0.kt");
    }

    @TestMetadata("initializers1.kt")
    public void testInitializers1() {
      runTest("compiler/testData/codegen/box/initializers/initializers1.kt");
    }

    @TestMetadata("initializers2.kt")
    public void testInitializers2() {
      runTest("compiler/testData/codegen/box/initializers/initializers2.kt");
    }

    @TestMetadata("initializers3.kt")
    public void testInitializers3() {
      runTest("compiler/testData/codegen/box/initializers/initializers3.kt");
    }

    @TestMetadata("initializers4.kt")
    public void testInitializers4() {
      runTest("compiler/testData/codegen/box/initializers/initializers4.kt");
    }

    @TestMetadata("initializers5.kt")
    public void testInitializers5() {
      runTest("compiler/testData/codegen/box/initializers/initializers5.kt");
    }

    @TestMetadata("initializers7.kt")
    public void testInitializers7() {
      runTest("compiler/testData/codegen/box/initializers/initializers7.kt");
    }

    @TestMetadata("initializers8.kt")
    public void testInitializers8() {
      runTest("compiler/testData/codegen/box/initializers/initializers8.kt");
    }

    @TestMetadata("multipleModules1.kt")
    public void testMultipleModules1() {
      runTest("compiler/testData/codegen/box/initializers/multipleModules1.kt");
    }

    @TestMetadata("object.kt")
    public void testObject() {
      runTest("compiler/testData/codegen/box/initializers/object.kt");
    }

    @TestMetadata("sharedVarInInitBlock.kt")
    public void testSharedVarInInitBlock() {
      runTest("compiler/testData/codegen/box/initializers/sharedVarInInitBlock.kt");
    }

    @TestMetadata("static_arrays.kt")
    public void testStatic_arrays() {
      runTest("compiler/testData/codegen/box/initializers/static_arrays.kt");
    }

    @TestMetadata("static_list.kt")
    public void testStatic_list() {
      runTest("compiler/testData/codegen/box/initializers/static_list.kt");
    }

    @TestMetadata("static_smallIntIdentity.kt")
    public void testStatic_smallIntIdentity() {
      runTest("compiler/testData/codegen/box/initializers/static_smallIntIdentity.kt");
    }

    @TestMetadata("static_varargChange.kt")
    public void testStatic_varargChange() {
      runTest("compiler/testData/codegen/box/initializers/static_varargChange.kt");
    }

    @TestMetadata("throw1.kt")
    public void testThrow1() {
      runTest("compiler/testData/codegen/box/initializers/throw1.kt");
    }

    @TestMetadata("throw2.kt")
    public void testThrow2() {
      runTest("compiler/testData/codegen/box/initializers/throw2.kt");
    }

    @TestMetadata("compiler/testData/codegen/box/initializers/files")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Files extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInFiles() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/initializers/files"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("globalInitedAfterAccessingFile.kt")
      public void testGlobalInitedAfterAccessingFile() {
        runTest("compiler/testData/codegen/box/initializers/files/globalInitedAfterAccessingFile.kt");
      }

      @TestMetadata("globalNotInitedAfterAccessingClassInternals.kt")
      public void testGlobalNotInitedAfterAccessingClassInternals() {
        runTest("compiler/testData/codegen/box/initializers/files/globalNotInitedAfterAccessingClassInternals.kt");
      }

      @TestMetadata("simple.kt")
      public void testSimple() {
        runTest("compiler/testData/codegen/box/initializers/files/simple.kt");
      }

      @TestMetadata("simpleMultiModule.kt")
      public void testSimpleMultiModule() {
        runTest("compiler/testData/codegen/box/initializers/files/simpleMultiModule.kt");
      }
    }
  }

  @TestMetadata("compiler/testData/codegen/box/inline")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Inline extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInInline() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inline"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("changingCapturedLocal.kt")
    public void testChangingCapturedLocal() {
      runTest("compiler/testData/codegen/box/inline/changingCapturedLocal.kt");
    }

    @TestMetadata("classDeclarationInsideInline.kt")
    public void testClassDeclarationInsideInline() {
      runTest("compiler/testData/codegen/box/inline/classDeclarationInsideInline.kt");
    }

    @TestMetadata("coercionToUnit.kt")
    public void testCoercionToUnit() {
      runTest("compiler/testData/codegen/box/inline/coercionToUnit.kt");
    }

    @TestMetadata("correctOrderFunctionReference.kt")
    public void testCorrectOrderFunctionReference() {
      runTest("compiler/testData/codegen/box/inline/correctOrderFunctionReference.kt");
    }

    @TestMetadata("defaultArgs.kt")
    public void testDefaultArgs() {
      runTest("compiler/testData/codegen/box/inline/defaultArgs.kt");
    }

    @TestMetadata("defaultArgsMultipleModules.kt")
    public void testDefaultArgsMultipleModules() {
      runTest("compiler/testData/codegen/box/inline/defaultArgsMultipleModules.kt");
    }

    @TestMetadata("genericFunctionReference.kt")
    public void testGenericFunctionReference() {
      runTest("compiler/testData/codegen/box/inline/genericFunctionReference.kt");
    }

    @TestMetadata("getClass.kt")
    public void testGetClass() {
      runTest("compiler/testData/codegen/box/inline/getClass.kt");
    }

    @TestMetadata("inline0.kt")
    public void testInline0() {
      runTest("compiler/testData/codegen/box/inline/inline0.kt");
    }

    @TestMetadata("inline1.kt")
    public void testInline1() {
      runTest("compiler/testData/codegen/box/inline/inline1.kt");
    }

    @TestMetadata("inline10.kt")
    public void testInline10() {
      runTest("compiler/testData/codegen/box/inline/inline10.kt");
    }

    @TestMetadata("inline11.kt")
    public void testInline11() {
      runTest("compiler/testData/codegen/box/inline/inline11.kt");
    }

    @TestMetadata("inline12.kt")
    public void testInline12() {
      runTest("compiler/testData/codegen/box/inline/inline12.kt");
    }

    @TestMetadata("inline13.kt")
    public void testInline13() {
      runTest("compiler/testData/codegen/box/inline/inline13.kt");
    }

    @TestMetadata("inline14.kt")
    public void testInline14() {
      runTest("compiler/testData/codegen/box/inline/inline14.kt");
    }

    @TestMetadata("inline15.kt")
    public void testInline15() {
      runTest("compiler/testData/codegen/box/inline/inline15.kt");
    }

    @TestMetadata("inline16.kt")
    public void testInline16() {
      runTest("compiler/testData/codegen/box/inline/inline16.kt");
    }

    @TestMetadata("inline17.kt")
    public void testInline17() {
      runTest("compiler/testData/codegen/box/inline/inline17.kt");
    }

    @TestMetadata("inline19.kt")
    public void testInline19() {
      runTest("compiler/testData/codegen/box/inline/inline19.kt");
    }

    @TestMetadata("inline2.kt")
    public void testInline2() {
      runTest("compiler/testData/codegen/box/inline/inline2.kt");
    }

    @TestMetadata("inline20.kt")
    public void testInline20() {
      runTest("compiler/testData/codegen/box/inline/inline20.kt");
    }

    @TestMetadata("inline21.kt")
    public void testInline21() {
      runTest("compiler/testData/codegen/box/inline/inline21.kt");
    }

    @TestMetadata("inline22.kt")
    public void testInline22() {
      runTest("compiler/testData/codegen/box/inline/inline22.kt");
    }

    @TestMetadata("inline23.kt")
    public void testInline23() {
      runTest("compiler/testData/codegen/box/inline/inline23.kt");
    }

    @TestMetadata("inline24.kt")
    public void testInline24() {
      runTest("compiler/testData/codegen/box/inline/inline24.kt");
    }

    @TestMetadata("inline25.kt")
    public void testInline25() {
      runTest("compiler/testData/codegen/box/inline/inline25.kt");
    }

    @TestMetadata("inline26.kt")
    public void testInline26() {
      runTest("compiler/testData/codegen/box/inline/inline26.kt");
    }

    @TestMetadata("inline3.kt")
    public void testInline3() {
      runTest("compiler/testData/codegen/box/inline/inline3.kt");
    }

    @TestMetadata("inline4.kt")
    public void testInline4() {
      runTest("compiler/testData/codegen/box/inline/inline4.kt");
    }

    @TestMetadata("inline5.kt")
    public void testInline5() {
      runTest("compiler/testData/codegen/box/inline/inline5.kt");
    }

    @TestMetadata("inline6.kt")
    public void testInline6() {
      runTest("compiler/testData/codegen/box/inline/inline6.kt");
    }

    @TestMetadata("inline7.kt")
    public void testInline7() {
      runTest("compiler/testData/codegen/box/inline/inline7.kt");
    }

    @TestMetadata("inline8.kt")
    public void testInline8() {
      runTest("compiler/testData/codegen/box/inline/inline8.kt");
    }

    @TestMetadata("inline9.kt")
    public void testInline9() {
      runTest("compiler/testData/codegen/box/inline/inline9.kt");
    }

    @TestMetadata("inlineCtor.kt")
    public void testInlineCtor() {
      runTest("compiler/testData/codegen/box/inline/inlineCtor.kt");
    }

    @TestMetadata("inlinedLambdaWithErasedParamType.kt")
    public void testInlinedLambdaWithErasedParamType() {
      runTest("compiler/testData/codegen/box/inline/inlinedLambdaWithErasedParamType.kt");
    }

    @TestMetadata("innerInlineFunCapturesOuter.kt")
    public void testInnerInlineFunCapturesOuter() {
      runTest("compiler/testData/codegen/box/inline/innerInlineFunCapturesOuter.kt");
    }

    @TestMetadata("kt66017.kt")
    public void testKt66017() {
      runTest("compiler/testData/codegen/box/inline/kt66017.kt");
    }

    @TestMetadata("kt66017_inlineFromTheSameModule.kt")
    public void testKt66017_inlineFromTheSameModule() {
      runTest("compiler/testData/codegen/box/inline/kt66017_inlineFromTheSameModule.kt");
    }

    @TestMetadata("lambdaAsAny.kt")
    public void testLambdaAsAny() {
      runTest("compiler/testData/codegen/box/inline/lambdaAsAny.kt");
    }

    @TestMetadata("lambdaInDefaultValue.kt")
    public void testLambdaInDefaultValue() {
      runTest("compiler/testData/codegen/box/inline/lambdaInDefaultValue.kt");
    }

    @TestMetadata("lateinitProperty.kt")
    public void testLateinitProperty() {
      runTest("compiler/testData/codegen/box/inline/lateinitProperty.kt");
    }

    @TestMetadata("LocalEntitiesInAnonymousObjectInInlineCallables.kt")
    public void testLocalEntitiesInAnonymousObjectInInlineCallables() {
      runTest("compiler/testData/codegen/box/inline/LocalEntitiesInAnonymousObjectInInlineCallables.kt");
    }

    @TestMetadata("localFunctionInInitializerBlock.kt")
    public void testLocalFunctionInInitializerBlock() {
      runTest("compiler/testData/codegen/box/inline/localFunctionInInitializerBlock.kt");
    }

    @TestMetadata("localObjectReturnedFromWhen.kt")
    public void testLocalObjectReturnedFromWhen() {
      runTest("compiler/testData/codegen/box/inline/localObjectReturnedFromWhen.kt");
    }

    @TestMetadata("propertyAccessorInline.kt")
    public void testPropertyAccessorInline() {
      runTest("compiler/testData/codegen/box/inline/propertyAccessorInline.kt");
    }

    @TestMetadata("redundantCoercionsCleaner.kt")
    public void testRedundantCoercionsCleaner() {
      runTest("compiler/testData/codegen/box/inline/redundantCoercionsCleaner.kt");
    }

    @TestMetadata("redundantCoercionsCleanerKT48876.kt")
    public void testRedundantCoercionsCleanerKT48876() {
      runTest("compiler/testData/codegen/box/inline/redundantCoercionsCleanerKT48876.kt");
    }

    @TestMetadata("redundantCoercionsCleanerKT49356.kt")
    public void testRedundantCoercionsCleanerKT49356() {
      runTest("compiler/testData/codegen/box/inline/redundantCoercionsCleanerKT49356.kt");
    }

    @TestMetadata("returnLocalClassFromBlock.kt")
    public void testReturnLocalClassFromBlock() {
      runTest("compiler/testData/codegen/box/inline/returnLocalClassFromBlock.kt");
    }

    @TestMetadata("sharedVar.kt")
    public void testSharedVar() {
      runTest("compiler/testData/codegen/box/inline/sharedVar.kt");
    }

    @TestMetadata("statementAsLastExprInBlock.kt")
    public void testStatementAsLastExprInBlock() {
      runTest("compiler/testData/codegen/box/inline/statementAsLastExprInBlock.kt");
    }

    @TestMetadata("twiceInlinedObject.kt")
    public void testTwiceInlinedObject() {
      runTest("compiler/testData/codegen/box/inline/twiceInlinedObject.kt");
    }

    @TestMetadata("typeSubstitutionInFakeOverride.kt")
    public void testTypeSubstitutionInFakeOverride() {
      runTest("compiler/testData/codegen/box/inline/typeSubstitutionInFakeOverride.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/inlineArgsInPlace")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class InlineArgsInPlace extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInInlineArgsInPlace() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inlineArgsInPlace"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("arrayDequeRemoveAll.kt")
    public void testArrayDequeRemoveAll() {
      runTest("compiler/testData/codegen/box/inlineArgsInPlace/arrayDequeRemoveAll.kt");
    }

    @TestMetadata("breakInArgumentExpression.kt")
    public void testBreakInArgumentExpression() {
      runTest("compiler/testData/codegen/box/inlineArgsInPlace/breakInArgumentExpression.kt");
    }

    @TestMetadata("continueInArgumentExpression.kt")
    public void testContinueInArgumentExpression() {
      runTest("compiler/testData/codegen/box/inlineArgsInPlace/continueInArgumentExpression.kt");
    }

    @TestMetadata("inlineCircularDedepency.kt")
    public void testInlineCircularDedepency() {
      runTest("compiler/testData/codegen/box/inlineArgsInPlace/inlineCircularDedepency.kt");
    }

    @TestMetadata("kotlinReflect.kt")
    public void testKotlinReflect() {
      runTest("compiler/testData/codegen/box/inlineArgsInPlace/kotlinReflect.kt");
    }

    @TestMetadata("kt49370.kt")
    public void testKt49370() {
      runTest("compiler/testData/codegen/box/inlineArgsInPlace/kt49370.kt");
    }

    @TestMetadata("kt49407.kt")
    public void testKt49407() {
      runTest("compiler/testData/codegen/box/inlineArgsInPlace/kt49407.kt");
    }

    @TestMetadata("mapSet.kt")
    public void testMapSet() {
      runTest("compiler/testData/codegen/box/inlineArgsInPlace/mapSet.kt");
    }

    @TestMetadata("mutableCollectionPlusAssign.kt")
    public void testMutableCollectionPlusAssign() {
      runTest("compiler/testData/codegen/box/inlineArgsInPlace/mutableCollectionPlusAssign.kt");
    }

    @TestMetadata("noinlineParameter.kt")
    public void testNoinlineParameter() {
      runTest("compiler/testData/codegen/box/inlineArgsInPlace/noinlineParameter.kt");
    }

    @TestMetadata("suspensionPointInsideArgument.kt")
    public void testSuspensionPointInsideArgument() {
      runTest("compiler/testData/codegen/box/inlineArgsInPlace/suspensionPointInsideArgument.kt");
    }

    @TestMetadata("withLogFile.kt")
    public void testWithLogFile() {
      runTest("compiler/testData/codegen/box/inlineArgsInPlace/withLogFile.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/inlineClass")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class InlineClass extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInInlineClass() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inlineClass"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("customEquals.kt")
    public void testCustomEquals() {
      runTest("compiler/testData/codegen/box/inlineClass/customEquals.kt");
    }

    @TestMetadata("defaultEquals.kt")
    public void testDefaultEquals() {
      runTest("compiler/testData/codegen/box/inlineClass/defaultEquals.kt");
    }

    @TestMetadata("nestedInlineClasses.kt")
    public void testNestedInlineClasses() {
      runTest("compiler/testData/codegen/box/inlineClass/nestedInlineClasses.kt");
    }

    @TestMetadata("secondaryConstructorWithGenerics.kt")
    public void testSecondaryConstructorWithGenerics() {
      runTest("compiler/testData/codegen/box/inlineClass/secondaryConstructorWithGenerics.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/inlineClasses")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class InlineClasses extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    private void runTest(String testDataFilePath, java.util.function.Function<String, String> transformer) {
      KotlinTestUtils.runTest(path -> doTestWithTransformer(path, transformer), TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInInlineClasses() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inlineClasses"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("annotatedMemberExtensionProperty.kt")
    public void testAnnotatedMemberExtensionProperty() {
      runTest("compiler/testData/codegen/box/inlineClasses/annotatedMemberExtensionProperty.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("annotatedMemberExtensionPropertyGeneric.kt")
    public void testAnnotatedMemberExtensionPropertyGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/annotatedMemberExtensionPropertyGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("anySuperCall.kt")
    public void testAnySuperCall() {
      runTest("compiler/testData/codegen/box/inlineClasses/anySuperCall.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("anySuperCallGeneric.kt")
    public void testAnySuperCallGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/anySuperCallGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("boundCallableReferencePassedToInlineFunction.kt")
    public void testBoundCallableReferencePassedToInlineFunction() {
      runTest("compiler/testData/codegen/box/inlineClasses/boundCallableReferencePassedToInlineFunction.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("boundCallableReferencePassedToInlineFunctionGeneric.kt")
    public void testBoundCallableReferencePassedToInlineFunctionGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/boundCallableReferencePassedToInlineFunctionGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("boundCallableReferencePassedToInlineFunctionGeneric2.kt")
    public void testBoundCallableReferencePassedToInlineFunctionGeneric2() {
      runTest("compiler/testData/codegen/box/inlineClasses/boundCallableReferencePassedToInlineFunctionGeneric2.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("boxImplDoesNotExecuteInSecondaryConstructor.kt")
    public void testBoxImplDoesNotExecuteInSecondaryConstructor() {
      runTest("compiler/testData/codegen/box/inlineClasses/boxImplDoesNotExecuteInSecondaryConstructor.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("boxImplDoesNotExecuteInSecondaryConstructorGeneric.kt")
    public void testBoxImplDoesNotExecuteInSecondaryConstructorGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/boxImplDoesNotExecuteInSecondaryConstructorGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("boxImplDoesNotExecuteInitBlock.kt")
    public void testBoxImplDoesNotExecuteInitBlock() {
      runTest("compiler/testData/codegen/box/inlineClasses/boxImplDoesNotExecuteInitBlock.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("boxImplDoesNotExecuteInitBlockGeneric.kt")
    public void testBoxImplDoesNotExecuteInitBlockGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/boxImplDoesNotExecuteInitBlockGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("boxNullableForFakeOverride.kt")
    public void testBoxNullableForFakeOverride() {
      runTest("compiler/testData/codegen/box/inlineClasses/boxNullableForFakeOverride.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("boxNullableForFakeOverrideGeneric.kt")
    public void testBoxNullableForFakeOverrideGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/boxNullableForFakeOverrideGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("boxNullableForFakeOverrideGeneric2.kt")
    public void testBoxNullableForFakeOverrideGeneric2() {
      runTest("compiler/testData/codegen/box/inlineClasses/boxNullableForFakeOverrideGeneric2.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("boxNullableValueOfInlineClassWithNonNullUnderlyingType.kt")
    public void testBoxNullableValueOfInlineClassWithNonNullUnderlyingType() {
      runTest("compiler/testData/codegen/box/inlineClasses/boxNullableValueOfInlineClassWithNonNullUnderlyingType.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("boxNullableValueOfInlineClassWithNonNullUnderlyingTypeGeneric.kt")
    public void testBoxNullableValueOfInlineClassWithNonNullUnderlyingTypeGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/boxNullableValueOfInlineClassWithNonNullUnderlyingTypeGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("boxNullableValueOfInlineClassWithNonNullUnderlyingTypeGeneric2.kt")
    public void testBoxNullableValueOfInlineClassWithNonNullUnderlyingTypeGeneric2() {
      runTest("compiler/testData/codegen/box/inlineClasses/boxNullableValueOfInlineClassWithNonNullUnderlyingTypeGeneric2.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("boxNullableValueOfInlineClassWithPrimitiveUnderlyingType.kt")
    public void testBoxNullableValueOfInlineClassWithPrimitiveUnderlyingType() {
      runTest("compiler/testData/codegen/box/inlineClasses/boxNullableValueOfInlineClassWithPrimitiveUnderlyingType.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("boxNullableValueOfInlineClassWithPrimitiveUnderlyingTypeGeneric.kt")
    public void testBoxNullableValueOfInlineClassWithPrimitiveUnderlyingTypeGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/boxNullableValueOfInlineClassWithPrimitiveUnderlyingTypeGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("boxNullableValueOfInlineClassWithPrimitiveUnderlyingTypeGeneric2.kt")
    public void testBoxNullableValueOfInlineClassWithPrimitiveUnderlyingTypeGeneric2() {
      runTest("compiler/testData/codegen/box/inlineClasses/boxNullableValueOfInlineClassWithPrimitiveUnderlyingTypeGeneric2.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("boxResultInlineClassOfConstructorCall.kt")
    public void testBoxResultInlineClassOfConstructorCall() {
      runTest("compiler/testData/codegen/box/inlineClasses/boxResultInlineClassOfConstructorCall.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("boxResultInlineClassOfConstructorCallGeneric.kt")
    public void testBoxResultInlineClassOfConstructorCallGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/boxResultInlineClassOfConstructorCallGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("boxResultInlineClassOfConstructorCallGeneric2.kt")
    public void testBoxResultInlineClassOfConstructorCallGeneric2() {
      runTest("compiler/testData/codegen/box/inlineClasses/boxResultInlineClassOfConstructorCallGeneric2.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("boxUnboxInlineClassesWithOperatorsGetSet.kt")
    public void testBoxUnboxInlineClassesWithOperatorsGetSet() {
      runTest("compiler/testData/codegen/box/inlineClasses/boxUnboxInlineClassesWithOperatorsGetSet.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("boxUnboxInlineClassesWithOperatorsGetSetGeneric.kt")
    public void testBoxUnboxInlineClassesWithOperatorsGetSetGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/boxUnboxInlineClassesWithOperatorsGetSetGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("boxUnboxOfInlineClassForCapturedVars.kt")
    public void testBoxUnboxOfInlineClassForCapturedVars() {
      runTest("compiler/testData/codegen/box/inlineClasses/boxUnboxOfInlineClassForCapturedVars.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("boxUnboxOfInlineClassForCapturedVarsGeneric.kt")
    public void testBoxUnboxOfInlineClassForCapturedVarsGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/boxUnboxOfInlineClassForCapturedVarsGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("bridgeForFunctionReturningInlineClass.kt")
    public void testBridgeForFunctionReturningInlineClass() {
      runTest("compiler/testData/codegen/box/inlineClasses/bridgeForFunctionReturningInlineClass.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("bridgeForFunctionReturningInlineClassGeneric.kt")
    public void testBridgeForFunctionReturningInlineClassGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/bridgeForFunctionReturningInlineClassGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("bridgeGenerationWithInlineClassOverAny.kt")
    public void testBridgeGenerationWithInlineClassOverAny() {
      runTest("compiler/testData/codegen/box/inlineClasses/bridgeGenerationWithInlineClassOverAny.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("bridgeGenerationWithInlineClassOverAnyGeneric.kt")
    public void testBridgeGenerationWithInlineClassOverAnyGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/bridgeGenerationWithInlineClassOverAnyGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("bridgeGenerationWithInlineClassOverAnyGeneric2.kt")
    public void testBridgeGenerationWithInlineClassOverAnyGeneric2() {
      runTest("compiler/testData/codegen/box/inlineClasses/bridgeGenerationWithInlineClassOverAnyGeneric2.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("bridgesWhenInlineClassImplementsGenericInterface.kt")
    public void testBridgesWhenInlineClassImplementsGenericInterface() {
      runTest("compiler/testData/codegen/box/inlineClasses/bridgesWhenInlineClassImplementsGenericInterface.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("bridgesWhenInlineClassImplementsGenericInterfaceGeneric.kt")
    public void testBridgesWhenInlineClassImplementsGenericInterfaceGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/bridgesWhenInlineClassImplementsGenericInterfaceGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("callComputablePropertyInsideInlineClass.kt")
    public void testCallComputablePropertyInsideInlineClass() {
      runTest("compiler/testData/codegen/box/inlineClasses/callComputablePropertyInsideInlineClass.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("callSpecializedEqualsViaReflection.kt")
    public void testCallSpecializedEqualsViaReflection() {
      runTest("compiler/testData/codegen/box/inlineClasses/callSpecializedEqualsViaReflection.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("callSpecializedEqualsViaReflectionGeneric.kt")
    public void testCallSpecializedEqualsViaReflectionGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/callSpecializedEqualsViaReflectionGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("callSpeciallyOverriddenPropertyOfInlineClass.kt")
    public void testCallSpeciallyOverriddenPropertyOfInlineClass() {
      runTest("compiler/testData/codegen/box/inlineClasses/callSpeciallyOverriddenPropertyOfInlineClass.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("callSpeciallyOverriddenPropertyOfInlineClassGeneric.kt")
    public void testCallSpeciallyOverriddenPropertyOfInlineClassGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/callSpeciallyOverriddenPropertyOfInlineClassGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("callableReferencesWithInlineClasses.kt")
    public void testCallableReferencesWithInlineClasses() {
      runTest("compiler/testData/codegen/box/inlineClasses/callableReferencesWithInlineClasses.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("callableReferencesWithInlineClassesGeneric.kt")
    public void testCallableReferencesWithInlineClassesGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/callableReferencesWithInlineClassesGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("castInsideWhenExpression.kt")
    public void testCastInsideWhenExpression() {
      runTest("compiler/testData/codegen/box/inlineClasses/castInsideWhenExpression.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("castInsideWhenExpressionGeneric.kt")
    public void testCastInsideWhenExpressionGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/castInsideWhenExpressionGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("checkBoxUnboxOfArgumentsOnInlinedFunctions.kt")
    public void testCheckBoxUnboxOfArgumentsOnInlinedFunctions() {
      runTest("compiler/testData/codegen/box/inlineClasses/checkBoxUnboxOfArgumentsOnInlinedFunctions.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("checkBoxUnboxOfArgumentsOnInlinedFunctionsGeneric.kt")
    public void testCheckBoxUnboxOfArgumentsOnInlinedFunctionsGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/checkBoxUnboxOfArgumentsOnInlinedFunctionsGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("checkBoxingAfterAssertionOperator.kt")
    public void testCheckBoxingAfterAssertionOperator() {
      runTest("compiler/testData/codegen/box/inlineClasses/checkBoxingAfterAssertionOperator.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("checkBoxingAfterAssertionOperatorGeneric.kt")
    public void testCheckBoxingAfterAssertionOperatorGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/checkBoxingAfterAssertionOperatorGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("checkBoxingForComplexClassHierarchy.kt")
    public void testCheckBoxingForComplexClassHierarchy() {
      runTest("compiler/testData/codegen/box/inlineClasses/checkBoxingForComplexClassHierarchy.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("checkBoxingForComplexClassHierarchyGeneric.kt")
    public void testCheckBoxingForComplexClassHierarchyGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/checkBoxingForComplexClassHierarchyGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("checkBoxingForNonLocalAndLabeledReturns.kt")
    public void testCheckBoxingForNonLocalAndLabeledReturns() {
      runTest("compiler/testData/codegen/box/inlineClasses/checkBoxingForNonLocalAndLabeledReturns.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("checkBoxingForNonLocalAndLabeledReturnsGeneric.kt")
    public void testCheckBoxingForNonLocalAndLabeledReturnsGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/checkBoxingForNonLocalAndLabeledReturnsGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("checkBoxingFromReturnTypeForInlineClasses.kt")
    public void testCheckBoxingFromReturnTypeForInlineClasses() {
      runTest("compiler/testData/codegen/box/inlineClasses/checkBoxingFromReturnTypeForInlineClasses.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("checkBoxingFromReturnTypeForInlineClassesGeneric.kt")
    public void testCheckBoxingFromReturnTypeForInlineClassesGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/checkBoxingFromReturnTypeForInlineClassesGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("checkBoxingOnFunctionCalls.kt")
    public void testCheckBoxingOnFunctionCalls() {
      runTest("compiler/testData/codegen/box/inlineClasses/checkBoxingOnFunctionCalls.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("checkBoxingOnFunctionCallsGeneric.kt")
    public void testCheckBoxingOnFunctionCallsGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/checkBoxingOnFunctionCallsGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("checkBoxingOnLocalVariableAssignments.kt")
    public void testCheckBoxingOnLocalVariableAssignments() {
      runTest("compiler/testData/codegen/box/inlineClasses/checkBoxingOnLocalVariableAssignments.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("checkBoxingOnLocalVariableAssignmentsGeneric.kt")
    public void testCheckBoxingOnLocalVariableAssignmentsGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/checkBoxingOnLocalVariableAssignmentsGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("checkBoxingUnboxingForInheritedTypeSpecializedFunctions.kt")
    public void testCheckBoxingUnboxingForInheritedTypeSpecializedFunctions() {
      runTest("compiler/testData/codegen/box/inlineClasses/checkBoxingUnboxingForInheritedTypeSpecializedFunctions.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("checkBoxingUnboxingForInheritedTypeSpecializedFunctionsGeneric.kt")
    public void testCheckBoxingUnboxingForInheritedTypeSpecializedFunctionsGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/checkBoxingUnboxingForInheritedTypeSpecializedFunctionsGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("checkCallingMembersInsideInlineClass.kt")
    public void testCheckCallingMembersInsideInlineClass() {
      runTest("compiler/testData/codegen/box/inlineClasses/checkCallingMembersInsideInlineClass.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("checkCallingMembersInsideInlineClassGeneric.kt")
    public void testCheckCallingMembersInsideInlineClassGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/checkCallingMembersInsideInlineClassGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("checkCastToInlineClass.kt")
    public void testCheckCastToInlineClass() {
      runTest("compiler/testData/codegen/box/inlineClasses/checkCastToInlineClass.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("checkCastToInlineClassGeneric.kt")
    public void testCheckCastToInlineClassGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/checkCastToInlineClassGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("checkForInstanceOfInlineClass.kt")
    public void testCheckForInstanceOfInlineClass() {
      runTest("compiler/testData/codegen/box/inlineClasses/checkForInstanceOfInlineClass.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("checkForInstanceOfInlineClassGeneric.kt")
    public void testCheckForInstanceOfInlineClassGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/checkForInstanceOfInlineClassGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("checkLambdaWithInlineClassesInFunctionalType.kt")
    public void testCheckLambdaWithInlineClassesInFunctionalType() {
      runTest("compiler/testData/codegen/box/inlineClasses/checkLambdaWithInlineClassesInFunctionalType.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("checkLambdaWithInlineClassesInFunctionalTypeGeneric.kt")
    public void testCheckLambdaWithInlineClassesInFunctionalTypeGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/checkLambdaWithInlineClassesInFunctionalTypeGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("checkUnboxingResultFromTypeVariable.kt")
    public void testCheckUnboxingResultFromTypeVariable() {
      runTest("compiler/testData/codegen/box/inlineClasses/checkUnboxingResultFromTypeVariable.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("checkUnboxingResultFromTypeVariableGeneric.kt")
    public void testCheckUnboxingResultFromTypeVariableGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/checkUnboxingResultFromTypeVariableGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("checkUnboxingResultFromTypeVariableGeneric2.kt")
    public void testCheckUnboxingResultFromTypeVariableGeneric2() {
      runTest("compiler/testData/codegen/box/inlineClasses/checkUnboxingResultFromTypeVariableGeneric2.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("classInInlineClassInit.kt")
    public void testClassInInlineClassInit() {
      runTest("compiler/testData/codegen/box/inlineClasses/classInInlineClassInit.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("classInInlineClassInitGeneric.kt")
    public void testClassInInlineClassInitGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/classInInlineClassInitGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("classLiteralOnInlineClass.kt")
    public void testClassLiteralOnInlineClass() {
      runTest("compiler/testData/codegen/box/inlineClasses/classLiteralOnInlineClass.kt");
    }

    @TestMetadata("classLiteralOnInlineClassGeneric.kt")
    public void testClassLiteralOnInlineClassGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/classLiteralOnInlineClassGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("computablePropertyInsideInlineClass.kt")
    public void testComputablePropertyInsideInlineClass() {
      runTest("compiler/testData/codegen/box/inlineClasses/computablePropertyInsideInlineClass.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("conformToComparableAndCallInterfaceMethod.kt")
    public void testConformToComparableAndCallInterfaceMethod() {
      runTest("compiler/testData/codegen/box/inlineClasses/conformToComparableAndCallInterfaceMethod.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("conformToComparableAndCallInterfaceMethodGeneric.kt")
    public void testConformToComparableAndCallInterfaceMethodGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/conformToComparableAndCallInterfaceMethodGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("constructorCallableReference.kt")
    public void testConstructorCallableReference() {
      runTest("compiler/testData/codegen/box/inlineClasses/constructorCallableReference.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("constructorCallableReferenceGeneric.kt")
    public void testConstructorCallableReferenceGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/constructorCallableReferenceGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("constructorImplVisibility.kt")
    public void testConstructorImplVisibility() {
      runTest("compiler/testData/codegen/box/inlineClasses/constructorImplVisibility.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("constructorImplVisibilityGeneric.kt")
    public void testConstructorImplVisibilityGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/constructorImplVisibilityGeneric.kt");
    }

    @TestMetadata("correctBoxingForBranchExpressions.kt")
    public void testCorrectBoxingForBranchExpressions() {
      runTest("compiler/testData/codegen/box/inlineClasses/correctBoxingForBranchExpressions.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("correctBoxingForBranchExpressionsGeneric.kt")
    public void testCorrectBoxingForBranchExpressionsGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/correctBoxingForBranchExpressionsGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("createInlineClassInArgumentPosition.kt")
    public void testCreateInlineClassInArgumentPosition() {
      runTest("compiler/testData/codegen/box/inlineClasses/createInlineClassInArgumentPosition.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("createInlineClassInArgumentPositionGeneric.kt")
    public void testCreateInlineClassInArgumentPositionGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/createInlineClassInArgumentPositionGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("crossinlineWithInlineClassInParameter.kt")
    public void testCrossinlineWithInlineClassInParameter() {
      runTest("compiler/testData/codegen/box/inlineClasses/crossinlineWithInlineClassInParameter.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("crossinlineWithInlineClassInParameterGeneric.kt")
    public void testCrossinlineWithInlineClassInParameterGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/crossinlineWithInlineClassInParameterGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("crossinlineWithInlineClassInParameterGeneric2.kt")
    public void testCrossinlineWithInlineClassInParameterGeneric2() {
      runTest("compiler/testData/codegen/box/inlineClasses/crossinlineWithInlineClassInParameterGeneric2.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("customIterator.kt")
    public void testCustomIterator() {
      runTest("compiler/testData/codegen/box/inlineClasses/customIterator.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("defaultFunctionsFromAnyForInlineClass.kt")
    public void testDefaultFunctionsFromAnyForInlineClass() {
      runTest("compiler/testData/codegen/box/inlineClasses/defaultFunctionsFromAnyForInlineClass.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("defaultFunctionsFromAnyForInlineClassGeneric.kt")
    public void testDefaultFunctionsFromAnyForInlineClassGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/defaultFunctionsFromAnyForInlineClassGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("defaultInterfaceMethodsInInlineClass.kt")
    public void testDefaultInterfaceMethodsInInlineClass() {
      runTest("compiler/testData/codegen/box/inlineClasses/defaultInterfaceMethodsInInlineClass.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("defaultInterfaceMethodsInInlineClassGeneric.kt")
    public void testDefaultInterfaceMethodsInInlineClassGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/defaultInterfaceMethodsInInlineClassGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("defaultWithInlineClassArgument.kt")
    public void testDefaultWithInlineClassArgument() {
      runTest("compiler/testData/codegen/box/inlineClasses/defaultWithInlineClassArgument.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("defaultWithInlineClassArgumentGeneric.kt")
    public void testDefaultWithInlineClassArgumentGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/defaultWithInlineClassArgumentGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("delegateFromDifferentPackage.kt")
    public void testDelegateFromDifferentPackage() {
      runTest("compiler/testData/codegen/box/inlineClasses/delegateFromDifferentPackage.kt");
    }

    @TestMetadata("dnnInValue.kt")
    public void testDnnInValue() {
      runTest("compiler/testData/codegen/box/inlineClasses/dnnInValue.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("elvisWithInlineClassAndNullConstant.kt")
    public void testElvisWithInlineClassAndNullConstant() {
      runTest("compiler/testData/codegen/box/inlineClasses/elvisWithInlineClassAndNullConstant.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("elvisWithInlineClassAndNullConstantGeneric.kt")
    public void testElvisWithInlineClassAndNullConstantGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/elvisWithInlineClassAndNullConstantGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("emptyConstructorForInlineClass.kt")
    public void testEmptyConstructorForInlineClass() {
      runTest("compiler/testData/codegen/box/inlineClasses/emptyConstructorForInlineClass.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("emptyConstructorForInlineClassGeneric.kt")
    public void testEmptyConstructorForInlineClassGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/emptyConstructorForInlineClassGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("equalityChecksInlineClassNonNull.kt")
    public void testEqualityChecksInlineClassNonNull() {
      runTest("compiler/testData/codegen/box/inlineClasses/equalityChecksInlineClassNonNull.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("equalityChecksInlineClassNonNullGeneric.kt")
    public void testEqualityChecksInlineClassNonNullGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/equalityChecksInlineClassNonNullGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("equalityChecksMixedNullability.kt")
    public void testEqualityChecksMixedNullability() {
      runTest("compiler/testData/codegen/box/inlineClasses/equalityChecksMixedNullability.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("equalityChecksMixedNullabilityGeneric.kt")
    public void testEqualityChecksMixedNullabilityGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/equalityChecksMixedNullabilityGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("equalityChecksNegatedInlineClassNonNull.kt")
    public void testEqualityChecksNegatedInlineClassNonNull() {
      runTest("compiler/testData/codegen/box/inlineClasses/equalityChecksNegatedInlineClassNonNull.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("equalityChecksNegatedInlineClassNonNullGeneric.kt")
    public void testEqualityChecksNegatedInlineClassNonNullGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/equalityChecksNegatedInlineClassNonNullGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("equalityChecksNegatedNonNull.kt")
    public void testEqualityChecksNegatedNonNull() {
      runTest("compiler/testData/codegen/box/inlineClasses/equalityChecksNegatedNonNull.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("equalityChecksNegatedNonNullGeneric.kt")
    public void testEqualityChecksNegatedNonNullGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/equalityChecksNegatedNonNullGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("equalityChecksNegatedNullable.kt")
    public void testEqualityChecksNegatedNullable() {
      runTest("compiler/testData/codegen/box/inlineClasses/equalityChecksNegatedNullable.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("equalityChecksNegatedNullableGeneric.kt")
    public void testEqualityChecksNegatedNullableGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/equalityChecksNegatedNullableGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("equalityChecksNegatedNullableGeneric2.kt")
    public void testEqualityChecksNegatedNullableGeneric2() {
      runTest("compiler/testData/codegen/box/inlineClasses/equalityChecksNegatedNullableGeneric2.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("equalityChecksNegatedPrimitive.kt")
    public void testEqualityChecksNegatedPrimitive() {
      runTest("compiler/testData/codegen/box/inlineClasses/equalityChecksNegatedPrimitive.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("equalityChecksNegatedPrimitiveGeneric.kt")
    public void testEqualityChecksNegatedPrimitiveGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/equalityChecksNegatedPrimitiveGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("equalityChecksNonNull.kt")
    public void testEqualityChecksNonNull() {
      runTest("compiler/testData/codegen/box/inlineClasses/equalityChecksNonNull.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("equalityChecksNonNullGeneric.kt")
    public void testEqualityChecksNonNullGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/equalityChecksNonNullGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("equalityChecksNullable.kt")
    public void testEqualityChecksNullable() {
      runTest("compiler/testData/codegen/box/inlineClasses/equalityChecksNullable.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("equalityChecksNullableGeneric.kt")
    public void testEqualityChecksNullableGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/equalityChecksNullableGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("equalityChecksNullableGeneric2.kt")
    public void testEqualityChecksNullableGeneric2() {
      runTest("compiler/testData/codegen/box/inlineClasses/equalityChecksNullableGeneric2.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("equalityChecksPrimitive.kt")
    public void testEqualityChecksPrimitive() {
      runTest("compiler/testData/codegen/box/inlineClasses/equalityChecksPrimitive.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("equalityChecksPrimitiveGeneric.kt")
    public void testEqualityChecksPrimitiveGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/equalityChecksPrimitiveGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("equalityChecksPrimitiveUnboxed.kt")
    public void testEqualityChecksPrimitiveUnboxed() {
      runTest("compiler/testData/codegen/box/inlineClasses/equalityChecksPrimitiveUnboxed.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("equalityForBoxesOfNullableValuesOfInlineClass.kt")
    public void testEqualityForBoxesOfNullableValuesOfInlineClass() {
      runTest("compiler/testData/codegen/box/inlineClasses/equalityForBoxesOfNullableValuesOfInlineClass.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("equalityForBoxesOfNullableValuesOfInlineClassGeneric.kt")
    public void testEqualityForBoxesOfNullableValuesOfInlineClassGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/equalityForBoxesOfNullableValuesOfInlineClassGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("equalityForIndyLambdaParameter.kt")
    public void testEqualityForIndyLambdaParameter() {
      runTest("compiler/testData/codegen/box/inlineClasses/equalityForIndyLambdaParameter.kt");
    }

    @TestMetadata("equalsCallsLeftArgument.kt")
    public void testEqualsCallsLeftArgument() {
      runTest("compiler/testData/codegen/box/inlineClasses/equalsCallsLeftArgument.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("equalsCallsLeftArgumentGeneric.kt")
    public void testEqualsCallsLeftArgumentGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/equalsCallsLeftArgumentGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("equalsEvaluationOrderInlineClass.kt")
    public void testEqualsEvaluationOrderInlineClass() {
      runTest("compiler/testData/codegen/box/inlineClasses/equalsEvaluationOrderInlineClass.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("equalsEvaluationOrderInlineClassGeneric.kt")
    public void testEqualsEvaluationOrderInlineClassGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/equalsEvaluationOrderInlineClassGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("equalsEvaluationOrderNonNull.kt")
    public void testEqualsEvaluationOrderNonNull() {
      runTest("compiler/testData/codegen/box/inlineClasses/equalsEvaluationOrderNonNull.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("equalsEvaluationOrderNonNullGeneric.kt")
    public void testEqualsEvaluationOrderNonNullGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/equalsEvaluationOrderNonNullGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("equalsEvaluationOrderNullable.kt")
    public void testEqualsEvaluationOrderNullable() {
      runTest("compiler/testData/codegen/box/inlineClasses/equalsEvaluationOrderNullable.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("equalsEvaluationOrderNullableGeneric.kt")
    public void testEqualsEvaluationOrderNullableGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/equalsEvaluationOrderNullableGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("equalsEvaluationOrderNullableGeneric2.kt")
    public void testEqualsEvaluationOrderNullableGeneric2() {
      runTest("compiler/testData/codegen/box/inlineClasses/equalsEvaluationOrderNullableGeneric2.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("equalsEvaluationOrderPrimitive.kt")
    public void testEqualsEvaluationOrderPrimitive() {
      runTest("compiler/testData/codegen/box/inlineClasses/equalsEvaluationOrderPrimitive.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("equalsEvaluationOrderPrimitiveGeneric.kt")
    public void testEqualsEvaluationOrderPrimitiveGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/equalsEvaluationOrderPrimitiveGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("equalsOperatorWithGenericCall.kt")
    public void testEqualsOperatorWithGenericCall() {
      runTest("compiler/testData/codegen/box/inlineClasses/equalsOperatorWithGenericCall.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("equalsOperatorWithGenericCallGeneric.kt")
    public void testEqualsOperatorWithGenericCallGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/equalsOperatorWithGenericCallGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("extLambdaInInlineClassFun.kt")
    public void testExtLambdaInInlineClassFun() {
      runTest("compiler/testData/codegen/box/inlineClasses/extLambdaInInlineClassFun.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("extLambdaInInlineClassFun2.kt")
    public void testExtLambdaInInlineClassFun2() {
      runTest("compiler/testData/codegen/box/inlineClasses/extLambdaInInlineClassFun2.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("extLambdaInInlineClassFun2Generic.kt")
    public void testExtLambdaInInlineClassFun2Generic() {
      runTest("compiler/testData/codegen/box/inlineClasses/extLambdaInInlineClassFun2Generic.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("extLambdaInInlineClassFunGeneric.kt")
    public void testExtLambdaInInlineClassFunGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/extLambdaInInlineClassFunGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("fieldNameClash.kt")
    public void testFieldNameClash() {
      runTest("compiler/testData/codegen/box/inlineClasses/fieldNameClash.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("fieldNameClashGeneric.kt")
    public void testFieldNameClashGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/fieldNameClashGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("funInterfaceDoubleSuffux.kt")
    public void testFunInterfaceDoubleSuffux() {
      runTest("compiler/testData/codegen/box/inlineClasses/funInterfaceDoubleSuffux.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("funInterfaceDoubleSuffux2.kt")
    public void testFunInterfaceDoubleSuffux2() {
      runTest("compiler/testData/codegen/box/inlineClasses/funInterfaceDoubleSuffux2.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("functionExpression.kt")
    public void testFunctionExpression() {
      runTest("compiler/testData/codegen/box/inlineClasses/functionExpression.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("functionExpressionGeneric.kt")
    public void testFunctionExpressionGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/functionExpressionGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("genericInlineClassSynthMembers.kt")
    public void testGenericInlineClassSynthMembers() {
      runTest("compiler/testData/codegen/box/inlineClasses/genericInlineClassSynthMembers.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("genericVararg2ndConstructor.kt")
    public void testGenericVararg2ndConstructor() {
      runTest("compiler/testData/codegen/box/inlineClasses/genericVararg2ndConstructor.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("implicitCastToNonValueClassType.kt")
    public void testImplicitCastToNonValueClassType() {
      runTest("compiler/testData/codegen/box/inlineClasses/implicitCastToNonValueClassType.kt");
    }

    @TestMetadata("infixCompareToOptimization.kt")
    public void testInfixCompareToOptimization() {
      runTest("compiler/testData/codegen/box/inlineClasses/infixCompareToOptimization.kt");
    }

    @TestMetadata("initBlock.kt")
    public void testInitBlock() {
      runTest("compiler/testData/codegen/box/inlineClasses/initBlock.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("initBlockGeneric.kt")
    public void testInitBlockGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/initBlockGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("initInCompanion.kt")
    public void testInitInCompanion() {
      runTest("compiler/testData/codegen/box/inlineClasses/initInCompanion.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("inlineClassAsLastExpressionInInLambda.kt")
    public void testInlineClassAsLastExpressionInInLambda() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineClassAsLastExpressionInInLambda.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("inlineClassAsLastExpressionInInLambdaGeneric.kt")
    public void testInlineClassAsLastExpressionInInLambdaGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineClassAsLastExpressionInInLambdaGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("inlineClassBothEqualsOverride.kt")
    public void testInlineClassBothEqualsOverride() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineClassBothEqualsOverride.kt");
    }

    @TestMetadata("inlineClassEqualityShouldUseTotalOrderForFloatingPointData.kt")
    public void testInlineClassEqualityShouldUseTotalOrderForFloatingPointData() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineClassEqualityShouldUseTotalOrderForFloatingPointData.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("inlineClassEqualityShouldUseTotalOrderForFloatingPointDataGeneric.kt")
    public void testInlineClassEqualityShouldUseTotalOrderForFloatingPointDataGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineClassEqualityShouldUseTotalOrderForFloatingPointDataGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("inlineClassEqualsConsistency.kt")
    public void testInlineClassEqualsConsistency() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineClassEqualsConsistency.kt");
    }

    @TestMetadata("inlineClassEqualsOverriddenForCollections.kt")
    public void testInlineClassEqualsOverriddenForCollections() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineClassEqualsOverriddenForCollections.kt");
    }

    @TestMetadata("inlineClassEqualsOverride.kt")
    public void testInlineClassEqualsOverride() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineClassEqualsOverride.kt");
    }

    @TestMetadata("inlineClassFieldHandling.kt")
    public void testInlineClassFieldHandling() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineClassFieldHandling.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("inlineClassFieldHandlingGeneric.kt")
    public void testInlineClassFieldHandlingGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineClassFieldHandlingGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("inlineClassFunctionInvoke.kt")
    public void testInlineClassFunctionInvoke() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineClassFunctionInvoke.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("inlineClassFunctionInvokeGeneric.kt")
    public void testInlineClassFunctionInvokeGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineClassFunctionInvokeGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("inlineClassHashCodeOverride.kt")
    public void testInlineClassHashCodeOverride() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineClassHashCodeOverride.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("inlineClassImplementsCollection.kt")
    public void testInlineClassImplementsCollection() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineClassImplementsCollection.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("inlineClassImplementsCollectionGeneric.kt")
    public void testInlineClassImplementsCollectionGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineClassImplementsCollectionGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("inlineClassImplementsJavaLangInterface.kt")
    public void testInlineClassImplementsJavaLangInterface() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineClassImplementsJavaLangInterface.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("inlineClassInInitBlock.kt")
    public void testInlineClassInInitBlock() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineClassInInitBlock.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("inlineClassInInitBlockGeneric.kt")
    public void testInlineClassInInitBlockGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineClassInInitBlockGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("inlineClassInStringTemplate.kt")
    public void testInlineClassInStringTemplate() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineClassInStringTemplate.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("inlineClassInStringTemplateGeneric.kt")
    public void testInlineClassInStringTemplateGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineClassInStringTemplateGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("inlineClassPropertyReferenceGetAndSet.kt")
    public void testInlineClassPropertyReferenceGetAndSet() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineClassPropertyReferenceGetAndSet.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("inlineClassPropertyReferenceGetAndSetGeneric.kt")
    public void testInlineClassPropertyReferenceGetAndSetGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineClassPropertyReferenceGetAndSetGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("inlineClassTypedEqualsGenerics.kt")
    public void testInlineClassTypedEqualsGenerics() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineClassTypedEqualsGenerics.kt");
    }

    @TestMetadata("inlineClassUntypedEqualsOverriden.kt")
    public void testInlineClassUntypedEqualsOverriden() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineClassUntypedEqualsOverriden.kt");
    }

    @TestMetadata("inlineClassValueCapturedInInlineLambda.kt")
    public void testInlineClassValueCapturedInInlineLambda() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineClassValueCapturedInInlineLambda.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("inlineClassValueCapturedInInlineLambdaGeneric.kt")
    public void testInlineClassValueCapturedInInlineLambdaGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineClassValueCapturedInInlineLambdaGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("inlineClassValueCapturedInNonInlineLambda.kt")
    public void testInlineClassValueCapturedInNonInlineLambda() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineClassValueCapturedInNonInlineLambda.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("inlineClassValueCapturedInNonInlineLambdaGeneric.kt")
    public void testInlineClassValueCapturedInNonInlineLambdaGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineClassValueCapturedInNonInlineLambdaGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("inlineClassValuesInsideStrings.kt")
    public void testInlineClassValuesInsideStrings() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineClassValuesInsideStrings.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("inlineClassValuesInsideStringsGeneric.kt")
    public void testInlineClassValuesInsideStringsGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineClassValuesInsideStringsGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("inlineClassWithCustomEquals.kt")
    public void testInlineClassWithCustomEquals() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineClassWithCustomEquals.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("inlineClassWithCustomEqualsGeneric.kt")
    public void testInlineClassWithCustomEqualsGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineClassWithCustomEqualsGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("inlineClassWithDefaultFunctionsFromAny.kt")
    public void testInlineClassWithDefaultFunctionsFromAny() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineClassWithDefaultFunctionsFromAny.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("inlineClassWithDefaultFunctionsFromAnyGeneric.kt")
    public void testInlineClassWithDefaultFunctionsFromAnyGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineClassWithDefaultFunctionsFromAnyGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("inlineClassesAsInlineFunParameters.kt")
    public void testInlineClassesAsInlineFunParameters() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineClassesAsInlineFunParameters.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("inlineClassesAsInlineFunParametersGeneric.kt")
    public void testInlineClassesAsInlineFunParametersGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineClassesAsInlineFunParametersGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("inlineClassesCheckCast.kt")
    public void testInlineClassesCheckCast() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineClassesCheckCast.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("inlineClassesCheckCastGeneric.kt")
    public void testInlineClassesCheckCastGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineClassesCheckCastGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("inlineClassesInInlineLambdaParameters.kt")
    public void testInlineClassesInInlineLambdaParameters() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineClassesInInlineLambdaParameters.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("inlineClassesInInlineLambdaParametersGeneric.kt")
    public void testInlineClassesInInlineLambdaParametersGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineClassesInInlineLambdaParametersGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("inlineClassesRefTypesInInlineLambdaParameters.kt")
    public void testInlineClassesRefTypesInInlineLambdaParameters() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineClassesRefTypesInInlineLambdaParameters.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("inlineClassesRefTypesInInlineLambdaParametersGeneric.kt")
    public void testInlineClassesRefTypesInInlineLambdaParametersGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineClassesRefTypesInInlineLambdaParametersGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("inlineExtLambdaInInlineClassFun.kt")
    public void testInlineExtLambdaInInlineClassFun() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineExtLambdaInInlineClassFun.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("inlineExtLambdaInInlineClassFun2.kt")
    public void testInlineExtLambdaInInlineClassFun2() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineExtLambdaInInlineClassFun2.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("inlineExtLambdaInInlineClassFun2Generic.kt")
    public void testInlineExtLambdaInInlineClassFun2Generic() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineExtLambdaInInlineClassFun2Generic.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("inlineExtLambdaInInlineClassFunGeneric.kt")
    public void testInlineExtLambdaInInlineClassFunGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineExtLambdaInInlineClassFunGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("inlineFunctionInsideInlineClass.kt")
    public void testInlineFunctionInsideInlineClass() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineFunctionInsideInlineClass.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("inlineFunctionInsideInlineClassGeneric.kt")
    public void testInlineFunctionInsideInlineClassGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineFunctionInsideInlineClassGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("inlineInCompanion.kt")
    public void testInlineInCompanion() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineInCompanion.kt");
    }

    @TestMetadata("inlineInCompanionGeneric.kt")
    public void testInlineInCompanionGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineInCompanionGeneric.kt");
    }

    @TestMetadata("inlineOverInlineWithCustomEquals.kt")
    public void testInlineOverInlineWithCustomEquals() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineOverInlineWithCustomEquals.kt");
    }

    @TestMetadata("inlineToString.kt")
    public void testInlineToString() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineToString.kt");
    }

    @TestMetadata("iterateOverArrayOfInlineClassValues.kt")
    public void testIterateOverArrayOfInlineClassValues() {
      runTest("compiler/testData/codegen/box/inlineClasses/iterateOverArrayOfInlineClassValues.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("iterateOverArrayOfInlineClassValuesGeneric.kt")
    public void testIterateOverArrayOfInlineClassValuesGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/iterateOverArrayOfInlineClassValuesGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("iterateOverListOfInlineClassValues.kt")
    public void testIterateOverListOfInlineClassValues() {
      runTest("compiler/testData/codegen/box/inlineClasses/iterateOverListOfInlineClassValues.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("iterateOverListOfInlineClassValuesGeneric.kt")
    public void testIterateOverListOfInlineClassValuesGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/iterateOverListOfInlineClassValuesGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("javaClassIntrinsicOnInlineClasses.kt")
    public void testJavaClassIntrinsicOnInlineClasses() {
      runTest("compiler/testData/codegen/box/inlineClasses/javaClassIntrinsicOnInlineClasses.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("javaClassIntrinsicOnInlineClassesGeneric.kt")
    public void testJavaClassIntrinsicOnInlineClassesGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/javaClassIntrinsicOnInlineClassesGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("javaPrimitiveTypeIC.kt")
    public void testJavaPrimitiveTypeIC() {
      runTest("compiler/testData/codegen/box/inlineClasses/javaPrimitiveTypeIC.kt");
    }

    @TestMetadata("javaPrimitiveTypeICGeneric.kt")
    public void testJavaPrimitiveTypeICGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/javaPrimitiveTypeICGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("jvmFieldInInlineClassCompanion.kt")
    public void testJvmFieldInInlineClassCompanion() {
      runTest("compiler/testData/codegen/box/inlineClasses/jvmFieldInInlineClassCompanion.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("jvmFieldInInlineClassCompanionGeneric.kt")
    public void testJvmFieldInInlineClassCompanionGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/jvmFieldInInlineClassCompanionGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("jvmInline.kt")
    public void testJvmInline() {
      runTest("compiler/testData/codegen/box/inlineClasses/jvmInline.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("jvmOverloadsOnTopLevelFunctionReturningInlineClassValue.kt")
    public void testJvmOverloadsOnTopLevelFunctionReturningInlineClassValue() {
      runTest("compiler/testData/codegen/box/inlineClasses/jvmOverloadsOnTopLevelFunctionReturningInlineClassValue.kt");
    }

    @TestMetadata("jvmOverloadsOnTopLevelFunctionReturningInlineClassValueGeneric.kt")
    public void testJvmOverloadsOnTopLevelFunctionReturningInlineClassValueGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/jvmOverloadsOnTopLevelFunctionReturningInlineClassValueGeneric.kt");
    }

    @TestMetadata("jvmStaticFunInInlineClassCompanion.kt")
    public void testJvmStaticFunInInlineClassCompanion() {
      runTest("compiler/testData/codegen/box/inlineClasses/jvmStaticFunInInlineClassCompanion.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("jvmStaticFunInInlineClassCompanionGeneric.kt")
    public void testJvmStaticFunInInlineClassCompanionGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/jvmStaticFunInInlineClassCompanionGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("jvmStaticPropertyAccessorInInlineClassCompanion.kt")
    public void testJvmStaticPropertyAccessorInInlineClassCompanion() {
      runTest("compiler/testData/codegen/box/inlineClasses/jvmStaticPropertyAccessorInInlineClassCompanion.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("jvmStaticPropertyAccessorInInlineClassCompanionGeneric.kt")
    public void testJvmStaticPropertyAccessorInInlineClassCompanionGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/jvmStaticPropertyAccessorInInlineClassCompanionGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("jvmStaticVarInInlineClassCompanion.kt")
    public void testJvmStaticVarInInlineClassCompanion() {
      runTest("compiler/testData/codegen/box/inlineClasses/jvmStaticVarInInlineClassCompanion.kt");
    }

    @TestMetadata("jvmStaticVarInInlineClassCompanionGeneric.kt")
    public void testJvmStaticVarInInlineClassCompanionGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/jvmStaticVarInInlineClassCompanionGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("kclassInAnnotation.kt")
    public void testKclassInAnnotation() {
      runTest("compiler/testData/codegen/box/inlineClasses/kclassInAnnotation.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("kclassInAnnotationGeneric.kt")
    public void testKclassInAnnotationGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/kclassInAnnotationGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("kt25246.kt")
    public void testKt25246() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt25246.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("kt25750.kt")
    public void testKt25750() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt25750.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("kt25750Generic.kt")
    public void testKt25750Generic() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt25750Generic.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("kt25771.kt")
    public void testKt25771() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt25771.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("kt26103.kt")
    public void testKt26103() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt26103.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("kt26103_contravariantUnderlyingType.kt")
    public void testKt26103_contravariantUnderlyingType() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt26103_contravariantUnderlyingType.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("kt26103_covariantUnderlyingType.kt")
    public void testKt26103_covariantUnderlyingType() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt26103_covariantUnderlyingType.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("kt26103_original.kt")
    public void testKt26103_original() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt26103_original.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("kt27096.kt")
    public void testKt27096() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt27096.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("kt27096Generic.kt")
    public void testKt27096Generic() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt27096Generic.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("kt27096_enum.kt")
    public void testKt27096_enum() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt27096_enum.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("kt27096_enumGeneric.kt")
    public void testKt27096_enumGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt27096_enumGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("kt27096_functional.kt")
    public void testKt27096_functional() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt27096_functional.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("kt27096_functionalGeneric.kt")
    public void testKt27096_functionalGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt27096_functionalGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("kt27096_innerClass.kt")
    public void testKt27096_innerClass() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt27096_innerClass.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("kt27096_nullablePrimitive.kt")
    public void testKt27096_nullablePrimitive() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt27096_nullablePrimitive.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("kt27096_nullablePrimitiveGeneric.kt")
    public void testKt27096_nullablePrimitiveGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt27096_nullablePrimitiveGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("kt27096_nullablePrimitiveGeneric2.kt")
    public void testKt27096_nullablePrimitiveGeneric2() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt27096_nullablePrimitiveGeneric2.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("kt27096_nullableReference.kt")
    public void testKt27096_nullableReference() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt27096_nullableReference.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("kt27096_nullableReferenceGeneric.kt")
    public void testKt27096_nullableReferenceGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt27096_nullableReferenceGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("kt27096_nullableReferenceGeneric2.kt")
    public void testKt27096_nullableReferenceGeneric2() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt27096_nullableReferenceGeneric2.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("kt27096_primitive.kt")
    public void testKt27096_primitive() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt27096_primitive.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("kt27096_primitiveGeneric.kt")
    public void testKt27096_primitiveGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt27096_primitiveGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("kt27096_reference.kt")
    public void testKt27096_reference() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt27096_reference.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("kt27096_referenceGeneric.kt")
    public void testKt27096_referenceGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt27096_referenceGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("kt27113.kt")
    public void testKt27113() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt27113.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("kt27113a.kt")
    public void testKt27113a() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt27113a.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("kt27113aGeneric.kt")
    public void testKt27113aGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt27113aGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("kt27132.kt")
    public void testKt27132() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt27132.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("kt27132Generic.kt")
    public void testKt27132Generic() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt27132Generic.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("kt27140.kt")
    public void testKt27140() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt27140.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("kt27140Generic.kt")
    public void testKt27140Generic() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt27140Generic.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("kt27705.kt")
    public void testKt27705() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt27705.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("kt27705Generic.kt")
    public void testKt27705Generic() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt27705Generic.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("kt27706.kt")
    public void testKt27706() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt27706.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("kt27706Generic.kt")
    public void testKt27706Generic() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt27706Generic.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("kt28405.kt")
    public void testKt28405() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt28405.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("kt28585.kt")
    public void testKt28585() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt28585.kt");
    }

    @TestMetadata("kt28879.kt")
    public void testKt28879() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt28879.kt");
    }

    @TestMetadata("kt28920_javaObjectType.kt")
    public void testKt28920_javaObjectType() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt28920_javaObjectType.kt");
    }

    @TestMetadata("kt28920_javaPrimitiveType.kt")
    public void testKt28920_javaPrimitiveType() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt28920_javaPrimitiveType.kt");
    }

    @TestMetadata("kt31994.kt")
    public void testKt31994() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt31994.kt");
    }

    @TestMetadata("kt32793.kt")
    public void testKt32793() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt32793.kt");
    }

    @TestMetadata("kt33119.kt")
    public void testKt33119() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt33119.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("kt33119Generic.kt")
    public void testKt33119Generic() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt33119Generic.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("kt34268.kt")
    public void testKt34268() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt34268.kt");
    }

    @TestMetadata("kt34902.kt")
    public void testKt34902() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt34902.kt");
    }

    @TestMetadata("kt37998.kt")
    public void testKt37998() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt37998.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("kt37998Generic.kt")
    public void testKt37998Generic() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt37998Generic.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("kt38680.kt")
    public void testKt38680() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt38680.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("kt38680Generic.kt")
    public void testKt38680Generic() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt38680Generic.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("kt38680a.kt")
    public void testKt38680a() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt38680a.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("kt38680aGeneric.kt")
    public void testKt38680aGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt38680aGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("kt38680b.kt")
    public void testKt38680b() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt38680b.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("kt38680bGeneric.kt")
    public void testKt38680bGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt38680bGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("kt44141.kt")
    public void testKt44141() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt44141.kt");
    }

    @TestMetadata("kt44701_jvmOverloads.kt")
    public void testKt44701_jvmOverloads() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt44701_jvmOverloads.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("kt44701_jvmOverloadsGeneric.kt")
    public void testKt44701_jvmOverloadsGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt44701_jvmOverloadsGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("kt44701_jvmOverloadsGeneric2.kt")
    public void testKt44701_jvmOverloadsGeneric2() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt44701_jvmOverloadsGeneric2.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("kt44867.kt")
    public void testKt44867() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt44867.kt");
    }

    @TestMetadata("kt44978.kt")
    public void testKt44978() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt44978.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("kt45084.kt")
    public void testKt45084() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt45084.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("kt45084Generic.kt")
    public void testKt45084Generic() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt45084Generic.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("kt45991.kt")
    public void testKt45991() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt45991.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("kt46554.kt")
    public void testKt46554() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt46554.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("kt46554Generic.kt")
    public void testKt46554Generic() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt46554Generic.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("kt47609.kt")
    public void testKt47609() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt47609.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("kt47762.kt")
    public void testKt47762() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt47762.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("kt47762Generic.kt")
    public void testKt47762Generic() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt47762Generic.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("kt47823.kt")
    public void testKt47823() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt47823.kt");
    }

    @TestMetadata("kt48993.kt")
    public void testKt48993() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt48993.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("kt48993Generic.kt")
    public void testKt48993Generic() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt48993Generic.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("kt50909.kt")
    public void testKt50909() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt50909.kt");
    }

    @TestMetadata("kt50974_resultMultiModule.kt")
    public void testKt50974_resultMultiModule() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt50974_resultMultiModule.kt");
    }

    @TestMetadata("kt51157.kt")
    public void testKt51157() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt51157.kt");
    }

    @TestMetadata("kt51254.kt")
    public void testKt51254() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt51254.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("kt51353.kt")
    public void testKt51353() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt51353.kt");
    }

    @TestMetadata("kt51672.kt")
    public void testKt51672() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt51672.kt");
    }

    @TestMetadata("kt52394.kt")
    public void testKt52394() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt52394.kt");
    }

    @TestMetadata("kt52913.kt")
    public void testKt52913() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt52913.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("kt54455.kt")
    public void testKt54455() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt54455.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("kt54536.kt")
    public void testKt54536() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt54536.kt");
    }

    @TestMetadata("kt54603.kt")
    public void testKt54603() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt54603.kt");
    }

    @TestMetadata("kt54656.kt")
    public void testKt54656() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt54656.kt");
    }

    @TestMetadata("kt57242.kt")
    public void testKt57242() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt57242.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("kt57261.kt")
    public void testKt57261() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt57261.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("kt57973.kt")
    public void testKt57973() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt57973.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("lateinitInlineClasses.kt")
    public void testLateinitInlineClasses() {
      runTest("compiler/testData/codegen/box/inlineClasses/lateinitInlineClasses.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("mangledDefaultParameterFunction.kt")
    public void testMangledDefaultParameterFunction() {
      runTest("compiler/testData/codegen/box/inlineClasses/mangledDefaultParameterFunction.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("mangledDefaultParameterFunctionGeneric.kt")
    public void testMangledDefaultParameterFunctionGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/mangledDefaultParameterFunctionGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("mangledSuperCalls.kt")
    public void testMangledSuperCalls() {
      runTest("compiler/testData/codegen/box/inlineClasses/mangledSuperCalls.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("mangledSuperCallsGeneric.kt")
    public void testMangledSuperCallsGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/mangledSuperCallsGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("mapInlineClassesWithSuppressWildcardsMode.kt")
    public void testMapInlineClassesWithSuppressWildcardsMode() {
      runTest("compiler/testData/codegen/box/inlineClasses/mapInlineClassesWithSuppressWildcardsMode.kt");
    }

    @TestMetadata("mappingOfBoxedFlexibleInlineClassType.kt")
    public void testMappingOfBoxedFlexibleInlineClassType() {
      runTest("compiler/testData/codegen/box/inlineClasses/mappingOfBoxedFlexibleInlineClassType.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("mappingOfBoxedFlexibleInlineClassTypeGeneric.kt")
    public void testMappingOfBoxedFlexibleInlineClassTypeGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/mappingOfBoxedFlexibleInlineClassTypeGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("multifileClass.kt")
    public void testMultifileClass() {
      runTest("compiler/testData/codegen/box/inlineClasses/multifileClass.kt");
    }

    @TestMetadata("nestedInlineClass.kt")
    public void testNestedInlineClass() {
      runTest("compiler/testData/codegen/box/inlineClasses/nestedInlineClass.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("nestedInlineClassGeneric.kt")
    public void testNestedInlineClassGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/nestedInlineClassGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("noAssertionsOnInlineClassBasedOnNullableType.kt")
    public void testNoAssertionsOnInlineClassBasedOnNullableType() {
      runTest("compiler/testData/codegen/box/inlineClasses/noAssertionsOnInlineClassBasedOnNullableType.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("noAssertionsOnInlineClassBasedOnNullableTypeGeneric.kt")
    public void testNoAssertionsOnInlineClassBasedOnNullableTypeGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/noAssertionsOnInlineClassBasedOnNullableTypeGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("noReturnTypeMangling.kt")
    public void testNoReturnTypeMangling() {
      runTest("compiler/testData/codegen/box/inlineClasses/noReturnTypeMangling.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("noReturnTypeManglingGeneric.kt")
    public void testNoReturnTypeManglingGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/noReturnTypeManglingGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("noReturnTypeManglingJvmName.kt")
    public void testNoReturnTypeManglingJvmName() {
      runTest("compiler/testData/codegen/box/inlineClasses/noReturnTypeManglingJvmName.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("noReturnTypeManglingJvmNameGeneric.kt")
    public void testNoReturnTypeManglingJvmNameGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/noReturnTypeManglingJvmNameGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("nonImmediateInlineClassUpperBound.kt")
    public void testNonImmediateInlineClassUpperBound() {
      runTest("compiler/testData/codegen/box/inlineClasses/nonImmediateInlineClassUpperBound.kt");
    }

    @TestMetadata("nullableEqeqNonNull.kt")
    public void testNullableEqeqNonNull() {
      runTest("compiler/testData/codegen/box/inlineClasses/nullableEqeqNonNull.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("nullableEqeqNonNullGeneric.kt")
    public void testNullableEqeqNonNullGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/nullableEqeqNonNullGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("nullableWrapperEquality.kt")
    public void testNullableWrapperEquality() {
      runTest("compiler/testData/codegen/box/inlineClasses/nullableWrapperEquality.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("nullableWrapperEqualityGeneric.kt")
    public void testNullableWrapperEqualityGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/nullableWrapperEqualityGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("nullableWrapperEqualityGeneric2.kt")
    public void testNullableWrapperEqualityGeneric2() {
      runTest("compiler/testData/codegen/box/inlineClasses/nullableWrapperEqualityGeneric2.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("overrideReturnNothing.kt")
    public void testOverrideReturnNothing() {
      runTest("compiler/testData/codegen/box/inlineClasses/overrideReturnNothing.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("overridingFunCallingPrivateFun.kt")
    public void testOverridingFunCallingPrivateFun() {
      runTest("compiler/testData/codegen/box/inlineClasses/overridingFunCallingPrivateFun.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("overridingFunCallingPrivateFunGeneric.kt")
    public void testOverridingFunCallingPrivateFunGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/overridingFunCallingPrivateFunGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("passInlineClassAsVararg.kt")
    public void testPassInlineClassAsVararg() {
      runTest("compiler/testData/codegen/box/inlineClasses/passInlineClassAsVararg.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("passInlineClassAsVarargGeneric.kt")
    public void testPassInlineClassAsVarargGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/passInlineClassAsVarargGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("passInlineClassWithSpreadOperatorToVarargs.kt")
    public void testPassInlineClassWithSpreadOperatorToVarargs() {
      runTest("compiler/testData/codegen/box/inlineClasses/passInlineClassWithSpreadOperatorToVarargs.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("passInlineClassWithSpreadOperatorToVarargsGeneric.kt")
    public void testPassInlineClassWithSpreadOperatorToVarargsGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/passInlineClassWithSpreadOperatorToVarargsGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("privateConstructorFunInterfaceMultiModule.kt")
    public void testPrivateConstructorFunInterfaceMultiModule() {
      runTest("compiler/testData/codegen/box/inlineClasses/privateConstructorFunInterfaceMultiModule.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("privateConstructorFunInterfaceMultiModuleGeneric.kt")
    public void testPrivateConstructorFunInterfaceMultiModuleGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/privateConstructorFunInterfaceMultiModuleGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("propertyLoweringOrder.kt")
    public void testPropertyLoweringOrder() {
      runTest("compiler/testData/codegen/box/inlineClasses/propertyLoweringOrder.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("propertyLoweringOrderGeneric.kt")
    public void testPropertyLoweringOrderGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/propertyLoweringOrderGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("referToPropertyInCompanionObjectOfInlineClass.kt")
    public void testReferToPropertyInCompanionObjectOfInlineClass() {
      runTest("compiler/testData/codegen/box/inlineClasses/referToPropertyInCompanionObjectOfInlineClass.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("referToPropertyInCompanionObjectOfInlineClassGeneric.kt")
    public void testReferToPropertyInCompanionObjectOfInlineClassGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/referToPropertyInCompanionObjectOfInlineClassGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("referToUnderlyingPropertyInsideInlineClass.kt")
    public void testReferToUnderlyingPropertyInsideInlineClass() {
      runTest("compiler/testData/codegen/box/inlineClasses/referToUnderlyingPropertyInsideInlineClass.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("referToUnderlyingPropertyInsideInlineClassGeneric.kt")
    public void testReferToUnderlyingPropertyInsideInlineClassGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/referToUnderlyingPropertyInsideInlineClassGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("referToUnderlyingPropertyOfInlineClass.kt")
    public void testReferToUnderlyingPropertyOfInlineClass() {
      runTest("compiler/testData/codegen/box/inlineClasses/referToUnderlyingPropertyOfInlineClass.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("referToUnderlyingPropertyOfInlineClassGeneric.kt")
    public void testReferToUnderlyingPropertyOfInlineClassGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/referToUnderlyingPropertyOfInlineClassGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("removeInInlineCollectionOfInlineClassAsInt.kt")
    public void testRemoveInInlineCollectionOfInlineClassAsInt() {
      runTest("compiler/testData/codegen/box/inlineClasses/removeInInlineCollectionOfInlineClassAsInt.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("result.kt")
    public void testResult() {
      runTest("compiler/testData/codegen/box/inlineClasses/result.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("resultGeneric.kt")
    public void testResultGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/resultGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("resultGeneric2.kt")
    public void testResultGeneric2() {
      runTest("compiler/testData/codegen/box/inlineClasses/resultGeneric2.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("resultInlining.kt")
    public void testResultInlining() {
      runTest("compiler/testData/codegen/box/inlineClasses/resultInlining.kt");
    }

    @TestMetadata("resultRunCatchingOrElse.kt")
    public void testResultRunCatchingOrElse() {
      runTest("compiler/testData/codegen/box/inlineClasses/resultRunCatchingOrElse.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("safeAsOfTypeParameterWithInlineClassBound.kt")
    public void testSafeAsOfTypeParameterWithInlineClassBound() {
      runTest("compiler/testData/codegen/box/inlineClasses/safeAsOfTypeParameterWithInlineClassBound.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("safeAsOfTypeParameterWithInlineClassBoundGeneric.kt")
    public void testSafeAsOfTypeParameterWithInlineClassBoundGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/safeAsOfTypeParameterWithInlineClassBoundGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("samWrapperDifferentModule.kt")
    public void testSamWrapperDifferentModule() {
      runTest("compiler/testData/codegen/box/inlineClasses/samWrapperDifferentModule.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("samWrapperDifferentModuleGeneric.kt")
    public void testSamWrapperDifferentModuleGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/samWrapperDifferentModuleGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("secondaryConstructorExpectActual.kt")
    public void testSecondaryConstructorExpectActual() {
      runTest("compiler/testData/codegen/box/inlineClasses/secondaryConstructorExpectActual.kt");
    }

    @TestMetadata("secondaryConstructorVisibilies.kt")
    public void testSecondaryConstructorVisibilies() {
      runTest("compiler/testData/codegen/box/inlineClasses/secondaryConstructorVisibilies.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("secondaryConstructorWithVararg.kt")
    public void testSecondaryConstructorWithVararg() {
      runTest("compiler/testData/codegen/box/inlineClasses/secondaryConstructorWithVararg.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("secondaryConstructorWithVarargGeneric.kt")
    public void testSecondaryConstructorWithVarargGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/secondaryConstructorWithVarargGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("secondaryConstructorsInsideInlineClass.kt")
    public void testSecondaryConstructorsInsideInlineClass() {
      runTest("compiler/testData/codegen/box/inlineClasses/secondaryConstructorsInsideInlineClass.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("secondaryConstructorsInsideInlineClassGeneric.kt")
    public void testSecondaryConstructorsInsideInlineClassGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/secondaryConstructorsInsideInlineClassGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("secondaryConstructorsInsideInlineClassWithPrimitiveCarrierType.kt")
    public void testSecondaryConstructorsInsideInlineClassWithPrimitiveCarrierType() {
      runTest("compiler/testData/codegen/box/inlineClasses/secondaryConstructorsInsideInlineClassWithPrimitiveCarrierType.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("secondaryConstructorsInsideInlineClassWithPrimitiveCarrierTypeGeneric.kt")
    public void testSecondaryConstructorsInsideInlineClassWithPrimitiveCarrierTypeGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/secondaryConstructorsInsideInlineClassWithPrimitiveCarrierTypeGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("secondaryConstructorsWithBody.kt")
    public void testSecondaryConstructorsWithBody() {
      runTest("compiler/testData/codegen/box/inlineClasses/secondaryConstructorsWithBody.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("simpleSecondaryConstructor.kt")
    public void testSimpleSecondaryConstructor() {
      runTest("compiler/testData/codegen/box/inlineClasses/simpleSecondaryConstructor.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("simpleSecondaryConstructorGeneric.kt")
    public void testSimpleSecondaryConstructorGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/simpleSecondaryConstructorGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("smartCastOnThisOfInlineClassType.kt")
    public void testSmartCastOnThisOfInlineClassType() {
      runTest("compiler/testData/codegen/box/inlineClasses/smartCastOnThisOfInlineClassType.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("smartCastOnThisOfInlineClassTypeGeneric.kt")
    public void testSmartCastOnThisOfInlineClassTypeGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/smartCastOnThisOfInlineClassTypeGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("stringPlus.kt")
    public void testStringPlus() {
      runTest("compiler/testData/codegen/box/inlineClasses/stringPlus.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("stringPlusGeneric.kt")
    public void testStringPlusGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/stringPlusGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("toStringCallingPrivateFun.kt")
    public void testToStringCallingPrivateFun() {
      runTest("compiler/testData/codegen/box/inlineClasses/toStringCallingPrivateFun.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("toStringCallingPrivateFunGeneric.kt")
    public void testToStringCallingPrivateFunGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/toStringCallingPrivateFunGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("toStringOfUnboxedNullable.kt")
    public void testToStringOfUnboxedNullable() {
      runTest("compiler/testData/codegen/box/inlineClasses/toStringOfUnboxedNullable.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("toStringOfUnboxedNullableGeneric.kt")
    public void testToStringOfUnboxedNullableGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/toStringOfUnboxedNullableGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("typeChecksForInlineClasses.kt")
    public void testTypeChecksForInlineClasses() {
      runTest("compiler/testData/codegen/box/inlineClasses/typeChecksForInlineClasses.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("typeChecksForInlineClassesGeneric.kt")
    public void testTypeChecksForInlineClassesGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/typeChecksForInlineClassesGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("UIntArraySortExample.kt")
    public void testUIntArraySortExample() {
      runTest("compiler/testData/codegen/box/inlineClasses/UIntArraySortExample.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("UIntArraySortExampleGeneric.kt")
    public void testUIntArraySortExampleGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/UIntArraySortExampleGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("UIntSafeAsInt.kt")
    public void testUIntSafeAsInt() {
      runTest("compiler/testData/codegen/box/inlineClasses/UIntSafeAsInt.kt");
    }

    @TestMetadata("unboxNullableValueOfInlineClassWithNonNullUnderlyingType.kt")
    public void testUnboxNullableValueOfInlineClassWithNonNullUnderlyingType() {
      runTest("compiler/testData/codegen/box/inlineClasses/unboxNullableValueOfInlineClassWithNonNullUnderlyingType.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("unboxNullableValueOfInlineClassWithNonNullUnderlyingTypeGeneric.kt")
    public void testUnboxNullableValueOfInlineClassWithNonNullUnderlyingTypeGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/unboxNullableValueOfInlineClassWithNonNullUnderlyingTypeGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("unboxNullableValueOfInlineClassWithNullableInlineClassUnderlyingTypeGWI.kt")
    public void testUnboxNullableValueOfInlineClassWithNullableInlineClassUnderlyingTypeGWI() {
      runTest("compiler/testData/codegen/box/inlineClasses/unboxNullableValueOfInlineClassWithNullableInlineClassUnderlyingTypeGWI.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("unboxNullableValueOfInlineClassWithNullableInlineClassUnderlyingTypeGWI2.kt")
    public void testUnboxNullableValueOfInlineClassWithNullableInlineClassUnderlyingTypeGWI2() {
      runTest("compiler/testData/codegen/box/inlineClasses/unboxNullableValueOfInlineClassWithNullableInlineClassUnderlyingTypeGWI2.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("unboxNullableValueOfInlineClassWithNullablePrimitiveUnderlyingType.kt")
    public void testUnboxNullableValueOfInlineClassWithNullablePrimitiveUnderlyingType() {
      runTest("compiler/testData/codegen/box/inlineClasses/unboxNullableValueOfInlineClassWithNullablePrimitiveUnderlyingType.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("unboxNullableValueOfInlineClassWithNullablePrimitiveUnderlyingTypeGWI.kt")
    public void testUnboxNullableValueOfInlineClassWithNullablePrimitiveUnderlyingTypeGWI() {
      runTest("compiler/testData/codegen/box/inlineClasses/unboxNullableValueOfInlineClassWithNullablePrimitiveUnderlyingTypeGWI.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("unboxNullableValueOfInlineClassWithNullablePrimitiveUnderlyingTypeGWI2.kt")
    public void testUnboxNullableValueOfInlineClassWithNullablePrimitiveUnderlyingTypeGWI2() {
      runTest("compiler/testData/codegen/box/inlineClasses/unboxNullableValueOfInlineClassWithNullablePrimitiveUnderlyingTypeGWI2.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("unboxNullableValueOfInlineClassWithNullablePrimitiveUnderlyingTypeGeneric.kt")
    public void testUnboxNullableValueOfInlineClassWithNullablePrimitiveUnderlyingTypeGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/unboxNullableValueOfInlineClassWithNullablePrimitiveUnderlyingTypeGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("unboxNullableValueOfInlineClassWithPrimitiveUnderlyingType.kt")
    public void testUnboxNullableValueOfInlineClassWithPrimitiveUnderlyingType() {
      runTest("compiler/testData/codegen/box/inlineClasses/unboxNullableValueOfInlineClassWithPrimitiveUnderlyingType.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("unboxNullableValueOfInlineClassWithPrimitiveUnderlyingTypeGeneric.kt")
    public void testUnboxNullableValueOfInlineClassWithPrimitiveUnderlyingTypeGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/unboxNullableValueOfInlineClassWithPrimitiveUnderlyingTypeGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("unboxParameterOfSuspendLambdaBeforeInvoke.kt")
    public void testUnboxParameterOfSuspendLambdaBeforeInvoke() {
      runTest("compiler/testData/codegen/box/inlineClasses/unboxParameterOfSuspendLambdaBeforeInvoke.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("unboxParameterOfSuspendLambdaBeforeInvokeGeneric.kt")
    public void testUnboxParameterOfSuspendLambdaBeforeInvokeGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/unboxParameterOfSuspendLambdaBeforeInvokeGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("unboxReceiverOnCallingMethodFromInlineClass.kt")
    public void testUnboxReceiverOnCallingMethodFromInlineClass() {
      runTest("compiler/testData/codegen/box/inlineClasses/unboxReceiverOnCallingMethodFromInlineClass.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("unboxReceiverOnCallingMethodFromInlineClassGeneric.kt")
    public void testUnboxReceiverOnCallingMethodFromInlineClassGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/unboxReceiverOnCallingMethodFromInlineClassGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("unboxResultParameterWhenCapturingToCrossinlineLambda.kt")
    public void testUnboxResultParameterWhenCapturingToCrossinlineLambda() {
      runTest("compiler/testData/codegen/box/inlineClasses/unboxResultParameterWhenCapturingToCrossinlineLambda.kt");
    }

    @TestMetadata("unboxValueFromPlatformType.kt")
    public void testUnboxValueFromPlatformType() {
      runTest("compiler/testData/codegen/box/inlineClasses/unboxValueFromPlatformType.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("unboxValueFromPlatformTypeGeneric.kt")
    public void testUnboxValueFromPlatformTypeGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/unboxValueFromPlatformTypeGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("unboxValueOfAnyBeforeMethodInvocation.kt")
    public void testUnboxValueOfAnyBeforeMethodInvocation() {
      runTest("compiler/testData/codegen/box/inlineClasses/unboxValueOfAnyBeforeMethodInvocation.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("unboxValueOfAnyBeforeMethodInvocationGeneric.kt")
    public void testUnboxValueOfAnyBeforeMethodInvocationGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/unboxValueOfAnyBeforeMethodInvocationGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("unboxValueOfAnyBeforeMethodInvocationGeneric2.kt")
    public void testUnboxValueOfAnyBeforeMethodInvocationGeneric2() {
      runTest("compiler/testData/codegen/box/inlineClasses/unboxValueOfAnyBeforeMethodInvocationGeneric2.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("unboxValueOfNullableInlineClassUsingInlineFunction.kt")
    public void testUnboxValueOfNullableInlineClassUsingInlineFunction() {
      runTest("compiler/testData/codegen/box/inlineClasses/unboxValueOfNullableInlineClassUsingInlineFunction.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("useInlineClassesInsideElvisOperator.kt")
    public void testUseInlineClassesInsideElvisOperator() {
      runTest("compiler/testData/codegen/box/inlineClasses/useInlineClassesInsideElvisOperator.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("useInlineClassesInsideElvisOperatorGeneric.kt")
    public void testUseInlineClassesInsideElvisOperatorGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/useInlineClassesInsideElvisOperatorGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("useInlineFunctionInsideInlineClass.kt")
    public void testUseInlineFunctionInsideInlineClass() {
      runTest("compiler/testData/codegen/box/inlineClasses/useInlineFunctionInsideInlineClass.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("useInlineFunctionInsideInlineClassGeneric.kt")
    public void testUseInlineFunctionInsideInlineClassGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/useInlineFunctionInsideInlineClassGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("useOfInlineClassWithGenericMethodFromJava.kt")
    public void testUseOfInlineClassWithGenericMethodFromJava() {
      runTest("compiler/testData/codegen/box/inlineClasses/useOfInlineClassWithGenericMethodFromJava.kt");
    }

    @TestMetadata("useOfInlineClassWithGenericMethodFromJavaGeneric.kt")
    public void testUseOfInlineClassWithGenericMethodFromJavaGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/useOfInlineClassWithGenericMethodFromJavaGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("useThisInsideInlineClass.kt")
    public void testUseThisInsideInlineClass() {
      runTest("compiler/testData/codegen/box/inlineClasses/useThisInsideInlineClass.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("useThisInsideInlineClassGeneric.kt")
    public void testUseThisInsideInlineClassGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/useThisInsideInlineClassGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("whenWithSubject.kt")
    public void testWhenWithSubject() {
      runTest("compiler/testData/codegen/box/inlineClasses/whenWithSubject.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("whenWithSubjectGeneric.kt")
    public void testWhenWithSubjectGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/whenWithSubjectGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("compiler/testData/codegen/box/inlineClasses/boxReturnValueInLambda")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class BoxReturnValueInLambda extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      private void runTest(String testDataFilePath, java.util.function.Function<String, String> transformer) {
        KotlinTestUtils.runTest(path -> doTestWithTransformer(path, transformer), TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInBoxReturnValueInLambda() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inlineClasses/boxReturnValueInLambda"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("boxAny.kt")
      public void testBoxAny() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueInLambda/boxAny.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("boxAnyGeneric.kt")
      public void testBoxAnyGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueInLambda/boxAnyGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("boxFunLiteralAny.kt")
      public void testBoxFunLiteralAny() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueInLambda/boxFunLiteralAny.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("boxFunLiteralAnyGeneric.kt")
      public void testBoxFunLiteralAnyGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueInLambda/boxFunLiteralAnyGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("boxInt.kt")
      public void testBoxInt() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueInLambda/boxInt.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("boxIntGeneric.kt")
      public void testBoxIntGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueInLambda/boxIntGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("boxNullableAny.kt")
      public void testBoxNullableAny() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueInLambda/boxNullableAny.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("boxNullableAnyGeneric.kt")
      public void testBoxNullableAnyGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueInLambda/boxNullableAnyGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("boxNullableAnyGeneric2.kt")
      public void testBoxNullableAnyGeneric2() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueInLambda/boxNullableAnyGeneric2.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("boxNullableAnyNull.kt")
      public void testBoxNullableAnyNull() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueInLambda/boxNullableAnyNull.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("boxNullableAnyNullGeneric.kt")
      public void testBoxNullableAnyNullGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueInLambda/boxNullableAnyNullGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("boxNullableAnyNullGeneric2.kt")
      public void testBoxNullableAnyNullGeneric2() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueInLambda/boxNullableAnyNullGeneric2.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("boxNullableInt.kt")
      public void testBoxNullableInt() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueInLambda/boxNullableInt.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("boxNullableIntGeneric.kt")
      public void testBoxNullableIntGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueInLambda/boxNullableIntGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("boxNullableIntGeneric2.kt")
      public void testBoxNullableIntGeneric2() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueInLambda/boxNullableIntGeneric2.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("boxNullableIntNull.kt")
      public void testBoxNullableIntNull() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueInLambda/boxNullableIntNull.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("boxNullableIntNullGeneric.kt")
      public void testBoxNullableIntNullGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueInLambda/boxNullableIntNullGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("boxNullableIntNullGeneric2.kt")
      public void testBoxNullableIntNullGeneric2() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueInLambda/boxNullableIntNullGeneric2.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("boxNullableString.kt")
      public void testBoxNullableString() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueInLambda/boxNullableString.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("boxNullableStringGeneric.kt")
      public void testBoxNullableStringGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueInLambda/boxNullableStringGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("boxNullableStringGeneric2.kt")
      public void testBoxNullableStringGeneric2() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueInLambda/boxNullableStringGeneric2.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("boxNullableStringNull.kt")
      public void testBoxNullableStringNull() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueInLambda/boxNullableStringNull.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("boxNullableStringNullGeneric.kt")
      public void testBoxNullableStringNullGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueInLambda/boxNullableStringNullGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("boxNullableStringNullGeneric2.kt")
      public void testBoxNullableStringNullGeneric2() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueInLambda/boxNullableStringNullGeneric2.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("boxString.kt")
      public void testBoxString() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueInLambda/boxString.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("boxStringGeneric.kt")
      public void testBoxStringGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueInLambda/boxStringGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("kt27586_1.kt")
      public void testKt27586_1() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueInLambda/kt27586_1.kt");
      }

      @TestMetadata("kt27586_2.kt")
      public void testKt27586_2() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueInLambda/kt27586_2.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class BoxReturnValueOnOverride extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      private void runTest(String testDataFilePath, java.util.function.Function<String, String> transformer) {
        KotlinTestUtils.runTest(path -> doTestWithTransformer(path, transformer), TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInBoxReturnValueOnOverride() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("boxReturnValueInDefaultMethod.kt")
      public void testBoxReturnValueInDefaultMethod() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/boxReturnValueInDefaultMethod.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("boxReturnValueInDefaultMethodGenericInt.kt")
      public void testBoxReturnValueInDefaultMethodGenericInt() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/boxReturnValueInDefaultMethodGenericInt.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("covariantOverrideChainErasedToAny.kt")
      public void testCovariantOverrideChainErasedToAny() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/covariantOverrideChainErasedToAny.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("covariantOverrideChainErasedToAnyGeneric.kt")
      public void testCovariantOverrideChainErasedToAnyGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/covariantOverrideChainErasedToAnyGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("covariantOverrideChainErasedToNullableAny.kt")
      public void testCovariantOverrideChainErasedToNullableAny() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/covariantOverrideChainErasedToNullableAny.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("covariantOverrideChainErasedToNullableAnyGeneric.kt")
      public void testCovariantOverrideChainErasedToNullableAnyGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/covariantOverrideChainErasedToNullableAnyGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("covariantOverrideChainErasedToNullableAnyGeneric2.kt")
      public void testCovariantOverrideChainErasedToNullableAnyGeneric2() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/covariantOverrideChainErasedToNullableAnyGeneric2.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("covariantOverrideErasedToAny.kt")
      public void testCovariantOverrideErasedToAny() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/covariantOverrideErasedToAny.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("covariantOverrideErasedToAnyGeneric.kt")
      public void testCovariantOverrideErasedToAnyGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/covariantOverrideErasedToAnyGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("covariantOverrideErasedToInterface.kt")
      public void testCovariantOverrideErasedToInterface() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/covariantOverrideErasedToInterface.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("covariantOverrideErasedToInterfaceGeneric.kt")
      public void testCovariantOverrideErasedToInterfaceGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/covariantOverrideErasedToInterfaceGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("covariantOverrideErasedToPrimitive.kt")
      public void testCovariantOverrideErasedToPrimitive() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/covariantOverrideErasedToPrimitive.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("covariantOverrideErasedToPrimitiveGeneric.kt")
      public void testCovariantOverrideErasedToPrimitiveGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/covariantOverrideErasedToPrimitiveGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("covariantOverrideListVsMutableList.kt")
      public void testCovariantOverrideListVsMutableList() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/covariantOverrideListVsMutableList.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("covariantOverrideListVsMutableListGeneric.kt")
      public void testCovariantOverrideListVsMutableListGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/covariantOverrideListVsMutableListGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("covariantOverrideUnrelatedInterfaces.kt")
      public void testCovariantOverrideUnrelatedInterfaces() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/covariantOverrideUnrelatedInterfaces.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("covariantOverrideUnrelatedInterfacesGeneric.kt")
      public void testCovariantOverrideUnrelatedInterfacesGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/covariantOverrideUnrelatedInterfacesGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("genericOverride.kt")
      public void testGenericOverride() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/genericOverride.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("genericOverrideGeneric.kt")
      public void testGenericOverrideGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/genericOverrideGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("genericOverrideSpecialized.kt")
      public void testGenericOverrideSpecialized() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/genericOverrideSpecialized.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("genericOverrideSpecializedGeneric.kt")
      public void testGenericOverrideSpecializedGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/genericOverrideSpecializedGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("inlineClassInOverriddenReturnTypes.kt")
      public void testInlineClassInOverriddenReturnTypes() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/inlineClassInOverriddenReturnTypes.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("inlineClassInOverriddenReturnTypesGeneric.kt")
      public void testInlineClassInOverriddenReturnTypesGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/inlineClassInOverriddenReturnTypesGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("kt28483.kt")
      public void testKt28483() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/kt28483.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("kt28483Generic.kt")
      public void testKt28483Generic() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/kt28483Generic.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("kt28483Generic2.kt")
      public void testKt28483Generic2() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/kt28483Generic2.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("kt31585.kt")
      public void testKt31585() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/kt31585.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("kt31585Generic.kt")
      public void testKt31585Generic() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/kt31585Generic.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("kt35234.kt")
      public void testKt35234() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/kt35234.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("kt35234Generic.kt")
      public void testKt35234Generic() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/kt35234Generic.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("kt35234a.kt")
      public void testKt35234a() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/kt35234a.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("overrideGenericWithInlineClass.kt")
      public void testOverrideGenericWithInlineClass() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/overrideGenericWithInlineClass.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("overrideGenericWithInlineClassGeneric.kt")
      public void testOverrideGenericWithInlineClassGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/overrideGenericWithInlineClassGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("overrideGenericWithNullableInlineClassUpperBoundWithNonNullAny.kt")
      public void testOverrideGenericWithNullableInlineClassUpperBoundWithNonNullAny() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/overrideGenericWithNullableInlineClassUpperBoundWithNonNullAny.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("overrideGenericWithNullableInlineClassUpperBoundWithNonNullAnyGeneric.kt")
      public void testOverrideGenericWithNullableInlineClassUpperBoundWithNonNullAnyGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/overrideGenericWithNullableInlineClassUpperBoundWithNonNullAnyGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("overrideGenericWithNullableInlineClassUpperBoundWithNonNullNullableAny.kt")
      public void testOverrideGenericWithNullableInlineClassUpperBoundWithNonNullNullableAny() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/overrideGenericWithNullableInlineClassUpperBoundWithNonNullNullableAny.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("overrideGenericWithNullableInlineClassUpperBoundWithNonNullNullableAnyG.kt")
      public void testOverrideGenericWithNullableInlineClassUpperBoundWithNonNullNullableAnyG() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/overrideGenericWithNullableInlineClassUpperBoundWithNonNullNullableAnyG.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("overrideGenericWithNullableInlineClassUpperBoundWithNonNullNullableAnyG2.kt")
      public void testOverrideGenericWithNullableInlineClassUpperBoundWithNonNullNullableAnyG2() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/overrideGenericWithNullableInlineClassUpperBoundWithNonNullNullableAnyG2.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("overrideGenericWithNullableInlineClassUpperBoundWithNonNullNullableAnyNG.kt")
      public void testOverrideGenericWithNullableInlineClassUpperBoundWithNonNullNullableAnyNG() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/overrideGenericWithNullableInlineClassUpperBoundWithNonNullNullableAnyNG.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("overrideGenericWithNullableInlineClassUpperBoundWithNonNullNullableAnyNG2.kt")
      public void testOverrideGenericWithNullableInlineClassUpperBoundWithNonNullNullableAnyNG2() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/overrideGenericWithNullableInlineClassUpperBoundWithNonNullNullableAnyNG2.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("overrideGenericWithNullableInlineClassUpperBoundWithNonNullNullableAnyNull.kt")
      public void testOverrideGenericWithNullableInlineClassUpperBoundWithNonNullNullableAnyNull() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/overrideGenericWithNullableInlineClassUpperBoundWithNonNullNullableAnyNull.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("overrideNullableInlineClassWithNonNullAny.kt")
      public void testOverrideNullableInlineClassWithNonNullAny() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/overrideNullableInlineClassWithNonNullAny.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("overrideNullableInlineClassWithNonNullAnyGeneric.kt")
      public void testOverrideNullableInlineClassWithNonNullAnyGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/overrideNullableInlineClassWithNonNullAnyGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("overrideNullableInlineClassWithNonNullNullableAny.kt")
      public void testOverrideNullableInlineClassWithNonNullNullableAny() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/overrideNullableInlineClassWithNonNullNullableAny.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("overrideNullableInlineClassWithNonNullNullableAnyGeneric.kt")
      public void testOverrideNullableInlineClassWithNonNullNullableAnyGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/overrideNullableInlineClassWithNonNullNullableAnyGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("overrideNullableInlineClassWithNonNullNullableAnyGeneric2.kt")
      public void testOverrideNullableInlineClassWithNonNullNullableAnyGeneric2() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/overrideNullableInlineClassWithNonNullNullableAnyGeneric2.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("overrideNullableInlineClassWithNonNullNullableAnyNull.kt")
      public void testOverrideNullableInlineClassWithNonNullNullableAnyNull() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/overrideNullableInlineClassWithNonNullNullableAnyNull.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("overrideNullableInlineClassWithNonNullNullableAnyNullGeneric.kt")
      public void testOverrideNullableInlineClassWithNonNullNullableAnyNullGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/overrideNullableInlineClassWithNonNullNullableAnyNullGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("overrideNullableInlineClassWithNonNullNullableAnyNullGeneric2.kt")
      public void testOverrideNullableInlineClassWithNonNullNullableAnyNullGeneric2() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/overrideNullableInlineClassWithNonNullNullableAnyNullGeneric2.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("relatedReturnTypes1a.kt")
      public void testRelatedReturnTypes1a() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/relatedReturnTypes1a.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("relatedReturnTypes1aGeneric.kt")
      public void testRelatedReturnTypes1aGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/relatedReturnTypes1aGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("relatedReturnTypes1b.kt")
      public void testRelatedReturnTypes1b() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/relatedReturnTypes1b.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("relatedReturnTypes1bGeneric.kt")
      public void testRelatedReturnTypes1bGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/relatedReturnTypes1bGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("relatedReturnTypes2a.kt")
      public void testRelatedReturnTypes2a() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/relatedReturnTypes2a.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("relatedReturnTypes2aGeneric.kt")
      public void testRelatedReturnTypes2aGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/relatedReturnTypes2aGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("relatedReturnTypes2b.kt")
      public void testRelatedReturnTypes2b() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/relatedReturnTypes2b.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("relatedReturnTypes2bGeneric.kt")
      public void testRelatedReturnTypes2bGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/relatedReturnTypes2bGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("uncastInlineClassToAnyAndBack.kt")
      public void testUncastInlineClassToAnyAndBack() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/uncastInlineClassToAnyAndBack.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("uncastInlineClassToAnyAndBackGeneric.kt")
      public void testUncastInlineClassToAnyAndBackGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/uncastInlineClassToAnyAndBackGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("unrelatedGenerics.kt")
      public void testUnrelatedGenerics() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/unrelatedGenerics.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("unrelatedGenericsGeneric.kt")
      public void testUnrelatedGenericsGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/unrelatedGenericsGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }
    }

    @TestMetadata("compiler/testData/codegen/box/inlineClasses/callableReferences")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class CallableReferences extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      private void runTest(String testDataFilePath, java.util.function.Function<String, String> transformer) {
        KotlinTestUtils.runTest(path -> doTestWithTransformer(path, transformer), TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInCallableReferences() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inlineClasses/callableReferences"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("boundInlineClassExtensionFun.kt")
      public void testBoundInlineClassExtensionFun() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/boundInlineClassExtensionFun.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("boundInlineClassExtensionFunGeneric.kt")
      public void testBoundInlineClassExtensionFunGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/boundInlineClassExtensionFunGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("boundInlineClassExtensionVal.kt")
      public void testBoundInlineClassExtensionVal() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/boundInlineClassExtensionVal.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("boundInlineClassExtensionValGeneric.kt")
      public void testBoundInlineClassExtensionValGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/boundInlineClassExtensionValGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("boundInlineClassMemberFun.kt")
      public void testBoundInlineClassMemberFun() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/boundInlineClassMemberFun.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("boundInlineClassMemberFunGeneric.kt")
      public void testBoundInlineClassMemberFunGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/boundInlineClassMemberFunGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("boundInlineClassMemberVal.kt")
      public void testBoundInlineClassMemberVal() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/boundInlineClassMemberVal.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("boundInlineClassMemberValGeneric.kt")
      public void testBoundInlineClassMemberValGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/boundInlineClassMemberValGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("boundInlineClassPrimaryVal.kt")
      public void testBoundInlineClassPrimaryVal() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/boundInlineClassPrimaryVal.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("boundInlineClassPrimaryValGeneric.kt")
      public void testBoundInlineClassPrimaryValGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/boundInlineClassPrimaryValGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("constructorWithInlineClassParameters.kt")
      public void testConstructorWithInlineClassParameters() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/constructorWithInlineClassParameters.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("constructorWithInlineClassParametersGeneric.kt")
      public void testConstructorWithInlineClassParametersGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/constructorWithInlineClassParametersGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("equalsHashCodeToString.kt")
      public void testEqualsHashCodeToString() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/equalsHashCodeToString.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("equalsHashCodeToStringGeneric.kt")
      public void testEqualsHashCodeToStringGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/equalsHashCodeToStringGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("funWithInlineClassParameters.kt")
      public void testFunWithInlineClassParameters() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/funWithInlineClassParameters.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("funWithInlineClassParametersGeneric.kt")
      public void testFunWithInlineClassParametersGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/funWithInlineClassParametersGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("inlineClassExtensionFun.kt")
      public void testInlineClassExtensionFun() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/inlineClassExtensionFun.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("inlineClassExtensionFunGeneric.kt")
      public void testInlineClassExtensionFunGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/inlineClassExtensionFunGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("inlineClassExtensionVal.kt")
      public void testInlineClassExtensionVal() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/inlineClassExtensionVal.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("inlineClassExtensionValGeneric.kt")
      public void testInlineClassExtensionValGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/inlineClassExtensionValGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("inlineClassInternalPrimaryVal.kt")
      public void testInlineClassInternalPrimaryVal() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/inlineClassInternalPrimaryVal.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("inlineClassInternalPrimaryValGeneric.kt")
      public void testInlineClassInternalPrimaryValGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/inlineClassInternalPrimaryValGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("inlineClassMemberFun.kt")
      public void testInlineClassMemberFun() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/inlineClassMemberFun.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("inlineClassMemberFunGeneric.kt")
      public void testInlineClassMemberFunGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/inlineClassMemberFunGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("inlineClassMemberVal.kt")
      public void testInlineClassMemberVal() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/inlineClassMemberVal.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("inlineClassMemberValGeneric.kt")
      public void testInlineClassMemberValGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/inlineClassMemberValGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("inlineClassPrimaryConstructor.kt")
      public void testInlineClassPrimaryConstructor() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/inlineClassPrimaryConstructor.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("inlineClassPrimaryConstructorGeneric.kt")
      public void testInlineClassPrimaryConstructorGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/inlineClassPrimaryConstructorGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("inlineClassPrimaryVal.kt")
      public void testInlineClassPrimaryVal() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/inlineClassPrimaryVal.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("inlineClassPrimaryValGeneric.kt")
      public void testInlineClassPrimaryValGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/inlineClassPrimaryValGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("inlineClassPrivatePrimaryVal.kt")
      public void testInlineClassPrivatePrimaryVal() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/inlineClassPrivatePrimaryVal.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("inlineClassPrivatePrimaryValGeneric.kt")
      public void testInlineClassPrivatePrimaryValGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/inlineClassPrivatePrimaryValGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("inlineClassTypeBoundMemberVar.kt")
      public void testInlineClassTypeBoundMemberVar() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/inlineClassTypeBoundMemberVar.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("inlineClassTypeBoundMemberVarGeneric.kt")
      public void testInlineClassTypeBoundMemberVarGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/inlineClassTypeBoundMemberVarGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("inlineClassTypeMemberVar.kt")
      public void testInlineClassTypeMemberVar() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/inlineClassTypeMemberVar.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("inlineClassTypeMemberVarGeneric.kt")
      public void testInlineClassTypeMemberVarGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/inlineClassTypeMemberVarGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("inlineClassTypeTopLevelVar.kt")
      public void testInlineClassTypeTopLevelVar() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/inlineClassTypeTopLevelVar.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("inlineClassTypeTopLevelVarGeneric.kt")
      public void testInlineClassTypeTopLevelVarGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/inlineClassTypeTopLevelVarGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("kt37986.kt")
      public void testKt37986() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/kt37986.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("kt37986Generic.kt")
      public void testKt37986Generic() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/kt37986Generic.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("compiler/testData/codegen/box/inlineClasses/callableReferences/let")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class Let extends AbstractLightAnalysisModeTest {
        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        private void runTest(String testDataFilePath, java.util.function.Function<String, String> transformer) {
          KotlinTestUtils.runTest(path -> doTestWithTransformer(path, transformer), TargetBackend.JVM_IR, testDataFilePath);
        }

        public void testAllFilesPresentInLet() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inlineClasses/callableReferences/let"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("any.kt")
        public void testAny() {
          runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/let/any.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
        }

        @TestMetadata("anyGeneric.kt")
        public void testAnyGeneric() {
          runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/let/anyGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
        }

        @TestMetadata("anyN.kt")
        public void testAnyN() {
          runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/let/anyN.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
        }

        @TestMetadata("anyNGeneric.kt")
        public void testAnyNGeneric() {
          runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/let/anyNGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
        }

        @TestMetadata("anyNGeneric2.kt")
        public void testAnyNGeneric2() {
          runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/let/anyNGeneric2.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
        }

        @TestMetadata("int.kt")
        public void testInt() {
          runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/let/int.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
        }

        @TestMetadata("intGeneric.kt")
        public void testIntGeneric() {
          runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/let/intGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
        }

        @TestMetadata("intN.kt")
        public void testIntN() {
          runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/let/intN.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
        }

        @TestMetadata("intNGeneric.kt")
        public void testIntNGeneric() {
          runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/let/intNGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
        }

        @TestMetadata("intNGeneric2.kt")
        public void testIntNGeneric2() {
          runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/let/intNGeneric2.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
        }

        @TestMetadata("null.kt")
        public void testNull() {
          runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/let/null.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
        }

        @TestMetadata("nullGeneric.kt")
        public void testNullGeneric() {
          runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/let/nullGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
        }

        @TestMetadata("result.kt")
        public void testResult() {
          runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/let/result.kt");
        }

        @TestMetadata("string.kt")
        public void testString() {
          runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/let/string.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
        }

        @TestMetadata("stringGeneric.kt")
        public void testStringGeneric() {
          runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/let/stringGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
        }

        @TestMetadata("stringN.kt")
        public void testStringN() {
          runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/let/stringN.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
        }

        @TestMetadata("stringNGeneric.kt")
        public void testStringNGeneric() {
          runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/let/stringNGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
        }

        @TestMetadata("stringNGeneric2.kt")
        public void testStringNGeneric2() {
          runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/let/stringNGeneric2.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
        }
      }
    }

    @TestMetadata("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ContextsAndAccessors extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      private void runTest(String testDataFilePath, java.util.function.Function<String, String> transformer) {
        KotlinTestUtils.runTest(path -> doTestWithTransformer(path, transformer), TargetBackend.JVM_IR, testDataFilePath);
      }

      @TestMetadata("accessPrivateInlineClassCompanionMethod.kt")
      public void testAccessPrivateInlineClassCompanionMethod() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/accessPrivateInlineClassCompanionMethod.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("accessPrivateInlineClassCompanionMethod2.kt")
      public void testAccessPrivateInlineClassCompanionMethod2() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/accessPrivateInlineClassCompanionMethod2.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("accessPrivateInlineClassCompanionMethod2Generic.kt")
      public void testAccessPrivateInlineClassCompanionMethod2Generic() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/accessPrivateInlineClassCompanionMethod2Generic.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("accessPrivateInlineClassCompanionMethodGeneric.kt")
      public void testAccessPrivateInlineClassCompanionMethodGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/accessPrivateInlineClassCompanionMethodGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("accessPrivateInlineClassConstructorFromCompanion.kt")
      public void testAccessPrivateInlineClassConstructorFromCompanion() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/accessPrivateInlineClassConstructorFromCompanion.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("accessPrivateInlineClassConstructorFromCompanionGeneric.kt")
      public void testAccessPrivateInlineClassConstructorFromCompanionGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/accessPrivateInlineClassConstructorFromCompanionGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("accessPrivateInlineClassConstructorFromLambda.kt")
      public void testAccessPrivateInlineClassConstructorFromLambda() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/accessPrivateInlineClassConstructorFromLambda.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("accessPrivateInlineClassConstructorFromLambdaGeneric.kt")
      public void testAccessPrivateInlineClassConstructorFromLambdaGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/accessPrivateInlineClassConstructorFromLambdaGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("accessPrivateInlineClassMethodFromCompanion.kt")
      public void testAccessPrivateInlineClassMethodFromCompanion() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/accessPrivateInlineClassMethodFromCompanion.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("accessPrivateInlineClassMethodFromCompanion2.kt")
      public void testAccessPrivateInlineClassMethodFromCompanion2() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/accessPrivateInlineClassMethodFromCompanion2.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("accessPrivateInlineClassMethodFromCompanion2Generic.kt")
      public void testAccessPrivateInlineClassMethodFromCompanion2Generic() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/accessPrivateInlineClassMethodFromCompanion2Generic.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("accessPrivateInlineClassMethodFromCompanionGeneric.kt")
      public void testAccessPrivateInlineClassMethodFromCompanionGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/accessPrivateInlineClassMethodFromCompanionGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("accessPrivateInlineClassMethodFromInlineLambda.kt")
      public void testAccessPrivateInlineClassMethodFromInlineLambda() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/accessPrivateInlineClassMethodFromInlineLambda.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("accessPrivateInlineClassMethodFromInlineLambda2.kt")
      public void testAccessPrivateInlineClassMethodFromInlineLambda2() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/accessPrivateInlineClassMethodFromInlineLambda2.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("accessPrivateInlineClassMethodFromInlineLambda2Generic.kt")
      public void testAccessPrivateInlineClassMethodFromInlineLambda2Generic() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/accessPrivateInlineClassMethodFromInlineLambda2Generic.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("accessPrivateInlineClassMethodFromInlineLambdaGeneric.kt")
      public void testAccessPrivateInlineClassMethodFromInlineLambdaGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/accessPrivateInlineClassMethodFromInlineLambdaGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("accessPrivateInlineClassMethodFromLambda.kt")
      public void testAccessPrivateInlineClassMethodFromLambda() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/accessPrivateInlineClassMethodFromLambda.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("accessPrivateInlineClassMethodFromLambda2.kt")
      public void testAccessPrivateInlineClassMethodFromLambda2() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/accessPrivateInlineClassMethodFromLambda2.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("accessPrivateInlineClassMethodFromLambda2Generic.kt")
      public void testAccessPrivateInlineClassMethodFromLambda2Generic() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/accessPrivateInlineClassMethodFromLambda2Generic.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("accessPrivateInlineClassMethodFromLambdaGeneric.kt")
      public void testAccessPrivateInlineClassMethodFromLambdaGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/accessPrivateInlineClassMethodFromLambdaGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("accessPrivateStaticInlineClassCompanionMethod.kt")
      public void testAccessPrivateStaticInlineClassCompanionMethod() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/accessPrivateStaticInlineClassCompanionMethod.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("accessPrivateStaticInlineClassCompanionMethodGeneric.kt")
      public void testAccessPrivateStaticInlineClassCompanionMethodGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/accessPrivateStaticInlineClassCompanionMethodGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      public void testAllFilesPresentInContextsAndAccessors() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("captureInlineClassInstanceInLambda.kt")
      public void testCaptureInlineClassInstanceInLambda() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/captureInlineClassInstanceInLambda.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("captureInlineClassInstanceInLambda2.kt")
      public void testCaptureInlineClassInstanceInLambda2() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/captureInlineClassInstanceInLambda2.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("captureInlineClassInstanceInLambda2Generic.kt")
      public void testCaptureInlineClassInstanceInLambda2Generic() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/captureInlineClassInstanceInLambda2Generic.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("captureInlineClassInstanceInLambdaGeneric.kt")
      public void testCaptureInlineClassInstanceInLambdaGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/captureInlineClassInstanceInLambdaGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("captureInlineClassInstanceInObject.kt")
      public void testCaptureInlineClassInstanceInObject() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/captureInlineClassInstanceInObject.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("captureInlineClassInstanceInObjectGeneric.kt")
      public void testCaptureInlineClassInstanceInObjectGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/captureInlineClassInstanceInObjectGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("inlineLambdaInInlineClassFun.kt")
      public void testInlineLambdaInInlineClassFun() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/inlineLambdaInInlineClassFun.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("inlineLambdaInInlineClassFunGeneric.kt")
      public void testInlineLambdaInInlineClassFunGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/inlineLambdaInInlineClassFunGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("kt26858.kt")
      public void testKt26858() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/kt26858.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("kt26858Generic.kt")
      public void testKt26858Generic() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/kt26858Generic.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("kt27513.kt")
      public void testKt27513() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/kt27513.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("kt27513Generic.kt")
      public void testKt27513Generic() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/kt27513Generic.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("kt30780.kt")
      public void testKt30780() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/kt30780.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("kt30780Generic.kt")
      public void testKt30780Generic() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/kt30780Generic.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("lambdaInInlineClassFun.kt")
      public void testLambdaInInlineClassFun() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/lambdaInInlineClassFun.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("lambdaInInlineClassFunGeneric.kt")
      public void testLambdaInInlineClassFunGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/lambdaInInlineClassFunGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("objectInInlineClassFun.kt")
      public void testObjectInInlineClassFun() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/objectInInlineClassFun.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("objectInInlineClassFunGeneric.kt")
      public void testObjectInInlineClassFunGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/objectInInlineClassFunGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("toPrivateCompanionFun.kt")
      public void testToPrivateCompanionFun() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/toPrivateCompanionFun.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("toPrivateCompanionFunGeneric.kt")
      public void testToPrivateCompanionFunGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/toPrivateCompanionFunGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("toPrivateCompanionVal.kt")
      public void testToPrivateCompanionVal() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/toPrivateCompanionVal.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("toPrivateCompanionValGeneric.kt")
      public void testToPrivateCompanionValGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/toPrivateCompanionValGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }
    }

    @TestMetadata("compiler/testData/codegen/box/inlineClasses/defaultParameterValues")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class DefaultParameterValues extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      private void runTest(String testDataFilePath, java.util.function.Function<String, String> transformer) {
        KotlinTestUtils.runTest(path -> doTestWithTransformer(path, transformer), TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInDefaultParameterValues() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inlineClasses/defaultParameterValues"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("defaultConstructorParameterValuesOfInlineClassType.kt")
      public void testDefaultConstructorParameterValuesOfInlineClassType() {
        runTest("compiler/testData/codegen/box/inlineClasses/defaultParameterValues/defaultConstructorParameterValuesOfInlineClassType.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("defaultConstructorParameterValuesOfInlineClassTypeGeneric.kt")
      public void testDefaultConstructorParameterValuesOfInlineClassTypeGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/defaultParameterValues/defaultConstructorParameterValuesOfInlineClassTypeGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("defaultInterfaceFunParameterValuesOfInlineClassType.kt")
      public void testDefaultInterfaceFunParameterValuesOfInlineClassType() {
        runTest("compiler/testData/codegen/box/inlineClasses/defaultParameterValues/defaultInterfaceFunParameterValuesOfInlineClassType.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("defaultInterfaceFunParameterValuesOfInlineClassTypeGeneric.kt")
      public void testDefaultInterfaceFunParameterValuesOfInlineClassTypeGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/defaultParameterValues/defaultInterfaceFunParameterValuesOfInlineClassTypeGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("defaultParameterValuesOfInlineClassType.kt")
      public void testDefaultParameterValuesOfInlineClassType() {
        runTest("compiler/testData/codegen/box/inlineClasses/defaultParameterValues/defaultParameterValuesOfInlineClassType.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("defaultParameterValuesOfInlineClassTypeBoxing.kt")
      public void testDefaultParameterValuesOfInlineClassTypeBoxing() {
        runTest("compiler/testData/codegen/box/inlineClasses/defaultParameterValues/defaultParameterValuesOfInlineClassTypeBoxing.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("defaultParameterValuesOfInlineClassTypeBoxingGeneric.kt")
      public void testDefaultParameterValuesOfInlineClassTypeBoxingGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/defaultParameterValues/defaultParameterValuesOfInlineClassTypeBoxingGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("defaultParameterValuesOfInlineClassTypeGeneric.kt")
      public void testDefaultParameterValuesOfInlineClassTypeGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/defaultParameterValues/defaultParameterValuesOfInlineClassTypeGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("defaultValueOfInlineClassTypeInInlineFun.kt")
      public void testDefaultValueOfInlineClassTypeInInlineFun() {
        runTest("compiler/testData/codegen/box/inlineClasses/defaultParameterValues/defaultValueOfInlineClassTypeInInlineFun.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("defaultValueOfInlineClassTypeInInlineFunGeneric.kt")
      public void testDefaultValueOfInlineClassTypeInInlineFunGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/defaultParameterValues/defaultValueOfInlineClassTypeInInlineFunGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("defaultValueOfInlineClassTypeInInlineFunInInlineClass.kt")
      public void testDefaultValueOfInlineClassTypeInInlineFunInInlineClass() {
        runTest("compiler/testData/codegen/box/inlineClasses/defaultParameterValues/defaultValueOfInlineClassTypeInInlineFunInInlineClass.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("defaultValueOfInlineClassTypeInInlineFunInInlineClassGeneric.kt")
      public void testDefaultValueOfInlineClassTypeInInlineFunInInlineClassGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/defaultParameterValues/defaultValueOfInlineClassTypeInInlineFunInInlineClassGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("inlineClassFun.kt")
      public void testInlineClassFun() {
        runTest("compiler/testData/codegen/box/inlineClasses/defaultParameterValues/inlineClassFun.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("inlineClassFunGeneric.kt")
      public void testInlineClassFunGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/defaultParameterValues/inlineClassFunGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("inlineClassPrimaryConstructor.kt")
      public void testInlineClassPrimaryConstructor() {
        runTest("compiler/testData/codegen/box/inlineClasses/defaultParameterValues/inlineClassPrimaryConstructor.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("inlineClassPrimaryConstructorGeneric.kt")
      public void testInlineClassPrimaryConstructorGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/defaultParameterValues/inlineClassPrimaryConstructorGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("inlineClassPrimaryConstructorWithInlineClassValue.kt")
      public void testInlineClassPrimaryConstructorWithInlineClassValue() {
        runTest("compiler/testData/codegen/box/inlineClasses/defaultParameterValues/inlineClassPrimaryConstructorWithInlineClassValue.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("inlineClassPrimaryConstructorWithInlineClassValueGeneric.kt")
      public void testInlineClassPrimaryConstructorWithInlineClassValueGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/defaultParameterValues/inlineClassPrimaryConstructorWithInlineClassValueGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("inlineClassSecondaryConstructor.kt")
      public void testInlineClassSecondaryConstructor() {
        runTest("compiler/testData/codegen/box/inlineClasses/defaultParameterValues/inlineClassSecondaryConstructor.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("inlineClassSecondaryConstructorGeneric.kt")
      public void testInlineClassSecondaryConstructorGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/defaultParameterValues/inlineClassSecondaryConstructorGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("kt26554.kt")
      public void testKt26554() {
        runTest("compiler/testData/codegen/box/inlineClasses/defaultParameterValues/kt26554.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("kt27416.kt")
      public void testKt27416() {
        runTest("compiler/testData/codegen/box/inlineClasses/defaultParameterValues/kt27416.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("kt27416Generic.kt")
      public void testKt27416Generic() {
        runTest("compiler/testData/codegen/box/inlineClasses/defaultParameterValues/kt27416Generic.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("compiler/testData/codegen/box/inlineClasses/defaultParameterValues/defaultWithDefaultParameter")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class DefaultWithDefaultParameter extends AbstractLightAnalysisModeTest {
        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        private void runTest(String testDataFilePath, java.util.function.Function<String, String> transformer) {
          KotlinTestUtils.runTest(path -> doTestWithTransformer(path, transformer), TargetBackend.JVM_IR, testDataFilePath);
        }

        @TestMetadata("all.kt")
        public void testAll() {
          runTest("compiler/testData/codegen/box/inlineClasses/defaultParameterValues/defaultWithDefaultParameter/all.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
        }

        public void testAllFilesPresentInDefaultWithDefaultParameter() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inlineClasses/defaultParameterValues/defaultWithDefaultParameter"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("allGeneric.kt")
        public void testAllGeneric() {
          runTest("compiler/testData/codegen/box/inlineClasses/defaultParameterValues/defaultWithDefaultParameter/allGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
        }

        @TestMetadata("all-compatibility.kt")
        public void testAll_compatibility() {
          runTest("compiler/testData/codegen/box/inlineClasses/defaultParameterValues/defaultWithDefaultParameter/all-compatibility.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
        }

        @TestMetadata("all-compatibilityGeneric.kt")
        public void testAll_compatibilityGeneric() {
          runTest("compiler/testData/codegen/box/inlineClasses/defaultParameterValues/defaultWithDefaultParameter/all-compatibilityGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
        }

        @TestMetadata("default.kt")
        public void testDefault() {
          runTest("compiler/testData/codegen/box/inlineClasses/defaultParameterValues/defaultWithDefaultParameter/default.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
        }

        @TestMetadata("defaultGeneric.kt")
        public void testDefaultGeneric() {
          runTest("compiler/testData/codegen/box/inlineClasses/defaultParameterValues/defaultWithDefaultParameter/defaultGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
        }
      }

      @TestMetadata("compiler/testData/codegen/box/inlineClasses/defaultParameterValues/overrideFunctionWithDefaultParameter")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class OverrideFunctionWithDefaultParameter extends AbstractLightAnalysisModeTest {
        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        private void runTest(String testDataFilePath, java.util.function.Function<String, String> transformer) {
          KotlinTestUtils.runTest(path -> doTestWithTransformer(path, transformer), TargetBackend.JVM_IR, testDataFilePath);
        }

        @TestMetadata("all.kt")
        public void testAll() {
          runTest("compiler/testData/codegen/box/inlineClasses/defaultParameterValues/overrideFunctionWithDefaultParameter/all.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
        }

        public void testAllFilesPresentInOverrideFunctionWithDefaultParameter() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inlineClasses/defaultParameterValues/overrideFunctionWithDefaultParameter"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("allGeneric.kt")
        public void testAllGeneric() {
          runTest("compiler/testData/codegen/box/inlineClasses/defaultParameterValues/overrideFunctionWithDefaultParameter/allGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
        }

        @TestMetadata("all-compatibility.kt")
        public void testAll_compatibility() {
          runTest("compiler/testData/codegen/box/inlineClasses/defaultParameterValues/overrideFunctionWithDefaultParameter/all-compatibility.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
        }

        @TestMetadata("all-compatibilityGeneric.kt")
        public void testAll_compatibilityGeneric() {
          runTest("compiler/testData/codegen/box/inlineClasses/defaultParameterValues/overrideFunctionWithDefaultParameter/all-compatibilityGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
        }

        @TestMetadata("default.kt")
        public void testDefault() {
          runTest("compiler/testData/codegen/box/inlineClasses/defaultParameterValues/overrideFunctionWithDefaultParameter/default.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
        }

        @TestMetadata("defaultGeneric.kt")
        public void testDefaultGeneric() {
          runTest("compiler/testData/codegen/box/inlineClasses/defaultParameterValues/overrideFunctionWithDefaultParameter/defaultGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
        }
      }
    }

    @TestMetadata("compiler/testData/codegen/box/inlineClasses/delegationByUnderlyingType")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class DelegationByUnderlyingType extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInDelegationByUnderlyingType() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inlineClasses/delegationByUnderlyingType"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("default.kt")
      public void testDefault() {
        runTest("compiler/testData/codegen/box/inlineClasses/delegationByUnderlyingType/default.kt");
      }

      @TestMetadata("defaultArgument.kt")
      public void testDefaultArgument() {
        runTest("compiler/testData/codegen/box/inlineClasses/delegationByUnderlyingType/defaultArgument.kt");
      }

      @TestMetadata("defaultArgumentGeneric.kt")
      public void testDefaultArgumentGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/delegationByUnderlyingType/defaultArgumentGeneric.kt");
      }

      @TestMetadata("defaultGeneric.kt")
      public void testDefaultGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/delegationByUnderlyingType/defaultGeneric.kt");
      }

      @TestMetadata("simple.kt")
      public void testSimple() {
        runTest("compiler/testData/codegen/box/inlineClasses/delegationByUnderlyingType/simple.kt");
      }

      @TestMetadata("simpleGeneric.kt")
      public void testSimpleGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/delegationByUnderlyingType/simpleGeneric.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/inlineClasses/funInterface")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class FunInterface extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      private void runTest(String testDataFilePath, java.util.function.Function<String, String> transformer) {
        KotlinTestUtils.runTest(path -> doTestWithTransformer(path, transformer), TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInFunInterface() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inlineClasses/funInterface"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("argumentIC.kt")
      public void testArgumentIC() {
        runTest("compiler/testData/codegen/box/inlineClasses/funInterface/argumentIC.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("argumentICGeneric.kt")
      public void testArgumentICGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/funInterface/argumentICGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("argumentICGeneric2.kt")
      public void testArgumentICGeneric2() {
        runTest("compiler/testData/codegen/box/inlineClasses/funInterface/argumentICGeneric2.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("argumentResult.kt")
      public void testArgumentResult() {
        runTest("compiler/testData/codegen/box/inlineClasses/funInterface/argumentResult.kt");
      }

      @TestMetadata("javaSam.kt")
      public void testJavaSam() {
        runTest("compiler/testData/codegen/box/inlineClasses/funInterface/javaSam.kt");
      }

      @TestMetadata("javaSamReturnResult.kt")
      public void testJavaSamReturnResult() {
        runTest("compiler/testData/codegen/box/inlineClasses/funInterface/javaSamReturnResult.kt");
      }

      @TestMetadata("kt51121.kt")
      public void testKt51121() {
        runTest("compiler/testData/codegen/box/inlineClasses/funInterface/kt51121.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("kt51121_2.kt")
      public void testKt51121_2() {
        runTest("compiler/testData/codegen/box/inlineClasses/funInterface/kt51121_2.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("mangledSamWrappers.kt")
      public void testMangledSamWrappers() {
        runTest("compiler/testData/codegen/box/inlineClasses/funInterface/mangledSamWrappers.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("mangledSamWrappersGeneric.kt")
      public void testMangledSamWrappersGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/funInterface/mangledSamWrappersGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("returnIC.kt")
      public void testReturnIC() {
        runTest("compiler/testData/codegen/box/inlineClasses/funInterface/returnIC.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("returnICGeneric.kt")
      public void testReturnICGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/funInterface/returnICGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("returnICGeneric2.kt")
      public void testReturnICGeneric2() {
        runTest("compiler/testData/codegen/box/inlineClasses/funInterface/returnICGeneric2.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("returnResult.kt")
      public void testReturnResult() {
        runTest("compiler/testData/codegen/box/inlineClasses/funInterface/returnResult.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/inlineClasses/functionNameMangling")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class FunctionNameMangling extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      private void runTest(String testDataFilePath, java.util.function.Function<String, String> transformer) {
        KotlinTestUtils.runTest(path -> doTestWithTransformer(path, transformer), TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInFunctionNameMangling() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inlineClasses/functionNameMangling"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("anonymousObjectInFunctionWithMangledName.kt")
      public void testAnonymousObjectInFunctionWithMangledName() {
        runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/anonymousObjectInFunctionWithMangledName.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("anonymousObjectInFunctionWithMangledNameGeneric.kt")
      public void testAnonymousObjectInFunctionWithMangledNameGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/anonymousObjectInFunctionWithMangledNameGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("extensionFunctionsDoNotClash.kt")
      public void testExtensionFunctionsDoNotClash() {
        runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/extensionFunctionsDoNotClash.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("extensionFunctionsDoNotClashGeneric.kt")
      public void testExtensionFunctionsDoNotClashGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/extensionFunctionsDoNotClashGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("functionsWithDifferentNullabilityDoNotClash.kt")
      public void testFunctionsWithDifferentNullabilityDoNotClash() {
        runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/functionsWithDifferentNullabilityDoNotClash.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("functionsWithDifferentNullabilityDoNotClashGeneric.kt")
      public void testFunctionsWithDifferentNullabilityDoNotClashGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/functionsWithDifferentNullabilityDoNotClashGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("genericFunctionsDoNotClash.kt")
      public void testGenericFunctionsDoNotClash() {
        runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/genericFunctionsDoNotClash.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("genericFunctionsDoNotClashGeneric.kt")
      public void testGenericFunctionsDoNotClashGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/genericFunctionsDoNotClashGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("genericSignatureOfFunctionWithMangledName.kt")
      public void testGenericSignatureOfFunctionWithMangledName() {
        runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/genericSignatureOfFunctionWithMangledName.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("genericSignatureOfFunctionWithMangledNameGeneric.kt")
      public void testGenericSignatureOfFunctionWithMangledNameGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/genericSignatureOfFunctionWithMangledNameGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("localClassInFunctionWithMangledName.kt")
      public void testLocalClassInFunctionWithMangledName() {
        runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/localClassInFunctionWithMangledName.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("localClassInFunctionWithMangledNameGeneric.kt")
      public void testLocalClassInFunctionWithMangledNameGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/localClassInFunctionWithMangledNameGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("mangledFunctionsCanBeOverridden.kt")
      public void testMangledFunctionsCanBeOverridden() {
        runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/mangledFunctionsCanBeOverridden.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("mangledFunctionsCanBeOverriddenGeneric.kt")
      public void testMangledFunctionsCanBeOverriddenGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/mangledFunctionsCanBeOverriddenGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("mangledFunctionsDoNotClash.kt")
      public void testMangledFunctionsDoNotClash() {
        runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/mangledFunctionsDoNotClash.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("mangledFunctionsDoNotClashGeneric.kt")
      public void testMangledFunctionsDoNotClashGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/mangledFunctionsDoNotClashGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("mangledFunctionsPresentInStackTrace.kt")
      public void testMangledFunctionsPresentInStackTrace() {
        runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/mangledFunctionsPresentInStackTrace.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("mangledFunctionsPresentInStackTraceGeneric.kt")
      public void testMangledFunctionsPresentInStackTraceGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/mangledFunctionsPresentInStackTraceGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("mixedSignatureFunctionsDoNotClash.kt")
      public void testMixedSignatureFunctionsDoNotClash() {
        runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/mixedSignatureFunctionsDoNotClash.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("mixedSignatureFunctionsDoNotClashGeneric.kt")
      public void testMixedSignatureFunctionsDoNotClashGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/mixedSignatureFunctionsDoNotClashGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("overridingMethodInGenericClass.kt")
      public void testOverridingMethodInGenericClass() {
        runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/overridingMethodInGenericClass.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("overridingMethodInGenericClass2.kt")
      public void testOverridingMethodInGenericClass2() {
        runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/overridingMethodInGenericClass2.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("overridingMethodInGenericClass2Generic.kt")
      public void testOverridingMethodInGenericClass2Generic() {
        runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/overridingMethodInGenericClass2Generic.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("overridingMethodInGenericClassGeneric.kt")
      public void testOverridingMethodInGenericClassGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/overridingMethodInGenericClassGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("propertySetterWithInlineClassTypeArgument.kt")
      public void testPropertySetterWithInlineClassTypeArgument() {
        runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/propertySetterWithInlineClassTypeArgument.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("propertySetterWithInlineClassTypeArgumentGeneric.kt")
      public void testPropertySetterWithInlineClassTypeArgumentGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/propertySetterWithInlineClassTypeArgumentGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("reflectionForFunctionWithMangledName.kt")
      public void testReflectionForFunctionWithMangledName() {
        runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/reflectionForFunctionWithMangledName.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("reflectionForFunctionWithMangledNameGeneric.kt")
      public void testReflectionForFunctionWithMangledNameGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/reflectionForFunctionWithMangledNameGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("reflectionForLocalClassInFunctionWithMangledName.kt")
      public void testReflectionForLocalClassInFunctionWithMangledName() {
        runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/reflectionForLocalClassInFunctionWithMangledName.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("reflectionForLocalClassInFunctionWithMangledNameGeneric.kt")
      public void testReflectionForLocalClassInFunctionWithMangledNameGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/reflectionForLocalClassInFunctionWithMangledNameGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("reflectionForPropertyOfInlineClassType.kt")
      public void testReflectionForPropertyOfInlineClassType() {
        runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/reflectionForPropertyOfInlineClassType.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("reflectionForPropertyOfInlineClassTypeGeneric.kt")
      public void testReflectionForPropertyOfInlineClassTypeGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/reflectionForPropertyOfInlineClassTypeGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("syntheticAccessorForFunctionWithMangledName.kt")
      public void testSyntheticAccessorForFunctionWithMangledName() {
        runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/syntheticAccessorForFunctionWithMangledName.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("syntheticAccessorForFunctionWithMangledNameGeneric.kt")
      public void testSyntheticAccessorForFunctionWithMangledNameGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/syntheticAccessorForFunctionWithMangledNameGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("syntheticAccessorsForPropertyOfInlineClassType.kt")
      public void testSyntheticAccessorsForPropertyOfInlineClassType() {
        runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/syntheticAccessorsForPropertyOfInlineClassType.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("syntheticAccessorsForPropertyOfInlineClassTypeGeneric.kt")
      public void testSyntheticAccessorsForPropertyOfInlineClassTypeGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/syntheticAccessorsForPropertyOfInlineClassTypeGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }
    }

    @TestMetadata("compiler/testData/codegen/box/inlineClasses/genericUnderlyingValue")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class GenericUnderlyingValue extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInGenericUnderlyingValue() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inlineClasses/genericUnderlyingValue"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("array.kt")
      public void testArray() {
        runTest("compiler/testData/codegen/box/inlineClasses/genericUnderlyingValue/array.kt");
      }

      @TestMetadata("arrayIC.kt")
      public void testArrayIC() {
        runTest("compiler/testData/codegen/box/inlineClasses/genericUnderlyingValue/arrayIC.kt");
      }

      @TestMetadata("primitive.kt")
      public void testPrimitive() {
        runTest("compiler/testData/codegen/box/inlineClasses/genericUnderlyingValue/primitive.kt");
      }

      @TestMetadata("recursive.kt")
      public void testRecursive() {
        runTest("compiler/testData/codegen/box/inlineClasses/genericUnderlyingValue/recursive.kt");
      }

      @TestMetadata("simple.kt")
      public void testSimple() {
        runTest("compiler/testData/codegen/box/inlineClasses/genericUnderlyingValue/simple.kt");
      }

      @TestMetadata("simple2.kt")
      public void testSimple2() {
        runTest("compiler/testData/codegen/box/inlineClasses/genericUnderlyingValue/simple2.kt");
      }

      @TestMetadata("upperBound.kt")
      public void testUpperBound() {
        runTest("compiler/testData/codegen/box/inlineClasses/genericUnderlyingValue/upperBound.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/inlineClasses/hiddenConstructor")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class HiddenConstructor extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      private void runTest(String testDataFilePath, java.util.function.Function<String, String> transformer) {
        KotlinTestUtils.runTest(path -> doTestWithTransformer(path, transformer), TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInHiddenConstructor() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inlineClasses/hiddenConstructor"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("constructorReferencedFromOtherFile1.kt")
      public void testConstructorReferencedFromOtherFile1() {
        runTest("compiler/testData/codegen/box/inlineClasses/hiddenConstructor/constructorReferencedFromOtherFile1.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("constructorReferencedFromOtherFile1Generic.kt")
      public void testConstructorReferencedFromOtherFile1Generic() {
        runTest("compiler/testData/codegen/box/inlineClasses/hiddenConstructor/constructorReferencedFromOtherFile1Generic.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("constructorReferencedFromOtherFile2.kt")
      public void testConstructorReferencedFromOtherFile2() {
        runTest("compiler/testData/codegen/box/inlineClasses/hiddenConstructor/constructorReferencedFromOtherFile2.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("constructorReferencedFromOtherFile2Generic.kt")
      public void testConstructorReferencedFromOtherFile2Generic() {
        runTest("compiler/testData/codegen/box/inlineClasses/hiddenConstructor/constructorReferencedFromOtherFile2Generic.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("constructorWithDefaultParameters.kt")
      public void testConstructorWithDefaultParameters() {
        runTest("compiler/testData/codegen/box/inlineClasses/hiddenConstructor/constructorWithDefaultParameters.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("constructorWithDefaultParametersGeneric.kt")
      public void testConstructorWithDefaultParametersGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/hiddenConstructor/constructorWithDefaultParametersGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("delegatingSuperConstructorCall.kt")
      public void testDelegatingSuperConstructorCall() {
        runTest("compiler/testData/codegen/box/inlineClasses/hiddenConstructor/delegatingSuperConstructorCall.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("delegatingSuperConstructorCallGeneric.kt")
      public void testDelegatingSuperConstructorCallGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/hiddenConstructor/delegatingSuperConstructorCallGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("delegatingSuperConstructorCallInSecondaryConstructor.kt")
      public void testDelegatingSuperConstructorCallInSecondaryConstructor() {
        runTest("compiler/testData/codegen/box/inlineClasses/hiddenConstructor/delegatingSuperConstructorCallInSecondaryConstructor.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("delegatingSuperConstructorCallInSecondaryConstructorGeneric.kt")
      public void testDelegatingSuperConstructorCallInSecondaryConstructorGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/hiddenConstructor/delegatingSuperConstructorCallInSecondaryConstructorGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("delegatingThisConstructorCall.kt")
      public void testDelegatingThisConstructorCall() {
        runTest("compiler/testData/codegen/box/inlineClasses/hiddenConstructor/delegatingThisConstructorCall.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("delegatingThisConstructorCallGeneric.kt")
      public void testDelegatingThisConstructorCallGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/hiddenConstructor/delegatingThisConstructorCallGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("enumClassConstructor.kt")
      public void testEnumClassConstructor() {
        runTest("compiler/testData/codegen/box/inlineClasses/hiddenConstructor/enumClassConstructor.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("enumClassConstructorGeneric.kt")
      public void testEnumClassConstructorGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/hiddenConstructor/enumClassConstructorGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("innerClassConstructor.kt")
      public void testInnerClassConstructor() {
        runTest("compiler/testData/codegen/box/inlineClasses/hiddenConstructor/innerClassConstructor.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("innerClassConstructorGeneric.kt")
      public void testInnerClassConstructorGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/hiddenConstructor/innerClassConstructorGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("kt28855.kt")
      public void testKt28855() {
        runTest("compiler/testData/codegen/box/inlineClasses/hiddenConstructor/kt28855.kt");
      }

      @TestMetadata("primaryConstructor.kt")
      public void testPrimaryConstructor() {
        runTest("compiler/testData/codegen/box/inlineClasses/hiddenConstructor/primaryConstructor.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("primaryConstructorGeneric.kt")
      public void testPrimaryConstructorGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/hiddenConstructor/primaryConstructorGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("privateConstructor.kt")
      public void testPrivateConstructor() {
        runTest("compiler/testData/codegen/box/inlineClasses/hiddenConstructor/privateConstructor.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("privateConstructorGeneric.kt")
      public void testPrivateConstructorGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/hiddenConstructor/privateConstructorGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("sealedClassConstructor.kt")
      public void testSealedClassConstructor() {
        runTest("compiler/testData/codegen/box/inlineClasses/hiddenConstructor/sealedClassConstructor.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("sealedClassConstructorGeneric.kt")
      public void testSealedClassConstructorGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/hiddenConstructor/sealedClassConstructorGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("secondaryConstructor.kt")
      public void testSecondaryConstructor() {
        runTest("compiler/testData/codegen/box/inlineClasses/hiddenConstructor/secondaryConstructor.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("secondaryConstructorGeneric.kt")
      public void testSecondaryConstructorGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/hiddenConstructor/secondaryConstructorGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }
    }

    @TestMetadata("compiler/testData/codegen/box/inlineClasses/inlineClassCollection")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class InlineClassCollection extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      private void runTest(String testDataFilePath, java.util.function.Function<String, String> transformer) {
        KotlinTestUtils.runTest(path -> doTestWithTransformer(path, transformer), TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInInlineClassCollection() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inlineClasses/inlineClassCollection"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("inlineCollectionOfInlineClass.kt")
      public void testInlineCollectionOfInlineClass() {
        runTest("compiler/testData/codegen/box/inlineClasses/inlineClassCollection/inlineCollectionOfInlineClass.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("inlineCollectionOfInlineClassGeneric.kt")
      public void testInlineCollectionOfInlineClassGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/inlineClassCollection/inlineCollectionOfInlineClassGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("inlineListOfInlineClass.kt")
      public void testInlineListOfInlineClass() {
        runTest("compiler/testData/codegen/box/inlineClasses/inlineClassCollection/inlineListOfInlineClass.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("inlineListOfInlineClassGeneric.kt")
      public void testInlineListOfInlineClassGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/inlineClassCollection/inlineListOfInlineClassGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("inlineMapOfInlineClass.kt")
      public void testInlineMapOfInlineClass() {
        runTest("compiler/testData/codegen/box/inlineClasses/inlineClassCollection/inlineMapOfInlineClass.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("inlineMapOfInlineClassGeneric.kt")
      public void testInlineMapOfInlineClassGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/inlineClassCollection/inlineMapOfInlineClassGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("inlineMutableCollectionBulkAdd.kt")
      public void testInlineMutableCollectionBulkAdd() {
        runTest("compiler/testData/codegen/box/inlineClasses/inlineClassCollection/inlineMutableCollectionBulkAdd.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }
    }

    @TestMetadata("compiler/testData/codegen/box/inlineClasses/interfaceDelegation")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class InterfaceDelegation extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      private void runTest(String testDataFilePath, java.util.function.Function<String, String> transformer) {
        KotlinTestUtils.runTest(path -> doTestWithTransformer(path, transformer), TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInInterfaceDelegation() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inlineClasses/interfaceDelegation"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("interfaceImplementationByDelegation.kt")
      public void testInterfaceImplementationByDelegation() {
        runTest("compiler/testData/codegen/box/inlineClasses/interfaceDelegation/interfaceImplementationByDelegation.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("interfaceImplementationByDelegationGeneric.kt")
      public void testInterfaceImplementationByDelegationGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/interfaceDelegation/interfaceImplementationByDelegationGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("kt38337.kt")
      public void testKt38337() {
        runTest("compiler/testData/codegen/box/inlineClasses/interfaceDelegation/kt38337.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("kt38337Generic.kt")
      public void testKt38337Generic() {
        runTest("compiler/testData/codegen/box/inlineClasses/interfaceDelegation/kt38337Generic.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("memberExtValDelegationWithInlineClassParameterTypes.kt")
      public void testMemberExtValDelegationWithInlineClassParameterTypes() {
        runTest("compiler/testData/codegen/box/inlineClasses/interfaceDelegation/memberExtValDelegationWithInlineClassParameterTypes.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("memberExtValDelegationWithInlineClassParameterTypesGeneric.kt")
      public void testMemberExtValDelegationWithInlineClassParameterTypesGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/interfaceDelegation/memberExtValDelegationWithInlineClassParameterTypesGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("memberExtVarDelegationWithInlineClassParameterTypes.kt")
      public void testMemberExtVarDelegationWithInlineClassParameterTypes() {
        runTest("compiler/testData/codegen/box/inlineClasses/interfaceDelegation/memberExtVarDelegationWithInlineClassParameterTypes.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("memberFunDelegatedToInlineClassInt.kt")
      public void testMemberFunDelegatedToInlineClassInt() {
        runTest("compiler/testData/codegen/box/inlineClasses/interfaceDelegation/memberFunDelegatedToInlineClassInt.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("memberFunDelegatedToInlineClassIntGeneric.kt")
      public void testMemberFunDelegatedToInlineClassIntGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/interfaceDelegation/memberFunDelegatedToInlineClassIntGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("memberFunDelegatedToInlineClassLong.kt")
      public void testMemberFunDelegatedToInlineClassLong() {
        runTest("compiler/testData/codegen/box/inlineClasses/interfaceDelegation/memberFunDelegatedToInlineClassLong.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("memberFunDelegatedToInlineClassLongGeneric.kt")
      public void testMemberFunDelegatedToInlineClassLongGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/interfaceDelegation/memberFunDelegatedToInlineClassLongGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("memberFunDelegationToInlineClassWithInlineClassParameterTypes.kt")
      public void testMemberFunDelegationToInlineClassWithInlineClassParameterTypes() {
        runTest("compiler/testData/codegen/box/inlineClasses/interfaceDelegation/memberFunDelegationToInlineClassWithInlineClassParameterTypes.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("memberFunDelegationToInlineClassWithInlineClassParameterTypesGeneric.kt")
      public void testMemberFunDelegationToInlineClassWithInlineClassParameterTypesGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/interfaceDelegation/memberFunDelegationToInlineClassWithInlineClassParameterTypesGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("memberFunDelegationWithInlineClassParameterTypes.kt")
      public void testMemberFunDelegationWithInlineClassParameterTypes() {
        runTest("compiler/testData/codegen/box/inlineClasses/interfaceDelegation/memberFunDelegationWithInlineClassParameterTypes.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("memberFunDelegationWithInlineClassParameterTypesGeneric.kt")
      public void testMemberFunDelegationWithInlineClassParameterTypesGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/interfaceDelegation/memberFunDelegationWithInlineClassParameterTypesGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }
    }

    @TestMetadata("compiler/testData/codegen/box/inlineClasses/interfaceMethodCalls")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class InterfaceMethodCalls extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      private void runTest(String testDataFilePath, java.util.function.Function<String, String> transformer) {
        KotlinTestUtils.runTest(path -> doTestWithTransformer(path, transformer), TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInInterfaceMethodCalls() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inlineClasses/interfaceMethodCalls"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("complexGenericMethodWithInlineClassOverride.kt")
      public void testComplexGenericMethodWithInlineClassOverride() {
        runTest("compiler/testData/codegen/box/inlineClasses/interfaceMethodCalls/complexGenericMethodWithInlineClassOverride.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("complexGenericMethodWithInlineClassOverride2.kt")
      public void testComplexGenericMethodWithInlineClassOverride2() {
        runTest("compiler/testData/codegen/box/inlineClasses/interfaceMethodCalls/complexGenericMethodWithInlineClassOverride2.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("complexGenericMethodWithInlineClassOverride2Generic.kt")
      public void testComplexGenericMethodWithInlineClassOverride2Generic() {
        runTest("compiler/testData/codegen/box/inlineClasses/interfaceMethodCalls/complexGenericMethodWithInlineClassOverride2Generic.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("complexGenericMethodWithInlineClassOverride3.kt")
      public void testComplexGenericMethodWithInlineClassOverride3() {
        runTest("compiler/testData/codegen/box/inlineClasses/interfaceMethodCalls/complexGenericMethodWithInlineClassOverride3.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("complexGenericMethodWithInlineClassOverride3Generic.kt")
      public void testComplexGenericMethodWithInlineClassOverride3Generic() {
        runTest("compiler/testData/codegen/box/inlineClasses/interfaceMethodCalls/complexGenericMethodWithInlineClassOverride3Generic.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("complexGenericMethodWithInlineClassOverrideGeneric.kt")
      public void testComplexGenericMethodWithInlineClassOverrideGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/interfaceMethodCalls/complexGenericMethodWithInlineClassOverrideGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("defaultInterfaceExtensionFunCall.kt")
      public void testDefaultInterfaceExtensionFunCall() {
        runTest("compiler/testData/codegen/box/inlineClasses/interfaceMethodCalls/defaultInterfaceExtensionFunCall.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("defaultInterfaceExtensionFunCallGeneric.kt")
      public void testDefaultInterfaceExtensionFunCallGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/interfaceMethodCalls/defaultInterfaceExtensionFunCallGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("defaultInterfaceMethodCall.kt")
      public void testDefaultInterfaceMethodCall() {
        runTest("compiler/testData/codegen/box/inlineClasses/interfaceMethodCalls/defaultInterfaceMethodCall.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("defaultInterfaceMethodCallGeneric.kt")
      public void testDefaultInterfaceMethodCallGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/interfaceMethodCalls/defaultInterfaceMethodCallGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("genericDefaultInterfaceExtensionFunCall.kt")
      public void testGenericDefaultInterfaceExtensionFunCall() {
        runTest("compiler/testData/codegen/box/inlineClasses/interfaceMethodCalls/genericDefaultInterfaceExtensionFunCall.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("genericDefaultInterfaceExtensionFunCallGeneric.kt")
      public void testGenericDefaultInterfaceExtensionFunCallGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/interfaceMethodCalls/genericDefaultInterfaceExtensionFunCallGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("genericDefaultInterfaceMethodCall.kt")
      public void testGenericDefaultInterfaceMethodCall() {
        runTest("compiler/testData/codegen/box/inlineClasses/interfaceMethodCalls/genericDefaultInterfaceMethodCall.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("genericDefaultInterfaceMethodCallGeneric.kt")
      public void testGenericDefaultInterfaceMethodCallGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/interfaceMethodCalls/genericDefaultInterfaceMethodCallGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("genericInterfaceMethodCall.kt")
      public void testGenericInterfaceMethodCall() {
        runTest("compiler/testData/codegen/box/inlineClasses/interfaceMethodCalls/genericInterfaceMethodCall.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("genericInterfaceMethodCallGeneric.kt")
      public void testGenericInterfaceMethodCallGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/interfaceMethodCalls/genericInterfaceMethodCallGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("genericMethodWithInlineClassOverride.kt")
      public void testGenericMethodWithInlineClassOverride() {
        runTest("compiler/testData/codegen/box/inlineClasses/interfaceMethodCalls/genericMethodWithInlineClassOverride.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("genericMethodWithInlineClassOverrideGeneric.kt")
      public void testGenericMethodWithInlineClassOverrideGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/interfaceMethodCalls/genericMethodWithInlineClassOverrideGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("interfaceSuperCall.kt")
      public void testInterfaceSuperCall() {
        runTest("compiler/testData/codegen/box/inlineClasses/interfaceMethodCalls/interfaceSuperCall.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("interfaceSuperCallGeneric.kt")
      public void testInterfaceSuperCallGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/interfaceMethodCalls/interfaceSuperCallGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("overriddenDefaultInterfaceMethodCall.kt")
      public void testOverriddenDefaultInterfaceMethodCall() {
        runTest("compiler/testData/codegen/box/inlineClasses/interfaceMethodCalls/overriddenDefaultInterfaceMethodCall.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("overriddenDefaultInterfaceMethodCallGeneric.kt")
      public void testOverriddenDefaultInterfaceMethodCallGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/interfaceMethodCalls/overriddenDefaultInterfaceMethodCallGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }
    }

    @TestMetadata("compiler/testData/codegen/box/inlineClasses/javaInterop")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class JavaInterop extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInJavaInterop() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inlineClasses/javaInterop"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("inlineClasInSignature.kt")
      public void testInlineClasInSignature() {
        runTest("compiler/testData/codegen/box/inlineClasses/javaInterop/inlineClasInSignature.kt");
      }

      @TestMetadata("inlineClasInSignatureNonNull.kt")
      public void testInlineClasInSignatureNonNull() {
        runTest("compiler/testData/codegen/box/inlineClasses/javaInterop/inlineClasInSignatureNonNull.kt");
      }

      @TestMetadata("inlineClasInSignatureNullable.kt")
      public void testInlineClasInSignatureNullable() {
        runTest("compiler/testData/codegen/box/inlineClasses/javaInterop/inlineClasInSignatureNullable.kt");
      }

      @TestMetadata("kt55945.kt")
      public void testKt55945() {
        runTest("compiler/testData/codegen/box/inlineClasses/javaInterop/kt55945.kt");
      }

      @TestMetadata("methodWithInlineClassDeclaredInJava.kt")
      public void testMethodWithInlineClassDeclaredInJava() {
        runTest("compiler/testData/codegen/box/inlineClasses/javaInterop/methodWithInlineClassDeclaredInJava.kt");
      }

      @TestMetadata("methodWithInlineClassDeclaredInJavaOverriddenInKotlin.kt")
      public void testMethodWithInlineClassDeclaredInJavaOverriddenInKotlin() {
        runTest("compiler/testData/codegen/box/inlineClasses/javaInterop/methodWithInlineClassDeclaredInJavaOverriddenInKotlin.kt");
      }

      @TestMetadata("methodWithInlineClassInheritedBothFromJavaAndKotlin.kt")
      public void testMethodWithInlineClassInheritedBothFromJavaAndKotlin() {
        runTest("compiler/testData/codegen/box/inlineClasses/javaInterop/methodWithInlineClassInheritedBothFromJavaAndKotlin.kt");
      }

      @TestMetadata("methodWithInlineClassInheritedInJavaOverriddenInKotlin.kt")
      public void testMethodWithInlineClassInheritedInJavaOverriddenInKotlin() {
        runTest("compiler/testData/codegen/box/inlineClasses/javaInterop/methodWithInlineClassInheritedInJavaOverriddenInKotlin.kt");
      }

      @TestMetadata("oldFunctionMangling.kt")
      public void testOldFunctionMangling() {
        runTest("compiler/testData/codegen/box/inlineClasses/javaInterop/oldFunctionMangling.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/inlineClasses/jvm8DefaultInterfaceMethods")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Jvm8DefaultInterfaceMethods extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      private void runTest(String testDataFilePath, java.util.function.Function<String, String> transformer) {
        KotlinTestUtils.runTest(path -> doTestWithTransformer(path, transformer), TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInJvm8DefaultInterfaceMethods() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inlineClasses/jvm8DefaultInterfaceMethods"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("inlineClassInheritingDefaultMethod.kt")
      public void testInlineClassInheritingDefaultMethod() {
        runTest("compiler/testData/codegen/box/inlineClasses/jvm8DefaultInterfaceMethods/inlineClassInheritingDefaultMethod.kt");
      }

      @TestMetadata("inlineClassInheritingDefaultMethodAll.kt")
      public void testInlineClassInheritingDefaultMethodAll() {
        runTest("compiler/testData/codegen/box/inlineClasses/jvm8DefaultInterfaceMethods/inlineClassInheritingDefaultMethodAll.kt");
      }

      @TestMetadata("inlineClassInheritingDefaultMethodAllGeneric.kt")
      public void testInlineClassInheritingDefaultMethodAllGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/jvm8DefaultInterfaceMethods/inlineClassInheritingDefaultMethodAllGeneric.kt");
      }

      @TestMetadata("inlineClassInheritingDefaultMethodGeneric.kt")
      public void testInlineClassInheritingDefaultMethodGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/jvm8DefaultInterfaceMethods/inlineClassInheritingDefaultMethodGeneric.kt");
      }

      @TestMetadata("javaDefaultMethod.kt")
      public void testJavaDefaultMethod() {
        runTest("compiler/testData/codegen/box/inlineClasses/jvm8DefaultInterfaceMethods/javaDefaultMethod.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("javaDefaultMethodGeneric.kt")
      public void testJavaDefaultMethodGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/jvm8DefaultInterfaceMethods/javaDefaultMethodGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("javaDefaultMethodOverriddenByKotlin.kt")
      public void testJavaDefaultMethodOverriddenByKotlin() {
        runTest("compiler/testData/codegen/box/inlineClasses/jvm8DefaultInterfaceMethods/javaDefaultMethodOverriddenByKotlin.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("javaDefaultMethodOverriddenByKotlinGeneric.kt")
      public void testJavaDefaultMethodOverriddenByKotlinGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/jvm8DefaultInterfaceMethods/javaDefaultMethodOverriddenByKotlinGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("jvmDefaultAll.kt")
      public void testJvmDefaultAll() {
        runTest("compiler/testData/codegen/box/inlineClasses/jvm8DefaultInterfaceMethods/jvmDefaultAll.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("jvmDefaultAllGeneric.kt")
      public void testJvmDefaultAllGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/jvm8DefaultInterfaceMethods/jvmDefaultAllGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("jvmDefaultAllPrimaryProperty.kt")
      public void testJvmDefaultAllPrimaryProperty() {
        runTest("compiler/testData/codegen/box/inlineClasses/jvm8DefaultInterfaceMethods/jvmDefaultAllPrimaryProperty.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("jvmDefaultAllPrimaryPropertyGeneric.kt")
      public void testJvmDefaultAllPrimaryPropertyGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/jvm8DefaultInterfaceMethods/jvmDefaultAllPrimaryPropertyGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("jvmDefaultAllProperty.kt")
      public void testJvmDefaultAllProperty() {
        runTest("compiler/testData/codegen/box/inlineClasses/jvm8DefaultInterfaceMethods/jvmDefaultAllProperty.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("jvmDefaultAllPropertyGeneric.kt")
      public void testJvmDefaultAllPropertyGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/jvm8DefaultInterfaceMethods/jvmDefaultAllPropertyGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("jvmDefaultGeneric.kt")
      public void testJvmDefaultGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/jvm8DefaultInterfaceMethods/jvmDefaultGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("jvmDefaultGenericGeneric.kt")
      public void testJvmDefaultGenericGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/jvm8DefaultInterfaceMethods/jvmDefaultGenericGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("jvmDefaultSafeCall.kt")
      public void testJvmDefaultSafeCall() {
        runTest("compiler/testData/codegen/box/inlineClasses/jvm8DefaultInterfaceMethods/jvmDefaultSafeCall.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("jvmDefaultSafeCallGeneric.kt")
      public void testJvmDefaultSafeCallGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/jvm8DefaultInterfaceMethods/jvmDefaultSafeCallGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("jvmDefaultSmartCast.kt")
      public void testJvmDefaultSmartCast() {
        runTest("compiler/testData/codegen/box/inlineClasses/jvm8DefaultInterfaceMethods/jvmDefaultSmartCast.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("jvmDefaultSmartCastGeneric.kt")
      public void testJvmDefaultSmartCastGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/jvm8DefaultInterfaceMethods/jvmDefaultSmartCastGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("jvmDefaultSuspend.kt")
      public void testJvmDefaultSuspend() {
        runTest("compiler/testData/codegen/box/inlineClasses/jvm8DefaultInterfaceMethods/jvmDefaultSuspend.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("jvmDefaultSuspendGeneric.kt")
      public void testJvmDefaultSuspendGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/jvm8DefaultInterfaceMethods/jvmDefaultSuspendGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }
    }

    @TestMetadata("compiler/testData/codegen/box/inlineClasses/propertyDelegation")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class PropertyDelegation extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      private void runTest(String testDataFilePath, java.util.function.Function<String, String> transformer) {
        KotlinTestUtils.runTest(path -> doTestWithTransformer(path, transformer), TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInPropertyDelegation() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inlineClasses/propertyDelegation"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("captureLocalVarDelegatedToInlineClass.kt")
      public void testCaptureLocalVarDelegatedToInlineClass() {
        runTest("compiler/testData/codegen/box/inlineClasses/propertyDelegation/captureLocalVarDelegatedToInlineClass.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("captureLocalVarDelegatedToInlineClassGeneric.kt")
      public void testCaptureLocalVarDelegatedToInlineClassGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/propertyDelegation/captureLocalVarDelegatedToInlineClassGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("delegateClassVarToInlineClass.kt")
      public void testDelegateClassVarToInlineClass() {
        runTest("compiler/testData/codegen/box/inlineClasses/propertyDelegation/delegateClassVarToInlineClass.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("delegateClassVarToInlineClassGeneric.kt")
      public void testDelegateClassVarToInlineClassGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/propertyDelegation/delegateClassVarToInlineClassGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("delegateClassVarToInlineClassWithProvideDelegate.kt")
      public void testDelegateClassVarToInlineClassWithProvideDelegate() {
        runTest("compiler/testData/codegen/box/inlineClasses/propertyDelegation/delegateClassVarToInlineClassWithProvideDelegate.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("delegateClassVarToInlineClassWithProvideDelegateGeneric.kt")
      public void testDelegateClassVarToInlineClassWithProvideDelegateGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/propertyDelegation/delegateClassVarToInlineClassWithProvideDelegateGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("delegateCompanionVarToInlineClass.kt")
      public void testDelegateCompanionVarToInlineClass() {
        runTest("compiler/testData/codegen/box/inlineClasses/propertyDelegation/delegateCompanionVarToInlineClass.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("delegateCompanionVarToInlineClassGeneric.kt")
      public void testDelegateCompanionVarToInlineClassGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/propertyDelegation/delegateCompanionVarToInlineClassGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("delegateJvmStaticCompanionVarToInlineClass.kt")
      public void testDelegateJvmStaticCompanionVarToInlineClass() {
        runTest("compiler/testData/codegen/box/inlineClasses/propertyDelegation/delegateJvmStaticCompanionVarToInlineClass.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("delegateJvmStaticCompanionVarToInlineClassGeneric.kt")
      public void testDelegateJvmStaticCompanionVarToInlineClassGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/propertyDelegation/delegateJvmStaticCompanionVarToInlineClassGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("delegateLocalVarToInlineClass.kt")
      public void testDelegateLocalVarToInlineClass() {
        runTest("compiler/testData/codegen/box/inlineClasses/propertyDelegation/delegateLocalVarToInlineClass.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("delegateLocalVarToInlineClassGeneric.kt")
      public void testDelegateLocalVarToInlineClassGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/propertyDelegation/delegateLocalVarToInlineClassGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("delegateObjectVarToInlineClass.kt")
      public void testDelegateObjectVarToInlineClass() {
        runTest("compiler/testData/codegen/box/inlineClasses/propertyDelegation/delegateObjectVarToInlineClass.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("delegateObjectVarToInlineClassGeneric.kt")
      public void testDelegateObjectVarToInlineClassGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/propertyDelegation/delegateObjectVarToInlineClassGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("delegatePrivateCompanionVarToInlineClass.kt")
      public void testDelegatePrivateCompanionVarToInlineClass() {
        runTest("compiler/testData/codegen/box/inlineClasses/propertyDelegation/delegatePrivateCompanionVarToInlineClass.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("delegatePrivateCompanionVarToInlineClassGeneric.kt")
      public void testDelegatePrivateCompanionVarToInlineClassGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/propertyDelegation/delegatePrivateCompanionVarToInlineClassGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("delegateTopLevelVarToInlineClass.kt")
      public void testDelegateTopLevelVarToInlineClass() {
        runTest("compiler/testData/codegen/box/inlineClasses/propertyDelegation/delegateTopLevelVarToInlineClass.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("delegateTopLevelVarToInlineClassGeneric.kt")
      public void testDelegateTopLevelVarToInlineClassGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/propertyDelegation/delegateTopLevelVarToInlineClassGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("delegatedPropertyOfInlineClassType.kt")
      public void testDelegatedPropertyOfInlineClassType() {
        runTest("compiler/testData/codegen/box/inlineClasses/propertyDelegation/delegatedPropertyOfInlineClassType.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("delegatedPropertyOfInlineClassTypeGeneric.kt")
      public void testDelegatedPropertyOfInlineClassTypeGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/propertyDelegation/delegatedPropertyOfInlineClassTypeGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("kt27070.kt")
      public void testKt27070() {
        runTest("compiler/testData/codegen/box/inlineClasses/propertyDelegation/kt27070.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("kt27070Generic.kt")
      public void testKt27070Generic() {
        runTest("compiler/testData/codegen/box/inlineClasses/propertyDelegation/kt27070Generic.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("kt42933.kt")
      public void testKt42933() {
        runTest("compiler/testData/codegen/box/inlineClasses/propertyDelegation/kt42933.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }

      @TestMetadata("kt42933Generic.kt")
      public void testKt42933Generic() {
        runTest("compiler/testData/codegen/box/inlineClasses/propertyDelegation/kt42933Generic.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
      }
    }

    @TestMetadata("compiler/testData/codegen/box/inlineClasses/result")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Result extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInResult() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inlineClasses/result"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("directCall1.kt")
      public void testDirectCall1() {
        runTest("compiler/testData/codegen/box/inlineClasses/result/directCall1.kt");
      }

      @TestMetadata("directCall2.kt")
      public void testDirectCall2() {
        runTest("compiler/testData/codegen/box/inlineClasses/result/directCall2.kt");
      }

      @TestMetadata("doubleOverride.kt")
      public void testDoubleOverride() {
        runTest("compiler/testData/codegen/box/inlineClasses/result/doubleOverride.kt");
      }

      @TestMetadata("extensionOverride.kt")
      public void testExtensionOverride() {
        runTest("compiler/testData/codegen/box/inlineClasses/result/extensionOverride.kt");
      }

      @TestMetadata("inlineMethodOnResult.kt")
      public void testInlineMethodOnResult() {
        runTest("compiler/testData/codegen/box/inlineClasses/result/inlineMethodOnResult.kt");
      }

      @TestMetadata("lambdaTakesResultThroughBridge.kt")
      public void testLambdaTakesResultThroughBridge() {
        runTest("compiler/testData/codegen/box/inlineClasses/result/lambdaTakesResultThroughBridge.kt");
      }

      @TestMetadata("returnGenericMultiModule.kt")
      public void testReturnGenericMultiModule() {
        runTest("compiler/testData/codegen/box/inlineClasses/result/returnGenericMultiModule.kt");
      }

      @TestMetadata("returnGenericSingleModule.kt")
      public void testReturnGenericSingleModule() {
        runTest("compiler/testData/codegen/box/inlineClasses/result/returnGenericSingleModule.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/inlineClasses/returnResult")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ReturnResult extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInReturnResult() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inlineClasses/returnResult"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("class.kt")
      public void testClass() {
        runTest("compiler/testData/codegen/box/inlineClasses/returnResult/class.kt");
      }

      @TestMetadata("classAnyOverride.kt")
      public void testClassAnyOverride() {
        runTest("compiler/testData/codegen/box/inlineClasses/returnResult/classAnyOverride.kt");
      }

      @TestMetadata("classGenericOverride.kt")
      public void testClassGenericOverride() {
        runTest("compiler/testData/codegen/box/inlineClasses/returnResult/classGenericOverride.kt");
      }

      @TestMetadata("classResultOverride.kt")
      public void testClassResultOverride() {
        runTest("compiler/testData/codegen/box/inlineClasses/returnResult/classResultOverride.kt");
      }

      @TestMetadata("interface.kt")
      public void testInterface() {
        runTest("compiler/testData/codegen/box/inlineClasses/returnResult/interface.kt");
      }

      @TestMetadata("topLevel.kt")
      public void testTopLevel() {
        runTest("compiler/testData/codegen/box/inlineClasses/returnResult/topLevel.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class UnboxGenericParameter extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInUnboxGenericParameter() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/funInterface")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class FunInterface extends AbstractLightAnalysisModeTest {
        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        private void runTest(String testDataFilePath, java.util.function.Function<String, String> transformer) {
          KotlinTestUtils.runTest(path -> doTestWithTransformer(path, transformer), TargetBackend.JVM_IR, testDataFilePath);
        }

        public void testAllFilesPresentInFunInterface() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/funInterface"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("any.kt")
        public void testAny() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/funInterface/any.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
        }

        @TestMetadata("anyGeneric.kt")
        public void testAnyGeneric() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/funInterface/anyGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
        }

        @TestMetadata("anyN.kt")
        public void testAnyN() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/funInterface/anyN.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
        }

        @TestMetadata("anyNGeneric.kt")
        public void testAnyNGeneric() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/funInterface/anyNGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
        }

        @TestMetadata("anyNGeneric2.kt")
        public void testAnyNGeneric2() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/funInterface/anyNGeneric2.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
        }

        @TestMetadata("iface.kt")
        public void testIface() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/funInterface/iface.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
        }

        @TestMetadata("ifaceChild.kt")
        public void testIfaceChild() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/funInterface/ifaceChild.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
        }

        @TestMetadata("ifaceChildGeneric.kt")
        public void testIfaceChildGeneric() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/funInterface/ifaceChildGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
        }

        @TestMetadata("ifaceGeneric.kt")
        public void testIfaceGeneric() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/funInterface/ifaceGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
        }

        @TestMetadata("nullableResult.kt")
        public void testNullableResult() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/funInterface/nullableResult.kt");
        }

        @TestMetadata("primitive.kt")
        public void testPrimitive() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/funInterface/primitive.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
        }

        @TestMetadata("primitiveGeneric.kt")
        public void testPrimitiveGeneric() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/funInterface/primitiveGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
        }

        @TestMetadata("result.kt")
        public void testResult() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/funInterface/result.kt");
        }

        @TestMetadata("resultAny.kt")
        public void testResultAny() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/funInterface/resultAny.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
        }

        @TestMetadata("resultAnyGeneric.kt")
        public void testResultAnyGeneric() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/funInterface/resultAnyGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
        }

        @TestMetadata("string.kt")
        public void testString() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/funInterface/string.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
        }

        @TestMetadata("stringGeneric.kt")
        public void testStringGeneric() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/funInterface/stringGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
        }
      }

      @TestMetadata("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/lambda")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class Lambda extends AbstractLightAnalysisModeTest {
        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        private void runTest(String testDataFilePath, java.util.function.Function<String, String> transformer) {
          KotlinTestUtils.runTest(path -> doTestWithTransformer(path, transformer), TargetBackend.JVM_IR, testDataFilePath);
        }

        public void testAllFilesPresentInLambda() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/lambda"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("any.kt")
        public void testAny() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/lambda/any.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
        }

        @TestMetadata("anyGeneric.kt")
        public void testAnyGeneric() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/lambda/anyGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
        }

        @TestMetadata("anyN.kt")
        public void testAnyN() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/lambda/anyN.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
        }

        @TestMetadata("anyNGeneric.kt")
        public void testAnyNGeneric() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/lambda/anyNGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
        }

        @TestMetadata("anyNGeneric2.kt")
        public void testAnyNGeneric2() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/lambda/anyNGeneric2.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
        }

        @TestMetadata("iface.kt")
        public void testIface() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/lambda/iface.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
        }

        @TestMetadata("ifaceChild.kt")
        public void testIfaceChild() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/lambda/ifaceChild.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
        }

        @TestMetadata("ifaceChildGeneric.kt")
        public void testIfaceChildGeneric() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/lambda/ifaceChildGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
        }

        @TestMetadata("ifaceGeneric.kt")
        public void testIfaceGeneric() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/lambda/ifaceGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
        }

        @TestMetadata("nullableResult.kt")
        public void testNullableResult() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/lambda/nullableResult.kt");
        }

        @TestMetadata("primitive.kt")
        public void testPrimitive() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/lambda/primitive.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
        }

        @TestMetadata("primitiveGeneric.kt")
        public void testPrimitiveGeneric() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/lambda/primitiveGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
        }

        @TestMetadata("result.kt")
        public void testResult() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/lambda/result.kt");
        }

        @TestMetadata("resultAny.kt")
        public void testResultAny() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/lambda/resultAny.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
        }

        @TestMetadata("resultAnyGeneric.kt")
        public void testResultAnyGeneric() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/lambda/resultAnyGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
        }

        @TestMetadata("string.kt")
        public void testString() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/lambda/string.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
        }

        @TestMetadata("stringGeneric.kt")
        public void testStringGeneric() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/lambda/stringGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
        }
      }

      @TestMetadata("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/objectLiteral")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class ObjectLiteral extends AbstractLightAnalysisModeTest {
        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        private void runTest(String testDataFilePath, java.util.function.Function<String, String> transformer) {
          KotlinTestUtils.runTest(path -> doTestWithTransformer(path, transformer), TargetBackend.JVM_IR, testDataFilePath);
        }

        public void testAllFilesPresentInObjectLiteral() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/objectLiteral"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("any.kt")
        public void testAny() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/objectLiteral/any.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
        }

        @TestMetadata("anyGeneric.kt")
        public void testAnyGeneric() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/objectLiteral/anyGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
        }

        @TestMetadata("anyN.kt")
        public void testAnyN() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/objectLiteral/anyN.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
        }

        @TestMetadata("anyNGeneric.kt")
        public void testAnyNGeneric() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/objectLiteral/anyNGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
        }

        @TestMetadata("anyNGeneric2.kt")
        public void testAnyNGeneric2() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/objectLiteral/anyNGeneric2.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
        }

        @TestMetadata("iface.kt")
        public void testIface() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/objectLiteral/iface.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
        }

        @TestMetadata("ifaceChild.kt")
        public void testIfaceChild() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/objectLiteral/ifaceChild.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
        }

        @TestMetadata("ifaceChildGeneric.kt")
        public void testIfaceChildGeneric() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/objectLiteral/ifaceChildGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
        }

        @TestMetadata("ifaceGeneric.kt")
        public void testIfaceGeneric() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/objectLiteral/ifaceGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
        }

        @TestMetadata("nullableResult.kt")
        public void testNullableResult() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/objectLiteral/nullableResult.kt");
        }

        @TestMetadata("primitive.kt")
        public void testPrimitive() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/objectLiteral/primitive.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
        }

        @TestMetadata("primitiveGeneric.kt")
        public void testPrimitiveGeneric() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/objectLiteral/primitiveGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
        }

        @TestMetadata("result.kt")
        public void testResult() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/objectLiteral/result.kt");
        }

        @TestMetadata("resultAny.kt")
        public void testResultAny() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/objectLiteral/resultAny.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
        }

        @TestMetadata("resultAnyGeneric.kt")
        public void testResultAnyGeneric() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/objectLiteral/resultAnyGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
        }

        @TestMetadata("string.kt")
        public void testString() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/objectLiteral/string.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
        }

        @TestMetadata("stringGeneric.kt")
        public void testStringGeneric() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/objectLiteral/stringGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
        }
      }
    }
  }

  @TestMetadata("compiler/testData/codegen/box/innerClass")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class InnerClass extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInInnerClass() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/innerClass"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("doubleInner.kt")
    public void testDoubleInner() {
      runTest("compiler/testData/codegen/box/innerClass/doubleInner.kt");
    }

    @TestMetadata("generic.kt")
    public void testGeneric() {
      runTest("compiler/testData/codegen/box/innerClass/generic.kt");
    }

    @TestMetadata("getOuterVal.kt")
    public void testGetOuterVal() {
      runTest("compiler/testData/codegen/box/innerClass/getOuterVal.kt");
    }

    @TestMetadata("inheritanceMultipleModules1.kt")
    public void testInheritanceMultipleModules1() {
      runTest("compiler/testData/codegen/box/innerClass/inheritanceMultipleModules1.kt");
    }

    @TestMetadata("inheritanceMultipleModules2.kt")
    public void testInheritanceMultipleModules2() {
      runTest("compiler/testData/codegen/box/innerClass/inheritanceMultipleModules2.kt");
    }

    @TestMetadata("inheritanceMultipleModules3.kt")
    public void testInheritanceMultipleModules3() {
      runTest("compiler/testData/codegen/box/innerClass/inheritanceMultipleModules3.kt");
    }

    @TestMetadata("multipleModules.kt")
    public void testMultipleModules() {
      runTest("compiler/testData/codegen/box/innerClass/multipleModules.kt");
    }

    @TestMetadata("noPrimaryConstructor.kt")
    public void testNoPrimaryConstructor() {
      runTest("compiler/testData/codegen/box/innerClass/noPrimaryConstructor.kt");
    }

    @TestMetadata("qualifiedThis.kt")
    public void testQualifiedThis() {
      runTest("compiler/testData/codegen/box/innerClass/qualifiedThis.kt");
    }

    @TestMetadata("secondaryConstructor.kt")
    public void testSecondaryConstructor() {
      runTest("compiler/testData/codegen/box/innerClass/secondaryConstructor.kt");
    }

    @TestMetadata("simple.kt")
    public void testSimple() {
      runTest("compiler/testData/codegen/box/innerClass/simple.kt");
    }

    @TestMetadata("superOuter.kt")
    public void testSuperOuter() {
      runTest("compiler/testData/codegen/box/innerClass/superOuter.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/innerNested")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class InnerNested extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInInnerNested() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/innerNested"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("considerPropertyInitValueFromNestedClass.kt")
    public void testConsiderPropertyInitValueFromNestedClass() {
      runTest("compiler/testData/codegen/box/innerNested/considerPropertyInitValueFromNestedClass.kt");
    }

    @TestMetadata("createNestedClass.kt")
    public void testCreateNestedClass() {
      runTest("compiler/testData/codegen/box/innerNested/createNestedClass.kt");
    }

    @TestMetadata("createdNestedInOuterMember.kt")
    public void testCreatedNestedInOuterMember() {
      runTest("compiler/testData/codegen/box/innerNested/createdNestedInOuterMember.kt");
    }

    @TestMetadata("extenderNestedClass.kt")
    public void testExtenderNestedClass() {
      runTest("compiler/testData/codegen/box/innerNested/extenderNestedClass.kt");
    }

    @TestMetadata("extensionFun.kt")
    public void testExtensionFun() {
      runTest("compiler/testData/codegen/box/innerNested/extensionFun.kt");
    }

    @TestMetadata("extensionToNested.kt")
    public void testExtensionToNested() {
      runTest("compiler/testData/codegen/box/innerNested/extensionToNested.kt");
    }

    @TestMetadata("importNestedClass.kt")
    public void testImportNestedClass() {
      runTest("compiler/testData/codegen/box/innerNested/importNestedClass.kt");
    }

    @TestMetadata("inheritedInnerAndNested.kt")
    public void testInheritedInnerAndNested() {
      runTest("compiler/testData/codegen/box/innerNested/inheritedInnerAndNested.kt");
    }

    @TestMetadata("innerGeneric.kt")
    public void testInnerGeneric() {
      runTest("compiler/testData/codegen/box/innerNested/innerGeneric.kt");
    }

    @TestMetadata("innerGenericClassFromJava.kt")
    public void testInnerGenericClassFromJava() {
      runTest("compiler/testData/codegen/box/innerNested/innerGenericClassFromJava.kt");
    }

    @TestMetadata("innerImplicitParameter.kt")
    public void testInnerImplicitParameter() {
      runTest("compiler/testData/codegen/box/innerNested/innerImplicitParameter.kt");
    }

    @TestMetadata("innerJavaClass.kt")
    public void testInnerJavaClass() {
      runTest("compiler/testData/codegen/box/innerNested/innerJavaClass.kt");
    }

    @TestMetadata("innerLabeledThis.kt")
    public void testInnerLabeledThis() {
      runTest("compiler/testData/codegen/box/innerNested/innerLabeledThis.kt");
    }

    @TestMetadata("innerSimple.kt")
    public void testInnerSimple() {
      runTest("compiler/testData/codegen/box/innerNested/innerSimple.kt");
    }

    @TestMetadata("innerWithDefaultArgument.kt")
    public void testInnerWithDefaultArgument() {
      runTest("compiler/testData/codegen/box/innerNested/innerWithDefaultArgument.kt");
    }

    @TestMetadata("innerWithDefaultArgumentGenericExtensionProperty.kt")
    public void testInnerWithDefaultArgumentGenericExtensionProperty() {
      runTest("compiler/testData/codegen/box/innerNested/innerWithDefaultArgumentGenericExtensionProperty.kt");
    }

    @TestMetadata("innerWithDefaultInner.kt")
    public void testInnerWithDefaultInner() {
      runTest("compiler/testData/codegen/box/innerNested/innerWithDefaultInner.kt");
    }

    @TestMetadata("innerWithThisInDefaultArguments.kt")
    public void testInnerWithThisInDefaultArguments() {
      runTest("compiler/testData/codegen/box/innerNested/innerWithThisInDefaultArguments.kt");
    }

    @TestMetadata("kt3132.kt")
    public void testKt3132() {
      runTest("compiler/testData/codegen/box/innerNested/kt3132.kt");
    }

    @TestMetadata("kt3532.kt")
    public void testKt3532() {
      runTest("compiler/testData/codegen/box/innerNested/kt3532.kt");
    }

    @TestMetadata("kt3812.kt")
    public void testKt3812() {
      runTest("compiler/testData/codegen/box/innerNested/kt3812.kt");
    }

    @TestMetadata("kt3927.kt")
    public void testKt3927() {
      runTest("compiler/testData/codegen/box/innerNested/kt3927.kt");
    }

    @TestMetadata("kt4036.kt")
    public void testKt4036() {
      runTest("compiler/testData/codegen/box/innerNested/kt4036.kt");
    }

    @TestMetadata("kt46829.kt")
    public void testKt46829() {
      runTest("compiler/testData/codegen/box/innerNested/kt46829.kt");
    }

    @TestMetadata("kt5363.kt")
    public void testKt5363() {
      runTest("compiler/testData/codegen/box/innerNested/kt5363.kt");
    }

    @TestMetadata("kt62584.kt")
    public void testKt62584() {
      runTest("compiler/testData/codegen/box/innerNested/kt62584.kt");
    }

    @TestMetadata("kt63732.kt")
    public void testKt63732() {
      runTest("compiler/testData/codegen/box/innerNested/kt63732.kt");
    }

    @TestMetadata("kt6804.kt")
    public void testKt6804() {
      runTest("compiler/testData/codegen/box/innerNested/kt6804.kt");
    }

    @TestMetadata("nestedClassInObject.kt")
    public void testNestedClassInObject() {
      runTest("compiler/testData/codegen/box/innerNested/nestedClassInObject.kt");
    }

    @TestMetadata("nestedClassObject.kt")
    public void testNestedClassObject() {
      runTest("compiler/testData/codegen/box/innerNested/nestedClassObject.kt");
    }

    @TestMetadata("nestedEnumConstant.kt")
    public void testNestedEnumConstant() {
      runTest("compiler/testData/codegen/box/innerNested/nestedEnumConstant.kt");
    }

    @TestMetadata("nestedGeneric.kt")
    public void testNestedGeneric() {
      runTest("compiler/testData/codegen/box/innerNested/nestedGeneric.kt");
    }

    @TestMetadata("nestedInPackage.kt")
    public void testNestedInPackage() {
      runTest("compiler/testData/codegen/box/innerNested/nestedInPackage.kt");
    }

    @TestMetadata("nestedInnerClass.kt")
    public void testNestedInnerClass() {
      runTest("compiler/testData/codegen/box/innerNested/nestedInnerClass.kt");
    }

    @TestMetadata("nestedObjects.kt")
    public void testNestedObjects() {
      runTest("compiler/testData/codegen/box/innerNested/nestedObjects.kt");
    }

    @TestMetadata("nestedSimple.kt")
    public void testNestedSimple() {
      runTest("compiler/testData/codegen/box/innerNested/nestedSimple.kt");
    }

    @TestMetadata("passingOuterRef.kt")
    public void testPassingOuterRef() {
      runTest("compiler/testData/codegen/box/innerNested/passingOuterRef.kt");
    }

    @TestMetadata("protectedNestedClass.kt")
    public void testProtectedNestedClass() {
      runTest("compiler/testData/codegen/box/innerNested/protectedNestedClass.kt");
    }

    @TestMetadata("protectedNestedClassFromJava.kt")
    public void testProtectedNestedClassFromJava() {
      runTest("compiler/testData/codegen/box/innerNested/protectedNestedClassFromJava.kt");
    }

    @TestMetadata("compiler/testData/codegen/box/innerNested/superConstructorCall")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class SuperConstructorCall extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInSuperConstructorCall() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/innerNested/superConstructorCall"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("deepInnerHierarchy.kt")
      public void testDeepInnerHierarchy() {
        runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/deepInnerHierarchy.kt");
      }

      @TestMetadata("deepLocalHierarchy.kt")
      public void testDeepLocalHierarchy() {
        runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/deepLocalHierarchy.kt");
      }

      @TestMetadata("innerExtendsInnerViaSecondaryConstuctor.kt")
      public void testInnerExtendsInnerViaSecondaryConstuctor() {
        runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/innerExtendsInnerViaSecondaryConstuctor.kt");
      }

      @TestMetadata("innerExtendsInnerWithProperOuterCapture.kt")
      public void testInnerExtendsInnerWithProperOuterCapture() {
        runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/innerExtendsInnerWithProperOuterCapture.kt");
      }

      @TestMetadata("innerExtendsOuter.kt")
      public void testInnerExtendsOuter() {
        runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/innerExtendsOuter.kt");
      }

      @TestMetadata("kt11833_1.kt")
      public void testKt11833_1() {
        runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/kt11833_1.kt");
      }

      @TestMetadata("kt11833_2.kt")
      public void testKt11833_2() {
        runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/kt11833_2.kt");
      }

      @TestMetadata("localClassOuterDiffersFromInnerOuter.kt")
      public void testLocalClassOuterDiffersFromInnerOuter() {
        runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/localClassOuterDiffersFromInnerOuter.kt");
      }

      @TestMetadata("localExtendsInner.kt")
      public void testLocalExtendsInner() {
        runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/localExtendsInner.kt");
      }

      @TestMetadata("localExtendsLocalWithClosure.kt")
      public void testLocalExtendsLocalWithClosure() {
        runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/localExtendsLocalWithClosure.kt");
      }

      @TestMetadata("localWithClosureExtendsLocalWithClosure.kt")
      public void testLocalWithClosureExtendsLocalWithClosure() {
        runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/localWithClosureExtendsLocalWithClosure.kt");
      }

      @TestMetadata("objectExtendsClassDefaultArgument.kt")
      public void testObjectExtendsClassDefaultArgument() {
        runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/objectExtendsClassDefaultArgument.kt");
      }

      @TestMetadata("objectExtendsClassVararg.kt")
      public void testObjectExtendsClassVararg() {
        runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/objectExtendsClassVararg.kt");
      }

      @TestMetadata("objectExtendsInner.kt")
      public void testObjectExtendsInner() {
        runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/objectExtendsInner.kt");
      }

      @TestMetadata("objectExtendsInnerDefaultArgument.kt")
      public void testObjectExtendsInnerDefaultArgument() {
        runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/objectExtendsInnerDefaultArgument.kt");
      }

      @TestMetadata("objectExtendsInnerOfLocalVarargAndDefault.kt")
      public void testObjectExtendsInnerOfLocalVarargAndDefault() {
        runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/objectExtendsInnerOfLocalVarargAndDefault.kt");
      }

      @TestMetadata("objectExtendsInnerOfLocalWithCapture.kt")
      public void testObjectExtendsInnerOfLocalWithCapture() {
        runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/objectExtendsInnerOfLocalWithCapture.kt");
      }

      @TestMetadata("objectExtendsInnerWithDelegatingConstructor.kt")
      public void testObjectExtendsInnerWithDelegatingConstructor() {
        runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/objectExtendsInnerWithDelegatingConstructor.kt");
      }

      @TestMetadata("objectExtendsLocalCaptureInSuperCall.kt")
      public void testObjectExtendsLocalCaptureInSuperCall() {
        runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/objectExtendsLocalCaptureInSuperCall.kt");
      }

      @TestMetadata("objectExtendsLocalWithClosure.kt")
      public void testObjectExtendsLocalWithClosure() {
        runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/objectExtendsLocalWithClosure.kt");
      }

      @TestMetadata("objectExtendsLocal_kt16858.kt")
      public void testObjectExtendsLocal_kt16858() {
        runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/objectExtendsLocal_kt16858.kt");
      }

      @TestMetadata("objectOuterDiffersFromInnerOuter.kt")
      public void testObjectOuterDiffersFromInnerOuter() {
        runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/objectOuterDiffersFromInnerOuter.kt");
      }
    }
  }

  @TestMetadata("compiler/testData/codegen/box/instructions")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Instructions extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInInstructions() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/instructions"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("compiler/testData/codegen/box/instructions/swap")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Swap extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInSwap() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/instructions/swap"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("swapRefToSharedVarInt.kt")
      public void testSwapRefToSharedVarInt() {
        runTest("compiler/testData/codegen/box/instructions/swap/swapRefToSharedVarInt.kt");
      }

      @TestMetadata("swapRefToSharedVarLong.kt")
      public void testSwapRefToSharedVarLong() {
        runTest("compiler/testData/codegen/box/instructions/swap/swapRefToSharedVarLong.kt");
      }
    }
  }

  @TestMetadata("compiler/testData/codegen/box/interfaceCallsNCasts")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class InterfaceCallsNCasts extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInInterfaceCallsNCasts() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/interfaceCallsNCasts"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("conservativeItable.kt")
    public void testConservativeItable() {
      runTest("compiler/testData/codegen/box/interfaceCallsNCasts/conservativeItable.kt");
    }

    @TestMetadata("diamond.kt")
    public void testDiamond() {
      runTest("compiler/testData/codegen/box/interfaceCallsNCasts/diamond.kt");
    }

    @TestMetadata("finalMethod.kt")
    public void testFinalMethod() {
      runTest("compiler/testData/codegen/box/interfaceCallsNCasts/finalMethod.kt");
    }

    @TestMetadata("interface0.kt")
    public void testInterface0() {
      runTest("compiler/testData/codegen/box/interfaceCallsNCasts/interface0.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/intrinsics")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Intrinsics extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInIntrinsics() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/intrinsics"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("charToInt.kt")
    public void testCharToInt() {
      runTest("compiler/testData/codegen/box/intrinsics/charToInt.kt");
    }

    @TestMetadata("defaultObjectMapping.kt")
    public void testDefaultObjectMapping() {
      runTest("compiler/testData/codegen/box/intrinsics/defaultObjectMapping.kt");
    }

    @TestMetadata("ea35953.kt")
    public void testEa35953() {
      runTest("compiler/testData/codegen/box/intrinsics/ea35953.kt");
    }

    @TestMetadata("incWithLabel.kt")
    public void testIncWithLabel() {
      runTest("compiler/testData/codegen/box/intrinsics/incWithLabel.kt");
    }

    @TestMetadata("javaObjectType.kt")
    public void testJavaObjectType() {
      runTest("compiler/testData/codegen/box/intrinsics/javaObjectType.kt");
    }

    @TestMetadata("javaPrimitiveType.kt")
    public void testJavaPrimitiveType() {
      runTest("compiler/testData/codegen/box/intrinsics/javaPrimitiveType.kt");
    }

    @TestMetadata("javaPrimitiveType_UnitAndNothing.kt")
    public void testJavaPrimitiveType_UnitAndNothing() {
      runTest("compiler/testData/codegen/box/intrinsics/javaPrimitiveType_UnitAndNothing.kt");
    }

    @TestMetadata("kt10131.kt")
    public void testKt10131() {
      runTest("compiler/testData/codegen/box/intrinsics/kt10131.kt");
    }

    @TestMetadata("kt10131a.kt")
    public void testKt10131a() {
      runTest("compiler/testData/codegen/box/intrinsics/kt10131a.kt");
    }

    @TestMetadata("kt12125.kt")
    public void testKt12125() {
      runTest("compiler/testData/codegen/box/intrinsics/kt12125.kt");
    }

    @TestMetadata("kt12125_2.kt")
    public void testKt12125_2() {
      runTest("compiler/testData/codegen/box/intrinsics/kt12125_2.kt");
    }

    @TestMetadata("kt12125_inc.kt")
    public void testKt12125_inc() {
      runTest("compiler/testData/codegen/box/intrinsics/kt12125_inc.kt");
    }

    @TestMetadata("kt12125_inc_2.kt")
    public void testKt12125_inc_2() {
      runTest("compiler/testData/codegen/box/intrinsics/kt12125_inc_2.kt");
    }

    @TestMetadata("kt52163_boolean.kt")
    public void testKt52163_boolean() {
      runTest("compiler/testData/codegen/box/intrinsics/kt52163_boolean.kt");
    }

    @TestMetadata("kt52163_doubleCompareToInt.kt")
    public void testKt52163_doubleCompareToInt() {
      runTest("compiler/testData/codegen/box/intrinsics/kt52163_doubleCompareToInt.kt");
    }

    @TestMetadata("kt5937.kt")
    public void testKt5937() {
      runTest("compiler/testData/codegen/box/intrinsics/kt5937.kt");
    }

    @TestMetadata("kt8666.kt")
    public void testKt8666() {
      runTest("compiler/testData/codegen/box/intrinsics/kt8666.kt");
    }

    @TestMetadata("longRangeWithExplicitDot.kt")
    public void testLongRangeWithExplicitDot() {
      runTest("compiler/testData/codegen/box/intrinsics/longRangeWithExplicitDot.kt");
    }

    @TestMetadata("monitorEnterMonitorExit.kt")
    public void testMonitorEnterMonitorExit() {
      runTest("compiler/testData/codegen/box/intrinsics/monitorEnterMonitorExit.kt");
    }

    @TestMetadata("nonShortCircuitAnd.kt")
    public void testNonShortCircuitAnd() {
      runTest("compiler/testData/codegen/box/intrinsics/nonShortCircuitAnd.kt");
    }

    @TestMetadata("nullPlusString.kt")
    public void testNullPlusString() {
      runTest("compiler/testData/codegen/box/intrinsics/nullPlusString.kt");
    }

    @TestMetadata("prefixIncDec.kt")
    public void testPrefixIncDec() {
      runTest("compiler/testData/codegen/box/intrinsics/prefixIncDec.kt");
    }

    @TestMetadata("rangeFromCollection.kt")
    public void testRangeFromCollection() {
      runTest("compiler/testData/codegen/box/intrinsics/rangeFromCollection.kt");
    }

    @TestMetadata("stringFromCollection.kt")
    public void testStringFromCollection() {
      runTest("compiler/testData/codegen/box/intrinsics/stringFromCollection.kt");
    }

    @TestMetadata("throwable.kt")
    public void testThrowable() {
      runTest("compiler/testData/codegen/box/intrinsics/throwable.kt");
    }

    @TestMetadata("throwableCallableReference.kt")
    public void testThrowableCallableReference() {
      runTest("compiler/testData/codegen/box/intrinsics/throwableCallableReference.kt");
    }

    @TestMetadata("throwableParamOrder.kt")
    public void testThrowableParamOrder() {
      runTest("compiler/testData/codegen/box/intrinsics/throwableParamOrder.kt");
    }

    @TestMetadata("tostring.kt")
    public void testTostring() {
      runTest("compiler/testData/codegen/box/intrinsics/tostring.kt");
    }

    @TestMetadata("trimMarginWithBlankString.kt")
    public void testTrimMarginWithBlankString() {
      runTest("compiler/testData/codegen/box/intrinsics/trimMarginWithBlankString.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/invokedynamic")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Invokedynamic extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInInvokedynamic() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/invokedynamic"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("extensionFunInvoke.kt")
    public void testExtensionFunInvoke() {
      runTest("compiler/testData/codegen/box/invokedynamic/extensionFunInvoke.kt");
    }

    @TestMetadata("compiler/testData/codegen/box/invokedynamic/lambdas")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Lambdas extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInLambdas() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/invokedynamic/lambdas"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("anyAnnotationDisablesIndyLambdaGeneration.kt")
      public void testAnyAnnotationDisablesIndyLambdaGeneration() {
        runTest("compiler/testData/codegen/box/invokedynamic/lambdas/anyAnnotationDisablesIndyLambdaGeneration.kt");
      }

      @TestMetadata("bigArityExtLambda.kt")
      public void testBigArityExtLambda() {
        runTest("compiler/testData/codegen/box/invokedynamic/lambdas/bigArityExtLambda.kt");
      }

      @TestMetadata("bigArityLambda.kt")
      public void testBigArityLambda() {
        runTest("compiler/testData/codegen/box/invokedynamic/lambdas/bigArityLambda.kt");
      }

      @TestMetadata("capturedDispatchReceiver.kt")
      public void testCapturedDispatchReceiver() {
        runTest("compiler/testData/codegen/box/invokedynamic/lambdas/capturedDispatchReceiver.kt");
      }

      @TestMetadata("capturedExtensionReceiver.kt")
      public void testCapturedExtensionReceiver() {
        runTest("compiler/testData/codegen/box/invokedynamic/lambdas/capturedExtensionReceiver.kt");
      }

      @TestMetadata("capturingValue.kt")
      public void testCapturingValue() {
        runTest("compiler/testData/codegen/box/invokedynamic/lambdas/capturingValue.kt");
      }

      @TestMetadata("capturingVar.kt")
      public void testCapturingVar() {
        runTest("compiler/testData/codegen/box/invokedynamic/lambdas/capturingVar.kt");
      }

      @TestMetadata("extensionLambda.kt")
      public void testExtensionLambda() {
        runTest("compiler/testData/codegen/box/invokedynamic/lambdas/extensionLambda.kt");
      }

      @TestMetadata("genericLambdaSignature.kt")
      public void testGenericLambdaSignature() {
        runTest("compiler/testData/codegen/box/invokedynamic/lambdas/genericLambdaSignature.kt");
      }

      @TestMetadata("jvmSerializableLambda.kt")
      public void testJvmSerializableLambda() {
        runTest("compiler/testData/codegen/box/invokedynamic/lambdas/jvmSerializableLambda.kt");
      }

      @TestMetadata("kt52875.kt")
      public void testKt52875() {
        runTest("compiler/testData/codegen/box/invokedynamic/lambdas/kt52875.kt");
      }

      @TestMetadata("lambdaMetadataFactoryIsNotUsed.kt")
      public void testLambdaMetadataFactoryIsNotUsed() {
        runTest("compiler/testData/codegen/box/invokedynamic/lambdas/lambdaMetadataFactoryIsNotUsed.kt");
      }

      @TestMetadata("lambdaMetafactoryIsUsed.kt")
      public void testLambdaMetafactoryIsUsed() {
        runTest("compiler/testData/codegen/box/invokedynamic/lambdas/lambdaMetafactoryIsUsed.kt");
      }

      @TestMetadata("lambdaSerializable.kt")
      public void testLambdaSerializable() {
        runTest("compiler/testData/codegen/box/invokedynamic/lambdas/lambdaSerializable.kt");
      }

      @TestMetadata("lambdaToSting.kt")
      public void testLambdaToSting() {
        runTest("compiler/testData/codegen/box/invokedynamic/lambdas/lambdaToSting.kt");
      }

      @TestMetadata("nestedIndyLambdas.kt")
      public void testNestedIndyLambdas() {
        runTest("compiler/testData/codegen/box/invokedynamic/lambdas/nestedIndyLambdas.kt");
      }

      @TestMetadata("nullabilityAssertionForCapturedValueParameter.kt")
      public void testNullabilityAssertionForCapturedValueParameter() {
        runTest("compiler/testData/codegen/box/invokedynamic/lambdas/nullabilityAssertionForCapturedValueParameter.kt");
      }

      @TestMetadata("nullabilityAssertionForReceiverParameter.kt")
      public void testNullabilityAssertionForReceiverParameter() {
        runTest("compiler/testData/codegen/box/invokedynamic/lambdas/nullabilityAssertionForReceiverParameter.kt");
      }

      @TestMetadata("nullabilityAssertionForValueParameter.kt")
      public void testNullabilityAssertionForValueParameter() {
        runTest("compiler/testData/codegen/box/invokedynamic/lambdas/nullabilityAssertionForValueParameter.kt");
      }

      @TestMetadata("primitiveValueParameters.kt")
      public void testPrimitiveValueParameters() {
        runTest("compiler/testData/codegen/box/invokedynamic/lambdas/primitiveValueParameters.kt");
      }

      @TestMetadata("simpleIndyLambda.kt")
      public void testSimpleIndyLambda() {
        runTest("compiler/testData/codegen/box/invokedynamic/lambdas/simpleIndyLambda.kt");
      }

      @TestMetadata("suspendLambda.kt")
      public void testSuspendLambda() {
        runTest("compiler/testData/codegen/box/invokedynamic/lambdas/suspendLambda.kt");
      }

      @TestMetadata("voidReturnType.kt")
      public void testVoidReturnType() {
        runTest("compiler/testData/codegen/box/invokedynamic/lambdas/voidReturnType.kt");
      }

      @TestMetadata("compiler/testData/codegen/box/invokedynamic/lambdas/inlineClassInSignature")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class InlineClassInSignature extends AbstractLightAnalysisModeTest {
        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        public void testAllFilesPresentInInlineClassInSignature() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/invokedynamic/lambdas/inlineClassInSignature"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("lambdaWithInlineAny.kt")
        public void testLambdaWithInlineAny() {
          runTest("compiler/testData/codegen/box/invokedynamic/lambdas/inlineClassInSignature/lambdaWithInlineAny.kt");
        }

        @TestMetadata("lambdaWithInlineInt.kt")
        public void testLambdaWithInlineInt() {
          runTest("compiler/testData/codegen/box/invokedynamic/lambdas/inlineClassInSignature/lambdaWithInlineInt.kt");
        }

        @TestMetadata("lambdaWithInlineNAny.kt")
        public void testLambdaWithInlineNAny() {
          runTest("compiler/testData/codegen/box/invokedynamic/lambdas/inlineClassInSignature/lambdaWithInlineNAny.kt");
        }

        @TestMetadata("lambdaWithInlineNInt.kt")
        public void testLambdaWithInlineNInt() {
          runTest("compiler/testData/codegen/box/invokedynamic/lambdas/inlineClassInSignature/lambdaWithInlineNInt.kt");
        }

        @TestMetadata("lambdaWithInlineNString.kt")
        public void testLambdaWithInlineNString() {
          runTest("compiler/testData/codegen/box/invokedynamic/lambdas/inlineClassInSignature/lambdaWithInlineNString.kt");
        }

        @TestMetadata("lambdaWithInlineString.kt")
        public void testLambdaWithInlineString() {
          runTest("compiler/testData/codegen/box/invokedynamic/lambdas/inlineClassInSignature/lambdaWithInlineString.kt");
        }
      }
    }

    @TestMetadata("compiler/testData/codegen/box/invokedynamic/sam")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Sam extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInSam() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/invokedynamic/sam"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("boundFunctionReferenceEquality.kt")
      public void testBoundFunctionReferenceEquality() {
        runTest("compiler/testData/codegen/box/invokedynamic/sam/boundFunctionReferenceEquality.kt");
      }

      @TestMetadata("boundReference.kt")
      public void testBoundReference() {
        runTest("compiler/testData/codegen/box/invokedynamic/sam/boundReference.kt");
      }

      @TestMetadata("builtinMemberReference.kt")
      public void testBuiltinMemberReference() {
        runTest("compiler/testData/codegen/box/invokedynamic/sam/builtinMemberReference.kt");
      }

      @TestMetadata("capturedDispatchReceiver.kt")
      public void testCapturedDispatchReceiver() {
        runTest("compiler/testData/codegen/box/invokedynamic/sam/capturedDispatchReceiver.kt");
      }

      @TestMetadata("capturedExtensionReceiver.kt")
      public void testCapturedExtensionReceiver() {
        runTest("compiler/testData/codegen/box/invokedynamic/sam/capturedExtensionReceiver.kt");
      }

      @TestMetadata("capturingIndyFunInterface.kt")
      public void testCapturingIndyFunInterface() {
        runTest("compiler/testData/codegen/box/invokedynamic/sam/capturingIndyFunInterface.kt");
      }

      @TestMetadata("capturingIndySam.kt")
      public void testCapturingIndySam() {
        runTest("compiler/testData/codegen/box/invokedynamic/sam/capturingIndySam.kt");
      }

      @TestMetadata("capturingVar.kt")
      public void testCapturingVar() {
        runTest("compiler/testData/codegen/box/invokedynamic/sam/capturingVar.kt");
      }

      @TestMetadata("constructorReference.kt")
      public void testConstructorReference() {
        runTest("compiler/testData/codegen/box/invokedynamic/sam/constructorReference.kt");
      }

      @TestMetadata("covariantOverrideWithPrimitive.kt")
      public void testCovariantOverrideWithPrimitive() {
        runTest("compiler/testData/codegen/box/invokedynamic/sam/covariantOverrideWithPrimitive.kt");
      }

      @TestMetadata("enhancedNullabilityMix.kt")
      public void testEnhancedNullabilityMix() {
        runTest("compiler/testData/codegen/box/invokedynamic/sam/enhancedNullabilityMix.kt");
      }

      @TestMetadata("genericFunInterface.kt")
      public void testGenericFunInterface() {
        runTest("compiler/testData/codegen/box/invokedynamic/sam/genericFunInterface.kt");
      }

      @TestMetadata("genericFunInterfaceWithPrimitive.kt")
      public void testGenericFunInterfaceWithPrimitive() {
        runTest("compiler/testData/codegen/box/invokedynamic/sam/genericFunInterfaceWithPrimitive.kt");
      }

      @TestMetadata("genericLambdaSignature.kt")
      public void testGenericLambdaSignature() {
        runTest("compiler/testData/codegen/box/invokedynamic/sam/genericLambdaSignature.kt");
      }

      @TestMetadata("inlineFunWithPrivateMethod.kt")
      public void testInlineFunWithPrivateMethod() {
        runTest("compiler/testData/codegen/box/invokedynamic/sam/inlineFunWithPrivateMethod.kt");
      }

      @TestMetadata("inlineOnly.kt")
      public void testInlineOnly() {
        runTest("compiler/testData/codegen/box/invokedynamic/sam/inlineOnly.kt");
      }

      @TestMetadata("insideInitBlock.kt")
      public void testInsideInitBlock() {
        runTest("compiler/testData/codegen/box/invokedynamic/sam/insideInitBlock.kt");
      }

      @TestMetadata("intReturnTypeAsNumber.kt")
      public void testIntReturnTypeAsNumber() {
        runTest("compiler/testData/codegen/box/invokedynamic/sam/intReturnTypeAsNumber.kt");
      }

      @TestMetadata("kt45779.kt")
      public void testKt45779() {
        runTest("compiler/testData/codegen/box/invokedynamic/sam/kt45779.kt");
      }

      @TestMetadata("kt47510.kt")
      public void testKt47510() {
        runTest("compiler/testData/codegen/box/invokedynamic/sam/kt47510.kt");
      }

      @TestMetadata("kt51282.kt")
      public void testKt51282() {
        runTest("compiler/testData/codegen/box/invokedynamic/sam/kt51282.kt");
      }

      @TestMetadata("kt512832_inherit_multifile_parts.kt")
      public void testKt512832_inherit_multifile_parts() {
        runTest("compiler/testData/codegen/box/invokedynamic/sam/kt512832_inherit_multifile_parts.kt");
      }

      @TestMetadata("kt51868_contravariantGenericSam.kt")
      public void testKt51868_contravariantGenericSam() {
        runTest("compiler/testData/codegen/box/invokedynamic/sam/kt51868_contravariantGenericSam.kt");
      }

      @TestMetadata("kt52040_severalProxyFunsInInit.kt")
      public void testKt52040_severalProxyFunsInInit() {
        runTest("compiler/testData/codegen/box/invokedynamic/sam/kt52040_severalProxyFunsInInit.kt");
      }

      @TestMetadata("nullabilityAssertions.kt")
      public void testNullabilityAssertions() {
        runTest("compiler/testData/codegen/box/invokedynamic/sam/nullabilityAssertions.kt");
      }

      @TestMetadata("possibleOverrideClash.kt")
      public void testPossibleOverrideClash() {
        runTest("compiler/testData/codegen/box/invokedynamic/sam/possibleOverrideClash.kt");
      }

      @TestMetadata("primitiveVsWrapperInSam.kt")
      public void testPrimitiveVsWrapperInSam() {
        runTest("compiler/testData/codegen/box/invokedynamic/sam/primitiveVsWrapperInSam.kt");
      }

      @TestMetadata("reifiedTypeParameter.kt")
      public void testReifiedTypeParameter() {
        runTest("compiler/testData/codegen/box/invokedynamic/sam/reifiedTypeParameter.kt");
      }

      @TestMetadata("samConversionInsideSamConvertedLambda.kt")
      public void testSamConversionInsideSamConvertedLambda() {
        runTest("compiler/testData/codegen/box/invokedynamic/sam/samConversionInsideSamConvertedLambda.kt");
      }

      @TestMetadata("samConversionOnFunctionReference.kt")
      public void testSamConversionOnFunctionReference() {
        runTest("compiler/testData/codegen/box/invokedynamic/sam/samConversionOnFunctionReference.kt");
      }

      @TestMetadata("samExtFunWithCapturingLambda.kt")
      public void testSamExtFunWithCapturingLambda() {
        runTest("compiler/testData/codegen/box/invokedynamic/sam/samExtFunWithCapturingLambda.kt");
      }

      @TestMetadata("serializableSam1.kt")
      public void testSerializableSam1() {
        runTest("compiler/testData/codegen/box/invokedynamic/sam/serializableSam1.kt");
      }

      @TestMetadata("serializableSam2.kt")
      public void testSerializableSam2() {
        runTest("compiler/testData/codegen/box/invokedynamic/sam/serializableSam2.kt");
      }

      @TestMetadata("simpleFunInterfaceConstructor.kt")
      public void testSimpleFunInterfaceConstructor() {
        runTest("compiler/testData/codegen/box/invokedynamic/sam/simpleFunInterfaceConstructor.kt");
      }

      @TestMetadata("simpleIndyFunInterface.kt")
      public void testSimpleIndyFunInterface() {
        runTest("compiler/testData/codegen/box/invokedynamic/sam/simpleIndyFunInterface.kt");
      }

      @TestMetadata("simpleIndySam.kt")
      public void testSimpleIndySam() {
        runTest("compiler/testData/codegen/box/invokedynamic/sam/simpleIndySam.kt");
      }

      @TestMetadata("starProjectionSam.kt")
      public void testStarProjectionSam() {
        runTest("compiler/testData/codegen/box/invokedynamic/sam/starProjectionSam.kt");
      }

      @TestMetadata("streamApi1.kt")
      public void testStreamApi1() {
        runTest("compiler/testData/codegen/box/invokedynamic/sam/streamApi1.kt");
      }

      @TestMetadata("streamApi2.kt")
      public void testStreamApi2() {
        runTest("compiler/testData/codegen/box/invokedynamic/sam/streamApi2.kt");
      }

      @TestMetadata("suspendFunInterface.kt")
      public void testSuspendFunInterface() {
        runTest("compiler/testData/codegen/box/invokedynamic/sam/suspendFunInterface.kt");
      }

      @TestMetadata("unboundFunctionReferenceEquality.kt")
      public void testUnboundFunctionReferenceEquality() {
        runTest("compiler/testData/codegen/box/invokedynamic/sam/unboundFunctionReferenceEquality.kt");
      }

      @TestMetadata("compiler/testData/codegen/box/invokedynamic/sam/functionExprToJavaInterface")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class FunctionExprToJavaInterface extends AbstractLightAnalysisModeTest {
        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        public void testAllFilesPresentInFunctionExprToJavaInterface() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/invokedynamic/sam/functionExprToJavaInterface"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("capturedSamArgument.kt")
        public void testCapturedSamArgument() {
          runTest("compiler/testData/codegen/box/invokedynamic/sam/functionExprToJavaInterface/capturedSamArgument.kt");
        }

        @TestMetadata("capturingLambda.kt")
        public void testCapturingLambda() {
          runTest("compiler/testData/codegen/box/invokedynamic/sam/functionExprToJavaInterface/capturingLambda.kt");
        }

        @TestMetadata("extensionLambda1.kt")
        public void testExtensionLambda1() {
          runTest("compiler/testData/codegen/box/invokedynamic/sam/functionExprToJavaInterface/extensionLambda1.kt");
        }

        @TestMetadata("extensionLambda2.kt")
        public void testExtensionLambda2() {
          runTest("compiler/testData/codegen/box/invokedynamic/sam/functionExprToJavaInterface/extensionLambda2.kt");
        }

        @TestMetadata("genericSam1.kt")
        public void testGenericSam1() {
          runTest("compiler/testData/codegen/box/invokedynamic/sam/functionExprToJavaInterface/genericSam1.kt");
        }

        @TestMetadata("genericSam2.kt")
        public void testGenericSam2() {
          runTest("compiler/testData/codegen/box/invokedynamic/sam/functionExprToJavaInterface/genericSam2.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() {
          runTest("compiler/testData/codegen/box/invokedynamic/sam/functionExprToJavaInterface/simple.kt");
        }
      }

      @TestMetadata("compiler/testData/codegen/box/invokedynamic/sam/functionRefToJavaInterface")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class FunctionRefToJavaInterface extends AbstractLightAnalysisModeTest {
        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        @TestMetadata("adaptedFunRefWithCoercionToUnit.kt")
        public void testAdaptedFunRefWithCoercionToUnit() {
          runTest("compiler/testData/codegen/box/invokedynamic/sam/functionRefToJavaInterface/adaptedFunRefWithCoercionToUnit.kt");
        }

        @TestMetadata("adaptedFunRefWithDefaultParameters.kt")
        public void testAdaptedFunRefWithDefaultParameters() {
          runTest("compiler/testData/codegen/box/invokedynamic/sam/functionRefToJavaInterface/adaptedFunRefWithDefaultParameters.kt");
        }

        @TestMetadata("adaptedFunRefWithVararg.kt")
        public void testAdaptedFunRefWithVararg() {
          runTest("compiler/testData/codegen/box/invokedynamic/sam/functionRefToJavaInterface/adaptedFunRefWithVararg.kt");
        }

        public void testAllFilesPresentInFunctionRefToJavaInterface() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/invokedynamic/sam/functionRefToJavaInterface"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("boundExtFun.kt")
        public void testBoundExtFun() {
          runTest("compiler/testData/codegen/box/invokedynamic/sam/functionRefToJavaInterface/boundExtFun.kt");
        }

        @TestMetadata("boundInnerConstructorRef.kt")
        public void testBoundInnerConstructorRef() {
          runTest("compiler/testData/codegen/box/invokedynamic/sam/functionRefToJavaInterface/boundInnerConstructorRef.kt");
        }

        @TestMetadata("boundLocalExtFun.kt")
        public void testBoundLocalExtFun() {
          runTest("compiler/testData/codegen/box/invokedynamic/sam/functionRefToJavaInterface/boundLocalExtFun.kt");
        }

        @TestMetadata("boundMemberRef.kt")
        public void testBoundMemberRef() {
          runTest("compiler/testData/codegen/box/invokedynamic/sam/functionRefToJavaInterface/boundMemberRef.kt");
        }

        @TestMetadata("boundRefToSuperClassMethod.kt")
        public void testBoundRefToSuperClassMethod() {
          runTest("compiler/testData/codegen/box/invokedynamic/sam/functionRefToJavaInterface/boundRefToSuperClassMethod.kt");
        }

        @TestMetadata("boundRefToSuperInterfaceMethod.kt")
        public void testBoundRefToSuperInterfaceMethod() {
          runTest("compiler/testData/codegen/box/invokedynamic/sam/functionRefToJavaInterface/boundRefToSuperInterfaceMethod.kt");
        }

        @TestMetadata("constructorRef.kt")
        public void testConstructorRef() {
          runTest("compiler/testData/codegen/box/invokedynamic/sam/functionRefToJavaInterface/constructorRef.kt");
        }

        @TestMetadata("enhancedNullability.kt")
        public void testEnhancedNullability() {
          runTest("compiler/testData/codegen/box/invokedynamic/sam/functionRefToJavaInterface/enhancedNullability.kt");
        }

        @TestMetadata("genericBoundInnerConstructorRef.kt")
        public void testGenericBoundInnerConstructorRef() {
          runTest("compiler/testData/codegen/box/invokedynamic/sam/functionRefToJavaInterface/genericBoundInnerConstructorRef.kt");
        }

        @TestMetadata("genericFunRef.kt")
        public void testGenericFunRef() {
          runTest("compiler/testData/codegen/box/invokedynamic/sam/functionRefToJavaInterface/genericFunRef.kt");
        }

        @TestMetadata("genericInnerConstructorRef.kt")
        public void testGenericInnerConstructorRef() {
          runTest("compiler/testData/codegen/box/invokedynamic/sam/functionRefToJavaInterface/genericInnerConstructorRef.kt");
        }

        @TestMetadata("highOrderFunRef.kt")
        public void testHighOrderFunRef() {
          runTest("compiler/testData/codegen/box/invokedynamic/sam/functionRefToJavaInterface/highOrderFunRef.kt");
        }

        @TestMetadata("inlineFunRef.kt")
        public void testInlineFunRef() {
          runTest("compiler/testData/codegen/box/invokedynamic/sam/functionRefToJavaInterface/inlineFunRef.kt");
        }

        @TestMetadata("inlineFunWithReifiedTypeParameterRef.kt")
        public void testInlineFunWithReifiedTypeParameterRef() {
          runTest("compiler/testData/codegen/box/invokedynamic/sam/functionRefToJavaInterface/inlineFunWithReifiedTypeParameterRef.kt");
        }

        @TestMetadata("inlineHighOrderFunRef.kt")
        public void testInlineHighOrderFunRef() {
          runTest("compiler/testData/codegen/box/invokedynamic/sam/functionRefToJavaInterface/inlineHighOrderFunRef.kt");
        }

        @TestMetadata("innerConstructorRef.kt")
        public void testInnerConstructorRef() {
          runTest("compiler/testData/codegen/box/invokedynamic/sam/functionRefToJavaInterface/innerConstructorRef.kt");
        }

        @TestMetadata("intReturnTypeAsNumber.kt")
        public void testIntReturnTypeAsNumber() {
          runTest("compiler/testData/codegen/box/invokedynamic/sam/functionRefToJavaInterface/intReturnTypeAsNumber.kt");
        }

        @TestMetadata("interfaceMemberRef.kt")
        public void testInterfaceMemberRef() {
          runTest("compiler/testData/codegen/box/invokedynamic/sam/functionRefToJavaInterface/interfaceMemberRef.kt");
        }

        @TestMetadata("kt45581.kt")
        public void testKt45581() {
          runTest("compiler/testData/codegen/box/invokedynamic/sam/functionRefToJavaInterface/kt45581.kt");
        }

        @TestMetadata("kt46408.kt")
        public void testKt46408() {
          runTest("compiler/testData/codegen/box/invokedynamic/sam/functionRefToJavaInterface/kt46408.kt");
        }

        @TestMetadata("kt49613.kt")
        public void testKt49613() {
          runTest("compiler/testData/codegen/box/invokedynamic/sam/functionRefToJavaInterface/kt49613.kt");
        }

        @TestMetadata("kt50856.kt")
        public void testKt50856() {
          runTest("compiler/testData/codegen/box/invokedynamic/sam/functionRefToJavaInterface/kt50856.kt");
        }

        @TestMetadata("localFunction1.kt")
        public void testLocalFunction1() {
          runTest("compiler/testData/codegen/box/invokedynamic/sam/functionRefToJavaInterface/localFunction1.kt");
        }

        @TestMetadata("localFunction2.kt")
        public void testLocalFunction2() {
          runTest("compiler/testData/codegen/box/invokedynamic/sam/functionRefToJavaInterface/localFunction2.kt");
        }

        @TestMetadata("memberRef.kt")
        public void testMemberRef() {
          runTest("compiler/testData/codegen/box/invokedynamic/sam/functionRefToJavaInterface/memberRef.kt");
        }

        @TestMetadata("multifileClassMemberFromStdlib.kt")
        public void testMultifileClassMemberFromStdlib() {
          runTest("compiler/testData/codegen/box/invokedynamic/sam/functionRefToJavaInterface/multifileClassMemberFromStdlib.kt");
        }

        @TestMetadata("multipleProxyWrappersForSameFunction.kt")
        public void testMultipleProxyWrappersForSameFunction() {
          runTest("compiler/testData/codegen/box/invokedynamic/sam/functionRefToJavaInterface/multipleProxyWrappersForSameFunction.kt");
        }

        @TestMetadata("nonTrivialReceiver.kt")
        public void testNonTrivialReceiver() {
          runTest("compiler/testData/codegen/box/invokedynamic/sam/functionRefToJavaInterface/nonTrivialReceiver.kt");
        }

        @TestMetadata("nothingReturnTypeAsObject.kt")
        public void testNothingReturnTypeAsObject() {
          runTest("compiler/testData/codegen/box/invokedynamic/sam/functionRefToJavaInterface/nothingReturnTypeAsObject.kt");
        }

        @TestMetadata("nothingReturnTypeAsString.kt")
        public void testNothingReturnTypeAsString() {
          runTest("compiler/testData/codegen/box/invokedynamic/sam/functionRefToJavaInterface/nothingReturnTypeAsString.kt");
        }

        @TestMetadata("nullableNothingReturnTypeAsObject.kt")
        public void testNullableNothingReturnTypeAsObject() {
          runTest("compiler/testData/codegen/box/invokedynamic/sam/functionRefToJavaInterface/nullableNothingReturnTypeAsObject.kt");
        }

        @TestMetadata("nullableNothingReturnTypeAsString.kt")
        public void testNullableNothingReturnTypeAsString() {
          runTest("compiler/testData/codegen/box/invokedynamic/sam/functionRefToJavaInterface/nullableNothingReturnTypeAsString.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() {
          runTest("compiler/testData/codegen/box/invokedynamic/sam/functionRefToJavaInterface/simple.kt");
        }

        @TestMetadata("voidReturnTypeAsObject.kt")
        public void testVoidReturnTypeAsObject() {
          runTest("compiler/testData/codegen/box/invokedynamic/sam/functionRefToJavaInterface/voidReturnTypeAsObject.kt");
        }

        @TestMetadata("compiler/testData/codegen/box/invokedynamic/sam/functionRefToJavaInterface/specialFunctions")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class SpecialFunctions extends AbstractLightAnalysisModeTest {
          private void runTest(String testDataFilePath) {
            KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
          }

          public void testAllFilesPresentInSpecialFunctions() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/invokedynamic/sam/functionRefToJavaInterface/specialFunctions"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }

          @TestMetadata("anyNToString.kt")
          public void testAnyNToString() {
            runTest("compiler/testData/codegen/box/invokedynamic/sam/functionRefToJavaInterface/specialFunctions/anyNToString.kt");
          }

          @TestMetadata("arrayConstructor.kt")
          public void testArrayConstructor() {
            runTest("compiler/testData/codegen/box/invokedynamic/sam/functionRefToJavaInterface/specialFunctions/arrayConstructor.kt");
          }

          @TestMetadata("arrayOf.kt")
          public void testArrayOf() {
            runTest("compiler/testData/codegen/box/invokedynamic/sam/functionRefToJavaInterface/specialFunctions/arrayOf.kt");
          }

          @TestMetadata("charArrayOf.kt")
          public void testCharArrayOf() {
            runTest("compiler/testData/codegen/box/invokedynamic/sam/functionRefToJavaInterface/specialFunctions/charArrayOf.kt");
          }

          @TestMetadata("enumValueOf.kt")
          public void testEnumValueOf() {
            runTest("compiler/testData/codegen/box/invokedynamic/sam/functionRefToJavaInterface/specialFunctions/enumValueOf.kt");
          }

          @TestMetadata("enumValues.kt")
          public void testEnumValues() {
            runTest("compiler/testData/codegen/box/invokedynamic/sam/functionRefToJavaInterface/specialFunctions/enumValues.kt");
          }

          @TestMetadata("intArrayOf.kt")
          public void testIntArrayOf() {
            runTest("compiler/testData/codegen/box/invokedynamic/sam/functionRefToJavaInterface/specialFunctions/intArrayOf.kt");
          }

          @TestMetadata("intPlus.kt")
          public void testIntPlus() {
            runTest("compiler/testData/codegen/box/invokedynamic/sam/functionRefToJavaInterface/specialFunctions/intPlus.kt");
          }

          @TestMetadata("stringNPlus.kt")
          public void testStringNPlus() {
            runTest("compiler/testData/codegen/box/invokedynamic/sam/functionRefToJavaInterface/specialFunctions/stringNPlus.kt");
          }
        }

        @TestMetadata("compiler/testData/codegen/box/invokedynamic/sam/functionRefToJavaInterface/withAccessor")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class WithAccessor extends AbstractLightAnalysisModeTest {
          private void runTest(String testDataFilePath) {
            KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
          }

          public void testAllFilesPresentInWithAccessor() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/invokedynamic/sam/functionRefToJavaInterface/withAccessor"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }

          @TestMetadata("privateBoundOuterClassMemberFun.kt")
          public void testPrivateBoundOuterClassMemberFun() {
            runTest("compiler/testData/codegen/box/invokedynamic/sam/functionRefToJavaInterface/withAccessor/privateBoundOuterClassMemberFun.kt");
          }

          @TestMetadata("privateCompanionObjectMember.kt")
          public void testPrivateCompanionObjectMember() {
            runTest("compiler/testData/codegen/box/invokedynamic/sam/functionRefToJavaInterface/withAccessor/privateCompanionObjectMember.kt");
          }

          @TestMetadata("privateOuterClassConstructor.kt")
          public void testPrivateOuterClassConstructor() {
            runTest("compiler/testData/codegen/box/invokedynamic/sam/functionRefToJavaInterface/withAccessor/privateOuterClassConstructor.kt");
          }

          @TestMetadata("privateOuterClassMemberFun.kt")
          public void testPrivateOuterClassMemberFun() {
            runTest("compiler/testData/codegen/box/invokedynamic/sam/functionRefToJavaInterface/withAccessor/privateOuterClassMemberFun.kt");
          }

          @TestMetadata("privateTopLevelExtFun.kt")
          public void testPrivateTopLevelExtFun() {
            runTest("compiler/testData/codegen/box/invokedynamic/sam/functionRefToJavaInterface/withAccessor/privateTopLevelExtFun.kt");
          }

          @TestMetadata("privateTopLevelFun.kt")
          public void testPrivateTopLevelFun() {
            runTest("compiler/testData/codegen/box/invokedynamic/sam/functionRefToJavaInterface/withAccessor/privateTopLevelFun.kt");
          }

          @TestMetadata("protectedCompanionObjectStaticMember.kt")
          public void testProtectedCompanionObjectStaticMember() {
            runTest("compiler/testData/codegen/box/invokedynamic/sam/functionRefToJavaInterface/withAccessor/protectedCompanionObjectStaticMember.kt");
          }

          @TestMetadata("protectedMember.kt")
          public void testProtectedMember() {
            runTest("compiler/testData/codegen/box/invokedynamic/sam/functionRefToJavaInterface/withAccessor/protectedMember.kt");
          }
        }
      }

      @TestMetadata("compiler/testData/codegen/box/invokedynamic/sam/inlineClassInSignature")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class InlineClassInSignature extends AbstractLightAnalysisModeTest {
        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        public void testAllFilesPresentInInlineClassInSignature() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/invokedynamic/sam/inlineClassInSignature"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("funInterfaceWithInlineAny.kt")
        public void testFunInterfaceWithInlineAny() {
          runTest("compiler/testData/codegen/box/invokedynamic/sam/inlineClassInSignature/funInterfaceWithInlineAny.kt");
        }

        @TestMetadata("funInterfaceWithInlineInt.kt")
        public void testFunInterfaceWithInlineInt() {
          runTest("compiler/testData/codegen/box/invokedynamic/sam/inlineClassInSignature/funInterfaceWithInlineInt.kt");
        }

        @TestMetadata("funInterfaceWithInlineNAny.kt")
        public void testFunInterfaceWithInlineNAny() {
          runTest("compiler/testData/codegen/box/invokedynamic/sam/inlineClassInSignature/funInterfaceWithInlineNAny.kt");
        }

        @TestMetadata("funInterfaceWithInlineNInt.kt")
        public void testFunInterfaceWithInlineNInt() {
          runTest("compiler/testData/codegen/box/invokedynamic/sam/inlineClassInSignature/funInterfaceWithInlineNInt.kt");
        }

        @TestMetadata("funInterfaceWithInlineNString.kt")
        public void testFunInterfaceWithInlineNString() {
          runTest("compiler/testData/codegen/box/invokedynamic/sam/inlineClassInSignature/funInterfaceWithInlineNString.kt");
        }

        @TestMetadata("funInterfaceWithInlineString.kt")
        public void testFunInterfaceWithInlineString() {
          runTest("compiler/testData/codegen/box/invokedynamic/sam/inlineClassInSignature/funInterfaceWithInlineString.kt");
        }

        @TestMetadata("genericFunInterfaceWithInlineAny.kt")
        public void testGenericFunInterfaceWithInlineAny() {
          runTest("compiler/testData/codegen/box/invokedynamic/sam/inlineClassInSignature/genericFunInterfaceWithInlineAny.kt");
        }

        @TestMetadata("genericFunInterfaceWithInlineInt.kt")
        public void testGenericFunInterfaceWithInlineInt() {
          runTest("compiler/testData/codegen/box/invokedynamic/sam/inlineClassInSignature/genericFunInterfaceWithInlineInt.kt");
        }

        @TestMetadata("genericFunInterfaceWithInlineNAny.kt")
        public void testGenericFunInterfaceWithInlineNAny() {
          runTest("compiler/testData/codegen/box/invokedynamic/sam/inlineClassInSignature/genericFunInterfaceWithInlineNAny.kt");
        }

        @TestMetadata("genericFunInterfaceWithInlineNInt.kt")
        public void testGenericFunInterfaceWithInlineNInt() {
          runTest("compiler/testData/codegen/box/invokedynamic/sam/inlineClassInSignature/genericFunInterfaceWithInlineNInt.kt");
        }

        @TestMetadata("genericFunInterfaceWithInlineNString.kt")
        public void testGenericFunInterfaceWithInlineNString() {
          runTest("compiler/testData/codegen/box/invokedynamic/sam/inlineClassInSignature/genericFunInterfaceWithInlineNString.kt");
        }

        @TestMetadata("genericFunInterfaceWithInlineString.kt")
        public void testGenericFunInterfaceWithInlineString() {
          runTest("compiler/testData/codegen/box/invokedynamic/sam/inlineClassInSignature/genericFunInterfaceWithInlineString.kt");
        }
      }

      @TestMetadata("compiler/testData/codegen/box/invokedynamic/sam/specializedGenerics")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class SpecializedGenerics extends AbstractLightAnalysisModeTest {
        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        public void testAllFilesPresentInSpecializedGenerics() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/invokedynamic/sam/specializedGenerics"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("covariantOverride.kt")
        public void testCovariantOverride() {
          runTest("compiler/testData/codegen/box/invokedynamic/sam/specializedGenerics/covariantOverride.kt");
        }

        @TestMetadata("covariantOverrideWithNNothing.kt")
        public void testCovariantOverrideWithNNothing() {
          runTest("compiler/testData/codegen/box/invokedynamic/sam/specializedGenerics/covariantOverrideWithNNothing.kt");
        }

        @TestMetadata("genericWithInProjection.kt")
        public void testGenericWithInProjection() {
          runTest("compiler/testData/codegen/box/invokedynamic/sam/specializedGenerics/genericWithInProjection.kt");
        }

        @TestMetadata("genericWithInProjectionWithIndyLambdas.kt")
        public void testGenericWithInProjectionWithIndyLambdas() {
          runTest("compiler/testData/codegen/box/invokedynamic/sam/specializedGenerics/genericWithInProjectionWithIndyLambdas.kt");
        }

        @TestMetadata("genericWithStarProjection.kt")
        public void testGenericWithStarProjection() {
          runTest("compiler/testData/codegen/box/invokedynamic/sam/specializedGenerics/genericWithStarProjection.kt");
        }

        @TestMetadata("inheritedWithChar.kt")
        public void testInheritedWithChar() {
          runTest("compiler/testData/codegen/box/invokedynamic/sam/specializedGenerics/inheritedWithChar.kt");
        }

        @TestMetadata("inheritedWithCharDiamond.kt")
        public void testInheritedWithCharDiamond() {
          runTest("compiler/testData/codegen/box/invokedynamic/sam/specializedGenerics/inheritedWithCharDiamond.kt");
        }

        @TestMetadata("inheritedWithCharExplicitlyOverridden.kt")
        public void testInheritedWithCharExplicitlyOverridden() {
          runTest("compiler/testData/codegen/box/invokedynamic/sam/specializedGenerics/inheritedWithCharExplicitlyOverridden.kt");
        }

        @TestMetadata("inheritedWithInt.kt")
        public void testInheritedWithInt() {
          runTest("compiler/testData/codegen/box/invokedynamic/sam/specializedGenerics/inheritedWithInt.kt");
        }

        @TestMetadata("inheritedWithString.kt")
        public void testInheritedWithString() {
          runTest("compiler/testData/codegen/box/invokedynamic/sam/specializedGenerics/inheritedWithString.kt");
        }

        @TestMetadata("inheritedWithUnit.kt")
        public void testInheritedWithUnit() {
          runTest("compiler/testData/codegen/box/invokedynamic/sam/specializedGenerics/inheritedWithUnit.kt");
        }

        @TestMetadata("mixGenericAndIntArray.kt")
        public void testMixGenericAndIntArray() {
          runTest("compiler/testData/codegen/box/invokedynamic/sam/specializedGenerics/mixGenericAndIntArray.kt");
        }

        @TestMetadata("mixGenericAndString.kt")
        public void testMixGenericAndString() {
          runTest("compiler/testData/codegen/box/invokedynamic/sam/specializedGenerics/mixGenericAndString.kt");
        }

        @TestMetadata("mixGenericArrayAndArrayOfString.kt")
        public void testMixGenericArrayAndArrayOfString() {
          runTest("compiler/testData/codegen/box/invokedynamic/sam/specializedGenerics/mixGenericArrayAndArrayOfString.kt");
        }

        @TestMetadata("mixPrimitiveAndBoxed.kt")
        public void testMixPrimitiveAndBoxed() {
          runTest("compiler/testData/codegen/box/invokedynamic/sam/specializedGenerics/mixPrimitiveAndBoxed.kt");
        }

        @TestMetadata("nothingReturnTypeAsGeneric.kt")
        public void testNothingReturnTypeAsGeneric() {
          runTest("compiler/testData/codegen/box/invokedynamic/sam/specializedGenerics/nothingReturnTypeAsGeneric.kt");
        }

        @TestMetadata("nothingReturnTypeAsString.kt")
        public void testNothingReturnTypeAsString() {
          runTest("compiler/testData/codegen/box/invokedynamic/sam/specializedGenerics/nothingReturnTypeAsString.kt");
        }

        @TestMetadata("specializedWithChar.kt")
        public void testSpecializedWithChar() {
          runTest("compiler/testData/codegen/box/invokedynamic/sam/specializedGenerics/specializedWithChar.kt");
        }

        @TestMetadata("specializedWithCharClass.kt")
        public void testSpecializedWithCharClass() {
          runTest("compiler/testData/codegen/box/invokedynamic/sam/specializedGenerics/specializedWithCharClass.kt");
        }

        @TestMetadata("specializedWithReifiedTypeParameter.kt")
        public void testSpecializedWithReifiedTypeParameter() {
          runTest("compiler/testData/codegen/box/invokedynamic/sam/specializedGenerics/specializedWithReifiedTypeParameter.kt");
        }

        @TestMetadata("specializedWithString.kt")
        public void testSpecializedWithString() {
          runTest("compiler/testData/codegen/box/invokedynamic/sam/specializedGenerics/specializedWithString.kt");
        }

        @TestMetadata("voidReturnTypeAsGeneric.kt")
        public void testVoidReturnTypeAsGeneric() {
          runTest("compiler/testData/codegen/box/invokedynamic/sam/specializedGenerics/voidReturnTypeAsGeneric.kt");
        }
      }
    }

    @TestMetadata("compiler/testData/codegen/box/invokedynamic/serializable")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Serializable extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInSerializable() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/invokedynamic/serializable"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("multipleTopLevelFunRefs.kt")
      public void testMultipleTopLevelFunRefs() {
        runTest("compiler/testData/codegen/box/invokedynamic/serializable/multipleTopLevelFunRefs.kt");
      }

      @TestMetadata("sameImplMethodDifferentInterfaces.kt")
      public void testSameImplMethodDifferentInterfaces() {
        runTest("compiler/testData/codegen/box/invokedynamic/serializable/sameImplMethodDifferentInterfaces.kt");
      }

      @TestMetadata("sameInterfaceDifferentCapturedValueTypes.kt")
      public void testSameInterfaceDifferentCapturedValueTypes() {
        runTest("compiler/testData/codegen/box/invokedynamic/serializable/sameInterfaceDifferentCapturedValueTypes.kt");
      }

      @TestMetadata("sameInterfaceDifferentCapturedValues.kt")
      public void testSameInterfaceDifferentCapturedValues() {
        runTest("compiler/testData/codegen/box/invokedynamic/serializable/sameInterfaceDifferentCapturedValues.kt");
      }

      @TestMetadata("serializableBoundClassMemberFunRef.kt")
      public void testSerializableBoundClassMemberFunRef() {
        runTest("compiler/testData/codegen/box/invokedynamic/serializable/serializableBoundClassMemberFunRef.kt");
      }

      @TestMetadata("serializableBoundInnerConstructorRef.kt")
      public void testSerializableBoundInnerConstructorRef() {
        runTest("compiler/testData/codegen/box/invokedynamic/serializable/serializableBoundInnerConstructorRef.kt");
      }

      @TestMetadata("serializableBoundInterfaceMemberFunRef.kt")
      public void testSerializableBoundInterfaceMemberFunRef() {
        runTest("compiler/testData/codegen/box/invokedynamic/serializable/serializableBoundInterfaceMemberFunRef.kt");
      }

      @TestMetadata("serializableBoundTopLevelExtensionFunRef.kt")
      public void testSerializableBoundTopLevelExtensionFunRef() {
        runTest("compiler/testData/codegen/box/invokedynamic/serializable/serializableBoundTopLevelExtensionFunRef.kt");
      }

      @TestMetadata("serializableBoundTopLevelExtensionFunRefPrimitiveReceiver.kt")
      public void testSerializableBoundTopLevelExtensionFunRefPrimitiveReceiver() {
        runTest("compiler/testData/codegen/box/invokedynamic/serializable/serializableBoundTopLevelExtensionFunRefPrimitiveReceiver.kt");
      }

      @TestMetadata("serializableClassMemberFunRef.kt")
      public void testSerializableClassMemberFunRef() {
        runTest("compiler/testData/codegen/box/invokedynamic/serializable/serializableClassMemberFunRef.kt");
      }

      @TestMetadata("serializableConstructorRef.kt")
      public void testSerializableConstructorRef() {
        runTest("compiler/testData/codegen/box/invokedynamic/serializable/serializableConstructorRef.kt");
      }

      @TestMetadata("serializableFakeOverrideFunRef.kt")
      public void testSerializableFakeOverrideFunRef() {
        runTest("compiler/testData/codegen/box/invokedynamic/serializable/serializableFakeOverrideFunRef.kt");
      }

      @TestMetadata("serializableInnerConstructorRef.kt")
      public void testSerializableInnerConstructorRef() {
        runTest("compiler/testData/codegen/box/invokedynamic/serializable/serializableInnerConstructorRef.kt");
      }

      @TestMetadata("serializableInterfaceMemberFunRef.kt")
      public void testSerializableInterfaceMemberFunRef() {
        runTest("compiler/testData/codegen/box/invokedynamic/serializable/serializableInterfaceMemberFunRef.kt");
      }

      @TestMetadata("serializableJavaStaticMethodRef.kt")
      public void testSerializableJavaStaticMethodRef() {
        runTest("compiler/testData/codegen/box/invokedynamic/serializable/serializableJavaStaticMethodRef.kt");
      }

      @TestMetadata("serializableLambda.kt")
      public void testSerializableLambda() {
        runTest("compiler/testData/codegen/box/invokedynamic/serializable/serializableLambda.kt");
      }

      @TestMetadata("serializableLambdaCapturingBoxedInlineClassAny.kt")
      public void testSerializableLambdaCapturingBoxedInlineClassAny() {
        runTest("compiler/testData/codegen/box/invokedynamic/serializable/serializableLambdaCapturingBoxedInlineClassAny.kt");
      }

      @TestMetadata("serializableLambdaCapturingInlineClassAny.kt")
      public void testSerializableLambdaCapturingInlineClassAny() {
        runTest("compiler/testData/codegen/box/invokedynamic/serializable/serializableLambdaCapturingInlineClassAny.kt");
      }

      @TestMetadata("serializableLambdaCapturingInlineClassInt.kt")
      public void testSerializableLambdaCapturingInlineClassInt() {
        runTest("compiler/testData/codegen/box/invokedynamic/serializable/serializableLambdaCapturingInlineClassInt.kt");
      }

      @TestMetadata("serializableLambdaCapturingNullableInlineClassAny.kt")
      public void testSerializableLambdaCapturingNullableInlineClassAny() {
        runTest("compiler/testData/codegen/box/invokedynamic/serializable/serializableLambdaCapturingNullableInlineClassAny.kt");
      }

      @TestMetadata("serializableLambdaToKotlinInterface.kt")
      public void testSerializableLambdaToKotlinInterface() {
        runTest("compiler/testData/codegen/box/invokedynamic/serializable/serializableLambdaToKotlinInterface.kt");
      }

      @TestMetadata("serializableLambdaWithCapture.kt")
      public void testSerializableLambdaWithCapture() {
        runTest("compiler/testData/codegen/box/invokedynamic/serializable/serializableLambdaWithCapture.kt");
      }

      @TestMetadata("serializableTopLevelFunRef.kt")
      public void testSerializableTopLevelFunRef() {
        runTest("compiler/testData/codegen/box/invokedynamic/serializable/serializableTopLevelFunRef.kt");
      }

      @TestMetadata("serializableTopLevelFunRefAsGenericInterface.kt")
      public void testSerializableTopLevelFunRefAsGenericInterface() {
        runTest("compiler/testData/codegen/box/invokedynamic/serializable/serializableTopLevelFunRefAsGenericInterface.kt");
      }

      @TestMetadata("serializableWithBridge.kt")
      public void testSerializableWithBridge() {
        runTest("compiler/testData/codegen/box/invokedynamic/serializable/serializableWithBridge.kt");
      }
    }
  }

  @TestMetadata("compiler/testData/codegen/box/involvesIrInterpreter")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class InvolvesIrInterpreter extends AbstractLightAnalysisModeTest {
    @TestMetadata("kt55108.kt")
    public void ignoreKt55108() {
      runTest("compiler/testData/codegen/box/involvesIrInterpreter/kt55108.kt");
    }

    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInInvolvesIrInterpreter() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/involvesIrInterpreter"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("annotationClassWithInner.kt")
    public void testAnnotationClassWithInner() {
      runTest("compiler/testData/codegen/box/involvesIrInterpreter/annotationClassWithInner.kt");
    }

    @TestMetadata("booleanOperations.kt")
    public void testBooleanOperations() {
      runTest("compiler/testData/codegen/box/involvesIrInterpreter/booleanOperations.kt");
    }

    @TestMetadata("byteOperations.kt")
    public void testByteOperations() {
      runTest("compiler/testData/codegen/box/involvesIrInterpreter/byteOperations.kt");
    }

    @TestMetadata("charOperations.kt")
    public void testCharOperations() {
      runTest("compiler/testData/codegen/box/involvesIrInterpreter/charOperations.kt");
    }

    @TestMetadata("complexBooleanConstant.kt")
    public void testComplexBooleanConstant() {
      runTest("compiler/testData/codegen/box/involvesIrInterpreter/complexBooleanConstant.kt");
    }

    @TestMetadata("doubleOperations.kt")
    public void testDoubleOperations() {
      runTest("compiler/testData/codegen/box/involvesIrInterpreter/doubleOperations.kt");
    }

    @TestMetadata("enumRecursiveName.kt")
    public void testEnumRecursiveName() {
      runTest("compiler/testData/codegen/box/involvesIrInterpreter/enumRecursiveName.kt");
    }

    @TestMetadata("floatOperations.kt")
    public void testFloatOperations() {
      runTest("compiler/testData/codegen/box/involvesIrInterpreter/floatOperations.kt");
    }

    @TestMetadata("inJavaPackage.kt")
    public void testInJavaPackage() {
      runTest("compiler/testData/codegen/box/involvesIrInterpreter/inJavaPackage.kt");
    }

    @TestMetadata("intOperations.kt")
    public void testIntOperations() {
      runTest("compiler/testData/codegen/box/involvesIrInterpreter/intOperations.kt");
    }

    @TestMetadata("jvmFloatDoubleToString.kt")
    public void testJvmFloatDoubleToString() {
      runTest("compiler/testData/codegen/box/involvesIrInterpreter/jvmFloatDoubleToString.kt");
    }

    @TestMetadata("kt53480.kt")
    public void testKt53480() {
      runTest("compiler/testData/codegen/box/involvesIrInterpreter/kt53480.kt");
    }

    @TestMetadata("kt55866.kt")
    public void testKt55866() {
      runTest("compiler/testData/codegen/box/involvesIrInterpreter/kt55866.kt");
    }

    @TestMetadata("kt55912.kt")
    public void testKt55912() {
      runTest("compiler/testData/codegen/box/involvesIrInterpreter/kt55912.kt");
    }

    @TestMetadata("kt56215.kt")
    public void testKt56215() {
      runTest("compiler/testData/codegen/box/involvesIrInterpreter/kt56215.kt");
    }

    @TestMetadata("kt57028.kt")
    public void testKt57028() {
      runTest("compiler/testData/codegen/box/involvesIrInterpreter/kt57028.kt");
    }

    @TestMetadata("kt57313.kt")
    public void testKt57313() {
      runTest("compiler/testData/codegen/box/involvesIrInterpreter/kt57313.kt");
    }

    @TestMetadata("kt58005.kt")
    public void testKt58005() {
      runTest("compiler/testData/codegen/box/involvesIrInterpreter/kt58005.kt");
    }

    @TestMetadata("longOperations.kt")
    public void testLongOperations() {
      runTest("compiler/testData/codegen/box/involvesIrInterpreter/longOperations.kt");
    }

    @TestMetadata("objectConstValInAnnotationArgument.kt")
    public void testObjectConstValInAnnotationArgument() {
      runTest("compiler/testData/codegen/box/involvesIrInterpreter/objectConstValInAnnotationArgument.kt");
    }

    @TestMetadata("referenceNameFromStaticInDifferentModule.kt")
    public void testReferenceNameFromStaticInDifferentModule() {
      runTest("compiler/testData/codegen/box/involvesIrInterpreter/referenceNameFromStaticInDifferentModule.kt");
    }

    @TestMetadata("shortOperations.kt")
    public void testShortOperations() {
      runTest("compiler/testData/codegen/box/involvesIrInterpreter/shortOperations.kt");
    }

    @TestMetadata("stdlibConst.kt")
    public void testStdlibConst() {
      runTest("compiler/testData/codegen/box/involvesIrInterpreter/stdlibConst.kt");
    }

    @TestMetadata("stringConcatenation.kt")
    public void testStringConcatenation() {
      runTest("compiler/testData/codegen/box/involvesIrInterpreter/stringConcatenation.kt");
    }

    @TestMetadata("stringConcatenationWithObject.kt")
    public void testStringConcatenationWithObject() {
      runTest("compiler/testData/codegen/box/involvesIrInterpreter/stringConcatenationWithObject.kt");
    }

    @TestMetadata("stringOperations.kt")
    public void testStringOperations() {
      runTest("compiler/testData/codegen/box/involvesIrInterpreter/stringOperations.kt");
    }

    @TestMetadata("thisPlusString.kt")
    public void testThisPlusString() {
      runTest("compiler/testData/codegen/box/involvesIrInterpreter/thisPlusString.kt");
    }

    @TestMetadata("thisPlusStringWithObject.kt")
    public void testThisPlusStringWithObject() {
      runTest("compiler/testData/codegen/box/involvesIrInterpreter/thisPlusStringWithObject.kt");
    }

    @TestMetadata("unsignedConst.kt")
    public void testUnsignedConst() {
      runTest("compiler/testData/codegen/box/involvesIrInterpreter/unsignedConst.kt");
    }

    @TestMetadata("useCorrectToString.kt")
    public void testUseCorrectToString() {
      runTest("compiler/testData/codegen/box/involvesIrInterpreter/useCorrectToString.kt");
    }

    @TestMetadata("compiler/testData/codegen/box/involvesIrInterpreter/constEvaluationFromJavaWorld")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ConstEvaluationFromJavaWorld extends AbstractLightAnalysisModeTest {
      @TestMetadata("accessComplexConst.kt")
      public void ignoreAccessComplexConst() {
        runTest("compiler/testData/codegen/box/involvesIrInterpreter/constEvaluationFromJavaWorld/accessComplexConst.kt");
      }

      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      @TestMetadata("accessTopLevelConst.kt")
      public void testAccessTopLevelConst() {
        runTest("compiler/testData/codegen/box/involvesIrInterpreter/constEvaluationFromJavaWorld/accessTopLevelConst.kt");
      }

      @TestMetadata("accessTopLevelConstWithCustomFileName.kt")
      public void testAccessTopLevelConstWithCustomFileName() {
        runTest("compiler/testData/codegen/box/involvesIrInterpreter/constEvaluationFromJavaWorld/accessTopLevelConstWithCustomFileName.kt");
      }

      public void testAllFilesPresentInConstEvaluationFromJavaWorld() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/involvesIrInterpreter/constEvaluationFromJavaWorld"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("differentTypes.kt")
      public void testDifferentTypes() {
        runTest("compiler/testData/codegen/box/involvesIrInterpreter/constEvaluationFromJavaWorld/differentTypes.kt");
      }

      @TestMetadata("kt57802_1.kt")
      public void testKt57802_1() {
        runTest("compiler/testData/codegen/box/involvesIrInterpreter/constEvaluationFromJavaWorld/kt57802_1.kt");
      }

      @TestMetadata("kt57802_2.kt")
      public void testKt57802_2() {
        runTest("compiler/testData/codegen/box/involvesIrInterpreter/constEvaluationFromJavaWorld/kt57802_2.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/involvesIrInterpreter/intrinsicConst")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class IntrinsicConst extends AbstractLightAnalysisModeTest {
      @TestMetadata("constTrimIndent.kt")
      public void ignoreConstTrimIndent() {
        runTest("compiler/testData/codegen/box/involvesIrInterpreter/intrinsicConst/constTrimIndent.kt");
      }

      @TestMetadata("constTrimMargin.kt")
      public void ignoreConstTrimMargin() {
        runTest("compiler/testData/codegen/box/involvesIrInterpreter/intrinsicConst/constTrimMargin.kt");
      }

      @TestMetadata("enumName.kt")
      public void ignoreEnumName() {
        runTest("compiler/testData/codegen/box/involvesIrInterpreter/intrinsicConst/enumName.kt");
      }

      @TestMetadata("ifConstVal.kt")
      public void ignoreIfConstVal() {
        runTest("compiler/testData/codegen/box/involvesIrInterpreter/intrinsicConst/ifConstVal.kt");
      }

      @TestMetadata("kCallableName.kt")
      public void ignoreKCallableName() {
        runTest("compiler/testData/codegen/box/involvesIrInterpreter/intrinsicConst/kCallableName.kt");
      }

      @TestMetadata("kt53272.kt")
      public void ignoreKt53272() {
        runTest("compiler/testData/codegen/box/involvesIrInterpreter/intrinsicConst/kt53272.kt");
      }

      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInIntrinsicConst() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/involvesIrInterpreter/intrinsicConst"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("enumNameWithInit.kt")
      public void testEnumNameWithInit() {
        runTest("compiler/testData/codegen/box/involvesIrInterpreter/intrinsicConst/enumNameWithInit.kt");
      }

      @TestMetadata("equals_after.kt")
      public void testEquals_after() {
        runTest("compiler/testData/codegen/box/involvesIrInterpreter/intrinsicConst/equals_after.kt");
      }

      @TestMetadata("kCallableNameWithSideEffect.kt")
      public void testKCallableNameWithSideEffect() {
        runTest("compiler/testData/codegen/box/involvesIrInterpreter/intrinsicConst/kCallableNameWithSideEffect.kt");
      }

      @TestMetadata("kt58717.kt")
      public void testKt58717() {
        runTest("compiler/testData/codegen/box/involvesIrInterpreter/intrinsicConst/kt58717.kt");
      }

      @TestMetadata("nullableEnumName.kt")
      public void testNullableEnumName() {
        runTest("compiler/testData/codegen/box/involvesIrInterpreter/intrinsicConst/nullableEnumName.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/involvesIrInterpreter/serialization")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Serialization extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInSerialization() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/involvesIrInterpreter/serialization"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("annotationInArguments.kt")
      public void testAnnotationInArguments() {
        runTest("compiler/testData/codegen/box/involvesIrInterpreter/serialization/annotationInArguments.kt");
      }

      @TestMetadata("annotationSerialization.kt")
      public void testAnnotationSerialization() {
        runTest("compiler/testData/codegen/box/involvesIrInterpreter/serialization/annotationSerialization.kt");
      }

      @TestMetadata("annotationWithArray.kt")
      public void testAnnotationWithArray() {
        runTest("compiler/testData/codegen/box/involvesIrInterpreter/serialization/annotationWithArray.kt");
      }

      @TestMetadata("annotationWithDefaults.kt")
      public void testAnnotationWithDefaults() {
        runTest("compiler/testData/codegen/box/involvesIrInterpreter/serialization/annotationWithDefaults.kt");
      }

      @TestMetadata("nestedTypeAnnotation.kt")
      public void testNestedTypeAnnotation() {
        runTest("compiler/testData/codegen/box/involvesIrInterpreter/serialization/nestedTypeAnnotation.kt");
      }

      @TestMetadata("typeAnnotation.kt")
      public void testTypeAnnotation() {
        runTest("compiler/testData/codegen/box/involvesIrInterpreter/serialization/typeAnnotation.kt");
      }
    }
  }

  @TestMetadata("compiler/testData/codegen/box/ir")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Ir extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInIr() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ir"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("anonymousClassLeak.kt")
    public void testAnonymousClassLeak() {
      runTest("compiler/testData/codegen/box/ir/anonymousClassLeak.kt");
    }

    @TestMetadata("anonymousObjectInForLoopIteratorAndBody.kt")
    public void testAnonymousObjectInForLoopIteratorAndBody() {
      runTest("compiler/testData/codegen/box/ir/anonymousObjectInForLoopIteratorAndBody.kt");
    }

    @TestMetadata("anonymousObjectInGenericFun.kt")
    public void testAnonymousObjectInGenericFun() {
      runTest("compiler/testData/codegen/box/ir/anonymousObjectInGenericFun.kt");
    }

    @TestMetadata("anonymousObjectInsideElvis.kt")
    public void testAnonymousObjectInsideElvis() {
      runTest("compiler/testData/codegen/box/ir/anonymousObjectInsideElvis.kt");
    }

    @TestMetadata("clashingFakeOverrideSignatures.kt")
    public void testClashingFakeOverrideSignatures() {
      runTest("compiler/testData/codegen/box/ir/clashingFakeOverrideSignatures.kt");
    }

    @TestMetadata("classInitializers.kt")
    public void testClassInitializers() {
      runTest("compiler/testData/codegen/box/ir/classInitializers.kt");
    }

    @TestMetadata("enumClass.kt")
    public void testEnumClass() {
      runTest("compiler/testData/codegen/box/ir/enumClass.kt");
    }

    @TestMetadata("enumClass2.kt")
    public void testEnumClass2() {
      runTest("compiler/testData/codegen/box/ir/enumClass2.kt");
    }

    @TestMetadata("enumClass3.kt")
    public void testEnumClass3() {
      runTest("compiler/testData/codegen/box/ir/enumClass3.kt");
    }

    @TestMetadata("fileClassInitializers.kt")
    public void testFileClassInitializers() {
      runTest("compiler/testData/codegen/box/ir/fileClassInitializers.kt");
    }

    @TestMetadata("genericCompanion.kt")
    public void testGenericCompanion() {
      runTest("compiler/testData/codegen/box/ir/genericCompanion.kt");
    }

    @TestMetadata("hashCodeOnGenericSubstitutedWithPrimitive.kt")
    public void testHashCodeOnGenericSubstitutedWithPrimitive() {
      runTest("compiler/testData/codegen/box/ir/hashCodeOnGenericSubstitutedWithPrimitive.kt");
    }

    @TestMetadata("kt25405.kt")
    public void testKt25405() {
      runTest("compiler/testData/codegen/box/ir/kt25405.kt");
    }

    @TestMetadata("kt29833.kt")
    public void testKt29833() {
      runTest("compiler/testData/codegen/box/ir/kt29833.kt");
    }

    @TestMetadata("kt40083.kt")
    public void testKt40083() {
      runTest("compiler/testData/codegen/box/ir/kt40083.kt");
    }

    @TestMetadata("kt41765.kt")
    public void testKt41765() {
      runTest("compiler/testData/codegen/box/ir/kt41765.kt");
    }

    @TestMetadata("kt52677.kt")
    public void testKt52677() {
      runTest("compiler/testData/codegen/box/ir/kt52677.kt");
    }

    @TestMetadata("kt55318.kt")
    public void testKt55318() {
      runTest("compiler/testData/codegen/box/ir/kt55318.kt");
    }

    @TestMetadata("lambdaWithLoop.kt")
    public void testLambdaWithLoop() {
      runTest("compiler/testData/codegen/box/ir/lambdaWithLoop.kt");
    }

    @TestMetadata("objectClass.kt")
    public void testObjectClass() {
      runTest("compiler/testData/codegen/box/ir/objectClass.kt");
    }

    @TestMetadata("recursiveGeneric.kt")
    public void testRecursiveGeneric() {
      runTest("compiler/testData/codegen/box/ir/recursiveGeneric.kt");
    }

    @TestMetadata("recursiveGeneric2.kt")
    public void testRecursiveGeneric2() {
      runTest("compiler/testData/codegen/box/ir/recursiveGeneric2.kt");
    }

    @TestMetadata("simple.kt")
    public void testSimple() {
      runTest("compiler/testData/codegen/box/ir/simple.kt");
    }

    @TestMetadata("suppressConflictingSignatureErrors.kt")
    public void testSuppressConflictingSignatureErrors() {
      runTest("compiler/testData/codegen/box/ir/suppressConflictingSignatureErrors.kt");
    }

    @TestMetadata("compiler/testData/codegen/box/ir/closureConversion")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ClosureConversion extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInClosureConversion() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ir/closureConversion"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("closureConversion1.kt")
      public void testClosureConversion1() {
        runTest("compiler/testData/codegen/box/ir/closureConversion/closureConversion1.kt");
      }

      @TestMetadata("closureConversion2.kt")
      public void testClosureConversion2() {
        runTest("compiler/testData/codegen/box/ir/closureConversion/closureConversion2.kt");
      }

      @TestMetadata("closureConversion3.kt")
      public void testClosureConversion3() {
        runTest("compiler/testData/codegen/box/ir/closureConversion/closureConversion3.kt");
      }

      @TestMetadata("closureConversion4.kt")
      public void testClosureConversion4() {
        runTest("compiler/testData/codegen/box/ir/closureConversion/closureConversion4.kt");
      }

      @TestMetadata("innerClass1.kt")
      public void testInnerClass1() {
        runTest("compiler/testData/codegen/box/ir/closureConversion/innerClass1.kt");
      }

      @TestMetadata("innerClass2.kt")
      public void testInnerClass2() {
        runTest("compiler/testData/codegen/box/ir/closureConversion/innerClass2.kt");
      }

      @TestMetadata("mutable1.kt")
      public void testMutable1() {
        runTest("compiler/testData/codegen/box/ir/closureConversion/mutable1.kt");
      }

      @TestMetadata("mutablePrimitives.kt")
      public void testMutablePrimitives() {
        runTest("compiler/testData/codegen/box/ir/closureConversion/mutablePrimitives.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/ir/primitiveNumberComparisons")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class PrimitiveNumberComparisons extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInPrimitiveNumberComparisons() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ir/primitiveNumberComparisons"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("comparableToDouble.kt")
      public void testComparableToDouble() {
        runTest("compiler/testData/codegen/box/ir/primitiveNumberComparisons/comparableToDouble.kt");
      }

      @TestMetadata("doubleEqeq.kt")
      public void testDoubleEqeq() {
        runTest("compiler/testData/codegen/box/ir/primitiveNumberComparisons/doubleEqeq.kt");
      }

      @TestMetadata("floatEqeq.kt")
      public void testFloatEqeq() {
        runTest("compiler/testData/codegen/box/ir/primitiveNumberComparisons/floatEqeq.kt");
      }

      @TestMetadata("mixedNumberTypes.kt")
      public void testMixedNumberTypes() {
        runTest("compiler/testData/codegen/box/ir/primitiveNumberComparisons/mixedNumberTypes.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/ir/privateSignatures")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class PrivateSignatures extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInPrivateSignatures() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ir/privateSignatures"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("enumEntryArguments.kt")
      public void testEnumEntryArguments() {
        runTest("compiler/testData/codegen/box/ir/privateSignatures/enumEntryArguments.kt");
      }

      @TestMetadata("privateLeakThroughInline.kt")
      public void testPrivateLeakThroughInline() {
        runTest("compiler/testData/codegen/box/ir/privateSignatures/privateLeakThroughInline.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/ir/serializationRegressions")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class SerializationRegressions extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInSerializationRegressions() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ir/serializationRegressions"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("anonFakeOverride.kt")
      public void testAnonFakeOverride() {
        runTest("compiler/testData/codegen/box/ir/serializationRegressions/anonFakeOverride.kt");
      }

      @TestMetadata("deepGenericDelegatedProperty.kt")
      public void testDeepGenericDelegatedProperty() {
        runTest("compiler/testData/codegen/box/ir/serializationRegressions/deepGenericDelegatedProperty.kt");
      }

      @TestMetadata("dispatchReceiverValue.kt")
      public void testDispatchReceiverValue() {
        runTest("compiler/testData/codegen/box/ir/serializationRegressions/dispatchReceiverValue.kt");
      }

      @TestMetadata("genericProperty.kt")
      public void testGenericProperty() {
        runTest("compiler/testData/codegen/box/ir/serializationRegressions/genericProperty.kt");
      }

      @TestMetadata("innerClassInEnumEntryClass.kt")
      public void testInnerClassInEnumEntryClass() {
        runTest("compiler/testData/codegen/box/ir/serializationRegressions/innerClassInEnumEntryClass.kt");
      }

      @TestMetadata("signatureClash.kt")
      public void testSignatureClash() {
        runTest("compiler/testData/codegen/box/ir/serializationRegressions/signatureClash.kt");
      }

      @TestMetadata("transitiveClash.kt")
      public void testTransitiveClash() {
        runTest("compiler/testData/codegen/box/ir/serializationRegressions/transitiveClash.kt");
      }

      @TestMetadata("useImportedMember.kt")
      public void testUseImportedMember() {
        runTest("compiler/testData/codegen/box/ir/serializationRegressions/useImportedMember.kt");
      }

      @TestMetadata("varAsFunctionCall.kt")
      public void testVarAsFunctionCall() {
        runTest("compiler/testData/codegen/box/ir/serializationRegressions/varAsFunctionCall.kt");
      }
    }
  }

  @TestMetadata("compiler/testData/codegen/box/javaFieldAndKotlinProperty")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class JavaFieldAndKotlinProperty extends AbstractLightAnalysisModeTest {
    @TestMetadata("javaFieldAndCompanionProperty.kt")
    public void ignoreJavaFieldAndCompanionProperty() {
      runTest("compiler/testData/codegen/box/javaFieldAndKotlinProperty/javaFieldAndCompanionProperty.kt");
    }

    @TestMetadata("javaFieldAndKotlinInvisibleProperty.kt")
    public void ignoreJavaFieldAndKotlinInvisibleProperty() {
      runTest("compiler/testData/codegen/box/javaFieldAndKotlinProperty/javaFieldAndKotlinInvisibleProperty.kt");
    }

    @TestMetadata("javaFieldAndKotlinInvisiblePropertyViaTypeParameter.kt")
    public void ignoreJavaFieldAndKotlinInvisiblePropertyViaTypeParameter() {
      runTest("compiler/testData/codegen/box/javaFieldAndKotlinProperty/javaFieldAndKotlinInvisiblePropertyViaTypeParameter.kt");
    }

    @TestMetadata("javaFieldAndKotlinProperty.kt")
    public void ignoreJavaFieldAndKotlinProperty() {
      runTest("compiler/testData/codegen/box/javaFieldAndKotlinProperty/javaFieldAndKotlinProperty.kt");
    }

    @TestMetadata("javaFieldAndKotlinPropertyReference.kt")
    public void ignoreJavaFieldAndKotlinPropertyReference() {
      runTest("compiler/testData/codegen/box/javaFieldAndKotlinProperty/javaFieldAndKotlinPropertyReference.kt");
    }

    @TestMetadata("javaFieldAndKotlinPropertySuperAccess.kt")
    public void ignoreJavaFieldAndKotlinPropertySuperAccess() {
      runTest("compiler/testData/codegen/box/javaFieldAndKotlinProperty/javaFieldAndKotlinPropertySuperAccess.kt");
    }

    @TestMetadata("javaFieldAndKotlinPropertyWithComplexReceiver.kt")
    public void ignoreJavaFieldAndKotlinPropertyWithComplexReceiver() {
      runTest("compiler/testData/codegen/box/javaFieldAndKotlinProperty/javaFieldAndKotlinPropertyWithComplexReceiver.kt");
    }

    @TestMetadata("javaFieldAndKotlinPropertyWithSmartcast.kt")
    public void ignoreJavaFieldAndKotlinPropertyWithSmartcast() {
      runTest("compiler/testData/codegen/box/javaFieldAndKotlinProperty/javaFieldAndKotlinPropertyWithSmartcast.kt");
    }

    @TestMetadata("javaFieldKotlinPropertyJavaField.kt")
    public void ignoreJavaFieldKotlinPropertyJavaField() {
      runTest("compiler/testData/codegen/box/javaFieldAndKotlinProperty/javaFieldKotlinPropertyJavaField.kt");
    }

    @TestMetadata("javaFieldKotlinPropertyJavaPackagePrivate.kt")
    public void ignoreJavaFieldKotlinPropertyJavaPackagePrivate() {
      runTest("compiler/testData/codegen/box/javaFieldAndKotlinProperty/javaFieldKotlinPropertyJavaPackagePrivate.kt");
    }

    @TestMetadata("javaPackagePrivateClassAndPublicField.kt")
    public void ignoreJavaPackagePrivateClassAndPublicField() {
      runTest("compiler/testData/codegen/box/javaFieldAndKotlinProperty/javaPackagePrivateClassAndPublicField.kt");
    }

    @TestMetadata("javaPackagePrivateClassExposedViaProtectedStatic.kt")
    public void ignoreJavaPackagePrivateClassExposedViaProtectedStatic() {
      runTest("compiler/testData/codegen/box/javaFieldAndKotlinProperty/javaPackagePrivateClassExposedViaProtectedStatic.kt");
    }

    @TestMetadata("javaProtectedFieldAndKotlinInvisibleProperty.kt")
    public void ignoreJavaProtectedFieldAndKotlinInvisibleProperty() {
      runTest("compiler/testData/codegen/box/javaFieldAndKotlinProperty/javaProtectedFieldAndKotlinInvisibleProperty.kt");
    }

    @TestMetadata("javaProtectedFieldAndKotlinInvisiblePropertyReference.kt")
    public void ignoreJavaProtectedFieldAndKotlinInvisiblePropertyReference() {
      runTest("compiler/testData/codegen/box/javaFieldAndKotlinProperty/javaProtectedFieldAndKotlinInvisiblePropertyReference.kt");
    }

    @TestMetadata("javaProtectedFieldAndKotlinPropertyReference.kt")
    public void ignoreJavaProtectedFieldAndKotlinPropertyReference() {
      runTest("compiler/testData/codegen/box/javaFieldAndKotlinProperty/javaProtectedFieldAndKotlinPropertyReference.kt");
    }

    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInJavaFieldAndKotlinProperty() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/javaFieldAndKotlinProperty"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("javaCloseFieldAndKotlinProperty.kt")
    public void testJavaCloseFieldAndKotlinProperty() {
      runTest("compiler/testData/codegen/box/javaFieldAndKotlinProperty/javaCloseFieldAndKotlinProperty.kt");
    }

    @TestMetadata("javaFieldAndKotlinInvisiblePropertyWithGetter.kt")
    public void testJavaFieldAndKotlinInvisiblePropertyWithGetter() {
      runTest("compiler/testData/codegen/box/javaFieldAndKotlinProperty/javaFieldAndKotlinInvisiblePropertyWithGetter.kt");
    }

    @TestMetadata("javaFieldAndKotlinLateinitProperty.kt")
    public void testJavaFieldAndKotlinLateinitProperty() {
      runTest("compiler/testData/codegen/box/javaFieldAndKotlinProperty/javaFieldAndKotlinLateinitProperty.kt");
    }

    @TestMetadata("javaFieldAndKotlinPrivateProperty.kt")
    public void testJavaFieldAndKotlinPrivateProperty() {
      runTest("compiler/testData/codegen/box/javaFieldAndKotlinProperty/javaFieldAndKotlinPrivateProperty.kt");
    }

    @TestMetadata("javaFieldAndKotlinPropertyReferenceFromInner.kt")
    public void testJavaFieldAndKotlinPropertyReferenceFromInner() {
      runTest("compiler/testData/codegen/box/javaFieldAndKotlinProperty/javaFieldAndKotlinPropertyReferenceFromInner.kt");
    }

    @TestMetadata("javaInvisibleFieldAndKotlinProperty.kt")
    public void testJavaInvisibleFieldAndKotlinProperty() {
      runTest("compiler/testData/codegen/box/javaFieldAndKotlinProperty/javaInvisibleFieldAndKotlinProperty.kt");
    }

    @TestMetadata("javaInvisibleFieldAndKotlinPropertyReference.kt")
    public void testJavaInvisibleFieldAndKotlinPropertyReference() {
      runTest("compiler/testData/codegen/box/javaFieldAndKotlinProperty/javaInvisibleFieldAndKotlinPropertyReference.kt");
    }

    @TestMetadata("javaProtectedFieldAnotherPackageReference.kt")
    public void testJavaProtectedFieldAnotherPackageReference() {
      runTest("compiler/testData/codegen/box/javaFieldAndKotlinProperty/javaProtectedFieldAnotherPackageReference.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/javaInterop")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class JavaInterop extends AbstractLightAnalysisModeTest {
    @TestMetadata("invisibleFake2.kt")
    public void ignoreInvisibleFake2() {
      runTest("compiler/testData/codegen/box/javaInterop/invisibleFake2.kt");
    }

    @TestMetadata("kjkPropertyAndExtensionProperty.kt")
    public void ignoreKjkPropertyAndExtensionProperty() {
      runTest("compiler/testData/codegen/box/javaInterop/kjkPropertyAndExtensionProperty.kt");
    }

    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    @TestMetadata("abstractMethodsOfAny.kt")
    public void testAbstractMethodsOfAny() {
      runTest("compiler/testData/codegen/box/javaInterop/abstractMethodsOfAny.kt");
    }

    public void testAllFilesPresentInJavaInterop() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/javaInterop"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("ambiguousJavaVararg.kt")
    public void testAmbiguousJavaVararg() {
      runTest("compiler/testData/codegen/box/javaInterop/ambiguousJavaVararg.kt");
    }

    @TestMetadata("conflictingOverloadsForThrowableInheritors.kt")
    public void testConflictingOverloadsForThrowableInheritors() {
      runTest("compiler/testData/codegen/box/javaInterop/conflictingOverloadsForThrowableInheritors.kt");
    }

    @TestMetadata("conflictingOverloadsForThrowableInheritors2.kt")
    public void testConflictingOverloadsForThrowableInheritors2() {
      runTest("compiler/testData/codegen/box/javaInterop/conflictingOverloadsForThrowableInheritors2.kt");
    }

    @TestMetadata("delegationToJavaDnn.kt")
    public void testDelegationToJavaDnn() {
      runTest("compiler/testData/codegen/box/javaInterop/delegationToJavaDnn.kt");
    }

    @TestMetadata("genericSamProjectedOut.kt")
    public void testGenericSamProjectedOut() {
      runTest("compiler/testData/codegen/box/javaInterop/genericSamProjectedOut.kt");
    }

    @TestMetadata("genericSamSmartcast.kt")
    public void testGenericSamSmartcast() {
      runTest("compiler/testData/codegen/box/javaInterop/genericSamSmartcast.kt");
    }

    @TestMetadata("immutableName.kt")
    public void testImmutableName() {
      runTest("compiler/testData/codegen/box/javaInterop/immutableName.kt");
    }

    @TestMetadata("inheritanceWithWildcard.kt")
    public void testInheritanceWithWildcard() {
      runTest("compiler/testData/codegen/box/javaInterop/inheritanceWithWildcard.kt");
    }

    @TestMetadata("invisibleFake.kt")
    public void testInvisibleFake() {
      runTest("compiler/testData/codegen/box/javaInterop/invisibleFake.kt");
    }

    @TestMetadata("javaForKotlinOverrideProperty.kt")
    public void testJavaForKotlinOverrideProperty() {
      runTest("compiler/testData/codegen/box/javaInterop/javaForKotlinOverrideProperty.kt");
    }

    @TestMetadata("javaInterfaceFieldDirectAccess.kt")
    public void testJavaInterfaceFieldDirectAccess() {
      runTest("compiler/testData/codegen/box/javaInterop/javaInterfaceFieldDirectAccess.kt");
    }

    @TestMetadata("javaOuterClassDependsOnInner.kt")
    public void testJavaOuterClassDependsOnInner() {
      runTest("compiler/testData/codegen/box/javaInterop/javaOuterClassDependsOnInner.kt");
    }

    @TestMetadata("javaTypeFromAnotherModuleWithRawTypedWildcardBound.kt")
    public void testJavaTypeFromAnotherModuleWithRawTypedWildcardBound() {
      runTest("compiler/testData/codegen/box/javaInterop/javaTypeFromAnotherModuleWithRawTypedWildcardBound.kt");
    }

    @TestMetadata("javaTypeFromSameModuleWithRawTypedWildcardBound.kt")
    public void testJavaTypeFromSameModuleWithRawTypedWildcardBound() {
      runTest("compiler/testData/codegen/box/javaInterop/javaTypeFromSameModuleWithRawTypedWildcardBound.kt");
    }

    @TestMetadata("kjkWithRawTypes.kt")
    public void testKjkWithRawTypes() {
      runTest("compiler/testData/codegen/box/javaInterop/kjkWithRawTypes.kt");
    }

    @TestMetadata("kt43217.kt")
    public void testKt43217() {
      runTest("compiler/testData/codegen/box/javaInterop/kt43217.kt");
    }

    @TestMetadata("kt48590.kt")
    public void testKt48590() {
      runTest("compiler/testData/codegen/box/javaInterop/kt48590.kt");
    }

    @TestMetadata("kt65482.kt")
    public void testKt65482() {
      runTest("compiler/testData/codegen/box/javaInterop/kt65482.kt");
    }

    @TestMetadata("lambdaInstanceOf.kt")
    public void testLambdaInstanceOf() {
      runTest("compiler/testData/codegen/box/javaInterop/lambdaInstanceOf.kt");
    }

    @TestMetadata("notFoundClasses.kt")
    public void testNotFoundClasses() {
      runTest("compiler/testData/codegen/box/javaInterop/notFoundClasses.kt");
    }

    @TestMetadata("overrideWithArrayParameterType.kt")
    public void testOverrideWithArrayParameterType() {
      runTest("compiler/testData/codegen/box/javaInterop/overrideWithArrayParameterType.kt");
    }

    @TestMetadata("overrideWithArrayParameterType2.kt")
    public void testOverrideWithArrayParameterType2() {
      runTest("compiler/testData/codegen/box/javaInterop/overrideWithArrayParameterType2.kt");
    }

    @TestMetadata("overrideWithArrayParameterTypeNotNull.kt")
    public void testOverrideWithArrayParameterTypeNotNull() {
      runTest("compiler/testData/codegen/box/javaInterop/overrideWithArrayParameterTypeNotNull.kt");
    }

    @TestMetadata("overrideWithGenericArrayParameterType.kt")
    public void testOverrideWithGenericArrayParameterType() {
      runTest("compiler/testData/codegen/box/javaInterop/overrideWithGenericArrayParameterType.kt");
    }

    @TestMetadata("overrideWithVarargParameterType.kt")
    public void testOverrideWithVarargParameterType() {
      runTest("compiler/testData/codegen/box/javaInterop/overrideWithVarargParameterType.kt");
    }

    @TestMetadata("protectedField.kt")
    public void testProtectedField() {
      runTest("compiler/testData/codegen/box/javaInterop/protectedField.kt");
    }

    @TestMetadata("rawTypeArgumentInJavaSuperType.kt")
    public void testRawTypeArgumentInJavaSuperType() {
      runTest("compiler/testData/codegen/box/javaInterop/rawTypeArgumentInJavaSuperType.kt");
    }

    @TestMetadata("samTypeParameter.kt")
    public void testSamTypeParameter() {
      runTest("compiler/testData/codegen/box/javaInterop/samTypeParameter.kt");
    }

    @TestMetadata("samUnboundTypeParameter.kt")
    public void testSamUnboundTypeParameter() {
      runTest("compiler/testData/codegen/box/javaInterop/samUnboundTypeParameter.kt");
    }

    @TestMetadata("superCallOfPrintStackTrace.kt")
    public void testSuperCallOfPrintStackTrace() {
      runTest("compiler/testData/codegen/box/javaInterop/superCallOfPrintStackTrace.kt");
    }

    @TestMetadata("syntheticPropClashingWithJvmField.kt")
    public void testSyntheticPropClashingWithJvmField() {
      runTest("compiler/testData/codegen/box/javaInterop/syntheticPropClashingWithJvmField.kt");
    }

    @TestMetadata("syntheticPropOverriddenGetter.kt")
    public void testSyntheticPropOverriddenGetter() {
      runTest("compiler/testData/codegen/box/javaInterop/syntheticPropOverriddenGetter.kt");
    }

    @TestMetadata("triangleWithFlexibleTypeAndSubstitution4.kt")
    public void testTriangleWithFlexibleTypeAndSubstitution4() {
      runTest("compiler/testData/codegen/box/javaInterop/triangleWithFlexibleTypeAndSubstitution4.kt");
    }

    @TestMetadata("unresolvedJavaClassInDifferentFile.kt")
    public void testUnresolvedJavaClassInDifferentFile() {
      runTest("compiler/testData/codegen/box/javaInterop/unresolvedJavaClassInDifferentFile.kt");
    }

    @TestMetadata("compiler/testData/codegen/box/javaInterop/foreignAnnotationsTests")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ForeignAnnotationsTests extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInForeignAnnotationsTests() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/javaInterop/foreignAnnotationsTests"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("compiler/testData/codegen/box/javaInterop/foreignAnnotationsTests/tests")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class Tests extends AbstractLightAnalysisModeTest {
        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        public void testAllFilesPresentInTests() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/javaInterop/foreignAnnotationsTests/tests"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("kt53041.kt")
        public void testKt53041() {
          runTest("compiler/testData/codegen/box/javaInterop/foreignAnnotationsTests/tests/kt53041.kt");
        }

        @TestMetadata("primitiveSubstitutionToDnnParameter.kt")
        public void testPrimitiveSubstitutionToDnnParameter() {
          runTest("compiler/testData/codegen/box/javaInterop/foreignAnnotationsTests/tests/primitiveSubstitutionToDnnParameter.kt");
        }
      }
    }

    @TestMetadata("compiler/testData/codegen/box/javaInterop/generics")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Generics extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInGenerics() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/javaInterop/generics"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("allWildcardsOnClass.kt")
      public void testAllWildcardsOnClass() {
        runTest("compiler/testData/codegen/box/javaInterop/generics/allWildcardsOnClass.kt");
      }

      @TestMetadata("covariantOverrideWithDeclarationSiteProjection.kt")
      public void testCovariantOverrideWithDeclarationSiteProjection() {
        runTest("compiler/testData/codegen/box/javaInterop/generics/covariantOverrideWithDeclarationSiteProjection.kt");
      }

      @TestMetadata("invariantArgumentsNoWildcard.kt")
      public void testInvariantArgumentsNoWildcard() {
        runTest("compiler/testData/codegen/box/javaInterop/generics/invariantArgumentsNoWildcard.kt");
      }

      @TestMetadata("javaNestedSamInterface.kt")
      public void testJavaNestedSamInterface() {
        runTest("compiler/testData/codegen/box/javaInterop/generics/javaNestedSamInterface.kt");
      }

      @TestMetadata("kt42824.kt")
      public void testKt42824() {
        runTest("compiler/testData/codegen/box/javaInterop/generics/kt42824.kt");
      }

      @TestMetadata("kt42825.kt")
      public void testKt42825() {
        runTest("compiler/testData/codegen/box/javaInterop/generics/kt42825.kt");
      }

      @TestMetadata("propertyVarianceConflict.kt")
      public void testPropertyVarianceConflict() {
        runTest("compiler/testData/codegen/box/javaInterop/generics/propertyVarianceConflict.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/javaInterop/notNullAssertions")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class NotNullAssertions extends AbstractLightAnalysisModeTest {
      @TestMetadata("typeParameterWithMixedNullableAndNotNullableBounds.kt")
      public void ignoreTypeParameterWithMixedNullableAndNotNullableBounds() {
        runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/typeParameterWithMixedNullableAndNotNullableBounds.kt");
      }

      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInNotNullAssertions() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/javaInterop/notNullAssertions"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("destructuringAssignmentWithNullabilityAssertionOnExtensionReceiver_lv12.kt")
      public void testDestructuringAssignmentWithNullabilityAssertionOnExtensionReceiver_lv12() {
        runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/destructuringAssignmentWithNullabilityAssertionOnExtensionReceiver_lv12.kt");
      }

      @TestMetadata("extensionReceiverParameter.kt")
      public void testExtensionReceiverParameter() {
        runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/extensionReceiverParameter.kt");
      }

      @TestMetadata("functionAssertion.kt")
      public void testFunctionAssertion() {
        runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/functionAssertion.kt");
      }

      @TestMetadata("functionWithBigArity.kt")
      public void testFunctionWithBigArity() {
        runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/functionWithBigArity.kt");
      }

      @TestMetadata("incWithNullabilityAssertionOnExtensionReceiver.kt")
      public void testIncWithNullabilityAssertionOnExtensionReceiver() {
        runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/incWithNullabilityAssertionOnExtensionReceiver.kt");
      }

      @TestMetadata("incWithNullabilityAssertionOnExtensionReceiverInPrivateOperator.kt")
      public void testIncWithNullabilityAssertionOnExtensionReceiverInPrivateOperator() {
        runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/incWithNullabilityAssertionOnExtensionReceiverInPrivateOperator.kt");
      }

      @TestMetadata("kt18911.kt")
      public void testKt18911() {
        runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/kt18911.kt");
      }

      @TestMetadata("kt24258.kt")
      public void testKt24258() {
        runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/kt24258.kt");
      }

      @TestMetadata("kt24258nn.kt")
      public void testKt24258nn() {
        runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/kt24258nn.kt");
      }

      @TestMetadata("localEntities.kt")
      public void testLocalEntities() {
        runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/localEntities.kt");
      }

      @TestMetadata("mapPut.kt")
      public void testMapPut() {
        runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/mapPut.kt");
      }

      @TestMetadata("nonNullableTypeParameter.kt")
      public void testNonNullableTypeParameter() {
        runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/nonNullableTypeParameter.kt");
      }

      @TestMetadata("nullabilityAssertionOnExtensionReceiver.kt")
      public void testNullabilityAssertionOnExtensionReceiver() {
        runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/nullabilityAssertionOnExtensionReceiver.kt");
      }

      @TestMetadata("nullabilityAssertionOnInlineFunExtensionReceiver.kt")
      public void testNullabilityAssertionOnInlineFunExtensionReceiver() {
        runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/nullabilityAssertionOnInlineFunExtensionReceiver.kt");
      }

      @TestMetadata("nullabilityAssertionOnMemberExtensionReceiver.kt")
      public void testNullabilityAssertionOnMemberExtensionReceiver() {
        runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/nullabilityAssertionOnMemberExtensionReceiver.kt");
      }

      @TestMetadata("nullabilityAssertionOnPrivateMemberExtensionReceiver.kt")
      public void testNullabilityAssertionOnPrivateMemberExtensionReceiver() {
        runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/nullabilityAssertionOnPrivateMemberExtensionReceiver.kt");
      }

      @TestMetadata("nullableTypeParameter.kt")
      public void testNullableTypeParameter() {
        runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/nullableTypeParameter.kt");
      }

      @TestMetadata("paramAssertionMessage.kt")
      public void testParamAssertionMessage() {
        runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/paramAssertionMessage.kt");
      }

      @TestMetadata("privateOperatorParameterAssertions.kt")
      public void testPrivateOperatorParameterAssertions() {
        runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/privateOperatorParameterAssertions.kt");
      }

      @TestMetadata("typeParameterWithMultipleNotNullableBounds.kt")
      public void testTypeParameterWithMultipleNotNullableBounds() {
        runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/typeParameterWithMultipleNotNullableBounds.kt");
      }

      @TestMetadata("typeParameterWithMultipleNullableBounds.kt")
      public void testTypeParameterWithMultipleNullableBounds() {
        runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/typeParameterWithMultipleNullableBounds.kt");
      }

      @TestMetadata("compiler/testData/codegen/box/javaInterop/notNullAssertions/enhancedNullability")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class EnhancedNullability extends AbstractLightAnalysisModeTest {
        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        public void testAllFilesPresentInEnhancedNullability() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/javaInterop/notNullAssertions/enhancedNullability"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("inFunctionWithExpressionBody.kt")
        public void testInFunctionWithExpressionBody() {
          runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/enhancedNullability/inFunctionWithExpressionBody.kt");
        }

        @TestMetadata("inFunctionWithExpressionBodyWithJavaGeneric.kt")
        public void testInFunctionWithExpressionBodyWithJavaGeneric() {
          runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/enhancedNullability/inFunctionWithExpressionBodyWithJavaGeneric.kt");
        }

        @TestMetadata("inLambdaReturnWithExpectedType.kt")
        public void testInLambdaReturnWithExpectedType() {
          runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/enhancedNullability/inLambdaReturnWithExpectedType.kt");
        }

        @TestMetadata("inLocalFunctionWithExpressionBody.kt")
        public void testInLocalFunctionWithExpressionBody() {
          runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/enhancedNullability/inLocalFunctionWithExpressionBody.kt");
        }

        @TestMetadata("inLocalVariableInitializer.kt")
        public void testInLocalVariableInitializer() {
          runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/enhancedNullability/inLocalVariableInitializer.kt");
        }

        @TestMetadata("inMemberPropertyInitializer.kt")
        public void testInMemberPropertyInitializer() {
          runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/enhancedNullability/inMemberPropertyInitializer.kt");
        }

        @TestMetadata("inPropertyGetterWithExpressionBody.kt")
        public void testInPropertyGetterWithExpressionBody() {
          runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/enhancedNullability/inPropertyGetterWithExpressionBody.kt");
        }

        @TestMetadata("inTopLevelPropertyInitializer.kt")
        public void testInTopLevelPropertyInitializer() {
          runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/enhancedNullability/inTopLevelPropertyInitializer.kt");
        }
      }

      @TestMetadata("compiler/testData/codegen/box/javaInterop/notNullAssertions/expressionAssertionMessages")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class ExpressionAssertionMessages extends AbstractLightAnalysisModeTest {
        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        public void testAllFilesPresentInExpressionAssertionMessages() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/javaInterop/notNullAssertions/expressionAssertionMessages"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("backingField.kt")
        public void testBackingField() {
          runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/expressionAssertionMessages/backingField.kt");
        }

        @TestMetadata("capturedVariable.kt")
        public void testCapturedVariable() {
          runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/expressionAssertionMessages/capturedVariable.kt");
        }

        @TestMetadata("field_after.kt")
        public void testField_after() {
          runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/expressionAssertionMessages/field_after.kt");
        }

        @TestMetadata("field_before.kt")
        public void testField_before() {
          runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/expressionAssertionMessages/field_before.kt");
        }

        @TestMetadata("localVariable_after.kt")
        public void testLocalVariable_after() {
          runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/expressionAssertionMessages/localVariable_after.kt");
        }

        @TestMetadata("localVariable_before.kt")
        public void testLocalVariable_before() {
          runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/expressionAssertionMessages/localVariable_before.kt");
        }

        @TestMetadata("simple_after.kt")
        public void testSimple_after() {
          runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/expressionAssertionMessages/simple_after.kt");
        }

        @TestMetadata("simple_before.kt")
        public void testSimple_before() {
          runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/expressionAssertionMessages/simple_before.kt");
        }

        @TestMetadata("staticCall_after.kt")
        public void testStaticCall_after() {
          runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/expressionAssertionMessages/staticCall_after.kt");
        }

        @TestMetadata("staticCall_before.kt")
        public void testStaticCall_before() {
          runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/expressionAssertionMessages/staticCall_before.kt");
        }

        @TestMetadata("syntheticProperty_after.kt")
        public void testSyntheticProperty_after() {
          runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/expressionAssertionMessages/syntheticProperty_after.kt");
        }

        @TestMetadata("syntheticProperty_before.kt")
        public void testSyntheticProperty_before() {
          runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/expressionAssertionMessages/syntheticProperty_before.kt");
        }
      }

      @TestMetadata("compiler/testData/codegen/box/javaInterop/notNullAssertions/nullCheckOnLambdaReturnValue")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class NullCheckOnLambdaReturnValue extends AbstractLightAnalysisModeTest {
        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        public void testAllFilesPresentInNullCheckOnLambdaReturnValue() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/javaInterop/notNullAssertions/nullCheckOnLambdaReturnValue"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("nnStringVsT.kt")
        public void testNnStringVsT() {
          runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/nullCheckOnLambdaReturnValue/nnStringVsT.kt");
        }

        @TestMetadata("nnStringVsTAny.kt")
        public void testNnStringVsTAny() {
          runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/nullCheckOnLambdaReturnValue/nnStringVsTAny.kt");
        }

        @TestMetadata("nnStringVsTConstrained.kt")
        public void testNnStringVsTConstrained() {
          runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/nullCheckOnLambdaReturnValue/nnStringVsTConstrained.kt");
        }

        @TestMetadata("nnStringVsTXArray.kt")
        public void testNnStringVsTXArray() {
          runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/nullCheckOnLambdaReturnValue/nnStringVsTXArray.kt");
        }

        @TestMetadata("nnStringVsTXString.kt")
        public void testNnStringVsTXString() {
          runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/nullCheckOnLambdaReturnValue/nnStringVsTXString.kt");
        }

        @TestMetadata("stringVsT.kt")
        public void testStringVsT() {
          runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/nullCheckOnLambdaReturnValue/stringVsT.kt");
        }

        @TestMetadata("stringVsTAny.kt")
        public void testStringVsTAny() {
          runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/nullCheckOnLambdaReturnValue/stringVsTAny.kt");
        }

        @TestMetadata("stringVsTConstrained.kt")
        public void testStringVsTConstrained() {
          runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/nullCheckOnLambdaReturnValue/stringVsTConstrained.kt");
        }

        @TestMetadata("stringVsTXArray.kt")
        public void testStringVsTXArray() {
          runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/nullCheckOnLambdaReturnValue/stringVsTXArray.kt");
        }

        @TestMetadata("stringVsTXString.kt")
        public void testStringVsTXString() {
          runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/nullCheckOnLambdaReturnValue/stringVsTXString.kt");
        }
      }
    }

    @TestMetadata("compiler/testData/codegen/box/javaInterop/objectMethods")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ObjectMethods extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInObjectMethods() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/javaInterop/objectMethods"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("cloneCallsConstructor.kt")
      public void testCloneCallsConstructor() {
        runTest("compiler/testData/codegen/box/javaInterop/objectMethods/cloneCallsConstructor.kt");
      }

      @TestMetadata("cloneCallsSuper.kt")
      public void testCloneCallsSuper() {
        runTest("compiler/testData/codegen/box/javaInterop/objectMethods/cloneCallsSuper.kt");
      }

      @TestMetadata("cloneCallsSuperAndModifies.kt")
      public void testCloneCallsSuperAndModifies() {
        runTest("compiler/testData/codegen/box/javaInterop/objectMethods/cloneCallsSuperAndModifies.kt");
      }

      @TestMetadata("cloneHashSet.kt")
      public void testCloneHashSet() {
        runTest("compiler/testData/codegen/box/javaInterop/objectMethods/cloneHashSet.kt");
      }

      @TestMetadata("cloneHierarchy.kt")
      public void testCloneHierarchy() {
        runTest("compiler/testData/codegen/box/javaInterop/objectMethods/cloneHierarchy.kt");
      }

      @TestMetadata("cloneableClassWithoutClone.kt")
      public void testCloneableClassWithoutClone() {
        runTest("compiler/testData/codegen/box/javaInterop/objectMethods/cloneableClassWithoutClone.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/javaInterop/primitiveVsWrapperTypeInInheritance")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class PrimitiveVsWrapperTypeInInheritance extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInPrimitiveVsWrapperTypeInInheritance() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/javaInterop/primitiveVsWrapperTypeInInheritance"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("anotherKotlinClassInTheMiddle.kt")
      public void testAnotherKotlinClassInTheMiddle() {
        runTest("compiler/testData/codegen/box/javaInterop/primitiveVsWrapperTypeInInheritance/anotherKotlinClassInTheMiddle.kt");
      }

      @TestMetadata("diamond.kt")
      public void testDiamond() {
        runTest("compiler/testData/codegen/box/javaInterop/primitiveVsWrapperTypeInInheritance/diamond.kt");
      }

      @TestMetadata("double.kt")
      public void testDouble() {
        runTest("compiler/testData/codegen/box/javaInterop/primitiveVsWrapperTypeInInheritance/double.kt");
      }

      @TestMetadata("generic.kt")
      public void testGeneric() {
        runTest("compiler/testData/codegen/box/javaInterop/primitiveVsWrapperTypeInInheritance/generic.kt");
      }

      @TestMetadata("int.kt")
      public void testInt() {
        runTest("compiler/testData/codegen/box/javaInterop/primitiveVsWrapperTypeInInheritance/int.kt");
      }

      @TestMetadata("intersectionWithMultipleDefaultsInJava.kt")
      public void testIntersectionWithMultipleDefaultsInJava() {
        runTest("compiler/testData/codegen/box/javaInterop/primitiveVsWrapperTypeInInheritance/intersectionWithMultipleDefaultsInJava.kt");
      }

      @TestMetadata("intersectionWithMultipleDefaultsInJavaOverriddenByIntersectionInKotlin.kt")
      public void testIntersectionWithMultipleDefaultsInJavaOverriddenByIntersectionInKotlin() {
        runTest("compiler/testData/codegen/box/javaInterop/primitiveVsWrapperTypeInInheritance/intersectionWithMultipleDefaultsInJavaOverriddenByIntersectionInKotlin.kt");
      }

      @TestMetadata("intersectionWithMultipleDefaultsInJavaWithAdditionalSymbolsAfterNonSubsumed.kt")
      public void testIntersectionWithMultipleDefaultsInJavaWithAdditionalSymbolsAfterNonSubsumed() {
        runTest("compiler/testData/codegen/box/javaInterop/primitiveVsWrapperTypeInInheritance/intersectionWithMultipleDefaultsInJavaWithAdditionalSymbolsAfterNonSubsumed.kt");
      }

      @TestMetadata("nullableInt.kt")
      public void testNullableInt() {
        runTest("compiler/testData/codegen/box/javaInterop/primitiveVsWrapperTypeInInheritance/nullableInt.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/javaInterop/statics")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Statics extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInStatics() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/javaInterop/statics"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("inheritTwoStaticMethods.kt")
      public void testInheritTwoStaticMethods() {
        runTest("compiler/testData/codegen/box/javaInterop/statics/inheritTwoStaticMethods.kt");
      }

      @TestMetadata("inheritTwoStaticMethods2.kt")
      public void testInheritTwoStaticMethods2() {
        runTest("compiler/testData/codegen/box/javaInterop/statics/inheritTwoStaticMethods2.kt");
      }

      @TestMetadata("inheritTwoStaticMethods3.kt")
      public void testInheritTwoStaticMethods3() {
        runTest("compiler/testData/codegen/box/javaInterop/statics/inheritTwoStaticMethods3.kt");
      }

      @TestMetadata("jkkjk.kt")
      public void testJkkjk() {
        runTest("compiler/testData/codegen/box/javaInterop/statics/jkkjk.kt");
      }

      @TestMetadata("overrideInstanceMethodWithIrrelevantStatic.kt")
      public void testOverrideInstanceMethodWithIrrelevantStatic() {
        runTest("compiler/testData/codegen/box/javaInterop/statics/overrideInstanceMethodWithIrrelevantStatic.kt");
      }
    }
  }

  @TestMetadata("compiler/testData/codegen/box/javaVisibility")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class JavaVisibility extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInJavaVisibility() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/javaVisibility"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("compiler/testData/codegen/box/javaVisibility/package")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Package extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInPackage() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/javaVisibility/package"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("cannotAccessInterfaceMemberViaReceiver.kt")
      public void testCannotAccessInterfaceMemberViaReceiver() {
        runTest("compiler/testData/codegen/box/javaVisibility/package/cannotAccessInterfaceMemberViaReceiver.kt");
      }

      @TestMetadata("cannotAccessStaticMemberViaReceiver.kt")
      public void testCannotAccessStaticMemberViaReceiver() {
        runTest("compiler/testData/codegen/box/javaVisibility/package/cannotAccessStaticMemberViaReceiver.kt");
      }

      @TestMetadata("cannotAccessStaticMemberViaReceiver2.kt")
      public void testCannotAccessStaticMemberViaReceiver2() {
        runTest("compiler/testData/codegen/box/javaVisibility/package/cannotAccessStaticMemberViaReceiver2.kt");
      }

      @TestMetadata("cannotAccessStaticMemberViaTypeAlias.kt")
      public void testCannotAccessStaticMemberViaTypeAlias() {
        runTest("compiler/testData/codegen/box/javaVisibility/package/cannotAccessStaticMemberViaTypeAlias.kt");
      }

      @TestMetadata("inheritedPackageStaticField.kt")
      public void testInheritedPackageStaticField() {
        runTest("compiler/testData/codegen/box/javaVisibility/package/inheritedPackageStaticField.kt");
      }

      @TestMetadata("inheritedPackageStaticFunction.kt")
      public void testInheritedPackageStaticFunction() {
        runTest("compiler/testData/codegen/box/javaVisibility/package/inheritedPackageStaticFunction.kt");
      }

      @TestMetadata("kt2781.kt")
      public void testKt2781() {
        runTest("compiler/testData/codegen/box/javaVisibility/package/kt2781.kt");
      }

      @TestMetadata("packageClass.kt")
      public void testPackageClass() {
        runTest("compiler/testData/codegen/box/javaVisibility/package/packageClass.kt");
      }

      @TestMetadata("packageFun.kt")
      public void testPackageFun() {
        runTest("compiler/testData/codegen/box/javaVisibility/package/packageFun.kt");
      }

      @TestMetadata("packageProperty.kt")
      public void testPackageProperty() {
        runTest("compiler/testData/codegen/box/javaVisibility/package/packageProperty.kt");
      }

      @TestMetadata("publicInterfaceImplementedByPackagePrivateClass.kt")
      public void testPublicInterfaceImplementedByPackagePrivateClass() {
        runTest("compiler/testData/codegen/box/javaVisibility/package/publicInterfaceImplementedByPackagePrivateClass.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/javaVisibility/protectedAndPackage")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ProtectedAndPackage extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInProtectedAndPackage() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/javaVisibility/protectedAndPackage"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("kt42012.kt")
      public void testKt42012() {
        runTest("compiler/testData/codegen/box/javaVisibility/protectedAndPackage/kt42012.kt");
      }

      @TestMetadata("overrideProtectedFunInPackage.kt")
      public void testOverrideProtectedFunInPackage() {
        runTest("compiler/testData/codegen/box/javaVisibility/protectedAndPackage/overrideProtectedFunInPackage.kt");
      }

      @TestMetadata("protectedAccessor.kt")
      public void testProtectedAccessor() {
        runTest("compiler/testData/codegen/box/javaVisibility/protectedAndPackage/protectedAccessor.kt");
      }

      @TestMetadata("protectedFunInPackage.kt")
      public void testProtectedFunInPackage() {
        runTest("compiler/testData/codegen/box/javaVisibility/protectedAndPackage/protectedFunInPackage.kt");
      }

      @TestMetadata("protectedPropertyInPackage.kt")
      public void testProtectedPropertyInPackage() {
        runTest("compiler/testData/codegen/box/javaVisibility/protectedAndPackage/protectedPropertyInPackage.kt");
      }

      @TestMetadata("protectedPropertyInPackageFromCrossinline.kt")
      public void testProtectedPropertyInPackageFromCrossinline() {
        runTest("compiler/testData/codegen/box/javaVisibility/protectedAndPackage/protectedPropertyInPackageFromCrossinline.kt");
      }

      @TestMetadata("protectedStaticClass.kt")
      public void testProtectedStaticClass() {
        runTest("compiler/testData/codegen/box/javaVisibility/protectedAndPackage/protectedStaticClass.kt");
      }

      @TestMetadata("protectedSuperField.kt")
      public void testProtectedSuperField() {
        runTest("compiler/testData/codegen/box/javaVisibility/protectedAndPackage/protectedSuperField.kt");
      }

      @TestMetadata("protectedSuperMethod.kt")
      public void testProtectedSuperMethod() {
        runTest("compiler/testData/codegen/box/javaVisibility/protectedAndPackage/protectedSuperMethod.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/javaVisibility/protectedStatic")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ProtectedStatic extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInProtectedStatic() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/javaVisibility/protectedStatic"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("funCallInConstructor.kt")
      public void testFunCallInConstructor() {
        runTest("compiler/testData/codegen/box/javaVisibility/protectedStatic/funCallInConstructor.kt");
      }

      @TestMetadata("funClassObject.kt")
      public void testFunClassObject() {
        runTest("compiler/testData/codegen/box/javaVisibility/protectedStatic/funClassObject.kt");
      }

      @TestMetadata("funGenericClass.kt")
      public void testFunGenericClass() {
        runTest("compiler/testData/codegen/box/javaVisibility/protectedStatic/funGenericClass.kt");
      }

      @TestMetadata("funNestedStaticClass.kt")
      public void testFunNestedStaticClass() {
        runTest("compiler/testData/codegen/box/javaVisibility/protectedStatic/funNestedStaticClass.kt");
      }

      @TestMetadata("funNestedStaticClass2.kt")
      public void testFunNestedStaticClass2() {
        runTest("compiler/testData/codegen/box/javaVisibility/protectedStatic/funNestedStaticClass2.kt");
      }

      @TestMetadata("funNestedStaticGenericClass.kt")
      public void testFunNestedStaticGenericClass() {
        runTest("compiler/testData/codegen/box/javaVisibility/protectedStatic/funNestedStaticGenericClass.kt");
      }

      @TestMetadata("funNotDirectSuperClass.kt")
      public void testFunNotDirectSuperClass() {
        runTest("compiler/testData/codegen/box/javaVisibility/protectedStatic/funNotDirectSuperClass.kt");
      }

      @TestMetadata("funObject.kt")
      public void testFunObject() {
        runTest("compiler/testData/codegen/box/javaVisibility/protectedStatic/funObject.kt");
      }

      @TestMetadata("simpleClass.kt")
      public void testSimpleClass() {
        runTest("compiler/testData/codegen/box/javaVisibility/protectedStatic/simpleClass.kt");
      }

      @TestMetadata("simpleClass2.kt")
      public void testSimpleClass2() {
        runTest("compiler/testData/codegen/box/javaVisibility/protectedStatic/simpleClass2.kt");
      }

      @TestMetadata("simpleFun.kt")
      public void testSimpleFun() {
        runTest("compiler/testData/codegen/box/javaVisibility/protectedStatic/simpleFun.kt");
      }

      @TestMetadata("simpleProperty.kt")
      public void testSimpleProperty() {
        runTest("compiler/testData/codegen/box/javaVisibility/protectedStatic/simpleProperty.kt");
      }
    }
  }

  @TestMetadata("compiler/testData/codegen/box/jdk")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Jdk extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInJdk() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/jdk"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("arrayList.kt")
    public void testArrayList() {
      runTest("compiler/testData/codegen/box/jdk/arrayList.kt");
    }

    @TestMetadata("hashMap.kt")
    public void testHashMap() {
      runTest("compiler/testData/codegen/box/jdk/hashMap.kt");
    }

    @TestMetadata("iteratingOverHashMap.kt")
    public void testIteratingOverHashMap() {
      runTest("compiler/testData/codegen/box/jdk/iteratingOverHashMap.kt");
    }

    @TestMetadata("kt1397.kt")
    public void testKt1397() {
      runTest("compiler/testData/codegen/box/jdk/kt1397.kt");
    }

    @TestMetadata("noStringToCharArray.kt")
    public void testNoStringToCharArray() {
      runTest("compiler/testData/codegen/box/jdk/noStringToCharArray.kt");
    }

    @TestMetadata("removeIf.kt")
    public void testRemoveIf() {
      runTest("compiler/testData/codegen/box/jdk/removeIf.kt");
    }

    @TestMetadata("stream.kt")
    public void testStream() {
      runTest("compiler/testData/codegen/box/jdk/stream.kt");
    }

    @TestMetadata("useStream.kt")
    public void testUseStream() {
      runTest("compiler/testData/codegen/box/jdk/useStream.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/js")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Js extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInJs() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/js"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("compiler/testData/codegen/box/js/inlinedReturnBreakContinue")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class InlinedReturnBreakContinue extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInInlinedReturnBreakContinue() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/js/inlinedReturnBreakContinue"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }
    }
  }

  @TestMetadata("compiler/testData/codegen/box/jvm8")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Jvm8 extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInJvm8() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/jvm8"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("bridgeInClass.kt")
    public void testBridgeInClass() {
      runTest("compiler/testData/codegen/box/jvm8/bridgeInClass.kt");
    }

    @TestMetadata("bridgeInInterface.kt")
    public void testBridgeInInterface() {
      runTest("compiler/testData/codegen/box/jvm8/bridgeInInterface.kt");
    }

    @TestMetadata("capturedSuperCall.kt")
    public void testCapturedSuperCall() {
      runTest("compiler/testData/codegen/box/jvm8/capturedSuperCall.kt");
    }

    @TestMetadata("defaultArgs.kt")
    public void testDefaultArgs() {
      runTest("compiler/testData/codegen/box/jvm8/defaultArgs.kt");
    }

    @TestMetadata("inlineFromAnotherFile.kt")
    public void testInlineFromAnotherFile() {
      runTest("compiler/testData/codegen/box/jvm8/inlineFromAnotherFile.kt");
    }

    @TestMetadata("inlineFromStdlib.kt")
    public void testInlineFromStdlib() {
      runTest("compiler/testData/codegen/box/jvm8/inlineFromStdlib.kt");
    }

    @TestMetadata("kt11969.kt")
    public void testKt11969() {
      runTest("compiler/testData/codegen/box/jvm8/kt11969.kt");
    }

    @TestMetadata("kt14243.kt")
    public void testKt14243() {
      runTest("compiler/testData/codegen/box/jvm8/kt14243.kt");
    }

    @TestMetadata("kt14243_2.kt")
    public void testKt14243_2() {
      runTest("compiler/testData/codegen/box/jvm8/kt14243_2.kt");
    }

    @TestMetadata("kt14243_prop.kt")
    public void testKt14243_prop() {
      runTest("compiler/testData/codegen/box/jvm8/kt14243_prop.kt");
    }

    @TestMetadata("kt16581.kt")
    public void testKt16581() {
      runTest("compiler/testData/codegen/box/jvm8/kt16581.kt");
    }

    @TestMetadata("kt16581_2.kt")
    public void testKt16581_2() {
      runTest("compiler/testData/codegen/box/jvm8/kt16581_2.kt");
    }

    @TestMetadata("kt16588.kt")
    public void testKt16588() {
      runTest("compiler/testData/codegen/box/jvm8/kt16588.kt");
    }

    @TestMetadata("kt29242.kt")
    public void testKt29242() {
      runTest("compiler/testData/codegen/box/jvm8/kt29242.kt");
    }

    @TestMetadata("kt33054.kt")
    public void testKt33054() {
      runTest("compiler/testData/codegen/box/jvm8/kt33054.kt");
    }

    @TestMetadata("kt6301.kt")
    public void testKt6301() {
      runTest("compiler/testData/codegen/box/jvm8/kt6301.kt");
    }

    @TestMetadata("kt6301_2.kt")
    public void testKt6301_2() {
      runTest("compiler/testData/codegen/box/jvm8/kt6301_2.kt");
    }

    @TestMetadata("oneImplementation.kt")
    public void testOneImplementation() {
      runTest("compiler/testData/codegen/box/jvm8/oneImplementation.kt");
    }

    @TestMetadata("oneImplementation2.kt")
    public void testOneImplementation2() {
      runTest("compiler/testData/codegen/box/jvm8/oneImplementation2.kt");
    }

    @TestMetadata("simpleCall.kt")
    public void testSimpleCall() {
      runTest("compiler/testData/codegen/box/jvm8/simpleCall.kt");
    }

    @TestMetadata("simpleProperty.kt")
    public void testSimpleProperty() {
      runTest("compiler/testData/codegen/box/jvm8/simpleProperty.kt");
    }

    @TestMetadata("treeMapBridge.kt")
    public void testTreeMapBridge() {
      runTest("compiler/testData/codegen/box/jvm8/treeMapBridge.kt");
    }

    @TestMetadata("compiler/testData/codegen/box/jvm8/defaults")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Defaults extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInDefaults() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/jvm8/defaults"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("builtInsInherited.kt")
      public void testBuiltInsInherited() {
        runTest("compiler/testData/codegen/box/jvm8/defaults/builtInsInherited.kt");
      }

      @TestMetadata("kt26360.kt")
      public void testKt26360() {
        runTest("compiler/testData/codegen/box/jvm8/defaults/kt26360.kt");
      }

      @TestMetadata("compiler/testData/codegen/box/jvm8/defaults/allCompatibility")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class AllCompatibility extends AbstractLightAnalysisModeTest {
        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        @TestMetadata("accessor.kt")
        public void testAccessor() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/accessor.kt");
        }

        @TestMetadata("accessorFromCompanion.kt")
        public void testAccessorFromCompanion() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/accessorFromCompanion.kt");
        }

        public void testAllFilesPresentInAllCompatibility() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/jvm8/defaults/allCompatibility"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("bridge.kt")
        public void testBridge() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/bridge.kt");
        }

        @TestMetadata("bridge2.kt")
        public void testBridge2() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/bridge2.kt");
        }

        @TestMetadata("bridge3.kt")
        public void testBridge3() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/bridge3.kt");
        }

        @TestMetadata("bridgeInClass.kt")
        public void testBridgeInClass() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/bridgeInClass.kt");
        }

        @TestMetadata("bridgeInInterface.kt")
        public void testBridgeInInterface() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/bridgeInInterface.kt");
        }

        @TestMetadata("bridgeInInterface2.kt")
        public void testBridgeInInterface2() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/bridgeInInterface2.kt");
        }

        @TestMetadata("bridgeInInterfaceWithProperties.kt")
        public void testBridgeInInterfaceWithProperties() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/bridgeInInterfaceWithProperties.kt");
        }

        @TestMetadata("bridgeInInterfaceWithProperties2.kt")
        public void testBridgeInInterfaceWithProperties2() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/bridgeInInterfaceWithProperties2.kt");
        }

        @TestMetadata("bridgeWithJava.kt")
        public void testBridgeWithJava() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/bridgeWithJava.kt");
        }

        @TestMetadata("bridgeWithProperties.kt")
        public void testBridgeWithProperties() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/bridgeWithProperties.kt");
        }

        @TestMetadata("bridgeWithProperties2.kt")
        public void testBridgeWithProperties2() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/bridgeWithProperties2.kt");
        }

        @TestMetadata("bridgeWithProperties3.kt")
        public void testBridgeWithProperties3() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/bridgeWithProperties3.kt");
        }

        @TestMetadata("callStackTrace.kt")
        public void testCallStackTrace() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/callStackTrace.kt");
        }

        @TestMetadata("callableReference.kt")
        public void testCallableReference() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/callableReference.kt");
        }

        @TestMetadata("capturedSuperCall.kt")
        public void testCapturedSuperCall() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/capturedSuperCall.kt");
        }

        @TestMetadata("defaultArgs.kt")
        public void testDefaultArgs() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/defaultArgs.kt");
        }

        @TestMetadata("defaultArgsViaAnonymousObject.kt")
        public void testDefaultArgsViaAnonymousObject() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/defaultArgsViaAnonymousObject.kt");
        }

        @TestMetadata("deprecatedAnnotation.kt")
        public void testDeprecatedAnnotation() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/deprecatedAnnotation.kt");
        }

        @TestMetadata("deprecatedDefaultMethod.kt")
        public void testDeprecatedDefaultMethod() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/deprecatedDefaultMethod.kt");
        }

        @TestMetadata("diamond.kt")
        public void testDiamond() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/diamond.kt");
        }

        @TestMetadata("funInterface.kt")
        public void testFunInterface() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/funInterface.kt");
        }

        @TestMetadata("inheritedFunctionWithDefaultParameters.kt")
        public void testInheritedFunctionWithDefaultParameters() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/inheritedFunctionWithDefaultParameters.kt");
        }

        @TestMetadata("inheritedJvmDefault.kt")
        public void testInheritedJvmDefault() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/inheritedJvmDefault.kt");
        }

        @TestMetadata("inline.kt")
        public void testInline() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/inline.kt");
        }

        @TestMetadata("inlineProperty.kt")
        public void testInlineProperty() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/inlineProperty.kt");
        }

        @TestMetadata("interfaceExtension.kt")
        public void testInterfaceExtension() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/interfaceExtension.kt");
        }

        @TestMetadata("kt11969.kt")
        public void testKt11969() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/kt11969.kt");
        }

        @TestMetadata("kt14243.kt")
        public void testKt14243() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/kt14243.kt");
        }

        @TestMetadata("kt14243_2.kt")
        public void testKt14243_2() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/kt14243_2.kt");
        }

        @TestMetadata("kt14243_prop.kt")
        public void testKt14243_prop() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/kt14243_prop.kt");
        }

        @TestMetadata("kt40920.kt")
        public void testKt40920() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/kt40920.kt");
        }

        @TestMetadata("kt42674.kt")
        public void testKt42674() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/kt42674.kt");
        }

        @TestMetadata("localDelegatedProperties.kt")
        public void testLocalDelegatedProperties() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/localDelegatedProperties.kt");
        }

        @TestMetadata("oneImplementation.kt")
        public void testOneImplementation() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/oneImplementation.kt");
        }

        @TestMetadata("oneImplementation2.kt")
        public void testOneImplementation2() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/oneImplementation2.kt");
        }

        @TestMetadata("privateFunInInterface.kt")
        public void testPrivateFunInInterface() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/privateFunInInterface.kt");
        }

        @TestMetadata("privateFunWithDefaultArg.kt")
        public void testPrivateFunWithDefaultArg() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/privateFunWithDefaultArg.kt");
        }

        @TestMetadata("privateFunWithDefaultArg2.kt")
        public void testPrivateFunWithDefaultArg2() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/privateFunWithDefaultArg2.kt");
        }

        @TestMetadata("privateSuspend.kt")
        public void testPrivateSuspend() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/privateSuspend.kt");
        }

        @TestMetadata("propertyAnnotation.kt")
        public void testPropertyAnnotation() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/propertyAnnotation.kt");
        }

        @TestMetadata("simpleFunction.kt")
        public void testSimpleFunction() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/simpleFunction.kt");
        }

        @TestMetadata("superCall.kt")
        public void testSuperCall() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/superCall.kt");
        }

        @TestMetadata("suspendFunction.kt")
        public void testSuspendFunction() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/suspendFunction.kt");
        }

        @TestMetadata("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/delegationBy")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class DelegationBy extends AbstractLightAnalysisModeTest {
          private void runTest(String testDataFilePath) {
            KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
          }

          public void testAllFilesPresentInDelegationBy() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/delegationBy"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }

          @TestMetadata("simple.kt")
          public void testSimple() {
            runTest("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/delegationBy/simple.kt");
          }

          @TestMetadata("simpleProperty.kt")
          public void testSimpleProperty() {
            runTest("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/delegationBy/simpleProperty.kt");
          }
        }
      }

      @TestMetadata("compiler/testData/codegen/box/jvm8/defaults/delegationBy")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class DelegationBy extends AbstractLightAnalysisModeTest {
        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        public void testAllFilesPresentInDelegationBy() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/jvm8/defaults/delegationBy"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("javaDefaultMethod.kt")
        public void testJavaDefaultMethod() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/delegationBy/javaDefaultMethod.kt");
        }
      }

      @TestMetadata("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class NoDefaultImpls extends AbstractLightAnalysisModeTest {
        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        @TestMetadata("accessor.kt")
        public void testAccessor() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/accessor.kt");
        }

        @TestMetadata("accessorFromCompanion.kt")
        public void testAccessorFromCompanion() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/accessorFromCompanion.kt");
        }

        public void testAllFilesPresentInNoDefaultImpls() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("bridge.kt")
        public void testBridge() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/bridge.kt");
        }

        @TestMetadata("bridge2.kt")
        public void testBridge2() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/bridge2.kt");
        }

        @TestMetadata("bridge3.kt")
        public void testBridge3() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/bridge3.kt");
        }

        @TestMetadata("bridgeInClass.kt")
        public void testBridgeInClass() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/bridgeInClass.kt");
        }

        @TestMetadata("bridgeInInterface.kt")
        public void testBridgeInInterface() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/bridgeInInterface.kt");
        }

        @TestMetadata("bridgeInInterface2.kt")
        public void testBridgeInInterface2() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/bridgeInInterface2.kt");
        }

        @TestMetadata("bridgeInInterfaceWithProperties.kt")
        public void testBridgeInInterfaceWithProperties() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/bridgeInInterfaceWithProperties.kt");
        }

        @TestMetadata("bridgeInInterfaceWithProperties2.kt")
        public void testBridgeInInterfaceWithProperties2() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/bridgeInInterfaceWithProperties2.kt");
        }

        @TestMetadata("bridgeWithJava.kt")
        public void testBridgeWithJava() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/bridgeWithJava.kt");
        }

        @TestMetadata("bridgeWithProperties.kt")
        public void testBridgeWithProperties() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/bridgeWithProperties.kt");
        }

        @TestMetadata("bridgeWithProperties2.kt")
        public void testBridgeWithProperties2() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/bridgeWithProperties2.kt");
        }

        @TestMetadata("bridgeWithProperties3.kt")
        public void testBridgeWithProperties3() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/bridgeWithProperties3.kt");
        }

        @TestMetadata("callableReference.kt")
        public void testCallableReference() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/callableReference.kt");
        }

        @TestMetadata("capturedSuperCall.kt")
        public void testCapturedSuperCall() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/capturedSuperCall.kt");
        }

        @TestMetadata("defaultArgs.kt")
        public void testDefaultArgs() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/defaultArgs.kt");
        }

        @TestMetadata("defaultArgsViaAnonymousObject.kt")
        public void testDefaultArgsViaAnonymousObject() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/defaultArgsViaAnonymousObject.kt");
        }

        @TestMetadata("diamond.kt")
        public void testDiamond() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/diamond.kt");
        }

        @TestMetadata("funInterface.kt")
        public void testFunInterface() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/funInterface.kt");
        }

        @TestMetadata("inheritedFunctionWithDefaultParameters.kt")
        public void testInheritedFunctionWithDefaultParameters() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/inheritedFunctionWithDefaultParameters.kt");
        }

        @TestMetadata("inheritedJvmDefault.kt")
        public void testInheritedJvmDefault() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/inheritedJvmDefault.kt");
        }

        @TestMetadata("inline.kt")
        public void testInline() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/inline.kt");
        }

        @TestMetadata("inlineProperty.kt")
        public void testInlineProperty() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/inlineProperty.kt");
        }

        @TestMetadata("interfaceExtension.kt")
        public void testInterfaceExtension() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/interfaceExtension.kt");
        }

        @TestMetadata("kt11969.kt")
        public void testKt11969() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/kt11969.kt");
        }

        @TestMetadata("kt14243.kt")
        public void testKt14243() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/kt14243.kt");
        }

        @TestMetadata("kt14243_2.kt")
        public void testKt14243_2() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/kt14243_2.kt");
        }

        @TestMetadata("kt14243_prop.kt")
        public void testKt14243_prop() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/kt14243_prop.kt");
        }

        @TestMetadata("kt40920.kt")
        public void testKt40920() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/kt40920.kt");
        }

        @TestMetadata("kt42674.kt")
        public void testKt42674() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/kt42674.kt");
        }

        @TestMetadata("kt42967_all.kt")
        public void testKt42967_all() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/kt42967_all.kt");
        }

        @TestMetadata("localDelegatedProperties.kt")
        public void testLocalDelegatedProperties() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/localDelegatedProperties.kt");
        }

        @TestMetadata("localDelegatedProperties2.kt")
        public void testLocalDelegatedProperties2() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/localDelegatedProperties2.kt");
        }

        @TestMetadata("oneImplementation.kt")
        public void testOneImplementation() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/oneImplementation.kt");
        }

        @TestMetadata("oneImplementation2.kt")
        public void testOneImplementation2() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/oneImplementation2.kt");
        }

        @TestMetadata("privateFunInInterface.kt")
        public void testPrivateFunInInterface() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/privateFunInInterface.kt");
        }

        @TestMetadata("privateFunWithDefaultArg.kt")
        public void testPrivateFunWithDefaultArg() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/privateFunWithDefaultArg.kt");
        }

        @TestMetadata("privateSuspend.kt")
        public void testPrivateSuspend() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/privateSuspend.kt");
        }

        @TestMetadata("propertyAnnotation.kt")
        public void testPropertyAnnotation() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/propertyAnnotation.kt");
        }

        @TestMetadata("simpleFunction.kt")
        public void testSimpleFunction() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/simpleFunction.kt");
        }

        @TestMetadata("suspendFunction.kt")
        public void testSuspendFunction() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/suspendFunction.kt");
        }

        @TestMetadata("suspendSuperCall.kt")
        public void testSuspendSuperCall() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/suspendSuperCall.kt");
        }

        @TestMetadata("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/delegationBy")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class DelegationBy extends AbstractLightAnalysisModeTest {
          private void runTest(String testDataFilePath) {
            KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
          }

          public void testAllFilesPresentInDelegationBy() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/delegationBy"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }

          @TestMetadata("simple.kt")
          public void testSimple() {
            runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/delegationBy/simple.kt");
          }

          @TestMetadata("simpleProperty.kt")
          public void testSimpleProperty() {
            runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/delegationBy/simpleProperty.kt");
          }
        }

        @TestMetadata("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/specialization")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Specialization extends AbstractLightAnalysisModeTest {
          private void runTest(String testDataFilePath) {
            KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
          }

          public void testAllFilesPresentInSpecialization() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/specialization"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }

          @TestMetadata("basic.kt")
          public void testBasic() {
            runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/specialization/basic.kt");
          }
        }

        @TestMetadata("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/withCompatibility")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class WithCompatibility extends AbstractLightAnalysisModeTest {
          private void runTest(String testDataFilePath) {
            KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
          }

          public void testAllFilesPresentInWithCompatibility() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/withCompatibility"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }

          @TestMetadata("defaultArgs.kt")
          public void testDefaultArgs() {
            runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/withCompatibility/defaultArgs.kt");
          }

          @TestMetadata("differentCases.kt")
          public void testDifferentCases() {
            runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/withCompatibility/differentCases.kt");
          }

          @TestMetadata("javaInheritance.kt")
          public void testJavaInheritance() {
            runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/withCompatibility/javaInheritance.kt");
          }

          @TestMetadata("propertyAnnotation.kt")
          public void testPropertyAnnotation() {
            runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/withCompatibility/propertyAnnotation.kt");
          }

          @TestMetadata("simple.kt")
          public void testSimple() {
            runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/withCompatibility/simple.kt");
          }

          @TestMetadata("suspend.kt")
          public void testSuspend() {
            runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/withCompatibility/suspend.kt");
          }
        }
      }

      @TestMetadata("compiler/testData/codegen/box/jvm8/defaults/nonDefaultInheritance")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class NonDefaultInheritance extends AbstractLightAnalysisModeTest {
        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        public void testAllFilesPresentInNonDefaultInheritance() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/jvm8/defaults/nonDefaultInheritance"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("diamondWithJava.kt")
        public void testDiamondWithJava() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/nonDefaultInheritance/diamondWithJava.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/nonDefaultInheritance/simple.kt");
        }

        @TestMetadata("simple2.kt")
        public void testSimple2() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/nonDefaultInheritance/simple2.kt");
        }

        @TestMetadata("specialization.kt")
        public void testSpecialization() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/nonDefaultInheritance/specialization.kt");
        }

        @TestMetadata("superCall.kt")
        public void testSuperCall() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/nonDefaultInheritance/superCall.kt");
        }
      }

      @TestMetadata("compiler/testData/codegen/box/jvm8/defaults/reflection")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class Reflection extends AbstractLightAnalysisModeTest {
        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        public void testAllFilesPresentInReflection() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/jvm8/defaults/reflection"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("propertyAnnotations.kt")
        public void testPropertyAnnotations() {
          runTest("compiler/testData/codegen/box/jvm8/defaults/reflection/propertyAnnotations.kt");
        }
      }
    }

    @TestMetadata("compiler/testData/codegen/box/jvm8/interfaceFlag")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class InterfaceFlag extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInInterfaceFlag() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/jvm8/interfaceFlag"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("superCall.kt")
      public void testSuperCall() {
        runTest("compiler/testData/codegen/box/jvm8/interfaceFlag/superCall.kt");
      }

      @TestMetadata("superCallIndirect.kt")
      public void testSuperCallIndirect() {
        runTest("compiler/testData/codegen/box/jvm8/interfaceFlag/superCallIndirect.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/jvm8/javaDefaults")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class JavaDefaults extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInJavaDefaults() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/jvm8/javaDefaults"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("capturedSuperCall.kt")
      public void testCapturedSuperCall() {
        runTest("compiler/testData/codegen/box/jvm8/javaDefaults/capturedSuperCall.kt");
      }

      @TestMetadata("defaultMethodCallFromInterface.kt")
      public void testDefaultMethodCallFromInterface() {
        runTest("compiler/testData/codegen/box/jvm8/javaDefaults/defaultMethodCallFromInterface.kt");
      }

      @TestMetadata("defaultMethodCallViaClass.kt")
      public void testDefaultMethodCallViaClass() {
        runTest("compiler/testData/codegen/box/jvm8/javaDefaults/defaultMethodCallViaClass.kt");
      }

      @TestMetadata("defaultMethodCallViaInterface.kt")
      public void testDefaultMethodCallViaInterface() {
        runTest("compiler/testData/codegen/box/jvm8/javaDefaults/defaultMethodCallViaInterface.kt");
      }

      @TestMetadata("defaultMethodOverride.kt")
      public void testDefaultMethodOverride() {
        runTest("compiler/testData/codegen/box/jvm8/javaDefaults/defaultMethodOverride.kt");
      }

      @TestMetadata("dontDelegateToDefaultMethods.kt")
      public void testDontDelegateToDefaultMethods() {
        runTest("compiler/testData/codegen/box/jvm8/javaDefaults/dontDelegateToDefaultMethods.kt");
      }

      @TestMetadata("inheritKotlin.kt")
      public void testInheritKotlin() {
        runTest("compiler/testData/codegen/box/jvm8/javaDefaults/inheritKotlin.kt");
      }

      @TestMetadata("invokeDefaultViaSuper.kt")
      public void testInvokeDefaultViaSuper() {
        runTest("compiler/testData/codegen/box/jvm8/javaDefaults/invokeDefaultViaSuper.kt");
      }

      @TestMetadata("kt40920.kt")
      public void testKt40920() {
        runTest("compiler/testData/codegen/box/jvm8/javaDefaults/kt40920.kt");
      }

      @TestMetadata("kt40920_java.kt")
      public void testKt40920_java() {
        runTest("compiler/testData/codegen/box/jvm8/javaDefaults/kt40920_java.kt");
      }

      @TestMetadata("kt40920_java2.kt")
      public void testKt40920_java2() {
        runTest("compiler/testData/codegen/box/jvm8/javaDefaults/kt40920_java2.kt");
      }

      @TestMetadata("kt40920_map.kt")
      public void testKt40920_map() {
        runTest("compiler/testData/codegen/box/jvm8/javaDefaults/kt40920_map.kt");
      }

      @TestMetadata("kt42967.kt")
      public void testKt42967() {
        runTest("compiler/testData/codegen/box/jvm8/javaDefaults/kt42967.kt");
      }

      @TestMetadata("longChainOfKotlinExtendsFromJavaWithDefault.kt")
      public void testLongChainOfKotlinExtendsFromJavaWithDefault() {
        runTest("compiler/testData/codegen/box/jvm8/javaDefaults/longChainOfKotlinExtendsFromJavaWithDefault.kt");
      }

      @TestMetadata("samOnInterfaceWithDefaultMethod.kt")
      public void testSamOnInterfaceWithDefaultMethod() {
        runTest("compiler/testData/codegen/box/jvm8/javaDefaults/samOnInterfaceWithDefaultMethod.kt");
      }
    }
  }

  @TestMetadata("compiler/testData/codegen/box/jvmField")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class JvmField extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInJvmField() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/jvmField"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("annotationCompanion.kt")
    public void testAnnotationCompanion() {
      runTest("compiler/testData/codegen/box/jvmField/annotationCompanion.kt");
    }

    @TestMetadata("annotationCompanionWithJava.kt")
    public void testAnnotationCompanionWithJava() {
      runTest("compiler/testData/codegen/box/jvmField/annotationCompanionWithJava.kt");
    }

    @TestMetadata("captureClassFields.kt")
    public void testCaptureClassFields() {
      runTest("compiler/testData/codegen/box/jvmField/captureClassFields.kt");
    }

    @TestMetadata("capturePackageFields.kt")
    public void testCapturePackageFields() {
      runTest("compiler/testData/codegen/box/jvmField/capturePackageFields.kt");
    }

    @TestMetadata("checkNoAccessors.kt")
    public void testCheckNoAccessors() {
      runTest("compiler/testData/codegen/box/jvmField/checkNoAccessors.kt");
    }

    @TestMetadata("clashWithJavaSuperClassField.kt")
    public void testClashWithJavaSuperClassField() {
      runTest("compiler/testData/codegen/box/jvmField/clashWithJavaSuperClassField.kt");
    }

    @TestMetadata("classFieldReference.kt")
    public void testClassFieldReference() {
      runTest("compiler/testData/codegen/box/jvmField/classFieldReference.kt");
    }

    @TestMetadata("classFieldReflection.kt")
    public void testClassFieldReflection() {
      runTest("compiler/testData/codegen/box/jvmField/classFieldReflection.kt");
    }

    @TestMetadata("compoundAccess.kt")
    public void testCompoundAccess() {
      runTest("compiler/testData/codegen/box/jvmField/compoundAccess.kt");
    }

    @TestMetadata("constructorProperty.kt")
    public void testConstructorProperty() {
      runTest("compiler/testData/codegen/box/jvmField/constructorProperty.kt");
    }

    @TestMetadata("diamond.kt")
    public void testDiamond() {
      runTest("compiler/testData/codegen/box/jvmField/diamond.kt");
    }

    @TestMetadata("fileOrder.kt")
    public void testFileOrder() {
      runTest("compiler/testData/codegen/box/jvmField/fileOrder.kt");
    }

    @TestMetadata("fileOrderWithCopying.kt")
    public void testFileOrderWithCopying() {
      runTest("compiler/testData/codegen/box/jvmField/fileOrderWithCopying.kt");
    }

    @TestMetadata("initializersOrder.kt")
    public void testInitializersOrder() {
      runTest("compiler/testData/codegen/box/jvmField/initializersOrder.kt");
    }

    @TestMetadata("interfaceCompanion.kt")
    public void testInterfaceCompanion() {
      runTest("compiler/testData/codegen/box/jvmField/interfaceCompanion.kt");
    }

    @TestMetadata("interfaceCompanionWithJava.kt")
    public void testInterfaceCompanionWithJava() {
      runTest("compiler/testData/codegen/box/jvmField/interfaceCompanionWithJava.kt");
    }

    @TestMetadata("kt12189_noClashOnDifferentCase.kt")
    public void testKt12189_noClashOnDifferentCase() {
      runTest("compiler/testData/codegen/box/jvmField/kt12189_noClashOnDifferentCase.kt");
    }

    @TestMetadata("kt47328.kt")
    public void testKt47328() {
      runTest("compiler/testData/codegen/box/jvmField/kt47328.kt");
    }

    @TestMetadata("kt47328_inherited.kt")
    public void testKt47328_inherited() {
      runTest("compiler/testData/codegen/box/jvmField/kt47328_inherited.kt");
    }

    @TestMetadata("kt47328_super.kt")
    public void testKt47328_super() {
      runTest("compiler/testData/codegen/box/jvmField/kt47328_super.kt");
    }

    @TestMetadata("kt47328_var.kt")
    public void testKt47328_var() {
      runTest("compiler/testData/codegen/box/jvmField/kt47328_var.kt");
    }

    @TestMetadata("kt47739.kt")
    public void testKt47739() {
      runTest("compiler/testData/codegen/box/jvmField/kt47739.kt");
    }

    @TestMetadata("kt48295.kt")
    public void testKt48295() {
      runTest("compiler/testData/codegen/box/jvmField/kt48295.kt");
    }

    @TestMetadata("kt48295a.kt")
    public void testKt48295a() {
      runTest("compiler/testData/codegen/box/jvmField/kt48295a.kt");
    }

    @TestMetadata("noClashWithInheritedJavaMethod.kt")
    public void testNoClashWithInheritedJavaMethod() {
      runTest("compiler/testData/codegen/box/jvmField/noClashWithInheritedJavaMethod.kt");
    }

    @TestMetadata("publicField.kt")
    public void testPublicField() {
      runTest("compiler/testData/codegen/box/jvmField/publicField.kt");
    }

    @TestMetadata("publicFieldJava.kt")
    public void testPublicFieldJava() {
      runTest("compiler/testData/codegen/box/jvmField/publicFieldJava.kt");
    }

    @TestMetadata("simpleMemberProperty.kt")
    public void testSimpleMemberProperty() {
      runTest("compiler/testData/codegen/box/jvmField/simpleMemberProperty.kt");
    }

    @TestMetadata("superCall.kt")
    public void testSuperCall() {
      runTest("compiler/testData/codegen/box/jvmField/superCall.kt");
    }

    @TestMetadata("superCall2.kt")
    public void testSuperCall2() {
      runTest("compiler/testData/codegen/box/jvmField/superCall2.kt");
    }

    @TestMetadata("topLevelFieldReference.kt")
    public void testTopLevelFieldReference() {
      runTest("compiler/testData/codegen/box/jvmField/topLevelFieldReference.kt");
    }

    @TestMetadata("topLevelFieldReflection.kt")
    public void testTopLevelFieldReflection() {
      runTest("compiler/testData/codegen/box/jvmField/topLevelFieldReflection.kt");
    }

    @TestMetadata("visibility.kt")
    public void testVisibility() {
      runTest("compiler/testData/codegen/box/jvmField/visibility.kt");
    }

    @TestMetadata("writeFieldReference.kt")
    public void testWriteFieldReference() {
      runTest("compiler/testData/codegen/box/jvmField/writeFieldReference.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/jvmName")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class JvmName extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInJvmName() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/jvmName"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("annotationProperties.kt")
    public void testAnnotationProperties() {
      runTest("compiler/testData/codegen/box/jvmName/annotationProperties.kt");
    }

    @TestMetadata("callableReference.kt")
    public void testCallableReference() {
      runTest("compiler/testData/codegen/box/jvmName/callableReference.kt");
    }

    @TestMetadata("clashingErasure.kt")
    public void testClashingErasure() {
      runTest("compiler/testData/codegen/box/jvmName/clashingErasure.kt");
    }

    @TestMetadata("classMembers.kt")
    public void testClassMembers() {
      runTest("compiler/testData/codegen/box/jvmName/classMembers.kt");
    }

    @TestMetadata("conflictingGetterAndPropertyInBaseKotlinClass.kt")
    public void testConflictingGetterAndPropertyInBaseKotlinClass() {
      runTest("compiler/testData/codegen/box/jvmName/conflictingGetterAndPropertyInBaseKotlinClass.kt");
    }

    @TestMetadata("fakeJvmNameInJava.kt")
    public void testFakeJvmNameInJava() {
      runTest("compiler/testData/codegen/box/jvmName/fakeJvmNameInJava.kt");
    }

    @TestMetadata("fakeOverrideOfProperty.kt")
    public void testFakeOverrideOfProperty() {
      runTest("compiler/testData/codegen/box/jvmName/fakeOverrideOfProperty.kt");
    }

    @TestMetadata("functionName.kt")
    public void testFunctionName() {
      runTest("compiler/testData/codegen/box/jvmName/functionName.kt");
    }

    @TestMetadata("functionWithDefault.kt")
    public void testFunctionWithDefault() {
      runTest("compiler/testData/codegen/box/jvmName/functionWithDefault.kt");
    }

    @TestMetadata("kt23974.kt")
    public void testKt23974() {
      runTest("compiler/testData/codegen/box/jvmName/kt23974.kt");
    }

    @TestMetadata("loadJvmName.kt")
    public void testLoadJvmName() {
      runTest("compiler/testData/codegen/box/jvmName/loadJvmName.kt");
    }

    @TestMetadata("multifileClass.kt")
    public void testMultifileClass() {
      runTest("compiler/testData/codegen/box/jvmName/multifileClass.kt");
    }

    @TestMetadata("multifileClassWithLocalClass.kt")
    public void testMultifileClassWithLocalClass() {
      runTest("compiler/testData/codegen/box/jvmName/multifileClassWithLocalClass.kt");
    }

    @TestMetadata("multifileClassWithLocalGeneric.kt")
    public void testMultifileClassWithLocalGeneric() {
      runTest("compiler/testData/codegen/box/jvmName/multifileClassWithLocalGeneric.kt");
    }

    @TestMetadata("propertyAccessorsUseSite.kt")
    public void testPropertyAccessorsUseSite() {
      runTest("compiler/testData/codegen/box/jvmName/propertyAccessorsUseSite.kt");
    }

    @TestMetadata("propertyName.kt")
    public void testPropertyName() {
      runTest("compiler/testData/codegen/box/jvmName/propertyName.kt");
    }

    @TestMetadata("propertySyntheticMethod.kt")
    public void testPropertySyntheticMethod() {
      runTest("compiler/testData/codegen/box/jvmName/propertySyntheticMethod.kt");
    }

    @TestMetadata("renamedFileClass.kt")
    public void testRenamedFileClass() {
      runTest("compiler/testData/codegen/box/jvmName/renamedFileClass.kt");
    }

    @TestMetadata("compiler/testData/codegen/box/jvmName/fileFacades")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class FileFacades extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInFileFacades() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/jvmName/fileFacades"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("differentFiles.kt")
      public void testDifferentFiles() {
        runTest("compiler/testData/codegen/box/jvmName/fileFacades/differentFiles.kt");
      }

      @TestMetadata("javaAnnotationOnFileFacade.kt")
      public void testJavaAnnotationOnFileFacade() {
        runTest("compiler/testData/codegen/box/jvmName/fileFacades/javaAnnotationOnFileFacade.kt");
      }

      @TestMetadata("simple.kt")
      public void testSimple() {
        runTest("compiler/testData/codegen/box/jvmName/fileFacades/simple.kt");
      }
    }
  }

  @TestMetadata("compiler/testData/codegen/box/jvmOverloads")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class JvmOverloads extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInJvmOverloads() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/jvmOverloads"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("companionObject.kt")
    public void testCompanionObject() {
      runTest("compiler/testData/codegen/box/jvmOverloads/companionObject.kt");
    }

    @TestMetadata("constructorWithTypeParams.kt")
    public void testConstructorWithTypeParams() {
      runTest("compiler/testData/codegen/box/jvmOverloads/constructorWithTypeParams.kt");
    }

    @TestMetadata("defaultsNotAtEnd.kt")
    public void testDefaultsNotAtEnd() {
      runTest("compiler/testData/codegen/box/jvmOverloads/defaultsNotAtEnd.kt");
    }

    @TestMetadata("doubleParameters.kt")
    public void testDoubleParameters() {
      runTest("compiler/testData/codegen/box/jvmOverloads/doubleParameters.kt");
    }

    @TestMetadata("extensionMethod.kt")
    public void testExtensionMethod() {
      runTest("compiler/testData/codegen/box/jvmOverloads/extensionMethod.kt");
    }

    @TestMetadata("generics.kt")
    public void testGenerics() {
      runTest("compiler/testData/codegen/box/jvmOverloads/generics.kt");
    }

    @TestMetadata("innerClass.kt")
    public void testInnerClass() {
      runTest("compiler/testData/codegen/box/jvmOverloads/innerClass.kt");
    }

    @TestMetadata("manyParameters.kt")
    public void testManyParameters() {
      runTest("compiler/testData/codegen/box/jvmOverloads/manyParameters.kt");
    }

    @TestMetadata("multifileClass.kt")
    public void testMultifileClass() {
      runTest("compiler/testData/codegen/box/jvmOverloads/multifileClass.kt");
    }

    @TestMetadata("multipleDefaultParameters.kt")
    public void testMultipleDefaultParameters() {
      runTest("compiler/testData/codegen/box/jvmOverloads/multipleDefaultParameters.kt");
    }

    @TestMetadata("noRedundantVarargs.kt")
    public void testNoRedundantVarargs() {
      runTest("compiler/testData/codegen/box/jvmOverloads/noRedundantVarargs.kt");
    }

    @TestMetadata("nonDefaultParameter.kt")
    public void testNonDefaultParameter() {
      runTest("compiler/testData/codegen/box/jvmOverloads/nonDefaultParameter.kt");
    }

    @TestMetadata("primaryConstructor.kt")
    public void testPrimaryConstructor() {
      runTest("compiler/testData/codegen/box/jvmOverloads/primaryConstructor.kt");
    }

    @TestMetadata("primaryConstructorWithAllDefaults.kt")
    public void testPrimaryConstructorWithAllDefaults() {
      runTest("compiler/testData/codegen/box/jvmOverloads/primaryConstructorWithAllDefaults.kt");
    }

    @TestMetadata("privateClass.kt")
    public void testPrivateClass() {
      runTest("compiler/testData/codegen/box/jvmOverloads/privateClass.kt");
    }

    @TestMetadata("secondaryConstructor.kt")
    public void testSecondaryConstructor() {
      runTest("compiler/testData/codegen/box/jvmOverloads/secondaryConstructor.kt");
    }

    @TestMetadata("simple.kt")
    public void testSimple() {
      runTest("compiler/testData/codegen/box/jvmOverloads/simple.kt");
    }

    @TestMetadata("simpleJavaCall.kt")
    public void testSimpleJavaCall() {
      runTest("compiler/testData/codegen/box/jvmOverloads/simpleJavaCall.kt");
    }

    @TestMetadata("subClass.kt")
    public void testSubClass() {
      runTest("compiler/testData/codegen/box/jvmOverloads/subClass.kt");
    }

    @TestMetadata("typeParameters.kt")
    public void testTypeParameters() {
      runTest("compiler/testData/codegen/box/jvmOverloads/typeParameters.kt");
    }

    @TestMetadata("varargs.kt")
    public void testVarargs() {
      runTest("compiler/testData/codegen/box/jvmOverloads/varargs.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/jvmPackageName")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class JvmPackageName extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInJvmPackageName() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/jvmPackageName"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("anonymousObject.kt")
    public void testAnonymousObject() {
      runTest("compiler/testData/codegen/box/jvmPackageName/anonymousObject.kt");
    }

    @TestMetadata("anonymousObjectInInheritedMultifilePart.kt")
    public void testAnonymousObjectInInheritedMultifilePart() {
      runTest("compiler/testData/codegen/box/jvmPackageName/anonymousObjectInInheritedMultifilePart.kt");
    }

    @TestMetadata("anonymousObjectInMultifilePart.kt")
    public void testAnonymousObjectInMultifilePart() {
      runTest("compiler/testData/codegen/box/jvmPackageName/anonymousObjectInMultifilePart.kt");
    }

    @TestMetadata("localClass.kt")
    public void testLocalClass() {
      runTest("compiler/testData/codegen/box/jvmPackageName/localClass.kt");
    }

    @TestMetadata("metadataField.kt")
    public void testMetadataField() {
      runTest("compiler/testData/codegen/box/jvmPackageName/metadataField.kt");
    }

    @TestMetadata("multifileClass.kt")
    public void testMultifileClass() {
      runTest("compiler/testData/codegen/box/jvmPackageName/multifileClass.kt");
    }

    @TestMetadata("rootPackage.kt")
    public void testRootPackage() {
      runTest("compiler/testData/codegen/box/jvmPackageName/rootPackage.kt");
    }

    @TestMetadata("simple.kt")
    public void testSimple() {
      runTest("compiler/testData/codegen/box/jvmPackageName/simple.kt");
    }

    @TestMetadata("withJvmName.kt")
    public void testWithJvmName() {
      runTest("compiler/testData/codegen/box/jvmPackageName/withJvmName.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/jvmStatic")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class JvmStatic extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInJvmStatic() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/jvmStatic"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("annotations.kt")
    public void testAnnotations() {
      runTest("compiler/testData/codegen/box/jvmStatic/annotations.kt");
    }

    @TestMetadata("closure.kt")
    public void testClosure() {
      runTest("compiler/testData/codegen/box/jvmStatic/closure.kt");
    }

    @TestMetadata("companionObject.kt")
    public void testCompanionObject() {
      runTest("compiler/testData/codegen/box/jvmStatic/companionObject.kt");
    }

    @TestMetadata("convention.kt")
    public void testConvention() {
      runTest("compiler/testData/codegen/box/jvmStatic/convention.kt");
    }

    @TestMetadata("default.kt")
    public void testDefault() {
      runTest("compiler/testData/codegen/box/jvmStatic/default.kt");
    }

    @TestMetadata("defaultCrossFile.kt")
    public void testDefaultCrossFile() {
      runTest("compiler/testData/codegen/box/jvmStatic/defaultCrossFile.kt");
    }

    @TestMetadata("enumCompanion.kt")
    public void testEnumCompanion() {
      runTest("compiler/testData/codegen/box/jvmStatic/enumCompanion.kt");
    }

    @TestMetadata("explicitObject.kt")
    public void testExplicitObject() {
      runTest("compiler/testData/codegen/box/jvmStatic/explicitObject.kt");
    }

    @TestMetadata("extensionPropertyGetter.kt")
    public void testExtensionPropertyGetter() {
      runTest("compiler/testData/codegen/box/jvmStatic/extensionPropertyGetter.kt");
    }

    @TestMetadata("funAccess.kt")
    public void testFunAccess() {
      runTest("compiler/testData/codegen/box/jvmStatic/funAccess.kt");
    }

    @TestMetadata("functionReference.kt")
    public void testFunctionReference() {
      runTest("compiler/testData/codegen/box/jvmStatic/functionReference.kt");
    }

    @TestMetadata("importStaticMemberFromObject.kt")
    public void testImportStaticMemberFromObject() {
      runTest("compiler/testData/codegen/box/jvmStatic/importStaticMemberFromObject.kt");
    }

    @TestMetadata("inline.kt")
    public void testInline() {
      runTest("compiler/testData/codegen/box/jvmStatic/inline.kt");
    }

    @TestMetadata("inlinePropertyAccessors.kt")
    public void testInlinePropertyAccessors() {
      runTest("compiler/testData/codegen/box/jvmStatic/inlinePropertyAccessors.kt");
    }

    @TestMetadata("interfaceCompanion.kt")
    public void testInterfaceCompanion() {
      runTest("compiler/testData/codegen/box/jvmStatic/interfaceCompanion.kt");
    }

    @TestMetadata("jvmNameForAccessor.kt")
    public void testJvmNameForAccessor() {
      runTest("compiler/testData/codegen/box/jvmStatic/jvmNameForAccessor.kt");
    }

    @TestMetadata("kt21246.kt")
    public void testKt21246() {
      runTest("compiler/testData/codegen/box/jvmStatic/kt21246.kt");
    }

    @TestMetadata("kt21246a.kt")
    public void testKt21246a() {
      runTest("compiler/testData/codegen/box/jvmStatic/kt21246a.kt");
    }

    @TestMetadata("kt31389.kt")
    public void testKt31389() {
      runTest("compiler/testData/codegen/box/jvmStatic/kt31389.kt");
    }

    @TestMetadata("kt35716.kt")
    public void testKt35716() {
      runTest("compiler/testData/codegen/box/jvmStatic/kt35716.kt");
    }

    @TestMetadata("kt45408.kt")
    public void testKt45408() {
      runTest("compiler/testData/codegen/box/jvmStatic/kt45408.kt");
    }

    @TestMetadata("kt46568.kt")
    public void testKt46568() {
      runTest("compiler/testData/codegen/box/jvmStatic/kt46568.kt");
    }

    @TestMetadata("kt9897_static.kt")
    public void testKt9897_static() {
      runTest("compiler/testData/codegen/box/jvmStatic/kt9897_static.kt");
    }

    @TestMetadata("object.kt")
    public void testObject() {
      runTest("compiler/testData/codegen/box/jvmStatic/object.kt");
    }

    @TestMetadata("postfixInc.kt")
    public void testPostfixInc() {
      runTest("compiler/testData/codegen/box/jvmStatic/postfixInc.kt");
    }

    @TestMetadata("prefixInc.kt")
    public void testPrefixInc() {
      runTest("compiler/testData/codegen/box/jvmStatic/prefixInc.kt");
    }

    @TestMetadata("privateMethod.kt")
    public void testPrivateMethod() {
      runTest("compiler/testData/codegen/box/jvmStatic/privateMethod.kt");
    }

    @TestMetadata("privateSetter.kt")
    public void testPrivateSetter() {
      runTest("compiler/testData/codegen/box/jvmStatic/privateSetter.kt");
    }

    @TestMetadata("propertyAccess.kt")
    public void testPropertyAccess() {
      runTest("compiler/testData/codegen/box/jvmStatic/propertyAccess.kt");
    }

    @TestMetadata("propertyAccessorsCompanion.kt")
    public void testPropertyAccessorsCompanion() {
      runTest("compiler/testData/codegen/box/jvmStatic/propertyAccessorsCompanion.kt");
    }

    @TestMetadata("propertyAccessorsObject.kt")
    public void testPropertyAccessorsObject() {
      runTest("compiler/testData/codegen/box/jvmStatic/propertyAccessorsObject.kt");
    }

    @TestMetadata("propertyAsDefault.kt")
    public void testPropertyAsDefault() {
      runTest("compiler/testData/codegen/box/jvmStatic/propertyAsDefault.kt");
    }

    @TestMetadata("propertyGetterDelegatesToAnother.kt")
    public void testPropertyGetterDelegatesToAnother() {
      runTest("compiler/testData/codegen/box/jvmStatic/propertyGetterDelegatesToAnother.kt");
    }

    @TestMetadata("propertyReference.kt")
    public void testPropertyReference() {
      runTest("compiler/testData/codegen/box/jvmStatic/propertyReference.kt");
    }

    @TestMetadata("simple.kt")
    public void testSimple() {
      runTest("compiler/testData/codegen/box/jvmStatic/simple.kt");
    }

    @TestMetadata("syntheticAccessor.kt")
    public void testSyntheticAccessor() {
      runTest("compiler/testData/codegen/box/jvmStatic/syntheticAccessor.kt");
    }

    @TestMetadata("compiler/testData/codegen/box/jvmStatic/protectedInSuperClass")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ProtectedInSuperClass extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInProtectedInSuperClass() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/jvmStatic/protectedInSuperClass"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("defaultArguments.kt")
      public void testDefaultArguments() {
        runTest("compiler/testData/codegen/box/jvmStatic/protectedInSuperClass/defaultArguments.kt");
      }

      @TestMetadata("simpleFunction.kt")
      public void testSimpleFunction() {
        runTest("compiler/testData/codegen/box/jvmStatic/protectedInSuperClass/simpleFunction.kt");
      }

      @TestMetadata("simpleProperty.kt")
      public void testSimpleProperty() {
        runTest("compiler/testData/codegen/box/jvmStatic/protectedInSuperClass/simpleProperty.kt");
      }
    }
  }

  @TestMetadata("compiler/testData/codegen/box/kclass")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Kclass extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInKclass() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/kclass"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("kClassEnumArgument.kt")
    public void testKClassEnumArgument() {
      runTest("compiler/testData/codegen/box/kclass/kClassEnumArgument.kt");
    }

    @TestMetadata("kclass1.kt")
    public void testKclass1() {
      runTest("compiler/testData/codegen/box/kclass/kclass1.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/klib")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Klib extends AbstractLightAnalysisModeTest {
    @TestMetadata("kt33411.kt")
    public void ignoreKt33411() {
      runTest("compiler/testData/codegen/box/klib/kt33411.kt");
    }

    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInKlib() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/klib"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }
  }

  @TestMetadata("compiler/testData/codegen/box/ktype")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Ktype extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInKtype() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ktype"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("ktype1_basics1.kt")
    public void testKtype1_basics1() {
      runTest("compiler/testData/codegen/box/ktype/ktype1_basics1.kt");
    }

    @TestMetadata("ktype1_inner.kt")
    public void testKtype1_inner() {
      runTest("compiler/testData/codegen/box/ktype/ktype1_inner.kt");
    }

    @TestMetadata("nonReified_class.kt")
    public void testNonReified_class() {
      runTest("compiler/testData/codegen/box/ktype/nonReified_class.kt");
    }

    @TestMetadata("nonReified_equality.kt")
    public void testNonReified_equality() {
      runTest("compiler/testData/codegen/box/ktype/nonReified_equality.kt");
    }

    @TestMetadata("nonReified_fun.kt")
    public void testNonReified_fun() {
      runTest("compiler/testData/codegen/box/ktype/nonReified_fun.kt");
    }

    @TestMetadata("nonReified_recursionInReified.kt")
    public void testNonReified_recursionInReified() {
      runTest("compiler/testData/codegen/box/ktype/nonReified_recursionInReified.kt");
    }

    @TestMetadata("nonReified_reifiedUpperBound.kt")
    public void testNonReified_reifiedUpperBound() {
      runTest("compiler/testData/codegen/box/ktype/nonReified_reifiedUpperBound.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/labels")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Labels extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInLabels() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/labels"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("controlLabelClashesWithFuncitonName.kt")
    public void testControlLabelClashesWithFuncitonName() {
      runTest("compiler/testData/codegen/box/labels/controlLabelClashesWithFuncitonName.kt");
    }

    @TestMetadata("infixCallLabelling.kt")
    public void testInfixCallLabelling() {
      runTest("compiler/testData/codegen/box/labels/infixCallLabelling.kt");
    }

    @TestMetadata("labeledDeclarations.kt")
    public void testLabeledDeclarations() {
      runTest("compiler/testData/codegen/box/labels/labeledDeclarations.kt");
    }

    @TestMetadata("propertyAccessor.kt")
    public void testPropertyAccessor() {
      runTest("compiler/testData/codegen/box/labels/propertyAccessor.kt");
    }

    @TestMetadata("propertyAccessorFunctionLiteral.kt")
    public void testPropertyAccessorFunctionLiteral() {
      runTest("compiler/testData/codegen/box/labels/propertyAccessorFunctionLiteral.kt");
    }

    @TestMetadata("propertyAccessorInnerExtensionFun.kt")
    public void testPropertyAccessorInnerExtensionFun() {
      runTest("compiler/testData/codegen/box/labels/propertyAccessorInnerExtensionFun.kt");
    }

    @TestMetadata("propertyAccessorObject.kt")
    public void testPropertyAccessorObject() {
      runTest("compiler/testData/codegen/box/labels/propertyAccessorObject.kt");
    }

    @TestMetadata("propertyInClassAccessor.kt")
    public void testPropertyInClassAccessor() {
      runTest("compiler/testData/codegen/box/labels/propertyInClassAccessor.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/lambda")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Lambda extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInLambda() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/lambda"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("ifWithReferenceAndLambda.kt")
    public void testIfWithReferenceAndLambda() {
      runTest("compiler/testData/codegen/box/lambda/ifWithReferenceAndLambda.kt");
    }

    @TestMetadata("lambda1.kt")
    public void testLambda1() {
      runTest("compiler/testData/codegen/box/lambda/lambda1.kt");
    }

    @TestMetadata("lambda10.kt")
    public void testLambda10() {
      runTest("compiler/testData/codegen/box/lambda/lambda10.kt");
    }

    @TestMetadata("lambda11.kt")
    public void testLambda11() {
      runTest("compiler/testData/codegen/box/lambda/lambda11.kt");
    }

    @TestMetadata("lambda12.kt")
    public void testLambda12() {
      runTest("compiler/testData/codegen/box/lambda/lambda12.kt");
    }

    @TestMetadata("lambda13.kt")
    public void testLambda13() {
      runTest("compiler/testData/codegen/box/lambda/lambda13.kt");
    }

    @TestMetadata("lambda14.kt")
    public void testLambda14() {
      runTest("compiler/testData/codegen/box/lambda/lambda14.kt");
    }

    @TestMetadata("lambda2.kt")
    public void testLambda2() {
      runTest("compiler/testData/codegen/box/lambda/lambda2.kt");
    }

    @TestMetadata("lambda3.kt")
    public void testLambda3() {
      runTest("compiler/testData/codegen/box/lambda/lambda3.kt");
    }

    @TestMetadata("lambda4.kt")
    public void testLambda4() {
      runTest("compiler/testData/codegen/box/lambda/lambda4.kt");
    }

    @TestMetadata("lambda5.kt")
    public void testLambda5() {
      runTest("compiler/testData/codegen/box/lambda/lambda5.kt");
    }

    @TestMetadata("lambda6.kt")
    public void testLambda6() {
      runTest("compiler/testData/codegen/box/lambda/lambda6.kt");
    }

    @TestMetadata("lambda7.kt")
    public void testLambda7() {
      runTest("compiler/testData/codegen/box/lambda/lambda7.kt");
    }

    @TestMetadata("lambda8.kt")
    public void testLambda8() {
      runTest("compiler/testData/codegen/box/lambda/lambda8.kt");
    }

    @TestMetadata("lambda9.kt")
    public void testLambda9() {
      runTest("compiler/testData/codegen/box/lambda/lambda9.kt");
    }

    @TestMetadata("lambda_kt49360_trivial.kt")
    public void testLambda_kt49360_trivial() {
      runTest("compiler/testData/codegen/box/lambda/lambda_kt49360_trivial.kt");
    }

    @TestMetadata("lambda_kt49360_withFlow.kt")
    public void testLambda_kt49360_withFlow() {
      runTest("compiler/testData/codegen/box/lambda/lambda_kt49360_withFlow.kt");
    }

    @TestMetadata("lambda_kt49360_wrapBlock.kt")
    public void testLambda_kt49360_wrapBlock() {
      runTest("compiler/testData/codegen/box/lambda/lambda_kt49360_wrapBlock.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/lateinit")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Lateinit extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInLateinit() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/lateinit"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("globalIsInitialized.kt")
    public void testGlobalIsInitialized() {
      runTest("compiler/testData/codegen/box/lateinit/globalIsInitialized.kt");
    }

    @TestMetadata("inBaseClass.kt")
    public void testInBaseClass() {
      runTest("compiler/testData/codegen/box/lateinit/inBaseClass.kt");
    }

    @TestMetadata("initialized.kt")
    public void testInitialized() {
      runTest("compiler/testData/codegen/box/lateinit/initialized.kt");
    }

    @TestMetadata("innerIsInitialized.kt")
    public void testInnerIsInitialized() {
      runTest("compiler/testData/codegen/box/lateinit/innerIsInitialized.kt");
    }

    @TestMetadata("isInitialized.kt")
    public void testIsInitialized() {
      runTest("compiler/testData/codegen/box/lateinit/isInitialized.kt");
    }

    @TestMetadata("localCapturedInitialized.kt")
    public void testLocalCapturedInitialized() {
      runTest("compiler/testData/codegen/box/lateinit/localCapturedInitialized.kt");
    }

    @TestMetadata("localCapturedNotInitialized.kt")
    public void testLocalCapturedNotInitialized() {
      runTest("compiler/testData/codegen/box/lateinit/localCapturedNotInitialized.kt");
    }

    @TestMetadata("localInitialized.kt")
    public void testLocalInitialized() {
      runTest("compiler/testData/codegen/box/lateinit/localInitialized.kt");
    }

    @TestMetadata("localNotInitialized.kt")
    public void testLocalNotInitialized() {
      runTest("compiler/testData/codegen/box/lateinit/localNotInitialized.kt");
    }

    @TestMetadata("notInitialized.kt")
    public void testNotInitialized() {
      runTest("compiler/testData/codegen/box/lateinit/notInitialized.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/lazyCodegen")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class LazyCodegen extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInLazyCodegen() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/lazyCodegen"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("exceptionInFieldInitializer.kt")
    public void testExceptionInFieldInitializer() {
      runTest("compiler/testData/codegen/box/lazyCodegen/exceptionInFieldInitializer.kt");
    }

    @TestMetadata("ifElse.kt")
    public void testIfElse() {
      runTest("compiler/testData/codegen/box/lazyCodegen/ifElse.kt");
    }

    @TestMetadata("increment.kt")
    public void testIncrement() {
      runTest("compiler/testData/codegen/box/lazyCodegen/increment.kt");
    }

    @TestMetadata("safeAssign.kt")
    public void testSafeAssign() {
      runTest("compiler/testData/codegen/box/lazyCodegen/safeAssign.kt");
    }

    @TestMetadata("safeAssignComplex.kt")
    public void testSafeAssignComplex() {
      runTest("compiler/testData/codegen/box/lazyCodegen/safeAssignComplex.kt");
    }

    @TestMetadata("safeCallAndArray.kt")
    public void testSafeCallAndArray() {
      runTest("compiler/testData/codegen/box/lazyCodegen/safeCallAndArray.kt");
    }

    @TestMetadata("toString.kt")
    public void testToString() {
      runTest("compiler/testData/codegen/box/lazyCodegen/toString.kt");
    }

    @TestMetadata("tryCatchExpression.kt")
    public void testTryCatchExpression() {
      runTest("compiler/testData/codegen/box/lazyCodegen/tryCatchExpression.kt");
    }

    @TestMetadata("when.kt")
    public void testWhen() {
      runTest("compiler/testData/codegen/box/lazyCodegen/when.kt");
    }

    @TestMetadata("compiler/testData/codegen/box/lazyCodegen/optimizations")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Optimizations extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInOptimizations() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/lazyCodegen/optimizations"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("negateConstantCompare.kt")
      public void testNegateConstantCompare() {
        runTest("compiler/testData/codegen/box/lazyCodegen/optimizations/negateConstantCompare.kt");
      }

      @TestMetadata("negateFalse.kt")
      public void testNegateFalse() {
        runTest("compiler/testData/codegen/box/lazyCodegen/optimizations/negateFalse.kt");
      }

      @TestMetadata("negateFalseVar.kt")
      public void testNegateFalseVar() {
        runTest("compiler/testData/codegen/box/lazyCodegen/optimizations/negateFalseVar.kt");
      }

      @TestMetadata("negateFalseVarChain.kt")
      public void testNegateFalseVarChain() {
        runTest("compiler/testData/codegen/box/lazyCodegen/optimizations/negateFalseVarChain.kt");
      }

      @TestMetadata("negateObjectComp.kt")
      public void testNegateObjectComp() {
        runTest("compiler/testData/codegen/box/lazyCodegen/optimizations/negateObjectComp.kt");
      }

      @TestMetadata("negateObjectComp2.kt")
      public void testNegateObjectComp2() {
        runTest("compiler/testData/codegen/box/lazyCodegen/optimizations/negateObjectComp2.kt");
      }

      @TestMetadata("negateTrue.kt")
      public void testNegateTrue() {
        runTest("compiler/testData/codegen/box/lazyCodegen/optimizations/negateTrue.kt");
      }

      @TestMetadata("negateTrueVar.kt")
      public void testNegateTrueVar() {
        runTest("compiler/testData/codegen/box/lazyCodegen/optimizations/negateTrueVar.kt");
      }

      @TestMetadata("noOptimization.kt")
      public void testNoOptimization() {
        runTest("compiler/testData/codegen/box/lazyCodegen/optimizations/noOptimization.kt");
      }
    }
  }

  @TestMetadata("compiler/testData/codegen/box/literals")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Literals extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInLiterals() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/literals"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("listof1.kt")
    public void testListof1() {
      runTest("compiler/testData/codegen/box/literals/listof1.kt");
    }

    @TestMetadata("strdedup1.kt")
    public void testStrdedup1() {
      runTest("compiler/testData/codegen/box/literals/strdedup1.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/localClass")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class LocalClass extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInLocalClass() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/localClass"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("innerTakesCapturedFromOuter.kt")
    public void testInnerTakesCapturedFromOuter() {
      runTest("compiler/testData/codegen/box/localClass/innerTakesCapturedFromOuter.kt");
    }

    @TestMetadata("innerWithCapture.kt")
    public void testInnerWithCapture() {
      runTest("compiler/testData/codegen/box/localClass/innerWithCapture.kt");
    }

    @TestMetadata("localFunctionCallFromLocalClass.kt")
    public void testLocalFunctionCallFromLocalClass() {
      runTest("compiler/testData/codegen/box/localClass/localFunctionCallFromLocalClass.kt");
    }

    @TestMetadata("localFunctionInLocalClass.kt")
    public void testLocalFunctionInLocalClass() {
      runTest("compiler/testData/codegen/box/localClass/localFunctionInLocalClass.kt");
    }

    @TestMetadata("localHierarchy.kt")
    public void testLocalHierarchy() {
      runTest("compiler/testData/codegen/box/localClass/localHierarchy.kt");
    }

    @TestMetadata("noPrimaryConstructor.kt")
    public void testNoPrimaryConstructor() {
      runTest("compiler/testData/codegen/box/localClass/noPrimaryConstructor.kt");
    }

    @TestMetadata("objectExpressionInInitializer.kt")
    public void testObjectExpressionInInitializer() {
      runTest("compiler/testData/codegen/box/localClass/objectExpressionInInitializer.kt");
    }

    @TestMetadata("objectExpressionInProperty.kt")
    public void testObjectExpressionInProperty() {
      runTest("compiler/testData/codegen/box/localClass/objectExpressionInProperty.kt");
    }

    @TestMetadata("signatureConflictHiddenByTypeParameter.kt")
    public void testSignatureConflictHiddenByTypeParameter() {
      runTest("compiler/testData/codegen/box/localClass/signatureConflictHiddenByTypeParameter.kt");
    }

    @TestMetadata("tryCatch.kt")
    public void testTryCatch() {
      runTest("compiler/testData/codegen/box/localClass/tryCatch.kt");
    }

    @TestMetadata("virtualCallFromConstructor.kt")
    public void testVirtualCallFromConstructor() {
      runTest("compiler/testData/codegen/box/localClass/virtualCallFromConstructor.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/localClasses")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class LocalClasses extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInLocalClasses() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/localClasses"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("anonymousObjectInExtension.kt")
    public void testAnonymousObjectInExtension() {
      runTest("compiler/testData/codegen/box/localClasses/anonymousObjectInExtension.kt");
    }

    @TestMetadata("anonymousObjectInInitializer.kt")
    public void testAnonymousObjectInInitializer() {
      runTest("compiler/testData/codegen/box/localClasses/anonymousObjectInInitializer.kt");
    }

    @TestMetadata("anonymousObjectInParameterInitializer.kt")
    public void testAnonymousObjectInParameterInitializer() {
      runTest("compiler/testData/codegen/box/localClasses/anonymousObjectInParameterInitializer.kt");
    }

    @TestMetadata("capturingInDefaultConstructorParameter.kt")
    public void testCapturingInDefaultConstructorParameter() {
      runTest("compiler/testData/codegen/box/localClasses/capturingInDefaultConstructorParameter.kt");
    }

    @TestMetadata("closureOfInnerLocalClass.kt")
    public void testClosureOfInnerLocalClass() {
      runTest("compiler/testData/codegen/box/localClasses/closureOfInnerLocalClass.kt");
    }

    @TestMetadata("closureOfLambdaInLocalClass.kt")
    public void testClosureOfLambdaInLocalClass() {
      runTest("compiler/testData/codegen/box/localClasses/closureOfLambdaInLocalClass.kt");
    }

    @TestMetadata("closureWithSelfInstantiation.kt")
    public void testClosureWithSelfInstantiation() {
      runTest("compiler/testData/codegen/box/localClasses/closureWithSelfInstantiation.kt");
    }

    @TestMetadata("defaultParameterInConstructor.kt")
    public void testDefaultParameterInConstructor() {
      runTest("compiler/testData/codegen/box/localClasses/defaultParameterInConstructor.kt");
    }

    @TestMetadata("inExtensionFunction.kt")
    public void testInExtensionFunction() {
      runTest("compiler/testData/codegen/box/localClasses/inExtensionFunction.kt");
    }

    @TestMetadata("inExtensionProperty.kt")
    public void testInExtensionProperty() {
      runTest("compiler/testData/codegen/box/localClasses/inExtensionProperty.kt");
    }

    @TestMetadata("inLocalExtensionFunction.kt")
    public void testInLocalExtensionFunction() {
      runTest("compiler/testData/codegen/box/localClasses/inLocalExtensionFunction.kt");
    }

    @TestMetadata("inLocalExtensionProperty.kt")
    public void testInLocalExtensionProperty() {
      runTest("compiler/testData/codegen/box/localClasses/inLocalExtensionProperty.kt");
    }

    @TestMetadata("innerClassInLocalClass.kt")
    public void testInnerClassInLocalClass() {
      runTest("compiler/testData/codegen/box/localClasses/innerClassInLocalClass.kt");
    }

    @TestMetadata("innerOfLocalCaptureExtensionReceiver.kt")
    public void testInnerOfLocalCaptureExtensionReceiver() {
      runTest("compiler/testData/codegen/box/localClasses/innerOfLocalCaptureExtensionReceiver.kt");
    }

    @TestMetadata("kt10835.kt")
    public void testKt10835() {
      runTest("compiler/testData/codegen/box/localClasses/kt10835.kt");
    }

    @TestMetadata("kt10835a.kt")
    public void testKt10835a() {
      runTest("compiler/testData/codegen/box/localClasses/kt10835a.kt");
    }

    @TestMetadata("kt2700.kt")
    public void testKt2700() {
      runTest("compiler/testData/codegen/box/localClasses/kt2700.kt");
    }

    @TestMetadata("kt2873.kt")
    public void testKt2873() {
      runTest("compiler/testData/codegen/box/localClasses/kt2873.kt");
    }

    @TestMetadata("kt3210.kt")
    public void testKt3210() {
      runTest("compiler/testData/codegen/box/localClasses/kt3210.kt");
    }

    @TestMetadata("kt3389.kt")
    public void testKt3389() {
      runTest("compiler/testData/codegen/box/localClasses/kt3389.kt");
    }

    @TestMetadata("kt3584.kt")
    public void testKt3584() {
      runTest("compiler/testData/codegen/box/localClasses/kt3584.kt");
    }

    @TestMetadata("kt4174.kt")
    public void testKt4174() {
      runTest("compiler/testData/codegen/box/localClasses/kt4174.kt");
    }

    @TestMetadata("kt45383.kt")
    public void testKt45383() {
      runTest("compiler/testData/codegen/box/localClasses/kt45383.kt");
    }

    @TestMetadata("localClass.kt")
    public void testLocalClass() {
      runTest("compiler/testData/codegen/box/localClasses/localClass.kt");
    }

    @TestMetadata("localClassCaptureExtensionReceiver.kt")
    public void testLocalClassCaptureExtensionReceiver() {
      runTest("compiler/testData/codegen/box/localClasses/localClassCaptureExtensionReceiver.kt");
    }

    @TestMetadata("localClassInInitializer.kt")
    public void testLocalClassInInitializer() {
      runTest("compiler/testData/codegen/box/localClasses/localClassInInitializer.kt");
    }

    @TestMetadata("localClassInParameterInitializer.kt")
    public void testLocalClassInParameterInitializer() {
      runTest("compiler/testData/codegen/box/localClasses/localClassInParameterInitializer.kt");
    }

    @TestMetadata("localClassUsedBeforeDeclaration.kt")
    public void testLocalClassUsedBeforeDeclaration() {
      runTest("compiler/testData/codegen/box/localClasses/localClassUsedBeforeDeclaration.kt");
    }

    @TestMetadata("localDataClass.kt")
    public void testLocalDataClass() {
      runTest("compiler/testData/codegen/box/localClasses/localDataClass.kt");
    }

    @TestMetadata("localExtendsInnerAndReferencesOuterMember.kt")
    public void testLocalExtendsInnerAndReferencesOuterMember() {
      runTest("compiler/testData/codegen/box/localClasses/localExtendsInnerAndReferencesOuterMember.kt");
    }

    @TestMetadata("localGenericWithTypeParameters.kt")
    public void testLocalGenericWithTypeParameters() {
      runTest("compiler/testData/codegen/box/localClasses/localGenericWithTypeParameters.kt");
    }

    @TestMetadata("nameWithWhitespace.kt")
    public void testNameWithWhitespace() {
      runTest("compiler/testData/codegen/box/localClasses/nameWithWhitespace.kt");
    }

    @TestMetadata("noclosure.kt")
    public void testNoclosure() {
      runTest("compiler/testData/codegen/box/localClasses/noclosure.kt");
    }

    @TestMetadata("object.kt")
    public void testObject() {
      runTest("compiler/testData/codegen/box/localClasses/object.kt");
    }

    @TestMetadata("ownClosureOfInnerLocalClass.kt")
    public void testOwnClosureOfInnerLocalClass() {
      runTest("compiler/testData/codegen/box/localClasses/ownClosureOfInnerLocalClass.kt");
    }

    @TestMetadata("recaptureVarCapturedInLocalClass1.kt")
    public void testRecaptureVarCapturedInLocalClass1() {
      runTest("compiler/testData/codegen/box/localClasses/recaptureVarCapturedInLocalClass1.kt");
    }

    @TestMetadata("recaptureVarCapturedInLocalClass2.kt")
    public void testRecaptureVarCapturedInLocalClass2() {
      runTest("compiler/testData/codegen/box/localClasses/recaptureVarCapturedInLocalClass2.kt");
    }

    @TestMetadata("recaptureVarCapturedInLocalClass3.kt")
    public void testRecaptureVarCapturedInLocalClass3() {
      runTest("compiler/testData/codegen/box/localClasses/recaptureVarCapturedInLocalClass3.kt");
    }

    @TestMetadata("subclassingExtensionReceiverClass.kt")
    public void testSubclassingExtensionReceiverClass() {
      runTest("compiler/testData/codegen/box/localClasses/subclassingExtensionReceiverClass.kt");
    }

    @TestMetadata("withclosure.kt")
    public void testWithclosure() {
      runTest("compiler/testData/codegen/box/localClasses/withclosure.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/localEscapeAnalysis")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class LocalEscapeAnalysis extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInLocalEscapeAnalysis() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/localEscapeAnalysis"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("arraysFieldWrite.kt")
    public void testArraysFieldWrite() {
      runTest("compiler/testData/codegen/box/localEscapeAnalysis/arraysFieldWrite.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/lower")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Lower extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInLower() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/lower"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("localDelegatedProperty.kt")
    public void testLocalDelegatedProperty() {
      runTest("compiler/testData/codegen/box/lower/localDelegatedProperty.kt");
    }

    @TestMetadata("compiler/testData/codegen/box/lower/forLoopsLowering")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ForLoopsLowering extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInForLoopsLowering() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/lower/forLoopsLowering"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("arrays.kt")
      public void testArrays() {
        runTest("compiler/testData/codegen/box/lower/forLoopsLowering/arrays.kt");
      }

      @TestMetadata("lists.kt")
      public void testLists() {
        runTest("compiler/testData/codegen/box/lower/forLoopsLowering/lists.kt");
      }

      @TestMetadata("listsCME.kt")
      public void testListsCME() {
        runTest("compiler/testData/codegen/box/lower/forLoopsLowering/listsCME.kt");
      }

      @TestMetadata("nested.kt")
      public void testNested() {
        runTest("compiler/testData/codegen/box/lower/forLoopsLowering/nested.kt");
      }

      @TestMetadata("progressions.kt")
      public void testProgressions() {
        runTest("compiler/testData/codegen/box/lower/forLoopsLowering/progressions.kt");
      }

      @TestMetadata("reversed.kt")
      public void testReversed() {
        runTest("compiler/testData/codegen/box/lower/forLoopsLowering/reversed.kt");
      }

      @TestMetadata("reversedCharProgression.kt")
      public void testReversedCharProgression() {
        runTest("compiler/testData/codegen/box/lower/forLoopsLowering/reversedCharProgression.kt");
      }

      @TestMetadata("sequences.kt")
      public void testSequences() {
        runTest("compiler/testData/codegen/box/lower/forLoopsLowering/sequences.kt");
      }

      @TestMetadata("vars.kt")
      public void testVars() {
        runTest("compiler/testData/codegen/box/lower/forLoopsLowering/vars.kt");
      }

      @TestMetadata("withIndex.kt")
      public void testWithIndex() {
        runTest("compiler/testData/codegen/box/lower/forLoopsLowering/withIndex.kt");
      }

      @TestMetadata("withIndexUInt.kt")
      public void testWithIndexUInt() {
        runTest("compiler/testData/codegen/box/lower/forLoopsLowering/withIndexUInt.kt");
      }
    }
  }

  @TestMetadata("compiler/testData/codegen/box/mangling")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Mangling extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInMangling() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/mangling"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("field.kt")
    public void testField() {
      runTest("compiler/testData/codegen/box/mangling/field.kt");
    }

    @TestMetadata("fun.kt")
    public void testFun() {
      runTest("compiler/testData/codegen/box/mangling/fun.kt");
    }

    @TestMetadata("internal.kt")
    public void testInternal() {
      runTest("compiler/testData/codegen/box/mangling/internal.kt");
    }

    @TestMetadata("internalOverride.kt")
    public void testInternalOverride() {
      runTest("compiler/testData/codegen/box/mangling/internalOverride.kt");
    }

    @TestMetadata("internalOverrideSuperCall.kt")
    public void testInternalOverrideSuperCall() {
      runTest("compiler/testData/codegen/box/mangling/internalOverrideSuperCall.kt");
    }

    @TestMetadata("multipleConstructors.kt")
    public void testMultipleConstructors() {
      runTest("compiler/testData/codegen/box/mangling/multipleConstructors.kt");
    }

    @TestMetadata("noOverrideWithJava.kt")
    public void testNoOverrideWithJava() {
      runTest("compiler/testData/codegen/box/mangling/noOverrideWithJava.kt");
    }

    @TestMetadata("parentheses.kt")
    public void testParentheses() {
      runTest("compiler/testData/codegen/box/mangling/parentheses.kt");
    }

    @TestMetadata("publicOverride.kt")
    public void testPublicOverride() {
      runTest("compiler/testData/codegen/box/mangling/publicOverride.kt");
    }

    @TestMetadata("publicOverrideSuperCall.kt")
    public void testPublicOverrideSuperCall() {
      runTest("compiler/testData/codegen/box/mangling/publicOverrideSuperCall.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/mixedNamedPosition")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class MixedNamedPosition extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInMixedNamedPosition() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/mixedNamedPosition"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("defaults.kt")
    public void testDefaults() {
      runTest("compiler/testData/codegen/box/mixedNamedPosition/defaults.kt");
    }

    @TestMetadata("simple.kt")
    public void testSimple() {
      runTest("compiler/testData/codegen/box/mixedNamedPosition/simple.kt");
    }

    @TestMetadata("varargs.kt")
    public void testVarargs() {
      runTest("compiler/testData/codegen/box/mixedNamedPosition/varargs.kt");
    }

    @TestMetadata("varargsEvaluationOrder.kt")
    public void testVarargsEvaluationOrder() {
      runTest("compiler/testData/codegen/box/mixedNamedPosition/varargsEvaluationOrder.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/multiDecl")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class MultiDecl extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInMultiDecl() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/multiDecl"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("ComplexInitializer.kt")
    public void testComplexInitializer() {
      runTest("compiler/testData/codegen/box/multiDecl/ComplexInitializer.kt");
    }

    @TestMetadata("component.kt")
    public void testComponent() {
      runTest("compiler/testData/codegen/box/multiDecl/component.kt");
    }

    @TestMetadata("kt9828_hashMap.kt")
    public void testKt9828_hashMap() {
      runTest("compiler/testData/codegen/box/multiDecl/kt9828_hashMap.kt");
    }

    @TestMetadata("returnInElvis.kt")
    public void testReturnInElvis() {
      runTest("compiler/testData/codegen/box/multiDecl/returnInElvis.kt");
    }

    @TestMetadata("SimpleVals.kt")
    public void testSimpleVals() {
      runTest("compiler/testData/codegen/box/multiDecl/SimpleVals.kt");
    }

    @TestMetadata("SimpleValsExtensions.kt")
    public void testSimpleValsExtensions() {
      runTest("compiler/testData/codegen/box/multiDecl/SimpleValsExtensions.kt");
    }

    @TestMetadata("SimpleVarsExtensions.kt")
    public void testSimpleVarsExtensions() {
      runTest("compiler/testData/codegen/box/multiDecl/SimpleVarsExtensions.kt");
    }

    @TestMetadata("UnderscoreNames.kt")
    public void testUnderscoreNames() {
      runTest("compiler/testData/codegen/box/multiDecl/UnderscoreNames.kt");
    }

    @TestMetadata("ValCapturedInFunctionLiteral.kt")
    public void testValCapturedInFunctionLiteral() {
      runTest("compiler/testData/codegen/box/multiDecl/ValCapturedInFunctionLiteral.kt");
    }

    @TestMetadata("ValCapturedInLocalFunction.kt")
    public void testValCapturedInLocalFunction() {
      runTest("compiler/testData/codegen/box/multiDecl/ValCapturedInLocalFunction.kt");
    }

    @TestMetadata("ValCapturedInObjectLiteral.kt")
    public void testValCapturedInObjectLiteral() {
      runTest("compiler/testData/codegen/box/multiDecl/ValCapturedInObjectLiteral.kt");
    }

    @TestMetadata("VarCapturedInFunctionLiteral.kt")
    public void testVarCapturedInFunctionLiteral() {
      runTest("compiler/testData/codegen/box/multiDecl/VarCapturedInFunctionLiteral.kt");
    }

    @TestMetadata("VarCapturedInLocalFunction.kt")
    public void testVarCapturedInLocalFunction() {
      runTest("compiler/testData/codegen/box/multiDecl/VarCapturedInLocalFunction.kt");
    }

    @TestMetadata("VarCapturedInObjectLiteral.kt")
    public void testVarCapturedInObjectLiteral() {
      runTest("compiler/testData/codegen/box/multiDecl/VarCapturedInObjectLiteral.kt");
    }

    @TestMetadata("compiler/testData/codegen/box/multiDecl/forIterator")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ForIterator extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInForIterator() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/multiDecl/forIterator"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("MultiDeclFor.kt")
      public void testMultiDeclFor() {
        runTest("compiler/testData/codegen/box/multiDecl/forIterator/MultiDeclFor.kt");
      }

      @TestMetadata("MultiDeclForComponentExtensions.kt")
      public void testMultiDeclForComponentExtensions() {
        runTest("compiler/testData/codegen/box/multiDecl/forIterator/MultiDeclForComponentExtensions.kt");
      }

      @TestMetadata("MultiDeclForComponentMemberExtensions.kt")
      public void testMultiDeclForComponentMemberExtensions() {
        runTest("compiler/testData/codegen/box/multiDecl/forIterator/MultiDeclForComponentMemberExtensions.kt");
      }

      @TestMetadata("MultiDeclForComponentMemberExtensionsInExtensionFunction.kt")
      public void testMultiDeclForComponentMemberExtensionsInExtensionFunction() {
        runTest("compiler/testData/codegen/box/multiDecl/forIterator/MultiDeclForComponentMemberExtensionsInExtensionFunction.kt");
      }

      @TestMetadata("MultiDeclForValCaptured.kt")
      public void testMultiDeclForValCaptured() {
        runTest("compiler/testData/codegen/box/multiDecl/forIterator/MultiDeclForValCaptured.kt");
      }

      @TestMetadata("compiler/testData/codegen/box/multiDecl/forIterator/longIterator")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class LongIterator extends AbstractLightAnalysisModeTest {
        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        public void testAllFilesPresentInLongIterator() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/multiDecl/forIterator/longIterator"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("MultiDeclForComponentExtensions.kt")
        public void testMultiDeclForComponentExtensions() {
          runTest("compiler/testData/codegen/box/multiDecl/forIterator/longIterator/MultiDeclForComponentExtensions.kt");
        }

        @TestMetadata("MultiDeclForComponentExtensionsValCaptured.kt")
        public void testMultiDeclForComponentExtensionsValCaptured() {
          runTest("compiler/testData/codegen/box/multiDecl/forIterator/longIterator/MultiDeclForComponentExtensionsValCaptured.kt");
        }

        @TestMetadata("MultiDeclForComponentMemberExtensions.kt")
        public void testMultiDeclForComponentMemberExtensions() {
          runTest("compiler/testData/codegen/box/multiDecl/forIterator/longIterator/MultiDeclForComponentMemberExtensions.kt");
        }

        @TestMetadata("MultiDeclForComponentMemberExtensionsInExtensionFunction.kt")
        public void testMultiDeclForComponentMemberExtensionsInExtensionFunction() {
          runTest("compiler/testData/codegen/box/multiDecl/forIterator/longIterator/MultiDeclForComponentMemberExtensionsInExtensionFunction.kt");
        }
      }
    }

    @TestMetadata("compiler/testData/codegen/box/multiDecl/forRange")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ForRange extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInForRange() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/multiDecl/forRange"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("MultiDeclFor.kt")
      public void testMultiDeclFor() {
        runTest("compiler/testData/codegen/box/multiDecl/forRange/MultiDeclFor.kt");
      }

      @TestMetadata("MultiDeclForComponentExtensions.kt")
      public void testMultiDeclForComponentExtensions() {
        runTest("compiler/testData/codegen/box/multiDecl/forRange/MultiDeclForComponentExtensions.kt");
      }

      @TestMetadata("MultiDeclForComponentMemberExtensions.kt")
      public void testMultiDeclForComponentMemberExtensions() {
        runTest("compiler/testData/codegen/box/multiDecl/forRange/MultiDeclForComponentMemberExtensions.kt");
      }

      @TestMetadata("MultiDeclForComponentMemberExtensionsInExtensionFunction.kt")
      public void testMultiDeclForComponentMemberExtensionsInExtensionFunction() {
        runTest("compiler/testData/codegen/box/multiDecl/forRange/MultiDeclForComponentMemberExtensionsInExtensionFunction.kt");
      }

      @TestMetadata("MultiDeclForValCaptured.kt")
      public void testMultiDeclForValCaptured() {
        runTest("compiler/testData/codegen/box/multiDecl/forRange/MultiDeclForValCaptured.kt");
      }

      @TestMetadata("UnderscoreNames.kt")
      public void testUnderscoreNames() {
        runTest("compiler/testData/codegen/box/multiDecl/forRange/UnderscoreNames.kt");
      }

      @TestMetadata("UnderscoreNamesDontCallComponent.kt")
      public void testUnderscoreNamesDontCallComponent() {
        runTest("compiler/testData/codegen/box/multiDecl/forRange/UnderscoreNamesDontCallComponent.kt");
      }

      @TestMetadata("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class ExplicitRangeTo extends AbstractLightAnalysisModeTest {
        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        public void testAllFilesPresentInExplicitRangeTo() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("MultiDeclFor.kt")
        public void testMultiDeclFor() {
          runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/MultiDeclFor.kt");
        }

        @TestMetadata("MultiDeclForComponentExtensions.kt")
        public void testMultiDeclForComponentExtensions() {
          runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/MultiDeclForComponentExtensions.kt");
        }

        @TestMetadata("MultiDeclForComponentMemberExtensions.kt")
        public void testMultiDeclForComponentMemberExtensions() {
          runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/MultiDeclForComponentMemberExtensions.kt");
        }

        @TestMetadata("MultiDeclForComponentMemberExtensionsInExtensionFunction.kt")
        public void testMultiDeclForComponentMemberExtensionsInExtensionFunction() {
          runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/MultiDeclForComponentMemberExtensionsInExtensionFunction.kt");
        }

        @TestMetadata("MultiDeclForValCaptured.kt")
        public void testMultiDeclForValCaptured() {
          runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/MultiDeclForValCaptured.kt");
        }

        @TestMetadata("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/int")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Int extends AbstractLightAnalysisModeTest {
          private void runTest(String testDataFilePath) {
            KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
          }

          public void testAllFilesPresentInInt() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/int"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }

          @TestMetadata("MultiDeclForComponentExtensions.kt")
          public void testMultiDeclForComponentExtensions() {
            runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/int/MultiDeclForComponentExtensions.kt");
          }

          @TestMetadata("MultiDeclForComponentExtensionsValCaptured.kt")
          public void testMultiDeclForComponentExtensionsValCaptured() {
            runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/int/MultiDeclForComponentExtensionsValCaptured.kt");
          }

          @TestMetadata("MultiDeclForComponentMemberExtensions.kt")
          public void testMultiDeclForComponentMemberExtensions() {
            runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/int/MultiDeclForComponentMemberExtensions.kt");
          }

          @TestMetadata("MultiDeclForComponentMemberExtensionsInExtensionFunction.kt")
          public void testMultiDeclForComponentMemberExtensionsInExtensionFunction() {
            runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/int/MultiDeclForComponentMemberExtensionsInExtensionFunction.kt");
          }
        }

        @TestMetadata("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/long")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Long extends AbstractLightAnalysisModeTest {
          private void runTest(String testDataFilePath) {
            KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
          }

          public void testAllFilesPresentInLong() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/long"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }

          @TestMetadata("MultiDeclForComponentExtensions.kt")
          public void testMultiDeclForComponentExtensions() {
            runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/long/MultiDeclForComponentExtensions.kt");
          }

          @TestMetadata("MultiDeclForComponentExtensionsValCaptured.kt")
          public void testMultiDeclForComponentExtensionsValCaptured() {
            runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/long/MultiDeclForComponentExtensionsValCaptured.kt");
          }

          @TestMetadata("MultiDeclForComponentMemberExtensions.kt")
          public void testMultiDeclForComponentMemberExtensions() {
            runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/long/MultiDeclForComponentMemberExtensions.kt");
          }

          @TestMetadata("MultiDeclForComponentMemberExtensionsInExtensionFunction.kt")
          public void testMultiDeclForComponentMemberExtensionsInExtensionFunction() {
            runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/long/MultiDeclForComponentMemberExtensionsInExtensionFunction.kt");
          }
        }
      }

      @TestMetadata("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class ExplicitRangeToWithDot extends AbstractLightAnalysisModeTest {
        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        public void testAllFilesPresentInExplicitRangeToWithDot() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("MultiDeclFor.kt")
        public void testMultiDeclFor() {
          runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/MultiDeclFor.kt");
        }

        @TestMetadata("MultiDeclForComponentExtensions.kt")
        public void testMultiDeclForComponentExtensions() {
          runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/MultiDeclForComponentExtensions.kt");
        }

        @TestMetadata("MultiDeclForComponentMemberExtensions.kt")
        public void testMultiDeclForComponentMemberExtensions() {
          runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/MultiDeclForComponentMemberExtensions.kt");
        }

        @TestMetadata("MultiDeclForComponentMemberExtensionsInExtensionFunction.kt")
        public void testMultiDeclForComponentMemberExtensionsInExtensionFunction() {
          runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/MultiDeclForComponentMemberExtensionsInExtensionFunction.kt");
        }

        @TestMetadata("MultiDeclForValCaptured.kt")
        public void testMultiDeclForValCaptured() {
          runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/MultiDeclForValCaptured.kt");
        }

        @TestMetadata("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/int")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Int extends AbstractLightAnalysisModeTest {
          private void runTest(String testDataFilePath) {
            KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
          }

          public void testAllFilesPresentInInt() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/int"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }

          @TestMetadata("MultiDeclForComponentExtensions.kt")
          public void testMultiDeclForComponentExtensions() {
            runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/int/MultiDeclForComponentExtensions.kt");
          }

          @TestMetadata("MultiDeclForComponentExtensionsValCaptured.kt")
          public void testMultiDeclForComponentExtensionsValCaptured() {
            runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/int/MultiDeclForComponentExtensionsValCaptured.kt");
          }

          @TestMetadata("MultiDeclForComponentMemberExtensions.kt")
          public void testMultiDeclForComponentMemberExtensions() {
            runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/int/MultiDeclForComponentMemberExtensions.kt");
          }

          @TestMetadata("MultiDeclForComponentMemberExtensionsInExtensionFunction.kt")
          public void testMultiDeclForComponentMemberExtensionsInExtensionFunction() {
            runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/int/MultiDeclForComponentMemberExtensionsInExtensionFunction.kt");
          }
        }

        @TestMetadata("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/long")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Long extends AbstractLightAnalysisModeTest {
          private void runTest(String testDataFilePath) {
            KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
          }

          public void testAllFilesPresentInLong() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/long"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }

          @TestMetadata("MultiDeclForComponentExtensions.kt")
          public void testMultiDeclForComponentExtensions() {
            runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/long/MultiDeclForComponentExtensions.kt");
          }

          @TestMetadata("MultiDeclForComponentExtensionsValCaptured.kt")
          public void testMultiDeclForComponentExtensionsValCaptured() {
            runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/long/MultiDeclForComponentExtensionsValCaptured.kt");
          }

          @TestMetadata("MultiDeclForComponentMemberExtensions.kt")
          public void testMultiDeclForComponentMemberExtensions() {
            runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/long/MultiDeclForComponentMemberExtensions.kt");
          }

          @TestMetadata("MultiDeclForComponentMemberExtensionsInExtensionFunction.kt")
          public void testMultiDeclForComponentMemberExtensionsInExtensionFunction() {
            runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/long/MultiDeclForComponentMemberExtensionsInExtensionFunction.kt");
          }
        }
      }

      @TestMetadata("compiler/testData/codegen/box/multiDecl/forRange/int")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class Int extends AbstractLightAnalysisModeTest {
        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        public void testAllFilesPresentInInt() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/multiDecl/forRange/int"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("MultiDeclForComponentExtensions.kt")
        public void testMultiDeclForComponentExtensions() {
          runTest("compiler/testData/codegen/box/multiDecl/forRange/int/MultiDeclForComponentExtensions.kt");
        }

        @TestMetadata("MultiDeclForComponentExtensionsValCaptured.kt")
        public void testMultiDeclForComponentExtensionsValCaptured() {
          runTest("compiler/testData/codegen/box/multiDecl/forRange/int/MultiDeclForComponentExtensionsValCaptured.kt");
        }

        @TestMetadata("MultiDeclForComponentMemberExtensions.kt")
        public void testMultiDeclForComponentMemberExtensions() {
          runTest("compiler/testData/codegen/box/multiDecl/forRange/int/MultiDeclForComponentMemberExtensions.kt");
        }

        @TestMetadata("MultiDeclForComponentMemberExtensionsInExtensionFunction.kt")
        public void testMultiDeclForComponentMemberExtensionsInExtensionFunction() {
          runTest("compiler/testData/codegen/box/multiDecl/forRange/int/MultiDeclForComponentMemberExtensionsInExtensionFunction.kt");
        }
      }

      @TestMetadata("compiler/testData/codegen/box/multiDecl/forRange/long")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class Long extends AbstractLightAnalysisModeTest {
        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        public void testAllFilesPresentInLong() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/multiDecl/forRange/long"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("MultiDeclForComponentExtensions.kt")
        public void testMultiDeclForComponentExtensions() {
          runTest("compiler/testData/codegen/box/multiDecl/forRange/long/MultiDeclForComponentExtensions.kt");
        }

        @TestMetadata("MultiDeclForComponentExtensionsValCaptured.kt")
        public void testMultiDeclForComponentExtensionsValCaptured() {
          runTest("compiler/testData/codegen/box/multiDecl/forRange/long/MultiDeclForComponentExtensionsValCaptured.kt");
        }

        @TestMetadata("MultiDeclForComponentMemberExtensions.kt")
        public void testMultiDeclForComponentMemberExtensions() {
          runTest("compiler/testData/codegen/box/multiDecl/forRange/long/MultiDeclForComponentMemberExtensions.kt");
        }

        @TestMetadata("MultiDeclForComponentMemberExtensionsInExtensionFunction.kt")
        public void testMultiDeclForComponentMemberExtensionsInExtensionFunction() {
          runTest("compiler/testData/codegen/box/multiDecl/forRange/long/MultiDeclForComponentMemberExtensionsInExtensionFunction.kt");
        }
      }
    }
  }

  @TestMetadata("compiler/testData/codegen/box/multifileClasses")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class MultifileClasses extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInMultifileClasses() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/multifileClasses"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("callMultifileClassMemberFromOtherPackage.kt")
    public void testCallMultifileClassMemberFromOtherPackage() {
      runTest("compiler/testData/codegen/box/multifileClasses/callMultifileClassMemberFromOtherPackage.kt");
    }

    @TestMetadata("callsToMultifileClassFromOtherPackage.kt")
    public void testCallsToMultifileClassFromOtherPackage() {
      runTest("compiler/testData/codegen/box/multifileClasses/callsToMultifileClassFromOtherPackage.kt");
    }

    @TestMetadata("constPropertyReferenceFromMultifileClass.kt")
    public void testConstPropertyReferenceFromMultifileClass() {
      runTest("compiler/testData/codegen/box/multifileClasses/constPropertyReferenceFromMultifileClass.kt");
    }

    @TestMetadata("genericProperty.kt")
    public void testGenericProperty() {
      runTest("compiler/testData/codegen/box/multifileClasses/genericProperty.kt");
    }

    @TestMetadata("inlineMultifileClassMemberFromOtherPackage.kt")
    public void testInlineMultifileClassMemberFromOtherPackage() {
      runTest("compiler/testData/codegen/box/multifileClasses/inlineMultifileClassMemberFromOtherPackage.kt");
    }

    @TestMetadata("kt16077.kt")
    public void testKt16077() {
      runTest("compiler/testData/codegen/box/multifileClasses/kt16077.kt");
    }

    @TestMetadata("metadataFlag.kt")
    public void testMetadataFlag() {
      runTest("compiler/testData/codegen/box/multifileClasses/metadataFlag.kt");
    }

    @TestMetadata("multifileClassPartsInitialization.kt")
    public void testMultifileClassPartsInitialization() {
      runTest("compiler/testData/codegen/box/multifileClasses/multifileClassPartsInitialization.kt");
    }

    @TestMetadata("multifileClassWith2Files.kt")
    public void testMultifileClassWith2Files() {
      runTest("compiler/testData/codegen/box/multifileClasses/multifileClassWith2Files.kt");
    }

    @TestMetadata("multifileClassWithCrossCall.kt")
    public void testMultifileClassWithCrossCall() {
      runTest("compiler/testData/codegen/box/multifileClasses/multifileClassWithCrossCall.kt");
    }

    @TestMetadata("multifileClassWithPrivate.kt")
    public void testMultifileClassWithPrivate() {
      runTest("compiler/testData/codegen/box/multifileClasses/multifileClassWithPrivate.kt");
    }

    @TestMetadata("namesInMetadataAreSorted.kt")
    public void testNamesInMetadataAreSorted() {
      runTest("compiler/testData/codegen/box/multifileClasses/namesInMetadataAreSorted.kt");
    }

    @TestMetadata("privateConstVal.kt")
    public void testPrivateConstVal() {
      runTest("compiler/testData/codegen/box/multifileClasses/privateConstVal.kt");
    }

    @TestMetadata("samePartNameDifferentFacades.kt")
    public void testSamePartNameDifferentFacades() {
      runTest("compiler/testData/codegen/box/multifileClasses/samePartNameDifferentFacades.kt");
    }

    @TestMetadata("sealedClassHierarchy.kt")
    public void testSealedClassHierarchy() {
      runTest("compiler/testData/codegen/box/multifileClasses/sealedClassHierarchy.kt");
    }

    @TestMetadata("compiler/testData/codegen/box/multifileClasses/optimized")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Optimized extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInOptimized() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/multifileClasses/optimized"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("callInInlineLambda.kt")
      public void testCallInInlineLambda() {
        runTest("compiler/testData/codegen/box/multifileClasses/optimized/callInInlineLambda.kt");
      }

      @TestMetadata("callableRefToConstVal.kt")
      public void testCallableRefToConstVal() {
        runTest("compiler/testData/codegen/box/multifileClasses/optimized/callableRefToConstVal.kt");
      }

      @TestMetadata("callableRefToFun.kt")
      public void testCallableRefToFun() {
        runTest("compiler/testData/codegen/box/multifileClasses/optimized/callableRefToFun.kt");
      }

      @TestMetadata("callableRefToInternalConstValInline.kt")
      public void testCallableRefToInternalConstValInline() {
        runTest("compiler/testData/codegen/box/multifileClasses/optimized/callableRefToInternalConstValInline.kt");
      }

      @TestMetadata("callableRefToPrivateConstVal.kt")
      public void testCallableRefToPrivateConstVal() {
        runTest("compiler/testData/codegen/box/multifileClasses/optimized/callableRefToPrivateConstVal.kt");
      }

      @TestMetadata("callableReferencesToSameFunctionsFromDifferentPackages.kt")
      public void testCallableReferencesToSameFunctionsFromDifferentPackages() {
        runTest("compiler/testData/codegen/box/multifileClasses/optimized/callableReferencesToSameFunctionsFromDifferentPackages.kt");
      }

      @TestMetadata("callableReferencesToSamePropertiesFromDifferentPackages.kt")
      public void testCallableReferencesToSamePropertiesFromDifferentPackages() {
        runTest("compiler/testData/codegen/box/multifileClasses/optimized/callableReferencesToSamePropertiesFromDifferentPackages.kt");
      }

      @TestMetadata("calls.kt")
      public void testCalls() {
        runTest("compiler/testData/codegen/box/multifileClasses/optimized/calls.kt");
      }

      @TestMetadata("internalFunction.kt")
      public void testInternalFunction() {
        runTest("compiler/testData/codegen/box/multifileClasses/optimized/internalFunction.kt");
      }

      @TestMetadata("namesInMetadataAreSorted.kt")
      public void testNamesInMetadataAreSorted() {
        runTest("compiler/testData/codegen/box/multifileClasses/optimized/namesInMetadataAreSorted.kt");
      }

      @TestMetadata("overlappingFuns.kt")
      public void testOverlappingFuns() {
        runTest("compiler/testData/codegen/box/multifileClasses/optimized/overlappingFuns.kt");
      }
    }
  }

  @TestMetadata("compiler/testData/codegen/box/multiplatform")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Multiplatform extends AbstractLightAnalysisModeTest {
    @TestMetadata("callToJavaSuper.kt")
    public void ignoreCallToJavaSuper() {
      runTest("compiler/testData/codegen/box/multiplatform/callToJavaSuper.kt");
    }

    @TestMetadata("kt59613.kt")
    public void ignoreKt59613() {
      runTest("compiler/testData/codegen/box/multiplatform/kt59613.kt");
    }

    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInMultiplatform() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/multiplatform"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true, "k2");
    }

    @TestMetadata("annotationsViaActualTypeAliasFromBinary.kt")
    public void testAnnotationsViaActualTypeAliasFromBinary() {
      runTest("compiler/testData/codegen/box/multiplatform/annotationsViaActualTypeAliasFromBinary.kt");
    }

    @TestMetadata("annotationsViaActualTypeAliasFromBinary2.kt")
    public void testAnnotationsViaActualTypeAliasFromBinary2() {
      runTest("compiler/testData/codegen/box/multiplatform/annotationsViaActualTypeAliasFromBinary2.kt");
    }

    @TestMetadata("commonInternal.kt")
    public void testCommonInternal() {
      runTest("compiler/testData/codegen/box/multiplatform/commonInternal.kt");
    }

    @TestMetadata("expectClassInJvmMultifileFacade.kt")
    public void testExpectClassInJvmMultifileFacade() {
      runTest("compiler/testData/codegen/box/multiplatform/expectClassInJvmMultifileFacade.kt");
    }

    @TestMetadata("expectProperty.kt")
    public void testExpectProperty() {
      runTest("compiler/testData/codegen/box/multiplatform/expectProperty.kt");
    }

    @TestMetadata("kt57391.kt")
    public void testKt57391() {
      runTest("compiler/testData/codegen/box/multiplatform/kt57391.kt");
    }

    @TestMetadata("kt60854.kt")
    public void testKt60854() {
      runTest("compiler/testData/codegen/box/multiplatform/kt60854.kt");
    }

    @TestMetadata("kt61166.kt")
    public void testKt61166() {
      runTest("compiler/testData/codegen/box/multiplatform/kt61166.kt");
    }

    @TestMetadata("noArgActualConstructor.kt")
    public void testNoArgActualConstructor() {
      runTest("compiler/testData/codegen/box/multiplatform/noArgActualConstructor.kt");
    }

    @TestMetadata("optionalExpectation.kt")
    public void testOptionalExpectation() {
      runTest("compiler/testData/codegen/box/multiplatform/optionalExpectation.kt");
    }

    @TestMetadata("optionalExpectationJvm.kt")
    public void testOptionalExpectationJvm() {
      runTest("compiler/testData/codegen/box/multiplatform/optionalExpectationJvm.kt");
    }

    @TestMetadata("starImportOfExpectEnumWithActualTypeAlias.kt")
    public void testStarImportOfExpectEnumWithActualTypeAlias() {
      runTest("compiler/testData/codegen/box/multiplatform/starImportOfExpectEnumWithActualTypeAlias.kt");
    }

    @TestMetadata("unsignedArrayForLoop.kt")
    public void testUnsignedArrayForLoop() {
      runTest("compiler/testData/codegen/box/multiplatform/unsignedArrayForLoop.kt");
    }

    @TestMetadata("compiler/testData/codegen/box/multiplatform/complexMatchings")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ComplexMatchings extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInComplexMatchings() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/multiplatform/complexMatchings"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("expectCtorlessFinalToActualObject.kt")
      public void testExpectCtorlessFinalToActualObject() {
        runTest("compiler/testData/codegen/box/multiplatform/complexMatchings/expectCtorlessFinalToActualObject.kt");
      }

      @TestMetadata("expectCtorlessFinalToActualUnit.kt")
      public void testExpectCtorlessFinalToActualUnit() {
        runTest("compiler/testData/codegen/box/multiplatform/complexMatchings/expectCtorlessFinalToActualUnit.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/multiplatform/defaultArguments")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class DefaultArguments extends AbstractLightAnalysisModeTest {
      @TestMetadata("superCall.kt")
      public void ignoreSuperCall() {
        runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/superCall.kt");
      }

      @TestMetadata("typeAlias2.kt")
      public void ignoreTypeAlias2() {
        runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/typeAlias2.kt");
      }

      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInDefaultArguments() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/multiplatform/defaultArguments"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("annotations.kt")
      public void testAnnotations() {
        runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/annotations.kt");
      }

      @TestMetadata("bothInExpectAndActual.kt")
      public void testBothInExpectAndActual() {
        runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/bothInExpectAndActual.kt");
      }

      @TestMetadata("bothInExpectAndActual2.kt")
      public void testBothInExpectAndActual2() {
        runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/bothInExpectAndActual2.kt");
      }

      @TestMetadata("constructor.kt")
      public void testConstructor() {
        runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/constructor.kt");
      }

      @TestMetadata("delegatedExpectedInterface.kt")
      public void testDelegatedExpectedInterface() {
        runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/delegatedExpectedInterface.kt");
      }

      @TestMetadata("dispatchReceiverValue.kt")
      public void testDispatchReceiverValue() {
        runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/dispatchReceiverValue.kt");
      }

      @TestMetadata("extensionReceiverValue.kt")
      public void testExtensionReceiverValue() {
        runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/extensionReceiverValue.kt");
      }

      @TestMetadata("function.kt")
      public void testFunction() {
        runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/function.kt");
      }

      @TestMetadata("functionFromOtherModule.kt")
      public void testFunctionFromOtherModule() {
        runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/functionFromOtherModule.kt");
      }

      @TestMetadata("inheritedFromCommonClass.kt")
      public void testInheritedFromCommonClass() {
        runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/inheritedFromCommonClass.kt");
      }

      @TestMetadata("inheritedFromExpectedClass.kt")
      public void testInheritedFromExpectedClass() {
        runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/inheritedFromExpectedClass.kt");
      }

      @TestMetadata("inheritedFromExpectedInterface.kt")
      public void testInheritedFromExpectedInterface() {
        runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/inheritedFromExpectedInterface.kt");
      }

      @TestMetadata("inheritedFromExpectedMethod.kt")
      public void testInheritedFromExpectedMethod() {
        runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/inheritedFromExpectedMethod.kt");
      }

      @TestMetadata("inheritedInExpectedDeclarations.kt")
      public void testInheritedInExpectedDeclarations() {
        runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/inheritedInExpectedDeclarations.kt");
      }

      @TestMetadata("inheritedViaAnotherInterfaceIndirectly.kt")
      public void testInheritedViaAnotherInterfaceIndirectly() {
        runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/inheritedViaAnotherInterfaceIndirectly.kt");
      }

      @TestMetadata("inlineFunctionWithDefaultLambda.kt")
      public void testInlineFunctionWithDefaultLambda() {
        runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/inlineFunctionWithDefaultLambda.kt");
      }

      @TestMetadata("jvmOverloads.kt")
      public void testJvmOverloads() {
        runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/jvmOverloads.kt");
      }

      @TestMetadata("kt23239.kt")
      public void testKt23239() {
        runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/kt23239.kt");
      }

      @TestMetadata("kt23739.kt")
      public void testKt23739() {
        runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/kt23739.kt");
      }

      @TestMetadata("kt67488.kt")
      public void testKt67488() {
        runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/kt67488.kt");
      }

      @TestMetadata("nestedEnumEntryValue.kt")
      public void testNestedEnumEntryValue() {
        runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/nestedEnumEntryValue.kt");
      }

      @TestMetadata("parametersInArgumentValues.kt")
      public void testParametersInArgumentValues() {
        runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/parametersInArgumentValues.kt");
      }

      @TestMetadata("suspend.kt")
      public void testSuspend() {
        runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/suspend.kt");
      }

      @TestMetadata("typeAlias.kt")
      public void testTypeAlias() {
        runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/typeAlias.kt");
      }

      @TestMetadata("withTypeParameter.kt")
      public void testWithTypeParameter() {
        runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/withTypeParameter.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/multiplatform/exhaustiveness")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Exhaustiveness extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInExhaustiveness() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/multiplatform/exhaustiveness"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("commonEnum.kt")
      public void testCommonEnum() {
        runTest("compiler/testData/codegen/box/multiplatform/exhaustiveness/commonEnum.kt");
      }

      @TestMetadata("commonSealedClass.kt")
      public void testCommonSealedClass() {
        runTest("compiler/testData/codegen/box/multiplatform/exhaustiveness/commonSealedClass.kt");
      }

      @TestMetadata("commonSealedInterface.kt")
      public void testCommonSealedInterface() {
        runTest("compiler/testData/codegen/box/multiplatform/exhaustiveness/commonSealedInterface.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/multiplatform/hmpp")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Hmpp extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInHmpp() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/multiplatform/hmpp"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("simple.kt")
      public void testSimple() {
        runTest("compiler/testData/codegen/box/multiplatform/hmpp/simple.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/multiplatform/migratedOldTests")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class MigratedOldTests extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInMigratedOldTests() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/multiplatform/migratedOldTests"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("mpp1.kt")
      public void testMpp1() {
        runTest("compiler/testData/codegen/box/multiplatform/migratedOldTests/mpp1.kt");
      }

      @TestMetadata("mpp2.kt")
      public void testMpp2() {
        runTest("compiler/testData/codegen/box/multiplatform/migratedOldTests/mpp2.kt");
      }

      @TestMetadata("mpp_default_args.kt")
      public void testMpp_default_args() {
        runTest("compiler/testData/codegen/box/multiplatform/migratedOldTests/mpp_default_args.kt");
      }

      @TestMetadata("remap_expect_property_ref.kt")
      public void testRemap_expect_property_ref() {
        runTest("compiler/testData/codegen/box/multiplatform/migratedOldTests/remap_expect_property_ref.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/multiplatform/multiModule")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class MultiModule extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInMultiModule() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/multiplatform/multiModule"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("expectInterfaceInheritance.kt")
      public void testExpectInterfaceInheritance() {
        runTest("compiler/testData/codegen/box/multiplatform/multiModule/expectInterfaceInheritance.kt");
      }

      @TestMetadata("hmppSimple.kt")
      public void testHmppSimple() {
        runTest("compiler/testData/codegen/box/multiplatform/multiModule/hmppSimple.kt");
      }

      @TestMetadata("stdlibClassRedefine.kt")
      public void testStdlibClassRedefine() {
        runTest("compiler/testData/codegen/box/multiplatform/multiModule/stdlibClassRedefine.kt");
      }
    }
  }

  @TestMetadata("compiler/testData/codegen/box/nonLocalReturns")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class NonLocalReturns extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInNonLocalReturns() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/nonLocalReturns"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("kt6895.kt")
    public void testKt6895() {
      runTest("compiler/testData/codegen/box/nonLocalReturns/kt6895.kt");
    }

    @TestMetadata("kt9644let.kt")
    public void testKt9644let() {
      runTest("compiler/testData/codegen/box/nonLocalReturns/kt9644let.kt");
    }

    @TestMetadata("localReturnInsideProperty.kt")
    public void testLocalReturnInsideProperty() {
      runTest("compiler/testData/codegen/box/nonLocalReturns/localReturnInsideProperty.kt");
    }

    @TestMetadata("returnInsideTwoLambdas.kt")
    public void testReturnInsideTwoLambdas() {
      runTest("compiler/testData/codegen/box/nonLocalReturns/returnInsideTwoLambdas.kt");
    }

    @TestMetadata("use.kt")
    public void testUse() {
      runTest("compiler/testData/codegen/box/nonLocalReturns/use.kt");
    }

    @TestMetadata("useWithException.kt")
    public void testUseWithException() {
      runTest("compiler/testData/codegen/box/nonLocalReturns/useWithException.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/notNullAssertions")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class NotNullAssertions extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInNotNullAssertions() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/notNullAssertions"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("callAssertions.kt")
    public void testCallAssertions() {
      runTest("compiler/testData/codegen/box/notNullAssertions/callAssertions.kt");
    }

    @TestMetadata("constructorWithMangledParams.kt")
    public void testConstructorWithMangledParams() {
      runTest("compiler/testData/codegen/box/notNullAssertions/constructorWithMangledParams.kt");
    }

    @TestMetadata("definitelyNotNullTypes.kt")
    public void testDefinitelyNotNullTypes() {
      runTest("compiler/testData/codegen/box/notNullAssertions/definitelyNotNullTypes.kt");
    }

    @TestMetadata("delegation.kt")
    public void testDelegation() {
      runTest("compiler/testData/codegen/box/notNullAssertions/delegation.kt");
    }

    @TestMetadata("doGenerateParamAssertions.kt")
    public void testDoGenerateParamAssertions() {
      runTest("compiler/testData/codegen/box/notNullAssertions/doGenerateParamAssertions.kt");
    }

    @TestMetadata("inFunctionWithExpressionBodyWithJavaGeneric.kt")
    public void testInFunctionWithExpressionBodyWithJavaGeneric() {
      runTest("compiler/testData/codegen/box/notNullAssertions/inFunctionWithExpressionBodyWithJavaGeneric.kt");
    }

    @TestMetadata("messageLength.kt")
    public void testMessageLength() {
      runTest("compiler/testData/codegen/box/notNullAssertions/messageLength.kt");
    }

    @TestMetadata("noCallAssertions.kt")
    public void testNoCallAssertions() {
      runTest("compiler/testData/codegen/box/notNullAssertions/noCallAssertions.kt");
    }

    @TestMetadata("rightElvisOperand.kt")
    public void testRightElvisOperand() {
      runTest("compiler/testData/codegen/box/notNullAssertions/rightElvisOperand.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/nothingValue")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class NothingValue extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInNothingValue() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/nothingValue"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("inNestedCall.kt")
    public void testInNestedCall() {
      runTest("compiler/testData/codegen/box/nothingValue/inNestedCall.kt");
    }

    @TestMetadata("nothingValueException.kt")
    public void testNothingValueException() {
      runTest("compiler/testData/codegen/box/nothingValue/nothingValueException.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/nullCheckOptimization")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class NullCheckOptimization extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInNullCheckOptimization() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/nullCheckOptimization"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("exclExclThrowsKnpe_1_3.kt")
    public void testExclExclThrowsKnpe_1_3() {
      runTest("compiler/testData/codegen/box/nullCheckOptimization/exclExclThrowsKnpe_1_3.kt");
    }

    @TestMetadata("exclExclThrowsNpe.kt")
    public void testExclExclThrowsNpe() {
      runTest("compiler/testData/codegen/box/nullCheckOptimization/exclExclThrowsNpe.kt");
    }

    @TestMetadata("isNullable.kt")
    public void testIsNullable() {
      runTest("compiler/testData/codegen/box/nullCheckOptimization/isNullable.kt");
    }

    @TestMetadata("javaNullCheckThrowsIse_1_3.kt")
    public void testJavaNullCheckThrowsIse_1_3() {
      runTest("compiler/testData/codegen/box/nullCheckOptimization/javaNullCheckThrowsIse_1_3.kt");
    }

    @TestMetadata("javaNullCheckThrowsNpe.kt")
    public void testJavaNullCheckThrowsNpe() {
      runTest("compiler/testData/codegen/box/nullCheckOptimization/javaNullCheckThrowsNpe.kt");
    }

    @TestMetadata("kt22410.kt")
    public void testKt22410() {
      runTest("compiler/testData/codegen/box/nullCheckOptimization/kt22410.kt");
    }

    @TestMetadata("kt49136.kt")
    public void testKt49136() {
      runTest("compiler/testData/codegen/box/nullCheckOptimization/kt49136.kt");
    }

    @TestMetadata("kt49136a.kt")
    public void testKt49136a() {
      runTest("compiler/testData/codegen/box/nullCheckOptimization/kt49136a.kt");
    }

    @TestMetadata("kt7774.kt")
    public void testKt7774() {
      runTest("compiler/testData/codegen/box/nullCheckOptimization/kt7774.kt");
    }

    @TestMetadata("parameterNullCheckThrowsIae_1_3.kt")
    public void testParameterNullCheckThrowsIae_1_3() {
      runTest("compiler/testData/codegen/box/nullCheckOptimization/parameterNullCheckThrowsIae_1_3.kt");
    }

    @TestMetadata("parameterNullCheckThrowsNpe.kt")
    public void testParameterNullCheckThrowsNpe() {
      runTest("compiler/testData/codegen/box/nullCheckOptimization/parameterNullCheckThrowsNpe.kt");
    }

    @TestMetadata("primitiveCheckWithSideEffect.kt")
    public void testPrimitiveCheckWithSideEffect() {
      runTest("compiler/testData/codegen/box/nullCheckOptimization/primitiveCheckWithSideEffect.kt");
    }

    @TestMetadata("trivialInstanceOf.kt")
    public void testTrivialInstanceOf() {
      runTest("compiler/testData/codegen/box/nullCheckOptimization/trivialInstanceOf.kt");
    }

    @TestMetadata("varModifiedAfterCheck.kt")
    public void testVarModifiedAfterCheck() {
      runTest("compiler/testData/codegen/box/nullCheckOptimization/varModifiedAfterCheck.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/object")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Object extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInObject() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/object"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("constructor0.kt")
    public void testConstructor0() {
      runTest("compiler/testData/codegen/box/object/constructor0.kt");
    }

    @TestMetadata("fields.kt")
    public void testFields() {
      runTest("compiler/testData/codegen/box/object/fields.kt");
    }

    @TestMetadata("fields1.kt")
    public void testFields1() {
      runTest("compiler/testData/codegen/box/object/fields1.kt");
    }

    @TestMetadata("fields2.kt")
    public void testFields2() {
      runTest("compiler/testData/codegen/box/object/fields2.kt");
    }

    @TestMetadata("globalInitializer.kt")
    public void testGlobalInitializer() {
      runTest("compiler/testData/codegen/box/object/globalInitializer.kt");
    }

    @TestMetadata("init0.kt")
    public void testInit0() {
      runTest("compiler/testData/codegen/box/object/init0.kt");
    }

    @TestMetadata("initialization.kt")
    public void testInitialization() {
      runTest("compiler/testData/codegen/box/object/initialization.kt");
    }

    @TestMetadata("initialization1.kt")
    public void testInitialization1() {
      runTest("compiler/testData/codegen/box/object/initialization1.kt");
    }

    @TestMetadata("method_call.kt")
    public void testMethod_call() {
      runTest("compiler/testData/codegen/box/object/method_call.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/objectExpression")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class ObjectExpression extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInObjectExpression() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/objectExpression"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("expr1.kt")
    public void testExpr1() {
      runTest("compiler/testData/codegen/box/objectExpression/expr1.kt");
    }

    @TestMetadata("expr2.kt")
    public void testExpr2() {
      runTest("compiler/testData/codegen/box/objectExpression/expr2.kt");
    }

    @TestMetadata("expr3.kt")
    public void testExpr3() {
      runTest("compiler/testData/codegen/box/objectExpression/expr3.kt");
    }

    @TestMetadata("multipleAnonymousObjectsInsideInlineFunction.kt")
    public void testMultipleAnonymousObjectsInsideInlineFunction() {
      runTest("compiler/testData/codegen/box/objectExpression/multipleAnonymousObjectsInsideInlineFunction.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/objectIntrinsics")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class ObjectIntrinsics extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInObjectIntrinsics() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/objectIntrinsics"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("objects.kt")
    public void testObjects() {
      runTest("compiler/testData/codegen/box/objectIntrinsics/objects.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/objects")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Objects extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInObjects() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/objects"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("anonymousObjectAndContrvariantProjection.kt")
    public void testAnonymousObjectAndContrvariantProjection() {
      runTest("compiler/testData/codegen/box/objects/anonymousObjectAndContrvariantProjection.kt");
    }

    @TestMetadata("anonymousObjectPropertyInitialization.kt")
    public void testAnonymousObjectPropertyInitialization() {
      runTest("compiler/testData/codegen/box/objects/anonymousObjectPropertyInitialization.kt");
    }

    @TestMetadata("anonymousObjectReturnsFromTopLevelFun.kt")
    public void testAnonymousObjectReturnsFromTopLevelFun() {
      runTest("compiler/testData/codegen/box/objects/anonymousObjectReturnsFromTopLevelFun.kt");
    }

    @TestMetadata("classCallsProtectedInheritedByCompanion.kt")
    public void testClassCallsProtectedInheritedByCompanion() {
      runTest("compiler/testData/codegen/box/objects/classCallsProtectedInheritedByCompanion.kt");
    }

    @TestMetadata("classCompanion.kt")
    public void testClassCompanion() {
      runTest("compiler/testData/codegen/box/objects/classCompanion.kt");
    }

    @TestMetadata("compoundAssignmentToArrayAccessToExtensionPropertyImportedFromObject.kt")
    public void testCompoundAssignmentToArrayAccessToExtensionPropertyImportedFromObject() {
      runTest("compiler/testData/codegen/box/objects/compoundAssignmentToArrayAccessToExtensionPropertyImportedFromObject.kt");
    }

    @TestMetadata("compoundAssignmentToArrayAccessToPropertyImportedFromObject.kt")
    public void testCompoundAssignmentToArrayAccessToPropertyImportedFromObject() {
      runTest("compiler/testData/codegen/box/objects/compoundAssignmentToArrayAccessToPropertyImportedFromObject.kt");
    }

    @TestMetadata("compoundAssignmentToExtensionPropertyImportedFromObject.kt")
    public void testCompoundAssignmentToExtensionPropertyImportedFromObject() {
      runTest("compiler/testData/codegen/box/objects/compoundAssignmentToExtensionPropertyImportedFromObject.kt");
    }

    @TestMetadata("compoundAssignmentToObjectFromCall.kt")
    public void testCompoundAssignmentToObjectFromCall() {
      runTest("compiler/testData/codegen/box/objects/compoundAssignmentToObjectFromCall.kt");
    }

    @TestMetadata("compoundAssignmentToPropertyImportedFromObject.kt")
    public void testCompoundAssignmentToPropertyImportedFromObject() {
      runTest("compiler/testData/codegen/box/objects/compoundAssignmentToPropertyImportedFromObject.kt");
    }

    @TestMetadata("compoundAssignmentToPropertyWithQualifier.kt")
    public void testCompoundAssignmentToPropertyWithQualifier() {
      runTest("compiler/testData/codegen/box/objects/compoundAssignmentToPropertyWithQualifier.kt");
    }

    @TestMetadata("flist.kt")
    public void testFlist() {
      runTest("compiler/testData/codegen/box/objects/flist.kt");
    }

    @TestMetadata("initializationOrder.kt")
    public void testInitializationOrder() {
      runTest("compiler/testData/codegen/box/objects/initializationOrder.kt");
    }

    @TestMetadata("initializationOrderConsts.kt")
    public void testInitializationOrderConsts() {
      runTest("compiler/testData/codegen/box/objects/initializationOrderConsts.kt");
    }

    @TestMetadata("initializerBlockResetToDefault.kt")
    public void testInitializerBlockResetToDefault() {
      runTest("compiler/testData/codegen/box/objects/initializerBlockResetToDefault.kt");
    }

    @TestMetadata("interfaceCompanion.kt")
    public void testInterfaceCompanion() {
      runTest("compiler/testData/codegen/box/objects/interfaceCompanion.kt");
    }

    @TestMetadata("interfaceCompanionObjectReference.kt")
    public void testInterfaceCompanionObjectReference() {
      runTest("compiler/testData/codegen/box/objects/interfaceCompanionObjectReference.kt");
    }

    @TestMetadata("kt1047.kt")
    public void testKt1047() {
      runTest("compiler/testData/codegen/box/objects/kt1047.kt");
    }

    @TestMetadata("kt1047a.kt")
    public void testKt1047a() {
      runTest("compiler/testData/codegen/box/objects/kt1047a.kt");
    }

    @TestMetadata("kt11117.kt")
    public void testKt11117() {
      runTest("compiler/testData/codegen/box/objects/kt11117.kt");
    }

    @TestMetadata("kt1136.kt")
    public void testKt1136() {
      runTest("compiler/testData/codegen/box/objects/kt1136.kt");
    }

    @TestMetadata("kt1186.kt")
    public void testKt1186() {
      runTest("compiler/testData/codegen/box/objects/kt1186.kt");
    }

    @TestMetadata("kt1600.kt")
    public void testKt1600() {
      runTest("compiler/testData/codegen/box/objects/kt1600.kt");
    }

    @TestMetadata("kt1737.kt")
    public void testKt1737() {
      runTest("compiler/testData/codegen/box/objects/kt1737.kt");
    }

    @TestMetadata("kt18982.kt")
    public void testKt18982() {
      runTest("compiler/testData/codegen/box/objects/kt18982.kt");
    }

    @TestMetadata("kt2398.kt")
    public void testKt2398() {
      runTest("compiler/testData/codegen/box/objects/kt2398.kt");
    }

    @TestMetadata("kt2663.kt")
    public void testKt2663() {
      runTest("compiler/testData/codegen/box/objects/kt2663.kt");
    }

    @TestMetadata("kt2663_2.kt")
    public void testKt2663_2() {
      runTest("compiler/testData/codegen/box/objects/kt2663_2.kt");
    }

    @TestMetadata("kt2663_3.kt")
    public void testKt2663_3() {
      runTest("compiler/testData/codegen/box/objects/kt2663_3.kt");
    }

    @TestMetadata("kt2675.kt")
    public void testKt2675() {
      runTest("compiler/testData/codegen/box/objects/kt2675.kt");
    }

    @TestMetadata("kt2719.kt")
    public void testKt2719() {
      runTest("compiler/testData/codegen/box/objects/kt2719.kt");
    }

    @TestMetadata("kt2822.kt")
    public void testKt2822() {
      runTest("compiler/testData/codegen/box/objects/kt2822.kt");
    }

    @TestMetadata("kt32351.kt")
    public void testKt32351() {
      runTest("compiler/testData/codegen/box/objects/kt32351.kt");
    }

    @TestMetadata("kt3238.kt")
    public void testKt3238() {
      runTest("compiler/testData/codegen/box/objects/kt3238.kt");
    }

    @TestMetadata("kt32749.kt")
    public void testKt32749() {
      runTest("compiler/testData/codegen/box/objects/kt32749.kt");
    }

    @TestMetadata("kt3684.kt")
    public void testKt3684() {
      runTest("compiler/testData/codegen/box/objects/kt3684.kt");
    }

    @TestMetadata("kt4086.kt")
    public void testKt4086() {
      runTest("compiler/testData/codegen/box/objects/kt4086.kt");
    }

    @TestMetadata("kt42758.kt")
    public void testKt42758() {
      runTest("compiler/testData/codegen/box/objects/kt42758.kt");
    }

    @TestMetadata("kt45170.kt")
    public void testKt45170() {
      runTest("compiler/testData/codegen/box/objects/kt45170.kt");
    }

    @TestMetadata("kt46136.kt")
    public void testKt46136() {
      runTest("compiler/testData/codegen/box/objects/kt46136.kt");
    }

    @TestMetadata("kt52540.kt")
    public void testKt52540() {
      runTest("compiler/testData/codegen/box/objects/kt52540.kt");
    }

    @TestMetadata("kt535.kt")
    public void testKt535() {
      runTest("compiler/testData/codegen/box/objects/kt535.kt");
    }

    @TestMetadata("kt560.kt")
    public void testKt560() {
      runTest("compiler/testData/codegen/box/objects/kt560.kt");
    }

    @TestMetadata("kt694.kt")
    public void testKt694() {
      runTest("compiler/testData/codegen/box/objects/kt694.kt");
    }

    @TestMetadata("localFunctionInObjectInitializer_kt4516.kt")
    public void testLocalFunctionInObjectInitializer_kt4516() {
      runTest("compiler/testData/codegen/box/objects/localFunctionInObjectInitializer_kt4516.kt");
    }

    @TestMetadata("methodOnObject.kt")
    public void testMethodOnObject() {
      runTest("compiler/testData/codegen/box/objects/methodOnObject.kt");
    }

    @TestMetadata("nestedDerivedClassCallsProtectedFromCompanion.kt")
    public void testNestedDerivedClassCallsProtectedFromCompanion() {
      runTest("compiler/testData/codegen/box/objects/nestedDerivedClassCallsProtectedFromCompanion.kt");
    }

    @TestMetadata("nestedObjectWithSuperclass.kt")
    public void testNestedObjectWithSuperclass() {
      runTest("compiler/testData/codegen/box/objects/nestedObjectWithSuperclass.kt");
    }

    @TestMetadata("object.kt")
    public void testObject() {
      runTest("compiler/testData/codegen/box/objects/object.kt");
    }

    @TestMetadata("objectExtendsInnerAndReferencesOuterMember.kt")
    public void testObjectExtendsInnerAndReferencesOuterMember() {
      runTest("compiler/testData/codegen/box/objects/objectExtendsInnerAndReferencesOuterMember.kt");
    }

    @TestMetadata("objectInLocalAnonymousObject.kt")
    public void testObjectInLocalAnonymousObject() {
      runTest("compiler/testData/codegen/box/objects/objectInLocalAnonymousObject.kt");
    }

    @TestMetadata("objectInitialization_kt5523.kt")
    public void testObjectInitialization_kt5523() {
      runTest("compiler/testData/codegen/box/objects/objectInitialization_kt5523.kt");
    }

    @TestMetadata("objectLiteral.kt")
    public void testObjectLiteral() {
      runTest("compiler/testData/codegen/box/objects/objectLiteral.kt");
    }

    @TestMetadata("objectLiteralInClass.kt")
    public void testObjectLiteralInClass() {
      runTest("compiler/testData/codegen/box/objects/objectLiteralInClass.kt");
    }

    @TestMetadata("objectLiteralInClosure.kt")
    public void testObjectLiteralInClosure() {
      runTest("compiler/testData/codegen/box/objects/objectLiteralInClosure.kt");
    }

    @TestMetadata("objectVsClassInitialization_kt5291.kt")
    public void testObjectVsClassInitialization_kt5291() {
      runTest("compiler/testData/codegen/box/objects/objectVsClassInitialization_kt5291.kt");
    }

    @TestMetadata("objectWithSuperclass.kt")
    public void testObjectWithSuperclass() {
      runTest("compiler/testData/codegen/box/objects/objectWithSuperclass.kt");
    }

    @TestMetadata("objectWithSuperclassAndTrait.kt")
    public void testObjectWithSuperclassAndTrait() {
      runTest("compiler/testData/codegen/box/objects/objectWithSuperclassAndTrait.kt");
    }

    @TestMetadata("privateExtensionFromInitializer_kt4543.kt")
    public void testPrivateExtensionFromInitializer_kt4543() {
      runTest("compiler/testData/codegen/box/objects/privateExtensionFromInitializer_kt4543.kt");
    }

    @TestMetadata("privateFunctionFromClosureInInitializer_kt5582.kt")
    public void testPrivateFunctionFromClosureInInitializer_kt5582() {
      runTest("compiler/testData/codegen/box/objects/privateFunctionFromClosureInInitializer_kt5582.kt");
    }

    @TestMetadata("receiverInConstructor.kt")
    public void testReceiverInConstructor() {
      runTest("compiler/testData/codegen/box/objects/receiverInConstructor.kt");
    }

    @TestMetadata("safeAccess.kt")
    public void testSafeAccess() {
      runTest("compiler/testData/codegen/box/objects/safeAccess.kt");
    }

    @TestMetadata("selfReferenceToCompanionObjectInAnonymousObjectInSuperConstructorCall.kt")
    public void testSelfReferenceToCompanionObjectInAnonymousObjectInSuperConstructorCall() {
      runTest("compiler/testData/codegen/box/objects/selfReferenceToCompanionObjectInAnonymousObjectInSuperConstructorCall.kt");
    }

    @TestMetadata("selfReferenceToCompanionObjectInInlineLambdaInConstructorBody.kt")
    public void testSelfReferenceToCompanionObjectInInlineLambdaInConstructorBody() {
      runTest("compiler/testData/codegen/box/objects/selfReferenceToCompanionObjectInInlineLambdaInConstructorBody.kt");
    }

    @TestMetadata("selfReferenceToCompanionObjectInInlineLambdaInSuperConstructorCall.kt")
    public void testSelfReferenceToCompanionObjectInInlineLambdaInSuperConstructorCall() {
      runTest("compiler/testData/codegen/box/objects/selfReferenceToCompanionObjectInInlineLambdaInSuperConstructorCall.kt");
    }

    @TestMetadata("selfReferenceToCompanionObjectInLambdaInSuperConstructorCall.kt")
    public void testSelfReferenceToCompanionObjectInLambdaInSuperConstructorCall() {
      runTest("compiler/testData/codegen/box/objects/selfReferenceToCompanionObjectInLambdaInSuperConstructorCall.kt");
    }

    @TestMetadata("selfReferenceToInterfaceCompanionObjectInAnonymousObjectInSuperConstructorCall.kt")
    public void testSelfReferenceToInterfaceCompanionObjectInAnonymousObjectInSuperConstructorCall() {
      runTest("compiler/testData/codegen/box/objects/selfReferenceToInterfaceCompanionObjectInAnonymousObjectInSuperConstructorCall.kt");
    }

    @TestMetadata("selfReferenceToInterfaceCompanionObjectInInlineLambdaInConstructorBody.kt")
    public void testSelfReferenceToInterfaceCompanionObjectInInlineLambdaInConstructorBody() {
      runTest("compiler/testData/codegen/box/objects/selfReferenceToInterfaceCompanionObjectInInlineLambdaInConstructorBody.kt");
    }

    @TestMetadata("selfReferenceToInterfaceCompanionObjectInInlineLambdaInSuperConstructorCall.kt")
    public void testSelfReferenceToInterfaceCompanionObjectInInlineLambdaInSuperConstructorCall() {
      runTest("compiler/testData/codegen/box/objects/selfReferenceToInterfaceCompanionObjectInInlineLambdaInSuperConstructorCall.kt");
    }

    @TestMetadata("selfReferenceToInterfaceCompanionObjectInLambdaInSuperConstructorCall.kt")
    public void testSelfReferenceToInterfaceCompanionObjectInLambdaInSuperConstructorCall() {
      runTest("compiler/testData/codegen/box/objects/selfReferenceToInterfaceCompanionObjectInLambdaInSuperConstructorCall.kt");
    }

    @TestMetadata("selfReferenceToObjectInAnonymousObjectInSuperConstructorCall.kt")
    public void testSelfReferenceToObjectInAnonymousObjectInSuperConstructorCall() {
      runTest("compiler/testData/codegen/box/objects/selfReferenceToObjectInAnonymousObjectInSuperConstructorCall.kt");
    }

    @TestMetadata("selfReferenceToObjectInInlineLambdaInConstructorBody.kt")
    public void testSelfReferenceToObjectInInlineLambdaInConstructorBody() {
      runTest("compiler/testData/codegen/box/objects/selfReferenceToObjectInInlineLambdaInConstructorBody.kt");
    }

    @TestMetadata("selfReferenceToObjectInInlineLambdaInSuperConstructorCall.kt")
    public void testSelfReferenceToObjectInInlineLambdaInSuperConstructorCall() {
      runTest("compiler/testData/codegen/box/objects/selfReferenceToObjectInInlineLambdaInSuperConstructorCall.kt");
    }

    @TestMetadata("selfReferenceToObjectInLambdaInSuperConstructorCall.kt")
    public void testSelfReferenceToObjectInLambdaInSuperConstructorCall() {
      runTest("compiler/testData/codegen/box/objects/selfReferenceToObjectInLambdaInSuperConstructorCall.kt");
    }

    @TestMetadata("simpleObject.kt")
    public void testSimpleObject() {
      runTest("compiler/testData/codegen/box/objects/simpleObject.kt");
    }

    @TestMetadata("substitutionFunctionFromSuper.kt")
    public void testSubstitutionFunctionFromSuper() {
      runTest("compiler/testData/codegen/box/objects/substitutionFunctionFromSuper.kt");
    }

    @TestMetadata("thisInConstructor.kt")
    public void testThisInConstructor() {
      runTest("compiler/testData/codegen/box/objects/thisInConstructor.kt");
    }

    @TestMetadata("thisRefToObjectInNestedClassConstructorCall.kt")
    public void testThisRefToObjectInNestedClassConstructorCall() {
      runTest("compiler/testData/codegen/box/objects/thisRefToObjectInNestedClassConstructorCall.kt");
    }

    @TestMetadata("useAnonymousObjectAsIterator.kt")
    public void testUseAnonymousObjectAsIterator() {
      runTest("compiler/testData/codegen/box/objects/useAnonymousObjectAsIterator.kt");
    }

    @TestMetadata("useAnonymousObjectFunction.kt")
    public void testUseAnonymousObjectFunction() {
      runTest("compiler/testData/codegen/box/objects/useAnonymousObjectFunction.kt");
    }

    @TestMetadata("useImportedMember.kt")
    public void testUseImportedMember() {
      runTest("compiler/testData/codegen/box/objects/useImportedMember.kt");
    }

    @TestMetadata("useImportedMemberFromCompanion.kt")
    public void testUseImportedMemberFromCompanion() {
      runTest("compiler/testData/codegen/box/objects/useImportedMemberFromCompanion.kt");
    }

    @TestMetadata("compiler/testData/codegen/box/objects/companionObjectAccess")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class CompanionObjectAccess extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInCompanionObjectAccess() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/objects/companionObjectAccess"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("kt27117.kt")
      public void testKt27117() {
        runTest("compiler/testData/codegen/box/objects/companionObjectAccess/kt27117.kt");
      }

      @TestMetadata("kt27117_lv12.kt")
      public void testKt27117_lv12() {
        runTest("compiler/testData/codegen/box/objects/companionObjectAccess/kt27117_lv12.kt");
      }

      @TestMetadata("kt27117_lv13.kt")
      public void testKt27117_lv13() {
        runTest("compiler/testData/codegen/box/objects/companionObjectAccess/kt27117_lv13.kt");
      }

      @TestMetadata("kt27121.kt")
      public void testKt27121() {
        runTest("compiler/testData/codegen/box/objects/companionObjectAccess/kt27121.kt");
      }

      @TestMetadata("kt27121_lv12.kt")
      public void testKt27121_lv12() {
        runTest("compiler/testData/codegen/box/objects/companionObjectAccess/kt27121_lv12.kt");
      }

      @TestMetadata("kt27121_lv13.kt")
      public void testKt27121_lv13() {
        runTest("compiler/testData/codegen/box/objects/companionObjectAccess/kt27121_lv13.kt");
      }

      @TestMetadata("privateCompanionObjectAccessedFromAnonymousObjectInNestedClass.kt")
      public void testPrivateCompanionObjectAccessedFromAnonymousObjectInNestedClass() {
        runTest("compiler/testData/codegen/box/objects/companionObjectAccess/privateCompanionObjectAccessedFromAnonymousObjectInNestedClass.kt");
      }

      @TestMetadata("privateCompanionObjectAccessedFromInitBlock.kt")
      public void testPrivateCompanionObjectAccessedFromInitBlock() {
        runTest("compiler/testData/codegen/box/objects/companionObjectAccess/privateCompanionObjectAccessedFromInitBlock.kt");
      }

      @TestMetadata("privateCompanionObjectAccessedFromInitBlockOfNestedClass.kt")
      public void testPrivateCompanionObjectAccessedFromInitBlockOfNestedClass() {
        runTest("compiler/testData/codegen/box/objects/companionObjectAccess/privateCompanionObjectAccessedFromInitBlockOfNestedClass.kt");
      }

      @TestMetadata("privateCompanionObjectAccessedFromInlineLambdaInNestedClass.kt")
      public void testPrivateCompanionObjectAccessedFromInlineLambdaInNestedClass() {
        runTest("compiler/testData/codegen/box/objects/companionObjectAccess/privateCompanionObjectAccessedFromInlineLambdaInNestedClass.kt");
      }

      @TestMetadata("privateCompanionObjectAccessedFromLambdaInNestedClass.kt")
      public void testPrivateCompanionObjectAccessedFromLambdaInNestedClass() {
        runTest("compiler/testData/codegen/box/objects/companionObjectAccess/privateCompanionObjectAccessedFromLambdaInNestedClass.kt");
      }

      @TestMetadata("privateCompanionObjectAccessedFromMethodInlinedInNestedClass.kt")
      public void testPrivateCompanionObjectAccessedFromMethodInlinedInNestedClass() {
        runTest("compiler/testData/codegen/box/objects/companionObjectAccess/privateCompanionObjectAccessedFromMethodInlinedInNestedClass.kt");
      }

      @TestMetadata("privateCompanionObjectAccessedFromNestedClass.kt")
      public void testPrivateCompanionObjectAccessedFromNestedClass() {
        runTest("compiler/testData/codegen/box/objects/companionObjectAccess/privateCompanionObjectAccessedFromNestedClass.kt");
      }

      @TestMetadata("privateCompanionObjectAccessedFromNestedClassSeveralTimes.kt")
      public void testPrivateCompanionObjectAccessedFromNestedClassSeveralTimes() {
        runTest("compiler/testData/codegen/box/objects/companionObjectAccess/privateCompanionObjectAccessedFromNestedClassSeveralTimes.kt");
      }

      @TestMetadata("privateCompanionObjectUsedInNestedClass.kt")
      public void testPrivateCompanionObjectUsedInNestedClass() {
        runTest("compiler/testData/codegen/box/objects/companionObjectAccess/privateCompanionObjectUsedInNestedClass.kt");
      }

      @TestMetadata("protectedCompanionObjectAccessedFromNestedClass.kt")
      public void testProtectedCompanionObjectAccessedFromNestedClass() {
        runTest("compiler/testData/codegen/box/objects/companionObjectAccess/protectedCompanionObjectAccessedFromNestedClass.kt");
      }

      @TestMetadata("compiler/testData/codegen/box/objects/companionObjectAccess/multipleCompanionsWithAccessors")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class MultipleCompanionsWithAccessors extends AbstractLightAnalysisModeTest {
        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        @TestMetadata("accessFromInlineLambda.kt")
        public void testAccessFromInlineLambda() {
          runTest("compiler/testData/codegen/box/objects/companionObjectAccess/multipleCompanionsWithAccessors/accessFromInlineLambda.kt");
        }

        public void testAllFilesPresentInMultipleCompanionsWithAccessors() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/objects/companionObjectAccess/multipleCompanionsWithAccessors"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("anonymousObjectInPropertyInitializer.kt")
        public void testAnonymousObjectInPropertyInitializer() {
          runTest("compiler/testData/codegen/box/objects/companionObjectAccess/multipleCompanionsWithAccessors/anonymousObjectInPropertyInitializer.kt");
        }

        @TestMetadata("fromAnonymousObjectInNestedClass.kt")
        public void testFromAnonymousObjectInNestedClass() {
          runTest("compiler/testData/codegen/box/objects/companionObjectAccess/multipleCompanionsWithAccessors/fromAnonymousObjectInNestedClass.kt");
        }

        @TestMetadata("fromInitBlock.kt")
        public void testFromInitBlock() {
          runTest("compiler/testData/codegen/box/objects/companionObjectAccess/multipleCompanionsWithAccessors/fromInitBlock.kt");
        }

        @TestMetadata("fromInitBlockOfNestedClass.kt")
        public void testFromInitBlockOfNestedClass() {
          runTest("compiler/testData/codegen/box/objects/companionObjectAccess/multipleCompanionsWithAccessors/fromInitBlockOfNestedClass.kt");
        }

        @TestMetadata("fromInlineLambdaInNestedClass.kt")
        public void testFromInlineLambdaInNestedClass() {
          runTest("compiler/testData/codegen/box/objects/companionObjectAccess/multipleCompanionsWithAccessors/fromInlineLambdaInNestedClass.kt");
        }

        @TestMetadata("inheritedProtectedCompanionAndOwnPrivateCompanion.kt")
        public void testInheritedProtectedCompanionAndOwnPrivateCompanion() {
          runTest("compiler/testData/codegen/box/objects/companionObjectAccess/multipleCompanionsWithAccessors/inheritedProtectedCompanionAndOwnPrivateCompanion.kt");
        }

        @TestMetadata("inheritedProtectedCompanionsReferencedByName.kt")
        public void testInheritedProtectedCompanionsReferencedByName() {
          runTest("compiler/testData/codegen/box/objects/companionObjectAccess/multipleCompanionsWithAccessors/inheritedProtectedCompanionsReferencedByName.kt");
        }

        @TestMetadata("lambdaInPropertyInitializer.kt")
        public void testLambdaInPropertyInitializer() {
          runTest("compiler/testData/codegen/box/objects/companionObjectAccess/multipleCompanionsWithAccessors/lambdaInPropertyInitializer.kt");
        }

        @TestMetadata("twoInheritedProtectedCompanions.kt")
        public void testTwoInheritedProtectedCompanions() {
          runTest("compiler/testData/codegen/box/objects/companionObjectAccess/multipleCompanionsWithAccessors/twoInheritedProtectedCompanions.kt");
        }

        @TestMetadata("withCompanionObjectBase.kt")
        public void testWithCompanionObjectBase() {
          runTest("compiler/testData/codegen/box/objects/companionObjectAccess/multipleCompanionsWithAccessors/withCompanionObjectBase.kt");
        }

        @TestMetadata("withMultipleNestedCompanionObjectBases.kt")
        public void testWithMultipleNestedCompanionObjectBases() {
          runTest("compiler/testData/codegen/box/objects/companionObjectAccess/multipleCompanionsWithAccessors/withMultipleNestedCompanionObjectBases.kt");
        }
      }

      @TestMetadata("compiler/testData/codegen/box/objects/companionObjectAccess/primitiveCompanion")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class PrimitiveCompanion extends AbstractLightAnalysisModeTest {
        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        public void testAllFilesPresentInPrimitiveCompanion() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/objects/companionObjectAccess/primitiveCompanion"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("byteCompanionObject.kt")
        public void testByteCompanionObject() {
          runTest("compiler/testData/codegen/box/objects/companionObjectAccess/primitiveCompanion/byteCompanionObject.kt");
        }

        @TestMetadata("charCompanionObject.kt")
        public void testCharCompanionObject() {
          runTest("compiler/testData/codegen/box/objects/companionObjectAccess/primitiveCompanion/charCompanionObject.kt");
        }

        @TestMetadata("doubleCompanionObject.kt")
        public void testDoubleCompanionObject() {
          runTest("compiler/testData/codegen/box/objects/companionObjectAccess/primitiveCompanion/doubleCompanionObject.kt");
        }

        @TestMetadata("floatCompanionObject.kt")
        public void testFloatCompanionObject() {
          runTest("compiler/testData/codegen/box/objects/companionObjectAccess/primitiveCompanion/floatCompanionObject.kt");
        }

        @TestMetadata("intCompanionObject.kt")
        public void testIntCompanionObject() {
          runTest("compiler/testData/codegen/box/objects/companionObjectAccess/primitiveCompanion/intCompanionObject.kt");
        }

        @TestMetadata("longCompanionObject.kt")
        public void testLongCompanionObject() {
          runTest("compiler/testData/codegen/box/objects/companionObjectAccess/primitiveCompanion/longCompanionObject.kt");
        }

        @TestMetadata("shortCompanionObject.kt")
        public void testShortCompanionObject() {
          runTest("compiler/testData/codegen/box/objects/companionObjectAccess/primitiveCompanion/shortCompanionObject.kt");
        }
      }
    }
  }

  @TestMetadata("compiler/testData/codegen/box/operatorConventions")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class OperatorConventions extends AbstractLightAnalysisModeTest {
    @TestMetadata("augmentedAssigmentPlusLhsCount.kt")
    public void ignoreAugmentedAssigmentPlusLhsCount() {
      runTest("compiler/testData/codegen/box/operatorConventions/augmentedAssigmentPlusLhsCount.kt");
    }

    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInOperatorConventions() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/operatorConventions"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("annotatedAssignment.kt")
    public void testAnnotatedAssignment() {
      runTest("compiler/testData/codegen/box/operatorConventions/annotatedAssignment.kt");
    }

    @TestMetadata("assignToDotQualifiedWithSideEffect.kt")
    public void testAssignToDotQualifiedWithSideEffect() {
      runTest("compiler/testData/codegen/box/operatorConventions/assignToDotQualifiedWithSideEffect.kt");
    }

    @TestMetadata("assignmentOperations.kt")
    public void testAssignmentOperations() {
      runTest("compiler/testData/codegen/box/operatorConventions/assignmentOperations.kt");
    }

    @TestMetadata("augmentedAssignmentInInitializer.kt")
    public void testAugmentedAssignmentInInitializer() {
      runTest("compiler/testData/codegen/box/operatorConventions/augmentedAssignmentInInitializer.kt");
    }

    @TestMetadata("augmentedAssignmentWithArrayLHS.kt")
    public void testAugmentedAssignmentWithArrayLHS() {
      runTest("compiler/testData/codegen/box/operatorConventions/augmentedAssignmentWithArrayLHS.kt");
    }

    @TestMetadata("BoundedGenericValueInRangeCheck.kt")
    public void testBoundedGenericValueInRangeCheck() {
      runTest("compiler/testData/codegen/box/operatorConventions/BoundedGenericValueInRangeCheck.kt");
    }

    @TestMetadata("genericArrayAccessCall.kt")
    public void testGenericArrayAccessCall() {
      runTest("compiler/testData/codegen/box/operatorConventions/genericArrayAccessCall.kt");
    }

    @TestMetadata("incDecOnObject.kt")
    public void testIncDecOnObject() {
      runTest("compiler/testData/codegen/box/operatorConventions/incDecOnObject.kt");
    }

    @TestMetadata("infixFunctionOverBuiltinMember.kt")
    public void testInfixFunctionOverBuiltinMember() {
      runTest("compiler/testData/codegen/box/operatorConventions/infixFunctionOverBuiltinMember.kt");
    }

    @TestMetadata("kt14201.kt")
    public void testKt14201() {
      runTest("compiler/testData/codegen/box/operatorConventions/kt14201.kt");
    }

    @TestMetadata("kt14201_2.kt")
    public void testKt14201_2() {
      runTest("compiler/testData/codegen/box/operatorConventions/kt14201_2.kt");
    }

    @TestMetadata("kt14227.kt")
    public void testKt14227() {
      runTest("compiler/testData/codegen/box/operatorConventions/kt14227.kt");
    }

    @TestMetadata("kt20387.kt")
    public void testKt20387() {
      runTest("compiler/testData/codegen/box/operatorConventions/kt20387.kt");
    }

    @TestMetadata("kt39880.kt")
    public void testKt39880() {
      runTest("compiler/testData/codegen/box/operatorConventions/kt39880.kt");
    }

    @TestMetadata("kt4152.kt")
    public void testKt4152() {
      runTest("compiler/testData/codegen/box/operatorConventions/kt4152.kt");
    }

    @TestMetadata("kt42722.kt")
    public void testKt42722() {
      runTest("compiler/testData/codegen/box/operatorConventions/kt42722.kt");
    }

    @TestMetadata("kt44647.kt")
    public void testKt44647() {
      runTest("compiler/testData/codegen/box/operatorConventions/kt44647.kt");
    }

    @TestMetadata("kt45022.kt")
    public void testKt45022() {
      runTest("compiler/testData/codegen/box/operatorConventions/kt45022.kt");
    }

    @TestMetadata("kt4987.kt")
    public void testKt4987() {
      runTest("compiler/testData/codegen/box/operatorConventions/kt4987.kt");
    }

    @TestMetadata("nestedMaps.kt")
    public void testNestedMaps() {
      runTest("compiler/testData/codegen/box/operatorConventions/nestedMaps.kt");
    }

    @TestMetadata("operatorSetLambda.kt")
    public void testOperatorSetLambda() {
      runTest("compiler/testData/codegen/box/operatorConventions/operatorSetLambda.kt");
    }

    @TestMetadata("overloadedSet.kt")
    public void testOverloadedSet() {
      runTest("compiler/testData/codegen/box/operatorConventions/overloadedSet.kt");
    }

    @TestMetadata("plusAssignWithComplexRHS.kt")
    public void testPlusAssignWithComplexRHS() {
      runTest("compiler/testData/codegen/box/operatorConventions/plusAssignWithComplexRHS.kt");
    }

    @TestMetadata("plusExplicit.kt")
    public void testPlusExplicit() {
      runTest("compiler/testData/codegen/box/operatorConventions/plusExplicit.kt");
    }

    @TestMetadata("reassignmentLhsCaching.kt")
    public void testReassignmentLhsCaching() {
      runTest("compiler/testData/codegen/box/operatorConventions/reassignmentLhsCaching.kt");
    }

    @TestMetadata("remAssignmentOperation.kt")
    public void testRemAssignmentOperation() {
      runTest("compiler/testData/codegen/box/operatorConventions/remAssignmentOperation.kt");
    }

    @TestMetadata("remOverModOperation.kt")
    public void testRemOverModOperation() {
      runTest("compiler/testData/codegen/box/operatorConventions/remOverModOperation.kt");
    }

    @TestMetadata("suspendOperators.kt")
    public void testSuspendOperators() {
      runTest("compiler/testData/codegen/box/operatorConventions/suspendOperators.kt");
    }

    @TestMetadata("untilOperator.kt")
    public void testUntilOperator() {
      runTest("compiler/testData/codegen/box/operatorConventions/untilOperator.kt");
    }

    @TestMetadata("compiler/testData/codegen/box/operatorConventions/compareTo")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class CompareTo extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInCompareTo() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/operatorConventions/compareTo"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("boolean.kt")
      public void testBoolean() {
        runTest("compiler/testData/codegen/box/operatorConventions/compareTo/boolean.kt");
      }

      @TestMetadata("comparable.kt")
      public void testComparable() {
        runTest("compiler/testData/codegen/box/operatorConventions/compareTo/comparable.kt");
      }

      @TestMetadata("customCompareTo.kt")
      public void testCustomCompareTo() {
        runTest("compiler/testData/codegen/box/operatorConventions/compareTo/customCompareTo.kt");
      }

      @TestMetadata("doubleInt.kt")
      public void testDoubleInt() {
        runTest("compiler/testData/codegen/box/operatorConventions/compareTo/doubleInt.kt");
      }

      @TestMetadata("doubleLong.kt")
      public void testDoubleLong() {
        runTest("compiler/testData/codegen/box/operatorConventions/compareTo/doubleLong.kt");
      }

      @TestMetadata("extensionArray.kt")
      public void testExtensionArray() {
        runTest("compiler/testData/codegen/box/operatorConventions/compareTo/extensionArray.kt");
      }

      @TestMetadata("extensionObject.kt")
      public void testExtensionObject() {
        runTest("compiler/testData/codegen/box/operatorConventions/compareTo/extensionObject.kt");
      }

      @TestMetadata("intDouble.kt")
      public void testIntDouble() {
        runTest("compiler/testData/codegen/box/operatorConventions/compareTo/intDouble.kt");
      }

      @TestMetadata("intLong.kt")
      public void testIntLong() {
        runTest("compiler/testData/codegen/box/operatorConventions/compareTo/intLong.kt");
      }

      @TestMetadata("longDouble.kt")
      public void testLongDouble() {
        runTest("compiler/testData/codegen/box/operatorConventions/compareTo/longDouble.kt");
      }

      @TestMetadata("longInt.kt")
      public void testLongInt() {
        runTest("compiler/testData/codegen/box/operatorConventions/compareTo/longInt.kt");
      }
    }
  }

  @TestMetadata("compiler/testData/codegen/box/optimizations")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Optimizations extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInOptimizations() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/optimizations"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("hashCode.kt")
    public void testHashCode() {
      runTest("compiler/testData/codegen/box/optimizations/hashCode.kt");
    }

    @TestMetadata("kt20844.kt")
    public void testKt20844() {
      runTest("compiler/testData/codegen/box/optimizations/kt20844.kt");
    }

    @TestMetadata("kt46921.kt")
    public void testKt46921() {
      runTest("compiler/testData/codegen/box/optimizations/kt46921.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/package")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Package extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInPackage() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/package"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("boxPrimitiveTypeInClinit.kt")
    public void testBoxPrimitiveTypeInClinit() {
      runTest("compiler/testData/codegen/box/package/boxPrimitiveTypeInClinit.kt");
    }

    @TestMetadata("checkCast.kt")
    public void testCheckCast() {
      runTest("compiler/testData/codegen/box/package/checkCast.kt");
    }

    @TestMetadata("incrementProperty.kt")
    public void testIncrementProperty() {
      runTest("compiler/testData/codegen/box/package/incrementProperty.kt");
    }

    @TestMetadata("initializationOrder.kt")
    public void testInitializationOrder() {
      runTest("compiler/testData/codegen/box/package/initializationOrder.kt");
    }

    @TestMetadata("invokespecial.kt")
    public void testInvokespecial() {
      runTest("compiler/testData/codegen/box/package/invokespecial.kt");
    }

    @TestMetadata("kt57353.kt")
    public void testKt57353() {
      runTest("compiler/testData/codegen/box/package/kt57353.kt");
    }

    @TestMetadata("kt62017.kt")
    public void testKt62017() {
      runTest("compiler/testData/codegen/box/package/kt62017.kt");
    }

    @TestMetadata("mainInFiles.kt")
    public void testMainInFiles() {
      runTest("compiler/testData/codegen/box/package/mainInFiles.kt");
    }

    @TestMetadata("nullablePrimitiveNoFieldInitializer.kt")
    public void testNullablePrimitiveNoFieldInitializer() {
      runTest("compiler/testData/codegen/box/package/nullablePrimitiveNoFieldInitializer.kt");
    }

    @TestMetadata("packageLocalClassNotImportedWithDefaultImport.kt")
    public void testPackageLocalClassNotImportedWithDefaultImport() {
      runTest("compiler/testData/codegen/box/package/packageLocalClassNotImportedWithDefaultImport.kt");
    }

    @TestMetadata("packageOrNestedClass.kt")
    public void testPackageOrNestedClass() {
      runTest("compiler/testData/codegen/box/package/packageOrNestedClass.kt");
    }

    @TestMetadata("packageQualifiedMethod.kt")
    public void testPackageQualifiedMethod() {
      runTest("compiler/testData/codegen/box/package/packageQualifiedMethod.kt");
    }

    @TestMetadata("privateMembersInImportList.kt")
    public void testPrivateMembersInImportList() {
      runTest("compiler/testData/codegen/box/package/privateMembersInImportList.kt");
    }

    @TestMetadata("privateTopLevelPropAndVarInInner.kt")
    public void testPrivateTopLevelPropAndVarInInner() {
      runTest("compiler/testData/codegen/box/package/privateTopLevelPropAndVarInInner.kt");
    }

    @TestMetadata("referenceWithTheSameNameAsPackage.kt")
    public void testReferenceWithTheSameNameAsPackage() {
      runTest("compiler/testData/codegen/box/package/referenceWithTheSameNameAsPackage.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/parametersMetadata")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class ParametersMetadata extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInParametersMetadata() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/parametersMetadata"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("defaultImpls.kt")
    public void testDefaultImpls() {
      runTest("compiler/testData/codegen/box/parametersMetadata/defaultImpls.kt");
    }

    @TestMetadata("delegation.kt")
    public void testDelegation() {
      runTest("compiler/testData/codegen/box/parametersMetadata/delegation.kt");
    }

    @TestMetadata("enum.kt")
    public void testEnum() {
      runTest("compiler/testData/codegen/box/parametersMetadata/enum.kt");
    }

    @TestMetadata("extensionFunction.kt")
    public void testExtensionFunction() {
      runTest("compiler/testData/codegen/box/parametersMetadata/extensionFunction.kt");
    }

    @TestMetadata("function.kt")
    public void testFunction() {
      runTest("compiler/testData/codegen/box/parametersMetadata/function.kt");
    }

    @TestMetadata("inlineClassMethodParameterModifiers.kt")
    public void testInlineClassMethodParameterModifiers() {
      runTest("compiler/testData/codegen/box/parametersMetadata/inlineClassMethodParameterModifiers.kt");
    }

    @TestMetadata("inlineClassMethodParameterNames.kt")
    public void testInlineClassMethodParameterNames() {
      runTest("compiler/testData/codegen/box/parametersMetadata/inlineClassMethodParameterNames.kt");
    }

    @TestMetadata("innerClass.kt")
    public void testInnerClass() {
      runTest("compiler/testData/codegen/box/parametersMetadata/innerClass.kt");
    }

    @TestMetadata("jvmOverloads.kt")
    public void testJvmOverloads() {
      runTest("compiler/testData/codegen/box/parametersMetadata/jvmOverloads.kt");
    }

    @TestMetadata("kt40857_parameterizedExtensionReceiver.kt")
    public void testKt40857_parameterizedExtensionReceiver() {
      runTest("compiler/testData/codegen/box/parametersMetadata/kt40857_parameterizedExtensionReceiver.kt");
    }

    @TestMetadata("superParams.kt")
    public void testSuperParams() {
      runTest("compiler/testData/codegen/box/parametersMetadata/superParams.kt");
    }

    @TestMetadata("suspendFunction.kt")
    public void testSuspendFunction() {
      runTest("compiler/testData/codegen/box/parametersMetadata/suspendFunction.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/platformTypes")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class PlatformTypes extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInPlatformTypes() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/platformTypes"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("genericUnit.kt")
    public void testGenericUnit() {
      runTest("compiler/testData/codegen/box/platformTypes/genericUnit.kt");
    }

    @TestMetadata("inferenceFlexibleTToNullable.kt")
    public void testInferenceFlexibleTToNullable() {
      runTest("compiler/testData/codegen/box/platformTypes/inferenceFlexibleTToNullable.kt");
    }

    @TestMetadata("kt14989.kt")
    public void testKt14989() {
      runTest("compiler/testData/codegen/box/platformTypes/kt14989.kt");
    }

    @TestMetadata("kt47785.kt")
    public void testKt47785() {
      runTest("compiler/testData/codegen/box/platformTypes/kt47785.kt");
    }

    @TestMetadata("kt49209.kt")
    public void testKt49209() {
      runTest("compiler/testData/codegen/box/platformTypes/kt49209.kt");
    }

    @TestMetadata("rawTypeWithNestedClass.kt")
    public void testRawTypeWithNestedClass() {
      runTest("compiler/testData/codegen/box/platformTypes/rawTypeWithNestedClass.kt");
    }

    @TestMetadata("specializedMapFull.kt")
    public void testSpecializedMapFull() {
      runTest("compiler/testData/codegen/box/platformTypes/specializedMapFull.kt");
    }

    @TestMetadata("specializedMapPut.kt")
    public void testSpecializedMapPut() {
      runTest("compiler/testData/codegen/box/platformTypes/specializedMapPut.kt");
    }

    @TestMetadata("stopComputingOnInterdependentTypeParameters.kt")
    public void testStopComputingOnInterdependentTypeParameters() {
      runTest("compiler/testData/codegen/box/platformTypes/stopComputingOnInterdependentTypeParameters.kt");
    }

    @TestMetadata("unsafeNullCheck.kt")
    public void testUnsafeNullCheck() {
      runTest("compiler/testData/codegen/box/platformTypes/unsafeNullCheck.kt");
    }

    @TestMetadata("unsafeNullCheckWithPrimitive.kt")
    public void testUnsafeNullCheckWithPrimitive() {
      runTest("compiler/testData/codegen/box/platformTypes/unsafeNullCheckWithPrimitive.kt");
    }

    @TestMetadata("compiler/testData/codegen/box/platformTypes/primitives")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Primitives extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInPrimitives() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/platformTypes/primitives"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("assign.kt")
      public void testAssign() {
        runTest("compiler/testData/codegen/box/platformTypes/primitives/assign.kt");
      }

      @TestMetadata("compareTo.kt")
      public void testCompareTo() {
        runTest("compiler/testData/codegen/box/platformTypes/primitives/compareTo.kt");
      }

      @TestMetadata("dec.kt")
      public void testDec() {
        runTest("compiler/testData/codegen/box/platformTypes/primitives/dec.kt");
      }

      @TestMetadata("div.kt")
      public void testDiv() {
        runTest("compiler/testData/codegen/box/platformTypes/primitives/div.kt");
      }

      @TestMetadata("equals.kt")
      public void testEquals() {
        runTest("compiler/testData/codegen/box/platformTypes/primitives/equals.kt");
      }

      @TestMetadata("equalsNull.kt")
      public void testEqualsNull() {
        runTest("compiler/testData/codegen/box/platformTypes/primitives/equalsNull.kt");
      }

      @TestMetadata("hashCode.kt")
      public void testHashCode() {
        runTest("compiler/testData/codegen/box/platformTypes/primitives/hashCode.kt");
      }

      @TestMetadata("identityEquals.kt")
      public void testIdentityEquals() {
        runTest("compiler/testData/codegen/box/platformTypes/primitives/identityEquals.kt");
      }

      @TestMetadata("inc.kt")
      public void testInc() {
        runTest("compiler/testData/codegen/box/platformTypes/primitives/inc.kt");
      }

      @TestMetadata("minus.kt")
      public void testMinus() {
        runTest("compiler/testData/codegen/box/platformTypes/primitives/minus.kt");
      }

      @TestMetadata("mod.kt")
      public void testMod() {
        runTest("compiler/testData/codegen/box/platformTypes/primitives/mod.kt");
      }

      @TestMetadata("not.kt")
      public void testNot() {
        runTest("compiler/testData/codegen/box/platformTypes/primitives/not.kt");
      }

      @TestMetadata("notEquals.kt")
      public void testNotEquals() {
        runTest("compiler/testData/codegen/box/platformTypes/primitives/notEquals.kt");
      }

      @TestMetadata("plus.kt")
      public void testPlus() {
        runTest("compiler/testData/codegen/box/platformTypes/primitives/plus.kt");
      }

      @TestMetadata("plusAssign.kt")
      public void testPlusAssign() {
        runTest("compiler/testData/codegen/box/platformTypes/primitives/plusAssign.kt");
      }

      @TestMetadata("rangeTo.kt")
      public void testRangeTo() {
        runTest("compiler/testData/codegen/box/platformTypes/primitives/rangeTo.kt");
      }

      @TestMetadata("times.kt")
      public void testTimes() {
        runTest("compiler/testData/codegen/box/platformTypes/primitives/times.kt");
      }

      @TestMetadata("toShort.kt")
      public void testToShort() {
        runTest("compiler/testData/codegen/box/platformTypes/primitives/toShort.kt");
      }

      @TestMetadata("toString.kt")
      public void testToString() {
        runTest("compiler/testData/codegen/box/platformTypes/primitives/toString.kt");
      }

      @TestMetadata("unaryMinus.kt")
      public void testUnaryMinus() {
        runTest("compiler/testData/codegen/box/platformTypes/primitives/unaryMinus.kt");
      }

      @TestMetadata("unaryPlus.kt")
      public void testUnaryPlus() {
        runTest("compiler/testData/codegen/box/platformTypes/primitives/unaryPlus.kt");
      }
    }
  }

  @TestMetadata("compiler/testData/codegen/box/polymorphicSignature")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class PolymorphicSignature extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInPolymorphicSignature() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/polymorphicSignature"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("anonymousSubclass.kt")
    public void testAnonymousSubclass() {
      runTest("compiler/testData/codegen/box/polymorphicSignature/anonymousSubclass.kt");
    }

    @TestMetadata("insideComplexExpression.kt")
    public void testInsideComplexExpression() {
      runTest("compiler/testData/codegen/box/polymorphicSignature/insideComplexExpression.kt");
    }

    @TestMetadata("insideIf.kt")
    public void testInsideIf() {
      runTest("compiler/testData/codegen/box/polymorphicSignature/insideIf.kt");
    }

    @TestMetadata("insideTry.kt")
    public void testInsideTry() {
      runTest("compiler/testData/codegen/box/polymorphicSignature/insideTry.kt");
    }

    @TestMetadata("insideWhen.kt")
    public void testInsideWhen() {
      runTest("compiler/testData/codegen/box/polymorphicSignature/insideWhen.kt");
    }

    @TestMetadata("invoke.kt")
    public void testInvoke() {
      runTest("compiler/testData/codegen/box/polymorphicSignature/invoke.kt");
    }

    @TestMetadata("invokeExact.kt")
    public void testInvokeExact() {
      runTest("compiler/testData/codegen/box/polymorphicSignature/invokeExact.kt");
    }

    @TestMetadata("invokeExactWithInlineClass.kt")
    public void testInvokeExactWithInlineClass() {
      runTest("compiler/testData/codegen/box/polymorphicSignature/invokeExactWithInlineClass.kt");
    }

    @TestMetadata("nullArgument.kt")
    public void testNullArgument() {
      runTest("compiler/testData/codegen/box/polymorphicSignature/nullArgument.kt");
    }

    @TestMetadata("varargOfObjects_after.kt")
    public void testVarargOfObjects_after() {
      runTest("compiler/testData/codegen/box/polymorphicSignature/varargOfObjects_after.kt");
    }

    @TestMetadata("varargOfObjects_before.kt")
    public void testVarargOfObjects_before() {
      runTest("compiler/testData/codegen/box/polymorphicSignature/varargOfObjects_before.kt");
    }

    @TestMetadata("voidReturnType.kt")
    public void testVoidReturnType() {
      runTest("compiler/testData/codegen/box/polymorphicSignature/voidReturnType.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/primitiveTypes")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class PrimitiveTypes extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInPrimitiveTypes() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/primitiveTypes"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("booleanHashCode.kt")
    public void testBooleanHashCode() {
      runTest("compiler/testData/codegen/box/primitiveTypes/booleanHashCode.kt");
    }

    @TestMetadata("charToByte.kt")
    public void testCharToByte() {
      runTest("compiler/testData/codegen/box/primitiveTypes/charToByte.kt");
    }

    @TestMetadata("comparisonWithNaN.kt")
    public void testComparisonWithNaN() {
      runTest("compiler/testData/codegen/box/primitiveTypes/comparisonWithNaN.kt");
    }

    @TestMetadata("comparisonWithNullCallsFun.kt")
    public void testComparisonWithNullCallsFun() {
      runTest("compiler/testData/codegen/box/primitiveTypes/comparisonWithNullCallsFun.kt");
    }

    @TestMetadata("conversions.kt")
    public void testConversions() {
      runTest("compiler/testData/codegen/box/primitiveTypes/conversions.kt");
    }

    @TestMetadata("ea35963.kt")
    public void testEa35963() {
      runTest("compiler/testData/codegen/box/primitiveTypes/ea35963.kt");
    }

    @TestMetadata("equalsHashCodeToString.kt")
    public void testEqualsHashCodeToString() {
      runTest("compiler/testData/codegen/box/primitiveTypes/equalsHashCodeToString.kt");
    }

    @TestMetadata("incrementByteCharShort.kt")
    public void testIncrementByteCharShort() {
      runTest("compiler/testData/codegen/box/primitiveTypes/incrementByteCharShort.kt");
    }

    @TestMetadata("intLiteralIsNotNull.kt")
    public void testIntLiteralIsNotNull() {
      runTest("compiler/testData/codegen/box/primitiveTypes/intLiteralIsNotNull.kt");
    }

    @TestMetadata("kt1054.kt")
    public void testKt1054() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt1054.kt");
    }

    @TestMetadata("kt1055.kt")
    public void testKt1055() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt1055.kt");
    }

    @TestMetadata("kt1093.kt")
    public void testKt1093() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt1093.kt");
    }

    @TestMetadata("kt13023.kt")
    public void testKt13023() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt13023.kt");
    }

    @TestMetadata("kt14868.kt")
    public void testKt14868() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt14868.kt");
    }

    @TestMetadata("kt1508.kt")
    public void testKt1508() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt1508.kt");
    }

    @TestMetadata("kt1634.kt")
    public void testKt1634() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt1634.kt");
    }

    @TestMetadata("kt16732.kt")
    public void testKt16732() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt16732.kt");
    }

    @TestMetadata("kt2251.kt")
    public void testKt2251() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt2251.kt");
    }

    @TestMetadata("kt2269.kt")
    public void testKt2269() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt2269.kt");
    }

    @TestMetadata("kt2269NotOptimizable.kt")
    public void testKt2269NotOptimizable() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt2269NotOptimizable.kt");
    }

    @TestMetadata("kt2275.kt")
    public void testKt2275() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt2275.kt");
    }

    @TestMetadata("kt239.kt")
    public void testKt239() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt239.kt");
    }

    @TestMetadata("kt242.kt")
    public void testKt242() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt242.kt");
    }

    @TestMetadata("kt243.kt")
    public void testKt243() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt243.kt");
    }

    @TestMetadata("kt248.kt")
    public void testKt248() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt248.kt");
    }

    @TestMetadata("kt2768.kt")
    public void testKt2768() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt2768.kt");
    }

    @TestMetadata("kt2794.kt")
    public void testKt2794() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt2794.kt");
    }

    @TestMetadata("kt3078.kt")
    public void testKt3078() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt3078.kt");
    }

    @TestMetadata("kt3517.kt")
    public void testKt3517() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt3517.kt");
    }

    @TestMetadata("kt3576.kt")
    public void testKt3576() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt3576.kt");
    }

    @TestMetadata("kt3613.kt")
    public void testKt3613() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt3613.kt");
    }

    @TestMetadata("kt36952_identityEqualsWithBooleanInLocalFunction.kt")
    public void testKt36952_identityEqualsWithBooleanInLocalFunction() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt36952_identityEqualsWithBooleanInLocalFunction.kt");
    }

    @TestMetadata("kt37505.kt")
    public void testKt37505() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt37505.kt");
    }

    @TestMetadata("kt4097.kt")
    public void testKt4097() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt4097.kt");
    }

    @TestMetadata("kt4098.kt")
    public void testKt4098() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt4098.kt");
    }

    @TestMetadata("kt4210.kt")
    public void testKt4210() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt4210.kt");
    }

    @TestMetadata("kt42415_javaClassOfLongLiteral.kt")
    public void testKt42415_javaClassOfLongLiteral() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt42415_javaClassOfLongLiteral.kt");
    }

    @TestMetadata("kt4251.kt")
    public void testKt4251() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt4251.kt");
    }

    @TestMetadata("kt446.kt")
    public void testKt446() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt446.kt");
    }

    @TestMetadata("kt46864_double.kt")
    public void testKt46864_double() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt46864_double.kt");
    }

    @TestMetadata("kt46864_long.kt")
    public void testKt46864_long() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt46864_long.kt");
    }

    @TestMetadata("kt48659_identityEqualsWithCastToAny.kt")
    public void testKt48659_identityEqualsWithCastToAny() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt48659_identityEqualsWithCastToAny.kt");
    }

    @TestMetadata("kt518.kt")
    public void testKt518() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt518.kt");
    }

    @TestMetadata("kt6590_identityEquals.kt")
    public void testKt6590_identityEquals() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt6590_identityEquals.kt");
    }

    @TestMetadata("kt665.kt")
    public void testKt665() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt665.kt");
    }

    @TestMetadata("kt684.kt")
    public void testKt684() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt684.kt");
    }

    @TestMetadata("kt711.kt")
    public void testKt711() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt711.kt");
    }

    @TestMetadata("kt737.kt")
    public void testKt737() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt737.kt");
    }

    @TestMetadata("kt752.kt")
    public void testKt752() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt752.kt");
    }

    @TestMetadata("kt753.kt")
    public void testKt753() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt753.kt");
    }

    @TestMetadata("kt756.kt")
    public void testKt756() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt756.kt");
    }

    @TestMetadata("kt757.kt")
    public void testKt757() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt757.kt");
    }

    @TestMetadata("kt828.kt")
    public void testKt828() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt828.kt");
    }

    @TestMetadata("kt877.kt")
    public void testKt877() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt877.kt");
    }

    @TestMetadata("kt882.kt")
    public void testKt882() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt882.kt");
    }

    @TestMetadata("kt887.kt")
    public void testKt887() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt887.kt");
    }

    @TestMetadata("kt935.kt")
    public void testKt935() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt935.kt");
    }

    @TestMetadata("nullAsNullableIntIsNull.kt")
    public void testNullAsNullableIntIsNull() {
      runTest("compiler/testData/codegen/box/primitiveTypes/nullAsNullableIntIsNull.kt");
    }

    @TestMetadata("nullableAsIndex.kt")
    public void testNullableAsIndex() {
      runTest("compiler/testData/codegen/box/primitiveTypes/nullableAsIndex.kt");
    }

    @TestMetadata("nullableCharBoolean.kt")
    public void testNullableCharBoolean() {
      runTest("compiler/testData/codegen/box/primitiveTypes/nullableCharBoolean.kt");
    }

    @TestMetadata("number.kt")
    public void testNumber() {
      runTest("compiler/testData/codegen/box/primitiveTypes/number.kt");
    }

    @TestMetadata("numberEqualsHashCodeToString.kt")
    public void testNumberEqualsHashCodeToString() {
      runTest("compiler/testData/codegen/box/primitiveTypes/numberEqualsHashCodeToString.kt");
    }

    @TestMetadata("rangeTo.kt")
    public void testRangeTo() {
      runTest("compiler/testData/codegen/box/primitiveTypes/rangeTo.kt");
    }

    @TestMetadata("reassignDestructured.kt")
    public void testReassignDestructured() {
      runTest("compiler/testData/codegen/box/primitiveTypes/reassignDestructured.kt");
    }

    @TestMetadata("stringEqualsHashCodeToString.kt")
    public void testStringEqualsHashCodeToString() {
      runTest("compiler/testData/codegen/box/primitiveTypes/stringEqualsHashCodeToString.kt");
    }

    @TestMetadata("substituteIntForGeneric.kt")
    public void testSubstituteIntForGeneric() {
      runTest("compiler/testData/codegen/box/primitiveTypes/substituteIntForGeneric.kt");
    }

    @TestMetadata("unboxComparable.kt")
    public void testUnboxComparable() {
      runTest("compiler/testData/codegen/box/primitiveTypes/unboxComparable.kt");
    }

    @TestMetadata("compiler/testData/codegen/box/primitiveTypes/equalityWithObject")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class EqualityWithObject extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInEqualityWithObject() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/primitiveTypes/equalityWithObject"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("boxedEqPrimitiveEvaluationOrder.kt")
      public void testBoxedEqPrimitiveEvaluationOrder() {
        runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/boxedEqPrimitiveEvaluationOrder.kt");
      }

      @TestMetadata("boxedLongEqualsLong.kt")
      public void testBoxedLongEqualsLong() {
        runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/boxedLongEqualsLong.kt");
      }

      @TestMetadata("intEqualsNull.kt")
      public void testIntEqualsNull() {
        runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/intEqualsNull.kt");
      }

      @TestMetadata("intEqualsNullableInt.kt")
      public void testIntEqualsNullableInt() {
        runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/intEqualsNullableInt.kt");
      }

      @TestMetadata("intEqualsNullableIntWithSmartCasts.kt")
      public void testIntEqualsNullableIntWithSmartCasts() {
        runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/intEqualsNullableIntWithSmartCasts.kt");
      }

      @TestMetadata("kt42281.kt")
      public void testKt42281() {
        runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/kt42281.kt");
      }

      @TestMetadata("objectWithAsymmetricEqualsEqPrimitive.kt")
      public void testObjectWithAsymmetricEqualsEqPrimitive() {
        runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/objectWithAsymmetricEqualsEqPrimitive.kt");
      }

      @TestMetadata("whenIntAsNullableAny.kt")
      public void testWhenIntAsNullableAny() {
        runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/whenIntAsNullableAny.kt");
      }

      @TestMetadata("whenNullableBoxed.kt")
      public void testWhenNullableBoxed() {
        runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/whenNullableBoxed.kt");
      }

      @TestMetadata("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class Generated extends AbstractLightAnalysisModeTest {
        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        public void testAllFilesPresentInGenerated() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("boxedEqPrimitiveBoolean.kt")
        public void testBoxedEqPrimitiveBoolean() {
          runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated/boxedEqPrimitiveBoolean.kt");
        }

        @TestMetadata("boxedEqPrimitiveByte.kt")
        public void testBoxedEqPrimitiveByte() {
          runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated/boxedEqPrimitiveByte.kt");
        }

        @TestMetadata("boxedEqPrimitiveChar.kt")
        public void testBoxedEqPrimitiveChar() {
          runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated/boxedEqPrimitiveChar.kt");
        }

        @TestMetadata("boxedEqPrimitiveInt.kt")
        public void testBoxedEqPrimitiveInt() {
          runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated/boxedEqPrimitiveInt.kt");
        }

        @TestMetadata("boxedEqPrimitiveLong.kt")
        public void testBoxedEqPrimitiveLong() {
          runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated/boxedEqPrimitiveLong.kt");
        }

        @TestMetadata("boxedEqPrimitiveShort.kt")
        public void testBoxedEqPrimitiveShort() {
          runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated/boxedEqPrimitiveShort.kt");
        }

        @TestMetadata("primitiveEqBoxedBoolean.kt")
        public void testPrimitiveEqBoxedBoolean() {
          runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated/primitiveEqBoxedBoolean.kt");
        }

        @TestMetadata("primitiveEqBoxedByte.kt")
        public void testPrimitiveEqBoxedByte() {
          runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated/primitiveEqBoxedByte.kt");
        }

        @TestMetadata("primitiveEqBoxedChar.kt")
        public void testPrimitiveEqBoxedChar() {
          runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated/primitiveEqBoxedChar.kt");
        }

        @TestMetadata("primitiveEqBoxedInt.kt")
        public void testPrimitiveEqBoxedInt() {
          runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated/primitiveEqBoxedInt.kt");
        }

        @TestMetadata("primitiveEqBoxedLong.kt")
        public void testPrimitiveEqBoxedLong() {
          runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated/primitiveEqBoxedLong.kt");
        }

        @TestMetadata("primitiveEqBoxedShort.kt")
        public void testPrimitiveEqBoxedShort() {
          runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated/primitiveEqBoxedShort.kt");
        }

        @TestMetadata("primitiveEqObjectBoolean.kt")
        public void testPrimitiveEqObjectBoolean() {
          runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated/primitiveEqObjectBoolean.kt");
        }

        @TestMetadata("primitiveEqObjectByte.kt")
        public void testPrimitiveEqObjectByte() {
          runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated/primitiveEqObjectByte.kt");
        }

        @TestMetadata("primitiveEqObjectChar.kt")
        public void testPrimitiveEqObjectChar() {
          runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated/primitiveEqObjectChar.kt");
        }

        @TestMetadata("primitiveEqObjectInt.kt")
        public void testPrimitiveEqObjectInt() {
          runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated/primitiveEqObjectInt.kt");
        }

        @TestMetadata("primitiveEqObjectLong.kt")
        public void testPrimitiveEqObjectLong() {
          runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated/primitiveEqObjectLong.kt");
        }

        @TestMetadata("primitiveEqObjectShort.kt")
        public void testPrimitiveEqObjectShort() {
          runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated/primitiveEqObjectShort.kt");
        }
      }
    }

    @TestMetadata("compiler/testData/codegen/box/primitiveTypes/numberToChar")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class NumberToChar extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      @TestMetadata("abstractMethodInSuperinterface.kt")
      public void testAbstractMethodInSuperinterface() {
        runTest("compiler/testData/codegen/box/primitiveTypes/numberToChar/abstractMethodInSuperinterface.kt");
      }

      public void testAllFilesPresentInNumberToChar() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/primitiveTypes/numberToChar"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("fakeOverride.kt")
      public void testFakeOverride() {
        runTest("compiler/testData/codegen/box/primitiveTypes/numberToChar/fakeOverride.kt");
      }

      @TestMetadata("javaSubclass.kt")
      public void testJavaSubclass() {
        runTest("compiler/testData/codegen/box/primitiveTypes/numberToChar/javaSubclass.kt");
      }

      @TestMetadata("simple.kt")
      public void testSimple() {
        runTest("compiler/testData/codegen/box/primitiveTypes/numberToChar/simple.kt");
      }

      @TestMetadata("superCallToClass.kt")
      public void testSuperCallToClass() {
        runTest("compiler/testData/codegen/box/primitiveTypes/numberToChar/superCallToClass.kt");
      }

      @TestMetadata("superCallToInterface.kt")
      public void testSuperCallToInterface() {
        runTest("compiler/testData/codegen/box/primitiveTypes/numberToChar/superCallToInterface.kt");
      }

      @TestMetadata("superCallToNumber.kt")
      public void testSuperCallToNumber() {
        runTest("compiler/testData/codegen/box/primitiveTypes/numberToChar/superCallToNumber.kt");
      }
    }
  }

  @TestMetadata("compiler/testData/codegen/box/private")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Private extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInPrivate() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/private"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("arrayConvention.kt")
    public void testArrayConvention() {
      runTest("compiler/testData/codegen/box/private/arrayConvention.kt");
    }

    @TestMetadata("kt9855.kt")
    public void testKt9855() {
      runTest("compiler/testData/codegen/box/private/kt9855.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/privateConstructors")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class PrivateConstructors extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInPrivateConstructors() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/privateConstructors"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("base.kt")
    public void testBase() {
      runTest("compiler/testData/codegen/box/privateConstructors/base.kt");
    }

    @TestMetadata("captured.kt")
    public void testCaptured() {
      runTest("compiler/testData/codegen/box/privateConstructors/captured.kt");
    }

    @TestMetadata("companion.kt")
    public void testCompanion() {
      runTest("compiler/testData/codegen/box/privateConstructors/companion.kt");
    }

    @TestMetadata("inline.kt")
    public void testInline() {
      runTest("compiler/testData/codegen/box/privateConstructors/inline.kt");
    }

    @TestMetadata("inner.kt")
    public void testInner() {
      runTest("compiler/testData/codegen/box/privateConstructors/inner.kt");
    }

    @TestMetadata("kt4860.kt")
    public void testKt4860() {
      runTest("compiler/testData/codegen/box/privateConstructors/kt4860.kt");
    }

    @TestMetadata("secondary.kt")
    public void testSecondary() {
      runTest("compiler/testData/codegen/box/privateConstructors/secondary.kt");
    }

    @TestMetadata("synthetic.kt")
    public void testSynthetic() {
      runTest("compiler/testData/codegen/box/privateConstructors/synthetic.kt");
    }

    @TestMetadata("withArguments.kt")
    public void testWithArguments() {
      runTest("compiler/testData/codegen/box/privateConstructors/withArguments.kt");
    }

    @TestMetadata("withDefault.kt")
    public void testWithDefault() {
      runTest("compiler/testData/codegen/box/privateConstructors/withDefault.kt");
    }

    @TestMetadata("withLinkedClasses.kt")
    public void testWithLinkedClasses() {
      runTest("compiler/testData/codegen/box/privateConstructors/withLinkedClasses.kt");
    }

    @TestMetadata("withLinkedObjects.kt")
    public void testWithLinkedObjects() {
      runTest("compiler/testData/codegen/box/privateConstructors/withLinkedObjects.kt");
    }

    @TestMetadata("withVarargs.kt")
    public void testWithVarargs() {
      runTest("compiler/testData/codegen/box/privateConstructors/withVarargs.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/properties")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Properties extends AbstractLightAnalysisModeTest {
    @TestMetadata("genericWithSameName.kt")
    public void ignoreGenericWithSameName() {
      runTest("compiler/testData/codegen/box/properties/genericWithSameName.kt");
    }

    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    @TestMetadata("accessToPrivateProperty.kt")
    public void testAccessToPrivateProperty() {
      runTest("compiler/testData/codegen/box/properties/accessToPrivateProperty.kt");
    }

    @TestMetadata("accessToPrivateSetter.kt")
    public void testAccessToPrivateSetter() {
      runTest("compiler/testData/codegen/box/properties/accessToPrivateSetter.kt");
    }

    @TestMetadata("accessorForProtectedPropertyWithPrivateSetter.kt")
    public void testAccessorForProtectedPropertyWithPrivateSetter() {
      runTest("compiler/testData/codegen/box/properties/accessorForProtectedPropertyWithPrivateSetter.kt");
    }

    @TestMetadata("accessorForProtectedPropertyWithPrivateSetterInObjectLiteral.kt")
    public void testAccessorForProtectedPropertyWithPrivateSetterInObjectLiteral() {
      runTest("compiler/testData/codegen/box/properties/accessorForProtectedPropertyWithPrivateSetterInObjectLiteral.kt");
    }

    @TestMetadata("accessorForProtectedPropertyWithPrivateSetterViaSuper.kt")
    public void testAccessorForProtectedPropertyWithPrivateSetterViaSuper() {
      runTest("compiler/testData/codegen/box/properties/accessorForProtectedPropertyWithPrivateSetterViaSuper.kt");
    }

    @TestMetadata("accessorForProtectedPropertyWithPrivateSetterWithIntermediateClass.kt")
    public void testAccessorForProtectedPropertyWithPrivateSetterWithIntermediateClass() {
      runTest("compiler/testData/codegen/box/properties/accessorForProtectedPropertyWithPrivateSetterWithIntermediateClass.kt");
    }

    public void testAllFilesPresentInProperties() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/properties"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("augmentedAssignmentsAndIncrements.kt")
    public void testAugmentedAssignmentsAndIncrements() {
      runTest("compiler/testData/codegen/box/properties/augmentedAssignmentsAndIncrements.kt");
    }

    @TestMetadata("classArtificialFieldInsideNested.kt")
    public void testClassArtificialFieldInsideNested() {
      runTest("compiler/testData/codegen/box/properties/classArtificialFieldInsideNested.kt");
    }

    @TestMetadata("classFieldInsideLambda.kt")
    public void testClassFieldInsideLambda() {
      runTest("compiler/testData/codegen/box/properties/classFieldInsideLambda.kt");
    }

    @TestMetadata("classFieldInsideLocalInSetter.kt")
    public void testClassFieldInsideLocalInSetter() {
      runTest("compiler/testData/codegen/box/properties/classFieldInsideLocalInSetter.kt");
    }

    @TestMetadata("classFieldInsideNested.kt")
    public void testClassFieldInsideNested() {
      runTest("compiler/testData/codegen/box/properties/classFieldInsideNested.kt");
    }

    @TestMetadata("classFieldInsideNestedLambda.kt")
    public void testClassFieldInsideNestedLambda() {
      runTest("compiler/testData/codegen/box/properties/classFieldInsideNestedLambda.kt");
    }

    @TestMetadata("classFieldInsideNestedNestedLambda.kt")
    public void testClassFieldInsideNestedNestedLambda() {
      runTest("compiler/testData/codegen/box/properties/classFieldInsideNestedNestedLambda.kt");
    }

    @TestMetadata("classObjectProperties.kt")
    public void testClassObjectProperties() {
      runTest("compiler/testData/codegen/box/properties/classObjectProperties.kt");
    }

    @TestMetadata("classPrivateArtificialFieldInsideNested.kt")
    public void testClassPrivateArtificialFieldInsideNested() {
      runTest("compiler/testData/codegen/box/properties/classPrivateArtificialFieldInsideNested.kt");
    }

    @TestMetadata("collectionSize.kt")
    public void testCollectionSize() {
      runTest("compiler/testData/codegen/box/properties/collectionSize.kt");
    }

    @TestMetadata("commonPropertiesKJK.kt")
    public void testCommonPropertiesKJK() {
      runTest("compiler/testData/codegen/box/properties/commonPropertiesKJK.kt");
    }

    @TestMetadata("companionFieldInsideLambda.kt")
    public void testCompanionFieldInsideLambda() {
      runTest("compiler/testData/codegen/box/properties/companionFieldInsideLambda.kt");
    }

    @TestMetadata("companionObjectAccessor.kt")
    public void testCompanionObjectAccessor() {
      runTest("compiler/testData/codegen/box/properties/companionObjectAccessor.kt");
    }

    @TestMetadata("companionObjectPropertiesFromJava.kt")
    public void testCompanionObjectPropertiesFromJava() {
      runTest("compiler/testData/codegen/box/properties/companionObjectPropertiesFromJava.kt");
    }

    @TestMetadata("companionPrivateField.kt")
    public void testCompanionPrivateField() {
      runTest("compiler/testData/codegen/box/properties/companionPrivateField.kt");
    }

    @TestMetadata("companionPrivateFieldInsideLambda.kt")
    public void testCompanionPrivateFieldInsideLambda() {
      runTest("compiler/testData/codegen/box/properties/companionPrivateFieldInsideLambda.kt");
    }

    @TestMetadata("complexPropertyInitializer.kt")
    public void testComplexPropertyInitializer() {
      runTest("compiler/testData/codegen/box/properties/complexPropertyInitializer.kt");
    }

    @TestMetadata("field.kt")
    public void testField() {
      runTest("compiler/testData/codegen/box/properties/field.kt");
    }

    @TestMetadata("fieldAccessFromExtensionInTraitImpl.kt")
    public void testFieldAccessFromExtensionInTraitImpl() {
      runTest("compiler/testData/codegen/box/properties/fieldAccessFromExtensionInTraitImpl.kt");
    }

    @TestMetadata("fieldAccessViaSubclass.kt")
    public void testFieldAccessViaSubclass() {
      runTest("compiler/testData/codegen/box/properties/fieldAccessViaSubclass.kt");
    }

    @TestMetadata("fieldInClass.kt")
    public void testFieldInClass() {
      runTest("compiler/testData/codegen/box/properties/fieldInClass.kt");
    }

    @TestMetadata("fieldInsideField.kt")
    public void testFieldInsideField() {
      runTest("compiler/testData/codegen/box/properties/fieldInsideField.kt");
    }

    @TestMetadata("fieldInsideLambda.kt")
    public void testFieldInsideLambda() {
      runTest("compiler/testData/codegen/box/properties/fieldInsideLambda.kt");
    }

    @TestMetadata("fieldInsideNested.kt")
    public void testFieldInsideNested() {
      runTest("compiler/testData/codegen/box/properties/fieldInsideNested.kt");
    }

    @TestMetadata("fieldSimple.kt")
    public void testFieldSimple() {
      runTest("compiler/testData/codegen/box/properties/fieldSimple.kt");
    }

    @TestMetadata("generalAccess.kt")
    public void testGeneralAccess() {
      runTest("compiler/testData/codegen/box/properties/generalAccess.kt");
    }

    @TestMetadata("genericPropertyMultiModule.kt")
    public void testGenericPropertyMultiModule() {
      runTest("compiler/testData/codegen/box/properties/genericPropertyMultiModule.kt");
    }

    @TestMetadata("initOrderMultiModule.kt")
    public void testInitOrderMultiModule() {
      runTest("compiler/testData/codegen/box/properties/initOrderMultiModule.kt");
    }

    @TestMetadata("initializerOfConstValWithConst.kt")
    public void testInitializerOfConstValWithConst() {
      runTest("compiler/testData/codegen/box/properties/initializerOfConstValWithConst.kt");
    }

    @TestMetadata("initializerOfConstValWithConstExpr.kt")
    public void testInitializerOfConstValWithConstExpr() {
      runTest("compiler/testData/codegen/box/properties/initializerOfConstValWithConstExpr.kt");
    }

    @TestMetadata("initializerOfValWithConstExpr.kt")
    public void testInitializerOfValWithConstExpr() {
      runTest("compiler/testData/codegen/box/properties/initializerOfValWithConstExpr.kt");
    }

    @TestMetadata("initializerOfValWithNonConstExpr.kt")
    public void testInitializerOfValWithNonConstExpr() {
      runTest("compiler/testData/codegen/box/properties/initializerOfValWithNonConstExpr.kt");
    }

    @TestMetadata("javaGenericSynthProperty.kt")
    public void testJavaGenericSynthProperty() {
      runTest("compiler/testData/codegen/box/properties/javaGenericSynthProperty.kt");
    }

    @TestMetadata("javaPropertyBoxedGetter.kt")
    public void testJavaPropertyBoxedGetter() {
      runTest("compiler/testData/codegen/box/properties/javaPropertyBoxedGetter.kt");
    }

    @TestMetadata("javaPropertyBoxedSetter.kt")
    public void testJavaPropertyBoxedSetter() {
      runTest("compiler/testData/codegen/box/properties/javaPropertyBoxedSetter.kt");
    }

    @TestMetadata("kt10715.kt")
    public void testKt10715() {
      runTest("compiler/testData/codegen/box/properties/kt10715.kt");
    }

    @TestMetadata("kt10729.kt")
    public void testKt10729() {
      runTest("compiler/testData/codegen/box/properties/kt10729.kt");
    }

    @TestMetadata("kt1159.kt")
    public void testKt1159() {
      runTest("compiler/testData/codegen/box/properties/kt1159.kt");
    }

    @TestMetadata("kt1165.kt")
    public void testKt1165() {
      runTest("compiler/testData/codegen/box/properties/kt1165.kt");
    }

    @TestMetadata("kt1168.kt")
    public void testKt1168() {
      runTest("compiler/testData/codegen/box/properties/kt1168.kt");
    }

    @TestMetadata("kt1170.kt")
    public void testKt1170() {
      runTest("compiler/testData/codegen/box/properties/kt1170.kt");
    }

    @TestMetadata("kt12200.kt")
    public void testKt12200() {
      runTest("compiler/testData/codegen/box/properties/kt12200.kt");
    }

    @TestMetadata("kt1398.kt")
    public void testKt1398() {
      runTest("compiler/testData/codegen/box/properties/kt1398.kt");
    }

    @TestMetadata("kt1417.kt")
    public void testKt1417() {
      runTest("compiler/testData/codegen/box/properties/kt1417.kt");
    }

    @TestMetadata("kt1482_2279.kt")
    public void testKt1482_2279() {
      runTest("compiler/testData/codegen/box/properties/kt1482_2279.kt");
    }

    @TestMetadata("kt1714.kt")
    public void testKt1714() {
      runTest("compiler/testData/codegen/box/properties/kt1714.kt");
    }

    @TestMetadata("kt1714_minimal.kt")
    public void testKt1714_minimal() {
      runTest("compiler/testData/codegen/box/properties/kt1714_minimal.kt");
    }

    @TestMetadata("kt1892.kt")
    public void testKt1892() {
      runTest("compiler/testData/codegen/box/properties/kt1892.kt");
    }

    @TestMetadata("kt2331.kt")
    public void testKt2331() {
      runTest("compiler/testData/codegen/box/properties/kt2331.kt");
    }

    @TestMetadata("kt257.kt")
    public void testKt257() {
      runTest("compiler/testData/codegen/box/properties/kt257.kt");
    }

    @TestMetadata("kt2655.kt")
    public void testKt2655() {
      runTest("compiler/testData/codegen/box/properties/kt2655.kt");
    }

    @TestMetadata("kt2786.kt")
    public void testKt2786() {
      runTest("compiler/testData/codegen/box/properties/kt2786.kt");
    }

    @TestMetadata("kt2892.kt")
    public void testKt2892() {
      runTest("compiler/testData/codegen/box/properties/kt2892.kt");
    }

    @TestMetadata("kt3118.kt")
    public void testKt3118() {
      runTest("compiler/testData/codegen/box/properties/kt3118.kt");
    }

    @TestMetadata("kt3524.kt")
    public void testKt3524() {
      runTest("compiler/testData/codegen/box/properties/kt3524.kt");
    }

    @TestMetadata("kt3551.kt")
    public void testKt3551() {
      runTest("compiler/testData/codegen/box/properties/kt3551.kt");
    }

    @TestMetadata("kt3556.kt")
    public void testKt3556() {
      runTest("compiler/testData/codegen/box/properties/kt3556.kt");
    }

    @TestMetadata("kt3930.kt")
    public void testKt3930() {
      runTest("compiler/testData/codegen/box/properties/kt3930.kt");
    }

    @TestMetadata("kt4140.kt")
    public void testKt4140() {
      runTest("compiler/testData/codegen/box/properties/kt4140.kt");
    }

    @TestMetadata("kt4252.kt")
    public void testKt4252() {
      runTest("compiler/testData/codegen/box/properties/kt4252.kt");
    }

    @TestMetadata("kt4252_2.kt")
    public void testKt4252_2() {
      runTest("compiler/testData/codegen/box/properties/kt4252_2.kt");
    }

    @TestMetadata("kt4340.kt")
    public void testKt4340() {
      runTest("compiler/testData/codegen/box/properties/kt4340.kt");
    }

    @TestMetadata("kt4373.kt")
    public void testKt4373() {
      runTest("compiler/testData/codegen/box/properties/kt4373.kt");
    }

    @TestMetadata("kt4383.kt")
    public void testKt4383() {
      runTest("compiler/testData/codegen/box/properties/kt4383.kt");
    }

    @TestMetadata("kt49203_lateinit.kt")
    public void testKt49203_lateinit() {
      runTest("compiler/testData/codegen/box/properties/kt49203_lateinit.kt");
    }

    @TestMetadata("kt49203_var.kt")
    public void testKt49203_var() {
      runTest("compiler/testData/codegen/box/properties/kt49203_var.kt");
    }

    @TestMetadata("kt613.kt")
    public void testKt613() {
      runTest("compiler/testData/codegen/box/properties/kt613.kt");
    }

    @TestMetadata("kt8928.kt")
    public void testKt8928() {
      runTest("compiler/testData/codegen/box/properties/kt8928.kt");
    }

    @TestMetadata("kt9603.kt")
    public void testKt9603() {
      runTest("compiler/testData/codegen/box/properties/kt9603.kt");
    }

    @TestMetadata("lazyInitialization.kt")
    public void testLazyInitialization() {
      runTest("compiler/testData/codegen/box/properties/lazyInitialization.kt");
    }

    @TestMetadata("lazyInitializationCyclicImports.kt")
    public void testLazyInitializationCyclicImports() {
      runTest("compiler/testData/codegen/box/properties/lazyInitializationCyclicImports.kt");
    }

    @TestMetadata("lazyInitializationMultiModule.kt")
    public void testLazyInitializationMultiModule() {
      runTest("compiler/testData/codegen/box/properties/lazyInitializationMultiModule.kt");
    }

    @TestMetadata("lazyInitializationOrder.kt")
    public void testLazyInitializationOrder() {
      runTest("compiler/testData/codegen/box/properties/lazyInitializationOrder.kt");
    }

    @TestMetadata("lazyInitializationSplitPerModule.kt")
    public void testLazyInitializationSplitPerModule() {
      runTest("compiler/testData/codegen/box/properties/lazyInitializationSplitPerModule.kt");
    }

    @TestMetadata("primitiveOverrideDefaultAccessor.kt")
    public void testPrimitiveOverrideDefaultAccessor() {
      runTest("compiler/testData/codegen/box/properties/primitiveOverrideDefaultAccessor.kt");
    }

    @TestMetadata("primitiveOverrideDelegateAccessor.kt")
    public void testPrimitiveOverrideDelegateAccessor() {
      runTest("compiler/testData/codegen/box/properties/primitiveOverrideDelegateAccessor.kt");
    }

    @TestMetadata("privateAccessorOfOverriddenProperty.kt")
    public void testPrivateAccessorOfOverriddenProperty() {
      runTest("compiler/testData/codegen/box/properties/privateAccessorOfOverriddenProperty.kt");
    }

    @TestMetadata("privatePropertyInConstructor.kt")
    public void testPrivatePropertyInConstructor() {
      runTest("compiler/testData/codegen/box/properties/privatePropertyInConstructor.kt");
    }

    @TestMetadata("PrivatePropertyOfComplexGenericFunctionType.kt")
    public void testPrivatePropertyOfComplexGenericFunctionType() {
      runTest("compiler/testData/codegen/box/properties/PrivatePropertyOfComplexGenericFunctionType.kt");
    }

    @TestMetadata("PrivatePropertyOfGenericContravariantFunctionType.kt")
    public void testPrivatePropertyOfGenericContravariantFunctionType() {
      runTest("compiler/testData/codegen/box/properties/PrivatePropertyOfGenericContravariantFunctionType.kt");
    }

    @TestMetadata("PrivatePropertyOfGenericCovariantFunctionType.kt")
    public void testPrivatePropertyOfGenericCovariantFunctionType() {
      runTest("compiler/testData/codegen/box/properties/PrivatePropertyOfGenericCovariantFunctionType.kt");
    }

    @TestMetadata("privatePropertyWithoutBackingField.kt")
    public void testPrivatePropertyWithoutBackingField() {
      runTest("compiler/testData/codegen/box/properties/privatePropertyWithoutBackingField.kt");
    }

    @TestMetadata("propertyInUpperCaseWithJava.kt")
    public void testPropertyInUpperCaseWithJava() {
      runTest("compiler/testData/codegen/box/properties/propertyInUpperCaseWithJava.kt");
    }

    @TestMetadata("protectedJavaFieldInInline.kt")
    public void testProtectedJavaFieldInInline() {
      runTest("compiler/testData/codegen/box/properties/protectedJavaFieldInInline.kt");
    }

    @TestMetadata("protectedJavaProperty.kt")
    public void testProtectedJavaProperty() {
      runTest("compiler/testData/codegen/box/properties/protectedJavaProperty.kt");
    }

    @TestMetadata("protectedJavaPropertyInCompanion.kt")
    public void testProtectedJavaPropertyInCompanion() {
      runTest("compiler/testData/codegen/box/properties/protectedJavaPropertyInCompanion.kt");
    }

    @TestMetadata("referenceToJavaFieldViaBridge.kt")
    public void testReferenceToJavaFieldViaBridge() {
      runTest("compiler/testData/codegen/box/properties/referenceToJavaFieldViaBridge.kt");
    }

    @TestMetadata("substituteJavaSuperField.kt")
    public void testSubstituteJavaSuperField() {
      runTest("compiler/testData/codegen/box/properties/substituteJavaSuperField.kt");
    }

    @TestMetadata("twoAnnotatedExtensionPropertiesWithoutBackingFields.kt")
    public void testTwoAnnotatedExtensionPropertiesWithoutBackingFields() {
      runTest("compiler/testData/codegen/box/properties/twoAnnotatedExtensionPropertiesWithoutBackingFields.kt");
    }

    @TestMetadata("typeInferredFromGetter.kt")
    public void testTypeInferredFromGetter() {
      runTest("compiler/testData/codegen/box/properties/typeInferredFromGetter.kt");
    }

    @TestMetadata("unreachableUninitializedProperty.kt")
    public void testUnreachableUninitializedProperty() {
      runTest("compiler/testData/codegen/box/properties/unreachableUninitializedProperty.kt");
    }

    @TestMetadata("compiler/testData/codegen/box/properties/backingField")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class BackingField extends AbstractLightAnalysisModeTest {
      @TestMetadata("backingFieldVisibility.kt")
      public void ignoreBackingFieldVisibility() {
        runTest("compiler/testData/codegen/box/properties/backingField/backingFieldVisibility.kt");
      }

      @TestMetadata("backingFieldWithSmartTypeParameters.kt")
      public void ignoreBackingFieldWithSmartTypeParameters() {
        runTest("compiler/testData/codegen/box/properties/backingField/backingFieldWithSmartTypeParameters.kt");
      }

      @TestMetadata("charSequenceWithBackingField1.kt")
      public void ignoreCharSequenceWithBackingField1() {
        runTest("compiler/testData/codegen/box/properties/backingField/charSequenceWithBackingField1.kt");
      }

      @TestMetadata("charSequenceWithBackingField2.kt")
      public void ignoreCharSequenceWithBackingField2() {
        runTest("compiler/testData/codegen/box/properties/backingField/charSequenceWithBackingField2.kt");
      }

      @TestMetadata("charSequenceWithBackingField3.kt")
      public void ignoreCharSequenceWithBackingField3() {
        runTest("compiler/testData/codegen/box/properties/backingField/charSequenceWithBackingField3.kt");
      }

      @TestMetadata("charSequenceWithBackingField4.kt")
      public void ignoreCharSequenceWithBackingField4() {
        runTest("compiler/testData/codegen/box/properties/backingField/charSequenceWithBackingField4.kt");
      }

      @TestMetadata("charSequenceWithBackingField5.kt")
      public void ignoreCharSequenceWithBackingField5() {
        runTest("compiler/testData/codegen/box/properties/backingField/charSequenceWithBackingField5.kt");
      }

      @TestMetadata("explicitBackingFieldInAnonymous.kt")
      public void ignoreExplicitBackingFieldInAnonymous() {
        runTest("compiler/testData/codegen/box/properties/backingField/explicitBackingFieldInAnonymous.kt");
      }

      @TestMetadata("getterReturnTypeWithBackingField.kt")
      public void ignoreGetterReturnTypeWithBackingField() {
        runTest("compiler/testData/codegen/box/properties/backingField/getterReturnTypeWithBackingField.kt");
      }

      @TestMetadata("independentBackingFieldType.kt")
      public void ignoreIndependentBackingFieldType() {
        runTest("compiler/testData/codegen/box/properties/backingField/independentBackingFieldType.kt");
      }

      @TestMetadata("lateinitBackingFields.kt")
      public void ignoreLateinitBackingFields() {
        runTest("compiler/testData/codegen/box/properties/backingField/lateinitBackingFields.kt");
      }

      @TestMetadata("overriddenPropertiesWithExplicitBackingFields.kt")
      public void ignoreOverriddenPropertiesWithExplicitBackingFields() {
        runTest("compiler/testData/codegen/box/properties/backingField/overriddenPropertiesWithExplicitBackingFields.kt");
      }

      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInBackingField() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/properties/backingField"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }
    }

    @TestMetadata("compiler/testData/codegen/box/properties/const")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Const extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInConst() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/properties/const"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("anotherFile.kt")
      public void testAnotherFile() {
        runTest("compiler/testData/codegen/box/properties/const/anotherFile.kt");
      }

      @TestMetadata("constFlags.kt")
      public void testConstFlags() {
        runTest("compiler/testData/codegen/box/properties/const/constFlags.kt");
      }

      @TestMetadata("constInObjectWithInit.kt")
      public void testConstInObjectWithInit() {
        runTest("compiler/testData/codegen/box/properties/const/constInObjectWithInit.kt");
      }

      @TestMetadata("constPropertyAccessor.kt")
      public void testConstPropertyAccessor() {
        runTest("compiler/testData/codegen/box/properties/const/constPropertyAccessor.kt");
      }

      @TestMetadata("constValInAnnotationDefault.kt")
      public void testConstValInAnnotationDefault() {
        runTest("compiler/testData/codegen/box/properties/const/constValInAnnotationDefault.kt");
      }

      @TestMetadata("fpNonConstValProperlyInitialized.kt")
      public void testFpNonConstValProperlyInitialized() {
        runTest("compiler/testData/codegen/box/properties/const/fpNonConstValProperlyInitialized.kt");
      }

      @TestMetadata("interfaceCompanion.kt")
      public void testInterfaceCompanion() {
        runTest("compiler/testData/codegen/box/properties/const/interfaceCompanion.kt");
      }

      @TestMetadata("intermoduleInlineConst.kt")
      public void testIntermoduleInlineConst() {
        runTest("compiler/testData/codegen/box/properties/const/intermoduleInlineConst.kt");
      }

      @TestMetadata("kt52970.kt")
      public void testKt52970() {
        runTest("compiler/testData/codegen/box/properties/const/kt52970.kt");
      }

      @TestMetadata("nonConstValsAreProperlyInitialized.kt")
      public void testNonConstValsAreProperlyInitialized() {
        runTest("compiler/testData/codegen/box/properties/const/nonConstValsAreProperlyInitialized.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/properties/lateinit")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Lateinit extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      @TestMetadata("accessor.kt")
      public void testAccessor() {
        runTest("compiler/testData/codegen/box/properties/lateinit/accessor.kt");
      }

      @TestMetadata("accessorException.kt")
      public void testAccessorException() {
        runTest("compiler/testData/codegen/box/properties/lateinit/accessorException.kt");
      }

      @TestMetadata("accessorExceptionPublic.kt")
      public void testAccessorExceptionPublic() {
        runTest("compiler/testData/codegen/box/properties/lateinit/accessorExceptionPublic.kt");
      }

      public void testAllFilesPresentInLateinit() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/properties/lateinit"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("exceptionField.kt")
      public void testExceptionField() {
        runTest("compiler/testData/codegen/box/properties/lateinit/exceptionField.kt");
      }

      @TestMetadata("exceptionGetter.kt")
      public void testExceptionGetter() {
        runTest("compiler/testData/codegen/box/properties/lateinit/exceptionGetter.kt");
      }

      @TestMetadata("kt30548.kt")
      public void testKt30548() {
        runTest("compiler/testData/codegen/box/properties/lateinit/kt30548.kt");
      }

      @TestMetadata("kt46267.kt")
      public void testKt46267() {
        runTest("compiler/testData/codegen/box/properties/lateinit/kt46267.kt");
      }

      @TestMetadata("localClass.kt")
      public void testLocalClass() {
        runTest("compiler/testData/codegen/box/properties/lateinit/localClass.kt");
      }

      @TestMetadata("nameClash.kt")
      public void testNameClash() {
        runTest("compiler/testData/codegen/box/properties/lateinit/nameClash.kt");
      }

      @TestMetadata("override.kt")
      public void testOverride() {
        runTest("compiler/testData/codegen/box/properties/lateinit/override.kt");
      }

      @TestMetadata("overrideException.kt")
      public void testOverrideException() {
        runTest("compiler/testData/codegen/box/properties/lateinit/overrideException.kt");
      }

      @TestMetadata("privateSetter.kt")
      public void testPrivateSetter() {
        runTest("compiler/testData/codegen/box/properties/lateinit/privateSetter.kt");
      }

      @TestMetadata("privateSetterFromLambda.kt")
      public void testPrivateSetterFromLambda() {
        runTest("compiler/testData/codegen/box/properties/lateinit/privateSetterFromLambda.kt");
      }

      @TestMetadata("privateSetterViaSubclass.kt")
      public void testPrivateSetterViaSubclass() {
        runTest("compiler/testData/codegen/box/properties/lateinit/privateSetterViaSubclass.kt");
      }

      @TestMetadata("privateVarInCompanion.kt")
      public void testPrivateVarInCompanion() {
        runTest("compiler/testData/codegen/box/properties/lateinit/privateVarInCompanion.kt");
      }

      @TestMetadata("simpleVar.kt")
      public void testSimpleVar() {
        runTest("compiler/testData/codegen/box/properties/lateinit/simpleVar.kt");
      }

      @TestMetadata("visibility.kt")
      public void testVisibility() {
        runTest("compiler/testData/codegen/box/properties/lateinit/visibility.kt");
      }

      @TestMetadata("compiler/testData/codegen/box/properties/lateinit/isInitializedAndDeinitialize")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class IsInitializedAndDeinitialize extends AbstractLightAnalysisModeTest {
        @TestMetadata("isInitializedMultiFile.kt")
        public void ignoreIsInitializedMultiFile() {
          runTest("compiler/testData/codegen/box/properties/lateinit/isInitializedAndDeinitialize/isInitializedMultiFile.kt");
        }

        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        public void testAllFilesPresentInIsInitializedAndDeinitialize() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/properties/lateinit/isInitializedAndDeinitialize"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("companionObjectField.kt")
        public void testCompanionObjectField() {
          runTest("compiler/testData/codegen/box/properties/lateinit/isInitializedAndDeinitialize/companionObjectField.kt");
        }

        @TestMetadata("emptyLhs.kt")
        public void testEmptyLhs() {
          runTest("compiler/testData/codegen/box/properties/lateinit/isInitializedAndDeinitialize/emptyLhs.kt");
        }

        @TestMetadata("innerSubclass.kt")
        public void testInnerSubclass() {
          runTest("compiler/testData/codegen/box/properties/lateinit/isInitializedAndDeinitialize/innerSubclass.kt");
        }

        @TestMetadata("jvmStatic.kt")
        public void testJvmStatic() {
          runTest("compiler/testData/codegen/box/properties/lateinit/isInitializedAndDeinitialize/jvmStatic.kt");
        }

        @TestMetadata("nonInlineLambda.kt")
        public void testNonInlineLambda() {
          runTest("compiler/testData/codegen/box/properties/lateinit/isInitializedAndDeinitialize/nonInlineLambda.kt");
        }

        @TestMetadata("propertyImportedFromObject.kt")
        public void testPropertyImportedFromObject() {
          runTest("compiler/testData/codegen/box/properties/lateinit/isInitializedAndDeinitialize/propertyImportedFromObject.kt");
        }

        @TestMetadata("sideEffects.kt")
        public void testSideEffects() {
          runTest("compiler/testData/codegen/box/properties/lateinit/isInitializedAndDeinitialize/sideEffects.kt");
        }

        @TestMetadata("simpleIsInitialized.kt")
        public void testSimpleIsInitialized() {
          runTest("compiler/testData/codegen/box/properties/lateinit/isInitializedAndDeinitialize/simpleIsInitialized.kt");
        }

        @TestMetadata("topLevelProperty.kt")
        public void testTopLevelProperty() {
          runTest("compiler/testData/codegen/box/properties/lateinit/isInitializedAndDeinitialize/topLevelProperty.kt");
        }
      }

      @TestMetadata("compiler/testData/codegen/box/properties/lateinit/local")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class Local extends AbstractLightAnalysisModeTest {
        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        public void testAllFilesPresentInLocal() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/properties/lateinit/local"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("capturedLocalLateinit.kt")
        public void testCapturedLocalLateinit() {
          runTest("compiler/testData/codegen/box/properties/lateinit/local/capturedLocalLateinit.kt");
        }

        @TestMetadata("kt23260.kt")
        public void testKt23260() {
          runTest("compiler/testData/codegen/box/properties/lateinit/local/kt23260.kt");
        }

        @TestMetadata("localLateinit.kt")
        public void testLocalLateinit() {
          runTest("compiler/testData/codegen/box/properties/lateinit/local/localLateinit.kt");
        }

        @TestMetadata("uninitializedCapturedMemberAccess.kt")
        public void testUninitializedCapturedMemberAccess() {
          runTest("compiler/testData/codegen/box/properties/lateinit/local/uninitializedCapturedMemberAccess.kt");
        }

        @TestMetadata("uninitializedCapturedRead.kt")
        public void testUninitializedCapturedRead() {
          runTest("compiler/testData/codegen/box/properties/lateinit/local/uninitializedCapturedRead.kt");
        }

        @TestMetadata("uninitializedMemberAccess.kt")
        public void testUninitializedMemberAccess() {
          runTest("compiler/testData/codegen/box/properties/lateinit/local/uninitializedMemberAccess.kt");
        }

        @TestMetadata("uninitializedRead.kt")
        public void testUninitializedRead() {
          runTest("compiler/testData/codegen/box/properties/lateinit/local/uninitializedRead.kt");
        }
      }

      @TestMetadata("compiler/testData/codegen/box/properties/lateinit/topLevel")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class TopLevel extends AbstractLightAnalysisModeTest {
        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        @TestMetadata("accessorException.kt")
        public void testAccessorException() {
          runTest("compiler/testData/codegen/box/properties/lateinit/topLevel/accessorException.kt");
        }

        @TestMetadata("accessorForTopLevelLateinit.kt")
        public void testAccessorForTopLevelLateinit() {
          runTest("compiler/testData/codegen/box/properties/lateinit/topLevel/accessorForTopLevelLateinit.kt");
        }

        public void testAllFilesPresentInTopLevel() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/properties/lateinit/topLevel"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("topLevelLateinit.kt")
        public void testTopLevelLateinit() {
          runTest("compiler/testData/codegen/box/properties/lateinit/topLevel/topLevelLateinit.kt");
        }

        @TestMetadata("uninitializedMemberAccess.kt")
        public void testUninitializedMemberAccess() {
          runTest("compiler/testData/codegen/box/properties/lateinit/topLevel/uninitializedMemberAccess.kt");
        }

        @TestMetadata("uninitializedRead.kt")
        public void testUninitializedRead() {
          runTest("compiler/testData/codegen/box/properties/lateinit/topLevel/uninitializedRead.kt");
        }
      }
    }
  }

  @TestMetadata("compiler/testData/codegen/box/propertyCallableReference")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class PropertyCallableReference extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInPropertyCallableReference() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/propertyCallableReference"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("dynamicReceiver.kt")
    public void testDynamicReceiver() {
      runTest("compiler/testData/codegen/box/propertyCallableReference/dynamicReceiver.kt");
    }

    @TestMetadata("multipleModules.kt")
    public void testMultipleModules() {
      runTest("compiler/testData/codegen/box/propertyCallableReference/multipleModules.kt");
    }

    @TestMetadata("valClass.kt")
    public void testValClass() {
      runTest("compiler/testData/codegen/box/propertyCallableReference/valClass.kt");
    }

    @TestMetadata("valExtension.kt")
    public void testValExtension() {
      runTest("compiler/testData/codegen/box/propertyCallableReference/valExtension.kt");
    }

    @TestMetadata("valModule.kt")
    public void testValModule() {
      runTest("compiler/testData/codegen/box/propertyCallableReference/valModule.kt");
    }

    @TestMetadata("varClass.kt")
    public void testVarClass() {
      runTest("compiler/testData/codegen/box/propertyCallableReference/varClass.kt");
    }

    @TestMetadata("varExtension.kt")
    public void testVarExtension() {
      runTest("compiler/testData/codegen/box/propertyCallableReference/varExtension.kt");
    }

    @TestMetadata("varModule.kt")
    public void testVarModule() {
      runTest("compiler/testData/codegen/box/propertyCallableReference/varModule.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/publishedApi")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class PublishedApi extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInPublishedApi() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/publishedApi"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("doNotOverrideFromAnotherModule.kt")
    public void testDoNotOverrideFromAnotherModule() {
      runTest("compiler/testData/codegen/box/publishedApi/doNotOverrideFromAnotherModule.kt");
    }

    @TestMetadata("inlineFromFriendModule.kt")
    public void testInlineFromFriendModule() {
      runTest("compiler/testData/codegen/box/publishedApi/inlineFromFriendModule.kt");
    }

    @TestMetadata("noMangling.kt")
    public void testNoMangling() {
      runTest("compiler/testData/codegen/box/publishedApi/noMangling.kt");
    }

    @TestMetadata("simple.kt")
    public void testSimple() {
      runTest("compiler/testData/codegen/box/publishedApi/simple.kt");
    }

    @TestMetadata("topLevel.kt")
    public void testTopLevel() {
      runTest("compiler/testData/codegen/box/publishedApi/topLevel.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/ranges")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Ranges extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInRanges() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true, "stepped");
    }

    @TestMetadata("capturedLoopVar.kt")
    public void testCapturedLoopVar() {
      runTest("compiler/testData/codegen/box/ranges/capturedLoopVar.kt");
    }

    @TestMetadata("forByteProgressionWithIntIncrement.kt")
    public void testForByteProgressionWithIntIncrement() {
      runTest("compiler/testData/codegen/box/ranges/forByteProgressionWithIntIncrement.kt");
    }

    @TestMetadata("forInCharSequenceLengthDecreasedInLoopBody.kt")
    public void testForInCharSequenceLengthDecreasedInLoopBody() {
      runTest("compiler/testData/codegen/box/ranges/forInCharSequenceLengthDecreasedInLoopBody.kt");
    }

    @TestMetadata("forInCharSequenceLengthIncreasedInLoopBody.kt")
    public void testForInCharSequenceLengthIncreasedInLoopBody() {
      runTest("compiler/testData/codegen/box/ranges/forInCharSequenceLengthIncreasedInLoopBody.kt");
    }

    @TestMetadata("forInCharSequenceWithCustomIterator.kt")
    public void testForInCharSequenceWithCustomIterator() {
      runTest("compiler/testData/codegen/box/ranges/forInCharSequenceWithCustomIterator.kt");
    }

    @TestMetadata("forInCharSequenceWithMultipleGetFunctions.kt")
    public void testForInCharSequenceWithMultipleGetFunctions() {
      runTest("compiler/testData/codegen/box/ranges/forInCharSequenceWithMultipleGetFunctions.kt");
    }

    @TestMetadata("forInCustomCharSequence.kt")
    public void testForInCustomCharSequence() {
      runTest("compiler/testData/codegen/box/ranges/forInCustomCharSequence.kt");
    }

    @TestMetadata("forInCustomIterable.kt")
    public void testForInCustomIterable() {
      runTest("compiler/testData/codegen/box/ranges/forInCustomIterable.kt");
    }

    @TestMetadata("forInDoubleRangeWithCustomIterator.kt")
    public void testForInDoubleRangeWithCustomIterator() {
      runTest("compiler/testData/codegen/box/ranges/forInDoubleRangeWithCustomIterator.kt");
    }

    @TestMetadata("forInFloatRangeWithCustomIterator.kt")
    public void testForInFloatRangeWithCustomIterator() {
      runTest("compiler/testData/codegen/box/ranges/forInFloatRangeWithCustomIterator.kt");
    }

    @TestMetadata("forInIntRangeToConstWithBreak.kt")
    public void testForInIntRangeToConstWithBreak() {
      runTest("compiler/testData/codegen/box/ranges/forInIntRangeToConstWithBreak.kt");
    }

    @TestMetadata("forInIntRangeToConstWithContinue.kt")
    public void testForInIntRangeToConstWithContinue() {
      runTest("compiler/testData/codegen/box/ranges/forInIntRangeToConstWithContinue.kt");
    }

    @TestMetadata("forInRangeLiteralWithMixedTypeBounds.kt")
    public void testForInRangeLiteralWithMixedTypeBounds() {
      runTest("compiler/testData/codegen/box/ranges/forInRangeLiteralWithMixedTypeBounds.kt");
    }

    @TestMetadata("forInRangeWithImplicitReceiver.kt")
    public void testForInRangeWithImplicitReceiver() {
      runTest("compiler/testData/codegen/box/ranges/forInRangeWithImplicitReceiver.kt");
    }

    @TestMetadata("forInRangeWithUpperBoundMinus1.kt")
    public void testForInRangeWithUpperBoundMinus1() {
      runTest("compiler/testData/codegen/box/ranges/forInRangeWithUpperBoundMinus1.kt");
    }

    @TestMetadata("forInStringVarUpdatedInLoopBody.kt")
    public void testForInStringVarUpdatedInLoopBody() {
      runTest("compiler/testData/codegen/box/ranges/forInStringVarUpdatedInLoopBody.kt");
    }

    @TestMetadata("forInStringWithCustomIterator.kt")
    public void testForInStringWithCustomIterator() {
      runTest("compiler/testData/codegen/box/ranges/forInStringWithCustomIterator.kt");
    }

    @TestMetadata("forIntRange.kt")
    public void testForIntRange() {
      runTest("compiler/testData/codegen/box/ranges/forIntRange.kt");
    }

    @TestMetadata("forNullableIntInRangeWithImplicitReceiver.kt")
    public void testForNullableIntInRangeWithImplicitReceiver() {
      runTest("compiler/testData/codegen/box/ranges/forNullableIntInRangeWithImplicitReceiver.kt");
    }

    @TestMetadata("kt37370.kt")
    public void testKt37370() {
      runTest("compiler/testData/codegen/box/ranges/kt37370.kt");
    }

    @TestMetadata("kt37370a.kt")
    public void testKt37370a() {
      runTest("compiler/testData/codegen/box/ranges/kt37370a.kt");
    }

    @TestMetadata("kt47492.kt")
    public void testKt47492() {
      runTest("compiler/testData/codegen/box/ranges/kt47492.kt");
    }

    @TestMetadata("kt47492a.kt")
    public void testKt47492a() {
      runTest("compiler/testData/codegen/box/ranges/kt47492a.kt");
    }

    @TestMetadata("kt47492b.kt")
    public void testKt47492b() {
      runTest("compiler/testData/codegen/box/ranges/kt47492b.kt");
    }

    @TestMetadata("multiAssignmentIterationOverIntRange.kt")
    public void testMultiAssignmentIterationOverIntRange() {
      runTest("compiler/testData/codegen/box/ranges/multiAssignmentIterationOverIntRange.kt");
    }

    @TestMetadata("safeCallRangeTo.kt")
    public void testSafeCallRangeTo() {
      runTest("compiler/testData/codegen/box/ranges/safeCallRangeTo.kt");
    }

    @TestMetadata("compiler/testData/codegen/box/ranges/contains")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Contains extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInContains() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/contains"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("charInCharRangeWithPossibleOverflow.kt")
      public void testCharInCharRangeWithPossibleOverflow() {
        runTest("compiler/testData/codegen/box/ranges/contains/charInCharRangeWithPossibleOverflow.kt");
      }

      @TestMetadata("comparisonWithRangeBoundEliminated.kt")
      public void testComparisonWithRangeBoundEliminated() {
        runTest("compiler/testData/codegen/box/ranges/contains/comparisonWithRangeBoundEliminated.kt");
      }

      @TestMetadata("evaluationOrderForCollection.kt")
      public void testEvaluationOrderForCollection() {
        runTest("compiler/testData/codegen/box/ranges/contains/evaluationOrderForCollection.kt");
      }

      @TestMetadata("evaluationOrderForComparableRange.kt")
      public void testEvaluationOrderForComparableRange() {
        runTest("compiler/testData/codegen/box/ranges/contains/evaluationOrderForComparableRange.kt");
      }

      @TestMetadata("evaluationOrderForDownTo.kt")
      public void testEvaluationOrderForDownTo() {
        runTest("compiler/testData/codegen/box/ranges/contains/evaluationOrderForDownTo.kt");
      }

      @TestMetadata("evaluationOrderForDownToReversed.kt")
      public void testEvaluationOrderForDownToReversed() {
        runTest("compiler/testData/codegen/box/ranges/contains/evaluationOrderForDownToReversed.kt");
      }

      @TestMetadata("evaluationOrderForNullableArgument.kt")
      public void testEvaluationOrderForNullableArgument() {
        runTest("compiler/testData/codegen/box/ranges/contains/evaluationOrderForNullableArgument.kt");
      }

      @TestMetadata("evaluationOrderForRangeLiteral.kt")
      public void testEvaluationOrderForRangeLiteral() {
        runTest("compiler/testData/codegen/box/ranges/contains/evaluationOrderForRangeLiteral.kt");
      }

      @TestMetadata("evaluationOrderForRangeLiteralReversed.kt")
      public void testEvaluationOrderForRangeLiteralReversed() {
        runTest("compiler/testData/codegen/box/ranges/contains/evaluationOrderForRangeLiteralReversed.kt");
      }

      @TestMetadata("evaluationOrderForUntil.kt")
      public void testEvaluationOrderForUntil() {
        runTest("compiler/testData/codegen/box/ranges/contains/evaluationOrderForUntil.kt");
      }

      @TestMetadata("evaluationOrderForUntilReversed.kt")
      public void testEvaluationOrderForUntilReversed() {
        runTest("compiler/testData/codegen/box/ranges/contains/evaluationOrderForUntilReversed.kt");
      }

      @TestMetadata("genericCharInRangeLiteral.kt")
      public void testGenericCharInRangeLiteral() {
        runTest("compiler/testData/codegen/box/ranges/contains/genericCharInRangeLiteral.kt");
      }

      @TestMetadata("inArray.kt")
      public void testInArray() {
        runTest("compiler/testData/codegen/box/ranges/contains/inArray.kt");
      }

      @TestMetadata("inCharSequence.kt")
      public void testInCharSequence() {
        runTest("compiler/testData/codegen/box/ranges/contains/inCharSequence.kt");
      }

      @TestMetadata("inComparableRange.kt")
      public void testInComparableRange() {
        runTest("compiler/testData/codegen/box/ranges/contains/inComparableRange.kt");
      }

      @TestMetadata("inCustomObjectRange.kt")
      public void testInCustomObjectRange() {
        runTest("compiler/testData/codegen/box/ranges/contains/inCustomObjectRange.kt");
      }

      @TestMetadata("inDoubleRangeLiteralVsComparableRangeLiteral.kt")
      public void testInDoubleRangeLiteralVsComparableRangeLiteral() {
        runTest("compiler/testData/codegen/box/ranges/contains/inDoubleRangeLiteralVsComparableRangeLiteral.kt");
      }

      @TestMetadata("inExtensionRange.kt")
      public void testInExtensionRange() {
        runTest("compiler/testData/codegen/box/ranges/contains/inExtensionRange.kt");
      }

      @TestMetadata("inFloatingPointRangeWithNaNBound.kt")
      public void testInFloatingPointRangeWithNaNBound() {
        runTest("compiler/testData/codegen/box/ranges/contains/inFloatingPointRangeWithNaNBound.kt");
      }

      @TestMetadata("inIntRange.kt")
      public void testInIntRange() {
        runTest("compiler/testData/codegen/box/ranges/contains/inIntRange.kt");
      }

      @TestMetadata("inIterable.kt")
      public void testInIterable() {
        runTest("compiler/testData/codegen/box/ranges/contains/inIterable.kt");
      }

      @TestMetadata("inNonMatchingRange.kt")
      public void testInNonMatchingRange() {
        runTest("compiler/testData/codegen/box/ranges/contains/inNonMatchingRange.kt");
      }

      @TestMetadata("inOptimizableDoubleRange.kt")
      public void testInOptimizableDoubleRange() {
        runTest("compiler/testData/codegen/box/ranges/contains/inOptimizableDoubleRange.kt");
      }

      @TestMetadata("inOptimizableFloatRange.kt")
      public void testInOptimizableFloatRange() {
        runTest("compiler/testData/codegen/box/ranges/contains/inOptimizableFloatRange.kt");
      }

      @TestMetadata("inOptimizableIntRange.kt")
      public void testInOptimizableIntRange() {
        runTest("compiler/testData/codegen/box/ranges/contains/inOptimizableIntRange.kt");
      }

      @TestMetadata("inOptimizableLongRange.kt")
      public void testInOptimizableLongRange() {
        runTest("compiler/testData/codegen/box/ranges/contains/inOptimizableLongRange.kt");
      }

      @TestMetadata("inPrimitiveProgression.kt")
      public void testInPrimitiveProgression() {
        runTest("compiler/testData/codegen/box/ranges/contains/inPrimitiveProgression.kt");
      }

      @TestMetadata("inPrimitiveRange.kt")
      public void testInPrimitiveRange() {
        runTest("compiler/testData/codegen/box/ranges/contains/inPrimitiveRange.kt");
      }

      @TestMetadata("inRangeLiteralComposition.kt")
      public void testInRangeLiteralComposition() {
        runTest("compiler/testData/codegen/box/ranges/contains/inRangeLiteralComposition.kt");
      }

      @TestMetadata("inRangeWithCustomContains.kt")
      public void testInRangeWithCustomContains() {
        runTest("compiler/testData/codegen/box/ranges/contains/inRangeWithCustomContains.kt");
      }

      @TestMetadata("inRangeWithImplicitReceiver.kt")
      public void testInRangeWithImplicitReceiver() {
        runTest("compiler/testData/codegen/box/ranges/contains/inRangeWithImplicitReceiver.kt");
      }

      @TestMetadata("inRangeWithNonmatchingArguments.kt")
      public void testInRangeWithNonmatchingArguments() {
        runTest("compiler/testData/codegen/box/ranges/contains/inRangeWithNonmatchingArguments.kt");
      }

      @TestMetadata("inRangeWithSmartCast.kt")
      public void testInRangeWithSmartCast() {
        runTest("compiler/testData/codegen/box/ranges/contains/inRangeWithSmartCast.kt");
      }

      @TestMetadata("inUntil.kt")
      public void testInUntil() {
        runTest("compiler/testData/codegen/box/ranges/contains/inUntil.kt");
      }

      @TestMetadata("inUntilMaxValue.kt")
      public void testInUntilMaxValue() {
        runTest("compiler/testData/codegen/box/ranges/contains/inUntilMaxValue.kt");
      }

      @TestMetadata("inUntilMinValue.kt")
      public void testInUntilMinValue() {
        runTest("compiler/testData/codegen/box/ranges/contains/inUntilMinValue.kt");
      }

      @TestMetadata("inUntilMinValueNonConst.kt")
      public void testInUntilMinValueNonConst() {
        runTest("compiler/testData/codegen/box/ranges/contains/inUntilMinValueNonConst.kt");
      }

      @TestMetadata("intInByteRangeWithPossibleOverflow.kt")
      public void testIntInByteRangeWithPossibleOverflow() {
        runTest("compiler/testData/codegen/box/ranges/contains/intInByteRangeWithPossibleOverflow.kt");
      }

      @TestMetadata("intInIntRangeWithPossibleOverflow.kt")
      public void testIntInIntRangeWithPossibleOverflow() {
        runTest("compiler/testData/codegen/box/ranges/contains/intInIntRangeWithPossibleOverflow.kt");
      }

      @TestMetadata("intInShortRangeWithPossibleOverflow.kt")
      public void testIntInShortRangeWithPossibleOverflow() {
        runTest("compiler/testData/codegen/box/ranges/contains/intInShortRangeWithPossibleOverflow.kt");
      }

      @TestMetadata("jvmStaticContainsInObject.kt")
      public void testJvmStaticContainsInObject() {
        runTest("compiler/testData/codegen/box/ranges/contains/jvmStaticContainsInObject.kt");
      }

      @TestMetadata("kt20106.kt")
      public void testKt20106() {
        runTest("compiler/testData/codegen/box/ranges/contains/kt20106.kt");
      }

      @TestMetadata("longInLongRangeWithPossibleOverflow.kt")
      public void testLongInLongRangeWithPossibleOverflow() {
        runTest("compiler/testData/codegen/box/ranges/contains/longInLongRangeWithPossibleOverflow.kt");
      }

      @TestMetadata("nullableInPrimitiveRange.kt")
      public void testNullableInPrimitiveRange() {
        runTest("compiler/testData/codegen/box/ranges/contains/nullableInPrimitiveRange.kt");
      }

      @TestMetadata("rangeContainsString.kt")
      public void testRangeContainsString() {
        runTest("compiler/testData/codegen/box/ranges/contains/rangeContainsString.kt");
      }

      @TestMetadata("smartCastOnBothEnds.kt")
      public void testSmartCastOnBothEnds() {
        runTest("compiler/testData/codegen/box/ranges/contains/smartCastOnBothEnds.kt");
      }

      @TestMetadata("smartCastOnBothEndsGeneric.kt")
      public void testSmartCastOnBothEndsGeneric() {
        runTest("compiler/testData/codegen/box/ranges/contains/smartCastOnBothEndsGeneric.kt");
      }

      @TestMetadata("uintInUByteRangeWithPossibleOverflow.kt")
      public void testUintInUByteRangeWithPossibleOverflow() {
        runTest("compiler/testData/codegen/box/ranges/contains/uintInUByteRangeWithPossibleOverflow.kt");
      }

      @TestMetadata("uintInUIntRangeWithPossibleOverflow.kt")
      public void testUintInUIntRangeWithPossibleOverflow() {
        runTest("compiler/testData/codegen/box/ranges/contains/uintInUIntRangeWithPossibleOverflow.kt");
      }

      @TestMetadata("uintInUShortRangeWithPossibleOverflow.kt")
      public void testUintInUShortRangeWithPossibleOverflow() {
        runTest("compiler/testData/codegen/box/ranges/contains/uintInUShortRangeWithPossibleOverflow.kt");
      }

      @TestMetadata("ulongInULongRangeWithPossibleOverflow.kt")
      public void testUlongInULongRangeWithPossibleOverflow() {
        runTest("compiler/testData/codegen/box/ranges/contains/ulongInULongRangeWithPossibleOverflow.kt");
      }

      @TestMetadata("userDefinedContainsExtension.kt")
      public void testUserDefinedContainsExtension() {
        runTest("compiler/testData/codegen/box/ranges/contains/userDefinedContainsExtension.kt");
      }

      @TestMetadata("compiler/testData/codegen/box/ranges/contains/generated")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class Generated extends AbstractLightAnalysisModeTest {
        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        public void testAllFilesPresentInGenerated() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/contains/generated"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("arrayIndices.kt")
        public void testArrayIndices() {
          runTest("compiler/testData/codegen/box/ranges/contains/generated/arrayIndices.kt");
        }

        @TestMetadata("charDownTo.kt")
        public void testCharDownTo() {
          runTest("compiler/testData/codegen/box/ranges/contains/generated/charDownTo.kt");
        }

        @TestMetadata("charRangeTo.kt")
        public void testCharRangeTo() {
          runTest("compiler/testData/codegen/box/ranges/contains/generated/charRangeTo.kt");
        }

        @TestMetadata("charRangeUntil.kt")
        public void testCharRangeUntil() {
          runTest("compiler/testData/codegen/box/ranges/contains/generated/charRangeUntil.kt");
        }

        @TestMetadata("charSequenceIndices.kt")
        public void testCharSequenceIndices() {
          runTest("compiler/testData/codegen/box/ranges/contains/generated/charSequenceIndices.kt");
        }

        @TestMetadata("charUntil.kt")
        public void testCharUntil() {
          runTest("compiler/testData/codegen/box/ranges/contains/generated/charUntil.kt");
        }

        @TestMetadata("collectionIndices.kt")
        public void testCollectionIndices() {
          runTest("compiler/testData/codegen/box/ranges/contains/generated/collectionIndices.kt");
        }

        @TestMetadata("doubleRangeTo.kt")
        public void testDoubleRangeTo() {
          runTest("compiler/testData/codegen/box/ranges/contains/generated/doubleRangeTo.kt");
        }

        @TestMetadata("doubleRangeUntil.kt")
        public void testDoubleRangeUntil() {
          runTest("compiler/testData/codegen/box/ranges/contains/generated/doubleRangeUntil.kt");
        }

        @TestMetadata("floatRangeTo.kt")
        public void testFloatRangeTo() {
          runTest("compiler/testData/codegen/box/ranges/contains/generated/floatRangeTo.kt");
        }

        @TestMetadata("floatRangeUntil.kt")
        public void testFloatRangeUntil() {
          runTest("compiler/testData/codegen/box/ranges/contains/generated/floatRangeUntil.kt");
        }

        @TestMetadata("intDownTo.kt")
        public void testIntDownTo() {
          runTest("compiler/testData/codegen/box/ranges/contains/generated/intDownTo.kt");
        }

        @TestMetadata("intRangeTo.kt")
        public void testIntRangeTo() {
          runTest("compiler/testData/codegen/box/ranges/contains/generated/intRangeTo.kt");
        }

        @TestMetadata("intRangeUntil.kt")
        public void testIntRangeUntil() {
          runTest("compiler/testData/codegen/box/ranges/contains/generated/intRangeUntil.kt");
        }

        @TestMetadata("intUntil.kt")
        public void testIntUntil() {
          runTest("compiler/testData/codegen/box/ranges/contains/generated/intUntil.kt");
        }

        @TestMetadata("longDownTo.kt")
        public void testLongDownTo() {
          runTest("compiler/testData/codegen/box/ranges/contains/generated/longDownTo.kt");
        }

        @TestMetadata("longRangeTo.kt")
        public void testLongRangeTo() {
          runTest("compiler/testData/codegen/box/ranges/contains/generated/longRangeTo.kt");
        }

        @TestMetadata("longRangeUntil.kt")
        public void testLongRangeUntil() {
          runTest("compiler/testData/codegen/box/ranges/contains/generated/longRangeUntil.kt");
        }

        @TestMetadata("longUntil.kt")
        public void testLongUntil() {
          runTest("compiler/testData/codegen/box/ranges/contains/generated/longUntil.kt");
        }

        @TestMetadata("uintDownTo.kt")
        public void testUintDownTo() {
          runTest("compiler/testData/codegen/box/ranges/contains/generated/uintDownTo.kt");
        }

        @TestMetadata("uintRangeTo.kt")
        public void testUintRangeTo() {
          runTest("compiler/testData/codegen/box/ranges/contains/generated/uintRangeTo.kt");
        }

        @TestMetadata("uintRangeUntil.kt")
        public void testUintRangeUntil() {
          runTest("compiler/testData/codegen/box/ranges/contains/generated/uintRangeUntil.kt");
        }

        @TestMetadata("uintUntil.kt")
        public void testUintUntil() {
          runTest("compiler/testData/codegen/box/ranges/contains/generated/uintUntil.kt");
        }

        @TestMetadata("ulongDownTo.kt")
        public void testUlongDownTo() {
          runTest("compiler/testData/codegen/box/ranges/contains/generated/ulongDownTo.kt");
        }

        @TestMetadata("ulongRangeTo.kt")
        public void testUlongRangeTo() {
          runTest("compiler/testData/codegen/box/ranges/contains/generated/ulongRangeTo.kt");
        }

        @TestMetadata("ulongRangeUntil.kt")
        public void testUlongRangeUntil() {
          runTest("compiler/testData/codegen/box/ranges/contains/generated/ulongRangeUntil.kt");
        }

        @TestMetadata("ulongUntil.kt")
        public void testUlongUntil() {
          runTest("compiler/testData/codegen/box/ranges/contains/generated/ulongUntil.kt");
        }
      }
    }

    @TestMetadata("compiler/testData/codegen/box/ranges/evaluationOrder")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class EvaluationOrder extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInEvaluationOrder() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/evaluationOrder"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("forInDownTo.kt")
      public void testForInDownTo() {
        runTest("compiler/testData/codegen/box/ranges/evaluationOrder/forInDownTo.kt");
      }

      @TestMetadata("forInDownToReversed.kt")
      public void testForInDownToReversed() {
        runTest("compiler/testData/codegen/box/ranges/evaluationOrder/forInDownToReversed.kt");
      }

      @TestMetadata("forInDownToReversedReversed.kt")
      public void testForInDownToReversedReversed() {
        runTest("compiler/testData/codegen/box/ranges/evaluationOrder/forInDownToReversedReversed.kt");
      }

      @TestMetadata("forInRangeLiteral.kt")
      public void testForInRangeLiteral() {
        runTest("compiler/testData/codegen/box/ranges/evaluationOrder/forInRangeLiteral.kt");
      }

      @TestMetadata("forInRangeLiteralReversed.kt")
      public void testForInRangeLiteralReversed() {
        runTest("compiler/testData/codegen/box/ranges/evaluationOrder/forInRangeLiteralReversed.kt");
      }

      @TestMetadata("forInRangeLiteralReversedReversed.kt")
      public void testForInRangeLiteralReversedReversed() {
        runTest("compiler/testData/codegen/box/ranges/evaluationOrder/forInRangeLiteralReversedReversed.kt");
      }

      @TestMetadata("forInUntil.kt")
      public void testForInUntil() {
        runTest("compiler/testData/codegen/box/ranges/evaluationOrder/forInUntil.kt");
      }

      @TestMetadata("forInUntilReversed.kt")
      public void testForInUntilReversed() {
        runTest("compiler/testData/codegen/box/ranges/evaluationOrder/forInUntilReversed.kt");
      }

      @TestMetadata("forInUntilReversedReversed.kt")
      public void testForInUntilReversedReversed() {
        runTest("compiler/testData/codegen/box/ranges/evaluationOrder/forInUntilReversedReversed.kt");
      }

      @TestMetadata("compiler/testData/codegen/box/ranges/evaluationOrder/stepped")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class Stepped extends AbstractLightAnalysisModeTest {
        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        public void testAllFilesPresentInStepped() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/evaluationOrder/stepped"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInDownTo")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class ForInDownTo extends AbstractLightAnalysisModeTest {
          private void runTest(String testDataFilePath) {
            KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
          }

          public void testAllFilesPresentInForInDownTo() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInDownTo"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }

          @TestMetadata("forInDownToReversedStep.kt")
          public void testForInDownToReversedStep() {
            runTest("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInDownTo/forInDownToReversedStep.kt");
          }

          @TestMetadata("forInDownToReversedStepReversed.kt")
          public void testForInDownToReversedStepReversed() {
            runTest("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInDownTo/forInDownToReversedStepReversed.kt");
          }

          @TestMetadata("forInDownToReversedStepReversedStep.kt")
          public void testForInDownToReversedStepReversedStep() {
            runTest("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInDownTo/forInDownToReversedStepReversedStep.kt");
          }

          @TestMetadata("forInDownToStep.kt")
          public void testForInDownToStep() {
            runTest("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInDownTo/forInDownToStep.kt");
          }

          @TestMetadata("forInDownToStepReversed.kt")
          public void testForInDownToStepReversed() {
            runTest("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInDownTo/forInDownToStepReversed.kt");
          }

          @TestMetadata("forInDownToStepReversedStep.kt")
          public void testForInDownToStepReversedStep() {
            runTest("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInDownTo/forInDownToStepReversedStep.kt");
          }

          @TestMetadata("forInDownToStepReversedStepReversed.kt")
          public void testForInDownToStepReversedStepReversed() {
            runTest("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInDownTo/forInDownToStepReversedStepReversed.kt");
          }

          @TestMetadata("forInDownToStepStep.kt")
          public void testForInDownToStepStep() {
            runTest("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInDownTo/forInDownToStepStep.kt");
          }
        }

        @TestMetadata("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInRangeLiteral")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class ForInRangeLiteral extends AbstractLightAnalysisModeTest {
          private void runTest(String testDataFilePath) {
            KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
          }

          public void testAllFilesPresentInForInRangeLiteral() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInRangeLiteral"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }

          @TestMetadata("forInRangeLiteralReversedStep.kt")
          public void testForInRangeLiteralReversedStep() {
            runTest("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInRangeLiteral/forInRangeLiteralReversedStep.kt");
          }

          @TestMetadata("forInRangeLiteralReversedStepReversed.kt")
          public void testForInRangeLiteralReversedStepReversed() {
            runTest("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInRangeLiteral/forInRangeLiteralReversedStepReversed.kt");
          }

          @TestMetadata("forInRangeLiteralReversedStepReversedStep.kt")
          public void testForInRangeLiteralReversedStepReversedStep() {
            runTest("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInRangeLiteral/forInRangeLiteralReversedStepReversedStep.kt");
          }

          @TestMetadata("forInRangeLiteralStep.kt")
          public void testForInRangeLiteralStep() {
            runTest("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInRangeLiteral/forInRangeLiteralStep.kt");
          }

          @TestMetadata("forInRangeLiteralStepReversed.kt")
          public void testForInRangeLiteralStepReversed() {
            runTest("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInRangeLiteral/forInRangeLiteralStepReversed.kt");
          }

          @TestMetadata("forInRangeLiteralStepReversedStep.kt")
          public void testForInRangeLiteralStepReversedStep() {
            runTest("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInRangeLiteral/forInRangeLiteralStepReversedStep.kt");
          }

          @TestMetadata("forInRangeLiteralStepReversedStepReversed.kt")
          public void testForInRangeLiteralStepReversedStepReversed() {
            runTest("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInRangeLiteral/forInRangeLiteralStepReversedStepReversed.kt");
          }

          @TestMetadata("forInRangeLiteralStepStep.kt")
          public void testForInRangeLiteralStepStep() {
            runTest("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInRangeLiteral/forInRangeLiteralStepStep.kt");
          }
        }

        @TestMetadata("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInUntil")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class ForInUntil extends AbstractLightAnalysisModeTest {
          private void runTest(String testDataFilePath) {
            KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
          }

          public void testAllFilesPresentInForInUntil() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInUntil"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }

          @TestMetadata("forInUntilReversedStep.kt")
          public void testForInUntilReversedStep() {
            runTest("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInUntil/forInUntilReversedStep.kt");
          }

          @TestMetadata("forInUntilReversedStepReversed.kt")
          public void testForInUntilReversedStepReversed() {
            runTest("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInUntil/forInUntilReversedStepReversed.kt");
          }

          @TestMetadata("forInUntilReversedStepReversedStep.kt")
          public void testForInUntilReversedStepReversedStep() {
            runTest("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInUntil/forInUntilReversedStepReversedStep.kt");
          }

          @TestMetadata("forInUntilStep.kt")
          public void testForInUntilStep() {
            runTest("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInUntil/forInUntilStep.kt");
          }

          @TestMetadata("forInUntilStepReversed.kt")
          public void testForInUntilStepReversed() {
            runTest("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInUntil/forInUntilStepReversed.kt");
          }

          @TestMetadata("forInUntilStepReversedStep.kt")
          public void testForInUntilStepReversedStep() {
            runTest("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInUntil/forInUntilStepReversedStep.kt");
          }

          @TestMetadata("forInUntilStepReversedStepReversed.kt")
          public void testForInUntilStepReversedStepReversed() {
            runTest("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInUntil/forInUntilStepReversedStepReversed.kt");
          }

          @TestMetadata("forInUntilStepStep.kt")
          public void testForInUntilStepStep() {
            runTest("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInUntil/forInUntilStepStep.kt");
          }
        }
      }
    }

    @TestMetadata("compiler/testData/codegen/box/ranges/expression")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Expression extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInExpression() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/expression"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("emptyDownto.kt")
      public void testEmptyDownto() {
        runTest("compiler/testData/codegen/box/ranges/expression/emptyDownto.kt");
      }

      @TestMetadata("emptyRange.kt")
      public void testEmptyRange() {
        runTest("compiler/testData/codegen/box/ranges/expression/emptyRange.kt");
      }

      @TestMetadata("inexactDownToMinValue.kt")
      public void testInexactDownToMinValue() {
        runTest("compiler/testData/codegen/box/ranges/expression/inexactDownToMinValue.kt");
      }

      @TestMetadata("inexactSteppedDownTo.kt")
      public void testInexactSteppedDownTo() {
        runTest("compiler/testData/codegen/box/ranges/expression/inexactSteppedDownTo.kt");
      }

      @TestMetadata("inexactSteppedRange.kt")
      public void testInexactSteppedRange() {
        runTest("compiler/testData/codegen/box/ranges/expression/inexactSteppedRange.kt");
      }

      @TestMetadata("inexactToMaxValue.kt")
      public void testInexactToMaxValue() {
        runTest("compiler/testData/codegen/box/ranges/expression/inexactToMaxValue.kt");
      }

      @TestMetadata("maxValueMinusTwoToMaxValue.kt")
      public void testMaxValueMinusTwoToMaxValue() {
        runTest("compiler/testData/codegen/box/ranges/expression/maxValueMinusTwoToMaxValue.kt");
      }

      @TestMetadata("maxValueToMaxValue.kt")
      public void testMaxValueToMaxValue() {
        runTest("compiler/testData/codegen/box/ranges/expression/maxValueToMaxValue.kt");
      }

      @TestMetadata("maxValueToMinValue.kt")
      public void testMaxValueToMinValue() {
        runTest("compiler/testData/codegen/box/ranges/expression/maxValueToMinValue.kt");
      }

      @TestMetadata("oneElementDownTo.kt")
      public void testOneElementDownTo() {
        runTest("compiler/testData/codegen/box/ranges/expression/oneElementDownTo.kt");
      }

      @TestMetadata("oneElementRange.kt")
      public void testOneElementRange() {
        runTest("compiler/testData/codegen/box/ranges/expression/oneElementRange.kt");
      }

      @TestMetadata("openRange.kt")
      public void testOpenRange() {
        runTest("compiler/testData/codegen/box/ranges/expression/openRange.kt");
      }

      @TestMetadata("openRangeUntil.kt")
      public void testOpenRangeUntil() {
        runTest("compiler/testData/codegen/box/ranges/expression/openRangeUntil.kt");
      }

      @TestMetadata("overflowZeroDownToMaxValue.kt")
      public void testOverflowZeroDownToMaxValue() {
        runTest("compiler/testData/codegen/box/ranges/expression/overflowZeroDownToMaxValue.kt");
      }

      @TestMetadata("overflowZeroToMinValue.kt")
      public void testOverflowZeroToMinValue() {
        runTest("compiler/testData/codegen/box/ranges/expression/overflowZeroToMinValue.kt");
      }

      @TestMetadata("progressionDownToMinValue.kt")
      public void testProgressionDownToMinValue() {
        runTest("compiler/testData/codegen/box/ranges/expression/progressionDownToMinValue.kt");
      }

      @TestMetadata("progressionMaxValueMinusTwoToMaxValue.kt")
      public void testProgressionMaxValueMinusTwoToMaxValue() {
        runTest("compiler/testData/codegen/box/ranges/expression/progressionMaxValueMinusTwoToMaxValue.kt");
      }

      @TestMetadata("progressionMaxValueToMaxValue.kt")
      public void testProgressionMaxValueToMaxValue() {
        runTest("compiler/testData/codegen/box/ranges/expression/progressionMaxValueToMaxValue.kt");
      }

      @TestMetadata("progressionMaxValueToMinValue.kt")
      public void testProgressionMaxValueToMinValue() {
        runTest("compiler/testData/codegen/box/ranges/expression/progressionMaxValueToMinValue.kt");
      }

      @TestMetadata("progressionMinValueToMinValue.kt")
      public void testProgressionMinValueToMinValue() {
        runTest("compiler/testData/codegen/box/ranges/expression/progressionMinValueToMinValue.kt");
      }

      @TestMetadata("reversedBackSequence.kt")
      public void testReversedBackSequence() {
        runTest("compiler/testData/codegen/box/ranges/expression/reversedBackSequence.kt");
      }

      @TestMetadata("reversedEmptyBackSequence.kt")
      public void testReversedEmptyBackSequence() {
        runTest("compiler/testData/codegen/box/ranges/expression/reversedEmptyBackSequence.kt");
      }

      @TestMetadata("reversedEmptyRange.kt")
      public void testReversedEmptyRange() {
        runTest("compiler/testData/codegen/box/ranges/expression/reversedEmptyRange.kt");
      }

      @TestMetadata("reversedInexactSteppedDownTo.kt")
      public void testReversedInexactSteppedDownTo() {
        runTest("compiler/testData/codegen/box/ranges/expression/reversedInexactSteppedDownTo.kt");
      }

      @TestMetadata("reversedRange.kt")
      public void testReversedRange() {
        runTest("compiler/testData/codegen/box/ranges/expression/reversedRange.kt");
      }

      @TestMetadata("reversedSimpleSteppedRange.kt")
      public void testReversedSimpleSteppedRange() {
        runTest("compiler/testData/codegen/box/ranges/expression/reversedSimpleSteppedRange.kt");
      }

      @TestMetadata("simpleDownTo.kt")
      public void testSimpleDownTo() {
        runTest("compiler/testData/codegen/box/ranges/expression/simpleDownTo.kt");
      }

      @TestMetadata("simpleRange.kt")
      public void testSimpleRange() {
        runTest("compiler/testData/codegen/box/ranges/expression/simpleRange.kt");
      }

      @TestMetadata("simpleRangeWithNonConstantEnds.kt")
      public void testSimpleRangeWithNonConstantEnds() {
        runTest("compiler/testData/codegen/box/ranges/expression/simpleRangeWithNonConstantEnds.kt");
      }

      @TestMetadata("simpleSteppedDownTo.kt")
      public void testSimpleSteppedDownTo() {
        runTest("compiler/testData/codegen/box/ranges/expression/simpleSteppedDownTo.kt");
      }

      @TestMetadata("simpleSteppedRange.kt")
      public void testSimpleSteppedRange() {
        runTest("compiler/testData/codegen/box/ranges/expression/simpleSteppedRange.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/ranges/forInDownTo")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ForInDownTo extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInForInDownTo() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/forInDownTo"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("forInDownToWithPossibleUnderflow.kt")
      public void testForInDownToWithPossibleUnderflow() {
        runTest("compiler/testData/codegen/box/ranges/forInDownTo/forInDownToWithPossibleUnderflow.kt");
      }

      @TestMetadata("forInSumDownToSum.kt")
      public void testForInSumDownToSum() {
        runTest("compiler/testData/codegen/box/ranges/forInDownTo/forInSumDownToSum.kt");
      }

      @TestMetadata("forIntInDownTo.kt")
      public void testForIntInDownTo() {
        runTest("compiler/testData/codegen/box/ranges/forInDownTo/forIntInDownTo.kt");
      }

      @TestMetadata("forIntInDownToWithNonConstBounds.kt")
      public void testForIntInDownToWithNonConstBounds() {
        runTest("compiler/testData/codegen/box/ranges/forInDownTo/forIntInDownToWithNonConstBounds.kt");
      }

      @TestMetadata("forIntInNonOptimizedDownTo.kt")
      public void testForIntInNonOptimizedDownTo() {
        runTest("compiler/testData/codegen/box/ranges/forInDownTo/forIntInNonOptimizedDownTo.kt");
      }

      @TestMetadata("forLongInDownTo.kt")
      public void testForLongInDownTo() {
        runTest("compiler/testData/codegen/box/ranges/forInDownTo/forLongInDownTo.kt");
      }

      @TestMetadata("forNullableIntInDownTo.kt")
      public void testForNullableIntInDownTo() {
        runTest("compiler/testData/codegen/box/ranges/forInDownTo/forNullableIntInDownTo.kt");
      }

      @TestMetadata("kt49411.kt")
      public void testKt49411() {
        runTest("compiler/testData/codegen/box/ranges/forInDownTo/kt49411.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/ranges/forInIndices")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ForInIndices extends AbstractLightAnalysisModeTest {
      @TestMetadata("kt43159_ArrayUpperBound.kt")
      public void ignoreKt43159_ArrayUpperBound() {
        runTest("compiler/testData/codegen/box/ranges/forInIndices/kt43159_ArrayUpperBound.kt");
      }

      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInForInIndices() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/forInIndices"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("forInArrayListIndices.kt")
      public void testForInArrayListIndices() {
        runTest("compiler/testData/codegen/box/ranges/forInIndices/forInArrayListIndices.kt");
      }

      @TestMetadata("forInCharSequenceIndices.kt")
      public void testForInCharSequenceIndices() {
        runTest("compiler/testData/codegen/box/ranges/forInIndices/forInCharSequenceIndices.kt");
      }

      @TestMetadata("forInCharSequenceTypeParameterIndices.kt")
      public void testForInCharSequenceTypeParameterIndices() {
        runTest("compiler/testData/codegen/box/ranges/forInIndices/forInCharSequenceTypeParameterIndices.kt");
      }

      @TestMetadata("forInCollectionImplicitReceiverIndices.kt")
      public void testForInCollectionImplicitReceiverIndices() {
        runTest("compiler/testData/codegen/box/ranges/forInIndices/forInCollectionImplicitReceiverIndices.kt");
      }

      @TestMetadata("forInCollectionIndices.kt")
      public void testForInCollectionIndices() {
        runTest("compiler/testData/codegen/box/ranges/forInIndices/forInCollectionIndices.kt");
      }

      @TestMetadata("forInCollectionTypeParameterIndices.kt")
      public void testForInCollectionTypeParameterIndices() {
        runTest("compiler/testData/codegen/box/ranges/forInIndices/forInCollectionTypeParameterIndices.kt");
      }

      @TestMetadata("forInListIndices.kt")
      public void testForInListIndices() {
        runTest("compiler/testData/codegen/box/ranges/forInIndices/forInListIndices.kt");
      }

      @TestMetadata("forInListIndicesBreak.kt")
      public void testForInListIndicesBreak() {
        runTest("compiler/testData/codegen/box/ranges/forInIndices/forInListIndicesBreak.kt");
      }

      @TestMetadata("forInListIndicesContinue.kt")
      public void testForInListIndicesContinue() {
        runTest("compiler/testData/codegen/box/ranges/forInIndices/forInListIndicesContinue.kt");
      }

      @TestMetadata("forInNonOptimizedIndices.kt")
      public void testForInNonOptimizedIndices() {
        runTest("compiler/testData/codegen/box/ranges/forInIndices/forInNonOptimizedIndices.kt");
      }

      @TestMetadata("forInObjectArrayIndices.kt")
      public void testForInObjectArrayIndices() {
        runTest("compiler/testData/codegen/box/ranges/forInIndices/forInObjectArrayIndices.kt");
      }

      @TestMetadata("forInPrimitiveArrayIndices.kt")
      public void testForInPrimitiveArrayIndices() {
        runTest("compiler/testData/codegen/box/ranges/forInIndices/forInPrimitiveArrayIndices.kt");
      }

      @TestMetadata("forNullableIntInArrayIndices.kt")
      public void testForNullableIntInArrayIndices() {
        runTest("compiler/testData/codegen/box/ranges/forInIndices/forNullableIntInArrayIndices.kt");
      }

      @TestMetadata("forNullableIntInCollectionIndices.kt")
      public void testForNullableIntInCollectionIndices() {
        runTest("compiler/testData/codegen/box/ranges/forInIndices/forNullableIntInCollectionIndices.kt");
      }

      @TestMetadata("indexOfLast.kt")
      public void testIndexOfLast() {
        runTest("compiler/testData/codegen/box/ranges/forInIndices/indexOfLast.kt");
      }

      @TestMetadata("kt12983_forInGenericArrayIndices.kt")
      public void testKt12983_forInGenericArrayIndices() {
        runTest("compiler/testData/codegen/box/ranges/forInIndices/kt12983_forInGenericArrayIndices.kt");
      }

      @TestMetadata("kt12983_forInGenericCollectionIndices.kt")
      public void testKt12983_forInGenericCollectionIndices() {
        runTest("compiler/testData/codegen/box/ranges/forInIndices/kt12983_forInGenericCollectionIndices.kt");
      }

      @TestMetadata("kt12983_forInSpecificArrayIndices.kt")
      public void testKt12983_forInSpecificArrayIndices() {
        runTest("compiler/testData/codegen/box/ranges/forInIndices/kt12983_forInSpecificArrayIndices.kt");
      }

      @TestMetadata("kt12983_forInSpecificCollectionIndices.kt")
      public void testKt12983_forInSpecificCollectionIndices() {
        runTest("compiler/testData/codegen/box/ranges/forInIndices/kt12983_forInSpecificCollectionIndices.kt");
      }

      @TestMetadata("kt13241_Array.kt")
      public void testKt13241_Array() {
        runTest("compiler/testData/codegen/box/ranges/forInIndices/kt13241_Array.kt");
      }

      @TestMetadata("kt13241_CharSequence.kt")
      public void testKt13241_CharSequence() {
        runTest("compiler/testData/codegen/box/ranges/forInIndices/kt13241_CharSequence.kt");
      }

      @TestMetadata("kt13241_Collection.kt")
      public void testKt13241_Collection() {
        runTest("compiler/testData/codegen/box/ranges/forInIndices/kt13241_Collection.kt");
      }

      @TestMetadata("kt43159_GenericArray.kt")
      public void testKt43159_GenericArray() {
        runTest("compiler/testData/codegen/box/ranges/forInIndices/kt43159_GenericArray.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/ranges/forInProgressionWithIndex")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ForInProgressionWithIndex extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInForInProgressionWithIndex() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/forInProgressionWithIndex"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("forInDownToWithIndex.kt")
      public void testForInDownToWithIndex() {
        runTest("compiler/testData/codegen/box/ranges/forInProgressionWithIndex/forInDownToWithIndex.kt");
      }

      @TestMetadata("forInIndicesWithIndex.kt")
      public void testForInIndicesWithIndex() {
        runTest("compiler/testData/codegen/box/ranges/forInProgressionWithIndex/forInIndicesWithIndex.kt");
      }

      @TestMetadata("forInRangeToWithIndex.kt")
      public void testForInRangeToWithIndex() {
        runTest("compiler/testData/codegen/box/ranges/forInProgressionWithIndex/forInRangeToWithIndex.kt");
      }

      @TestMetadata("forInReversedStepWithIndex.kt")
      public void testForInReversedStepWithIndex() {
        runTest("compiler/testData/codegen/box/ranges/forInProgressionWithIndex/forInReversedStepWithIndex.kt");
      }

      @TestMetadata("forInReversedWithIndex.kt")
      public void testForInReversedWithIndex() {
        runTest("compiler/testData/codegen/box/ranges/forInProgressionWithIndex/forInReversedWithIndex.kt");
      }

      @TestMetadata("forInStepReversedWithIndex.kt")
      public void testForInStepReversedWithIndex() {
        runTest("compiler/testData/codegen/box/ranges/forInProgressionWithIndex/forInStepReversedWithIndex.kt");
      }

      @TestMetadata("forInStepWithIndex.kt")
      public void testForInStepWithIndex() {
        runTest("compiler/testData/codegen/box/ranges/forInProgressionWithIndex/forInStepWithIndex.kt");
      }

      @TestMetadata("forInUntilWithIndex.kt")
      public void testForInUntilWithIndex() {
        runTest("compiler/testData/codegen/box/ranges/forInProgressionWithIndex/forInUntilWithIndex.kt");
      }

      @TestMetadata("forInWithIndexBreakAndContinue.kt")
      public void testForInWithIndexBreakAndContinue() {
        runTest("compiler/testData/codegen/box/ranges/forInProgressionWithIndex/forInWithIndexBreakAndContinue.kt");
      }

      @TestMetadata("forInWithIndexNoIndexOrElementVar.kt")
      public void testForInWithIndexNoIndexOrElementVar() {
        runTest("compiler/testData/codegen/box/ranges/forInProgressionWithIndex/forInWithIndexNoIndexOrElementVar.kt");
      }

      @TestMetadata("forInWithIndexNotDestructured.kt")
      public void testForInWithIndexNotDestructured() {
        runTest("compiler/testData/codegen/box/ranges/forInProgressionWithIndex/forInWithIndexNotDestructured.kt");
      }

      @TestMetadata("forInWithIndexReversed.kt")
      public void testForInWithIndexReversed() {
        runTest("compiler/testData/codegen/box/ranges/forInProgressionWithIndex/forInWithIndexReversed.kt");
      }

      @TestMetadata("forInWithIndexWithDestructuringInLoop.kt")
      public void testForInWithIndexWithDestructuringInLoop() {
        runTest("compiler/testData/codegen/box/ranges/forInProgressionWithIndex/forInWithIndexWithDestructuringInLoop.kt");
      }

      @TestMetadata("forInWithIndexWithIndex.kt")
      public void testForInWithIndexWithIndex() {
        runTest("compiler/testData/codegen/box/ranges/forInProgressionWithIndex/forInWithIndexWithIndex.kt");
      }

      @TestMetadata("kt42909.kt")
      public void testKt42909() {
        runTest("compiler/testData/codegen/box/ranges/forInProgressionWithIndex/kt42909.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/ranges/forInReversed")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ForInReversed extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInForInReversed() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/forInReversed"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("forInReversedArrayIndices.kt")
      public void testForInReversedArrayIndices() {
        runTest("compiler/testData/codegen/box/ranges/forInReversed/forInReversedArrayIndices.kt");
      }

      @TestMetadata("forInReversedCharSequenceIndices.kt")
      public void testForInReversedCharSequenceIndices() {
        runTest("compiler/testData/codegen/box/ranges/forInReversed/forInReversedCharSequenceIndices.kt");
      }

      @TestMetadata("forInReversedCollectionIndices.kt")
      public void testForInReversedCollectionIndices() {
        runTest("compiler/testData/codegen/box/ranges/forInReversed/forInReversedCollectionIndices.kt");
      }

      @TestMetadata("forInReversedDownTo.kt")
      public void testForInReversedDownTo() {
        runTest("compiler/testData/codegen/box/ranges/forInReversed/forInReversedDownTo.kt");
      }

      @TestMetadata("forInReversedEmptyRange.kt")
      public void testForInReversedEmptyRange() {
        runTest("compiler/testData/codegen/box/ranges/forInReversed/forInReversedEmptyRange.kt");
      }

      @TestMetadata("forInReversedEmptyRangeLiteral.kt")
      public void testForInReversedEmptyRangeLiteral() {
        runTest("compiler/testData/codegen/box/ranges/forInReversed/forInReversedEmptyRangeLiteral.kt");
      }

      @TestMetadata("forInReversedEmptyRangeLiteralWithNonConstBounds.kt")
      public void testForInReversedEmptyRangeLiteralWithNonConstBounds() {
        runTest("compiler/testData/codegen/box/ranges/forInReversed/forInReversedEmptyRangeLiteralWithNonConstBounds.kt");
      }

      @TestMetadata("forInReversedRange.kt")
      public void testForInReversedRange() {
        runTest("compiler/testData/codegen/box/ranges/forInReversed/forInReversedRange.kt");
      }

      @TestMetadata("forInReversedRangeLiteral.kt")
      public void testForInReversedRangeLiteral() {
        runTest("compiler/testData/codegen/box/ranges/forInReversed/forInReversedRangeLiteral.kt");
      }

      @TestMetadata("forInReversedRangeLiteralWithNonConstBounds.kt")
      public void testForInReversedRangeLiteralWithNonConstBounds() {
        runTest("compiler/testData/codegen/box/ranges/forInReversed/forInReversedRangeLiteralWithNonConstBounds.kt");
      }

      @TestMetadata("forInReversedReversedArrayIndices.kt")
      public void testForInReversedReversedArrayIndices() {
        runTest("compiler/testData/codegen/box/ranges/forInReversed/forInReversedReversedArrayIndices.kt");
      }

      @TestMetadata("forInReversedReversedDownTo.kt")
      public void testForInReversedReversedDownTo() {
        runTest("compiler/testData/codegen/box/ranges/forInReversed/forInReversedReversedDownTo.kt");
      }

      @TestMetadata("ForInReversedReversedRange.kt")
      public void testForInReversedReversedRange() {
        runTest("compiler/testData/codegen/box/ranges/forInReversed/ForInReversedReversedRange.kt");
      }

      @TestMetadata("forInReversedReversedReversedRange.kt")
      public void testForInReversedReversedReversedRange() {
        runTest("compiler/testData/codegen/box/ranges/forInReversed/forInReversedReversedReversedRange.kt");
      }

      @TestMetadata("forInReversedReversedUntil.kt")
      public void testForInReversedReversedUntil() {
        runTest("compiler/testData/codegen/box/ranges/forInReversed/forInReversedReversedUntil.kt");
      }

      @TestMetadata("forInReversedReversedUntilWithNonConstBounds.kt")
      public void testForInReversedReversedUntilWithNonConstBounds() {
        runTest("compiler/testData/codegen/box/ranges/forInReversed/forInReversedReversedUntilWithNonConstBounds.kt");
      }

      @TestMetadata("forInReversedUntil.kt")
      public void testForInReversedUntil() {
        runTest("compiler/testData/codegen/box/ranges/forInReversed/forInReversedUntil.kt");
      }

      @TestMetadata("forInReversedUntilWithNonConstBounds.kt")
      public void testForInReversedUntilWithNonConstBounds() {
        runTest("compiler/testData/codegen/box/ranges/forInReversed/forInReversedUntilWithNonConstBounds.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/ranges/forInUntil")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ForInUntil extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInForInUntil() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/forInUntil"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("forInUntilChar.kt")
      public void testForInUntilChar() {
        runTest("compiler/testData/codegen/box/ranges/forInUntil/forInUntilChar.kt");
      }

      @TestMetadata("forInUntilCharMaxValue.kt")
      public void testForInUntilCharMaxValue() {
        runTest("compiler/testData/codegen/box/ranges/forInUntil/forInUntilCharMaxValue.kt");
      }

      @TestMetadata("forInUntilCharMinValue.kt")
      public void testForInUntilCharMinValue() {
        runTest("compiler/testData/codegen/box/ranges/forInUntil/forInUntilCharMinValue.kt");
      }

      @TestMetadata("forInUntilCharMinValueNonConst.kt")
      public void testForInUntilCharMinValueNonConst() {
        runTest("compiler/testData/codegen/box/ranges/forInUntil/forInUntilCharMinValueNonConst.kt");
      }

      @TestMetadata("forInUntilInt.kt")
      public void testForInUntilInt() {
        runTest("compiler/testData/codegen/box/ranges/forInUntil/forInUntilInt.kt");
      }

      @TestMetadata("forInUntilIntMaxValue.kt")
      public void testForInUntilIntMaxValue() {
        runTest("compiler/testData/codegen/box/ranges/forInUntil/forInUntilIntMaxValue.kt");
      }

      @TestMetadata("forInUntilIntMinValue.kt")
      public void testForInUntilIntMinValue() {
        runTest("compiler/testData/codegen/box/ranges/forInUntil/forInUntilIntMinValue.kt");
      }

      @TestMetadata("forInUntilIntMinValueNonConst.kt")
      public void testForInUntilIntMinValueNonConst() {
        runTest("compiler/testData/codegen/box/ranges/forInUntil/forInUntilIntMinValueNonConst.kt");
      }

      @TestMetadata("forInUntilLesserInt.kt")
      public void testForInUntilLesserInt() {
        runTest("compiler/testData/codegen/box/ranges/forInUntil/forInUntilLesserInt.kt");
      }

      @TestMetadata("forInUntilLong.kt")
      public void testForInUntilLong() {
        runTest("compiler/testData/codegen/box/ranges/forInUntil/forInUntilLong.kt");
      }

      @TestMetadata("forInUntilLongMaxValue.kt")
      public void testForInUntilLongMaxValue() {
        runTest("compiler/testData/codegen/box/ranges/forInUntil/forInUntilLongMaxValue.kt");
      }

      @TestMetadata("forInUntilLongMinValue.kt")
      public void testForInUntilLongMinValue() {
        runTest("compiler/testData/codegen/box/ranges/forInUntil/forInUntilLongMinValue.kt");
      }

      @TestMetadata("forInUntilLongMinValueNonConst.kt")
      public void testForInUntilLongMinValueNonConst() {
        runTest("compiler/testData/codegen/box/ranges/forInUntil/forInUntilLongMinValueNonConst.kt");
      }

      @TestMetadata("forIntInIntUntilSmartcastInt.kt")
      public void testForIntInIntUntilSmartcastInt() {
        runTest("compiler/testData/codegen/box/ranges/forInUntil/forIntInIntUntilSmartcastInt.kt");
      }

      @TestMetadata("kt42533.kt")
      public void testKt42533() {
        runTest("compiler/testData/codegen/box/ranges/forInUntil/kt42533.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/ranges/forWithPossibleOverflow")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ForWithPossibleOverflow extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInForWithPossibleOverflow() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/forWithPossibleOverflow"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("forInDownToCharMinValue.kt")
      public void testForInDownToCharMinValue() {
        runTest("compiler/testData/codegen/box/ranges/forWithPossibleOverflow/forInDownToCharMinValue.kt");
      }

      @TestMetadata("forInDownToCharMinValueReversed.kt")
      public void testForInDownToCharMinValueReversed() {
        runTest("compiler/testData/codegen/box/ranges/forWithPossibleOverflow/forInDownToCharMinValueReversed.kt");
      }

      @TestMetadata("forInDownToIntMinValue.kt")
      public void testForInDownToIntMinValue() {
        runTest("compiler/testData/codegen/box/ranges/forWithPossibleOverflow/forInDownToIntMinValue.kt");
      }

      @TestMetadata("forInDownToIntMinValueReversed.kt")
      public void testForInDownToIntMinValueReversed() {
        runTest("compiler/testData/codegen/box/ranges/forWithPossibleOverflow/forInDownToIntMinValueReversed.kt");
      }

      @TestMetadata("forInDownToLongMinValue.kt")
      public void testForInDownToLongMinValue() {
        runTest("compiler/testData/codegen/box/ranges/forWithPossibleOverflow/forInDownToLongMinValue.kt");
      }

      @TestMetadata("forInDownToLongMinValueReversed.kt")
      public void testForInDownToLongMinValueReversed() {
        runTest("compiler/testData/codegen/box/ranges/forWithPossibleOverflow/forInDownToLongMinValueReversed.kt");
      }

      @TestMetadata("forInRangeToCharMaxValue.kt")
      public void testForInRangeToCharMaxValue() {
        runTest("compiler/testData/codegen/box/ranges/forWithPossibleOverflow/forInRangeToCharMaxValue.kt");
      }

      @TestMetadata("forInRangeToCharMaxValueReversed.kt")
      public void testForInRangeToCharMaxValueReversed() {
        runTest("compiler/testData/codegen/box/ranges/forWithPossibleOverflow/forInRangeToCharMaxValueReversed.kt");
      }

      @TestMetadata("forInRangeToIntMaxValue.kt")
      public void testForInRangeToIntMaxValue() {
        runTest("compiler/testData/codegen/box/ranges/forWithPossibleOverflow/forInRangeToIntMaxValue.kt");
      }

      @TestMetadata("forInRangeToIntMaxValueReversed.kt")
      public void testForInRangeToIntMaxValueReversed() {
        runTest("compiler/testData/codegen/box/ranges/forWithPossibleOverflow/forInRangeToIntMaxValueReversed.kt");
      }

      @TestMetadata("forInRangeToLongMaxValue.kt")
      public void testForInRangeToLongMaxValue() {
        runTest("compiler/testData/codegen/box/ranges/forWithPossibleOverflow/forInRangeToLongMaxValue.kt");
      }

      @TestMetadata("forInRangeToLongMaxValueReversed.kt")
      public void testForInRangeToLongMaxValueReversed() {
        runTest("compiler/testData/codegen/box/ranges/forWithPossibleOverflow/forInRangeToLongMaxValueReversed.kt");
      }

      @TestMetadata("forInUntilIntMinValueReversed.kt")
      public void testForInUntilIntMinValueReversed() {
        runTest("compiler/testData/codegen/box/ranges/forWithPossibleOverflow/forInUntilIntMinValueReversed.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/ranges/javaInterop")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class JavaInterop extends AbstractLightAnalysisModeTest {
      @TestMetadata("javaArrayOfInheritedNotNullFailFast.kt")
      public void ignoreJavaArrayOfInheritedNotNullFailFast() {
        runTest("compiler/testData/codegen/box/ranges/javaInterop/javaArrayOfInheritedNotNullFailFast.kt");
      }

      @TestMetadata("javaCollectionOfExplicitNotNullFailFast.kt")
      public void ignoreJavaCollectionOfExplicitNotNullFailFast() {
        runTest("compiler/testData/codegen/box/ranges/javaInterop/javaCollectionOfExplicitNotNullFailFast.kt");
      }

      @TestMetadata("javaCollectionOfInheritedNotNullFailFast.kt")
      public void ignoreJavaCollectionOfInheritedNotNullFailFast() {
        runTest("compiler/testData/codegen/box/ranges/javaInterop/javaCollectionOfInheritedNotNullFailFast.kt");
      }

      @TestMetadata("javaCollectionOfNotNullToTypedArrayFailFast.kt")
      public void ignoreJavaCollectionOfNotNullToTypedArrayFailFast() {
        runTest("compiler/testData/codegen/box/ranges/javaInterop/javaCollectionOfNotNullToTypedArrayFailFast.kt");
      }

      @TestMetadata("javaIteratorOfNotNullFailFast.kt")
      public void ignoreJavaIteratorOfNotNullFailFast() {
        runTest("compiler/testData/codegen/box/ranges/javaInterop/javaIteratorOfNotNullFailFast.kt");
      }

      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInJavaInterop() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/javaInterop"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("javaArrayOfInheritedNotNull.kt")
      public void testJavaArrayOfInheritedNotNull() {
        runTest("compiler/testData/codegen/box/ranges/javaInterop/javaArrayOfInheritedNotNull.kt");
      }

      @TestMetadata("javaArrayOfMaybeNullable.kt")
      public void testJavaArrayOfMaybeNullable() {
        runTest("compiler/testData/codegen/box/ranges/javaInterop/javaArrayOfMaybeNullable.kt");
      }

      @TestMetadata("javaArrayOfMaybeNullableWithNotNullLoopVariable.kt")
      public void testJavaArrayOfMaybeNullableWithNotNullLoopVariable() {
        runTest("compiler/testData/codegen/box/ranges/javaInterop/javaArrayOfMaybeNullableWithNotNullLoopVariable.kt");
      }

      @TestMetadata("javaArrayOfMaybeNullableWithNotNullLoopVariableFailFast.kt")
      public void testJavaArrayOfMaybeNullableWithNotNullLoopVariableFailFast() {
        runTest("compiler/testData/codegen/box/ranges/javaInterop/javaArrayOfMaybeNullableWithNotNullLoopVariableFailFast.kt");
      }

      @TestMetadata("javaCollectionOfExplicitNotNull.kt")
      public void testJavaCollectionOfExplicitNotNull() {
        runTest("compiler/testData/codegen/box/ranges/javaInterop/javaCollectionOfExplicitNotNull.kt");
      }

      @TestMetadata("javaCollectionOfExplicitNullable.kt")
      public void testJavaCollectionOfExplicitNullable() {
        runTest("compiler/testData/codegen/box/ranges/javaInterop/javaCollectionOfExplicitNullable.kt");
      }

      @TestMetadata("javaCollectionOfInheritedNotNull.kt")
      public void testJavaCollectionOfInheritedNotNull() {
        runTest("compiler/testData/codegen/box/ranges/javaInterop/javaCollectionOfInheritedNotNull.kt");
      }

      @TestMetadata("javaCollectionOfMaybeNullable.kt")
      public void testJavaCollectionOfMaybeNullable() {
        runTest("compiler/testData/codegen/box/ranges/javaInterop/javaCollectionOfMaybeNullable.kt");
      }

      @TestMetadata("javaCollectionOfMaybeNullableWithNotNullLoopVariable.kt")
      public void testJavaCollectionOfMaybeNullableWithNotNullLoopVariable() {
        runTest("compiler/testData/codegen/box/ranges/javaInterop/javaCollectionOfMaybeNullableWithNotNullLoopVariable.kt");
      }

      @TestMetadata("javaCollectionOfMaybeNullableWithNotNullLoopVariableFailFast.kt")
      public void testJavaCollectionOfMaybeNullableWithNotNullLoopVariableFailFast() {
        runTest("compiler/testData/codegen/box/ranges/javaInterop/javaCollectionOfMaybeNullableWithNotNullLoopVariableFailFast.kt");
      }

      @TestMetadata("javaCollectionOfNotNullFromStdlib.kt")
      public void testJavaCollectionOfNotNullFromStdlib() {
        runTest("compiler/testData/codegen/box/ranges/javaInterop/javaCollectionOfNotNullFromStdlib.kt");
      }

      @TestMetadata("javaCollectionOfNotNullFromStdlibToTypedArray.kt")
      public void testJavaCollectionOfNotNullFromStdlibToTypedArray() {
        runTest("compiler/testData/codegen/box/ranges/javaInterop/javaCollectionOfNotNullFromStdlibToTypedArray.kt");
      }

      @TestMetadata("javaCollectionOfNotNullToTypedArray.kt")
      public void testJavaCollectionOfNotNullToTypedArray() {
        runTest("compiler/testData/codegen/box/ranges/javaInterop/javaCollectionOfNotNullToTypedArray.kt");
      }

      @TestMetadata("javaIteratorOfNotNull.kt")
      public void testJavaIteratorOfNotNull() {
        runTest("compiler/testData/codegen/box/ranges/javaInterop/javaIteratorOfNotNull.kt");
      }

      @TestMetadata("compiler/testData/codegen/box/ranges/javaInterop/withIndex")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class WithIndex extends AbstractLightAnalysisModeTest {
        @TestMetadata("javaArrayOfInheritedNotNullWithIndexFailFast.kt")
        public void ignoreJavaArrayOfInheritedNotNullWithIndexFailFast() {
          runTest("compiler/testData/codegen/box/ranges/javaInterop/withIndex/javaArrayOfInheritedNotNullWithIndexFailFast.kt");
        }

        @TestMetadata("javaArrayOfMaybeNullableWithIndexWithNotNullLoopVariableFailFast.kt")
        public void ignoreJavaArrayOfMaybeNullableWithIndexWithNotNullLoopVariableFailFast() {
          runTest("compiler/testData/codegen/box/ranges/javaInterop/withIndex/javaArrayOfMaybeNullableWithIndexWithNotNullLoopVariableFailFast.kt");
        }

        @TestMetadata("javaCollectionOfExplicitNotNullWithIndexFailFast.kt")
        public void ignoreJavaCollectionOfExplicitNotNullWithIndexFailFast() {
          runTest("compiler/testData/codegen/box/ranges/javaInterop/withIndex/javaCollectionOfExplicitNotNullWithIndexFailFast.kt");
        }

        @TestMetadata("javaCollectionOfMaybeNullableWithIndexWithNotNullLoopVariableFailFast.kt")
        public void ignoreJavaCollectionOfMaybeNullableWithIndexWithNotNullLoopVariableFailFast() {
          runTest("compiler/testData/codegen/box/ranges/javaInterop/withIndex/javaCollectionOfMaybeNullableWithIndexWithNotNullLoopVariableFailFast.kt");
        }

        @TestMetadata("javaIteratorOfNotNullWithIndexFailFast.kt")
        public void ignoreJavaIteratorOfNotNullWithIndexFailFast() {
          runTest("compiler/testData/codegen/box/ranges/javaInterop/withIndex/javaIteratorOfNotNullWithIndexFailFast.kt");
        }

        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        public void testAllFilesPresentInWithIndex() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/javaInterop/withIndex"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("javaArrayOfInheritedNotNullWithIndex.kt")
        public void testJavaArrayOfInheritedNotNullWithIndex() {
          runTest("compiler/testData/codegen/box/ranges/javaInterop/withIndex/javaArrayOfInheritedNotNullWithIndex.kt");
        }

        @TestMetadata("javaArrayOfMaybeNullableWithIndex.kt")
        public void testJavaArrayOfMaybeNullableWithIndex() {
          runTest("compiler/testData/codegen/box/ranges/javaInterop/withIndex/javaArrayOfMaybeNullableWithIndex.kt");
        }

        @TestMetadata("javaArrayOfMaybeNullableWithIndexWithNotNullLoopVariable.kt")
        public void testJavaArrayOfMaybeNullableWithIndexWithNotNullLoopVariable() {
          runTest("compiler/testData/codegen/box/ranges/javaInterop/withIndex/javaArrayOfMaybeNullableWithIndexWithNotNullLoopVariable.kt");
        }

        @TestMetadata("javaCollectionOfExplicitNotNullWithIndex.kt")
        public void testJavaCollectionOfExplicitNotNullWithIndex() {
          runTest("compiler/testData/codegen/box/ranges/javaInterop/withIndex/javaCollectionOfExplicitNotNullWithIndex.kt");
        }

        @TestMetadata("javaCollectionOfExplicitNullableWithIndex.kt")
        public void testJavaCollectionOfExplicitNullableWithIndex() {
          runTest("compiler/testData/codegen/box/ranges/javaInterop/withIndex/javaCollectionOfExplicitNullableWithIndex.kt");
        }

        @TestMetadata("javaCollectionOfMaybeNullableWithIndex.kt")
        public void testJavaCollectionOfMaybeNullableWithIndex() {
          runTest("compiler/testData/codegen/box/ranges/javaInterop/withIndex/javaCollectionOfMaybeNullableWithIndex.kt");
        }

        @TestMetadata("javaCollectionOfMaybeNullableWithIndexWithNotNullLoopVariable.kt")
        public void testJavaCollectionOfMaybeNullableWithIndexWithNotNullLoopVariable() {
          runTest("compiler/testData/codegen/box/ranges/javaInterop/withIndex/javaCollectionOfMaybeNullableWithIndexWithNotNullLoopVariable.kt");
        }

        @TestMetadata("javaIteratorOfNotNullWithIndex.kt")
        public void testJavaIteratorOfNotNullWithIndex() {
          runTest("compiler/testData/codegen/box/ranges/javaInterop/withIndex/javaIteratorOfNotNullWithIndex.kt");
        }
      }
    }

    @TestMetadata("compiler/testData/codegen/box/ranges/literal")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Literal extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInLiteral() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/literal"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("emptyDownto.kt")
      public void testEmptyDownto() {
        runTest("compiler/testData/codegen/box/ranges/literal/emptyDownto.kt");
      }

      @TestMetadata("emptyRange.kt")
      public void testEmptyRange() {
        runTest("compiler/testData/codegen/box/ranges/literal/emptyRange.kt");
      }

      @TestMetadata("inexactDownToMinValue.kt")
      public void testInexactDownToMinValue() {
        runTest("compiler/testData/codegen/box/ranges/literal/inexactDownToMinValue.kt");
      }

      @TestMetadata("inexactSteppedDownTo.kt")
      public void testInexactSteppedDownTo() {
        runTest("compiler/testData/codegen/box/ranges/literal/inexactSteppedDownTo.kt");
      }

      @TestMetadata("inexactSteppedRange.kt")
      public void testInexactSteppedRange() {
        runTest("compiler/testData/codegen/box/ranges/literal/inexactSteppedRange.kt");
      }

      @TestMetadata("inexactToMaxValue.kt")
      public void testInexactToMaxValue() {
        runTest("compiler/testData/codegen/box/ranges/literal/inexactToMaxValue.kt");
      }

      @TestMetadata("maxValueMinusTwoToMaxValue.kt")
      public void testMaxValueMinusTwoToMaxValue() {
        runTest("compiler/testData/codegen/box/ranges/literal/maxValueMinusTwoToMaxValue.kt");
      }

      @TestMetadata("maxValueToMaxValue.kt")
      public void testMaxValueToMaxValue() {
        runTest("compiler/testData/codegen/box/ranges/literal/maxValueToMaxValue.kt");
      }

      @TestMetadata("maxValueToMinValue.kt")
      public void testMaxValueToMinValue() {
        runTest("compiler/testData/codegen/box/ranges/literal/maxValueToMinValue.kt");
      }

      @TestMetadata("oneElementDownTo.kt")
      public void testOneElementDownTo() {
        runTest("compiler/testData/codegen/box/ranges/literal/oneElementDownTo.kt");
      }

      @TestMetadata("oneElementRange.kt")
      public void testOneElementRange() {
        runTest("compiler/testData/codegen/box/ranges/literal/oneElementRange.kt");
      }

      @TestMetadata("openRange.kt")
      public void testOpenRange() {
        runTest("compiler/testData/codegen/box/ranges/literal/openRange.kt");
      }

      @TestMetadata("openRangeUntil.kt")
      public void testOpenRangeUntil() {
        runTest("compiler/testData/codegen/box/ranges/literal/openRangeUntil.kt");
      }

      @TestMetadata("overflowZeroDownToMaxValue.kt")
      public void testOverflowZeroDownToMaxValue() {
        runTest("compiler/testData/codegen/box/ranges/literal/overflowZeroDownToMaxValue.kt");
      }

      @TestMetadata("overflowZeroToMinValue.kt")
      public void testOverflowZeroToMinValue() {
        runTest("compiler/testData/codegen/box/ranges/literal/overflowZeroToMinValue.kt");
      }

      @TestMetadata("progressionDownToMinValue.kt")
      public void testProgressionDownToMinValue() {
        runTest("compiler/testData/codegen/box/ranges/literal/progressionDownToMinValue.kt");
      }

      @TestMetadata("progressionMaxValueMinusTwoToMaxValue.kt")
      public void testProgressionMaxValueMinusTwoToMaxValue() {
        runTest("compiler/testData/codegen/box/ranges/literal/progressionMaxValueMinusTwoToMaxValue.kt");
      }

      @TestMetadata("progressionMaxValueToMaxValue.kt")
      public void testProgressionMaxValueToMaxValue() {
        runTest("compiler/testData/codegen/box/ranges/literal/progressionMaxValueToMaxValue.kt");
      }

      @TestMetadata("progressionMaxValueToMinValue.kt")
      public void testProgressionMaxValueToMinValue() {
        runTest("compiler/testData/codegen/box/ranges/literal/progressionMaxValueToMinValue.kt");
      }

      @TestMetadata("progressionMinValueToMinValue.kt")
      public void testProgressionMinValueToMinValue() {
        runTest("compiler/testData/codegen/box/ranges/literal/progressionMinValueToMinValue.kt");
      }

      @TestMetadata("reversedBackSequence.kt")
      public void testReversedBackSequence() {
        runTest("compiler/testData/codegen/box/ranges/literal/reversedBackSequence.kt");
      }

      @TestMetadata("reversedEmptyBackSequence.kt")
      public void testReversedEmptyBackSequence() {
        runTest("compiler/testData/codegen/box/ranges/literal/reversedEmptyBackSequence.kt");
      }

      @TestMetadata("reversedEmptyRange.kt")
      public void testReversedEmptyRange() {
        runTest("compiler/testData/codegen/box/ranges/literal/reversedEmptyRange.kt");
      }

      @TestMetadata("reversedInexactSteppedDownTo.kt")
      public void testReversedInexactSteppedDownTo() {
        runTest("compiler/testData/codegen/box/ranges/literal/reversedInexactSteppedDownTo.kt");
      }

      @TestMetadata("reversedRange.kt")
      public void testReversedRange() {
        runTest("compiler/testData/codegen/box/ranges/literal/reversedRange.kt");
      }

      @TestMetadata("reversedSimpleSteppedRange.kt")
      public void testReversedSimpleSteppedRange() {
        runTest("compiler/testData/codegen/box/ranges/literal/reversedSimpleSteppedRange.kt");
      }

      @TestMetadata("simpleDownTo.kt")
      public void testSimpleDownTo() {
        runTest("compiler/testData/codegen/box/ranges/literal/simpleDownTo.kt");
      }

      @TestMetadata("simpleRange.kt")
      public void testSimpleRange() {
        runTest("compiler/testData/codegen/box/ranges/literal/simpleRange.kt");
      }

      @TestMetadata("simpleRangeWithNonConstantEnds.kt")
      public void testSimpleRangeWithNonConstantEnds() {
        runTest("compiler/testData/codegen/box/ranges/literal/simpleRangeWithNonConstantEnds.kt");
      }

      @TestMetadata("simpleSteppedDownTo.kt")
      public void testSimpleSteppedDownTo() {
        runTest("compiler/testData/codegen/box/ranges/literal/simpleSteppedDownTo.kt");
      }

      @TestMetadata("simpleSteppedRange.kt")
      public void testSimpleSteppedRange() {
        runTest("compiler/testData/codegen/box/ranges/literal/simpleSteppedRange.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/ranges/nullableLoopParameter")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class NullableLoopParameter extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInNullableLoopParameter() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/nullableLoopParameter"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("progressionExpression.kt")
      public void testProgressionExpression() {
        runTest("compiler/testData/codegen/box/ranges/nullableLoopParameter/progressionExpression.kt");
      }

      @TestMetadata("rangeExpression.kt")
      public void testRangeExpression() {
        runTest("compiler/testData/codegen/box/ranges/nullableLoopParameter/rangeExpression.kt");
      }

      @TestMetadata("rangeLiteral.kt")
      public void testRangeLiteral() {
        runTest("compiler/testData/codegen/box/ranges/nullableLoopParameter/rangeLiteral.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/ranges/unsigned")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Unsigned extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInUnsigned() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/unsigned"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("bitShifting.kt")
      public void testBitShifting() {
        runTest("compiler/testData/codegen/box/ranges/unsigned/bitShifting.kt");
      }

      @TestMetadata("inMixedUnsignedRange.kt")
      public void testInMixedUnsignedRange() {
        runTest("compiler/testData/codegen/box/ranges/unsigned/inMixedUnsignedRange.kt");
      }

      @TestMetadata("kt35004.kt")
      public void testKt35004() {
        runTest("compiler/testData/codegen/box/ranges/unsigned/kt35004.kt");
      }

      @TestMetadata("kt36953.kt")
      public void testKt36953() {
        runTest("compiler/testData/codegen/box/ranges/unsigned/kt36953.kt");
      }

      @TestMetadata("kt36953_continue.kt")
      public void testKt36953_continue() {
        runTest("compiler/testData/codegen/box/ranges/unsigned/kt36953_continue.kt");
      }

      @TestMetadata("outOfBoundsInMixedContains.kt")
      public void testOutOfBoundsInMixedContains() {
        runTest("compiler/testData/codegen/box/ranges/unsigned/outOfBoundsInMixedContains.kt");
      }

      @TestMetadata("compiler/testData/codegen/box/ranges/unsigned/expression")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class Expression extends AbstractLightAnalysisModeTest {
        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        public void testAllFilesPresentInExpression() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/unsigned/expression"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("emptyDownto.kt")
        public void testEmptyDownto() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/expression/emptyDownto.kt");
        }

        @TestMetadata("emptyRange.kt")
        public void testEmptyRange() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/expression/emptyRange.kt");
        }

        @TestMetadata("inexactDownToMinValue.kt")
        public void testInexactDownToMinValue() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/expression/inexactDownToMinValue.kt");
        }

        @TestMetadata("inexactSteppedDownTo.kt")
        public void testInexactSteppedDownTo() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/expression/inexactSteppedDownTo.kt");
        }

        @TestMetadata("inexactSteppedRange.kt")
        public void testInexactSteppedRange() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/expression/inexactSteppedRange.kt");
        }

        @TestMetadata("inexactToMaxValue.kt")
        public void testInexactToMaxValue() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/expression/inexactToMaxValue.kt");
        }

        @TestMetadata("maxValueMinusTwoToMaxValue.kt")
        public void testMaxValueMinusTwoToMaxValue() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/expression/maxValueMinusTwoToMaxValue.kt");
        }

        @TestMetadata("maxValueToMaxValue.kt")
        public void testMaxValueToMaxValue() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/expression/maxValueToMaxValue.kt");
        }

        @TestMetadata("maxValueToMinValue.kt")
        public void testMaxValueToMinValue() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/expression/maxValueToMinValue.kt");
        }

        @TestMetadata("oneElementDownTo.kt")
        public void testOneElementDownTo() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/expression/oneElementDownTo.kt");
        }

        @TestMetadata("oneElementRange.kt")
        public void testOneElementRange() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/expression/oneElementRange.kt");
        }

        @TestMetadata("openRange.kt")
        public void testOpenRange() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/expression/openRange.kt");
        }

        @TestMetadata("openRangeUntil.kt")
        public void testOpenRangeUntil() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/expression/openRangeUntil.kt");
        }

        @TestMetadata("overflowZeroDownToMaxValue.kt")
        public void testOverflowZeroDownToMaxValue() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/expression/overflowZeroDownToMaxValue.kt");
        }

        @TestMetadata("overflowZeroToMinValue.kt")
        public void testOverflowZeroToMinValue() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/expression/overflowZeroToMinValue.kt");
        }

        @TestMetadata("progressionDownToMinValue.kt")
        public void testProgressionDownToMinValue() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/expression/progressionDownToMinValue.kt");
        }

        @TestMetadata("progressionMaxValueMinusTwoToMaxValue.kt")
        public void testProgressionMaxValueMinusTwoToMaxValue() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/expression/progressionMaxValueMinusTwoToMaxValue.kt");
        }

        @TestMetadata("progressionMaxValueToMaxValue.kt")
        public void testProgressionMaxValueToMaxValue() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/expression/progressionMaxValueToMaxValue.kt");
        }

        @TestMetadata("progressionMaxValueToMinValue.kt")
        public void testProgressionMaxValueToMinValue() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/expression/progressionMaxValueToMinValue.kt");
        }

        @TestMetadata("progressionMinValueToMinValue.kt")
        public void testProgressionMinValueToMinValue() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/expression/progressionMinValueToMinValue.kt");
        }

        @TestMetadata("reversedBackSequence.kt")
        public void testReversedBackSequence() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/expression/reversedBackSequence.kt");
        }

        @TestMetadata("reversedEmptyBackSequence.kt")
        public void testReversedEmptyBackSequence() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/expression/reversedEmptyBackSequence.kt");
        }

        @TestMetadata("reversedEmptyRange.kt")
        public void testReversedEmptyRange() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/expression/reversedEmptyRange.kt");
        }

        @TestMetadata("reversedInexactSteppedDownTo.kt")
        public void testReversedInexactSteppedDownTo() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/expression/reversedInexactSteppedDownTo.kt");
        }

        @TestMetadata("reversedRange.kt")
        public void testReversedRange() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/expression/reversedRange.kt");
        }

        @TestMetadata("reversedSimpleSteppedRange.kt")
        public void testReversedSimpleSteppedRange() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/expression/reversedSimpleSteppedRange.kt");
        }

        @TestMetadata("simpleDownTo.kt")
        public void testSimpleDownTo() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/expression/simpleDownTo.kt");
        }

        @TestMetadata("simpleRange.kt")
        public void testSimpleRange() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/expression/simpleRange.kt");
        }

        @TestMetadata("simpleRangeWithNonConstantEnds.kt")
        public void testSimpleRangeWithNonConstantEnds() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/expression/simpleRangeWithNonConstantEnds.kt");
        }

        @TestMetadata("simpleSteppedDownTo.kt")
        public void testSimpleSteppedDownTo() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/expression/simpleSteppedDownTo.kt");
        }

        @TestMetadata("simpleSteppedRange.kt")
        public void testSimpleSteppedRange() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/expression/simpleSteppedRange.kt");
        }
      }

      @TestMetadata("compiler/testData/codegen/box/ranges/unsigned/literal")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class Literal extends AbstractLightAnalysisModeTest {
        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        public void testAllFilesPresentInLiteral() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/unsigned/literal"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("emptyDownto.kt")
        public void testEmptyDownto() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/literal/emptyDownto.kt");
        }

        @TestMetadata("emptyRange.kt")
        public void testEmptyRange() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/literal/emptyRange.kt");
        }

        @TestMetadata("inexactDownToMinValue.kt")
        public void testInexactDownToMinValue() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/literal/inexactDownToMinValue.kt");
        }

        @TestMetadata("inexactSteppedDownTo.kt")
        public void testInexactSteppedDownTo() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/literal/inexactSteppedDownTo.kt");
        }

        @TestMetadata("inexactSteppedRange.kt")
        public void testInexactSteppedRange() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/literal/inexactSteppedRange.kt");
        }

        @TestMetadata("inexactToMaxValue.kt")
        public void testInexactToMaxValue() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/literal/inexactToMaxValue.kt");
        }

        @TestMetadata("maxValueMinusTwoToMaxValue.kt")
        public void testMaxValueMinusTwoToMaxValue() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/literal/maxValueMinusTwoToMaxValue.kt");
        }

        @TestMetadata("maxValueToMaxValue.kt")
        public void testMaxValueToMaxValue() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/literal/maxValueToMaxValue.kt");
        }

        @TestMetadata("maxValueToMinValue.kt")
        public void testMaxValueToMinValue() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/literal/maxValueToMinValue.kt");
        }

        @TestMetadata("oneElementDownTo.kt")
        public void testOneElementDownTo() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/literal/oneElementDownTo.kt");
        }

        @TestMetadata("oneElementRange.kt")
        public void testOneElementRange() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/literal/oneElementRange.kt");
        }

        @TestMetadata("openRange.kt")
        public void testOpenRange() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/literal/openRange.kt");
        }

        @TestMetadata("openRangeUntil.kt")
        public void testOpenRangeUntil() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/literal/openRangeUntil.kt");
        }

        @TestMetadata("overflowZeroDownToMaxValue.kt")
        public void testOverflowZeroDownToMaxValue() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/literal/overflowZeroDownToMaxValue.kt");
        }

        @TestMetadata("overflowZeroToMinValue.kt")
        public void testOverflowZeroToMinValue() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/literal/overflowZeroToMinValue.kt");
        }

        @TestMetadata("progressionDownToMinValue.kt")
        public void testProgressionDownToMinValue() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/literal/progressionDownToMinValue.kt");
        }

        @TestMetadata("progressionMaxValueMinusTwoToMaxValue.kt")
        public void testProgressionMaxValueMinusTwoToMaxValue() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/literal/progressionMaxValueMinusTwoToMaxValue.kt");
        }

        @TestMetadata("progressionMaxValueToMaxValue.kt")
        public void testProgressionMaxValueToMaxValue() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/literal/progressionMaxValueToMaxValue.kt");
        }

        @TestMetadata("progressionMaxValueToMinValue.kt")
        public void testProgressionMaxValueToMinValue() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/literal/progressionMaxValueToMinValue.kt");
        }

        @TestMetadata("progressionMinValueToMinValue.kt")
        public void testProgressionMinValueToMinValue() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/literal/progressionMinValueToMinValue.kt");
        }

        @TestMetadata("reversedBackSequence.kt")
        public void testReversedBackSequence() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/literal/reversedBackSequence.kt");
        }

        @TestMetadata("reversedEmptyBackSequence.kt")
        public void testReversedEmptyBackSequence() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/literal/reversedEmptyBackSequence.kt");
        }

        @TestMetadata("reversedEmptyRange.kt")
        public void testReversedEmptyRange() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/literal/reversedEmptyRange.kt");
        }

        @TestMetadata("reversedInexactSteppedDownTo.kt")
        public void testReversedInexactSteppedDownTo() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/literal/reversedInexactSteppedDownTo.kt");
        }

        @TestMetadata("reversedRange.kt")
        public void testReversedRange() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/literal/reversedRange.kt");
        }

        @TestMetadata("reversedSimpleSteppedRange.kt")
        public void testReversedSimpleSteppedRange() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/literal/reversedSimpleSteppedRange.kt");
        }

        @TestMetadata("simpleDownTo.kt")
        public void testSimpleDownTo() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/literal/simpleDownTo.kt");
        }

        @TestMetadata("simpleRange.kt")
        public void testSimpleRange() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/literal/simpleRange.kt");
        }

        @TestMetadata("simpleRangeWithNonConstantEnds.kt")
        public void testSimpleRangeWithNonConstantEnds() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/literal/simpleRangeWithNonConstantEnds.kt");
        }

        @TestMetadata("simpleSteppedDownTo.kt")
        public void testSimpleSteppedDownTo() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/literal/simpleSteppedDownTo.kt");
        }

        @TestMetadata("simpleSteppedRange.kt")
        public void testSimpleSteppedRange() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/literal/simpleSteppedRange.kt");
        }
      }

      @TestMetadata("compiler/testData/codegen/box/ranges/unsigned/nullableLoopParameter")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class NullableLoopParameter extends AbstractLightAnalysisModeTest {
        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        public void testAllFilesPresentInNullableLoopParameter() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/unsigned/nullableLoopParameter"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("progressionExpression.kt")
        public void testProgressionExpression() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/nullableLoopParameter/progressionExpression.kt");
        }

        @TestMetadata("rangeExpression.kt")
        public void testRangeExpression() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/nullableLoopParameter/rangeExpression.kt");
        }

        @TestMetadata("rangeLiteral.kt")
        public void testRangeLiteral() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/nullableLoopParameter/rangeLiteral.kt");
        }
      }
    }
  }

  @TestMetadata("compiler/testData/codegen/box/recursiveRawTypes")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class RecursiveRawTypes extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInRecursiveRawTypes() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/recursiveRawTypes"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("kt16528.kt")
    public void testKt16528() {
      runTest("compiler/testData/codegen/box/recursiveRawTypes/kt16528.kt");
    }

    @TestMetadata("kt16639.kt")
    public void testKt16639() {
      runTest("compiler/testData/codegen/box/recursiveRawTypes/kt16639.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/reflection")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Reflection extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInReflection() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("jvmKPackageCaching.kt")
    public void testJvmKPackageCaching() {
      runTest("compiler/testData/codegen/box/reflection/jvmKPackageCaching.kt");
    }

    @TestMetadata("jvmKTypeCaching.kt")
    public void testJvmKTypeCaching() {
      runTest("compiler/testData/codegen/box/reflection/jvmKTypeCaching.kt");
    }

    @TestMetadata("kt63988.kt")
    public void testKt63988() {
      runTest("compiler/testData/codegen/box/reflection/kt63988.kt");
    }

    @TestMetadata("compiler/testData/codegen/box/reflection/annotations")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Annotations extends AbstractLightAnalysisModeTest {
      @TestMetadata("spread.kt")
      public void ignoreSpread() {
        runTest("compiler/testData/codegen/box/reflection/annotations/spread.kt");
      }

      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInAnnotations() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/annotations"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("annotationRetentionAnnotation.kt")
      public void testAnnotationRetentionAnnotation() {
        runTest("compiler/testData/codegen/box/reflection/annotations/annotationRetentionAnnotation.kt");
      }

      @TestMetadata("annotationsOnJavaMembers.kt")
      public void testAnnotationsOnJavaMembers() {
        runTest("compiler/testData/codegen/box/reflection/annotations/annotationsOnJavaMembers.kt");
      }

      @TestMetadata("classLiteralWithVoidDefault.kt")
      public void testClassLiteralWithVoidDefault() {
        runTest("compiler/testData/codegen/box/reflection/annotations/classLiteralWithVoidDefault.kt");
      }

      @TestMetadata("findAnnotation.kt")
      public void testFindAnnotation() {
        runTest("compiler/testData/codegen/box/reflection/annotations/findAnnotation.kt");
      }

      @TestMetadata("genericExtensionProperty.kt")
      public void testGenericExtensionProperty() {
        runTest("compiler/testData/codegen/box/reflection/annotations/genericExtensionProperty.kt");
      }

      @TestMetadata("hasAnnotation.kt")
      public void testHasAnnotation() {
        runTest("compiler/testData/codegen/box/reflection/annotations/hasAnnotation.kt");
      }

      @TestMetadata("localClassLiteral.kt")
      public void testLocalClassLiteral() {
        runTest("compiler/testData/codegen/box/reflection/annotations/localClassLiteral.kt");
      }

      @TestMetadata("localClassParameterAnnotation.kt")
      public void testLocalClassParameterAnnotation() {
        runTest("compiler/testData/codegen/box/reflection/annotations/localClassParameterAnnotation.kt");
      }

      @TestMetadata("openSuspendFun.kt")
      public void testOpenSuspendFun() {
        runTest("compiler/testData/codegen/box/reflection/annotations/openSuspendFun.kt");
      }

      @TestMetadata("privateAnnotation.kt")
      public void testPrivateAnnotation() {
        runTest("compiler/testData/codegen/box/reflection/annotations/privateAnnotation.kt");
      }

      @TestMetadata("propertyAccessors.kt")
      public void testPropertyAccessors() {
        runTest("compiler/testData/codegen/box/reflection/annotations/propertyAccessors.kt");
      }

      @TestMetadata("propertyWithoutBackingField.kt")
      public void testPropertyWithoutBackingField() {
        runTest("compiler/testData/codegen/box/reflection/annotations/propertyWithoutBackingField.kt");
      }

      @TestMetadata("retentions.kt")
      public void testRetentions() {
        runTest("compiler/testData/codegen/box/reflection/annotations/retentions.kt");
      }

      @TestMetadata("setparam.kt")
      public void testSetparam() {
        runTest("compiler/testData/codegen/box/reflection/annotations/setparam.kt");
      }

      @TestMetadata("simpleClassAnnotation.kt")
      public void testSimpleClassAnnotation() {
        runTest("compiler/testData/codegen/box/reflection/annotations/simpleClassAnnotation.kt");
      }

      @TestMetadata("simpleConstructorAnnotation.kt")
      public void testSimpleConstructorAnnotation() {
        runTest("compiler/testData/codegen/box/reflection/annotations/simpleConstructorAnnotation.kt");
      }

      @TestMetadata("simpleFunAnnotation.kt")
      public void testSimpleFunAnnotation() {
        runTest("compiler/testData/codegen/box/reflection/annotations/simpleFunAnnotation.kt");
      }

      @TestMetadata("simpleParamAnnotation.kt")
      public void testSimpleParamAnnotation() {
        runTest("compiler/testData/codegen/box/reflection/annotations/simpleParamAnnotation.kt");
      }

      @TestMetadata("simpleValAnnotation.kt")
      public void testSimpleValAnnotation() {
        runTest("compiler/testData/codegen/box/reflection/annotations/simpleValAnnotation.kt");
      }

      @TestMetadata("compiler/testData/codegen/box/reflection/annotations/onTypes")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class OnTypes extends AbstractLightAnalysisModeTest {
        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        public void testAllFilesPresentInOnTypes() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/annotations/onTypes"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("arrayKClass.kt")
        public void testArrayKClass() {
          runTest("compiler/testData/codegen/box/reflection/annotations/onTypes/arrayKClass.kt");
        }

        @TestMetadata("arrayTypeInDefaultPackage.kt")
        public void testArrayTypeInDefaultPackage() {
          runTest("compiler/testData/codegen/box/reflection/annotations/onTypes/arrayTypeInDefaultPackage.kt");
        }

        @TestMetadata("classLiteralWithExpectedType.kt")
        public void testClassLiteralWithExpectedType() {
          runTest("compiler/testData/codegen/box/reflection/annotations/onTypes/classLiteralWithExpectedType.kt");
        }

        @TestMetadata("differentArgumentTypes.kt")
        public void testDifferentArgumentTypes() {
          runTest("compiler/testData/codegen/box/reflection/annotations/onTypes/differentArgumentTypes.kt");
        }

        @TestMetadata("differentPositions.kt")
        public void testDifferentPositions() {
          runTest("compiler/testData/codegen/box/reflection/annotations/onTypes/differentPositions.kt");
        }
      }

      @TestMetadata("compiler/testData/codegen/box/reflection/annotations/repeatable")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class Repeatable extends AbstractLightAnalysisModeTest {
        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        public void testAllFilesPresentInRepeatable() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/annotations/repeatable"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("javaAnnotation.kt")
        public void testJavaAnnotation() {
          runTest("compiler/testData/codegen/box/reflection/annotations/repeatable/javaAnnotation.kt");
        }

        @TestMetadata("jvmRepeatableKotlinAnnotation.kt")
        public void testJvmRepeatableKotlinAnnotation() {
          runTest("compiler/testData/codegen/box/reflection/annotations/repeatable/jvmRepeatableKotlinAnnotation.kt");
        }

        @TestMetadata("kotlinAnnotation.kt")
        public void testKotlinAnnotation() {
          runTest("compiler/testData/codegen/box/reflection/annotations/repeatable/kotlinAnnotation.kt");
        }

        @TestMetadata("kotlinAnnotationOnType.kt")
        public void testKotlinAnnotationOnType() {
          runTest("compiler/testData/codegen/box/reflection/annotations/repeatable/kotlinAnnotationOnType.kt");
        }

        @TestMetadata("kt49335.kt")
        public void testKt49335() {
          runTest("compiler/testData/codegen/box/reflection/annotations/repeatable/kt49335.kt");
        }

        @TestMetadata("kt53279_explicitContainer.kt")
        public void testKt53279_explicitContainer() {
          runTest("compiler/testData/codegen/box/reflection/annotations/repeatable/kt53279_explicitContainer.kt");
        }

        @TestMetadata("kt53279_implicitContainer.kt")
        public void testKt53279_implicitContainer() {
          runTest("compiler/testData/codegen/box/reflection/annotations/repeatable/kt53279_implicitContainer.kt");
        }

        @TestMetadata("nonRepeatedAnnotationWithItsContainer.kt")
        public void testNonRepeatedAnnotationWithItsContainer() {
          runTest("compiler/testData/codegen/box/reflection/annotations/repeatable/nonRepeatedAnnotationWithItsContainer.kt");
        }
      }
    }

    @TestMetadata("compiler/testData/codegen/box/reflection/builtins")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Builtins extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInBuiltins() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/builtins"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("collections.kt")
      public void testCollections() {
        runTest("compiler/testData/codegen/box/reflection/builtins/collections.kt");
      }

      @TestMetadata("enumNameOrdinal.kt")
      public void testEnumNameOrdinal() {
        runTest("compiler/testData/codegen/box/reflection/builtins/enumNameOrdinal.kt");
      }

      @TestMetadata("stringLength.kt")
      public void testStringLength() {
        runTest("compiler/testData/codegen/box/reflection/builtins/stringLength.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/reflection/call")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Call extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInCall() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/call"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("bigArity.kt")
      public void testBigArity() {
        runTest("compiler/testData/codegen/box/reflection/call/bigArity.kt");
      }

      @TestMetadata("callInstanceJavaMethod.kt")
      public void testCallInstanceJavaMethod() {
        runTest("compiler/testData/codegen/box/reflection/call/callInstanceJavaMethod.kt");
      }

      @TestMetadata("callPrivateJavaMethod.kt")
      public void testCallPrivateJavaMethod() {
        runTest("compiler/testData/codegen/box/reflection/call/callPrivateJavaMethod.kt");
      }

      @TestMetadata("callStaticJavaMethod.kt")
      public void testCallStaticJavaMethod() {
        runTest("compiler/testData/codegen/box/reflection/call/callStaticJavaMethod.kt");
      }

      @TestMetadata("cannotCallEnumConstructor.kt")
      public void testCannotCallEnumConstructor() {
        runTest("compiler/testData/codegen/box/reflection/call/cannotCallEnumConstructor.kt");
      }

      @TestMetadata("disallowNullValueForNotNullField.kt")
      public void testDisallowNullValueForNotNullField() {
        runTest("compiler/testData/codegen/box/reflection/call/disallowNullValueForNotNullField.kt");
      }

      @TestMetadata("equalsHashCodeToString.kt")
      public void testEqualsHashCodeToString() {
        runTest("compiler/testData/codegen/box/reflection/call/equalsHashCodeToString.kt");
      }

      @TestMetadata("exceptionHappened.kt")
      public void testExceptionHappened() {
        runTest("compiler/testData/codegen/box/reflection/call/exceptionHappened.kt");
      }

      @TestMetadata("fakeOverride.kt")
      public void testFakeOverride() {
        runTest("compiler/testData/codegen/box/reflection/call/fakeOverride.kt");
      }

      @TestMetadata("fakeOverrideSubstituted.kt")
      public void testFakeOverrideSubstituted() {
        runTest("compiler/testData/codegen/box/reflection/call/fakeOverrideSubstituted.kt");
      }

      @TestMetadata("incorrectNumberOfArguments.kt")
      public void testIncorrectNumberOfArguments() {
        runTest("compiler/testData/codegen/box/reflection/call/incorrectNumberOfArguments.kt");
      }

      @TestMetadata("innerClassConstructor.kt")
      public void testInnerClassConstructor() {
        runTest("compiler/testData/codegen/box/reflection/call/innerClassConstructor.kt");
      }

      @TestMetadata("jvmStatic.kt")
      public void testJvmStatic() {
        runTest("compiler/testData/codegen/box/reflection/call/jvmStatic.kt");
      }

      @TestMetadata("jvmStaticInObjectIncorrectReceiver.kt")
      public void testJvmStaticInObjectIncorrectReceiver() {
        runTest("compiler/testData/codegen/box/reflection/call/jvmStaticInObjectIncorrectReceiver.kt");
      }

      @TestMetadata("localClassMember.kt")
      public void testLocalClassMember() {
        runTest("compiler/testData/codegen/box/reflection/call/localClassMember.kt");
      }

      @TestMetadata("memberOfGenericClass.kt")
      public void testMemberOfGenericClass() {
        runTest("compiler/testData/codegen/box/reflection/call/memberOfGenericClass.kt");
      }

      @TestMetadata("privateProperty.kt")
      public void testPrivateProperty() {
        runTest("compiler/testData/codegen/box/reflection/call/privateProperty.kt");
      }

      @TestMetadata("propertyAccessors.kt")
      public void testPropertyAccessors() {
        runTest("compiler/testData/codegen/box/reflection/call/propertyAccessors.kt");
      }

      @TestMetadata("propertyGetterAndGetFunctionDifferentReturnType.kt")
      public void testPropertyGetterAndGetFunctionDifferentReturnType() {
        runTest("compiler/testData/codegen/box/reflection/call/propertyGetterAndGetFunctionDifferentReturnType.kt");
      }

      @TestMetadata("protectedMembers.kt")
      public void testProtectedMembers() {
        runTest("compiler/testData/codegen/box/reflection/call/protectedMembers.kt");
      }

      @TestMetadata("returnUnit.kt")
      public void testReturnUnit() {
        runTest("compiler/testData/codegen/box/reflection/call/returnUnit.kt");
      }

      @TestMetadata("simpleConstructor.kt")
      public void testSimpleConstructor() {
        runTest("compiler/testData/codegen/box/reflection/call/simpleConstructor.kt");
      }

      @TestMetadata("simpleMemberFunction.kt")
      public void testSimpleMemberFunction() {
        runTest("compiler/testData/codegen/box/reflection/call/simpleMemberFunction.kt");
      }

      @TestMetadata("simpleTopLevelFunctions.kt")
      public void testSimpleTopLevelFunctions() {
        runTest("compiler/testData/codegen/box/reflection/call/simpleTopLevelFunctions.kt");
      }

      @TestMetadata("compiler/testData/codegen/box/reflection/call/bound")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class Bound extends AbstractLightAnalysisModeTest {
        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        public void testAllFilesPresentInBound() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/call/bound"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("companionObjectPropertyAccessors.kt")
        public void testCompanionObjectPropertyAccessors() {
          runTest("compiler/testData/codegen/box/reflection/call/bound/companionObjectPropertyAccessors.kt");
        }

        @TestMetadata("extensionFunction.kt")
        public void testExtensionFunction() {
          runTest("compiler/testData/codegen/box/reflection/call/bound/extensionFunction.kt");
        }

        @TestMetadata("extensionPropertyAccessors.kt")
        public void testExtensionPropertyAccessors() {
          runTest("compiler/testData/codegen/box/reflection/call/bound/extensionPropertyAccessors.kt");
        }

        @TestMetadata("innerClassConstructor.kt")
        public void testInnerClassConstructor() {
          runTest("compiler/testData/codegen/box/reflection/call/bound/innerClassConstructor.kt");
        }

        @TestMetadata("javaInstanceField.kt")
        public void testJavaInstanceField() {
          runTest("compiler/testData/codegen/box/reflection/call/bound/javaInstanceField.kt");
        }

        @TestMetadata("javaInstanceMethod.kt")
        public void testJavaInstanceMethod() {
          runTest("compiler/testData/codegen/box/reflection/call/bound/javaInstanceMethod.kt");
        }

        @TestMetadata("jvmStaticCompanionObjectPropertyAccessors.kt")
        public void testJvmStaticCompanionObjectPropertyAccessors() {
          runTest("compiler/testData/codegen/box/reflection/call/bound/jvmStaticCompanionObjectPropertyAccessors.kt");
        }

        @TestMetadata("jvmStaticObjectFunction.kt")
        public void testJvmStaticObjectFunction() {
          runTest("compiler/testData/codegen/box/reflection/call/bound/jvmStaticObjectFunction.kt");
        }

        @TestMetadata("jvmStaticObjectPropertyAccessors.kt")
        public void testJvmStaticObjectPropertyAccessors() {
          runTest("compiler/testData/codegen/box/reflection/call/bound/jvmStaticObjectPropertyAccessors.kt");
        }

        @TestMetadata("memberFunction.kt")
        public void testMemberFunction() {
          runTest("compiler/testData/codegen/box/reflection/call/bound/memberFunction.kt");
        }

        @TestMetadata("memberPropertyAccessors.kt")
        public void testMemberPropertyAccessors() {
          runTest("compiler/testData/codegen/box/reflection/call/bound/memberPropertyAccessors.kt");
        }

        @TestMetadata("objectFunction.kt")
        public void testObjectFunction() {
          runTest("compiler/testData/codegen/box/reflection/call/bound/objectFunction.kt");
        }

        @TestMetadata("objectPropertyAccessors.kt")
        public void testObjectPropertyAccessors() {
          runTest("compiler/testData/codegen/box/reflection/call/bound/objectPropertyAccessors.kt");
        }
      }

      @TestMetadata("compiler/testData/codegen/box/reflection/call/inlineClasses")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class InlineClasses extends AbstractLightAnalysisModeTest {
        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        private void runTest(String testDataFilePath, java.util.function.Function<String, String> transformer) {
          KotlinTestUtils.runTest(path -> doTestWithTransformer(path, transformer), TargetBackend.JVM_IR, testDataFilePath);
        }

        public void testAllFilesPresentInInlineClasses() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/call/inlineClasses"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("inlineClassConstructor.kt")
        public void testInlineClassConstructor() {
          runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/inlineClassConstructor.kt");
        }

        @TestMetadata("internalPrimaryValOfInlineClass.kt")
        public void testInternalPrimaryValOfInlineClass() {
          runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/internalPrimaryValOfInlineClass.kt");
        }

        @TestMetadata("kt58887.kt")
        public void testKt58887() {
          runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/kt58887.kt");
        }

        @TestMetadata("primaryValOfInlineClass.kt")
        public void testPrimaryValOfInlineClass() {
          runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/primaryValOfInlineClass.kt");
        }

        @TestMetadata("secondaryConstructorVisibilies.kt")
        public void testSecondaryConstructorVisibilies() {
          runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/secondaryConstructorVisibilies.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
        }

        @TestMetadata("simpleConstructorWithInlineClassParameter.kt")
        public void testSimpleConstructorWithInlineClassParameter() {
          runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/simpleConstructorWithInlineClassParameter.kt");
        }

        @TestMetadata("compiler/testData/codegen/box/reflection/call/inlineClasses/nonNullObject")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class NonNullObject extends AbstractLightAnalysisModeTest {
          private void runTest(String testDataFilePath) {
            KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
          }

          public void testAllFilesPresentInNonNullObject() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/call/inlineClasses/nonNullObject"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }

          @TestMetadata("constructorWithInlineClassParameters.kt")
          public void testConstructorWithInlineClassParameters() {
            runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/nonNullObject/constructorWithInlineClassParameters.kt");
          }

          @TestMetadata("fieldAccessors.kt")
          public void testFieldAccessors() {
            runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/nonNullObject/fieldAccessors.kt");
          }

          @TestMetadata("functionsWithInlineClassParameters.kt")
          public void testFunctionsWithInlineClassParameters() {
            runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/nonNullObject/functionsWithInlineClassParameters.kt");
          }

          @TestMetadata("jvmStaticFieldInObject.kt")
          public void testJvmStaticFieldInObject() {
            runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/nonNullObject/jvmStaticFieldInObject.kt");
          }

          @TestMetadata("jvmStaticFunction.kt")
          public void testJvmStaticFunction() {
            runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/nonNullObject/jvmStaticFunction.kt");
          }

          @TestMetadata("nonOverridingFunOfInlineClass.kt")
          public void testNonOverridingFunOfInlineClass() {
            runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/nonNullObject/nonOverridingFunOfInlineClass.kt");
          }

          @TestMetadata("nonOverridingVarOfInlineClass.kt")
          public void testNonOverridingVarOfInlineClass() {
            runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/nonNullObject/nonOverridingVarOfInlineClass.kt");
          }

          @TestMetadata("overridingFunOfInlineClass.kt")
          public void testOverridingFunOfInlineClass() {
            runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/nonNullObject/overridingFunOfInlineClass.kt");
          }

          @TestMetadata("overridingVarOfInlineClass.kt")
          public void testOverridingVarOfInlineClass() {
            runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/nonNullObject/overridingVarOfInlineClass.kt");
          }

          @TestMetadata("properties.kt")
          public void testProperties() {
            runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/nonNullObject/properties.kt");
          }

          @TestMetadata("suspendFunction.kt")
          public void testSuspendFunction() {
            runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/nonNullObject/suspendFunction.kt");
          }
        }

        @TestMetadata("compiler/testData/codegen/box/reflection/call/inlineClasses/nullableObject")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class NullableObject extends AbstractLightAnalysisModeTest {
          private void runTest(String testDataFilePath) {
            KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
          }

          public void testAllFilesPresentInNullableObject() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/call/inlineClasses/nullableObject"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }

          @TestMetadata("constructorWithInlineClassParameters.kt")
          public void testConstructorWithInlineClassParameters() {
            runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/nullableObject/constructorWithInlineClassParameters.kt");
          }

          @TestMetadata("fieldAccessors.kt")
          public void testFieldAccessors() {
            runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/nullableObject/fieldAccessors.kt");
          }

          @TestMetadata("functionsWithInlineClassParameters.kt")
          public void testFunctionsWithInlineClassParameters() {
            runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/nullableObject/functionsWithInlineClassParameters.kt");
          }

          @TestMetadata("jvmStaticFieldInObject.kt")
          public void testJvmStaticFieldInObject() {
            runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/nullableObject/jvmStaticFieldInObject.kt");
          }

          @TestMetadata("jvmStaticFunction.kt")
          public void testJvmStaticFunction() {
            runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/nullableObject/jvmStaticFunction.kt");
          }

          @TestMetadata("nonOverridingFunOfInlineClass.kt")
          public void testNonOverridingFunOfInlineClass() {
            runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/nullableObject/nonOverridingFunOfInlineClass.kt");
          }

          @TestMetadata("nonOverridingVarOfInlineClass.kt")
          public void testNonOverridingVarOfInlineClass() {
            runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/nullableObject/nonOverridingVarOfInlineClass.kt");
          }

          @TestMetadata("overridingFunOfInlineClass.kt")
          public void testOverridingFunOfInlineClass() {
            runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/nullableObject/overridingFunOfInlineClass.kt");
          }

          @TestMetadata("overridingVarOfInlineClass.kt")
          public void testOverridingVarOfInlineClass() {
            runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/nullableObject/overridingVarOfInlineClass.kt");
          }

          @TestMetadata("properties.kt")
          public void testProperties() {
            runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/nullableObject/properties.kt");
          }

          @TestMetadata("suspendFunction.kt")
          public void testSuspendFunction() {
            runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/nullableObject/suspendFunction.kt");
          }
        }

        @TestMetadata("compiler/testData/codegen/box/reflection/call/inlineClasses/primitive")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Primitive extends AbstractLightAnalysisModeTest {
          private void runTest(String testDataFilePath) {
            KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
          }

          public void testAllFilesPresentInPrimitive() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/call/inlineClasses/primitive"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }

          @TestMetadata("constructorWithInlineClassParameters.kt")
          public void testConstructorWithInlineClassParameters() {
            runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/primitive/constructorWithInlineClassParameters.kt");
          }

          @TestMetadata("fieldAccessors.kt")
          public void testFieldAccessors() {
            runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/primitive/fieldAccessors.kt");
          }

          @TestMetadata("functionsWithInlineClassParameters.kt")
          public void testFunctionsWithInlineClassParameters() {
            runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/primitive/functionsWithInlineClassParameters.kt");
          }

          @TestMetadata("jvmStaticFieldInObject.kt")
          public void testJvmStaticFieldInObject() {
            runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/primitive/jvmStaticFieldInObject.kt");
          }

          @TestMetadata("jvmStaticFunction.kt")
          public void testJvmStaticFunction() {
            runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/primitive/jvmStaticFunction.kt");
          }

          @TestMetadata("nonOverridingFunOfInlineClass.kt")
          public void testNonOverridingFunOfInlineClass() {
            runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/primitive/nonOverridingFunOfInlineClass.kt");
          }

          @TestMetadata("nonOverridingVarOfInlineClass.kt")
          public void testNonOverridingVarOfInlineClass() {
            runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/primitive/nonOverridingVarOfInlineClass.kt");
          }

          @TestMetadata("overridingFunOfInlineClass.kt")
          public void testOverridingFunOfInlineClass() {
            runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/primitive/overridingFunOfInlineClass.kt");
          }

          @TestMetadata("overridingVarOfInlineClass.kt")
          public void testOverridingVarOfInlineClass() {
            runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/primitive/overridingVarOfInlineClass.kt");
          }

          @TestMetadata("properties.kt")
          public void testProperties() {
            runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/primitive/properties.kt");
          }

          @TestMetadata("suspendFunction.kt")
          public void testSuspendFunction() {
            runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/primitive/suspendFunction.kt");
          }
        }
      }

      @TestMetadata("compiler/testData/codegen/box/reflection/call/valueClasses")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class ValueClasses extends AbstractLightAnalysisModeTest {
        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        private void runTest(String testDataFilePath, java.util.function.Function<String, String> transformer) {
          KotlinTestUtils.runTest(path -> doTestWithTransformer(path, transformer), TargetBackend.JVM_IR, testDataFilePath);
        }

        public void testAllFilesPresentInValueClasses() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/call/valueClasses"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("constructorWithMfvcParameters.kt")
        public void testConstructorWithMfvcParameters() {
          runTest("compiler/testData/codegen/box/reflection/call/valueClasses/constructorWithMfvcParameters.kt");
        }

        @TestMetadata("fieldAccessors.kt")
        public void testFieldAccessors() {
          runTest("compiler/testData/codegen/box/reflection/call/valueClasses/fieldAccessors.kt");
        }

        @TestMetadata("functionsWithMfvcParameters.kt")
        public void testFunctionsWithMfvcParameters() {
          runTest("compiler/testData/codegen/box/reflection/call/valueClasses/functionsWithMfvcParameters.kt");
        }

        @TestMetadata("internalPrimaryValOfMfvc.kt")
        public void testInternalPrimaryValOfMfvc() {
          runTest("compiler/testData/codegen/box/reflection/call/valueClasses/internalPrimaryValOfMfvc.kt");
        }

        @TestMetadata("jvmStaticFieldInObject.kt")
        public void testJvmStaticFieldInObject() {
          runTest("compiler/testData/codegen/box/reflection/call/valueClasses/jvmStaticFieldInObject.kt");
        }

        @TestMetadata("jvmStaticFunction.kt")
        public void testJvmStaticFunction() {
          runTest("compiler/testData/codegen/box/reflection/call/valueClasses/jvmStaticFunction.kt");
        }

        @TestMetadata("mfvcConstructor.kt")
        public void testMfvcConstructor() {
          runTest("compiler/testData/codegen/box/reflection/call/valueClasses/mfvcConstructor.kt");
        }

        @TestMetadata("nonOverridingFunOfMfvc.kt")
        public void testNonOverridingFunOfMfvc() {
          runTest("compiler/testData/codegen/box/reflection/call/valueClasses/nonOverridingFunOfMfvc.kt");
        }

        @TestMetadata("nonOverridingVarOfMfvc.kt")
        public void testNonOverridingVarOfMfvc() {
          runTest("compiler/testData/codegen/box/reflection/call/valueClasses/nonOverridingVarOfMfvc.kt");
        }

        @TestMetadata("overridingFunOfMfvc.kt")
        public void testOverridingFunOfMfvc() {
          runTest("compiler/testData/codegen/box/reflection/call/valueClasses/overridingFunOfMfvc.kt");
        }

        @TestMetadata("overridingVarOfMfvc.kt")
        public void testOverridingVarOfMfvc() {
          runTest("compiler/testData/codegen/box/reflection/call/valueClasses/overridingVarOfMfvc.kt");
        }

        @TestMetadata("primaryValOfMfvc.kt")
        public void testPrimaryValOfMfvc() {
          runTest("compiler/testData/codegen/box/reflection/call/valueClasses/primaryValOfMfvc.kt");
        }

        @TestMetadata("properties.kt")
        public void testProperties() {
          runTest("compiler/testData/codegen/box/reflection/call/valueClasses/properties.kt");
        }

        @TestMetadata("secondaryConstructorVisibilies.kt")
        public void testSecondaryConstructorVisibilies() {
          runTest("compiler/testData/codegen/box/reflection/call/valueClasses/secondaryConstructorVisibilies.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
        }

        @TestMetadata("suspendFunction.kt")
        public void testSuspendFunction() {
          runTest("compiler/testData/codegen/box/reflection/call/valueClasses/suspendFunction.kt");
        }
      }
    }

    @TestMetadata("compiler/testData/codegen/box/reflection/callBy")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class CallBy extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInCallBy() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/callBy"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("boundExtensionFunction.kt")
      public void testBoundExtensionFunction() {
        runTest("compiler/testData/codegen/box/reflection/callBy/boundExtensionFunction.kt");
      }

      @TestMetadata("boundExtensionPropertyAcessor.kt")
      public void testBoundExtensionPropertyAcessor() {
        runTest("compiler/testData/codegen/box/reflection/callBy/boundExtensionPropertyAcessor.kt");
      }

      @TestMetadata("boundJvmStaticInObject.kt")
      public void testBoundJvmStaticInObject() {
        runTest("compiler/testData/codegen/box/reflection/callBy/boundJvmStaticInObject.kt");
      }

      @TestMetadata("brokenDefaultParametersFromDifferentFunctions.kt")
      public void testBrokenDefaultParametersFromDifferentFunctions() {
        runTest("compiler/testData/codegen/box/reflection/callBy/brokenDefaultParametersFromDifferentFunctions.kt");
      }

      @TestMetadata("brokenDefaultParametersFromDifferentFunctionsJvmDefault.kt")
      public void testBrokenDefaultParametersFromDifferentFunctionsJvmDefault() {
        runTest("compiler/testData/codegen/box/reflection/callBy/brokenDefaultParametersFromDifferentFunctionsJvmDefault.kt");
      }

      @TestMetadata("companionObject.kt")
      public void testCompanionObject() {
        runTest("compiler/testData/codegen/box/reflection/callBy/companionObject.kt");
      }

      @TestMetadata("defaultAndNonDefaultIntertwined.kt")
      public void testDefaultAndNonDefaultIntertwined() {
        runTest("compiler/testData/codegen/box/reflection/callBy/defaultAndNonDefaultIntertwined.kt");
      }

      @TestMetadata("defaultInSuperClass.kt")
      public void testDefaultInSuperClass() {
        runTest("compiler/testData/codegen/box/reflection/callBy/defaultInSuperClass.kt");
      }

      @TestMetadata("defaultInSuperInterface.kt")
      public void testDefaultInSuperInterface() {
        runTest("compiler/testData/codegen/box/reflection/callBy/defaultInSuperInterface.kt");
      }

      @TestMetadata("emptyVarArg.kt")
      public void testEmptyVarArg() {
        runTest("compiler/testData/codegen/box/reflection/callBy/emptyVarArg.kt");
      }

      @TestMetadata("extensionFunction.kt")
      public void testExtensionFunction() {
        runTest("compiler/testData/codegen/box/reflection/callBy/extensionFunction.kt");
      }

      @TestMetadata("inlineClassDefaultArguments.kt")
      public void testInlineClassDefaultArguments() {
        runTest("compiler/testData/codegen/box/reflection/callBy/inlineClassDefaultArguments.kt");
      }

      @TestMetadata("inlineClassFunctionsAndConstructors.kt")
      public void testInlineClassFunctionsAndConstructors() {
        runTest("compiler/testData/codegen/box/reflection/callBy/inlineClassFunctionsAndConstructors.kt");
      }

      @TestMetadata("inlineClassInterface.kt")
      public void testInlineClassInterface() {
        runTest("compiler/testData/codegen/box/reflection/callBy/inlineClassInterface.kt");
      }

      @TestMetadata("inlineClassInterfaceJvmDefault.kt")
      public void testInlineClassInterfaceJvmDefault() {
        runTest("compiler/testData/codegen/box/reflection/callBy/inlineClassInterfaceJvmDefault.kt");
      }

      @TestMetadata("inlineClassMembers.kt")
      public void testInlineClassMembers() {
        runTest("compiler/testData/codegen/box/reflection/callBy/inlineClassMembers.kt");
      }

      @TestMetadata("jvmStaticInCompanionObject.kt")
      public void testJvmStaticInCompanionObject() {
        runTest("compiler/testData/codegen/box/reflection/callBy/jvmStaticInCompanionObject.kt");
      }

      @TestMetadata("jvmStaticInObject.kt")
      public void testJvmStaticInObject() {
        runTest("compiler/testData/codegen/box/reflection/callBy/jvmStaticInObject.kt");
      }

      @TestMetadata("kt60709.kt")
      public void testKt60709() {
        runTest("compiler/testData/codegen/box/reflection/callBy/kt60709.kt");
      }

      @TestMetadata("kt61304.kt")
      public void testKt61304() {
        runTest("compiler/testData/codegen/box/reflection/callBy/kt61304.kt");
      }

      @TestMetadata("manyArgumentsNoneDefaultConstructor.kt")
      public void testManyArgumentsNoneDefaultConstructor() {
        runTest("compiler/testData/codegen/box/reflection/callBy/manyArgumentsNoneDefaultConstructor.kt");
      }

      @TestMetadata("manyArgumentsNoneDefaultFunction.kt")
      public void testManyArgumentsNoneDefaultFunction() {
        runTest("compiler/testData/codegen/box/reflection/callBy/manyArgumentsNoneDefaultFunction.kt");
      }

      @TestMetadata("manyArgumentsOnlyOneDefault.kt")
      public void testManyArgumentsOnlyOneDefault() {
        runTest("compiler/testData/codegen/box/reflection/callBy/manyArgumentsOnlyOneDefault.kt");
      }

      @TestMetadata("manyMaskArguments.kt")
      public void testManyMaskArguments() {
        runTest("compiler/testData/codegen/box/reflection/callBy/manyMaskArguments.kt");
      }

      @TestMetadata("mfvcDefaultArguments.kt")
      public void testMfvcDefaultArguments() {
        runTest("compiler/testData/codegen/box/reflection/callBy/mfvcDefaultArguments.kt");
      }

      @TestMetadata("mfvcFunctionsAndConstructors.kt")
      public void testMfvcFunctionsAndConstructors() {
        runTest("compiler/testData/codegen/box/reflection/callBy/mfvcFunctionsAndConstructors.kt");
      }

      @TestMetadata("mfvcInterface.kt")
      public void testMfvcInterface() {
        runTest("compiler/testData/codegen/box/reflection/callBy/mfvcInterface.kt");
      }

      @TestMetadata("mfvcInterfaceJvmDefault.kt")
      public void testMfvcInterfaceJvmDefault() {
        runTest("compiler/testData/codegen/box/reflection/callBy/mfvcInterfaceJvmDefault.kt");
      }

      @TestMetadata("mfvcKt61304.kt")
      public void testMfvcKt61304() {
        runTest("compiler/testData/codegen/box/reflection/callBy/mfvcKt61304.kt");
      }

      @TestMetadata("mfvcMembers.kt")
      public void testMfvcMembers() {
        runTest("compiler/testData/codegen/box/reflection/callBy/mfvcMembers.kt");
      }

      @TestMetadata("nonDefaultParameterOmitted.kt")
      public void testNonDefaultParameterOmitted() {
        runTest("compiler/testData/codegen/box/reflection/callBy/nonDefaultParameterOmitted.kt");
      }

      @TestMetadata("nullValue.kt")
      public void testNullValue() {
        runTest("compiler/testData/codegen/box/reflection/callBy/nullValue.kt");
      }

      @TestMetadata("ordinaryMethodIsInvokedWhenNoDefaultValuesAreUsed.kt")
      public void testOrdinaryMethodIsInvokedWhenNoDefaultValuesAreUsed() {
        runTest("compiler/testData/codegen/box/reflection/callBy/ordinaryMethodIsInvokedWhenNoDefaultValuesAreUsed.kt");
      }

      @TestMetadata("primitiveDefaultValues.kt")
      public void testPrimitiveDefaultValues() {
        runTest("compiler/testData/codegen/box/reflection/callBy/primitiveDefaultValues.kt");
      }

      @TestMetadata("privateMemberFunction.kt")
      public void testPrivateMemberFunction() {
        runTest("compiler/testData/codegen/box/reflection/callBy/privateMemberFunction.kt");
      }

      @TestMetadata("simpleConstructor.kt")
      public void testSimpleConstructor() {
        runTest("compiler/testData/codegen/box/reflection/callBy/simpleConstructor.kt");
      }

      @TestMetadata("simpleMemberFunciton.kt")
      public void testSimpleMemberFunciton() {
        runTest("compiler/testData/codegen/box/reflection/callBy/simpleMemberFunciton.kt");
      }

      @TestMetadata("simpleTopLevelFunction.kt")
      public void testSimpleTopLevelFunction() {
        runTest("compiler/testData/codegen/box/reflection/callBy/simpleTopLevelFunction.kt");
      }

      @TestMetadata("compiler/testData/codegen/box/reflection/callBy/inlineClasses")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class InlineClasses extends AbstractLightAnalysisModeTest {
        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        public void testAllFilesPresentInInlineClasses() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/callBy/inlineClasses"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("compiler/testData/codegen/box/reflection/callBy/inlineClasses/nonNullObject")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class NonNullObject extends AbstractLightAnalysisModeTest {
          private void runTest(String testDataFilePath) {
            KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
          }

          public void testAllFilesPresentInNonNullObject() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/callBy/inlineClasses/nonNullObject"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }

          @TestMetadata("compiler/testData/codegen/box/reflection/callBy/inlineClasses/nonNullObject/defaultArguments")
          @TestDataPath("$PROJECT_ROOT")
          @RunWith(JUnit3RunnerWithInners.class)
          public static class DefaultArguments extends AbstractLightAnalysisModeTest {
            private void runTest(String testDataFilePath) {
              KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
            }

            public void testAllFilesPresentInDefaultArguments() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/callBy/inlineClasses/nonNullObject/defaultArguments"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }

            @TestMetadata("constructorWithInlineClassParameters.kt")
            public void testConstructorWithInlineClassParameters() {
              runTest("compiler/testData/codegen/box/reflection/callBy/inlineClasses/nonNullObject/defaultArguments/constructorWithInlineClassParameters.kt");
            }

            @TestMetadata("extensionFunctionsWithInlineClassParameters.kt")
            public void testExtensionFunctionsWithInlineClassParameters() {
              runTest("compiler/testData/codegen/box/reflection/callBy/inlineClasses/nonNullObject/defaultArguments/extensionFunctionsWithInlineClassParameters.kt");
            }

            @TestMetadata("fieldAccessors.kt")
            public void testFieldAccessors() {
              runTest("compiler/testData/codegen/box/reflection/callBy/inlineClasses/nonNullObject/defaultArguments/fieldAccessors.kt");
            }

            @TestMetadata("jvmStaticFieldInObject.kt")
            public void testJvmStaticFieldInObject() {
              runTest("compiler/testData/codegen/box/reflection/callBy/inlineClasses/nonNullObject/defaultArguments/jvmStaticFieldInObject.kt");
            }

            @TestMetadata("jvmStaticFunctionsOnCompanionObject.kt")
            public void testJvmStaticFunctionsOnCompanionObject() {
              runTest("compiler/testData/codegen/box/reflection/callBy/inlineClasses/nonNullObject/defaultArguments/jvmStaticFunctionsOnCompanionObject.kt");
            }

            @TestMetadata("jvmStaticFunctionsOnObject.kt")
            public void testJvmStaticFunctionsOnObject() {
              runTest("compiler/testData/codegen/box/reflection/callBy/inlineClasses/nonNullObject/defaultArguments/jvmStaticFunctionsOnObject.kt");
            }

            @TestMetadata("memberFunctionsWithInlineClassParameters.kt")
            public void testMemberFunctionsWithInlineClassParameters() {
              runTest("compiler/testData/codegen/box/reflection/callBy/inlineClasses/nonNullObject/defaultArguments/memberFunctionsWithInlineClassParameters.kt");
            }

            @TestMetadata("topLevelFunctionsWithInlineClassParameters.kt")
            public void testTopLevelFunctionsWithInlineClassParameters() {
              runTest("compiler/testData/codegen/box/reflection/callBy/inlineClasses/nonNullObject/defaultArguments/topLevelFunctionsWithInlineClassParameters.kt");
            }
          }
        }

        @TestMetadata("compiler/testData/codegen/box/reflection/callBy/inlineClasses/nullableObject")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class NullableObject extends AbstractLightAnalysisModeTest {
          private void runTest(String testDataFilePath) {
            KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
          }

          public void testAllFilesPresentInNullableObject() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/callBy/inlineClasses/nullableObject"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }

          @TestMetadata("compiler/testData/codegen/box/reflection/callBy/inlineClasses/nullableObject/defaultArguments")
          @TestDataPath("$PROJECT_ROOT")
          @RunWith(JUnit3RunnerWithInners.class)
          public static class DefaultArguments extends AbstractLightAnalysisModeTest {
            private void runTest(String testDataFilePath) {
              KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
            }

            public void testAllFilesPresentInDefaultArguments() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/callBy/inlineClasses/nullableObject/defaultArguments"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }

            @TestMetadata("constructorWithInlineClassParameters.kt")
            public void testConstructorWithInlineClassParameters() {
              runTest("compiler/testData/codegen/box/reflection/callBy/inlineClasses/nullableObject/defaultArguments/constructorWithInlineClassParameters.kt");
            }

            @TestMetadata("extensionFunctionsWithInlineClassParameters.kt")
            public void testExtensionFunctionsWithInlineClassParameters() {
              runTest("compiler/testData/codegen/box/reflection/callBy/inlineClasses/nullableObject/defaultArguments/extensionFunctionsWithInlineClassParameters.kt");
            }

            @TestMetadata("fieldAccessors.kt")
            public void testFieldAccessors() {
              runTest("compiler/testData/codegen/box/reflection/callBy/inlineClasses/nullableObject/defaultArguments/fieldAccessors.kt");
            }

            @TestMetadata("jvmStaticFieldInObject.kt")
            public void testJvmStaticFieldInObject() {
              runTest("compiler/testData/codegen/box/reflection/callBy/inlineClasses/nullableObject/defaultArguments/jvmStaticFieldInObject.kt");
            }

            @TestMetadata("jvmStaticFunctionsOnCompanionObject.kt")
            public void testJvmStaticFunctionsOnCompanionObject() {
              runTest("compiler/testData/codegen/box/reflection/callBy/inlineClasses/nullableObject/defaultArguments/jvmStaticFunctionsOnCompanionObject.kt");
            }

            @TestMetadata("jvmStaticFunctionsOnObject.kt")
            public void testJvmStaticFunctionsOnObject() {
              runTest("compiler/testData/codegen/box/reflection/callBy/inlineClasses/nullableObject/defaultArguments/jvmStaticFunctionsOnObject.kt");
            }

            @TestMetadata("memberFunctionsWithInlineClassParameters.kt")
            public void testMemberFunctionsWithInlineClassParameters() {
              runTest("compiler/testData/codegen/box/reflection/callBy/inlineClasses/nullableObject/defaultArguments/memberFunctionsWithInlineClassParameters.kt");
            }

            @TestMetadata("topLevelFunctionsWithInlineClassParameters.kt")
            public void testTopLevelFunctionsWithInlineClassParameters() {
              runTest("compiler/testData/codegen/box/reflection/callBy/inlineClasses/nullableObject/defaultArguments/topLevelFunctionsWithInlineClassParameters.kt");
            }
          }
        }

        @TestMetadata("compiler/testData/codegen/box/reflection/callBy/inlineClasses/primitive")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Primitive extends AbstractLightAnalysisModeTest {
          private void runTest(String testDataFilePath) {
            KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
          }

          public void testAllFilesPresentInPrimitive() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/callBy/inlineClasses/primitive"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }

          @TestMetadata("compiler/testData/codegen/box/reflection/callBy/inlineClasses/primitive/defaultArguments")
          @TestDataPath("$PROJECT_ROOT")
          @RunWith(JUnit3RunnerWithInners.class)
          public static class DefaultArguments extends AbstractLightAnalysisModeTest {
            private void runTest(String testDataFilePath) {
              KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
            }

            public void testAllFilesPresentInDefaultArguments() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/callBy/inlineClasses/primitive/defaultArguments"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }

            @TestMetadata("constructorWithInlineClassParameters.kt")
            public void testConstructorWithInlineClassParameters() {
              runTest("compiler/testData/codegen/box/reflection/callBy/inlineClasses/primitive/defaultArguments/constructorWithInlineClassParameters.kt");
            }

            @TestMetadata("extensionFunctionsWithInlineClassParameters.kt")
            public void testExtensionFunctionsWithInlineClassParameters() {
              runTest("compiler/testData/codegen/box/reflection/callBy/inlineClasses/primitive/defaultArguments/extensionFunctionsWithInlineClassParameters.kt");
            }

            @TestMetadata("fieldAccessors.kt")
            public void testFieldAccessors() {
              runTest("compiler/testData/codegen/box/reflection/callBy/inlineClasses/primitive/defaultArguments/fieldAccessors.kt");
            }

            @TestMetadata("jvmStaticFieldInObject.kt")
            public void testJvmStaticFieldInObject() {
              runTest("compiler/testData/codegen/box/reflection/callBy/inlineClasses/primitive/defaultArguments/jvmStaticFieldInObject.kt");
            }

            @TestMetadata("jvmStaticFunctionsOnCompanionObject.kt")
            public void testJvmStaticFunctionsOnCompanionObject() {
              runTest("compiler/testData/codegen/box/reflection/callBy/inlineClasses/primitive/defaultArguments/jvmStaticFunctionsOnCompanionObject.kt");
            }

            @TestMetadata("jvmStaticFunctionsOnObject.kt")
            public void testJvmStaticFunctionsOnObject() {
              runTest("compiler/testData/codegen/box/reflection/callBy/inlineClasses/primitive/defaultArguments/jvmStaticFunctionsOnObject.kt");
            }

            @TestMetadata("memberFunctionsWithInlineClassParameters.kt")
            public void testMemberFunctionsWithInlineClassParameters() {
              runTest("compiler/testData/codegen/box/reflection/callBy/inlineClasses/primitive/defaultArguments/memberFunctionsWithInlineClassParameters.kt");
            }

            @TestMetadata("topLevelFunctionsWithInlineClassParameters.kt")
            public void testTopLevelFunctionsWithInlineClassParameters() {
              runTest("compiler/testData/codegen/box/reflection/callBy/inlineClasses/primitive/defaultArguments/topLevelFunctionsWithInlineClassParameters.kt");
            }
          }
        }
      }
    }

    @TestMetadata("compiler/testData/codegen/box/reflection/classLiterals")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ClassLiterals extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInClassLiterals() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/classLiterals"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("annotationClassLiteral.kt")
      public void testAnnotationClassLiteral() {
        runTest("compiler/testData/codegen/box/reflection/classLiterals/annotationClassLiteral.kt");
      }

      @TestMetadata("arrays.kt")
      public void testArrays() {
        runTest("compiler/testData/codegen/box/reflection/classLiterals/arrays.kt");
      }

      @TestMetadata("bareArray.kt")
      public void testBareArray() {
        runTest("compiler/testData/codegen/box/reflection/classLiterals/bareArray.kt");
      }

      @TestMetadata("builtinClassLiterals.kt")
      public void testBuiltinClassLiterals() {
        runTest("compiler/testData/codegen/box/reflection/classLiterals/builtinClassLiterals.kt");
      }

      @TestMetadata("genericArrays.kt")
      public void testGenericArrays() {
        runTest("compiler/testData/codegen/box/reflection/classLiterals/genericArrays.kt");
      }

      @TestMetadata("genericClass.kt")
      public void testGenericClass() {
        runTest("compiler/testData/codegen/box/reflection/classLiterals/genericClass.kt");
      }

      @TestMetadata("javaClassLiteral.kt")
      public void testJavaClassLiteral() {
        runTest("compiler/testData/codegen/box/reflection/classLiterals/javaClassLiteral.kt");
      }

      @TestMetadata("lambdaClass.kt")
      public void testLambdaClass() {
        runTest("compiler/testData/codegen/box/reflection/classLiterals/lambdaClass.kt");
      }

      @TestMetadata("reifiedTypeClassLiteral.kt")
      public void testReifiedTypeClassLiteral() {
        runTest("compiler/testData/codegen/box/reflection/classLiterals/reifiedTypeClassLiteral.kt");
      }

      @TestMetadata("simpleClassLiteral.kt")
      public void testSimpleClassLiteral() {
        runTest("compiler/testData/codegen/box/reflection/classLiterals/simpleClassLiteral.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/reflection/classes")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Classes extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInClasses() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/classes"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("classSimpleName.kt")
      public void testClassSimpleName() {
        runTest("compiler/testData/codegen/box/reflection/classes/classSimpleName.kt");
      }

      @TestMetadata("companionObject.kt")
      public void testCompanionObject() {
        runTest("compiler/testData/codegen/box/reflection/classes/companionObject.kt");
      }

      @TestMetadata("createInstance.kt")
      public void testCreateInstance() {
        runTest("compiler/testData/codegen/box/reflection/classes/createInstance.kt");
      }

      @TestMetadata("declaredMembers.kt")
      public void testDeclaredMembers() {
        runTest("compiler/testData/codegen/box/reflection/classes/declaredMembers.kt");
      }

      @TestMetadata("javaVoid.kt")
      public void testJavaVoid() {
        runTest("compiler/testData/codegen/box/reflection/classes/javaVoid.kt");
      }

      @TestMetadata("jvmName.kt")
      public void testJvmName() {
        runTest("compiler/testData/codegen/box/reflection/classes/jvmName.kt");
      }

      @TestMetadata("jvmNameOfStandardClasses.kt")
      public void testJvmNameOfStandardClasses() {
        runTest("compiler/testData/codegen/box/reflection/classes/jvmNameOfStandardClasses.kt");
      }

      @TestMetadata("localClassSimpleName.kt")
      public void testLocalClassSimpleName() {
        runTest("compiler/testData/codegen/box/reflection/classes/localClassSimpleName.kt");
      }

      @TestMetadata("nestedClasses.kt")
      public void testNestedClasses() {
        runTest("compiler/testData/codegen/box/reflection/classes/nestedClasses.kt");
      }

      @TestMetadata("nestedClassesInScript.kt")
      public void testNestedClassesInScript() {
        runTest("compiler/testData/codegen/box/reflection/classes/nestedClassesInScript.kt");
      }

      @TestMetadata("nestedClassesJava.kt")
      public void testNestedClassesJava() {
        runTest("compiler/testData/codegen/box/reflection/classes/nestedClassesJava.kt");
      }

      @TestMetadata("objectInstance.kt")
      public void testObjectInstance() {
        runTest("compiler/testData/codegen/box/reflection/classes/objectInstance.kt");
      }

      @TestMetadata("primitiveKClassEquality.kt")
      public void testPrimitiveKClassEquality() {
        runTest("compiler/testData/codegen/box/reflection/classes/primitiveKClassEquality.kt");
      }

      @TestMetadata("qualifiedName.kt")
      public void testQualifiedName() {
        runTest("compiler/testData/codegen/box/reflection/classes/qualifiedName.kt");
      }

      @TestMetadata("qualifiedNameOfStandardClasses.kt")
      public void testQualifiedNameOfStandardClasses() {
        runTest("compiler/testData/codegen/box/reflection/classes/qualifiedNameOfStandardClasses.kt");
      }

      @TestMetadata("sealedSubclasses.kt")
      public void testSealedSubclasses() {
        runTest("compiler/testData/codegen/box/reflection/classes/sealedSubclasses.kt");
      }

      @TestMetadata("starProjectedType.kt")
      public void testStarProjectedType() {
        runTest("compiler/testData/codegen/box/reflection/classes/starProjectedType.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/reflection/constructors")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Constructors extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInConstructors() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/constructors"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("annotationClass.kt")
      public void testAnnotationClass() {
        runTest("compiler/testData/codegen/box/reflection/constructors/annotationClass.kt");
      }

      @TestMetadata("classesWithoutConstructors.kt")
      public void testClassesWithoutConstructors() {
        runTest("compiler/testData/codegen/box/reflection/constructors/classesWithoutConstructors.kt");
      }

      @TestMetadata("constructorName.kt")
      public void testConstructorName() {
        runTest("compiler/testData/codegen/box/reflection/constructors/constructorName.kt");
      }

      @TestMetadata("enumEntry.kt")
      public void testEnumEntry() {
        runTest("compiler/testData/codegen/box/reflection/constructors/enumEntry.kt");
      }

      @TestMetadata("primaryConstructor.kt")
      public void testPrimaryConstructor() {
        runTest("compiler/testData/codegen/box/reflection/constructors/primaryConstructor.kt");
      }

      @TestMetadata("simpleGetConstructors.kt")
      public void testSimpleGetConstructors() {
        runTest("compiler/testData/codegen/box/reflection/constructors/simpleGetConstructors.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/reflection/createAnnotation")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class CreateAnnotation extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInCreateAnnotation() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/createAnnotation"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("annotationType.kt")
      public void testAnnotationType() {
        runTest("compiler/testData/codegen/box/reflection/createAnnotation/annotationType.kt");
      }

      @TestMetadata("arrayOfKClasses.kt")
      public void testArrayOfKClasses() {
        runTest("compiler/testData/codegen/box/reflection/createAnnotation/arrayOfKClasses.kt");
      }

      @TestMetadata("callByJava.kt")
      public void testCallByJava() {
        runTest("compiler/testData/codegen/box/reflection/createAnnotation/callByJava.kt");
      }

      @TestMetadata("callByKotlin.kt")
      public void testCallByKotlin() {
        runTest("compiler/testData/codegen/box/reflection/createAnnotation/callByKotlin.kt");
      }

      @TestMetadata("callByWithEmptyVarArg.kt")
      public void testCallByWithEmptyVarArg() {
        runTest("compiler/testData/codegen/box/reflection/createAnnotation/callByWithEmptyVarArg.kt");
      }

      @TestMetadata("callJava.kt")
      public void testCallJava() {
        runTest("compiler/testData/codegen/box/reflection/createAnnotation/callJava.kt");
      }

      @TestMetadata("callKotlin.kt")
      public void testCallKotlin() {
        runTest("compiler/testData/codegen/box/reflection/createAnnotation/callKotlin.kt");
      }

      @TestMetadata("createJdkAnnotationInstance.kt")
      public void testCreateJdkAnnotationInstance() {
        runTest("compiler/testData/codegen/box/reflection/createAnnotation/createJdkAnnotationInstance.kt");
      }

      @TestMetadata("enumKClassAnnotation.kt")
      public void testEnumKClassAnnotation() {
        runTest("compiler/testData/codegen/box/reflection/createAnnotation/enumKClassAnnotation.kt");
      }

      @TestMetadata("equalsHashCodeToString.kt")
      public void testEqualsHashCodeToString() {
        runTest("compiler/testData/codegen/box/reflection/createAnnotation/equalsHashCodeToString.kt");
      }

      @TestMetadata("floatingPointParameters.kt")
      public void testFloatingPointParameters() {
        runTest("compiler/testData/codegen/box/reflection/createAnnotation/floatingPointParameters.kt");
      }

      @TestMetadata("parameterNamedEquals.kt")
      public void testParameterNamedEquals() {
        runTest("compiler/testData/codegen/box/reflection/createAnnotation/parameterNamedEquals.kt");
      }

      @TestMetadata("primitivesAndArrays.kt")
      public void testPrimitivesAndArrays() {
        runTest("compiler/testData/codegen/box/reflection/createAnnotation/primitivesAndArrays.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/reflection/enclosing")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Enclosing extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInEnclosing() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/enclosing"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("anonymousObjectInInlinedLambda.kt")
      public void testAnonymousObjectInInlinedLambda() {
        runTest("compiler/testData/codegen/box/reflection/enclosing/anonymousObjectInInlinedLambda.kt");
      }

      @TestMetadata("classInLambda.kt")
      public void testClassInLambda() {
        runTest("compiler/testData/codegen/box/reflection/enclosing/classInLambda.kt");
      }

      @TestMetadata("functionExpressionInProperty.kt")
      public void testFunctionExpressionInProperty() {
        runTest("compiler/testData/codegen/box/reflection/enclosing/functionExpressionInProperty.kt");
      }

      @TestMetadata("kt11969.kt")
      public void testKt11969() {
        runTest("compiler/testData/codegen/box/reflection/enclosing/kt11969.kt");
      }

      @TestMetadata("kt45907.kt")
      public void testKt45907() {
        runTest("compiler/testData/codegen/box/reflection/enclosing/kt45907.kt");
      }

      @TestMetadata("kt6368.kt")
      public void testKt6368() {
        runTest("compiler/testData/codegen/box/reflection/enclosing/kt6368.kt");
      }

      @TestMetadata("kt6691_lambdaInSamConstructor.kt")
      public void testKt6691_lambdaInSamConstructor() {
        runTest("compiler/testData/codegen/box/reflection/enclosing/kt6691_lambdaInSamConstructor.kt");
      }

      @TestMetadata("lambdaInClassObject.kt")
      public void testLambdaInClassObject() {
        runTest("compiler/testData/codegen/box/reflection/enclosing/lambdaInClassObject.kt");
      }

      @TestMetadata("lambdaInConstructor.kt")
      public void testLambdaInConstructor() {
        runTest("compiler/testData/codegen/box/reflection/enclosing/lambdaInConstructor.kt");
      }

      @TestMetadata("lambdaInFunction.kt")
      public void testLambdaInFunction() {
        runTest("compiler/testData/codegen/box/reflection/enclosing/lambdaInFunction.kt");
      }

      @TestMetadata("lambdaInLambda.kt")
      public void testLambdaInLambda() {
        runTest("compiler/testData/codegen/box/reflection/enclosing/lambdaInLambda.kt");
      }

      @TestMetadata("lambdaInLocalClassConstructor.kt")
      public void testLambdaInLocalClassConstructor() {
        runTest("compiler/testData/codegen/box/reflection/enclosing/lambdaInLocalClassConstructor.kt");
      }

      @TestMetadata("lambdaInLocalClassSuperCall.kt")
      public void testLambdaInLocalClassSuperCall() {
        runTest("compiler/testData/codegen/box/reflection/enclosing/lambdaInLocalClassSuperCall.kt");
      }

      @TestMetadata("lambdaInLocalFunction.kt")
      public void testLambdaInLocalFunction() {
        runTest("compiler/testData/codegen/box/reflection/enclosing/lambdaInLocalFunction.kt");
      }

      @TestMetadata("lambdaInMemberFunction.kt")
      public void testLambdaInMemberFunction() {
        runTest("compiler/testData/codegen/box/reflection/enclosing/lambdaInMemberFunction.kt");
      }

      @TestMetadata("lambdaInMemberFunctionInLocalClass.kt")
      public void testLambdaInMemberFunctionInLocalClass() {
        runTest("compiler/testData/codegen/box/reflection/enclosing/lambdaInMemberFunctionInLocalClass.kt");
      }

      @TestMetadata("lambdaInMemberFunctionInNestedClass.kt")
      public void testLambdaInMemberFunctionInNestedClass() {
        runTest("compiler/testData/codegen/box/reflection/enclosing/lambdaInMemberFunctionInNestedClass.kt");
      }

      @TestMetadata("lambdaInObjectDeclaration.kt")
      public void testLambdaInObjectDeclaration() {
        runTest("compiler/testData/codegen/box/reflection/enclosing/lambdaInObjectDeclaration.kt");
      }

      @TestMetadata("lambdaInObjectExpression.kt")
      public void testLambdaInObjectExpression() {
        runTest("compiler/testData/codegen/box/reflection/enclosing/lambdaInObjectExpression.kt");
      }

      @TestMetadata("lambdaInObjectLiteralSuperCall.kt")
      public void testLambdaInObjectLiteralSuperCall() {
        runTest("compiler/testData/codegen/box/reflection/enclosing/lambdaInObjectLiteralSuperCall.kt");
      }

      @TestMetadata("lambdaInPackage.kt")
      public void testLambdaInPackage() {
        runTest("compiler/testData/codegen/box/reflection/enclosing/lambdaInPackage.kt");
      }

      @TestMetadata("lambdaInPropertyDelegate.kt")
      public void testLambdaInPropertyDelegate() {
        runTest("compiler/testData/codegen/box/reflection/enclosing/lambdaInPropertyDelegate.kt");
      }

      @TestMetadata("lambdaInPropertyGetter.kt")
      public void testLambdaInPropertyGetter() {
        runTest("compiler/testData/codegen/box/reflection/enclosing/lambdaInPropertyGetter.kt");
      }

      @TestMetadata("lambdaInPropertySetter.kt")
      public void testLambdaInPropertySetter() {
        runTest("compiler/testData/codegen/box/reflection/enclosing/lambdaInPropertySetter.kt");
      }

      @TestMetadata("localClassInTopLevelFunction.kt")
      public void testLocalClassInTopLevelFunction() {
        runTest("compiler/testData/codegen/box/reflection/enclosing/localClassInTopLevelFunction.kt");
      }

      @TestMetadata("objectInLambda.kt")
      public void testObjectInLambda() {
        runTest("compiler/testData/codegen/box/reflection/enclosing/objectInLambda.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/reflection/functions")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Functions extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInFunctions() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/functions"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("declaredVsInheritedFunctions.kt")
      public void testDeclaredVsInheritedFunctions() {
        runTest("compiler/testData/codegen/box/reflection/functions/declaredVsInheritedFunctions.kt");
      }

      @TestMetadata("enumValuesValueOf.kt")
      public void testEnumValuesValueOf() {
        runTest("compiler/testData/codegen/box/reflection/functions/enumValuesValueOf.kt");
      }

      @TestMetadata("functionFromStdlib.kt")
      public void testFunctionFromStdlib() {
        runTest("compiler/testData/codegen/box/reflection/functions/functionFromStdlib.kt");
      }

      @TestMetadata("functionReferenceErasedToKFunction.kt")
      public void testFunctionReferenceErasedToKFunction() {
        runTest("compiler/testData/codegen/box/reflection/functions/functionReferenceErasedToKFunction.kt");
      }

      @TestMetadata("genericOverriddenFunction.kt")
      public void testGenericOverriddenFunction() {
        runTest("compiler/testData/codegen/box/reflection/functions/genericOverriddenFunction.kt");
      }

      @TestMetadata("instanceOfFunction.kt")
      public void testInstanceOfFunction() {
        runTest("compiler/testData/codegen/box/reflection/functions/instanceOfFunction.kt");
      }

      @TestMetadata("isAccessibleOnAllMembers.kt")
      public void testIsAccessibleOnAllMembers() {
        runTest("compiler/testData/codegen/box/reflection/functions/isAccessibleOnAllMembers.kt");
      }

      @TestMetadata("javaClassGetFunctions.kt")
      public void testJavaClassGetFunctions() {
        runTest("compiler/testData/codegen/box/reflection/functions/javaClassGetFunctions.kt");
      }

      @TestMetadata("javaMethodsSmokeTest.kt")
      public void testJavaMethodsSmokeTest() {
        runTest("compiler/testData/codegen/box/reflection/functions/javaMethodsSmokeTest.kt");
      }

      @TestMetadata("parentheses.kt")
      public void testParentheses() {
        runTest("compiler/testData/codegen/box/reflection/functions/parentheses.kt");
      }

      @TestMetadata("platformName.kt")
      public void testPlatformName() {
        runTest("compiler/testData/codegen/box/reflection/functions/platformName.kt");
      }

      @TestMetadata("privateMemberFunction.kt")
      public void testPrivateMemberFunction() {
        runTest("compiler/testData/codegen/box/reflection/functions/privateMemberFunction.kt");
      }

      @TestMetadata("simpleGetFunctions.kt")
      public void testSimpleGetFunctions() {
        runTest("compiler/testData/codegen/box/reflection/functions/simpleGetFunctions.kt");
      }

      @TestMetadata("simpleNames.kt")
      public void testSimpleNames() {
        runTest("compiler/testData/codegen/box/reflection/functions/simpleNames.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/reflection/genericSignature")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class GenericSignature extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInGenericSignature() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/genericSignature"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("covariantOverride.kt")
      public void testCovariantOverride() {
        runTest("compiler/testData/codegen/box/reflection/genericSignature/covariantOverride.kt");
      }

      @TestMetadata("defaultImplsGenericSignature.kt")
      public void testDefaultImplsGenericSignature() {
        runTest("compiler/testData/codegen/box/reflection/genericSignature/defaultImplsGenericSignature.kt");
      }

      @TestMetadata("delegatedMembers.kt")
      public void testDelegatedMembers() {
        runTest("compiler/testData/codegen/box/reflection/genericSignature/delegatedMembers.kt");
      }

      @TestMetadata("functionLiteralGenericSignature.kt")
      public void testFunctionLiteralGenericSignature() {
        runTest("compiler/testData/codegen/box/reflection/genericSignature/functionLiteralGenericSignature.kt");
      }

      @TestMetadata("genericBackingFieldSignature.kt")
      public void testGenericBackingFieldSignature() {
        runTest("compiler/testData/codegen/box/reflection/genericSignature/genericBackingFieldSignature.kt");
      }

      @TestMetadata("genericFunctionReferenceSignature.kt")
      public void testGenericFunctionReferenceSignature() {
        runTest("compiler/testData/codegen/box/reflection/genericSignature/genericFunctionReferenceSignature.kt");
      }

      @TestMetadata("genericMethodSignature.kt")
      public void testGenericMethodSignature() {
        runTest("compiler/testData/codegen/box/reflection/genericSignature/genericMethodSignature.kt");
      }

      @TestMetadata("kt11121.kt")
      public void testKt11121() {
        runTest("compiler/testData/codegen/box/reflection/genericSignature/kt11121.kt");
      }

      @TestMetadata("kt5112.kt")
      public void testKt5112() {
        runTest("compiler/testData/codegen/box/reflection/genericSignature/kt5112.kt");
      }

      @TestMetadata("kt6106.kt")
      public void testKt6106() {
        runTest("compiler/testData/codegen/box/reflection/genericSignature/kt6106.kt");
      }

      @TestMetadata("samWrappedLambdaVsReference.kt")
      public void testSamWrappedLambdaVsReference() {
        runTest("compiler/testData/codegen/box/reflection/genericSignature/samWrappedLambdaVsReference.kt");
      }

      @TestMetadata("signatureOfDeepGenericInner.kt")
      public void testSignatureOfDeepGenericInner() {
        runTest("compiler/testData/codegen/box/reflection/genericSignature/signatureOfDeepGenericInner.kt");
      }

      @TestMetadata("signatureOfDeepInner.kt")
      public void testSignatureOfDeepInner() {
        runTest("compiler/testData/codegen/box/reflection/genericSignature/signatureOfDeepInner.kt");
      }

      @TestMetadata("signatureOfDeepInnerLastGeneric.kt")
      public void testSignatureOfDeepInnerLastGeneric() {
        runTest("compiler/testData/codegen/box/reflection/genericSignature/signatureOfDeepInnerLastGeneric.kt");
      }

      @TestMetadata("signatureOfGenericInnerGenericOuter.kt")
      public void testSignatureOfGenericInnerGenericOuter() {
        runTest("compiler/testData/codegen/box/reflection/genericSignature/signatureOfGenericInnerGenericOuter.kt");
      }

      @TestMetadata("signatureOfGenericInnerSimpleOuter.kt")
      public void testSignatureOfGenericInnerSimpleOuter() {
        runTest("compiler/testData/codegen/box/reflection/genericSignature/signatureOfGenericInnerSimpleOuter.kt");
      }

      @TestMetadata("signatureOfSimpleInnerSimpleOuter.kt")
      public void testSignatureOfSimpleInnerSimpleOuter() {
        runTest("compiler/testData/codegen/box/reflection/genericSignature/signatureOfSimpleInnerSimpleOuter.kt");
      }

      @TestMetadata("suspendFunctionLiteralGenericSignature.kt")
      public void testSuspendFunctionLiteralGenericSignature() {
        runTest("compiler/testData/codegen/box/reflection/genericSignature/suspendFunctionLiteralGenericSignature.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/reflection/isInstance")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class IsInstance extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInIsInstance() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/isInstance"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("isInstanceCastAndSafeCast.kt")
      public void testIsInstanceCastAndSafeCast() {
        runTest("compiler/testData/codegen/box/reflection/isInstance/isInstanceCastAndSafeCast.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/reflection/kClassInAnnotation")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class KClassInAnnotation extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInKClassInAnnotation() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/kClassInAnnotation"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("array.kt")
      public void testArray() {
        runTest("compiler/testData/codegen/box/reflection/kClassInAnnotation/array.kt");
      }

      @TestMetadata("arrayInJava.kt")
      public void testArrayInJava() {
        runTest("compiler/testData/codegen/box/reflection/kClassInAnnotation/arrayInJava.kt");
      }

      @TestMetadata("basic.kt")
      public void testBasic() {
        runTest("compiler/testData/codegen/box/reflection/kClassInAnnotation/basic.kt");
      }

      @TestMetadata("basicInJava.kt")
      public void testBasicInJava() {
        runTest("compiler/testData/codegen/box/reflection/kClassInAnnotation/basicInJava.kt");
      }

      @TestMetadata("checkcast.kt")
      public void testCheckcast() {
        runTest("compiler/testData/codegen/box/reflection/kClassInAnnotation/checkcast.kt");
      }

      @TestMetadata("forceWrapping.kt")
      public void testForceWrapping() {
        runTest("compiler/testData/codegen/box/reflection/kClassInAnnotation/forceWrapping.kt");
      }

      @TestMetadata("vararg.kt")
      public void testVararg() {
        runTest("compiler/testData/codegen/box/reflection/kClassInAnnotation/vararg.kt");
      }

      @TestMetadata("varargInJava.kt")
      public void testVarargInJava() {
        runTest("compiler/testData/codegen/box/reflection/kClassInAnnotation/varargInJava.kt");
      }

      @TestMetadata("wrappingForCallableReferences.kt")
      public void testWrappingForCallableReferences() {
        runTest("compiler/testData/codegen/box/reflection/kClassInAnnotation/wrappingForCallableReferences.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/reflection/lambdaClasses")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class LambdaClasses extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInLambdaClasses() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/lambdaClasses"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("lightweightLambdas.kt")
      public void testLightweightLambdas() {
        runTest("compiler/testData/codegen/box/reflection/lambdaClasses/lightweightLambdas.kt");
      }

      @TestMetadata("parameterNamesAndNullability.kt")
      public void testParameterNamesAndNullability() {
        runTest("compiler/testData/codegen/box/reflection/lambdaClasses/parameterNamesAndNullability.kt");
      }

      @TestMetadata("reflectOnDefaultWithInlineClassArgument.kt")
      public void testReflectOnDefaultWithInlineClassArgument() {
        runTest("compiler/testData/codegen/box/reflection/lambdaClasses/reflectOnDefaultWithInlineClassArgument.kt");
      }

      @TestMetadata("reflectOnDefaultWithMfvcArgument.kt")
      public void testReflectOnDefaultWithMfvcArgument() {
        runTest("compiler/testData/codegen/box/reflection/lambdaClasses/reflectOnDefaultWithMfvcArgument.kt");
      }

      @TestMetadata("reflectOnLambdaInArrayConstructor.kt")
      public void testReflectOnLambdaInArrayConstructor() {
        runTest("compiler/testData/codegen/box/reflection/lambdaClasses/reflectOnLambdaInArrayConstructor.kt");
      }

      @TestMetadata("reflectOnLambdaInConstructor.kt")
      public void testReflectOnLambdaInConstructor() {
        runTest("compiler/testData/codegen/box/reflection/lambdaClasses/reflectOnLambdaInConstructor.kt");
      }

      @TestMetadata("reflectOnLambdaInField.kt")
      public void testReflectOnLambdaInField() {
        runTest("compiler/testData/codegen/box/reflection/lambdaClasses/reflectOnLambdaInField.kt");
      }

      @TestMetadata("reflectOnLambdaInStaticField.kt")
      public void testReflectOnLambdaInStaticField() {
        runTest("compiler/testData/codegen/box/reflection/lambdaClasses/reflectOnLambdaInStaticField.kt");
      }

      @TestMetadata("reflectOnLambdaInSuspend.kt")
      public void testReflectOnLambdaInSuspend() {
        runTest("compiler/testData/codegen/box/reflection/lambdaClasses/reflectOnLambdaInSuspend.kt");
      }

      @TestMetadata("reflectOnLambdaInSuspendLambda.kt")
      public void testReflectOnLambdaInSuspendLambda() {
        runTest("compiler/testData/codegen/box/reflection/lambdaClasses/reflectOnLambdaInSuspendLambda.kt");
      }

      @TestMetadata("reflectOnSuspendLambdaInField.kt")
      public void testReflectOnSuspendLambdaInField() {
        runTest("compiler/testData/codegen/box/reflection/lambdaClasses/reflectOnSuspendLambdaInField.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/reflection/localClasses")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class LocalClasses extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInLocalClasses() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/localClasses"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("localClassesAndAnonymousObjects.kt")
      public void testLocalClassesAndAnonymousObjects() {
        runTest("compiler/testData/codegen/box/reflection/localClasses/localClassesAndAnonymousObjects.kt");
      }

      @TestMetadata("localNestedClasses.kt")
      public void testLocalNestedClasses() {
        runTest("compiler/testData/codegen/box/reflection/localClasses/localNestedClasses.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/reflection/mapping")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Mapping extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInMapping() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/mapping"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("companionObjectProperty.kt")
      public void testCompanionObjectProperty() {
        runTest("compiler/testData/codegen/box/reflection/mapping/companionObjectProperty.kt");
      }

      @TestMetadata("constructor.kt")
      public void testConstructor() {
        runTest("compiler/testData/codegen/box/reflection/mapping/constructor.kt");
      }

      @TestMetadata("constructorWithInlineClassParameters.kt")
      public void testConstructorWithInlineClassParameters() {
        runTest("compiler/testData/codegen/box/reflection/mapping/constructorWithInlineClassParameters.kt");
      }

      @TestMetadata("constructorWithMfvcParameters.kt")
      public void testConstructorWithMfvcParameters() {
        runTest("compiler/testData/codegen/box/reflection/mapping/constructorWithMfvcParameters.kt");
      }

      @TestMetadata("extensionProperty.kt")
      public void testExtensionProperty() {
        runTest("compiler/testData/codegen/box/reflection/mapping/extensionProperty.kt");
      }

      @TestMetadata("functions.kt")
      public void testFunctions() {
        runTest("compiler/testData/codegen/box/reflection/mapping/functions.kt");
      }

      @TestMetadata("inlineReifiedFun.kt")
      public void testInlineReifiedFun() {
        runTest("compiler/testData/codegen/box/reflection/mapping/inlineReifiedFun.kt");
      }

      @TestMetadata("interfaceCompanionPropertyWithJvmField.kt")
      public void testInterfaceCompanionPropertyWithJvmField() {
        runTest("compiler/testData/codegen/box/reflection/mapping/interfaceCompanionPropertyWithJvmField.kt");
      }

      @TestMetadata("jClass2kClass.kt")
      public void testJClass2kClass() {
        runTest("compiler/testData/codegen/box/reflection/mapping/jClass2kClass.kt");
      }

      @TestMetadata("javaConstructor.kt")
      public void testJavaConstructor() {
        runTest("compiler/testData/codegen/box/reflection/mapping/javaConstructor.kt");
      }

      @TestMetadata("javaFields.kt")
      public void testJavaFields() {
        runTest("compiler/testData/codegen/box/reflection/mapping/javaFields.kt");
      }

      @TestMetadata("javaMethods.kt")
      public void testJavaMethods() {
        runTest("compiler/testData/codegen/box/reflection/mapping/javaMethods.kt");
      }

      @TestMetadata("lateinitProperty.kt")
      public void testLateinitProperty() {
        runTest("compiler/testData/codegen/box/reflection/mapping/lateinitProperty.kt");
      }

      @TestMetadata("mappedClassIsEqualToClassLiteral.kt")
      public void testMappedClassIsEqualToClassLiteral() {
        runTest("compiler/testData/codegen/box/reflection/mapping/mappedClassIsEqualToClassLiteral.kt");
      }

      @TestMetadata("memberProperty.kt")
      public void testMemberProperty() {
        runTest("compiler/testData/codegen/box/reflection/mapping/memberProperty.kt");
      }

      @TestMetadata("methodsFromObject.kt")
      public void testMethodsFromObject() {
        runTest("compiler/testData/codegen/box/reflection/mapping/methodsFromObject.kt");
      }

      @TestMetadata("methodsFromSuperInterface.kt")
      public void testMethodsFromSuperInterface() {
        runTest("compiler/testData/codegen/box/reflection/mapping/methodsFromSuperInterface.kt");
      }

      @TestMetadata("nonTrivialFunctionNames.kt")
      public void testNonTrivialFunctionNames() {
        runTest("compiler/testData/codegen/box/reflection/mapping/nonTrivialFunctionNames.kt");
      }

      @TestMetadata("nonTrivialPropertyNames.kt")
      public void testNonTrivialPropertyNames() {
        runTest("compiler/testData/codegen/box/reflection/mapping/nonTrivialPropertyNames.kt");
      }

      @TestMetadata("openSuspendFun.kt")
      public void testOpenSuspendFun() {
        runTest("compiler/testData/codegen/box/reflection/mapping/openSuspendFun.kt");
      }

      @TestMetadata("privateProperty.kt")
      public void testPrivateProperty() {
        runTest("compiler/testData/codegen/box/reflection/mapping/privateProperty.kt");
      }

      @TestMetadata("propertyAccessorsWithJvmName.kt")
      public void testPropertyAccessorsWithJvmName() {
        runTest("compiler/testData/codegen/box/reflection/mapping/propertyAccessorsWithJvmName.kt");
      }

      @TestMetadata("syntheticFields.kt")
      public void testSyntheticFields() {
        runTest("compiler/testData/codegen/box/reflection/mapping/syntheticFields.kt");
      }

      @TestMetadata("topLevelFunctionOtherFile.kt")
      public void testTopLevelFunctionOtherFile() {
        runTest("compiler/testData/codegen/box/reflection/mapping/topLevelFunctionOtherFile.kt");
      }

      @TestMetadata("topLevelProperty.kt")
      public void testTopLevelProperty() {
        runTest("compiler/testData/codegen/box/reflection/mapping/topLevelProperty.kt");
      }

      @TestMetadata("compiler/testData/codegen/box/reflection/mapping/fakeOverrides")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class FakeOverrides extends AbstractLightAnalysisModeTest {
        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        public void testAllFilesPresentInFakeOverrides() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/mapping/fakeOverrides"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("javaFieldGetterSetter.kt")
        public void testJavaFieldGetterSetter() {
          runTest("compiler/testData/codegen/box/reflection/mapping/fakeOverrides/javaFieldGetterSetter.kt");
        }

        @TestMetadata("javaMethod.kt")
        public void testJavaMethod() {
          runTest("compiler/testData/codegen/box/reflection/mapping/fakeOverrides/javaMethod.kt");
        }
      }

      @TestMetadata("compiler/testData/codegen/box/reflection/mapping/inlineClasses")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class InlineClasses extends AbstractLightAnalysisModeTest {
        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        public void testAllFilesPresentInInlineClasses() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/mapping/inlineClasses"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("inlineClassPrimaryVal.kt")
        public void testInlineClassPrimaryVal() {
          runTest("compiler/testData/codegen/box/reflection/mapping/inlineClasses/inlineClassPrimaryVal.kt");
        }

        @TestMetadata("suspendFunctionWithInlineClassInSignature.kt")
        public void testSuspendFunctionWithInlineClassInSignature() {
          runTest("compiler/testData/codegen/box/reflection/mapping/inlineClasses/suspendFunctionWithInlineClassInSignature.kt");
        }
      }

      @TestMetadata("compiler/testData/codegen/box/reflection/mapping/jvmStatic")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class JvmStatic extends AbstractLightAnalysisModeTest {
        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        public void testAllFilesPresentInJvmStatic() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/mapping/jvmStatic"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("companionObjectFunction.kt")
        public void testCompanionObjectFunction() {
          runTest("compiler/testData/codegen/box/reflection/mapping/jvmStatic/companionObjectFunction.kt");
        }

        @TestMetadata("objectFunction.kt")
        public void testObjectFunction() {
          runTest("compiler/testData/codegen/box/reflection/mapping/jvmStatic/objectFunction.kt");
        }
      }

      @TestMetadata("compiler/testData/codegen/box/reflection/mapping/types")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class Types extends AbstractLightAnalysisModeTest {
        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        public void testAllFilesPresentInTypes() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/mapping/types"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("allSupertypes.kt")
        public void testAllSupertypes() {
          runTest("compiler/testData/codegen/box/reflection/mapping/types/allSupertypes.kt");
        }

        @TestMetadata("annotationConstructorParameters.kt")
        public void testAnnotationConstructorParameters() {
          runTest("compiler/testData/codegen/box/reflection/mapping/types/annotationConstructorParameters.kt");
        }

        @TestMetadata("array.kt")
        public void testArray() {
          runTest("compiler/testData/codegen/box/reflection/mapping/types/array.kt");
        }

        @TestMetadata("constructors.kt")
        public void testConstructors() {
          runTest("compiler/testData/codegen/box/reflection/mapping/types/constructors.kt");
        }

        @TestMetadata("createType.kt")
        public void testCreateType() {
          runTest("compiler/testData/codegen/box/reflection/mapping/types/createType.kt");
        }

        @TestMetadata("genericArrayElementType.kt")
        public void testGenericArrayElementType() {
          runTest("compiler/testData/codegen/box/reflection/mapping/types/genericArrayElementType.kt");
        }

        @TestMetadata("inlineClassInSignature.kt")
        public void testInlineClassInSignature() {
          runTest("compiler/testData/codegen/box/reflection/mapping/types/inlineClassInSignature.kt");
        }

        @TestMetadata("inlineClassPrimaryVal.kt")
        public void testInlineClassPrimaryVal() {
          runTest("compiler/testData/codegen/box/reflection/mapping/types/inlineClassPrimaryVal.kt");
        }

        @TestMetadata("innerGenericTypeArgument.kt")
        public void testInnerGenericTypeArgument() {
          runTest("compiler/testData/codegen/box/reflection/mapping/types/innerGenericTypeArgument.kt");
        }

        @TestMetadata("memberFunctions.kt")
        public void testMemberFunctions() {
          runTest("compiler/testData/codegen/box/reflection/mapping/types/memberFunctions.kt");
        }

        @TestMetadata("mfvcInSignature.kt")
        public void testMfvcInSignature() {
          runTest("compiler/testData/codegen/box/reflection/mapping/types/mfvcInSignature.kt");
        }

        @TestMetadata("mfvcPrimaryVal.kt")
        public void testMfvcPrimaryVal() {
          runTest("compiler/testData/codegen/box/reflection/mapping/types/mfvcPrimaryVal.kt");
        }

        @TestMetadata("overrideAnyWithPrimitive.kt")
        public void testOverrideAnyWithPrimitive() {
          runTest("compiler/testData/codegen/box/reflection/mapping/types/overrideAnyWithPrimitive.kt");
        }

        @TestMetadata("parameterizedTypeArgument.kt")
        public void testParameterizedTypeArgument() {
          runTest("compiler/testData/codegen/box/reflection/mapping/types/parameterizedTypeArgument.kt");
        }

        @TestMetadata("parameterizedTypes.kt")
        public void testParameterizedTypes() {
          runTest("compiler/testData/codegen/box/reflection/mapping/types/parameterizedTypes.kt");
        }

        @TestMetadata("propertyAccessors.kt")
        public void testPropertyAccessors() {
          runTest("compiler/testData/codegen/box/reflection/mapping/types/propertyAccessors.kt");
        }

        @TestMetadata("rawTypeArgument.kt")
        public void testRawTypeArgument() {
          runTest("compiler/testData/codegen/box/reflection/mapping/types/rawTypeArgument.kt");
        }

        @TestMetadata("supertypes.kt")
        public void testSupertypes() {
          runTest("compiler/testData/codegen/box/reflection/mapping/types/supertypes.kt");
        }

        @TestMetadata("suspendFun.kt")
        public void testSuspendFun() {
          runTest("compiler/testData/codegen/box/reflection/mapping/types/suspendFun.kt");
        }

        @TestMetadata("topLevelFunctions.kt")
        public void testTopLevelFunctions() {
          runTest("compiler/testData/codegen/box/reflection/mapping/types/topLevelFunctions.kt");
        }

        @TestMetadata("typeParameters.kt")
        public void testTypeParameters() {
          runTest("compiler/testData/codegen/box/reflection/mapping/types/typeParameters.kt");
        }

        @TestMetadata("unit.kt")
        public void testUnit() {
          runTest("compiler/testData/codegen/box/reflection/mapping/types/unit.kt");
        }

        @TestMetadata("withNullability.kt")
        public void testWithNullability() {
          runTest("compiler/testData/codegen/box/reflection/mapping/types/withNullability.kt");
        }
      }

      @TestMetadata("compiler/testData/codegen/box/reflection/mapping/valueClasses")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class ValueClasses extends AbstractLightAnalysisModeTest {
        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        public void testAllFilesPresentInValueClasses() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/mapping/valueClasses"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("mfvcPrimaryVal.kt")
        public void testMfvcPrimaryVal() {
          runTest("compiler/testData/codegen/box/reflection/mapping/valueClasses/mfvcPrimaryVal.kt");
        }

        @TestMetadata("suspendFunctionWithMfvcInSignature.kt")
        public void testSuspendFunctionWithMfvcInSignature() {
          runTest("compiler/testData/codegen/box/reflection/mapping/valueClasses/suspendFunctionWithMfvcInSignature.kt");
        }
      }
    }

    @TestMetadata("compiler/testData/codegen/box/reflection/methodsFromAny")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class MethodsFromAny extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      @TestMetadata("adaptedCallableReferencesNotEqualToCallablesFromAPI.kt")
      public void testAdaptedCallableReferencesNotEqualToCallablesFromAPI() {
        runTest("compiler/testData/codegen/box/reflection/methodsFromAny/adaptedCallableReferencesNotEqualToCallablesFromAPI.kt");
      }

      public void testAllFilesPresentInMethodsFromAny() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/methodsFromAny"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("builtinFunctionsToString.kt")
      public void testBuiltinFunctionsToString() {
        runTest("compiler/testData/codegen/box/reflection/methodsFromAny/builtinFunctionsToString.kt");
      }

      @TestMetadata("callableReferencesEqualToCallablesFromAPI.kt")
      public void testCallableReferencesEqualToCallablesFromAPI() {
        runTest("compiler/testData/codegen/box/reflection/methodsFromAny/callableReferencesEqualToCallablesFromAPI.kt");
      }

      @TestMetadata("classToString.kt")
      public void testClassToString() {
        runTest("compiler/testData/codegen/box/reflection/methodsFromAny/classToString.kt");
      }

      @TestMetadata("extensionPropertyReceiverToString.kt")
      public void testExtensionPropertyReceiverToString() {
        runTest("compiler/testData/codegen/box/reflection/methodsFromAny/extensionPropertyReceiverToString.kt");
      }

      @TestMetadata("fakeOverrideEqualsHashCode.kt")
      public void testFakeOverrideEqualsHashCode() {
        runTest("compiler/testData/codegen/box/reflection/methodsFromAny/fakeOverrideEqualsHashCode.kt");
      }

      @TestMetadata("fakeOverrideToString.kt")
      public void testFakeOverrideToString() {
        runTest("compiler/testData/codegen/box/reflection/methodsFromAny/fakeOverrideToString.kt");
      }

      @TestMetadata("fakeOverrideToString2.kt")
      public void testFakeOverrideToString2() {
        runTest("compiler/testData/codegen/box/reflection/methodsFromAny/fakeOverrideToString2.kt");
      }

      @TestMetadata("functionEqualsHashCode.kt")
      public void testFunctionEqualsHashCode() {
        runTest("compiler/testData/codegen/box/reflection/methodsFromAny/functionEqualsHashCode.kt");
      }

      @TestMetadata("functionFromStdlibMultiFileFacade.kt")
      public void testFunctionFromStdlibMultiFileFacade() {
        runTest("compiler/testData/codegen/box/reflection/methodsFromAny/functionFromStdlibMultiFileFacade.kt");
      }

      @TestMetadata("functionFromStdlibSingleFileFacade.kt")
      public void testFunctionFromStdlibSingleFileFacade() {
        runTest("compiler/testData/codegen/box/reflection/methodsFromAny/functionFromStdlibSingleFileFacade.kt");
      }

      @TestMetadata("functionToString.kt")
      public void testFunctionToString() {
        runTest("compiler/testData/codegen/box/reflection/methodsFromAny/functionToString.kt");
      }

      @TestMetadata("memberExtensionToString.kt")
      public void testMemberExtensionToString() {
        runTest("compiler/testData/codegen/box/reflection/methodsFromAny/memberExtensionToString.kt");
      }

      @TestMetadata("parametersEqualsHashCode.kt")
      public void testParametersEqualsHashCode() {
        runTest("compiler/testData/codegen/box/reflection/methodsFromAny/parametersEqualsHashCode.kt");
      }

      @TestMetadata("parametersEqualsWithClearCaches.kt")
      public void testParametersEqualsWithClearCaches() {
        runTest("compiler/testData/codegen/box/reflection/methodsFromAny/parametersEqualsWithClearCaches.kt");
      }

      @TestMetadata("parametersToString.kt")
      public void testParametersToString() {
        runTest("compiler/testData/codegen/box/reflection/methodsFromAny/parametersToString.kt");
      }

      @TestMetadata("propertyAccessorEqualsHashCode.kt")
      public void testPropertyAccessorEqualsHashCode() {
        runTest("compiler/testData/codegen/box/reflection/methodsFromAny/propertyAccessorEqualsHashCode.kt");
      }

      @TestMetadata("propertyEqualsHashCode.kt")
      public void testPropertyEqualsHashCode() {
        runTest("compiler/testData/codegen/box/reflection/methodsFromAny/propertyEqualsHashCode.kt");
      }

      @TestMetadata("propertyToString.kt")
      public void testPropertyToString() {
        runTest("compiler/testData/codegen/box/reflection/methodsFromAny/propertyToString.kt");
      }

      @TestMetadata("typeEqualsHashCode.kt")
      public void testTypeEqualsHashCode() {
        runTest("compiler/testData/codegen/box/reflection/methodsFromAny/typeEqualsHashCode.kt");
      }

      @TestMetadata("typeParametersEqualsHashCode.kt")
      public void testTypeParametersEqualsHashCode() {
        runTest("compiler/testData/codegen/box/reflection/methodsFromAny/typeParametersEqualsHashCode.kt");
      }

      @TestMetadata("typeParametersEqualsWithClearCaches.kt")
      public void testTypeParametersEqualsWithClearCaches() {
        runTest("compiler/testData/codegen/box/reflection/methodsFromAny/typeParametersEqualsWithClearCaches.kt");
      }

      @TestMetadata("typeParametersToString.kt")
      public void testTypeParametersToString() {
        runTest("compiler/testData/codegen/box/reflection/methodsFromAny/typeParametersToString.kt");
      }

      @TestMetadata("typeToString.kt")
      public void testTypeToString() {
        runTest("compiler/testData/codegen/box/reflection/methodsFromAny/typeToString.kt");
      }

      @TestMetadata("typeToStringInnerGeneric.kt")
      public void testTypeToStringInnerGeneric() {
        runTest("compiler/testData/codegen/box/reflection/methodsFromAny/typeToStringInnerGeneric.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/reflection/modifiers")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Modifiers extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInModifiers() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/modifiers"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("callableModality.kt")
      public void testCallableModality() {
        runTest("compiler/testData/codegen/box/reflection/modifiers/callableModality.kt");
      }

      @TestMetadata("callableVisibility.kt")
      public void testCallableVisibility() {
        runTest("compiler/testData/codegen/box/reflection/modifiers/callableVisibility.kt");
      }

      @TestMetadata("classModality.kt")
      public void testClassModality() {
        runTest("compiler/testData/codegen/box/reflection/modifiers/classModality.kt");
      }

      @TestMetadata("classVisibility.kt")
      public void testClassVisibility() {
        runTest("compiler/testData/codegen/box/reflection/modifiers/classVisibility.kt");
      }

      @TestMetadata("classes.kt")
      public void testClasses() {
        runTest("compiler/testData/codegen/box/reflection/modifiers/classes.kt");
      }

      @TestMetadata("functions.kt")
      public void testFunctions() {
        runTest("compiler/testData/codegen/box/reflection/modifiers/functions.kt");
      }

      @TestMetadata("javaVisibility.kt")
      public void testJavaVisibility() {
        runTest("compiler/testData/codegen/box/reflection/modifiers/javaVisibility.kt");
      }

      @TestMetadata("mfvc.kt")
      public void testMfvc() {
        runTest("compiler/testData/codegen/box/reflection/modifiers/mfvc.kt");
      }

      @TestMetadata("properties.kt")
      public void testProperties() {
        runTest("compiler/testData/codegen/box/reflection/modifiers/properties.kt");
      }

      @TestMetadata("typeParameters.kt")
      public void testTypeParameters() {
        runTest("compiler/testData/codegen/box/reflection/modifiers/typeParameters.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/reflection/multifileClasses")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class MultifileClasses extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInMultifileClasses() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/multifileClasses"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("callFunctionsInMultifileClass.kt")
      public void testCallFunctionsInMultifileClass() {
        runTest("compiler/testData/codegen/box/reflection/multifileClasses/callFunctionsInMultifileClass.kt");
      }

      @TestMetadata("callPropertiesInMultifileClass.kt")
      public void testCallPropertiesInMultifileClass() {
        runTest("compiler/testData/codegen/box/reflection/multifileClasses/callPropertiesInMultifileClass.kt");
      }

      @TestMetadata("javaFieldForVarAndConstVal.kt")
      public void testJavaFieldForVarAndConstVal() {
        runTest("compiler/testData/codegen/box/reflection/multifileClasses/javaFieldForVarAndConstVal.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/reflection/noReflectAtRuntime")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class NoReflectAtRuntime extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInNoReflectAtRuntime() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/noReflectAtRuntime"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("javaClass.kt")
      public void testJavaClass() {
        runTest("compiler/testData/codegen/box/reflection/noReflectAtRuntime/javaClass.kt");
      }

      @TestMetadata("javaVoid.kt")
      public void testJavaVoid() {
        runTest("compiler/testData/codegen/box/reflection/noReflectAtRuntime/javaVoid.kt");
      }

      @TestMetadata("primitiveJavaClass.kt")
      public void testPrimitiveJavaClass() {
        runTest("compiler/testData/codegen/box/reflection/noReflectAtRuntime/primitiveJavaClass.kt");
      }

      @TestMetadata("propertyGetSetName.kt")
      public void testPropertyGetSetName() {
        runTest("compiler/testData/codegen/box/reflection/noReflectAtRuntime/propertyGetSetName.kt");
      }

      @TestMetadata("propertyInstanceof.kt")
      public void testPropertyInstanceof() {
        runTest("compiler/testData/codegen/box/reflection/noReflectAtRuntime/propertyInstanceof.kt");
      }

      @TestMetadata("reifiedTypeJavaClass.kt")
      public void testReifiedTypeJavaClass() {
        runTest("compiler/testData/codegen/box/reflection/noReflectAtRuntime/reifiedTypeJavaClass.kt");
      }

      @TestMetadata("simpleClassLiterals.kt")
      public void testSimpleClassLiterals() {
        runTest("compiler/testData/codegen/box/reflection/noReflectAtRuntime/simpleClassLiterals.kt");
      }

      @TestMetadata("compiler/testData/codegen/box/reflection/noReflectAtRuntime/methodsFromAny")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class MethodsFromAny extends AbstractLightAnalysisModeTest {
        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        public void testAllFilesPresentInMethodsFromAny() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/noReflectAtRuntime/methodsFromAny"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("callableReferences.kt")
        public void testCallableReferences() {
          runTest("compiler/testData/codegen/box/reflection/noReflectAtRuntime/methodsFromAny/callableReferences.kt");
        }

        @TestMetadata("classReference.kt")
        public void testClassReference() {
          runTest("compiler/testData/codegen/box/reflection/noReflectAtRuntime/methodsFromAny/classReference.kt");
        }

        @TestMetadata("delegatedProperty.kt")
        public void testDelegatedProperty() {
          runTest("compiler/testData/codegen/box/reflection/noReflectAtRuntime/methodsFromAny/delegatedProperty.kt");
        }
      }
    }

    @TestMetadata("compiler/testData/codegen/box/reflection/parameters")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Parameters extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInParameters() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/parameters"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("bigArity.kt")
      public void testBigArity() {
        runTest("compiler/testData/codegen/box/reflection/parameters/bigArity.kt");
      }

      @TestMetadata("boundInnerClassConstructor.kt")
      public void testBoundInnerClassConstructor() {
        runTest("compiler/testData/codegen/box/reflection/parameters/boundInnerClassConstructor.kt");
      }

      @TestMetadata("boundObjectMemberReferences.kt")
      public void testBoundObjectMemberReferences() {
        runTest("compiler/testData/codegen/box/reflection/parameters/boundObjectMemberReferences.kt");
      }

      @TestMetadata("boundReferences.kt")
      public void testBoundReferences() {
        runTest("compiler/testData/codegen/box/reflection/parameters/boundReferences.kt");
      }

      @TestMetadata("findParameterByName.kt")
      public void testFindParameterByName() {
        runTest("compiler/testData/codegen/box/reflection/parameters/findParameterByName.kt");
      }

      @TestMetadata("functionParameterNameAndIndex.kt")
      public void testFunctionParameterNameAndIndex() {
        runTest("compiler/testData/codegen/box/reflection/parameters/functionParameterNameAndIndex.kt");
      }

      @TestMetadata("instanceExtensionReceiverAndValueParameters.kt")
      public void testInstanceExtensionReceiverAndValueParameters() {
        runTest("compiler/testData/codegen/box/reflection/parameters/instanceExtensionReceiverAndValueParameters.kt");
      }

      @TestMetadata("instanceParameterOfFakeOverride.kt")
      public void testInstanceParameterOfFakeOverride() {
        runTest("compiler/testData/codegen/box/reflection/parameters/instanceParameterOfFakeOverride.kt");
      }

      @TestMetadata("isMarkedNullable.kt")
      public void testIsMarkedNullable() {
        runTest("compiler/testData/codegen/box/reflection/parameters/isMarkedNullable.kt");
      }

      @TestMetadata("isOptional.kt")
      public void testIsOptional() {
        runTest("compiler/testData/codegen/box/reflection/parameters/isOptional.kt");
      }

      @TestMetadata("javaAnnotationConstructor.kt")
      public void testJavaAnnotationConstructor() {
        runTest("compiler/testData/codegen/box/reflection/parameters/javaAnnotationConstructor.kt");
      }

      @TestMetadata("kinds.kt")
      public void testKinds() {
        runTest("compiler/testData/codegen/box/reflection/parameters/kinds.kt");
      }

      @TestMetadata("propertySetter.kt")
      public void testPropertySetter() {
        runTest("compiler/testData/codegen/box/reflection/parameters/propertySetter.kt");
      }

      @TestMetadata("realParameterNames.kt")
      public void testRealParameterNames() {
        runTest("compiler/testData/codegen/box/reflection/parameters/realParameterNames.kt");
      }

      @TestMetadata("synthesizedParameterNames.kt")
      public void testSynthesizedParameterNames() {
        runTest("compiler/testData/codegen/box/reflection/parameters/synthesizedParameterNames.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/reflection/properties")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Properties extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInProperties() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/properties"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("allVsDeclared.kt")
      public void testAllVsDeclared() {
        runTest("compiler/testData/codegen/box/reflection/properties/allVsDeclared.kt");
      }

      @TestMetadata("callPrivatePropertyFromGetProperties.kt")
      public void testCallPrivatePropertyFromGetProperties() {
        runTest("compiler/testData/codegen/box/reflection/properties/callPrivatePropertyFromGetProperties.kt");
      }

      @TestMetadata("declaredVsInheritedProperties.kt")
      public void testDeclaredVsInheritedProperties() {
        runTest("compiler/testData/codegen/box/reflection/properties/declaredVsInheritedProperties.kt");
      }

      @TestMetadata("equalsHashCodeToString.kt")
      public void testEqualsHashCodeToString() {
        runTest("compiler/testData/codegen/box/reflection/properties/equalsHashCodeToString.kt");
      }

      @TestMetadata("fakeOverridesInSubclass.kt")
      public void testFakeOverridesInSubclass() {
        runTest("compiler/testData/codegen/box/reflection/properties/fakeOverridesInSubclass.kt");
      }

      @TestMetadata("genericClassLiteralPropertyReceiverIsStar.kt")
      public void testGenericClassLiteralPropertyReceiverIsStar() {
        runTest("compiler/testData/codegen/box/reflection/properties/genericClassLiteralPropertyReceiverIsStar.kt");
      }

      @TestMetadata("genericOverriddenProperty.kt")
      public void testGenericOverriddenProperty() {
        runTest("compiler/testData/codegen/box/reflection/properties/genericOverriddenProperty.kt");
      }

      @TestMetadata("genericProperty.kt")
      public void testGenericProperty() {
        runTest("compiler/testData/codegen/box/reflection/properties/genericProperty.kt");
      }

      @TestMetadata("getExtensionPropertiesMutableVsReadonly.kt")
      public void testGetExtensionPropertiesMutableVsReadonly() {
        runTest("compiler/testData/codegen/box/reflection/properties/getExtensionPropertiesMutableVsReadonly.kt");
      }

      @TestMetadata("getPropertiesMutableVsReadonly.kt")
      public void testGetPropertiesMutableVsReadonly() {
        runTest("compiler/testData/codegen/box/reflection/properties/getPropertiesMutableVsReadonly.kt");
      }

      @TestMetadata("interfaceDelegation.kt")
      public void testInterfaceDelegation() {
        runTest("compiler/testData/codegen/box/reflection/properties/interfaceDelegation.kt");
      }

      @TestMetadata("invokeKProperty.kt")
      public void testInvokeKProperty() {
        runTest("compiler/testData/codegen/box/reflection/properties/invokeKProperty.kt");
      }

      @TestMetadata("javaPropertyInheritedInKotlin.kt")
      public void testJavaPropertyInheritedInKotlin() {
        runTest("compiler/testData/codegen/box/reflection/properties/javaPropertyInheritedInKotlin.kt");
      }

      @TestMetadata("javaStaticField.kt")
      public void testJavaStaticField() {
        runTest("compiler/testData/codegen/box/reflection/properties/javaStaticField.kt");
      }

      @TestMetadata("kotlinPropertyInheritedInJava.kt")
      public void testKotlinPropertyInheritedInJava() {
        runTest("compiler/testData/codegen/box/reflection/properties/kotlinPropertyInheritedInJava.kt");
      }

      @TestMetadata("memberAndMemberExtensionWithSameName.kt")
      public void testMemberAndMemberExtensionWithSameName() {
        runTest("compiler/testData/codegen/box/reflection/properties/memberAndMemberExtensionWithSameName.kt");
      }

      @TestMetadata("mutatePrivateJavaInstanceField.kt")
      public void testMutatePrivateJavaInstanceField() {
        runTest("compiler/testData/codegen/box/reflection/properties/mutatePrivateJavaInstanceField.kt");
      }

      @TestMetadata("mutatePrivateJavaStaticField.kt")
      public void testMutatePrivateJavaStaticField() {
        runTest("compiler/testData/codegen/box/reflection/properties/mutatePrivateJavaStaticField.kt");
      }

      @TestMetadata("noConflictOnKotlinGetterAndJavaField.kt")
      public void testNoConflictOnKotlinGetterAndJavaField() {
        runTest("compiler/testData/codegen/box/reflection/properties/noConflictOnKotlinGetterAndJavaField.kt");
      }

      @TestMetadata("privateClassVal.kt")
      public void testPrivateClassVal() {
        runTest("compiler/testData/codegen/box/reflection/properties/privateClassVal.kt");
      }

      @TestMetadata("privateClassVar.kt")
      public void testPrivateClassVar() {
        runTest("compiler/testData/codegen/box/reflection/properties/privateClassVar.kt");
      }

      @TestMetadata("privateFakeOverrideFromSuperclass.kt")
      public void testPrivateFakeOverrideFromSuperclass() {
        runTest("compiler/testData/codegen/box/reflection/properties/privateFakeOverrideFromSuperclass.kt");
      }

      @TestMetadata("privateJvmStaticVarInObject.kt")
      public void testPrivateJvmStaticVarInObject() {
        runTest("compiler/testData/codegen/box/reflection/properties/privateJvmStaticVarInObject.kt");
      }

      @TestMetadata("privatePropertyCallIsAccessibleOnAccessors.kt")
      public void testPrivatePropertyCallIsAccessibleOnAccessors() {
        runTest("compiler/testData/codegen/box/reflection/properties/privatePropertyCallIsAccessibleOnAccessors.kt");
      }

      @TestMetadata("privateToThisAccessors.kt")
      public void testPrivateToThisAccessors() {
        runTest("compiler/testData/codegen/box/reflection/properties/privateToThisAccessors.kt");
      }

      @TestMetadata("propertyOfNestedClassAndArrayType.kt")
      public void testPropertyOfNestedClassAndArrayType() {
        runTest("compiler/testData/codegen/box/reflection/properties/propertyOfNestedClassAndArrayType.kt");
      }

      @TestMetadata("propertyOrder.kt")
      public void testPropertyOrder() {
        runTest("compiler/testData/codegen/box/reflection/properties/propertyOrder.kt");
      }

      @TestMetadata("protectedClassVar.kt")
      public void testProtectedClassVar() {
        runTest("compiler/testData/codegen/box/reflection/properties/protectedClassVar.kt");
      }

      @TestMetadata("publicClassValAccessible.kt")
      public void testPublicClassValAccessible() {
        runTest("compiler/testData/codegen/box/reflection/properties/publicClassValAccessible.kt");
      }

      @TestMetadata("referenceToJavaFieldOfKotlinSubclass.kt")
      public void testReferenceToJavaFieldOfKotlinSubclass() {
        runTest("compiler/testData/codegen/box/reflection/properties/referenceToJavaFieldOfKotlinSubclass.kt");
      }

      @TestMetadata("simpleGetProperties.kt")
      public void testSimpleGetProperties() {
        runTest("compiler/testData/codegen/box/reflection/properties/simpleGetProperties.kt");
      }

      @TestMetadata("syntheticJavaProperty.kt")
      public void testSyntheticJavaProperty() {
        runTest("compiler/testData/codegen/box/reflection/properties/syntheticJavaProperty.kt");
      }

      @TestMetadata("withLocalType.kt")
      public void testWithLocalType() {
        runTest("compiler/testData/codegen/box/reflection/properties/withLocalType.kt");
      }

      @TestMetadata("compiler/testData/codegen/box/reflection/properties/accessors")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class Accessors extends AbstractLightAnalysisModeTest {
        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        @TestMetadata("accessorNames.kt")
        public void testAccessorNames() {
          runTest("compiler/testData/codegen/box/reflection/properties/accessors/accessorNames.kt");
        }

        public void testAllFilesPresentInAccessors() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/properties/accessors"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("extensionPropertyAccessors.kt")
        public void testExtensionPropertyAccessors() {
          runTest("compiler/testData/codegen/box/reflection/properties/accessors/extensionPropertyAccessors.kt");
        }

        @TestMetadata("memberExtensions.kt")
        public void testMemberExtensions() {
          runTest("compiler/testData/codegen/box/reflection/properties/accessors/memberExtensions.kt");
        }

        @TestMetadata("memberPropertyAccessors.kt")
        public void testMemberPropertyAccessors() {
          runTest("compiler/testData/codegen/box/reflection/properties/accessors/memberPropertyAccessors.kt");
        }

        @TestMetadata("topLevelPropertyAccessors.kt")
        public void testTopLevelPropertyAccessors() {
          runTest("compiler/testData/codegen/box/reflection/properties/accessors/topLevelPropertyAccessors.kt");
        }
      }

      @TestMetadata("compiler/testData/codegen/box/reflection/properties/getDelegate")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class GetDelegate extends AbstractLightAnalysisModeTest {
        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        public void testAllFilesPresentInGetDelegate() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/properties/getDelegate"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("booleanPropertyNameStartsWithIs.kt")
        public void testBooleanPropertyNameStartsWithIs() {
          runTest("compiler/testData/codegen/box/reflection/properties/getDelegate/booleanPropertyNameStartsWithIs.kt");
        }

        @TestMetadata("boundExtensionProperty.kt")
        public void testBoundExtensionProperty() {
          runTest("compiler/testData/codegen/box/reflection/properties/getDelegate/boundExtensionProperty.kt");
        }

        @TestMetadata("boundMemberProperty.kt")
        public void testBoundMemberProperty() {
          runTest("compiler/testData/codegen/box/reflection/properties/getDelegate/boundMemberProperty.kt");
        }

        @TestMetadata("extensionProperty.kt")
        public void testExtensionProperty() {
          runTest("compiler/testData/codegen/box/reflection/properties/getDelegate/extensionProperty.kt");
        }

        @TestMetadata("fakeOverride.kt")
        public void testFakeOverride() {
          runTest("compiler/testData/codegen/box/reflection/properties/getDelegate/fakeOverride.kt");
        }

        @TestMetadata("getExtensionDelegate.kt")
        public void testGetExtensionDelegate() {
          runTest("compiler/testData/codegen/box/reflection/properties/getDelegate/getExtensionDelegate.kt");
        }

        @TestMetadata("getExtensionDelegateForDelegatedToAnother.kt")
        public void testGetExtensionDelegateForDelegatedToAnother() {
          runTest("compiler/testData/codegen/box/reflection/properties/getDelegate/getExtensionDelegateForDelegatedToAnother.kt");
        }

        @TestMetadata("kPropertyForDelegatedProperty.kt")
        public void testKPropertyForDelegatedProperty() {
          runTest("compiler/testData/codegen/box/reflection/properties/getDelegate/kPropertyForDelegatedProperty.kt");
        }

        @TestMetadata("memberExtensionProperty.kt")
        public void testMemberExtensionProperty() {
          runTest("compiler/testData/codegen/box/reflection/properties/getDelegate/memberExtensionProperty.kt");
        }

        @TestMetadata("memberProperty.kt")
        public void testMemberProperty() {
          runTest("compiler/testData/codegen/box/reflection/properties/getDelegate/memberProperty.kt");
        }

        @TestMetadata("nameClashClassAndCompanion.kt")
        public void testNameClashClassAndCompanion() {
          runTest("compiler/testData/codegen/box/reflection/properties/getDelegate/nameClashClassAndCompanion.kt");
        }

        @TestMetadata("nameClashExtensionProperties.kt")
        public void testNameClashExtensionProperties() {
          runTest("compiler/testData/codegen/box/reflection/properties/getDelegate/nameClashExtensionProperties.kt");
        }

        @TestMetadata("noSetAccessibleTrue.kt")
        public void testNoSetAccessibleTrue() {
          runTest("compiler/testData/codegen/box/reflection/properties/getDelegate/noSetAccessibleTrue.kt");
        }

        @TestMetadata("notDelegatedProperty.kt")
        public void testNotDelegatedProperty() {
          runTest("compiler/testData/codegen/box/reflection/properties/getDelegate/notDelegatedProperty.kt");
        }

        @TestMetadata("overrideDelegatedByDelegated.kt")
        public void testOverrideDelegatedByDelegated() {
          runTest("compiler/testData/codegen/box/reflection/properties/getDelegate/overrideDelegatedByDelegated.kt");
        }

        @TestMetadata("topLevelProperty.kt")
        public void testTopLevelProperty() {
          runTest("compiler/testData/codegen/box/reflection/properties/getDelegate/topLevelProperty.kt");
        }

        @TestMetadata("compiler/testData/codegen/box/reflection/properties/getDelegate/method")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Method extends AbstractLightAnalysisModeTest {
          private void runTest(String testDataFilePath) {
            KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
          }

          public void testAllFilesPresentInMethod() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/properties/getDelegate/method"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }

          @TestMetadata("delegateMethodIsNonOverridable.kt")
          public void testDelegateMethodIsNonOverridable() {
            runTest("compiler/testData/codegen/box/reflection/properties/getDelegate/method/delegateMethodIsNonOverridable.kt");
          }

          @TestMetadata("delegateToAnother.kt")
          public void testDelegateToAnother() {
            runTest("compiler/testData/codegen/box/reflection/properties/getDelegate/method/delegateToAnother.kt");
          }

          @TestMetadata("delegateToConst.kt")
          public void testDelegateToConst() {
            runTest("compiler/testData/codegen/box/reflection/properties/getDelegate/method/delegateToConst.kt");
          }

          @TestMetadata("delegateToConstProperty.kt")
          public void testDelegateToConstProperty() {
            runTest("compiler/testData/codegen/box/reflection/properties/getDelegate/method/delegateToConstProperty.kt");
          }

          @TestMetadata("delegateToEnum.kt")
          public void testDelegateToEnum() {
            runTest("compiler/testData/codegen/box/reflection/properties/getDelegate/method/delegateToEnum.kt");
          }

          @TestMetadata("delegateToFinalObjectProperty.kt")
          public void testDelegateToFinalObjectProperty() {
            runTest("compiler/testData/codegen/box/reflection/properties/getDelegate/method/delegateToFinalObjectProperty.kt");
          }

          @TestMetadata("delegateToFinalProperty.kt")
          public void testDelegateToFinalProperty() {
            runTest("compiler/testData/codegen/box/reflection/properties/getDelegate/method/delegateToFinalProperty.kt");
          }

          @TestMetadata("delegateToSingleton.kt")
          public void testDelegateToSingleton() {
            runTest("compiler/testData/codegen/box/reflection/properties/getDelegate/method/delegateToSingleton.kt");
          }
        }
      }

      @TestMetadata("compiler/testData/codegen/box/reflection/properties/jvmField")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class JvmField extends AbstractLightAnalysisModeTest {
        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        public void testAllFilesPresentInJvmField() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/properties/jvmField"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("annotationCompanionWithAnnotation.kt")
        public void testAnnotationCompanionWithAnnotation() {
          runTest("compiler/testData/codegen/box/reflection/properties/jvmField/annotationCompanionWithAnnotation.kt");
        }

        @TestMetadata("interfaceCompanion.kt")
        public void testInterfaceCompanion() {
          runTest("compiler/testData/codegen/box/reflection/properties/jvmField/interfaceCompanion.kt");
        }

        @TestMetadata("interfaceCompanionWithAnnotation.kt")
        public void testInterfaceCompanionWithAnnotation() {
          runTest("compiler/testData/codegen/box/reflection/properties/jvmField/interfaceCompanionWithAnnotation.kt");
        }
      }

      @TestMetadata("compiler/testData/codegen/box/reflection/properties/localDelegated")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class LocalDelegated extends AbstractLightAnalysisModeTest {
        @TestMetadata("unusedGenericType.kt")
        public void ignoreUnusedGenericType() {
          runTest("compiler/testData/codegen/box/reflection/properties/localDelegated/unusedGenericType.kt");
        }

        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        public void testAllFilesPresentInLocalDelegated() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/properties/localDelegated"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("defaultImpls.kt")
        public void testDefaultImpls() {
          runTest("compiler/testData/codegen/box/reflection/properties/localDelegated/defaultImpls.kt");
        }

        @TestMetadata("inLambda.kt")
        public void testInLambda() {
          runTest("compiler/testData/codegen/box/reflection/properties/localDelegated/inLambda.kt");
        }

        @TestMetadata("inLambdaInInline.kt")
        public void testInLambdaInInline() {
          runTest("compiler/testData/codegen/box/reflection/properties/localDelegated/inLambdaInInline.kt");
        }

        @TestMetadata("inlineFun.kt")
        public void testInlineFun() {
          runTest("compiler/testData/codegen/box/reflection/properties/localDelegated/inlineFun.kt");
        }

        @TestMetadata("localAndNonLocal.kt")
        public void testLocalAndNonLocal() {
          runTest("compiler/testData/codegen/box/reflection/properties/localDelegated/localAndNonLocal.kt");
        }

        @TestMetadata("localDelegatedProperty.kt")
        public void testLocalDelegatedProperty() {
          runTest("compiler/testData/codegen/box/reflection/properties/localDelegated/localDelegatedProperty.kt");
        }

        @TestMetadata("multiFileClass.kt")
        public void testMultiFileClass() {
          runTest("compiler/testData/codegen/box/reflection/properties/localDelegated/multiFileClass.kt");
        }

        @TestMetadata("variableOfGenericType.kt")
        public void testVariableOfGenericType() {
          runTest("compiler/testData/codegen/box/reflection/properties/localDelegated/variableOfGenericType.kt");
        }
      }
    }

    @TestMetadata("compiler/testData/codegen/box/reflection/supertypes")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Supertypes extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInSupertypes() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/supertypes"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("builtInClassSupertypes.kt")
      public void testBuiltInClassSupertypes() {
        runTest("compiler/testData/codegen/box/reflection/supertypes/builtInClassSupertypes.kt");
      }

      @TestMetadata("genericSubstitution.kt")
      public void testGenericSubstitution() {
        runTest("compiler/testData/codegen/box/reflection/supertypes/genericSubstitution.kt");
      }

      @TestMetadata("isSubclassOfIsSuperclassOf.kt")
      public void testIsSubclassOfIsSuperclassOf() {
        runTest("compiler/testData/codegen/box/reflection/supertypes/isSubclassOfIsSuperclassOf.kt");
      }

      @TestMetadata("primitives.kt")
      public void testPrimitives() {
        runTest("compiler/testData/codegen/box/reflection/supertypes/primitives.kt");
      }

      @TestMetadata("simpleSupertypes.kt")
      public void testSimpleSupertypes() {
        runTest("compiler/testData/codegen/box/reflection/supertypes/simpleSupertypes.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/reflection/syntheticClasses")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class SyntheticClasses extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInSyntheticClasses() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/syntheticClasses"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("syntheticClasses.kt")
      public void testSyntheticClasses() {
        runTest("compiler/testData/codegen/box/reflection/syntheticClasses/syntheticClasses.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/reflection/typeOf")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class TypeOf extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInTypeOf() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/typeOf"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("annotatedType.kt")
      public void testAnnotatedType() {
        runTest("compiler/testData/codegen/box/reflection/typeOf/annotatedType.kt");
      }

      @TestMetadata("arrayOfNullableReified.kt")
      public void testArrayOfNullableReified() {
        runTest("compiler/testData/codegen/box/reflection/typeOf/arrayOfNullableReified.kt");
      }

      @TestMetadata("caching.kt")
      public void testCaching() {
        runTest("compiler/testData/codegen/box/reflection/typeOf/caching.kt");
      }

      @TestMetadata("classes.kt")
      public void testClasses() {
        runTest("compiler/testData/codegen/box/reflection/typeOf/classes.kt");
      }

      @TestMetadata("flexibleTypes_after.kt")
      public void testFlexibleTypes_after() {
        runTest("compiler/testData/codegen/box/reflection/typeOf/flexibleTypes_after.kt");
      }

      @TestMetadata("flexibleTypes_before.kt")
      public void testFlexibleTypes_before() {
        runTest("compiler/testData/codegen/box/reflection/typeOf/flexibleTypes_before.kt");
      }

      @TestMetadata("inlineClasses.kt")
      public void testInlineClasses() {
        runTest("compiler/testData/codegen/box/reflection/typeOf/inlineClasses.kt");
      }

      @TestMetadata("intersectionType.kt")
      public void testIntersectionType() {
        runTest("compiler/testData/codegen/box/reflection/typeOf/intersectionType.kt");
      }

      @TestMetadata("manyTypeArguments.kt")
      public void testManyTypeArguments() {
        runTest("compiler/testData/codegen/box/reflection/typeOf/manyTypeArguments.kt");
      }

      @TestMetadata("mfvc.kt")
      public void testMfvc() {
        runTest("compiler/testData/codegen/box/reflection/typeOf/mfvc.kt");
      }

      @TestMetadata("multipleLayers.kt")
      public void testMultipleLayers() {
        runTest("compiler/testData/codegen/box/reflection/typeOf/multipleLayers.kt");
      }

      @TestMetadata("mutableCollections_after.kt")
      public void testMutableCollections_after() {
        runTest("compiler/testData/codegen/box/reflection/typeOf/mutableCollections_after.kt");
      }

      @TestMetadata("mutableCollections_before.kt")
      public void testMutableCollections_before() {
        runTest("compiler/testData/codegen/box/reflection/typeOf/mutableCollections_before.kt");
      }

      @TestMetadata("nothing_after.kt")
      public void testNothing_after() {
        runTest("compiler/testData/codegen/box/reflection/typeOf/nothing_after.kt");
      }

      @TestMetadata("nothing_before.kt")
      public void testNothing_before() {
        runTest("compiler/testData/codegen/box/reflection/typeOf/nothing_before.kt");
      }

      @TestMetadata("primitiveJavaTypes.kt")
      public void testPrimitiveJavaTypes() {
        runTest("compiler/testData/codegen/box/reflection/typeOf/primitiveJavaTypes.kt");
      }

      @TestMetadata("rawTypes_after.kt")
      public void testRawTypes_after() {
        runTest("compiler/testData/codegen/box/reflection/typeOf/rawTypes_after.kt");
      }

      @TestMetadata("rawTypes_before.kt")
      public void testRawTypes_before() {
        runTest("compiler/testData/codegen/box/reflection/typeOf/rawTypes_before.kt");
      }

      @TestMetadata("reifiedAsNestedArgument.kt")
      public void testReifiedAsNestedArgument() {
        runTest("compiler/testData/codegen/box/reflection/typeOf/reifiedAsNestedArgument.kt");
      }

      @TestMetadata("typeOfCapturedStar.kt")
      public void testTypeOfCapturedStar() {
        runTest("compiler/testData/codegen/box/reflection/typeOf/typeOfCapturedStar.kt");
      }

      @TestMetadata("compiler/testData/codegen/box/reflection/typeOf/js")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class Js extends AbstractLightAnalysisModeTest {
        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        public void testAllFilesPresentInJs() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/typeOf/js"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }
      }

      @TestMetadata("compiler/testData/codegen/box/reflection/typeOf/noReflect")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class NoReflect extends AbstractLightAnalysisModeTest {
        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        public void testAllFilesPresentInNoReflect() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/typeOf/noReflect"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("annotatedType.kt")
        public void testAnnotatedType() {
          runTest("compiler/testData/codegen/box/reflection/typeOf/noReflect/annotatedType.kt");
        }

        @TestMetadata("classes.kt")
        public void testClasses() {
          runTest("compiler/testData/codegen/box/reflection/typeOf/noReflect/classes.kt");
        }

        @TestMetadata("flexibleTypes_after.kt")
        public void testFlexibleTypes_after() {
          runTest("compiler/testData/codegen/box/reflection/typeOf/noReflect/flexibleTypes_after.kt");
        }

        @TestMetadata("flexibleTypes_before.kt")
        public void testFlexibleTypes_before() {
          runTest("compiler/testData/codegen/box/reflection/typeOf/noReflect/flexibleTypes_before.kt");
        }

        @TestMetadata("inlineClasses.kt")
        public void testInlineClasses() {
          runTest("compiler/testData/codegen/box/reflection/typeOf/noReflect/inlineClasses.kt");
        }

        @TestMetadata("mfvc.kt")
        public void testMfvc() {
          runTest("compiler/testData/codegen/box/reflection/typeOf/noReflect/mfvc.kt");
        }

        @TestMetadata("mutableCollections_after.kt")
        public void testMutableCollections_after() {
          runTest("compiler/testData/codegen/box/reflection/typeOf/noReflect/mutableCollections_after.kt");
        }

        @TestMetadata("mutableCollections_before.kt")
        public void testMutableCollections_before() {
          runTest("compiler/testData/codegen/box/reflection/typeOf/noReflect/mutableCollections_before.kt");
        }

        @TestMetadata("nothing_after.kt")
        public void testNothing_after() {
          runTest("compiler/testData/codegen/box/reflection/typeOf/noReflect/nothing_after.kt");
        }

        @TestMetadata("nothing_before.kt")
        public void testNothing_before() {
          runTest("compiler/testData/codegen/box/reflection/typeOf/noReflect/nothing_before.kt");
        }

        @TestMetadata("primitiveJavaTypes.kt")
        public void testPrimitiveJavaTypes() {
          runTest("compiler/testData/codegen/box/reflection/typeOf/noReflect/primitiveJavaTypes.kt");
        }

        @TestMetadata("rawTypes_after.kt")
        public void testRawTypes_after() {
          runTest("compiler/testData/codegen/box/reflection/typeOf/noReflect/rawTypes_after.kt");
        }

        @TestMetadata("rawTypes_before.kt")
        public void testRawTypes_before() {
          runTest("compiler/testData/codegen/box/reflection/typeOf/noReflect/rawTypes_before.kt");
        }

        @TestMetadata("typeReferenceEqualsHashCode.kt")
        public void testTypeReferenceEqualsHashCode() {
          runTest("compiler/testData/codegen/box/reflection/typeOf/noReflect/typeReferenceEqualsHashCode.kt");
        }

        @TestMetadata("compiler/testData/codegen/box/reflection/typeOf/noReflect/nonReifiedTypeParameters")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class NonReifiedTypeParameters extends AbstractLightAnalysisModeTest {
          private void runTest(String testDataFilePath) {
            KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
          }

          public void testAllFilesPresentInNonReifiedTypeParameters() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/typeOf/noReflect/nonReifiedTypeParameters"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }

          @TestMetadata("defaultUpperBound.kt")
          public void testDefaultUpperBound() {
            runTest("compiler/testData/codegen/box/reflection/typeOf/noReflect/nonReifiedTypeParameters/defaultUpperBound.kt");
          }

          @TestMetadata("equalsOnClassParameters.kt")
          public void testEqualsOnClassParameters() {
            runTest("compiler/testData/codegen/box/reflection/typeOf/noReflect/nonReifiedTypeParameters/equalsOnClassParameters.kt");
          }

          @TestMetadata("equalsOnFunctionParameters.kt")
          public void testEqualsOnFunctionParameters() {
            runTest("compiler/testData/codegen/box/reflection/typeOf/noReflect/nonReifiedTypeParameters/equalsOnFunctionParameters.kt");
          }

          @TestMetadata("innerGeneric.kt")
          public void testInnerGeneric() {
            runTest("compiler/testData/codegen/box/reflection/typeOf/noReflect/nonReifiedTypeParameters/innerGeneric.kt");
          }

          @TestMetadata("simpleClassParameter.kt")
          public void testSimpleClassParameter() {
            runTest("compiler/testData/codegen/box/reflection/typeOf/noReflect/nonReifiedTypeParameters/simpleClassParameter.kt");
          }

          @TestMetadata("simpleFunctionParameter.kt")
          public void testSimpleFunctionParameter() {
            runTest("compiler/testData/codegen/box/reflection/typeOf/noReflect/nonReifiedTypeParameters/simpleFunctionParameter.kt");
          }

          @TestMetadata("simplePropertyParameter.kt")
          public void testSimplePropertyParameter() {
            runTest("compiler/testData/codegen/box/reflection/typeOf/noReflect/nonReifiedTypeParameters/simplePropertyParameter.kt");
          }

          @TestMetadata("typeParameterFlags.kt")
          public void testTypeParameterFlags() {
            runTest("compiler/testData/codegen/box/reflection/typeOf/noReflect/nonReifiedTypeParameters/typeParameterFlags.kt");
          }

          @TestMetadata("upperBoundUsesOuterClassParameter.kt")
          public void testUpperBoundUsesOuterClassParameter() {
            runTest("compiler/testData/codegen/box/reflection/typeOf/noReflect/nonReifiedTypeParameters/upperBoundUsesOuterClassParameter.kt");
          }

          @TestMetadata("upperBounds.kt")
          public void testUpperBounds() {
            runTest("compiler/testData/codegen/box/reflection/typeOf/noReflect/nonReifiedTypeParameters/upperBounds.kt");
          }
        }
      }

      @TestMetadata("compiler/testData/codegen/box/reflection/typeOf/nonReifiedTypeParameters")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class NonReifiedTypeParameters extends AbstractLightAnalysisModeTest {
        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        public void testAllFilesPresentInNonReifiedTypeParameters() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/typeOf/nonReifiedTypeParameters"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("defaultUpperBound.kt")
        public void testDefaultUpperBound() {
          runTest("compiler/testData/codegen/box/reflection/typeOf/nonReifiedTypeParameters/defaultUpperBound.kt");
        }

        @TestMetadata("equalsOnClassParameters.kt")
        public void testEqualsOnClassParameters() {
          runTest("compiler/testData/codegen/box/reflection/typeOf/nonReifiedTypeParameters/equalsOnClassParameters.kt");
        }

        @TestMetadata("equalsOnClassParametersWithReflectAPI.kt")
        public void testEqualsOnClassParametersWithReflectAPI() {
          runTest("compiler/testData/codegen/box/reflection/typeOf/nonReifiedTypeParameters/equalsOnClassParametersWithReflectAPI.kt");
        }

        @TestMetadata("equalsOnFunctionParameters.kt")
        public void testEqualsOnFunctionParameters() {
          runTest("compiler/testData/codegen/box/reflection/typeOf/nonReifiedTypeParameters/equalsOnFunctionParameters.kt");
        }

        @TestMetadata("innerGeneric.kt")
        public void testInnerGeneric() {
          runTest("compiler/testData/codegen/box/reflection/typeOf/nonReifiedTypeParameters/innerGeneric.kt");
        }

        @TestMetadata("insideInlineLambda_class.kt")
        public void testInsideInlineLambda_class() {
          runTest("compiler/testData/codegen/box/reflection/typeOf/nonReifiedTypeParameters/insideInlineLambda_class.kt");
        }

        @TestMetadata("insideInlineLambda_indy.kt")
        public void testInsideInlineLambda_indy() {
          runTest("compiler/testData/codegen/box/reflection/typeOf/nonReifiedTypeParameters/insideInlineLambda_indy.kt");
        }

        @TestMetadata("insideNonInlineLambda_class.kt")
        public void testInsideNonInlineLambda_class() {
          runTest("compiler/testData/codegen/box/reflection/typeOf/nonReifiedTypeParameters/insideNonInlineLambda_class.kt");
        }

        @TestMetadata("insideNonInlineLambda_indy.kt")
        public void testInsideNonInlineLambda_indy() {
          runTest("compiler/testData/codegen/box/reflection/typeOf/nonReifiedTypeParameters/insideNonInlineLambda_indy.kt");
        }

        @TestMetadata("simpleClassParameter.kt")
        public void testSimpleClassParameter() {
          runTest("compiler/testData/codegen/box/reflection/typeOf/nonReifiedTypeParameters/simpleClassParameter.kt");
        }

        @TestMetadata("simpleFunctionParameter.kt")
        public void testSimpleFunctionParameter() {
          runTest("compiler/testData/codegen/box/reflection/typeOf/nonReifiedTypeParameters/simpleFunctionParameter.kt");
        }

        @TestMetadata("simplePropertyParameter.kt")
        public void testSimplePropertyParameter() {
          runTest("compiler/testData/codegen/box/reflection/typeOf/nonReifiedTypeParameters/simplePropertyParameter.kt");
        }

        @TestMetadata("starProjectionInUpperBound.kt")
        public void testStarProjectionInUpperBound() {
          runTest("compiler/testData/codegen/box/reflection/typeOf/nonReifiedTypeParameters/starProjectionInUpperBound.kt");
        }

        @TestMetadata("typeParameterFlags.kt")
        public void testTypeParameterFlags() {
          runTest("compiler/testData/codegen/box/reflection/typeOf/nonReifiedTypeParameters/typeParameterFlags.kt");
        }

        @TestMetadata("upperBoundUsesOuterClassParameter.kt")
        public void testUpperBoundUsesOuterClassParameter() {
          runTest("compiler/testData/codegen/box/reflection/typeOf/nonReifiedTypeParameters/upperBoundUsesOuterClassParameter.kt");
        }

        @TestMetadata("upperBounds.kt")
        public void testUpperBounds() {
          runTest("compiler/testData/codegen/box/reflection/typeOf/nonReifiedTypeParameters/upperBounds.kt");
        }
      }
    }

    @TestMetadata("compiler/testData/codegen/box/reflection/typeParameters")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class TypeParameters extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInTypeParameters() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/typeParameters"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("declarationSiteVariance.kt")
      public void testDeclarationSiteVariance() {
        runTest("compiler/testData/codegen/box/reflection/typeParameters/declarationSiteVariance.kt");
      }

      @TestMetadata("innerGenericParameter.kt")
      public void testInnerGenericParameter() {
        runTest("compiler/testData/codegen/box/reflection/typeParameters/innerGenericParameter.kt");
      }

      @TestMetadata("javaGenericTypeConstructor.kt")
      public void testJavaGenericTypeConstructor() {
        runTest("compiler/testData/codegen/box/reflection/typeParameters/javaGenericTypeConstructor.kt");
      }

      @TestMetadata("typeParametersAndNames.kt")
      public void testTypeParametersAndNames() {
        runTest("compiler/testData/codegen/box/reflection/typeParameters/typeParametersAndNames.kt");
      }

      @TestMetadata("upperBounds.kt")
      public void testUpperBounds() {
        runTest("compiler/testData/codegen/box/reflection/typeParameters/upperBounds.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/reflection/types")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Types extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInTypes() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/types"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("classifierIsClass.kt")
      public void testClassifierIsClass() {
        runTest("compiler/testData/codegen/box/reflection/types/classifierIsClass.kt");
      }

      @TestMetadata("classifierIsTypeParameter.kt")
      public void testClassifierIsTypeParameter() {
        runTest("compiler/testData/codegen/box/reflection/types/classifierIsTypeParameter.kt");
      }

      @TestMetadata("classifiersOfBuiltInTypes.kt")
      public void testClassifiersOfBuiltInTypes() {
        runTest("compiler/testData/codegen/box/reflection/types/classifiersOfBuiltInTypes.kt");
      }

      @TestMetadata("equalsForClassAndTypeParameterWithSameFqName.kt")
      public void testEqualsForClassAndTypeParameterWithSameFqName() {
        runTest("compiler/testData/codegen/box/reflection/types/equalsForClassAndTypeParameterWithSameFqName.kt");
      }

      @TestMetadata("innerGenericArguments.kt")
      public void testInnerGenericArguments() {
        runTest("compiler/testData/codegen/box/reflection/types/innerGenericArguments.kt");
      }

      @TestMetadata("jvmErasureOfClass.kt")
      public void testJvmErasureOfClass() {
        runTest("compiler/testData/codegen/box/reflection/types/jvmErasureOfClass.kt");
      }

      @TestMetadata("jvmErasureOfTypeParameter.kt")
      public void testJvmErasureOfTypeParameter() {
        runTest("compiler/testData/codegen/box/reflection/types/jvmErasureOfTypeParameter.kt");
      }

      @TestMetadata("platformTypeClassifier.kt")
      public void testPlatformTypeClassifier() {
        runTest("compiler/testData/codegen/box/reflection/types/platformTypeClassifier.kt");
      }

      @TestMetadata("platformTypeNotEqualToKotlinType.kt")
      public void testPlatformTypeNotEqualToKotlinType() {
        runTest("compiler/testData/codegen/box/reflection/types/platformTypeNotEqualToKotlinType.kt");
      }

      @TestMetadata("platformTypeToString.kt")
      public void testPlatformTypeToString() {
        runTest("compiler/testData/codegen/box/reflection/types/platformTypeToString.kt");
      }

      @TestMetadata("typeArguments.kt")
      public void testTypeArguments() {
        runTest("compiler/testData/codegen/box/reflection/types/typeArguments.kt");
      }

      @TestMetadata("useSiteVariance.kt")
      public void testUseSiteVariance() {
        runTest("compiler/testData/codegen/box/reflection/types/useSiteVariance.kt");
      }

      @TestMetadata("withNullability.kt")
      public void testWithNullability() {
        runTest("compiler/testData/codegen/box/reflection/types/withNullability.kt");
      }

      @TestMetadata("compiler/testData/codegen/box/reflection/types/createType")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class CreateType extends AbstractLightAnalysisModeTest {
        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        public void testAllFilesPresentInCreateType() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/types/createType"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("equality.kt")
        public void testEquality() {
          runTest("compiler/testData/codegen/box/reflection/types/createType/equality.kt");
        }

        @TestMetadata("innerGeneric.kt")
        public void testInnerGeneric() {
          runTest("compiler/testData/codegen/box/reflection/types/createType/innerGeneric.kt");
        }

        @TestMetadata("simpleCreateType.kt")
        public void testSimpleCreateType() {
          runTest("compiler/testData/codegen/box/reflection/types/createType/simpleCreateType.kt");
        }

        @TestMetadata("typeParameter.kt")
        public void testTypeParameter() {
          runTest("compiler/testData/codegen/box/reflection/types/createType/typeParameter.kt");
        }

        @TestMetadata("wrongNumberOfArguments.kt")
        public void testWrongNumberOfArguments() {
          runTest("compiler/testData/codegen/box/reflection/types/createType/wrongNumberOfArguments.kt");
        }
      }

      @TestMetadata("compiler/testData/codegen/box/reflection/types/subtyping")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class Subtyping extends AbstractLightAnalysisModeTest {
        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        public void testAllFilesPresentInSubtyping() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/types/subtyping"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("platformType.kt")
        public void testPlatformType() {
          runTest("compiler/testData/codegen/box/reflection/types/subtyping/platformType.kt");
        }

        @TestMetadata("simpleGenericTypes.kt")
        public void testSimpleGenericTypes() {
          runTest("compiler/testData/codegen/box/reflection/types/subtyping/simpleGenericTypes.kt");
        }

        @TestMetadata("simpleSubtypeSupertype.kt")
        public void testSimpleSubtypeSupertype() {
          runTest("compiler/testData/codegen/box/reflection/types/subtyping/simpleSubtypeSupertype.kt");
        }

        @TestMetadata("typeProjection.kt")
        public void testTypeProjection() {
          runTest("compiler/testData/codegen/box/reflection/types/subtyping/typeProjection.kt");
        }
      }
    }
  }

  @TestMetadata("compiler/testData/codegen/box/regressions")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Regressions extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInRegressions() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/regressions"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("approximateIntersectionType.kt")
    public void testApproximateIntersectionType() {
      runTest("compiler/testData/codegen/box/regressions/approximateIntersectionType.kt");
    }

    @TestMetadata("approximationForDefinitelyNotNull.kt")
    public void testApproximationForDefinitelyNotNull() {
      runTest("compiler/testData/codegen/box/regressions/approximationForDefinitelyNotNull.kt");
    }

    @TestMetadata("arrayLengthNPE.kt")
    public void testArrayLengthNPE() {
      runTest("compiler/testData/codegen/box/regressions/arrayLengthNPE.kt");
    }

    @TestMetadata("collections.kt")
    public void testCollections() {
      runTest("compiler/testData/codegen/box/regressions/collections.kt");
    }

    @TestMetadata("commonSupertypeContravariant.kt")
    public void testCommonSupertypeContravariant() {
      runTest("compiler/testData/codegen/box/regressions/commonSupertypeContravariant.kt");
    }

    @TestMetadata("commonSupertypeContravariant2.kt")
    public void testCommonSupertypeContravariant2() {
      runTest("compiler/testData/codegen/box/regressions/commonSupertypeContravariant2.kt");
    }

    @TestMetadata("dontCaptureTypesWithTypeVariables.kt")
    public void testDontCaptureTypesWithTypeVariables() {
      runTest("compiler/testData/codegen/box/regressions/dontCaptureTypesWithTypeVariables.kt");
    }

    @TestMetadata("doubleMerge.kt")
    public void testDoubleMerge() {
      runTest("compiler/testData/codegen/box/regressions/doubleMerge.kt");
    }

    @TestMetadata("floatMerge.kt")
    public void testFloatMerge() {
      runTest("compiler/testData/codegen/box/regressions/floatMerge.kt");
    }

    @TestMetadata("functionLiteralAsLastExpressionInBlock.kt")
    public void testFunctionLiteralAsLastExpressionInBlock() {
      runTest("compiler/testData/codegen/box/regressions/functionLiteralAsLastExpressionInBlock.kt");
    }

    @TestMetadata("generic.kt")
    public void testGeneric() {
      runTest("compiler/testData/codegen/box/regressions/generic.kt");
    }

    @TestMetadata("getGenericInterfaces.kt")
    public void testGetGenericInterfaces() {
      runTest("compiler/testData/codegen/box/regressions/getGenericInterfaces.kt");
    }

    @TestMetadata("hashCodeNPE.kt")
    public void testHashCodeNPE() {
      runTest("compiler/testData/codegen/box/regressions/hashCodeNPE.kt");
    }

    @TestMetadata("internalTopLevelOtherPackage.kt")
    public void testInternalTopLevelOtherPackage() {
      runTest("compiler/testData/codegen/box/regressions/internalTopLevelOtherPackage.kt");
    }

    @TestMetadata("intersectionAsLastLambda.kt")
    public void testIntersectionAsLastLambda() {
      runTest("compiler/testData/codegen/box/regressions/intersectionAsLastLambda.kt");
    }

    @TestMetadata("intersectionOfEqualTypes.kt")
    public void testIntersectionOfEqualTypes() {
      runTest("compiler/testData/codegen/box/regressions/intersectionOfEqualTypes.kt");
    }

    @TestMetadata("kt10143.kt")
    public void testKt10143() {
      runTest("compiler/testData/codegen/box/regressions/kt10143.kt");
    }

    @TestMetadata("kt10934.kt")
    public void testKt10934() {
      runTest("compiler/testData/codegen/box/regressions/kt10934.kt");
    }

    @TestMetadata("Kt1149.kt")
    public void testKt1149() {
      runTest("compiler/testData/codegen/box/regressions/Kt1149.kt");
    }

    @TestMetadata("kt1172.kt")
    public void testKt1172() {
      runTest("compiler/testData/codegen/box/regressions/kt1172.kt");
    }

    @TestMetadata("kt1202.kt")
    public void testKt1202() {
      runTest("compiler/testData/codegen/box/regressions/kt1202.kt");
    }

    @TestMetadata("kt13381.kt")
    public void testKt13381() {
      runTest("compiler/testData/codegen/box/regressions/kt13381.kt");
    }

    @TestMetadata("kt1406.kt")
    public void testKt1406() {
      runTest("compiler/testData/codegen/box/regressions/kt1406.kt");
    }

    @TestMetadata("kt14447.kt")
    public void testKt14447() {
      runTest("compiler/testData/codegen/box/regressions/kt14447.kt");
    }

    @TestMetadata("kt1515.kt")
    public void testKt1515() {
      runTest("compiler/testData/codegen/box/regressions/kt1515.kt");
    }

    @TestMetadata("kt15196.kt")
    public void testKt15196() {
      runTest("compiler/testData/codegen/box/regressions/kt15196.kt");
    }

    @TestMetadata("kt1528.kt")
    public void testKt1528() {
      runTest("compiler/testData/codegen/box/regressions/kt1528.kt");
    }

    @TestMetadata("kt1568.kt")
    public void testKt1568() {
      runTest("compiler/testData/codegen/box/regressions/kt1568.kt");
    }

    @TestMetadata("Kt1619Test.kt")
    public void testKt1619Test() {
      runTest("compiler/testData/codegen/box/regressions/Kt1619Test.kt");
    }

    @TestMetadata("kt1779.kt")
    public void testKt1779() {
      runTest("compiler/testData/codegen/box/regressions/kt1779.kt");
    }

    @TestMetadata("kt1800.kt")
    public void testKt1800() {
      runTest("compiler/testData/codegen/box/regressions/kt1800.kt");
    }

    @TestMetadata("kt1845.kt")
    public void testKt1845() {
      runTest("compiler/testData/codegen/box/regressions/kt1845.kt");
    }

    @TestMetadata("kt18779.kt")
    public void testKt18779() {
      runTest("compiler/testData/codegen/box/regressions/kt18779.kt");
    }

    @TestMetadata("kt1932.kt")
    public void testKt1932() {
      runTest("compiler/testData/codegen/box/regressions/kt1932.kt");
    }

    @TestMetadata("kt2017.kt")
    public void testKt2017() {
      runTest("compiler/testData/codegen/box/regressions/kt2017.kt");
    }

    @TestMetadata("kt2060.kt")
    public void testKt2060() {
      runTest("compiler/testData/codegen/box/regressions/kt2060.kt");
    }

    @TestMetadata("kt2210.kt")
    public void testKt2210() {
      runTest("compiler/testData/codegen/box/regressions/kt2210.kt");
    }

    @TestMetadata("kt2246.kt")
    public void testKt2246() {
      runTest("compiler/testData/codegen/box/regressions/kt2246.kt");
    }

    @TestMetadata("kt2318.kt")
    public void testKt2318() {
      runTest("compiler/testData/codegen/box/regressions/kt2318.kt");
    }

    @TestMetadata("kt24913.kt")
    public void testKt24913() {
      runTest("compiler/testData/codegen/box/regressions/kt24913.kt");
    }

    @TestMetadata("Kt2495Test.kt")
    public void testKt2495Test() {
      runTest("compiler/testData/codegen/box/regressions/Kt2495Test.kt");
    }

    @TestMetadata("kt2509.kt")
    public void testKt2509() {
      runTest("compiler/testData/codegen/box/regressions/kt2509.kt");
    }

    @TestMetadata("kt2593.kt")
    public void testKt2593() {
      runTest("compiler/testData/codegen/box/regressions/kt2593.kt");
    }

    @TestMetadata("kt274.kt")
    public void testKt274() {
      runTest("compiler/testData/codegen/box/regressions/kt274.kt");
    }

    @TestMetadata("kt3046.kt")
    public void testKt3046() {
      runTest("compiler/testData/codegen/box/regressions/kt3046.kt");
    }

    @TestMetadata("kt3107.kt")
    public void testKt3107() {
      runTest("compiler/testData/codegen/box/regressions/kt3107.kt");
    }

    @TestMetadata("kt32949.kt")
    public void testKt32949() {
      runTest("compiler/testData/codegen/box/regressions/kt32949.kt");
    }

    @TestMetadata("kt33638.kt")
    public void testKt33638() {
      runTest("compiler/testData/codegen/box/regressions/kt33638.kt");
    }

    @TestMetadata("kt3421.kt")
    public void testKt3421() {
      runTest("compiler/testData/codegen/box/regressions/kt3421.kt");
    }

    @TestMetadata("kt344.kt")
    public void testKt344() {
      runTest("compiler/testData/codegen/box/regressions/kt344.kt");
    }

    @TestMetadata("kt3442.kt")
    public void testKt3442() {
      runTest("compiler/testData/codegen/box/regressions/kt3442.kt");
    }

    @TestMetadata("kt344Runnable.kt")
    public void testKt344Runnable() {
      runTest("compiler/testData/codegen/box/regressions/kt344Runnable.kt");
    }

    @TestMetadata("kt3587.kt")
    public void testKt3587() {
      runTest("compiler/testData/codegen/box/regressions/kt3587.kt");
    }

    @TestMetadata("kt35914.kt")
    public void testKt35914() {
      runTest("compiler/testData/codegen/box/regressions/kt35914.kt");
    }

    @TestMetadata("kt3850.kt")
    public void testKt3850() {
      runTest("compiler/testData/codegen/box/regressions/kt3850.kt");
    }

    @TestMetadata("kt3903.kt")
    public void testKt3903() {
      runTest("compiler/testData/codegen/box/regressions/kt3903.kt");
    }

    @TestMetadata("kt39088.kt")
    public void testKt39088() {
      runTest("compiler/testData/codegen/box/regressions/kt39088.kt");
    }

    @TestMetadata("kt41357.kt")
    public void testKt41357() {
      runTest("compiler/testData/codegen/box/regressions/kt41357.kt");
    }

    @TestMetadata("kt4142.kt")
    public void testKt4142() {
      runTest("compiler/testData/codegen/box/regressions/kt4142.kt");
    }

    @TestMetadata("kt41806.kt")
    public void testKt41806() {
      runTest("compiler/testData/codegen/box/regressions/kt41806.kt");
    }

    @TestMetadata("kt4259.kt")
    public void testKt4259() {
      runTest("compiler/testData/codegen/box/regressions/kt4259.kt");
    }

    @TestMetadata("kt4262.kt")
    public void testKt4262() {
      runTest("compiler/testData/codegen/box/regressions/kt4262.kt");
    }

    @TestMetadata("kt4281.kt")
    public void testKt4281() {
      runTest("compiler/testData/codegen/box/regressions/kt4281.kt");
    }

    @TestMetadata("kt44993.kt")
    public void testKt44993() {
      runTest("compiler/testData/codegen/box/regressions/kt44993.kt");
    }

    @TestMetadata("kt47279.kt")
    public void testKt47279() {
      runTest("compiler/testData/codegen/box/regressions/kt47279.kt");
    }

    @TestMetadata("kt5056.kt")
    public void testKt5056() {
      runTest("compiler/testData/codegen/box/regressions/kt5056.kt");
    }

    @TestMetadata("kt51171.kt")
    public void testKt51171() {
      runTest("compiler/testData/codegen/box/regressions/kt51171.kt");
    }

    @TestMetadata("kt51265.kt")
    public void testKt51265() {
      runTest("compiler/testData/codegen/box/regressions/kt51265.kt");
    }

    @TestMetadata("kt528.kt")
    public void testKt528() {
      runTest("compiler/testData/codegen/box/regressions/kt528.kt");
    }

    @TestMetadata("kt529.kt")
    public void testKt529() {
      runTest("compiler/testData/codegen/box/regressions/kt529.kt");
    }

    @TestMetadata("kt533.kt")
    public void testKt533() {
      runTest("compiler/testData/codegen/box/regressions/kt533.kt");
    }

    @TestMetadata("kt5395.kt")
    public void testKt5395() {
      runTest("compiler/testData/codegen/box/regressions/kt5395.kt");
    }

    @TestMetadata("kt5445.kt")
    public void testKt5445() {
      runTest("compiler/testData/codegen/box/regressions/kt5445.kt");
    }

    @TestMetadata("kt5445_2.kt")
    public void testKt5445_2() {
      runTest("compiler/testData/codegen/box/regressions/kt5445_2.kt");
    }

    @TestMetadata("kt57487.kt")
    public void testKt57487() {
      runTest("compiler/testData/codegen/box/regressions/kt57487.kt");
    }

    @TestMetadata("kt5786_privateWithDefault.kt")
    public void testKt5786_privateWithDefault() {
      runTest("compiler/testData/codegen/box/regressions/kt5786_privateWithDefault.kt");
    }

    @TestMetadata("kt5953.kt")
    public void testKt5953() {
      runTest("compiler/testData/codegen/box/regressions/kt5953.kt");
    }

    @TestMetadata("kt6153.kt")
    public void testKt6153() {
      runTest("compiler/testData/codegen/box/regressions/kt6153.kt");
    }

    @TestMetadata("kt6434.kt")
    public void testKt6434() {
      runTest("compiler/testData/codegen/box/regressions/kt6434.kt");
    }

    @TestMetadata("kt6434_2.kt")
    public void testKt6434_2() {
      runTest("compiler/testData/codegen/box/regressions/kt6434_2.kt");
    }

    @TestMetadata("kt6485.kt")
    public void testKt6485() {
      runTest("compiler/testData/codegen/box/regressions/kt6485.kt");
    }

    @TestMetadata("kt68727.kt")
    public void testKt68727() {
      runTest("compiler/testData/codegen/box/regressions/kt68727.kt");
    }

    @TestMetadata("kt715.kt")
    public void testKt715() {
      runTest("compiler/testData/codegen/box/regressions/kt715.kt");
    }

    @TestMetadata("kt7401.kt")
    public void testKt7401() {
      runTest("compiler/testData/codegen/box/regressions/kt7401.kt");
    }

    @TestMetadata("kt789.kt")
    public void testKt789() {
      runTest("compiler/testData/codegen/box/regressions/kt789.kt");
    }

    @TestMetadata("kt864.kt")
    public void testKt864() {
      runTest("compiler/testData/codegen/box/regressions/kt864.kt");
    }

    @TestMetadata("kt9345.kt")
    public void testKt9345() {
      runTest("compiler/testData/codegen/box/regressions/kt9345.kt");
    }

    @TestMetadata("kt998.kt")
    public void testKt998() {
      runTest("compiler/testData/codegen/box/regressions/kt998.kt");
    }

    @TestMetadata("lambdaAsLastExpressionInLambda.kt")
    public void testLambdaAsLastExpressionInLambda() {
      runTest("compiler/testData/codegen/box/regressions/lambdaAsLastExpressionInLambda.kt");
    }

    @TestMetadata("lambdaPostponeConstruction.kt")
    public void testLambdaPostponeConstruction() {
      runTest("compiler/testData/codegen/box/regressions/lambdaPostponeConstruction.kt");
    }

    @TestMetadata("lambdaWrongReturnType.kt")
    public void testLambdaWrongReturnType() {
      runTest("compiler/testData/codegen/box/regressions/lambdaWrongReturnType.kt");
    }

    @TestMetadata("nestedIntersection.kt")
    public void testNestedIntersection() {
      runTest("compiler/testData/codegen/box/regressions/nestedIntersection.kt");
    }

    @TestMetadata("noAssertionsWhenNullableTypeParameterReplacedWithIntersectionType.kt")
    public void testNoAssertionsWhenNullableTypeParameterReplacedWithIntersectionType() {
      runTest("compiler/testData/codegen/box/regressions/noAssertionsWhenNullableTypeParameterReplacedWithIntersectionType.kt");
    }

    @TestMetadata("noCapturingForTypesWithTypeVariables.kt")
    public void testNoCapturingForTypesWithTypeVariables() {
      runTest("compiler/testData/codegen/box/regressions/noCapturingForTypesWithTypeVariables.kt");
    }

    @TestMetadata("noResolutionRecursion.kt")
    public void testNoResolutionRecursion() {
      runTest("compiler/testData/codegen/box/regressions/noResolutionRecursion.kt");
    }

    @TestMetadata("nullabilityForCommonCapturedSupertypes.kt")
    public void testNullabilityForCommonCapturedSupertypes() {
      runTest("compiler/testData/codegen/box/regressions/nullabilityForCommonCapturedSupertypes.kt");
    }

    @TestMetadata("nullableAfterExclExcl.kt")
    public void testNullableAfterExclExcl() {
      runTest("compiler/testData/codegen/box/regressions/nullableAfterExclExcl.kt");
    }

    @TestMetadata("objectCaptureOuterConstructorProperty.kt")
    public void testObjectCaptureOuterConstructorProperty() {
      runTest("compiler/testData/codegen/box/regressions/objectCaptureOuterConstructorProperty.kt");
    }

    @TestMetadata("objectInsideDelegation.kt")
    public void testObjectInsideDelegation() {
      runTest("compiler/testData/codegen/box/regressions/objectInsideDelegation.kt");
    }

    @TestMetadata("recursiveDnnTypeInLambda.kt")
    public void testRecursiveDnnTypeInLambda() {
      runTest("compiler/testData/codegen/box/regressions/recursiveDnnTypeInLambda.kt");
    }

    @TestMetadata("referenceToSelfInLocal.kt")
    public void testReferenceToSelfInLocal() {
      runTest("compiler/testData/codegen/box/regressions/referenceToSelfInLocal.kt");
    }

    @TestMetadata("resolvedCallForGetOperator.kt")
    public void testResolvedCallForGetOperator() {
      runTest("compiler/testData/codegen/box/regressions/resolvedCallForGetOperator.kt");
    }

    @TestMetadata("supertypeDepth.kt")
    public void testSupertypeDepth() {
      runTest("compiler/testData/codegen/box/regressions/supertypeDepth.kt");
    }

    @TestMetadata("typeCastException.kt")
    public void testTypeCastException() {
      runTest("compiler/testData/codegen/box/regressions/typeCastException.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/reified")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Reified extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInReified() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reified"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("anonymousObject.kt")
    public void testAnonymousObject() {
      runTest("compiler/testData/codegen/box/reified/anonymousObject.kt");
    }

    @TestMetadata("anonymousObjectNoPropagate.kt")
    public void testAnonymousObjectNoPropagate() {
      runTest("compiler/testData/codegen/box/reified/anonymousObjectNoPropagate.kt");
    }

    @TestMetadata("anonymousObjectReifiedSupertype.kt")
    public void testAnonymousObjectReifiedSupertype() {
      runTest("compiler/testData/codegen/box/reified/anonymousObjectReifiedSupertype.kt");
    }

    @TestMetadata("approximateCapturedTypes.kt")
    public void testApproximateCapturedTypes() {
      runTest("compiler/testData/codegen/box/reified/approximateCapturedTypes.kt");
    }

    @TestMetadata("asOnPlatformType.kt")
    public void testAsOnPlatformType() {
      runTest("compiler/testData/codegen/box/reified/asOnPlatformType.kt");
    }

    @TestMetadata("callableReferenceInlinedFun.kt")
    public void testCallableReferenceInlinedFun() {
      runTest("compiler/testData/codegen/box/reified/callableReferenceInlinedFun.kt");
    }

    @TestMetadata("callableReferenceInlinedFunFromOtherModule.kt")
    public void testCallableReferenceInlinedFunFromOtherModule() {
      runTest("compiler/testData/codegen/box/reified/callableReferenceInlinedFunFromOtherModule.kt");
    }

    @TestMetadata("checkcast.kt")
    public void testCheckcast() {
      runTest("compiler/testData/codegen/box/reified/checkcast.kt");
    }

    @TestMetadata("copyToArray.kt")
    public void testCopyToArray() {
      runTest("compiler/testData/codegen/box/reified/copyToArray.kt");
    }

    @TestMetadata("DIExample.kt")
    public void testDIExample() {
      runTest("compiler/testData/codegen/box/reified/DIExample.kt");
    }

    @TestMetadata("defaultJavaClass.kt")
    public void testDefaultJavaClass() {
      runTest("compiler/testData/codegen/box/reified/defaultJavaClass.kt");
    }

    @TestMetadata("expectedTypeFromCast.kt")
    public void testExpectedTypeFromCast() {
      runTest("compiler/testData/codegen/box/reified/expectedTypeFromCast.kt");
    }

    @TestMetadata("filterIsInstance.kt")
    public void testFilterIsInstance() {
      runTest("compiler/testData/codegen/box/reified/filterIsInstance.kt");
    }

    @TestMetadata("innerAnonymousObject.kt")
    public void testInnerAnonymousObject() {
      runTest("compiler/testData/codegen/box/reified/innerAnonymousObject.kt");
    }

    @TestMetadata("instanceof.kt")
    public void testInstanceof() {
      runTest("compiler/testData/codegen/box/reified/instanceof.kt");
    }

    @TestMetadata("isOnPlatformType.kt")
    public void testIsOnPlatformType() {
      runTest("compiler/testData/codegen/box/reified/isOnPlatformType.kt");
    }

    @TestMetadata("javaClass.kt")
    public void testJavaClass() {
      runTest("compiler/testData/codegen/box/reified/javaClass.kt");
    }

    @TestMetadata("kt16445.kt")
    public void testKt16445() {
      runTest("compiler/testData/codegen/box/reified/kt16445.kt");
    }

    @TestMetadata("kt36237.kt")
    public void testKt36237() {
      runTest("compiler/testData/codegen/box/reified/kt36237.kt");
    }

    @TestMetadata("kt39256_privateInlineWithAnonymousObject.kt")
    public void testKt39256_privateInlineWithAnonymousObject() {
      runTest("compiler/testData/codegen/box/reified/kt39256_privateInlineWithAnonymousObject.kt");
    }

    @TestMetadata("nestedReified.kt")
    public void testNestedReified() {
      runTest("compiler/testData/codegen/box/reified/nestedReified.kt");
    }

    @TestMetadata("nestedReifiedSignature.kt")
    public void testNestedReifiedSignature() {
      runTest("compiler/testData/codegen/box/reified/nestedReifiedSignature.kt");
    }

    @TestMetadata("newArrayInt.kt")
    public void testNewArrayInt() {
      runTest("compiler/testData/codegen/box/reified/newArrayInt.kt");
    }

    @TestMetadata("nonInlineableLambdaInReifiedFunction.kt")
    public void testNonInlineableLambdaInReifiedFunction() {
      runTest("compiler/testData/codegen/box/reified/nonInlineableLambdaInReifiedFunction.kt");
    }

    @TestMetadata("recursiveInnerAnonymousObject.kt")
    public void testRecursiveInnerAnonymousObject() {
      runTest("compiler/testData/codegen/box/reified/recursiveInnerAnonymousObject.kt");
    }

    @TestMetadata("recursiveNewArray.kt")
    public void testRecursiveNewArray() {
      runTest("compiler/testData/codegen/box/reified/recursiveNewArray.kt");
    }

    @TestMetadata("recursiveNonInlineableLambda.kt")
    public void testRecursiveNonInlineableLambda() {
      runTest("compiler/testData/codegen/box/reified/recursiveNonInlineableLambda.kt");
    }

    @TestMetadata("reifiedChain.kt")
    public void testReifiedChain() {
      runTest("compiler/testData/codegen/box/reified/reifiedChain.kt");
    }

    @TestMetadata("reifiedInlineFunOfObject.kt")
    public void testReifiedInlineFunOfObject() {
      runTest("compiler/testData/codegen/box/reified/reifiedInlineFunOfObject.kt");
    }

    @TestMetadata("reifiedInlineFunOfObjectWithinReified.kt")
    public void testReifiedInlineFunOfObjectWithinReified() {
      runTest("compiler/testData/codegen/box/reified/reifiedInlineFunOfObjectWithinReified.kt");
    }

    @TestMetadata("reifiedInlineIntoNonInlineableLambda.kt")
    public void testReifiedInlineIntoNonInlineableLambda() {
      runTest("compiler/testData/codegen/box/reified/reifiedInlineIntoNonInlineableLambda.kt");
    }

    @TestMetadata("reifiedIntersectionType.kt")
    public void testReifiedIntersectionType() {
      runTest("compiler/testData/codegen/box/reified/reifiedIntersectionType.kt");
    }

    @TestMetadata("reifiedIntersectionTypeArgument.kt")
    public void testReifiedIntersectionTypeArgument() {
      runTest("compiler/testData/codegen/box/reified/reifiedIntersectionTypeArgument.kt");
    }

    @TestMetadata("reifiedIntersectionTypeArgumentCrossModule.kt")
    public void testReifiedIntersectionTypeArgumentCrossModule() {
      runTest("compiler/testData/codegen/box/reified/reifiedIntersectionTypeArgumentCrossModule.kt");
    }

    @TestMetadata("reifiedTypeArgumentWithIntersectionTypeAsTypeArgument.kt")
    public void testReifiedTypeArgumentWithIntersectionTypeAsTypeArgument() {
      runTest("compiler/testData/codegen/box/reified/reifiedTypeArgumentWithIntersectionTypeAsTypeArgument.kt");
    }

    @TestMetadata("reifiedTypeArgumentWithRecursion.kt")
    public void testReifiedTypeArgumentWithRecursion() {
      runTest("compiler/testData/codegen/box/reified/reifiedTypeArgumentWithRecursion.kt");
    }

    @TestMetadata("safecast.kt")
    public void testSafecast() {
      runTest("compiler/testData/codegen/box/reified/safecast.kt");
    }

    @TestMetadata("sameIndexRecursive.kt")
    public void testSameIndexRecursive() {
      runTest("compiler/testData/codegen/box/reified/sameIndexRecursive.kt");
    }

    @TestMetadata("spreads.kt")
    public void testSpreads() {
      runTest("compiler/testData/codegen/box/reified/spreads.kt");
    }

    @TestMetadata("typeTokenWrapper.kt")
    public void testTypeTokenWrapper() {
      runTest("compiler/testData/codegen/box/reified/typeTokenWrapper.kt");
    }

    @TestMetadata("varargs.kt")
    public void testVarargs() {
      runTest("compiler/testData/codegen/box/reified/varargs.kt");
    }

    @TestMetadata("compiler/testData/codegen/box/reified/arraysReification")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ArraysReification extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInArraysReification() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reified/arraysReification"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("instanceOf.kt")
      public void testInstanceOf() {
        runTest("compiler/testData/codegen/box/reified/arraysReification/instanceOf.kt");
      }

      @TestMetadata("instanceOfArrays.kt")
      public void testInstanceOfArrays() {
        runTest("compiler/testData/codegen/box/reified/arraysReification/instanceOfArrays.kt");
      }

      @TestMetadata("jClass.kt")
      public void testJClass() {
        runTest("compiler/testData/codegen/box/reified/arraysReification/jClass.kt");
      }

      @TestMetadata("jaggedArray.kt")
      public void testJaggedArray() {
        runTest("compiler/testData/codegen/box/reified/arraysReification/jaggedArray.kt");
      }

      @TestMetadata("jaggedArrayOfNulls.kt")
      public void testJaggedArrayOfNulls() {
        runTest("compiler/testData/codegen/box/reified/arraysReification/jaggedArrayOfNulls.kt");
      }

      @TestMetadata("jaggedDeep.kt")
      public void testJaggedDeep() {
        runTest("compiler/testData/codegen/box/reified/arraysReification/jaggedDeep.kt");
      }
    }
  }

  @TestMetadata("compiler/testData/codegen/box/safeCall")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class SafeCall extends AbstractLightAnalysisModeTest {
    @TestMetadata("augmentedAssigmentPlus.kt")
    public void ignoreAugmentedAssigmentPlus() {
      runTest("compiler/testData/codegen/box/safeCall/augmentedAssigmentPlus.kt");
    }

    @TestMetadata("augmentedAssigmentPlusAssign.kt")
    public void ignoreAugmentedAssigmentPlusAssign() {
      runTest("compiler/testData/codegen/box/safeCall/augmentedAssigmentPlusAssign.kt");
    }

    @TestMetadata("incrementPostfix.kt")
    public void ignoreIncrementPostfix() {
      runTest("compiler/testData/codegen/box/safeCall/incrementPostfix.kt");
    }

    @TestMetadata("incrementPrefix.kt")
    public void ignoreIncrementPrefix() {
      runTest("compiler/testData/codegen/box/safeCall/incrementPrefix.kt");
    }

    @TestMetadata("withAssignment.kt")
    public void ignoreWithAssignment() {
      runTest("compiler/testData/codegen/box/safeCall/withAssignment.kt");
    }

    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInSafeCall() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/safeCall"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("genericNull.kt")
    public void testGenericNull() {
      runTest("compiler/testData/codegen/box/safeCall/genericNull.kt");
    }

    @TestMetadata("kt1572.kt")
    public void testKt1572() {
      runTest("compiler/testData/codegen/box/safeCall/kt1572.kt");
    }

    @TestMetadata("kt232.kt")
    public void testKt232() {
      runTest("compiler/testData/codegen/box/safeCall/kt232.kt");
    }

    @TestMetadata("kt245.kt")
    public void testKt245() {
      runTest("compiler/testData/codegen/box/safeCall/kt245.kt");
    }

    @TestMetadata("kt247.kt")
    public void testKt247() {
      runTest("compiler/testData/codegen/box/safeCall/kt247.kt");
    }

    @TestMetadata("kt3430.kt")
    public void testKt3430() {
      runTest("compiler/testData/codegen/box/safeCall/kt3430.kt");
    }

    @TestMetadata("kt4733.kt")
    public void testKt4733() {
      runTest("compiler/testData/codegen/box/safeCall/kt4733.kt");
    }

    @TestMetadata("kt52580.kt")
    public void testKt52580() {
      runTest("compiler/testData/codegen/box/safeCall/kt52580.kt");
    }

    @TestMetadata("kt52743.kt")
    public void testKt52743() {
      runTest("compiler/testData/codegen/box/safeCall/kt52743.kt");
    }

    @TestMetadata("parenthesizedSafeCallsAndOperators.kt")
    public void testParenthesizedSafeCallsAndOperators() {
      runTest("compiler/testData/codegen/box/safeCall/parenthesizedSafeCallsAndOperators.kt");
    }

    @TestMetadata("primitive.kt")
    public void testPrimitive() {
      runTest("compiler/testData/codegen/box/safeCall/primitive.kt");
    }

    @TestMetadata("primitiveEqSafeCall.kt")
    public void testPrimitiveEqSafeCall() {
      runTest("compiler/testData/codegen/box/safeCall/primitiveEqSafeCall.kt");
    }

    @TestMetadata("primitiveNotEqSafeCall.kt")
    public void testPrimitiveNotEqSafeCall() {
      runTest("compiler/testData/codegen/box/safeCall/primitiveNotEqSafeCall.kt");
    }

    @TestMetadata("safeCallEqPrimitive.kt")
    public void testSafeCallEqPrimitive() {
      runTest("compiler/testData/codegen/box/safeCall/safeCallEqPrimitive.kt");
    }

    @TestMetadata("safeCallIOnUninitializedNonNullValue.kt")
    public void testSafeCallIOnUninitializedNonNullValue() {
      runTest("compiler/testData/codegen/box/safeCall/safeCallIOnUninitializedNonNullValue.kt");
    }

    @TestMetadata("safeCallNotEqPrimitive.kt")
    public void testSafeCallNotEqPrimitive() {
      runTest("compiler/testData/codegen/box/safeCall/safeCallNotEqPrimitive.kt");
    }

    @TestMetadata("safeCallOnLong.kt")
    public void testSafeCallOnLong() {
      runTest("compiler/testData/codegen/box/safeCall/safeCallOnLong.kt");
    }

    @TestMetadata("safeCallSimplificationEnhancedNullabilityType.kt")
    public void testSafeCallSimplificationEnhancedNullabilityType() {
      runTest("compiler/testData/codegen/box/safeCall/safeCallSimplificationEnhancedNullabilityType.kt");
    }

    @TestMetadata("safeCallSimplificationFlexibleType.kt")
    public void testSafeCallSimplificationFlexibleType() {
      runTest("compiler/testData/codegen/box/safeCall/safeCallSimplificationFlexibleType.kt");
    }

    @TestMetadata("safeCallWithElvisFolding.kt")
    public void testSafeCallWithElvisFolding() {
      runTest("compiler/testData/codegen/box/safeCall/safeCallWithElvisFolding.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/sam")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Sam extends AbstractLightAnalysisModeTest {
    @TestMetadata("extensionLambdaWithJavaSamParameter.kt")
    public void ignoreExtensionLambdaWithJavaSamParameter() {
      runTest("compiler/testData/codegen/box/sam/extensionLambdaWithJavaSamParameter.kt");
    }

    @TestMetadata("samAsIndexInArrayAssignment.kt")
    public void ignoreSamAsIndexInArrayAssignment() {
      runTest("compiler/testData/codegen/box/sam/samAsIndexInArrayAssignment.kt");
    }

    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInSam() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/sam"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("arrayAsVarargAfterSamArgument.kt")
    public void testArrayAsVarargAfterSamArgument() {
      runTest("compiler/testData/codegen/box/sam/arrayAsVarargAfterSamArgument.kt");
    }

    @TestMetadata("castFromAny.kt")
    public void testCastFromAny() {
      runTest("compiler/testData/codegen/box/sam/castFromAny.kt");
    }

    @TestMetadata("contravariantIntersectionType.kt")
    public void testContravariantIntersectionType() {
      runTest("compiler/testData/codegen/box/sam/contravariantIntersectionType.kt");
    }

    @TestMetadata("contravariantIntersectionTypeWithNonTrivialCommonSupertype.kt")
    public void testContravariantIntersectionTypeWithNonTrivialCommonSupertype() {
      runTest("compiler/testData/codegen/box/sam/contravariantIntersectionTypeWithNonTrivialCommonSupertype.kt");
    }

    @TestMetadata("contravariantIntersectionTypeWithNonTrivialCommonSupertype2.kt")
    public void testContravariantIntersectionTypeWithNonTrivialCommonSupertype2() {
      runTest("compiler/testData/codegen/box/sam/contravariantIntersectionTypeWithNonTrivialCommonSupertype2.kt");
    }

    @TestMetadata("differentFqNames.kt")
    public void testDifferentFqNames() {
      runTest("compiler/testData/codegen/box/sam/differentFqNames.kt");
    }

    @TestMetadata("fieldInJavaSamInterface.kt")
    public void testFieldInJavaSamInterface() {
      runTest("compiler/testData/codegen/box/sam/fieldInJavaSamInterface.kt");
    }

    @TestMetadata("inProjectedSam.kt")
    public void testInProjectedSam() {
      runTest("compiler/testData/codegen/box/sam/inProjectedSam.kt");
    }

    @TestMetadata("inlinedSamWrapper.kt")
    public void testInlinedSamWrapper() {
      runTest("compiler/testData/codegen/box/sam/inlinedSamWrapper.kt");
    }

    @TestMetadata("irrelevantStaticProperty.kt")
    public void testIrrelevantStaticProperty() {
      runTest("compiler/testData/codegen/box/sam/irrelevantStaticProperty.kt");
    }

    @TestMetadata("kt11519.kt")
    public void testKt11519() {
      runTest("compiler/testData/codegen/box/sam/kt11519.kt");
    }

    @TestMetadata("kt11519Constructor.kt")
    public void testKt11519Constructor() {
      runTest("compiler/testData/codegen/box/sam/kt11519Constructor.kt");
    }

    @TestMetadata("kt11696.kt")
    public void testKt11696() {
      runTest("compiler/testData/codegen/box/sam/kt11696.kt");
    }

    @TestMetadata("kt17091.kt")
    public void testKt17091() {
      runTest("compiler/testData/codegen/box/sam/kt17091.kt");
    }

    @TestMetadata("kt17091_2.kt")
    public void testKt17091_2() {
      runTest("compiler/testData/codegen/box/sam/kt17091_2.kt");
    }

    @TestMetadata("kt17091_3.kt")
    public void testKt17091_3() {
      runTest("compiler/testData/codegen/box/sam/kt17091_3.kt");
    }

    @TestMetadata("kt17091_4.kt")
    public void testKt17091_4() {
      runTest("compiler/testData/codegen/box/sam/kt17091_4.kt");
    }

    @TestMetadata("kt17765.kt")
    public void testKt17765() {
      runTest("compiler/testData/codegen/box/sam/kt17765.kt");
    }

    @TestMetadata("kt19910.kt")
    public void testKt19910() {
      runTest("compiler/testData/codegen/box/sam/kt19910.kt");
    }

    @TestMetadata("kt22906.kt")
    public void testKt22906() {
      runTest("compiler/testData/codegen/box/sam/kt22906.kt");
    }

    @TestMetadata("kt22906_2.kt")
    public void testKt22906_2() {
      runTest("compiler/testData/codegen/box/sam/kt22906_2.kt");
    }

    @TestMetadata("kt24825.kt")
    public void testKt24825() {
      runTest("compiler/testData/codegen/box/sam/kt24825.kt");
    }

    @TestMetadata("kt31908.kt")
    public void testKt31908() {
      runTest("compiler/testData/codegen/box/sam/kt31908.kt");
    }

    @TestMetadata("kt44827_sam.kt")
    public void testKt44827_sam() {
      runTest("compiler/testData/codegen/box/sam/kt44827_sam.kt");
    }

    @TestMetadata("kt4753.kt")
    public void testKt4753() {
      runTest("compiler/testData/codegen/box/sam/kt4753.kt");
    }

    @TestMetadata("kt4753_2.kt")
    public void testKt4753_2() {
      runTest("compiler/testData/codegen/box/sam/kt4753_2.kt");
    }

    @TestMetadata("kt49226.kt")
    public void testKt49226() {
      runTest("compiler/testData/codegen/box/sam/kt49226.kt");
    }

    @TestMetadata("kt50108.kt")
    public void testKt50108() {
      runTest("compiler/testData/codegen/box/sam/kt50108.kt");
    }

    @TestMetadata("kt50108_java.kt")
    public void testKt50108_java() {
      runTest("compiler/testData/codegen/box/sam/kt50108_java.kt");
    }

    @TestMetadata("kt50171.kt")
    public void testKt50171() {
      runTest("compiler/testData/codegen/box/sam/kt50171.kt");
    }

    @TestMetadata("kt50477Enabled.kt")
    public void testKt50477Enabled() {
      runTest("compiler/testData/codegen/box/sam/kt50477Enabled.kt");
    }

    @TestMetadata("kt51821.kt")
    public void testKt51821() {
      runTest("compiler/testData/codegen/box/sam/kt51821.kt");
    }

    @TestMetadata("kt52417.kt")
    public void testKt52417() {
      runTest("compiler/testData/codegen/box/sam/kt52417.kt");
    }

    @TestMetadata("kt54600.kt")
    public void testKt54600() {
      runTest("compiler/testData/codegen/box/sam/kt54600.kt");
    }

    @TestMetadata("kt56188.kt")
    public void testKt56188() {
      runTest("compiler/testData/codegen/box/sam/kt56188.kt");
    }

    @TestMetadata("kt59858.kt")
    public void testKt59858() {
      runTest("compiler/testData/codegen/box/sam/kt59858.kt");
    }

    @TestMetadata("kt63564.kt")
    public void testKt63564() {
      runTest("compiler/testData/codegen/box/sam/kt63564.kt");
    }

    @TestMetadata("kt64116.kt")
    public void testKt64116() {
      runTest("compiler/testData/codegen/box/sam/kt64116.kt");
    }

    @TestMetadata("noConversionFromSamToSam.kt")
    public void testNoConversionFromSamToSam() {
      runTest("compiler/testData/codegen/box/sam/noConversionFromSamToSam.kt");
    }

    @TestMetadata("nonInlinedSamWrapper.kt")
    public void testNonInlinedSamWrapper() {
      runTest("compiler/testData/codegen/box/sam/nonInlinedSamWrapper.kt");
    }

    @TestMetadata("nullableSam.kt")
    public void testNullableSam() {
      runTest("compiler/testData/codegen/box/sam/nullableSam.kt");
    }

    @TestMetadata("partialSam.kt")
    public void testPartialSam() {
      runTest("compiler/testData/codegen/box/sam/partialSam.kt");
    }

    @TestMetadata("partialSamKT.kt")
    public void testPartialSamKT() {
      runTest("compiler/testData/codegen/box/sam/partialSamKT.kt");
    }

    @TestMetadata("passSubtypeOfFunctionSamConversion.kt")
    public void testPassSubtypeOfFunctionSamConversion() {
      runTest("compiler/testData/codegen/box/sam/passSubtypeOfFunctionSamConversion.kt");
    }

    @TestMetadata("predicateSamWrapper.kt")
    public void testPredicateSamWrapper() {
      runTest("compiler/testData/codegen/box/sam/predicateSamWrapper.kt");
    }

    @TestMetadata("propertyReference.kt")
    public void testPropertyReference() {
      runTest("compiler/testData/codegen/box/sam/propertyReference.kt");
    }

    @TestMetadata("receiverEvaluatedOnce.kt")
    public void testReceiverEvaluatedOnce() {
      runTest("compiler/testData/codegen/box/sam/receiverEvaluatedOnce.kt");
    }

    @TestMetadata("recordSubstitutedTypeForCallableSamParameter.kt")
    public void testRecordSubstitutedTypeForCallableSamParameter() {
      runTest("compiler/testData/codegen/box/sam/recordSubstitutedTypeForCallableSamParameter.kt");
    }

    @TestMetadata("samConstructorGenericSignature.kt")
    public void testSamConstructorGenericSignature() {
      runTest("compiler/testData/codegen/box/sam/samConstructorGenericSignature.kt");
    }

    @TestMetadata("samConversionToJavaWildcard.kt")
    public void testSamConversionToJavaWildcard() {
      runTest("compiler/testData/codegen/box/sam/samConversionToJavaWildcard.kt");
    }

    @TestMetadata("samInterfaceTypeParameterErasure.kt")
    public void testSamInterfaceTypeParameterErasure() {
      runTest("compiler/testData/codegen/box/sam/samInterfaceTypeParameterErasure.kt");
    }

    @TestMetadata("samWithAbstractToString.kt")
    public void testSamWithAbstractToString() {
      runTest("compiler/testData/codegen/box/sam/samWithAbstractToString.kt");
    }

    @TestMetadata("samWithInferenceToDefaultBounds.kt")
    public void testSamWithInferenceToDefaultBounds() {
      runTest("compiler/testData/codegen/box/sam/samWithInferenceToDefaultBounds.kt");
    }

    @TestMetadata("smartCastSamConversion.kt")
    public void testSmartCastSamConversion() {
      runTest("compiler/testData/codegen/box/sam/smartCastSamConversion.kt");
    }

    @TestMetadata("compiler/testData/codegen/box/sam/adapters")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Adapters extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInAdapters() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/sam/adapters"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("bridgesForOverridden.kt")
      public void testBridgesForOverridden() {
        runTest("compiler/testData/codegen/box/sam/adapters/bridgesForOverridden.kt");
      }

      @TestMetadata("bridgesForOverriddenComplex.kt")
      public void testBridgesForOverriddenComplex() {
        runTest("compiler/testData/codegen/box/sam/adapters/bridgesForOverriddenComplex.kt");
      }

      @TestMetadata("callAbstractAdapter.kt")
      public void testCallAbstractAdapter() {
        runTest("compiler/testData/codegen/box/sam/adapters/callAbstractAdapter.kt");
      }

      @TestMetadata("comparator.kt")
      public void testComparator() {
        runTest("compiler/testData/codegen/box/sam/adapters/comparator.kt");
      }

      @TestMetadata("constructor.kt")
      public void testConstructor() {
        runTest("compiler/testData/codegen/box/sam/adapters/constructor.kt");
      }

      @TestMetadata("doubleLongParameters.kt")
      public void testDoubleLongParameters() {
        runTest("compiler/testData/codegen/box/sam/adapters/doubleLongParameters.kt");
      }

      @TestMetadata("fileFilter.kt")
      public void testFileFilter() {
        runTest("compiler/testData/codegen/box/sam/adapters/fileFilter.kt");
      }

      @TestMetadata("genericSignature.kt")
      public void testGenericSignature() {
        runTest("compiler/testData/codegen/box/sam/adapters/genericSignature.kt");
      }

      @TestMetadata("implementAdapter.kt")
      public void testImplementAdapter() {
        runTest("compiler/testData/codegen/box/sam/adapters/implementAdapter.kt");
      }

      @TestMetadata("inheritedInKotlin.kt")
      public void testInheritedInKotlin() {
        runTest("compiler/testData/codegen/box/sam/adapters/inheritedInKotlin.kt");
      }

      @TestMetadata("inheritedOverriddenAdapter.kt")
      public void testInheritedOverriddenAdapter() {
        runTest("compiler/testData/codegen/box/sam/adapters/inheritedOverriddenAdapter.kt");
      }

      @TestMetadata("inheritedSimple.kt")
      public void testInheritedSimple() {
        runTest("compiler/testData/codegen/box/sam/adapters/inheritedSimple.kt");
      }

      @TestMetadata("localClass.kt")
      public void testLocalClass() {
        runTest("compiler/testData/codegen/box/sam/adapters/localClass.kt");
      }

      @TestMetadata("localObjectConstructor.kt")
      public void testLocalObjectConstructor() {
        runTest("compiler/testData/codegen/box/sam/adapters/localObjectConstructor.kt");
      }

      @TestMetadata("localObjectConstructorWithFnValue.kt")
      public void testLocalObjectConstructorWithFnValue() {
        runTest("compiler/testData/codegen/box/sam/adapters/localObjectConstructorWithFnValue.kt");
      }

      @TestMetadata("nonLiteralAndLiteralRunnable.kt")
      public void testNonLiteralAndLiteralRunnable() {
        runTest("compiler/testData/codegen/box/sam/adapters/nonLiteralAndLiteralRunnable.kt");
      }

      @TestMetadata("nonLiteralComparator.kt")
      public void testNonLiteralComparator() {
        runTest("compiler/testData/codegen/box/sam/adapters/nonLiteralComparator.kt");
      }

      @TestMetadata("nonLiteralInConstructor.kt")
      public void testNonLiteralInConstructor() {
        runTest("compiler/testData/codegen/box/sam/adapters/nonLiteralInConstructor.kt");
      }

      @TestMetadata("nonLiteralNull.kt")
      public void testNonLiteralNull() {
        runTest("compiler/testData/codegen/box/sam/adapters/nonLiteralNull.kt");
      }

      @TestMetadata("nonLiteralRunnable.kt")
      public void testNonLiteralRunnable() {
        runTest("compiler/testData/codegen/box/sam/adapters/nonLiteralRunnable.kt");
      }

      @TestMetadata("protectedFromBase.kt")
      public void testProtectedFromBase() {
        runTest("compiler/testData/codegen/box/sam/adapters/protectedFromBase.kt");
      }

      @TestMetadata("severalSamParameters.kt")
      public void testSeveralSamParameters() {
        runTest("compiler/testData/codegen/box/sam/adapters/severalSamParameters.kt");
      }

      @TestMetadata("simplest.kt")
      public void testSimplest() {
        runTest("compiler/testData/codegen/box/sam/adapters/simplest.kt");
      }

      @TestMetadata("superInSecondaryConstructor.kt")
      public void testSuperInSecondaryConstructor() {
        runTest("compiler/testData/codegen/box/sam/adapters/superInSecondaryConstructor.kt");
      }

      @TestMetadata("superconstructor.kt")
      public void testSuperconstructor() {
        runTest("compiler/testData/codegen/box/sam/adapters/superconstructor.kt");
      }

      @TestMetadata("superconstructorWithClosure.kt")
      public void testSuperconstructorWithClosure() {
        runTest("compiler/testData/codegen/box/sam/adapters/superconstructorWithClosure.kt");
      }

      @TestMetadata("typeParameterOfClass.kt")
      public void testTypeParameterOfClass() {
        runTest("compiler/testData/codegen/box/sam/adapters/typeParameterOfClass.kt");
      }

      @TestMetadata("typeParameterOfMethod.kt")
      public void testTypeParameterOfMethod() {
        runTest("compiler/testData/codegen/box/sam/adapters/typeParameterOfMethod.kt");
      }

      @TestMetadata("typeParameterOfOuterClass.kt")
      public void testTypeParameterOfOuterClass() {
        runTest("compiler/testData/codegen/box/sam/adapters/typeParameterOfOuterClass.kt");
      }

      @TestMetadata("compiler/testData/codegen/box/sam/adapters/operators")
      @TestDataPath("$PROJECT_ROOT")
      @RunWith(JUnit3RunnerWithInners.class)
      public static class Operators extends AbstractLightAnalysisModeTest {
        private void runTest(String testDataFilePath) {
          KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        public void testAllFilesPresentInOperators() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/sam/adapters/operators"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @TestMetadata("augmentedAssignmentPure.kt")
        public void testAugmentedAssignmentPure() {
          runTest("compiler/testData/codegen/box/sam/adapters/operators/augmentedAssignmentPure.kt");
        }

        @TestMetadata("augmentedAssignmentViaSimpleBinary.kt")
        public void testAugmentedAssignmentViaSimpleBinary() {
          runTest("compiler/testData/codegen/box/sam/adapters/operators/augmentedAssignmentViaSimpleBinary.kt");
        }

        @TestMetadata("binary.kt")
        public void testBinary() {
          runTest("compiler/testData/codegen/box/sam/adapters/operators/binary.kt");
        }

        @TestMetadata("compareTo.kt")
        public void testCompareTo() {
          runTest("compiler/testData/codegen/box/sam/adapters/operators/compareTo.kt");
        }

        @TestMetadata("contains.kt")
        public void testContains() {
          runTest("compiler/testData/codegen/box/sam/adapters/operators/contains.kt");
        }

        @TestMetadata("get.kt")
        public void testGet() {
          runTest("compiler/testData/codegen/box/sam/adapters/operators/get.kt");
        }

        @TestMetadata("invoke.kt")
        public void testInvoke() {
          runTest("compiler/testData/codegen/box/sam/adapters/operators/invoke.kt");
        }

        @TestMetadata("legacyModOperator.kt")
        public void testLegacyModOperator() {
          runTest("compiler/testData/codegen/box/sam/adapters/operators/legacyModOperator.kt");
        }

        @TestMetadata("multiGetSet.kt")
        public void testMultiGetSet() {
          runTest("compiler/testData/codegen/box/sam/adapters/operators/multiGetSet.kt");
        }

        @TestMetadata("multiInvoke.kt")
        public void testMultiInvoke() {
          runTest("compiler/testData/codegen/box/sam/adapters/operators/multiInvoke.kt");
        }

        @TestMetadata("set.kt")
        public void testSet() {
          runTest("compiler/testData/codegen/box/sam/adapters/operators/set.kt");
        }
      }
    }

    @TestMetadata("compiler/testData/codegen/box/sam/approximation")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Approximation extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInApproximation() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/sam/approximation"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("approxToIntermediateType.kt")
      public void testApproxToIntermediateType() {
        runTest("compiler/testData/codegen/box/sam/approximation/approxToIntermediateType.kt");
      }

      @TestMetadata("approxToSingleUpperBound.kt")
      public void testApproxToSingleUpperBound() {
        runTest("compiler/testData/codegen/box/sam/approximation/approxToSingleUpperBound.kt");
      }

      @TestMetadata("impossibleToApproxToRepresentable.kt")
      public void testImpossibleToApproxToRepresentable() {
        runTest("compiler/testData/codegen/box/sam/approximation/impossibleToApproxToRepresentable.kt");
      }

      @TestMetadata("impossibleToApproxToRepresentable2.kt")
      public void testImpossibleToApproxToRepresentable2() {
        runTest("compiler/testData/codegen/box/sam/approximation/impossibleToApproxToRepresentable2.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/sam/constructors")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Constructors extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInConstructors() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/sam/constructors"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("comparator.kt")
      public void testComparator() {
        runTest("compiler/testData/codegen/box/sam/constructors/comparator.kt");
      }

      @TestMetadata("filenameFilter.kt")
      public void testFilenameFilter() {
        runTest("compiler/testData/codegen/box/sam/constructors/filenameFilter.kt");
      }

      @TestMetadata("kt16790.kt")
      public void testKt16790() {
        runTest("compiler/testData/codegen/box/sam/constructors/kt16790.kt");
      }

      @TestMetadata("kt19251.kt")
      public void testKt19251() {
        runTest("compiler/testData/codegen/box/sam/constructors/kt19251.kt");
      }

      @TestMetadata("kt19251_child.kt")
      public void testKt19251_child() {
        runTest("compiler/testData/codegen/box/sam/constructors/kt19251_child.kt");
      }

      @TestMetadata("nonLiteralComparator.kt")
      public void testNonLiteralComparator() {
        runTest("compiler/testData/codegen/box/sam/constructors/nonLiteralComparator.kt");
      }

      @TestMetadata("nonLiteralFilenameFilter.kt")
      public void testNonLiteralFilenameFilter() {
        runTest("compiler/testData/codegen/box/sam/constructors/nonLiteralFilenameFilter.kt");
      }

      @TestMetadata("nonLiteralRunnable.kt")
      public void testNonLiteralRunnable() {
        runTest("compiler/testData/codegen/box/sam/constructors/nonLiteralRunnable.kt");
      }

      @TestMetadata("nonTrivialRunnable.kt")
      public void testNonTrivialRunnable() {
        runTest("compiler/testData/codegen/box/sam/constructors/nonTrivialRunnable.kt");
      }

      @TestMetadata("runnable.kt")
      public void testRunnable() {
        runTest("compiler/testData/codegen/box/sam/constructors/runnable.kt");
      }

      @TestMetadata("runnableAccessingClosure1.kt")
      public void testRunnableAccessingClosure1() {
        runTest("compiler/testData/codegen/box/sam/constructors/runnableAccessingClosure1.kt");
      }

      @TestMetadata("runnableAccessingClosure2.kt")
      public void testRunnableAccessingClosure2() {
        runTest("compiler/testData/codegen/box/sam/constructors/runnableAccessingClosure2.kt");
      }

      @TestMetadata("samWrappersDifferentFiles.kt")
      public void testSamWrappersDifferentFiles() {
        runTest("compiler/testData/codegen/box/sam/constructors/samWrappersDifferentFiles.kt");
      }

      @TestMetadata("sameWrapperClass.kt")
      public void testSameWrapperClass() {
        runTest("compiler/testData/codegen/box/sam/constructors/sameWrapperClass.kt");
      }

      @TestMetadata("sameWrapperClass2.kt")
      public void testSameWrapperClass2() {
        runTest("compiler/testData/codegen/box/sam/constructors/sameWrapperClass2.kt");
      }

      @TestMetadata("suspendSamConstructorAdaptation.kt")
      public void testSuspendSamConstructorAdaptation() {
        runTest("compiler/testData/codegen/box/sam/constructors/suspendSamConstructorAdaptation.kt");
      }

      @TestMetadata("syntheticVsReal.kt")
      public void testSyntheticVsReal() {
        runTest("compiler/testData/codegen/box/sam/constructors/syntheticVsReal.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/sam/equality")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Equality extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInEquality() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/sam/equality"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("functionReferencesBound.kt")
      public void testFunctionReferencesBound() {
        runTest("compiler/testData/codegen/box/sam/equality/functionReferencesBound.kt");
      }

      @TestMetadata("functionReferencesUnbound.kt")
      public void testFunctionReferencesUnbound() {
        runTest("compiler/testData/codegen/box/sam/equality/functionReferencesUnbound.kt");
      }

      @TestMetadata("lambdaRuntimeConversion.kt")
      public void testLambdaRuntimeConversion() {
        runTest("compiler/testData/codegen/box/sam/equality/lambdaRuntimeConversion.kt");
      }

      @TestMetadata("localFunctionReferences.kt")
      public void testLocalFunctionReferences() {
        runTest("compiler/testData/codegen/box/sam/equality/localFunctionReferences.kt");
      }

      @TestMetadata("simpleLambdas.kt")
      public void testSimpleLambdas() {
        runTest("compiler/testData/codegen/box/sam/equality/simpleLambdas.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/sam/javaSamWithEqualsHashCode")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class JavaSamWithEqualsHashCode extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInJavaSamWithEqualsHashCode() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/sam/javaSamWithEqualsHashCode"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("classImplementingFunctionInterface.kt")
      public void testClassImplementingFunctionInterface() {
        runTest("compiler/testData/codegen/box/sam/javaSamWithEqualsHashCode/classImplementingFunctionInterface.kt");
      }

      @TestMetadata("functionReference.kt")
      public void testFunctionReference() {
        runTest("compiler/testData/codegen/box/sam/javaSamWithEqualsHashCode/functionReference.kt");
      }

      @TestMetadata("functionalExpression.kt")
      public void testFunctionalExpression() {
        runTest("compiler/testData/codegen/box/sam/javaSamWithEqualsHashCode/functionalExpression.kt");
      }
    }
  }

  @TestMetadata("compiler/testData/codegen/box/sameFileInSourceAndDependencies")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class SameFileInSourceAndDependencies extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInSameFileInSourceAndDependencies() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/sameFileInSourceAndDependencies"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("classDeclaration.kt")
    public void testClassDeclaration() {
      runTest("compiler/testData/codegen/box/sameFileInSourceAndDependencies/classDeclaration.kt");
    }

    @TestMetadata("differingNumberOfGenericTypeParameters.kt")
    public void testDifferingNumberOfGenericTypeParameters() {
      runTest("compiler/testData/codegen/box/sameFileInSourceAndDependencies/differingNumberOfGenericTypeParameters.kt");
    }

    @TestMetadata("functionDeclaration.kt")
    public void testFunctionDeclaration() {
      runTest("compiler/testData/codegen/box/sameFileInSourceAndDependencies/functionDeclaration.kt");
    }

    @TestMetadata("jvmFieldMemberPropertyDeclaration.kt")
    public void testJvmFieldMemberPropertyDeclaration() {
      runTest("compiler/testData/codegen/box/sameFileInSourceAndDependencies/jvmFieldMemberPropertyDeclaration.kt");
    }

    @TestMetadata("lateinitMemberPropertyDeclaration.kt")
    public void testLateinitMemberPropertyDeclaration() {
      runTest("compiler/testData/codegen/box/sameFileInSourceAndDependencies/lateinitMemberPropertyDeclaration.kt");
    }

    @TestMetadata("memberFunctionDeclaration.kt")
    public void testMemberFunctionDeclaration() {
      runTest("compiler/testData/codegen/box/sameFileInSourceAndDependencies/memberFunctionDeclaration.kt");
    }

    @TestMetadata("memberFunctionWithDefaultArgumentsDeclaration.kt")
    public void testMemberFunctionWithDefaultArgumentsDeclaration() {
      runTest("compiler/testData/codegen/box/sameFileInSourceAndDependencies/memberFunctionWithDefaultArgumentsDeclaration.kt");
    }

    @TestMetadata("memberPropertyDeclaration.kt")
    public void testMemberPropertyDeclaration() {
      runTest("compiler/testData/codegen/box/sameFileInSourceAndDependencies/memberPropertyDeclaration.kt");
    }

    @TestMetadata("nestedClassDeclaration.kt")
    public void testNestedClassDeclaration() {
      runTest("compiler/testData/codegen/box/sameFileInSourceAndDependencies/nestedClassDeclaration.kt");
    }

    @TestMetadata("propertyDeclaration.kt")
    public void testPropertyDeclaration() {
      runTest("compiler/testData/codegen/box/sameFileInSourceAndDependencies/propertyDeclaration.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/script")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Script extends AbstractLightAnalysisModeTest {
    @TestMetadata("localCaptureTestsK2.kt")
    public void ignoreLocalCaptureTestsK2() {
      runTest("compiler/testData/codegen/box/script/localCaptureTestsK2.kt");
    }

    @TestMetadata("scriptNestedClassInstanceK2.kt")
    public void ignoreScriptNestedClassInstanceK2() {
      runTest("compiler/testData/codegen/box/script/scriptNestedClassInstanceK2.kt");
    }

    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInScript() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/script"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("classReference.kt")
    public void testClassReference() {
      runTest("compiler/testData/codegen/box/script/classReference.kt");
    }

    @TestMetadata("localCaptureTests.kt")
    public void testLocalCaptureTests() {
      runTest("compiler/testData/codegen/box/script/localCaptureTests.kt");
    }

    @TestMetadata("outOuOrderDecls.kt")
    public void testOutOuOrderDecls() {
      runTest("compiler/testData/codegen/box/script/outOuOrderDecls.kt");
    }

    @TestMetadata("scripInstance.kt")
    public void testScripInstance() {
      runTest("compiler/testData/codegen/box/script/scripInstance.kt");
    }

    @TestMetadata("scriptNestedClassInstance.kt")
    public void testScriptNestedClassInstance() {
      runTest("compiler/testData/codegen/box/script/scriptNestedClassInstance.kt");
    }

    @TestMetadata("scriptPropFromAnotherModuleK2.kt")
    public void testScriptPropFromAnotherModuleK2() {
      runTest("compiler/testData/codegen/box/script/scriptPropFromAnotherModuleK2.kt");
    }

    @TestMetadata("syntheticJavaPropertyInScript.kt")
    public void testSyntheticJavaPropertyInScript() {
      runTest("compiler/testData/codegen/box/script/syntheticJavaPropertyInScript.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/sealed")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Sealed extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInSealed() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/sealed"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("constructorAnnotations.kt")
    public void testConstructorAnnotations() {
      runTest("compiler/testData/codegen/box/sealed/constructorAnnotations.kt");
    }

    @TestMetadata("delegatingConstructor.kt")
    public void testDelegatingConstructor() {
      runTest("compiler/testData/codegen/box/sealed/delegatingConstructor.kt");
    }

    @TestMetadata("kt49752.kt")
    public void testKt49752() {
      runTest("compiler/testData/codegen/box/sealed/kt49752.kt");
    }

    @TestMetadata("kt54028.kt")
    public void testKt54028() {
      runTest("compiler/testData/codegen/box/sealed/kt54028.kt");
    }

    @TestMetadata("kt54028_cursed.kt")
    public void testKt54028_cursed() {
      runTest("compiler/testData/codegen/box/sealed/kt54028_cursed.kt");
    }

    @TestMetadata("multipleFiles_enabled.kt")
    public void testMultipleFiles_enabled() {
      runTest("compiler/testData/codegen/box/sealed/multipleFiles_enabled.kt");
    }

    @TestMetadata("objects.kt")
    public void testObjects() {
      runTest("compiler/testData/codegen/box/sealed/objects.kt");
    }

    @TestMetadata("sealedInSameFile.kt")
    public void testSealedInSameFile() {
      runTest("compiler/testData/codegen/box/sealed/sealedInSameFile.kt");
    }

    @TestMetadata("simple.kt")
    public void testSimple() {
      runTest("compiler/testData/codegen/box/sealed/simple.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/secondaryConstructors")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class SecondaryConstructors extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    @TestMetadata("accessToCompanion.kt")
    public void testAccessToCompanion() {
      runTest("compiler/testData/codegen/box/secondaryConstructors/accessToCompanion.kt");
    }

    @TestMetadata("accessToNestedObject.kt")
    public void testAccessToNestedObject() {
      runTest("compiler/testData/codegen/box/secondaryConstructors/accessToNestedObject.kt");
    }

    public void testAllFilesPresentInSecondaryConstructors() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/secondaryConstructors"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("basicNoPrimaryManySinks.kt")
    public void testBasicNoPrimaryManySinks() {
      runTest("compiler/testData/codegen/box/secondaryConstructors/basicNoPrimaryManySinks.kt");
    }

    @TestMetadata("basicNoPrimaryOneSink.kt")
    public void testBasicNoPrimaryOneSink() {
      runTest("compiler/testData/codegen/box/secondaryConstructors/basicNoPrimaryOneSink.kt");
    }

    @TestMetadata("basicPrimary.kt")
    public void testBasicPrimary() {
      runTest("compiler/testData/codegen/box/secondaryConstructors/basicPrimary.kt");
    }

    @TestMetadata("callFromLocalSubClass.kt")
    public void testCallFromLocalSubClass() {
      runTest("compiler/testData/codegen/box/secondaryConstructors/callFromLocalSubClass.kt");
    }

    @TestMetadata("callFromPrimaryWithNamedArgs.kt")
    public void testCallFromPrimaryWithNamedArgs() {
      runTest("compiler/testData/codegen/box/secondaryConstructors/callFromPrimaryWithNamedArgs.kt");
    }

    @TestMetadata("callFromPrimaryWithOptionalArgs.kt")
    public void testCallFromPrimaryWithOptionalArgs() {
      runTest("compiler/testData/codegen/box/secondaryConstructors/callFromPrimaryWithOptionalArgs.kt");
    }

    @TestMetadata("callFromSubClass.kt")
    public void testCallFromSubClass() {
      runTest("compiler/testData/codegen/box/secondaryConstructors/callFromSubClass.kt");
    }

    @TestMetadata("clashingDefaultConstructors.kt")
    public void testClashingDefaultConstructors() {
      runTest("compiler/testData/codegen/box/secondaryConstructors/clashingDefaultConstructors.kt");
    }

    @TestMetadata("dataClasses.kt")
    public void testDataClasses() {
      runTest("compiler/testData/codegen/box/secondaryConstructors/dataClasses.kt");
    }

    @TestMetadata("defaultArgs.kt")
    public void testDefaultArgs() {
      runTest("compiler/testData/codegen/box/secondaryConstructors/defaultArgs.kt");
    }

    @TestMetadata("defaultParametersNotDuplicated.kt")
    public void testDefaultParametersNotDuplicated() {
      runTest("compiler/testData/codegen/box/secondaryConstructors/defaultParametersNotDuplicated.kt");
    }

    @TestMetadata("delegateWithComplexExpression.kt")
    public void testDelegateWithComplexExpression() {
      runTest("compiler/testData/codegen/box/secondaryConstructors/delegateWithComplexExpression.kt");
    }

    @TestMetadata("delegatedThisWithLambda.kt")
    public void testDelegatedThisWithLambda() {
      runTest("compiler/testData/codegen/box/secondaryConstructors/delegatedThisWithLambda.kt");
    }

    @TestMetadata("delegationWithPrimary.kt")
    public void testDelegationWithPrimary() {
      runTest("compiler/testData/codegen/box/secondaryConstructors/delegationWithPrimary.kt");
    }

    @TestMetadata("enums.kt")
    public void testEnums() {
      runTest("compiler/testData/codegen/box/secondaryConstructors/enums.kt");
    }

    @TestMetadata("fieldInitializerOptimization.kt")
    public void testFieldInitializerOptimization() {
      runTest("compiler/testData/codegen/box/secondaryConstructors/fieldInitializerOptimization.kt");
    }

    @TestMetadata("generics.kt")
    public void testGenerics() {
      runTest("compiler/testData/codegen/box/secondaryConstructors/generics.kt");
    }

    @TestMetadata("inlineIntoTwoConstructors.kt")
    public void testInlineIntoTwoConstructors() {
      runTest("compiler/testData/codegen/box/secondaryConstructors/inlineIntoTwoConstructors.kt");
    }

    @TestMetadata("innerClasses.kt")
    public void testInnerClasses() {
      runTest("compiler/testData/codegen/box/secondaryConstructors/innerClasses.kt");
    }

    @TestMetadata("innerClassesInheritance.kt")
    public void testInnerClassesInheritance() {
      runTest("compiler/testData/codegen/box/secondaryConstructors/innerClassesInheritance.kt");
    }

    @TestMetadata("localClasses.kt")
    public void testLocalClasses() {
      runTest("compiler/testData/codegen/box/secondaryConstructors/localClasses.kt");
    }

    @TestMetadata("superCallPrimary.kt")
    public void testSuperCallPrimary() {
      runTest("compiler/testData/codegen/box/secondaryConstructors/superCallPrimary.kt");
    }

    @TestMetadata("superCallSecondary.kt")
    public void testSuperCallSecondary() {
      runTest("compiler/testData/codegen/box/secondaryConstructors/superCallSecondary.kt");
    }

    @TestMetadata("varargs.kt")
    public void testVarargs() {
      runTest("compiler/testData/codegen/box/secondaryConstructors/varargs.kt");
    }

    @TestMetadata("withGenerics.kt")
    public void testWithGenerics() {
      runTest("compiler/testData/codegen/box/secondaryConstructors/withGenerics.kt");
    }

    @TestMetadata("withNonLocalReturn.kt")
    public void testWithNonLocalReturn() {
      runTest("compiler/testData/codegen/box/secondaryConstructors/withNonLocalReturn.kt");
    }

    @TestMetadata("withPrimary.kt")
    public void testWithPrimary() {
      runTest("compiler/testData/codegen/box/secondaryConstructors/withPrimary.kt");
    }

    @TestMetadata("withReturn.kt")
    public void testWithReturn() {
      runTest("compiler/testData/codegen/box/secondaryConstructors/withReturn.kt");
    }

    @TestMetadata("withReturnUnit.kt")
    public void testWithReturnUnit() {
      runTest("compiler/testData/codegen/box/secondaryConstructors/withReturnUnit.kt");
    }

    @TestMetadata("withVarargs.kt")
    public void testWithVarargs() {
      runTest("compiler/testData/codegen/box/secondaryConstructors/withVarargs.kt");
    }

    @TestMetadata("withoutPrimary.kt")
    public void testWithoutPrimary() {
      runTest("compiler/testData/codegen/box/secondaryConstructors/withoutPrimary.kt");
    }

    @TestMetadata("withoutPrimarySimple.kt")
    public void testWithoutPrimarySimple() {
      runTest("compiler/testData/codegen/box/secondaryConstructors/withoutPrimarySimple.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/serialization")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Serialization extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInSerialization() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/serialization"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("deserializedMembers.kt")
    public void testDeserializedMembers() {
      runTest("compiler/testData/codegen/box/serialization/deserializedMembers.kt");
    }

    @TestMetadata("serializedCatch.kt")
    public void testSerializedCatch() {
      runTest("compiler/testData/codegen/box/serialization/serializedCatch.kt");
    }

    @TestMetadata("serializedCharConstant.kt")
    public void testSerializedCharConstant() {
      runTest("compiler/testData/codegen/box/serialization/serializedCharConstant.kt");
    }

    @TestMetadata("serializedDefaultArgs.kt")
    public void testSerializedDefaultArgs() {
      runTest("compiler/testData/codegen/box/serialization/serializedDefaultArgs.kt");
    }

    @TestMetadata("serializedDoWhile.kt")
    public void testSerializedDoWhile() {
      runTest("compiler/testData/codegen/box/serialization/serializedDoWhile.kt");
    }

    @TestMetadata("serializedEnumOrdinal.kt")
    public void testSerializedEnumOrdinal() {
      runTest("compiler/testData/codegen/box/serialization/serializedEnumOrdinal.kt");
    }

    @TestMetadata("serializedVararg.kt")
    public void testSerializedVararg() {
      runTest("compiler/testData/codegen/box/serialization/serializedVararg.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/size")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Size extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInSize() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/size"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }
  }

  @TestMetadata("compiler/testData/codegen/box/smap")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Smap extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInSmap() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/smap"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("chainCalls.kt")
    public void testChainCalls() {
      runTest("compiler/testData/codegen/box/smap/chainCalls.kt");
    }

    @TestMetadata("infixCalls.kt")
    public void testInfixCalls() {
      runTest("compiler/testData/codegen/box/smap/infixCalls.kt");
    }

    @TestMetadata("simpleCallWithParams.kt")
    public void testSimpleCallWithParams() {
      runTest("compiler/testData/codegen/box/smap/simpleCallWithParams.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/smartCasts")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class SmartCasts extends AbstractLightAnalysisModeTest {
    @TestMetadata("resolveToMemberOfSuperclass_overrideWithDifferentType.kt")
    public void ignoreResolveToMemberOfSuperclass_overrideWithDifferentType() {
      runTest("compiler/testData/codegen/box/smartCasts/resolveToMemberOfSuperclass_overrideWithDifferentType.kt");
    }

    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInSmartCasts() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/smartCasts"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("avoidSmartCastToDerivedForPrivate.kt")
    public void testAvoidSmartCastToDerivedForPrivate() {
      runTest("compiler/testData/codegen/box/smartCasts/avoidSmartCastToDerivedForPrivate.kt");
    }

    @TestMetadata("complexExplicitReceiver.kt")
    public void testComplexExplicitReceiver() {
      runTest("compiler/testData/codegen/box/smartCasts/complexExplicitReceiver.kt");
    }

    @TestMetadata("complexImplicitReceiver.kt")
    public void testComplexImplicitReceiver() {
      runTest("compiler/testData/codegen/box/smartCasts/complexImplicitReceiver.kt");
    }

    @TestMetadata("falseSmartCast.kt")
    public void testFalseSmartCast() {
      runTest("compiler/testData/codegen/box/smartCasts/falseSmartCast.kt");
    }

    @TestMetadata("genericInheritanceWithNonGenericNoAmbiguity.kt")
    public void testGenericInheritanceWithNonGenericNoAmbiguity() {
      runTest("compiler/testData/codegen/box/smartCasts/genericInheritanceWithNonGenericNoAmbiguity.kt");
    }

    @TestMetadata("genericIntersection.kt")
    public void testGenericIntersection() {
      runTest("compiler/testData/codegen/box/smartCasts/genericIntersection.kt");
    }

    @TestMetadata("genericSet.kt")
    public void testGenericSet() {
      runTest("compiler/testData/codegen/box/smartCasts/genericSet.kt");
    }

    @TestMetadata("implicitCastOnAssignment.kt")
    public void testImplicitCastOnAssignment() {
      runTest("compiler/testData/codegen/box/smartCasts/implicitCastOnAssignment.kt");
    }

    @TestMetadata("implicitExtensionReceiver.kt")
    public void testImplicitExtensionReceiver() {
      runTest("compiler/testData/codegen/box/smartCasts/implicitExtensionReceiver.kt");
    }

    @TestMetadata("implicitMemberReceiver.kt")
    public void testImplicitMemberReceiver() {
      runTest("compiler/testData/codegen/box/smartCasts/implicitMemberReceiver.kt");
    }

    @TestMetadata("implicitReceiver.kt")
    public void testImplicitReceiver() {
      runTest("compiler/testData/codegen/box/smartCasts/implicitReceiver.kt");
    }

    @TestMetadata("implicitReceiverInWhen.kt")
    public void testImplicitReceiverInWhen() {
      runTest("compiler/testData/codegen/box/smartCasts/implicitReceiverInWhen.kt");
    }

    @TestMetadata("implicitToGrandSon.kt")
    public void testImplicitToGrandSon() {
      runTest("compiler/testData/codegen/box/smartCasts/implicitToGrandSon.kt");
    }

    @TestMetadata("invokeRecieverSmartcastK1.kt")
    public void testInvokeRecieverSmartcastK1() {
      runTest("compiler/testData/codegen/box/smartCasts/invokeRecieverSmartcastK1.kt");
    }

    @TestMetadata("invokeRecieverSmartcastK2.kt")
    public void testInvokeRecieverSmartcastK2() {
      runTest("compiler/testData/codegen/box/smartCasts/invokeRecieverSmartcastK2.kt");
    }

    @TestMetadata("kt17725.kt")
    public void testKt17725() {
      runTest("compiler/testData/codegen/box/smartCasts/kt17725.kt");
    }

    @TestMetadata("kt19058.kt")
    public void testKt19058() {
      runTest("compiler/testData/codegen/box/smartCasts/kt19058.kt");
    }

    @TestMetadata("kt19100.kt")
    public void testKt19100() {
      runTest("compiler/testData/codegen/box/smartCasts/kt19100.kt");
    }

    @TestMetadata("kt42517.kt")
    public void testKt42517() {
      runTest("compiler/testData/codegen/box/smartCasts/kt42517.kt");
    }

    @TestMetadata("kt44802.kt")
    public void testKt44802() {
      runTest("compiler/testData/codegen/box/smartCasts/kt44802.kt");
    }

    @TestMetadata("kt44804.kt")
    public void testKt44804() {
      runTest("compiler/testData/codegen/box/smartCasts/kt44804.kt");
    }

    @TestMetadata("kt44814.kt")
    public void testKt44814() {
      runTest("compiler/testData/codegen/box/smartCasts/kt44814.kt");
    }

    @TestMetadata("kt44932.kt")
    public void testKt44932() {
      runTest("compiler/testData/codegen/box/smartCasts/kt44932.kt");
    }

    @TestMetadata("kt44942.kt")
    public void testKt44942() {
      runTest("compiler/testData/codegen/box/smartCasts/kt44942.kt");
    }

    @TestMetadata("kt48163_smartCastToThrowable.kt")
    public void testKt48163_smartCastToThrowable() {
      runTest("compiler/testData/codegen/box/smartCasts/kt48163_smartCastToThrowable.kt");
    }

    @TestMetadata("kt52432.kt")
    public void testKt52432() {
      runTest("compiler/testData/codegen/box/smartCasts/kt52432.kt");
    }

    @TestMetadata("lambdaArgumentWithoutType.kt")
    public void testLambdaArgumentWithoutType() {
      runTest("compiler/testData/codegen/box/smartCasts/lambdaArgumentWithoutType.kt");
    }

    @TestMetadata("multipleSmartCast.kt")
    public void testMultipleSmartCast() {
      runTest("compiler/testData/codegen/box/smartCasts/multipleSmartCast.kt");
    }

    @TestMetadata("nullSmartCast.kt")
    public void testNullSmartCast() {
      runTest("compiler/testData/codegen/box/smartCasts/nullSmartCast.kt");
    }

    @TestMetadata("NullableFunctionTypeAsMemberImmutableProperty.kt")
    public void testNullableFunctionTypeAsMemberImmutableProperty() {
      runTest("compiler/testData/codegen/box/smartCasts/NullableFunctionTypeAsMemberImmutableProperty.kt");
    }

    @TestMetadata("NullableFunctionTypeAsMemberImmutablePropertyFromConstructor.kt")
    public void testNullableFunctionTypeAsMemberImmutablePropertyFromConstructor() {
      runTest("compiler/testData/codegen/box/smartCasts/NullableFunctionTypeAsMemberImmutablePropertyFromConstructor.kt");
    }

    @TestMetadata("NullableFunctionTypeAsPrimaryConstructorParameter.kt")
    public void testNullableFunctionTypeAsPrimaryConstructorParameter() {
      runTest("compiler/testData/codegen/box/smartCasts/NullableFunctionTypeAsPrimaryConstructorParameter.kt");
    }

    @TestMetadata("NullableFunctionTypeAsSecondaryConstructorParameter.kt")
    public void testNullableFunctionTypeAsSecondaryConstructorParameter() {
      runTest("compiler/testData/codegen/box/smartCasts/NullableFunctionTypeAsSecondaryConstructorParameter.kt");
    }

    @TestMetadata("propertyInitializationAfterSmartCast.kt")
    public void testPropertyInitializationAfterSmartCast() {
      runTest("compiler/testData/codegen/box/smartCasts/propertyInitializationAfterSmartCast.kt");
    }

    @TestMetadata("resolveToMemberOfSuperclass_overrideWithSameType.kt")
    public void testResolveToMemberOfSuperclass_overrideWithSameType() {
      runTest("compiler/testData/codegen/box/smartCasts/resolveToMemberOfSuperclass_overrideWithSameType.kt");
    }

    @TestMetadata("smartCastInsideIf.kt")
    public void testSmartCastInsideIf() {
      runTest("compiler/testData/codegen/box/smartCasts/smartCastInsideIf.kt");
    }

    @TestMetadata("smartCastedGenericWhenSubjectInRangeCheck.kt")
    public void testSmartCastedGenericWhenSubjectInRangeCheck() {
      runTest("compiler/testData/codegen/box/smartCasts/smartCastedGenericWhenSubjectInRangeCheck.kt");
    }

    @TestMetadata("smartcastFromGenericToString.kt")
    public void testSmartcastFromGenericToString() {
      runTest("compiler/testData/codegen/box/smartCasts/smartcastFromGenericToString.kt");
    }

    @TestMetadata("smartcastOnImplicitDispatchReceiver.kt")
    public void testSmartcastOnImplicitDispatchReceiver() {
      runTest("compiler/testData/codegen/box/smartCasts/smartcastOnImplicitDispatchReceiver.kt");
    }

    @TestMetadata("smartcastToStarType.kt")
    public void testSmartcastToStarType() {
      runTest("compiler/testData/codegen/box/smartCasts/smartcastToStarType.kt");
    }

    @TestMetadata("toStringOnReceiverWIthSmartcast.kt")
    public void testToStringOnReceiverWIthSmartcast() {
      runTest("compiler/testData/codegen/box/smartCasts/toStringOnReceiverWIthSmartcast.kt");
    }

    @TestMetadata("whenSmartCast.kt")
    public void testWhenSmartCast() {
      runTest("compiler/testData/codegen/box/smartCasts/whenSmartCast.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/specialBuiltins")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class SpecialBuiltins extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInSpecialBuiltins() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/specialBuiltins"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("bridgeNotEmptyMap.kt")
    public void testBridgeNotEmptyMap() {
      runTest("compiler/testData/codegen/box/specialBuiltins/bridgeNotEmptyMap.kt");
    }

    @TestMetadata("bridges.kt")
    public void testBridges() {
      runTest("compiler/testData/codegen/box/specialBuiltins/bridges.kt");
    }

    @TestMetadata("bridgesJVM.kt")
    public void testBridgesJVM() {
      runTest("compiler/testData/codegen/box/specialBuiltins/bridgesJVM.kt");
    }

    @TestMetadata("charBuffer.kt")
    public void testCharBuffer() {
      runTest("compiler/testData/codegen/box/specialBuiltins/charBuffer.kt");
    }

    @TestMetadata("collectionImpl.kt")
    public void testCollectionImpl() {
      runTest("compiler/testData/codegen/box/specialBuiltins/collectionImpl.kt");
    }

    @TestMetadata("commonBridgesTarget.kt")
    public void testCommonBridgesTarget() {
      runTest("compiler/testData/codegen/box/specialBuiltins/commonBridgesTarget.kt");
    }

    @TestMetadata("complexMapImpl.kt")
    public void testComplexMapImpl() {
      runTest("compiler/testData/codegen/box/specialBuiltins/complexMapImpl.kt");
    }

    @TestMetadata("emptyList.kt")
    public void testEmptyList() {
      runTest("compiler/testData/codegen/box/specialBuiltins/emptyList.kt");
    }

    @TestMetadata("emptyMap.kt")
    public void testEmptyMap() {
      runTest("compiler/testData/codegen/box/specialBuiltins/emptyMap.kt");
    }

    @TestMetadata("emptyStringMap.kt")
    public void testEmptyStringMap() {
      runTest("compiler/testData/codegen/box/specialBuiltins/emptyStringMap.kt");
    }

    @TestMetadata("entrySetSOE.kt")
    public void testEntrySetSOE() {
      runTest("compiler/testData/codegen/box/specialBuiltins/entrySetSOE.kt");
    }

    @TestMetadata("enumAsOrdinaled.kt")
    public void testEnumAsOrdinaled() {
      runTest("compiler/testData/codegen/box/specialBuiltins/enumAsOrdinaled.kt");
    }

    @TestMetadata("exceptionCause.kt")
    public void testExceptionCause() {
      runTest("compiler/testData/codegen/box/specialBuiltins/exceptionCause.kt");
    }

    @TestMetadata("explicitSuperCall.kt")
    public void testExplicitSuperCall() {
      runTest("compiler/testData/codegen/box/specialBuiltins/explicitSuperCall.kt");
    }

    @TestMetadata("intersectionWithMappedSignature.kt")
    public void testIntersectionWithMappedSignature() {
      runTest("compiler/testData/codegen/box/specialBuiltins/intersectionWithMappedSignature.kt");
    }

    @TestMetadata("irrelevantRemoveAndJavaList.kt")
    public void testIrrelevantRemoveAndJavaList() {
      runTest("compiler/testData/codegen/box/specialBuiltins/irrelevantRemoveAndJavaList.kt");
    }

    @TestMetadata("irrelevantRemoveAtOverride.kt")
    public void testIrrelevantRemoveAtOverride() {
      runTest("compiler/testData/codegen/box/specialBuiltins/irrelevantRemoveAtOverride.kt");
    }

    @TestMetadata("javaMapWithCustomEntries.kt")
    public void testJavaMapWithCustomEntries() {
      runTest("compiler/testData/codegen/box/specialBuiltins/javaMapWithCustomEntries.kt");
    }

    @TestMetadata("mapGetOrDefault.kt")
    public void testMapGetOrDefault() {
      runTest("compiler/testData/codegen/box/specialBuiltins/mapGetOrDefault.kt");
    }

    @TestMetadata("maps.kt")
    public void testMaps() {
      runTest("compiler/testData/codegen/box/specialBuiltins/maps.kt");
    }

    @TestMetadata("noSpecialBridgeInSuperClass.kt")
    public void testNoSpecialBridgeInSuperClass() {
      runTest("compiler/testData/codegen/box/specialBuiltins/noSpecialBridgeInSuperClass.kt");
    }

    @TestMetadata("notEmptyListAny.kt")
    public void testNotEmptyListAny() {
      runTest("compiler/testData/codegen/box/specialBuiltins/notEmptyListAny.kt");
    }

    @TestMetadata("notEmptyMap.kt")
    public void testNotEmptyMap() {
      runTest("compiler/testData/codegen/box/specialBuiltins/notEmptyMap.kt");
    }

    @TestMetadata("redundantStubForSize.kt")
    public void testRedundantStubForSize() {
      runTest("compiler/testData/codegen/box/specialBuiltins/redundantStubForSize.kt");
    }

    @TestMetadata("removeAtTwoSpecialBridges.kt")
    public void testRemoveAtTwoSpecialBridges() {
      runTest("compiler/testData/codegen/box/specialBuiltins/removeAtTwoSpecialBridges.kt");
    }

    @TestMetadata("removeSetInt.kt")
    public void testRemoveSetInt() {
      runTest("compiler/testData/codegen/box/specialBuiltins/removeSetInt.kt");
    }

    @TestMetadata("specialBridgeModality.kt")
    public void testSpecialBridgeModality() {
      runTest("compiler/testData/codegen/box/specialBuiltins/specialBridgeModality.kt");
    }

    @TestMetadata("throwable.kt")
    public void testThrowable() {
      runTest("compiler/testData/codegen/box/specialBuiltins/throwable.kt");
    }

    @TestMetadata("throwableCause.kt")
    public void testThrowableCause() {
      runTest("compiler/testData/codegen/box/specialBuiltins/throwableCause.kt");
    }

    @TestMetadata("throwableComplex.kt")
    public void testThrowableComplex() {
      runTest("compiler/testData/codegen/box/specialBuiltins/throwableComplex.kt");
    }

    @TestMetadata("throwableImpl.kt")
    public void testThrowableImpl() {
      runTest("compiler/testData/codegen/box/specialBuiltins/throwableImpl.kt");
    }

    @TestMetadata("throwableImplWithSecondaryConstructor.kt")
    public void testThrowableImplWithSecondaryConstructor() {
      runTest("compiler/testData/codegen/box/specialBuiltins/throwableImplWithSecondaryConstructor.kt");
    }

    @TestMetadata("valuesInsideEnum.kt")
    public void testValuesInsideEnum() {
      runTest("compiler/testData/codegen/box/specialBuiltins/valuesInsideEnum.kt");
    }

    @TestMetadata("weirdCharBuffers.kt")
    public void testWeirdCharBuffers() {
      runTest("compiler/testData/codegen/box/specialBuiltins/weirdCharBuffers.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/statics")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Statics extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInStatics() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/statics"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("anonymousInitializerIObject.kt")
    public void testAnonymousInitializerIObject() {
      runTest("compiler/testData/codegen/box/statics/anonymousInitializerIObject.kt");
    }

    @TestMetadata("anonymousInitializerInClassObject.kt")
    public void testAnonymousInitializerInClassObject() {
      runTest("compiler/testData/codegen/box/statics/anonymousInitializerInClassObject.kt");
    }

    @TestMetadata("enumWithInheritedStaticField.kt")
    public void testEnumWithInheritedStaticField() {
      runTest("compiler/testData/codegen/box/statics/enumWithInheritedStaticField.kt");
    }

    @TestMetadata("fields.kt")
    public void testFields() {
      runTest("compiler/testData/codegen/box/statics/fields.kt");
    }

    @TestMetadata("functions.kt")
    public void testFunctions() {
      runTest("compiler/testData/codegen/box/statics/functions.kt");
    }

    @TestMetadata("hidePrivateByPublic.kt")
    public void testHidePrivateByPublic() {
      runTest("compiler/testData/codegen/box/statics/hidePrivateByPublic.kt");
    }

    @TestMetadata("incInClassObject.kt")
    public void testIncInClassObject() {
      runTest("compiler/testData/codegen/box/statics/incInClassObject.kt");
    }

    @TestMetadata("incInObject.kt")
    public void testIncInObject() {
      runTest("compiler/testData/codegen/box/statics/incInObject.kt");
    }

    @TestMetadata("inheritedPropertyInClassObject.kt")
    public void testInheritedPropertyInClassObject() {
      runTest("compiler/testData/codegen/box/statics/inheritedPropertyInClassObject.kt");
    }

    @TestMetadata("inheritedPropertyInObject.kt")
    public void testInheritedPropertyInObject() {
      runTest("compiler/testData/codegen/box/statics/inheritedPropertyInObject.kt");
    }

    @TestMetadata("inlineCallsStaticMethod.kt")
    public void testInlineCallsStaticMethod() {
      runTest("compiler/testData/codegen/box/statics/inlineCallsStaticMethod.kt");
    }

    @TestMetadata("inlineCallsStaticMethodFromOtherPackage.kt")
    public void testInlineCallsStaticMethodFromOtherPackage() {
      runTest("compiler/testData/codegen/box/statics/inlineCallsStaticMethodFromOtherPackage.kt");
    }

    @TestMetadata("kt8089.kt")
    public void testKt8089() {
      runTest("compiler/testData/codegen/box/statics/kt8089.kt");
    }

    @TestMetadata("protectedSamConstructor.kt")
    public void testProtectedSamConstructor() {
      runTest("compiler/testData/codegen/box/statics/protectedSamConstructor.kt");
    }

    @TestMetadata("protectedStatic.kt")
    public void testProtectedStatic() {
      runTest("compiler/testData/codegen/box/statics/protectedStatic.kt");
    }

    @TestMetadata("protectedStatic2.kt")
    public void testProtectedStatic2() {
      runTest("compiler/testData/codegen/box/statics/protectedStatic2.kt");
    }

    @TestMetadata("protectedStaticAndInline.kt")
    public void testProtectedStaticAndInline() {
      runTest("compiler/testData/codegen/box/statics/protectedStaticAndInline.kt");
    }

    @TestMetadata("simpleStaticInJavaSuperChain.kt")
    public void testSimpleStaticInJavaSuperChain() {
      runTest("compiler/testData/codegen/box/statics/simpleStaticInJavaSuperChain.kt");
    }

    @TestMetadata("syntheticAccessor.kt")
    public void testSyntheticAccessor() {
      runTest("compiler/testData/codegen/box/statics/syntheticAccessor.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/storeStackBeforeInline")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class StoreStackBeforeInline extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInStoreStackBeforeInline() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/storeStackBeforeInline"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("differentTypes.kt")
    public void testDifferentTypes() {
      runTest("compiler/testData/codegen/box/storeStackBeforeInline/differentTypes.kt");
    }

    @TestMetadata("primitiveMerge.kt")
    public void testPrimitiveMerge() {
      runTest("compiler/testData/codegen/box/storeStackBeforeInline/primitiveMerge.kt");
    }

    @TestMetadata("simple.kt")
    public void testSimple() {
      runTest("compiler/testData/codegen/box/storeStackBeforeInline/simple.kt");
    }

    @TestMetadata("unreachableMarker.kt")
    public void testUnreachableMarker() {
      runTest("compiler/testData/codegen/box/storeStackBeforeInline/unreachableMarker.kt");
    }

    @TestMetadata("withLambda.kt")
    public void testWithLambda() {
      runTest("compiler/testData/codegen/box/storeStackBeforeInline/withLambda.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/stringTrim")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class StringTrim extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInStringTrim() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/stringTrim"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("stringTrim.kt")
    public void testStringTrim() {
      runTest("compiler/testData/codegen/box/stringTrim/stringTrim.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/strings")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Strings extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInStrings() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/strings"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("concatDynamicWithConstants.kt")
    public void testConcatDynamicWithConstants() {
      runTest("compiler/testData/codegen/box/strings/concatDynamicWithConstants.kt");
    }

    @TestMetadata("concatDynamicWithSpecialSymbols.kt")
    public void testConcatDynamicWithSpecialSymbols() {
      runTest("compiler/testData/codegen/box/strings/concatDynamicWithSpecialSymbols.kt");
    }

    @TestMetadata("concatGenericWithNullablePrimitiveUpperBound.kt")
    public void testConcatGenericWithNullablePrimitiveUpperBound() {
      runTest("compiler/testData/codegen/box/strings/concatGenericWithNullablePrimitiveUpperBound.kt");
    }

    @TestMetadata("concatGenericWithPrimitiveUpperBound.kt")
    public void testConcatGenericWithPrimitiveUpperBound() {
      runTest("compiler/testData/codegen/box/strings/concatGenericWithPrimitiveUpperBound.kt");
    }

    @TestMetadata("concatGenericWithStringUpperBound.kt")
    public void testConcatGenericWithStringUpperBound() {
      runTest("compiler/testData/codegen/box/strings/concatGenericWithStringUpperBound.kt");
    }

    @TestMetadata("concatNullableGenericWithPrimitiveUpperBound.kt")
    public void testConcatNullableGenericWithPrimitiveUpperBound() {
      runTest("compiler/testData/codegen/box/strings/concatNullableGenericWithPrimitiveUpperBound.kt");
    }

    @TestMetadata("constInStringTemplate.kt")
    public void testConstInStringTemplate() {
      runTest("compiler/testData/codegen/box/strings/constInStringTemplate.kt");
    }

    @TestMetadata("ea35743.kt")
    public void testEa35743() {
      runTest("compiler/testData/codegen/box/strings/ea35743.kt");
    }

    @TestMetadata("forInString.kt")
    public void testForInString() {
      runTest("compiler/testData/codegen/box/strings/forInString.kt");
    }

    @TestMetadata("interpolation.kt")
    public void testInterpolation() {
      runTest("compiler/testData/codegen/box/strings/interpolation.kt");
    }

    @TestMetadata("javaToStringNPE.kt")
    public void testJavaToStringNPE() {
      runTest("compiler/testData/codegen/box/strings/javaToStringNPE.kt");
    }

    @TestMetadata("kt13213.kt")
    public void testKt13213() {
      runTest("compiler/testData/codegen/box/strings/kt13213.kt");
    }

    @TestMetadata("kt13213a.kt")
    public void testKt13213a() {
      runTest("compiler/testData/codegen/box/strings/kt13213a.kt");
    }

    @TestMetadata("kt2592.kt")
    public void testKt2592() {
      runTest("compiler/testData/codegen/box/strings/kt2592.kt");
    }

    @TestMetadata("kt3571.kt")
    public void testKt3571() {
      runTest("compiler/testData/codegen/box/strings/kt3571.kt");
    }

    @TestMetadata("kt3652.kt")
    public void testKt3652() {
      runTest("compiler/testData/codegen/box/strings/kt3652.kt");
    }

    @TestMetadata("kt42457_old.kt")
    public void testKt42457_old() {
      runTest("compiler/testData/codegen/box/strings/kt42457_old.kt");
    }

    @TestMetadata("kt47917.kt")
    public void testKt47917() {
      runTest("compiler/testData/codegen/box/strings/kt47917.kt");
    }

    @TestMetadata("kt50140.kt")
    public void testKt50140() {
      runTest("compiler/testData/codegen/box/strings/kt50140.kt");
    }

    @TestMetadata("kt5389_stringBuilderGet.kt")
    public void testKt5389_stringBuilderGet() {
      runTest("compiler/testData/codegen/box/strings/kt5389_stringBuilderGet.kt");
    }

    @TestMetadata("kt5956.kt")
    public void testKt5956() {
      runTest("compiler/testData/codegen/box/strings/kt5956.kt");
    }

    @TestMetadata("kt881.kt")
    public void testKt881() {
      runTest("compiler/testData/codegen/box/strings/kt881.kt");
    }

    @TestMetadata("kt889.kt")
    public void testKt889() {
      runTest("compiler/testData/codegen/box/strings/kt889.kt");
    }

    @TestMetadata("kt894.kt")
    public void testKt894() {
      runTest("compiler/testData/codegen/box/strings/kt894.kt");
    }

    @TestMetadata("MultiDollarInterpolation.kt")
    public void testMultiDollarInterpolation() {
      runTest("compiler/testData/codegen/box/strings/MultiDollarInterpolation.kt");
    }

    @TestMetadata("multilineStringsWithTemplates.kt")
    public void testMultilineStringsWithTemplates() {
      runTest("compiler/testData/codegen/box/strings/multilineStringsWithTemplates.kt");
    }

    @TestMetadata("nestedConcat.kt")
    public void testNestedConcat() {
      runTest("compiler/testData/codegen/box/strings/nestedConcat.kt");
    }

    @TestMetadata("rawStrings.kt")
    public void testRawStrings() {
      runTest("compiler/testData/codegen/box/strings/rawStrings.kt");
    }

    @TestMetadata("rawStringsWithManyQuotes.kt")
    public void testRawStringsWithManyQuotes() {
      runTest("compiler/testData/codegen/box/strings/rawStringsWithManyQuotes.kt");
    }

    @TestMetadata("simpleStringPlus.kt")
    public void testSimpleStringPlus() {
      runTest("compiler/testData/codegen/box/strings/simpleStringPlus.kt");
    }

    @TestMetadata("singleConcatNullable.kt")
    public void testSingleConcatNullable() {
      runTest("compiler/testData/codegen/box/strings/singleConcatNullable.kt");
    }

    @TestMetadata("stringBuilderAppend.kt")
    public void testStringBuilderAppend() {
      runTest("compiler/testData/codegen/box/strings/stringBuilderAppend.kt");
    }

    @TestMetadata("stringFromJavaPlus.kt")
    public void testStringFromJavaPlus() {
      runTest("compiler/testData/codegen/box/strings/stringFromJavaPlus.kt");
    }

    @TestMetadata("stringPlusOnlyWorksOnString.kt")
    public void testStringPlusOnlyWorksOnString() {
      runTest("compiler/testData/codegen/box/strings/stringPlusOnlyWorksOnString.kt");
    }

    @TestMetadata("stringPlusOverride.kt")
    public void testStringPlusOverride() {
      runTest("compiler/testData/codegen/box/strings/stringPlusOverride.kt");
    }

    @TestMetadata("surrogatePair.kt")
    public void testSurrogatePair() {
      runTest("compiler/testData/codegen/box/strings/surrogatePair.kt");
    }

    @TestMetadata("trimOptimization.kt")
    public void testTrimOptimization() {
      runTest("compiler/testData/codegen/box/strings/trimOptimization.kt");
    }

    @TestMetadata("twoArgumentNullableStringOperatorPlus.kt")
    public void testTwoArgumentNullableStringOperatorPlus() {
      runTest("compiler/testData/codegen/box/strings/twoArgumentNullableStringOperatorPlus.kt");
    }

    @TestMetadata("twoArgumentNullableStringPlus.kt")
    public void testTwoArgumentNullableStringPlus() {
      runTest("compiler/testData/codegen/box/strings/twoArgumentNullableStringPlus.kt");
    }

    @TestMetadata("twoArgumentStringTemplate.kt")
    public void testTwoArgumentStringTemplate() {
      runTest("compiler/testData/codegen/box/strings/twoArgumentStringTemplate.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/super")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Super extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInSuper() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/super"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("basicmethodSuperClass.kt")
    public void testBasicmethodSuperClass() {
      runTest("compiler/testData/codegen/box/super/basicmethodSuperClass.kt");
    }

    @TestMetadata("basicmethodSuperTrait.kt")
    public void testBasicmethodSuperTrait() {
      runTest("compiler/testData/codegen/box/super/basicmethodSuperTrait.kt");
    }

    @TestMetadata("basicproperty.kt")
    public void testBasicproperty() {
      runTest("compiler/testData/codegen/box/super/basicproperty.kt");
    }

    @TestMetadata("enclosedFun.kt")
    public void testEnclosedFun() {
      runTest("compiler/testData/codegen/box/super/enclosedFun.kt");
    }

    @TestMetadata("enclosedVar.kt")
    public void testEnclosedVar() {
      runTest("compiler/testData/codegen/box/super/enclosedVar.kt");
    }

    @TestMetadata("innerClassLabeledSuper.kt")
    public void testInnerClassLabeledSuper() {
      runTest("compiler/testData/codegen/box/super/innerClassLabeledSuper.kt");
    }

    @TestMetadata("innerClassLabeledSuper2.kt")
    public void testInnerClassLabeledSuper2() {
      runTest("compiler/testData/codegen/box/super/innerClassLabeledSuper2.kt");
    }

    @TestMetadata("innerClassLabeledSuperProperty.kt")
    public void testInnerClassLabeledSuperProperty() {
      runTest("compiler/testData/codegen/box/super/innerClassLabeledSuperProperty.kt");
    }

    @TestMetadata("innerClassLabeledSuperProperty2.kt")
    public void testInnerClassLabeledSuperProperty2() {
      runTest("compiler/testData/codegen/box/super/innerClassLabeledSuperProperty2.kt");
    }

    @TestMetadata("innerClassQualifiedFunctionCall.kt")
    public void testInnerClassQualifiedFunctionCall() {
      runTest("compiler/testData/codegen/box/super/innerClassQualifiedFunctionCall.kt");
    }

    @TestMetadata("innerClassQualifiedPropertyAccess.kt")
    public void testInnerClassQualifiedPropertyAccess() {
      runTest("compiler/testData/codegen/box/super/innerClassQualifiedPropertyAccess.kt");
    }

    @TestMetadata("interfaceHashCode.kt")
    public void testInterfaceHashCode() {
      runTest("compiler/testData/codegen/box/super/interfaceHashCode.kt");
    }

    @TestMetadata("kt14243.kt")
    public void testKt14243() {
      runTest("compiler/testData/codegen/box/super/kt14243.kt");
    }

    @TestMetadata("kt14243_2.kt")
    public void testKt14243_2() {
      runTest("compiler/testData/codegen/box/super/kt14243_2.kt");
    }

    @TestMetadata("kt14243_class.kt")
    public void testKt14243_class() {
      runTest("compiler/testData/codegen/box/super/kt14243_class.kt");
    }

    @TestMetadata("kt14243_prop.kt")
    public void testKt14243_prop() {
      runTest("compiler/testData/codegen/box/super/kt14243_prop.kt");
    }

    @TestMetadata("kt3492ClassFun.kt")
    public void testKt3492ClassFun() {
      runTest("compiler/testData/codegen/box/super/kt3492ClassFun.kt");
    }

    @TestMetadata("kt3492ClassProperty.kt")
    public void testKt3492ClassProperty() {
      runTest("compiler/testData/codegen/box/super/kt3492ClassProperty.kt");
    }

    @TestMetadata("kt3492TraitFun.kt")
    public void testKt3492TraitFun() {
      runTest("compiler/testData/codegen/box/super/kt3492TraitFun.kt");
    }

    @TestMetadata("kt3492TraitProperty.kt")
    public void testKt3492TraitProperty() {
      runTest("compiler/testData/codegen/box/super/kt3492TraitProperty.kt");
    }

    @TestMetadata("kt4173.kt")
    public void testKt4173() {
      runTest("compiler/testData/codegen/box/super/kt4173.kt");
    }

    @TestMetadata("kt4173_2.kt")
    public void testKt4173_2() {
      runTest("compiler/testData/codegen/box/super/kt4173_2.kt");
    }

    @TestMetadata("kt4173_3.kt")
    public void testKt4173_3() {
      runTest("compiler/testData/codegen/box/super/kt4173_3.kt");
    }

    @TestMetadata("kt4982.kt")
    public void testKt4982() {
      runTest("compiler/testData/codegen/box/super/kt4982.kt");
    }

    @TestMetadata("multipleSuperTraits.kt")
    public void testMultipleSuperTraits() {
      runTest("compiler/testData/codegen/box/super/multipleSuperTraits.kt");
    }

    @TestMetadata("superCallToNonGenericImplThroughGenericDefaultImpls.kt")
    public void testSuperCallToNonGenericImplThroughGenericDefaultImpls() {
      runTest("compiler/testData/codegen/box/super/superCallToNonGenericImplThroughGenericDefaultImpls.kt");
    }

    @TestMetadata("superJavaInterfaceDefaultMethod.kt")
    public void testSuperJavaInterfaceDefaultMethod() {
      runTest("compiler/testData/codegen/box/super/superJavaInterfaceDefaultMethod.kt");
    }

    @TestMetadata("superJavaInterfaceOverriddenDefaultMethod.kt")
    public void testSuperJavaInterfaceOverriddenDefaultMethod() {
      runTest("compiler/testData/codegen/box/super/superJavaInterfaceOverriddenDefaultMethod.kt");
    }

    @TestMetadata("traitproperty.kt")
    public void testTraitproperty() {
      runTest("compiler/testData/codegen/box/super/traitproperty.kt");
    }

    @TestMetadata("unqualifiedSuper.kt")
    public void testUnqualifiedSuper() {
      runTest("compiler/testData/codegen/box/super/unqualifiedSuper.kt");
    }

    @TestMetadata("unqualifiedSuperWithDeeperHierarchies.kt")
    public void testUnqualifiedSuperWithDeeperHierarchies() {
      runTest("compiler/testData/codegen/box/super/unqualifiedSuperWithDeeperHierarchies.kt");
    }

    @TestMetadata("unqualifiedSuperWithMethodsOfAny.kt")
    public void testUnqualifiedSuperWithMethodsOfAny() {
      runTest("compiler/testData/codegen/box/super/unqualifiedSuperWithMethodsOfAny.kt");
    }

    @TestMetadata("compiler/testData/codegen/box/super/superConstructor")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class SuperConstructor extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInSuperConstructor() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/super/superConstructor"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("kt13846.kt")
      public void testKt13846() {
        runTest("compiler/testData/codegen/box/super/superConstructor/kt13846.kt");
      }

      @TestMetadata("kt17464_arrayOf.kt")
      public void testKt17464_arrayOf() {
        runTest("compiler/testData/codegen/box/super/superConstructor/kt17464_arrayOf.kt");
      }

      @TestMetadata("kt17464_linkedMapOf.kt")
      public void testKt17464_linkedMapOf() {
        runTest("compiler/testData/codegen/box/super/superConstructor/kt17464_linkedMapOf.kt");
      }

      @TestMetadata("kt18356.kt")
      public void testKt18356() {
        runTest("compiler/testData/codegen/box/super/superConstructor/kt18356.kt");
      }

      @TestMetadata("kt18356_2.kt")
      public void testKt18356_2() {
        runTest("compiler/testData/codegen/box/super/superConstructor/kt18356_2.kt");
      }

      @TestMetadata("objectExtendsInner.kt")
      public void testObjectExtendsInner() {
        runTest("compiler/testData/codegen/box/super/superConstructor/objectExtendsInner.kt");
      }

      @TestMetadata("objectExtendsLocalInner.kt")
      public void testObjectExtendsLocalInner() {
        runTest("compiler/testData/codegen/box/super/superConstructor/objectExtendsLocalInner.kt");
      }
    }
  }

  @TestMetadata("compiler/testData/codegen/box/suppressions")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Suppressions extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInSuppressions() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/suppressions"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("suppressInvisible.kt")
    public void testSuppressInvisible() {
      runTest("compiler/testData/codegen/box/suppressions/suppressInvisible.kt");
    }

    @TestMetadata("suppressInvisibleCtor.kt")
    public void testSuppressInvisibleCtor() {
      runTest("compiler/testData/codegen/box/suppressions/suppressInvisibleCtor.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/suspendConversion")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class SuspendConversion extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInSuspendConversion() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/suspendConversion"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("basicSuspendConversion.kt")
    public void testBasicSuspendConversion() {
      runTest("compiler/testData/codegen/box/suspendConversion/basicSuspendConversion.kt");
    }

    @TestMetadata("basicSuspendConversionDefault.kt")
    public void testBasicSuspendConversionDefault() {
      runTest("compiler/testData/codegen/box/suspendConversion/basicSuspendConversionDefault.kt");
    }

    @TestMetadata("basicSuspendConversionForCallableReference.kt")
    public void testBasicSuspendConversionForCallableReference() {
      runTest("compiler/testData/codegen/box/suspendConversion/basicSuspendConversionForCallableReference.kt");
    }

    @TestMetadata("basicSuspendConversionGenerics.kt")
    public void testBasicSuspendConversionGenerics() {
      runTest("compiler/testData/codegen/box/suspendConversion/basicSuspendConversionGenerics.kt");
    }

    @TestMetadata("chainedFunSuspendConversionForSimpleExpression.kt")
    public void testChainedFunSuspendConversionForSimpleExpression() {
      runTest("compiler/testData/codegen/box/suspendConversion/chainedFunSuspendConversionForSimpleExpression.kt");
    }

    @TestMetadata("kt50949_suspendConversionForExtensionFunction.kt")
    public void testKt50949_suspendConversionForExtensionFunction() {
      runTest("compiler/testData/codegen/box/suspendConversion/kt50949_suspendConversionForExtensionFunction.kt");
    }

    @TestMetadata("overloadResolutionBySuspendModifier.kt")
    public void testOverloadResolutionBySuspendModifier() {
      runTest("compiler/testData/codegen/box/suspendConversion/overloadResolutionBySuspendModifier.kt");
    }

    @TestMetadata("severalConversionsInOneCall.kt")
    public void testSeveralConversionsInOneCall() {
      runTest("compiler/testData/codegen/box/suspendConversion/severalConversionsInOneCall.kt");
    }

    @TestMetadata("suspendAndFunConversionInDisabledMode.kt")
    public void testSuspendAndFunConversionInDisabledMode() {
      runTest("compiler/testData/codegen/box/suspendConversion/suspendAndFunConversionInDisabledMode.kt");
    }

    @TestMetadata("suspendConversionCompatibility.kt")
    public void testSuspendConversionCompatibility() {
      runTest("compiler/testData/codegen/box/suspendConversion/suspendConversionCompatibility.kt");
    }

    @TestMetadata("suspendConversionOfAliasedType.kt")
    public void testSuspendConversionOfAliasedType() {
      runTest("compiler/testData/codegen/box/suspendConversion/suspendConversionOfAliasedType.kt");
    }

    @TestMetadata("suspendConversionOnVarargElements.kt")
    public void testSuspendConversionOnVarargElements() {
      runTest("compiler/testData/codegen/box/suspendConversion/suspendConversionOnVarargElements.kt");
    }

    @TestMetadata("suspendConversionWithFunInterfaces.kt")
    public void testSuspendConversionWithFunInterfaces() {
      runTest("compiler/testData/codegen/box/suspendConversion/suspendConversionWithFunInterfaces.kt");
    }

    @TestMetadata("suspendConversionWithReferenceAdaptation.kt")
    public void testSuspendConversionWithReferenceAdaptation() {
      runTest("compiler/testData/codegen/box/suspendConversion/suspendConversionWithReferenceAdaptation.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/synchronized")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Synchronized extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInSynchronized() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/synchronized"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("changeMonitor.kt")
    public void testChangeMonitor() {
      runTest("compiler/testData/codegen/box/synchronized/changeMonitor.kt");
    }

    @TestMetadata("exceptionInMonitorExpression.kt")
    public void testExceptionInMonitorExpression() {
      runTest("compiler/testData/codegen/box/synchronized/exceptionInMonitorExpression.kt");
    }

    @TestMetadata("finally.kt")
    public void testFinally() {
      runTest("compiler/testData/codegen/box/synchronized/finally.kt");
    }

    @TestMetadata("longValue.kt")
    public void testLongValue() {
      runTest("compiler/testData/codegen/box/synchronized/longValue.kt");
    }

    @TestMetadata("nestedDifferentObjects.kt")
    public void testNestedDifferentObjects() {
      runTest("compiler/testData/codegen/box/synchronized/nestedDifferentObjects.kt");
    }

    @TestMetadata("nestedSameObject.kt")
    public void testNestedSameObject() {
      runTest("compiler/testData/codegen/box/synchronized/nestedSameObject.kt");
    }

    @TestMetadata("nonLocalReturn.kt")
    public void testNonLocalReturn() {
      runTest("compiler/testData/codegen/box/synchronized/nonLocalReturn.kt");
    }

    @TestMetadata("objectValue.kt")
    public void testObjectValue() {
      runTest("compiler/testData/codegen/box/synchronized/objectValue.kt");
    }

    @TestMetadata("sync.kt")
    public void testSync() {
      runTest("compiler/testData/codegen/box/synchronized/sync.kt");
    }

    @TestMetadata("value.kt")
    public void testValue() {
      runTest("compiler/testData/codegen/box/synchronized/value.kt");
    }

    @TestMetadata("wait.kt")
    public void testWait() {
      runTest("compiler/testData/codegen/box/synchronized/wait.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/syntheticAccessors")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class SyntheticAccessors extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    @TestMetadata("accessorForAbstractProtected.kt")
    public void testAccessorForAbstractProtected() {
      runTest("compiler/testData/codegen/box/syntheticAccessors/accessorForAbstractProtected.kt");
    }

    @TestMetadata("accessorForGenericConstructor.kt")
    public void testAccessorForGenericConstructor() {
      runTest("compiler/testData/codegen/box/syntheticAccessors/accessorForGenericConstructor.kt");
    }

    @TestMetadata("accessorForGenericMethod.kt")
    public void testAccessorForGenericMethod() {
      runTest("compiler/testData/codegen/box/syntheticAccessors/accessorForGenericMethod.kt");
    }

    @TestMetadata("accessorForGenericMethodWithDefaults.kt")
    public void testAccessorForGenericMethodWithDefaults() {
      runTest("compiler/testData/codegen/box/syntheticAccessors/accessorForGenericMethodWithDefaults.kt");
    }

    @TestMetadata("accessorForProtected.kt")
    public void testAccessorForProtected() {
      runTest("compiler/testData/codegen/box/syntheticAccessors/accessorForProtected.kt");
    }

    @TestMetadata("accessorForProtectedInvokeVirtual.kt")
    public void testAccessorForProtectedInvokeVirtual() {
      runTest("compiler/testData/codegen/box/syntheticAccessors/accessorForProtectedInvokeVirtual.kt");
    }

    @TestMetadata("accessorForProtectedPropertyReference.kt")
    public void testAccessorForProtectedPropertyReference() {
      runTest("compiler/testData/codegen/box/syntheticAccessors/accessorForProtectedPropertyReference.kt");
    }

    public void testAllFilesPresentInSyntheticAccessors() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/syntheticAccessors"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("inline.kt")
    public void testInline() {
      runTest("compiler/testData/codegen/box/syntheticAccessors/inline.kt");
    }

    @TestMetadata("inlineInOtherClass.kt")
    public void testInlineInOtherClass() {
      runTest("compiler/testData/codegen/box/syntheticAccessors/inlineInOtherClass.kt");
    }

    @TestMetadata("jvmField.kt")
    public void testJvmField() {
      runTest("compiler/testData/codegen/box/syntheticAccessors/jvmField.kt");
    }

    @TestMetadata("jvmNameForAccessors.kt")
    public void testJvmNameForAccessors() {
      runTest("compiler/testData/codegen/box/syntheticAccessors/jvmNameForAccessors.kt");
    }

    @TestMetadata("kt10047.kt")
    public void testKt10047() {
      runTest("compiler/testData/codegen/box/syntheticAccessors/kt10047.kt");
    }

    @TestMetadata("kt21258_indirect.kt")
    public void testKt21258_indirect() {
      runTest("compiler/testData/codegen/box/syntheticAccessors/kt21258_indirect.kt");
    }

    @TestMetadata("kt21258_simple.kt")
    public void testKt21258_simple() {
      runTest("compiler/testData/codegen/box/syntheticAccessors/kt21258_simple.kt");
    }

    @TestMetadata("kt48331.kt")
    public void testKt48331() {
      runTest("compiler/testData/codegen/box/syntheticAccessors/kt48331.kt");
    }

    @TestMetadata("kt48954.kt")
    public void testKt48954() {
      runTest("compiler/testData/codegen/box/syntheticAccessors/kt48954.kt");
    }

    @TestMetadata("kt49316.kt")
    public void testKt49316() {
      runTest("compiler/testData/codegen/box/syntheticAccessors/kt49316.kt");
    }

    @TestMetadata("kt49316a.kt")
    public void testKt49316a() {
      runTest("compiler/testData/codegen/box/syntheticAccessors/kt49316a.kt");
    }

    @TestMetadata("kt9717.kt")
    public void testKt9717() {
      runTest("compiler/testData/codegen/box/syntheticAccessors/kt9717.kt");
    }

    @TestMetadata("kt9717DifferentPackages.kt")
    public void testKt9717DifferentPackages() {
      runTest("compiler/testData/codegen/box/syntheticAccessors/kt9717DifferentPackages.kt");
    }

    @TestMetadata("kt9958.kt")
    public void testKt9958() {
      runTest("compiler/testData/codegen/box/syntheticAccessors/kt9958.kt");
    }

    @TestMetadata("kt9958Interface.kt")
    public void testKt9958Interface() {
      runTest("compiler/testData/codegen/box/syntheticAccessors/kt9958Interface.kt");
    }

    @TestMetadata("packagePrivate.kt")
    public void testPackagePrivate() {
      runTest("compiler/testData/codegen/box/syntheticAccessors/packagePrivate.kt");
    }

    @TestMetadata("packagePrivateInPrivateInline.kt")
    public void testPackagePrivateInPrivateInline() {
      runTest("compiler/testData/codegen/box/syntheticAccessors/packagePrivateInPrivateInline.kt");
    }

    @TestMetadata("protectedFromLambda.kt")
    public void testProtectedFromLambda() {
      runTest("compiler/testData/codegen/box/syntheticAccessors/protectedFromLambda.kt");
    }

    @TestMetadata("protectedSuper.kt")
    public void testProtectedSuper() {
      runTest("compiler/testData/codegen/box/syntheticAccessors/protectedSuper.kt");
    }

    @TestMetadata("protectedSuperclassCompanionObjectMember.kt")
    public void testProtectedSuperclassCompanionObjectMember() {
      runTest("compiler/testData/codegen/box/syntheticAccessors/protectedSuperclassCompanionObjectMember.kt");
    }

    @TestMetadata("superCallFromMultipleSubclasses.kt")
    public void testSuperCallFromMultipleSubclasses() {
      runTest("compiler/testData/codegen/box/syntheticAccessors/superCallFromMultipleSubclasses.kt");
    }

    @TestMetadata("syntheticAccessorNames.kt")
    public void testSyntheticAccessorNames() {
      runTest("compiler/testData/codegen/box/syntheticAccessors/syntheticAccessorNames.kt");
    }

    @TestMetadata("compiler/testData/codegen/box/syntheticAccessors/protectedJavaFieldAccessor")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ProtectedJavaFieldAccessor extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInProtectedJavaFieldAccessor() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/syntheticAccessors/protectedJavaFieldAccessor"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("kt44855.kt")
      public void testKt44855() {
        runTest("compiler/testData/codegen/box/syntheticAccessors/protectedJavaFieldAccessor/kt44855.kt");
      }

      @TestMetadata("kt44855a.kt")
      public void testKt44855a() {
        runTest("compiler/testData/codegen/box/syntheticAccessors/protectedJavaFieldAccessor/kt44855a.kt");
      }

      @TestMetadata("kt46578_anonObject.kt")
      public void testKt46578_anonObject() {
        runTest("compiler/testData/codegen/box/syntheticAccessors/protectedJavaFieldAccessor/kt46578_anonObject.kt");
      }

      @TestMetadata("kt46578_delegated.kt")
      public void testKt46578_delegated() {
        runTest("compiler/testData/codegen/box/syntheticAccessors/protectedJavaFieldAccessor/kt46578_delegated.kt");
      }

      @TestMetadata("kt46578_kotlin_delegated.kt")
      public void testKt46578_kotlin_delegated() {
        runTest("compiler/testData/codegen/box/syntheticAccessors/protectedJavaFieldAccessor/kt46578_kotlin_delegated.kt");
      }

      @TestMetadata("kt46578_kotlin_propertyRef.kt")
      public void testKt46578_kotlin_propertyRef() {
        runTest("compiler/testData/codegen/box/syntheticAccessors/protectedJavaFieldAccessor/kt46578_kotlin_propertyRef.kt");
      }

      @TestMetadata("kt46578_lambda.kt")
      public void testKt46578_lambda() {
        runTest("compiler/testData/codegen/box/syntheticAccessors/protectedJavaFieldAccessor/kt46578_lambda.kt");
      }

      @TestMetadata("kt46578_propertyRef.kt")
      public void testKt46578_propertyRef() {
        runTest("compiler/testData/codegen/box/syntheticAccessors/protectedJavaFieldAccessor/kt46578_propertyRef.kt");
      }

      @TestMetadata("kt46900_jkk_inheritance.kt")
      public void testKt46900_jkk_inheritance() {
        runTest("compiler/testData/codegen/box/syntheticAccessors/protectedJavaFieldAccessor/kt46900_jkk_inheritance.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/syntheticAccessors/protectedMemberReferenceAccessor")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ProtectedMemberReferenceAccessor extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInProtectedMemberReferenceAccessor() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/syntheticAccessors/protectedMemberReferenceAccessor"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("kt46597_crossinline_java_field.kt")
      public void testKt46597_crossinline_java_field() {
        runTest("compiler/testData/codegen/box/syntheticAccessors/protectedMemberReferenceAccessor/kt46597_crossinline_java_field.kt");
      }

      @TestMetadata("kt46597_crossinline_jvmField_property.kt")
      public void testKt46597_crossinline_jvmField_property() {
        runTest("compiler/testData/codegen/box/syntheticAccessors/protectedMemberReferenceAccessor/kt46597_crossinline_jvmField_property.kt");
      }

      @TestMetadata("kt46597_crossinline_method.kt")
      public void testKt46597_crossinline_method() {
        runTest("compiler/testData/codegen/box/syntheticAccessors/protectedMemberReferenceAccessor/kt46597_crossinline_method.kt");
      }

      @TestMetadata("kt46597_crossinline_property.kt")
      public void testKt46597_crossinline_property() {
        runTest("compiler/testData/codegen/box/syntheticAccessors/protectedMemberReferenceAccessor/kt46597_crossinline_property.kt");
      }

      @TestMetadata("kt46597_java_field.kt")
      public void testKt46597_java_field() {
        runTest("compiler/testData/codegen/box/syntheticAccessors/protectedMemberReferenceAccessor/kt46597_java_field.kt");
      }

      @TestMetadata("kt46597_jvmField_property.kt")
      public void testKt46597_jvmField_property() {
        runTest("compiler/testData/codegen/box/syntheticAccessors/protectedMemberReferenceAccessor/kt46597_jvmField_property.kt");
      }

      @TestMetadata("kt46597_method.kt")
      public void testKt46597_method() {
        runTest("compiler/testData/codegen/box/syntheticAccessors/protectedMemberReferenceAccessor/kt46597_method.kt");
      }

      @TestMetadata("kt46597_property.kt")
      public void testKt46597_property() {
        runTest("compiler/testData/codegen/box/syntheticAccessors/protectedMemberReferenceAccessor/kt46597_property.kt");
      }
    }
  }

  @TestMetadata("compiler/testData/codegen/box/syntheticExtensions")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class SyntheticExtensions extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInSyntheticExtensions() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/syntheticExtensions"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("firstCapitalizedProperty.kt")
    public void testFirstCapitalizedProperty() {
      runTest("compiler/testData/codegen/box/syntheticExtensions/firstCapitalizedProperty.kt");
    }

    @TestMetadata("fromTwoBases.kt")
    public void testFromTwoBases() {
      runTest("compiler/testData/codegen/box/syntheticExtensions/fromTwoBases.kt");
    }

    @TestMetadata("getter.kt")
    public void testGetter() {
      runTest("compiler/testData/codegen/box/syntheticExtensions/getter.kt");
    }

    @TestMetadata("implicitReceiver.kt")
    public void testImplicitReceiver() {
      runTest("compiler/testData/codegen/box/syntheticExtensions/implicitReceiver.kt");
    }

    @TestMetadata("kt56072.kt")
    public void testKt56072() {
      runTest("compiler/testData/codegen/box/syntheticExtensions/kt56072.kt");
    }

    @TestMetadata("kt56154.kt")
    public void testKt56154() {
      runTest("compiler/testData/codegen/box/syntheticExtensions/kt56154.kt");
    }

    @TestMetadata("kt57103.kt")
    public void testKt57103() {
      runTest("compiler/testData/codegen/box/syntheticExtensions/kt57103.kt");
    }

    @TestMetadata("overrideKotlinPropertyByJavaMethod.kt")
    public void testOverrideKotlinPropertyByJavaMethod() {
      runTest("compiler/testData/codegen/box/syntheticExtensions/overrideKotlinPropertyByJavaMethod.kt");
    }

    @TestMetadata("overrideOnlyGetter.kt")
    public void testOverrideOnlyGetter() {
      runTest("compiler/testData/codegen/box/syntheticExtensions/overrideOnlyGetter.kt");
    }

    @TestMetadata("plusPlus.kt")
    public void testPlusPlus() {
      runTest("compiler/testData/codegen/box/syntheticExtensions/plusPlus.kt");
    }

    @TestMetadata("protected.kt")
    public void testProtected() {
      runTest("compiler/testData/codegen/box/syntheticExtensions/protected.kt");
    }

    @TestMetadata("protectedSetter.kt")
    public void testProtectedSetter() {
      runTest("compiler/testData/codegen/box/syntheticExtensions/protectedSetter.kt");
    }

    @TestMetadata("setter.kt")
    public void testSetter() {
      runTest("compiler/testData/codegen/box/syntheticExtensions/setter.kt");
    }

    @TestMetadata("setterNonVoid1.kt")
    public void testSetterNonVoid1() {
      runTest("compiler/testData/codegen/box/syntheticExtensions/setterNonVoid1.kt");
    }

    @TestMetadata("setterNonVoid2.kt")
    public void testSetterNonVoid2() {
      runTest("compiler/testData/codegen/box/syntheticExtensions/setterNonVoid2.kt");
    }

    @TestMetadata("syntheticJavaProperty.kt")
    public void testSyntheticJavaProperty() {
      runTest("compiler/testData/codegen/box/syntheticExtensions/syntheticJavaProperty.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/throws")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Throws extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInThrows() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/throws"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("delegationAndThrows.kt")
    public void testDelegationAndThrows() {
      runTest("compiler/testData/codegen/box/throws/delegationAndThrows.kt");
    }

    @TestMetadata("delegationAndThrows_1_3.kt")
    public void testDelegationAndThrows_1_3() {
      runTest("compiler/testData/codegen/box/throws/delegationAndThrows_1_3.kt");
    }

    @TestMetadata("delegationAndThrows_AgainstCompiled.kt")
    public void testDelegationAndThrows_AgainstCompiled() {
      runTest("compiler/testData/codegen/box/throws/delegationAndThrows_AgainstCompiled.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/toArray")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class ToArray extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInToArray() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/toArray"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("incorrectToArrayDetection.kt")
    public void testIncorrectToArrayDetection() {
      runTest("compiler/testData/codegen/box/toArray/incorrectToArrayDetection.kt");
    }

    @TestMetadata("kt3177-toTypedArray.kt")
    public void testKt3177_toTypedArray() {
      runTest("compiler/testData/codegen/box/toArray/kt3177-toTypedArray.kt");
    }

    @TestMetadata("kt44152.kt")
    public void testKt44152() {
      runTest("compiler/testData/codegen/box/toArray/kt44152.kt");
    }

    @TestMetadata("returnToTypedArray.kt")
    public void testReturnToTypedArray() {
      runTest("compiler/testData/codegen/box/toArray/returnToTypedArray.kt");
    }

    @TestMetadata("toArray.kt")
    public void testToArray() {
      runTest("compiler/testData/codegen/box/toArray/toArray.kt");
    }

    @TestMetadata("toArrayAlreadyPresent.kt")
    public void testToArrayAlreadyPresent() {
      runTest("compiler/testData/codegen/box/toArray/toArrayAlreadyPresent.kt");
    }

    @TestMetadata("toArrayFromJava.kt")
    public void testToArrayFromJava() {
      runTest("compiler/testData/codegen/box/toArray/toArrayFromJava.kt");
    }

    @TestMetadata("toArrayShouldBePublic.kt")
    public void testToArrayShouldBePublic() {
      runTest("compiler/testData/codegen/box/toArray/toArrayShouldBePublic.kt");
    }

    @TestMetadata("toArrayShouldBePublicWithJava.kt")
    public void testToArrayShouldBePublicWithJava() {
      runTest("compiler/testData/codegen/box/toArray/toArrayShouldBePublicWithJava.kt");
    }

    @TestMetadata("toTypedArray.kt")
    public void testToTypedArray() {
      runTest("compiler/testData/codegen/box/toArray/toTypedArray.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/topLevelInitializtion")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class TopLevelInitializtion extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInTopLevelInitializtion() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/topLevelInitializtion"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("failInInitializer1.kt")
    public void testFailInInitializer1() {
      runTest("compiler/testData/codegen/box/topLevelInitializtion/failInInitializer1.kt");
    }

    @TestMetadata("failInInitializer2.kt")
    public void testFailInInitializer2() {
      runTest("compiler/testData/codegen/box/topLevelInitializtion/failInInitializer2.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/topLevelPrivate")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class TopLevelPrivate extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInTopLevelPrivate() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/topLevelPrivate"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("noPrivateNoAccessorsInMultiFileFacade.kt")
    public void testNoPrivateNoAccessorsInMultiFileFacade() {
      runTest("compiler/testData/codegen/box/topLevelPrivate/noPrivateNoAccessorsInMultiFileFacade.kt");
    }

    @TestMetadata("noPrivateNoAccessorsInMultiFileFacade2.kt")
    public void testNoPrivateNoAccessorsInMultiFileFacade2() {
      runTest("compiler/testData/codegen/box/topLevelPrivate/noPrivateNoAccessorsInMultiFileFacade2.kt");
    }

    @TestMetadata("privateInInlineNested.kt")
    public void testPrivateInInlineNested() {
      runTest("compiler/testData/codegen/box/topLevelPrivate/privateInInlineNested.kt");
    }

    @TestMetadata("privateVisibility.kt")
    public void testPrivateVisibility() {
      runTest("compiler/testData/codegen/box/topLevelPrivate/privateVisibility.kt");
    }

    @TestMetadata("syntheticAccessor.kt")
    public void testSyntheticAccessor() {
      runTest("compiler/testData/codegen/box/topLevelPrivate/syntheticAccessor.kt");
    }

    @TestMetadata("syntheticAccessorInMultiFile.kt")
    public void testSyntheticAccessorInMultiFile() {
      runTest("compiler/testData/codegen/box/topLevelPrivate/syntheticAccessorInMultiFile.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/trailingComma")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class TrailingComma extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInTrailingComma() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/trailingComma"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("noDisambiguation.kt")
    public void testNoDisambiguation() {
      runTest("compiler/testData/codegen/box/trailingComma/noDisambiguation.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/traits")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Traits extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    @TestMetadata("abstractClassInheritsFromInterface.kt")
    public void testAbstractClassInheritsFromInterface() {
      runTest("compiler/testData/codegen/box/traits/abstractClassInheritsFromInterface.kt");
    }

    @TestMetadata("abstractClassWithFakeOverride.kt")
    public void testAbstractClassWithFakeOverride() {
      runTest("compiler/testData/codegen/box/traits/abstractClassWithFakeOverride.kt");
    }

    public void testAllFilesPresentInTraits() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/traits"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("defaultImplCall.kt")
    public void testDefaultImplCall() {
      runTest("compiler/testData/codegen/box/traits/defaultImplCall.kt");
    }

    @TestMetadata("defaultMethod.kt")
    public void testDefaultMethod() {
      runTest("compiler/testData/codegen/box/traits/defaultMethod.kt");
    }

    @TestMetadata("diamondPropertyAccessors.kt")
    public void testDiamondPropertyAccessors() {
      runTest("compiler/testData/codegen/box/traits/diamondPropertyAccessors.kt");
    }

    @TestMetadata("doubleDiamond.kt")
    public void testDoubleDiamond() {
      runTest("compiler/testData/codegen/box/traits/doubleDiamond.kt");
    }

    @TestMetadata("doubleGenericDiamond.kt")
    public void testDoubleGenericDiamond() {
      runTest("compiler/testData/codegen/box/traits/doubleGenericDiamond.kt");
    }

    @TestMetadata("genericMethod.kt")
    public void testGenericMethod() {
      runTest("compiler/testData/codegen/box/traits/genericMethod.kt");
    }

    @TestMetadata("indirectlyInheritPropertyGetter.kt")
    public void testIndirectlyInheritPropertyGetter() {
      runTest("compiler/testData/codegen/box/traits/indirectlyInheritPropertyGetter.kt");
    }

    @TestMetadata("inheritJavaInterface.kt")
    public void testInheritJavaInterface() {
      runTest("compiler/testData/codegen/box/traits/inheritJavaInterface.kt");
    }

    @TestMetadata("inheritJavaInterface_AgainstCompiled.kt")
    public void testInheritJavaInterface_AgainstCompiled() {
      runTest("compiler/testData/codegen/box/traits/inheritJavaInterface_AgainstCompiled.kt");
    }

    @TestMetadata("inheritedFun.kt")
    public void testInheritedFun() {
      runTest("compiler/testData/codegen/box/traits/inheritedFun.kt");
    }

    @TestMetadata("inheritedVar.kt")
    public void testInheritedVar() {
      runTest("compiler/testData/codegen/box/traits/inheritedVar.kt");
    }

    @TestMetadata("interfaceDefaultImpls.kt")
    public void testInterfaceDefaultImpls() {
      runTest("compiler/testData/codegen/box/traits/interfaceDefaultImpls.kt");
    }

    @TestMetadata("interfaceWithNonAbstractFunIndirect.kt")
    public void testInterfaceWithNonAbstractFunIndirect() {
      runTest("compiler/testData/codegen/box/traits/interfaceWithNonAbstractFunIndirect.kt");
    }

    @TestMetadata("interfaceWithNonAbstractFunIndirectGeneric.kt")
    public void testInterfaceWithNonAbstractFunIndirectGeneric() {
      runTest("compiler/testData/codegen/box/traits/interfaceWithNonAbstractFunIndirectGeneric.kt");
    }

    @TestMetadata("kt1936.kt")
    public void testKt1936() {
      runTest("compiler/testData/codegen/box/traits/kt1936.kt");
    }

    @TestMetadata("kt1936_1.kt")
    public void testKt1936_1() {
      runTest("compiler/testData/codegen/box/traits/kt1936_1.kt");
    }

    @TestMetadata("kt2260.kt")
    public void testKt2260() {
      runTest("compiler/testData/codegen/box/traits/kt2260.kt");
    }

    @TestMetadata("kt2399.kt")
    public void testKt2399() {
      runTest("compiler/testData/codegen/box/traits/kt2399.kt");
    }

    @TestMetadata("kt2541.kt")
    public void testKt2541() {
      runTest("compiler/testData/codegen/box/traits/kt2541.kt");
    }

    @TestMetadata("kt3315.kt")
    public void testKt3315() {
      runTest("compiler/testData/codegen/box/traits/kt3315.kt");
    }

    @TestMetadata("kt3500.kt")
    public void testKt3500() {
      runTest("compiler/testData/codegen/box/traits/kt3500.kt");
    }

    @TestMetadata("kt3579.kt")
    public void testKt3579() {
      runTest("compiler/testData/codegen/box/traits/kt3579.kt");
    }

    @TestMetadata("kt3579_2.kt")
    public void testKt3579_2() {
      runTest("compiler/testData/codegen/box/traits/kt3579_2.kt");
    }

    @TestMetadata("kt36973.kt")
    public void testKt36973() {
      runTest("compiler/testData/codegen/box/traits/kt36973.kt");
    }

    @TestMetadata("kt5393.kt")
    public void testKt5393() {
      runTest("compiler/testData/codegen/box/traits/kt5393.kt");
    }

    @TestMetadata("kt5393_property.kt")
    public void testKt5393_property() {
      runTest("compiler/testData/codegen/box/traits/kt5393_property.kt");
    }

    @TestMetadata("multiple.kt")
    public void testMultiple() {
      runTest("compiler/testData/codegen/box/traits/multiple.kt");
    }

    @TestMetadata("multipleImplFromJava.kt")
    public void testMultipleImplFromJava() {
      runTest("compiler/testData/codegen/box/traits/multipleImplFromJava.kt");
    }

    @TestMetadata("noPrivateDelegation.kt")
    public void testNoPrivateDelegation() {
      runTest("compiler/testData/codegen/box/traits/noPrivateDelegation.kt");
    }

    @TestMetadata("privateInterfaceMethod.kt")
    public void testPrivateInterfaceMethod() {
      runTest("compiler/testData/codegen/box/traits/privateInterfaceMethod.kt");
    }

    @TestMetadata("receiverOfIntersectionType.kt")
    public void testReceiverOfIntersectionType() {
      runTest("compiler/testData/codegen/box/traits/receiverOfIntersectionType.kt");
    }

    @TestMetadata("sameNameMethodFromInterface.kt")
    public void testSameNameMethodFromInterface() {
      runTest("compiler/testData/codegen/box/traits/sameNameMethodFromInterface.kt");
    }

    @TestMetadata("syntheticAccessor.kt")
    public void testSyntheticAccessor() {
      runTest("compiler/testData/codegen/box/traits/syntheticAccessor.kt");
    }

    @TestMetadata("traitImplDelegationWithCovariantOverride.kt")
    public void testTraitImplDelegationWithCovariantOverride() {
      runTest("compiler/testData/codegen/box/traits/traitImplDelegationWithCovariantOverride.kt");
    }

    @TestMetadata("traitImplDiamond.kt")
    public void testTraitImplDiamond() {
      runTest("compiler/testData/codegen/box/traits/traitImplDiamond.kt");
    }

    @TestMetadata("traitImplGenericDelegation.kt")
    public void testTraitImplGenericDelegation() {
      runTest("compiler/testData/codegen/box/traits/traitImplGenericDelegation.kt");
    }

    @TestMetadata("traitWithPrivateExtension.kt")
    public void testTraitWithPrivateExtension() {
      runTest("compiler/testData/codegen/box/traits/traitWithPrivateExtension.kt");
    }

    @TestMetadata("traitWithPrivateMember.kt")
    public void testTraitWithPrivateMember() {
      runTest("compiler/testData/codegen/box/traits/traitWithPrivateMember.kt");
    }

    @TestMetadata("traitWithPrivateMemberAccessFromLambda.kt")
    public void testTraitWithPrivateMemberAccessFromLambda() {
      runTest("compiler/testData/codegen/box/traits/traitWithPrivateMemberAccessFromLambda.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/try")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Try extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInTry() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/try"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("catch3.kt")
    public void testCatch3() {
      runTest("compiler/testData/codegen/box/try/catch3.kt");
    }

    @TestMetadata("catch4.kt")
    public void testCatch4() {
      runTest("compiler/testData/codegen/box/try/catch4.kt");
    }

    @TestMetadata("catch5.kt")
    public void testCatch5() {
      runTest("compiler/testData/codegen/box/try/catch5.kt");
    }

    @TestMetadata("catch6.kt")
    public void testCatch6() {
      runTest("compiler/testData/codegen/box/try/catch6.kt");
    }

    @TestMetadata("catch8.kt")
    public void testCatch8() {
      runTest("compiler/testData/codegen/box/try/catch8.kt");
    }

    @TestMetadata("finally1.kt")
    public void testFinally1() {
      runTest("compiler/testData/codegen/box/try/finally1.kt");
    }

    @TestMetadata("finally10.kt")
    public void testFinally10() {
      runTest("compiler/testData/codegen/box/try/finally10.kt");
    }

    @TestMetadata("finally11.kt")
    public void testFinally11() {
      runTest("compiler/testData/codegen/box/try/finally11.kt");
    }

    @TestMetadata("finally2.kt")
    public void testFinally2() {
      runTest("compiler/testData/codegen/box/try/finally2.kt");
    }

    @TestMetadata("finally3.kt")
    public void testFinally3() {
      runTest("compiler/testData/codegen/box/try/finally3.kt");
    }

    @TestMetadata("finally4.kt")
    public void testFinally4() {
      runTest("compiler/testData/codegen/box/try/finally4.kt");
    }

    @TestMetadata("finally5.kt")
    public void testFinally5() {
      runTest("compiler/testData/codegen/box/try/finally5.kt");
    }

    @TestMetadata("finally6.kt")
    public void testFinally6() {
      runTest("compiler/testData/codegen/box/try/finally6.kt");
    }

    @TestMetadata("finally7.kt")
    public void testFinally7() {
      runTest("compiler/testData/codegen/box/try/finally7.kt");
    }

    @TestMetadata("finally8.kt")
    public void testFinally8() {
      runTest("compiler/testData/codegen/box/try/finally8.kt");
    }

    @TestMetadata("finally9.kt")
    public void testFinally9() {
      runTest("compiler/testData/codegen/box/try/finally9.kt");
    }

    @TestMetadata("returnsDifferentTypes.kt")
    public void testReturnsDifferentTypes() {
      runTest("compiler/testData/codegen/box/try/returnsDifferentTypes.kt");
    }

    @TestMetadata("try1.kt")
    public void testTry1() {
      runTest("compiler/testData/codegen/box/try/try1.kt");
    }

    @TestMetadata("try2.kt")
    public void testTry2() {
      runTest("compiler/testData/codegen/box/try/try2.kt");
    }

    @TestMetadata("try3.kt")
    public void testTry3() {
      runTest("compiler/testData/codegen/box/try/try3.kt");
    }

    @TestMetadata("try4.kt")
    public void testTry4() {
      runTest("compiler/testData/codegen/box/try/try4.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/typeInfo")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class TypeInfo extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInTypeInfo() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/typeInfo"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("asInLoop.kt")
    public void testAsInLoop() {
      runTest("compiler/testData/codegen/box/typeInfo/asInLoop.kt");
    }

    @TestMetadata("ifOrWhenSpecialCall.kt")
    public void testIfOrWhenSpecialCall() {
      runTest("compiler/testData/codegen/box/typeInfo/ifOrWhenSpecialCall.kt");
    }

    @TestMetadata("implicitSmartCastThis.kt")
    public void testImplicitSmartCastThis() {
      runTest("compiler/testData/codegen/box/typeInfo/implicitSmartCastThis.kt");
    }

    @TestMetadata("inheritance.kt")
    public void testInheritance() {
      runTest("compiler/testData/codegen/box/typeInfo/inheritance.kt");
    }

    @TestMetadata("kt2811.kt")
    public void testKt2811() {
      runTest("compiler/testData/codegen/box/typeInfo/kt2811.kt");
    }

    @TestMetadata("primitiveTypeInfo.kt")
    public void testPrimitiveTypeInfo() {
      runTest("compiler/testData/codegen/box/typeInfo/primitiveTypeInfo.kt");
    }

    @TestMetadata("smartCastThis.kt")
    public void testSmartCastThis() {
      runTest("compiler/testData/codegen/box/typeInfo/smartCastThis.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/typeMapping")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class TypeMapping extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInTypeMapping() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/typeMapping"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("enhancedPrimitiveInReturnType.kt")
    public void testEnhancedPrimitiveInReturnType() {
      runTest("compiler/testData/codegen/box/typeMapping/enhancedPrimitiveInReturnType.kt");
    }

    @TestMetadata("enhancedPrimitives.kt")
    public void testEnhancedPrimitives() {
      runTest("compiler/testData/codegen/box/typeMapping/enhancedPrimitives.kt");
    }

    @TestMetadata("genericTypeWithNothing.kt")
    public void testGenericTypeWithNothing() {
      runTest("compiler/testData/codegen/box/typeMapping/genericTypeWithNothing.kt");
    }

    @TestMetadata("kt2831.kt")
    public void testKt2831() {
      runTest("compiler/testData/codegen/box/typeMapping/kt2831.kt");
    }

    @TestMetadata("kt309.kt")
    public void testKt309() {
      runTest("compiler/testData/codegen/box/typeMapping/kt309.kt");
    }

    @TestMetadata("kt3286.kt")
    public void testKt3286() {
      runTest("compiler/testData/codegen/box/typeMapping/kt3286.kt");
    }

    @TestMetadata("kt3863.kt")
    public void testKt3863() {
      runTest("compiler/testData/codegen/box/typeMapping/kt3863.kt");
    }

    @TestMetadata("kt3976.kt")
    public void testKt3976() {
      runTest("compiler/testData/codegen/box/typeMapping/kt3976.kt");
    }

    @TestMetadata("nothing.kt")
    public void testNothing() {
      runTest("compiler/testData/codegen/box/typeMapping/nothing.kt");
    }

    @TestMetadata("nullNothing.kt")
    public void testNullNothing() {
      runTest("compiler/testData/codegen/box/typeMapping/nullNothing.kt");
    }

    @TestMetadata("nullableNothing.kt")
    public void testNullableNothing() {
      runTest("compiler/testData/codegen/box/typeMapping/nullableNothing.kt");
    }

    @TestMetadata("typeParameterMultipleBounds.kt")
    public void testTypeParameterMultipleBounds() {
      runTest("compiler/testData/codegen/box/typeMapping/typeParameterMultipleBounds.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/typealias")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Typealias extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    @TestMetadata("abbreviationWithCapturedType.kt")
    public void testAbbreviationWithCapturedType() {
      runTest("compiler/testData/codegen/box/typealias/abbreviationWithCapturedType.kt");
    }

    public void testAllFilesPresentInTypealias() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/typealias"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("deserializedAbbreviationWithRedundantArgument.kt")
    public void testDeserializedAbbreviationWithRedundantArgument() {
      runTest("compiler/testData/codegen/box/typealias/deserializedAbbreviationWithRedundantArgument.kt");
    }

    @TestMetadata("enumEntryQualifier.kt")
    public void testEnumEntryQualifier() {
      runTest("compiler/testData/codegen/box/typealias/enumEntryQualifier.kt");
    }

    @TestMetadata("extensionFunction.kt")
    public void testExtensionFunction() {
      runTest("compiler/testData/codegen/box/typealias/extensionFunction.kt");
    }

    @TestMetadata("genericTypeAliasConstructor.kt")
    public void testGenericTypeAliasConstructor() {
      runTest("compiler/testData/codegen/box/typealias/genericTypeAliasConstructor.kt");
    }

    @TestMetadata("genericTypeAliasConstructor2.kt")
    public void testGenericTypeAliasConstructor2() {
      runTest("compiler/testData/codegen/box/typealias/genericTypeAliasConstructor2.kt");
    }

    @TestMetadata("incorrectTypeOfTypealiasForSuspendFTMM.kt")
    public void testIncorrectTypeOfTypealiasForSuspendFTMM() {
      runTest("compiler/testData/codegen/box/typealias/incorrectTypeOfTypealiasForSuspendFTMM.kt");
    }

    @TestMetadata("incorrectTypeOfTypealiasForSuspendFunctionalType.kt")
    public void testIncorrectTypeOfTypealiasForSuspendFunctionalType() {
      runTest("compiler/testData/codegen/box/typealias/incorrectTypeOfTypealiasForSuspendFunctionalType.kt");
    }

    @TestMetadata("innerClassTypeAliasConstructor.kt")
    public void testInnerClassTypeAliasConstructor() {
      runTest("compiler/testData/codegen/box/typealias/innerClassTypeAliasConstructor.kt");
    }

    @TestMetadata("innerClassTypeAliasConstructorInSupertypes.kt")
    public void testInnerClassTypeAliasConstructorInSupertypes() {
      runTest("compiler/testData/codegen/box/typealias/innerClassTypeAliasConstructorInSupertypes.kt");
    }

    @TestMetadata("javaStaticMembersViaTypeAlias.kt")
    public void testJavaStaticMembersViaTypeAlias() {
      runTest("compiler/testData/codegen/box/typealias/javaStaticMembersViaTypeAlias.kt");
    }

    @TestMetadata("kt15109.kt")
    public void testKt15109() {
      runTest("compiler/testData/codegen/box/typealias/kt15109.kt");
    }

    @TestMetadata("kt45308.kt")
    public void testKt45308() {
      runTest("compiler/testData/codegen/box/typealias/kt45308.kt");
    }

    @TestMetadata("objectLiteralConstructor.kt")
    public void testObjectLiteralConstructor() {
      runTest("compiler/testData/codegen/box/typealias/objectLiteralConstructor.kt");
    }

    @TestMetadata("outerClassArgumentsThroughTypealias.kt")
    public void testOuterClassArgumentsThroughTypealias() {
      runTest("compiler/testData/codegen/box/typealias/outerClassArgumentsThroughTypealias.kt");
    }

    @TestMetadata("privateInKlib.kt")
    public void testPrivateInKlib() {
      runTest("compiler/testData/codegen/box/typealias/privateInKlib.kt");
    }

    @TestMetadata("simple.kt")
    public void testSimple() {
      runTest("compiler/testData/codegen/box/typealias/simple.kt");
    }

    @TestMetadata("typeAliasAsBareType.kt")
    public void testTypeAliasAsBareType() {
      runTest("compiler/testData/codegen/box/typealias/typeAliasAsBareType.kt");
    }

    @TestMetadata("typeAliasCompanion.kt")
    public void testTypeAliasCompanion() {
      runTest("compiler/testData/codegen/box/typealias/typeAliasCompanion.kt");
    }

    @TestMetadata("typeAliasConstructor.kt")
    public void testTypeAliasConstructor() {
      runTest("compiler/testData/codegen/box/typealias/typeAliasConstructor.kt");
    }

    @TestMetadata("typeAliasConstructorAccessor.kt")
    public void testTypeAliasConstructorAccessor() {
      runTest("compiler/testData/codegen/box/typealias/typeAliasConstructorAccessor.kt");
    }

    @TestMetadata("typeAliasConstructorForArray.kt")
    public void testTypeAliasConstructorForArray() {
      runTest("compiler/testData/codegen/box/typealias/typeAliasConstructorForArray.kt");
    }

    @TestMetadata("typeAliasConstructorInSuperCall.kt")
    public void testTypeAliasConstructorInSuperCall() {
      runTest("compiler/testData/codegen/box/typealias/typeAliasConstructorInSuperCall.kt");
    }

    @TestMetadata("typeAliasFunction.kt")
    public void testTypeAliasFunction() {
      runTest("compiler/testData/codegen/box/typealias/typeAliasFunction.kt");
    }

    @TestMetadata("typeAliasInAnonymousObjectType.kt")
    public void testTypeAliasInAnonymousObjectType() {
      runTest("compiler/testData/codegen/box/typealias/typeAliasInAnonymousObjectType.kt");
    }

    @TestMetadata("typeAliasObject.kt")
    public void testTypeAliasObject() {
      runTest("compiler/testData/codegen/box/typealias/typeAliasObject.kt");
    }

    @TestMetadata("typeAliasObjectCallable.kt")
    public void testTypeAliasObjectCallable() {
      runTest("compiler/testData/codegen/box/typealias/typeAliasObjectCallable.kt");
    }

    @TestMetadata("typeAliasOnTypeAlias.kt")
    public void testTypeAliasOnTypeAlias() {
      runTest("compiler/testData/codegen/box/typealias/typeAliasOnTypeAlias.kt");
    }

    @TestMetadata("typeAliasSecondaryConstructor.kt")
    public void testTypeAliasSecondaryConstructor() {
      runTest("compiler/testData/codegen/box/typealias/typeAliasSecondaryConstructor.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/unaryOp")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class UnaryOp extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInUnaryOp() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/unaryOp"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("call.kt")
    public void testCall() {
      runTest("compiler/testData/codegen/box/unaryOp/call.kt");
    }

    @TestMetadata("callNullable.kt")
    public void testCallNullable() {
      runTest("compiler/testData/codegen/box/unaryOp/callNullable.kt");
    }

    @TestMetadata("callWithCommonType.kt")
    public void testCallWithCommonType() {
      runTest("compiler/testData/codegen/box/unaryOp/callWithCommonType.kt");
    }

    @TestMetadata("intrinsic.kt")
    public void testIntrinsic() {
      runTest("compiler/testData/codegen/box/unaryOp/intrinsic.kt");
    }

    @TestMetadata("intrinsicNullable.kt")
    public void testIntrinsicNullable() {
      runTest("compiler/testData/codegen/box/unaryOp/intrinsicNullable.kt");
    }

    @TestMetadata("longOverflow.kt")
    public void testLongOverflow() {
      runTest("compiler/testData/codegen/box/unaryOp/longOverflow.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/underscoredTypeArguments")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class UnderscoredTypeArguments extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInUnderscoredTypeArguments() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/underscoredTypeArguments"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("backTicked.kt")
    public void testBackTicked() {
      runTest("compiler/testData/codegen/box/underscoredTypeArguments/backTicked.kt");
    }

    @TestMetadata("dependentTypeParameters.kt")
    public void testDependentTypeParameters() {
      runTest("compiler/testData/codegen/box/underscoredTypeArguments/dependentTypeParameters.kt");
    }

    @TestMetadata("lambdaInputType.kt")
    public void testLambdaInputType() {
      runTest("compiler/testData/codegen/box/underscoredTypeArguments/lambdaInputType.kt");
    }

    @TestMetadata("react.kt")
    public void testReact() {
      runTest("compiler/testData/codegen/box/underscoredTypeArguments/react.kt");
    }

    @TestMetadata("simple.kt")
    public void testSimple() {
      runTest("compiler/testData/codegen/box/underscoredTypeArguments/simple.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/unit")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Unit extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInUnit() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/unit"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("closureReturnsNullableUnit.kt")
    public void testClosureReturnsNullableUnit() {
      runTest("compiler/testData/codegen/box/unit/closureReturnsNullableUnit.kt");
    }

    @TestMetadata("ifElse.kt")
    public void testIfElse() {
      runTest("compiler/testData/codegen/box/unit/ifElse.kt");
    }

    @TestMetadata("kt3634.kt")
    public void testKt3634() {
      runTest("compiler/testData/codegen/box/unit/kt3634.kt");
    }

    @TestMetadata("kt4212.kt")
    public void testKt4212() {
      runTest("compiler/testData/codegen/box/unit/kt4212.kt");
    }

    @TestMetadata("kt4265.kt")
    public void testKt4265() {
      runTest("compiler/testData/codegen/box/unit/kt4265.kt");
    }

    @TestMetadata("kt51036.kt")
    public void testKt51036() {
      runTest("compiler/testData/codegen/box/unit/kt51036.kt");
    }

    @TestMetadata("kt56723.kt")
    public void testKt56723() {
      runTest("compiler/testData/codegen/box/unit/kt56723.kt");
    }

    @TestMetadata("nullableUnit.kt")
    public void testNullableUnit() {
      runTest("compiler/testData/codegen/box/unit/nullableUnit.kt");
    }

    @TestMetadata("nullableUnitInWhen1.kt")
    public void testNullableUnitInWhen1() {
      runTest("compiler/testData/codegen/box/unit/nullableUnitInWhen1.kt");
    }

    @TestMetadata("nullableUnitInWhen2.kt")
    public void testNullableUnitInWhen2() {
      runTest("compiler/testData/codegen/box/unit/nullableUnitInWhen2.kt");
    }

    @TestMetadata("nullableUnitInWhen3.kt")
    public void testNullableUnitInWhen3() {
      runTest("compiler/testData/codegen/box/unit/nullableUnitInWhen3.kt");
    }

    @TestMetadata("sillyThings.kt")
    public void testSillyThings() {
      runTest("compiler/testData/codegen/box/unit/sillyThings.kt");
    }

    @TestMetadata("unitClassObject.kt")
    public void testUnitClassObject() {
      runTest("compiler/testData/codegen/box/unit/unitClassObject.kt");
    }

    @TestMetadata("UnitValue.kt")
    public void testUnitValue() {
      runTest("compiler/testData/codegen/box/unit/UnitValue.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/unsignedTypes")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class UnsignedTypes extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInUnsignedTypes() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/unsignedTypes"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("boxConstValOfUnsignedType.kt")
    public void testBoxConstValOfUnsignedType() {
      runTest("compiler/testData/codegen/box/unsignedTypes/boxConstValOfUnsignedType.kt");
    }

    @TestMetadata("boxedUnsignedEqualsZero.kt")
    public void testBoxedUnsignedEqualsZero() {
      runTest("compiler/testData/codegen/box/unsignedTypes/boxedUnsignedEqualsZero.kt");
    }

    @TestMetadata("checkBasicUnsignedLiterals.kt")
    public void testCheckBasicUnsignedLiterals() {
      runTest("compiler/testData/codegen/box/unsignedTypes/checkBasicUnsignedLiterals.kt");
    }

    @TestMetadata("defaultArguments.kt")
    public void testDefaultArguments() {
      runTest("compiler/testData/codegen/box/unsignedTypes/defaultArguments.kt");
    }

    @TestMetadata("equalsImplForInlineClassWrappingNullableInlineClass.kt")
    public void testEqualsImplForInlineClassWrappingNullableInlineClass() {
      runTest("compiler/testData/codegen/box/unsignedTypes/equalsImplForInlineClassWrappingNullableInlineClass.kt");
    }

    @TestMetadata("evaluateConstructorOfUnsignedArrayType.kt")
    public void testEvaluateConstructorOfUnsignedArrayType() {
      runTest("compiler/testData/codegen/box/unsignedTypes/evaluateConstructorOfUnsignedArrayType.kt");
    }

    @TestMetadata("evaluateConstructorOfUnsignedType.kt")
    public void testEvaluateConstructorOfUnsignedType() {
      runTest("compiler/testData/codegen/box/unsignedTypes/evaluateConstructorOfUnsignedType.kt");
    }

    @TestMetadata("forEachIndexedInListOfUInts.kt")
    public void testForEachIndexedInListOfUInts() {
      runTest("compiler/testData/codegen/box/unsignedTypes/forEachIndexedInListOfUInts.kt");
    }

    @TestMetadata("forInUnsignedDownTo.kt")
    public void testForInUnsignedDownTo() {
      runTest("compiler/testData/codegen/box/unsignedTypes/forInUnsignedDownTo.kt");
    }

    @TestMetadata("forInUnsignedProgression.kt")
    public void testForInUnsignedProgression() {
      runTest("compiler/testData/codegen/box/unsignedTypes/forInUnsignedProgression.kt");
    }

    @TestMetadata("forInUnsignedRange.kt")
    public void testForInUnsignedRange() {
      runTest("compiler/testData/codegen/box/unsignedTypes/forInUnsignedRange.kt");
    }

    @TestMetadata("forInUnsignedRangeLiteral.kt")
    public void testForInUnsignedRangeLiteral() {
      runTest("compiler/testData/codegen/box/unsignedTypes/forInUnsignedRangeLiteral.kt");
    }

    @TestMetadata("forInUnsignedRangeWithCoercion.kt")
    public void testForInUnsignedRangeWithCoercion() {
      runTest("compiler/testData/codegen/box/unsignedTypes/forInUnsignedRangeWithCoercion.kt");
    }

    @TestMetadata("forInUnsignedUntil.kt")
    public void testForInUnsignedUntil() {
      runTest("compiler/testData/codegen/box/unsignedTypes/forInUnsignedUntil.kt");
    }

    @TestMetadata("generic.kt")
    public void testGeneric() {
      runTest("compiler/testData/codegen/box/unsignedTypes/generic.kt");
    }

    @TestMetadata("implicitIntegerCoercionNamedArg.kt")
    public void testImplicitIntegerCoercionNamedArg() {
      runTest("compiler/testData/codegen/box/unsignedTypes/implicitIntegerCoercionNamedArg.kt");
    }

    @TestMetadata("implicitIntegerCoercionOverloadResolutionAmbiguity.kt")
    public void testImplicitIntegerCoercionOverloadResolutionAmbiguity() {
      runTest("compiler/testData/codegen/box/unsignedTypes/implicitIntegerCoercionOverloadResolutionAmbiguity.kt");
    }

    @TestMetadata("inUnsignedDownTo.kt")
    public void testInUnsignedDownTo() {
      runTest("compiler/testData/codegen/box/unsignedTypes/inUnsignedDownTo.kt");
    }

    @TestMetadata("inUnsignedRange.kt")
    public void testInUnsignedRange() {
      runTest("compiler/testData/codegen/box/unsignedTypes/inUnsignedRange.kt");
    }

    @TestMetadata("inUnsignedRangeLiteral.kt")
    public void testInUnsignedRangeLiteral() {
      runTest("compiler/testData/codegen/box/unsignedTypes/inUnsignedRangeLiteral.kt");
    }

    @TestMetadata("inUnsignedUntil.kt")
    public void testInUnsignedUntil() {
      runTest("compiler/testData/codegen/box/unsignedTypes/inUnsignedUntil.kt");
    }

    @TestMetadata("iterateOverArrayOfUnsignedValues.kt")
    public void testIterateOverArrayOfUnsignedValues() {
      runTest("compiler/testData/codegen/box/unsignedTypes/iterateOverArrayOfUnsignedValues.kt");
    }

    @TestMetadata("iterateOverListOfBoxedUnsignedValues.kt")
    public void testIterateOverListOfBoxedUnsignedValues() {
      runTest("compiler/testData/codegen/box/unsignedTypes/iterateOverListOfBoxedUnsignedValues.kt");
    }

    @TestMetadata("kt25784.kt")
    public void testKt25784() {
      runTest("compiler/testData/codegen/box/unsignedTypes/kt25784.kt");
    }

    @TestMetadata("kt43286.kt")
    public void testKt43286() {
      runTest("compiler/testData/codegen/box/unsignedTypes/kt43286.kt");
    }

    @TestMetadata("kt43286a.kt")
    public void testKt43286a() {
      runTest("compiler/testData/codegen/box/unsignedTypes/kt43286a.kt");
    }

    @TestMetadata("kt47716.kt")
    public void testKt47716() {
      runTest("compiler/testData/codegen/box/unsignedTypes/kt47716.kt");
    }

    @TestMetadata("kt61418.kt")
    public void testKt61418() {
      runTest("compiler/testData/codegen/box/unsignedTypes/kt61418.kt");
    }

    @TestMetadata("literalEqualsNullableUnsigned.kt")
    public void testLiteralEqualsNullableUnsigned() {
      runTest("compiler/testData/codegen/box/unsignedTypes/literalEqualsNullableUnsigned.kt");
    }

    @TestMetadata("nullableUnsignedEqualsLiteral.kt")
    public void testNullableUnsignedEqualsLiteral() {
      runTest("compiler/testData/codegen/box/unsignedTypes/nullableUnsignedEqualsLiteral.kt");
    }

    @TestMetadata("signedToUnsignedConversions.kt")
    public void testSignedToUnsignedConversions() {
      runTest("compiler/testData/codegen/box/unsignedTypes/signedToUnsignedConversions.kt");
    }

    @TestMetadata("unsignedArraySize.kt")
    public void testUnsignedArraySize() {
      runTest("compiler/testData/codegen/box/unsignedTypes/unsignedArraySize.kt");
    }

    @TestMetadata("unsignedInStringInterpolation.kt")
    public void testUnsignedInStringInterpolation() {
      runTest("compiler/testData/codegen/box/unsignedTypes/unsignedInStringInterpolation.kt");
    }

    @TestMetadata("unsignedIntCompare.kt")
    public void testUnsignedIntCompare() {
      runTest("compiler/testData/codegen/box/unsignedTypes/unsignedIntCompare.kt");
    }

    @TestMetadata("unsignedIntDivide.kt")
    public void testUnsignedIntDivide() {
      runTest("compiler/testData/codegen/box/unsignedTypes/unsignedIntDivide.kt");
    }

    @TestMetadata("unsignedIntRemainder.kt")
    public void testUnsignedIntRemainder() {
      runTest("compiler/testData/codegen/box/unsignedTypes/unsignedIntRemainder.kt");
    }

    @TestMetadata("unsignedIntToString.kt")
    public void testUnsignedIntToString() {
      runTest("compiler/testData/codegen/box/unsignedTypes/unsignedIntToString.kt");
    }

    @TestMetadata("unsignedLiteralsForMaxLongValue.kt")
    public void testUnsignedLiteralsForMaxLongValue() {
      runTest("compiler/testData/codegen/box/unsignedTypes/unsignedLiteralsForMaxLongValue.kt");
    }

    @TestMetadata("unsignedLiteralsInApiVersion14.kt")
    public void testUnsignedLiteralsInApiVersion14() {
      runTest("compiler/testData/codegen/box/unsignedTypes/unsignedLiteralsInApiVersion14.kt");
    }

    @TestMetadata("unsignedLiteralsWithSignedOverflow.kt")
    public void testUnsignedLiteralsWithSignedOverflow() {
      runTest("compiler/testData/codegen/box/unsignedTypes/unsignedLiteralsWithSignedOverflow.kt");
    }

    @TestMetadata("unsignedLongCompare.kt")
    public void testUnsignedLongCompare() {
      runTest("compiler/testData/codegen/box/unsignedTypes/unsignedLongCompare.kt");
    }

    @TestMetadata("unsignedLongDivide.kt")
    public void testUnsignedLongDivide() {
      runTest("compiler/testData/codegen/box/unsignedTypes/unsignedLongDivide.kt");
    }

    @TestMetadata("unsignedLongRemainder.kt")
    public void testUnsignedLongRemainder() {
      runTest("compiler/testData/codegen/box/unsignedTypes/unsignedLongRemainder.kt");
    }

    @TestMetadata("unsignedLongToString.kt")
    public void testUnsignedLongToString() {
      runTest("compiler/testData/codegen/box/unsignedTypes/unsignedLongToString.kt");
    }

    @TestMetadata("unsignedRangeIterator.kt")
    public void testUnsignedRangeIterator() {
      runTest("compiler/testData/codegen/box/unsignedTypes/unsignedRangeIterator.kt");
    }

    @TestMetadata("unsignedToSignedConversion.kt")
    public void testUnsignedToSignedConversion() {
      runTest("compiler/testData/codegen/box/unsignedTypes/unsignedToSignedConversion.kt");
    }

    @TestMetadata("unsignedTypePrefixIncrementDecrementBoxing.kt")
    public void testUnsignedTypePrefixIncrementDecrementBoxing() {
      runTest("compiler/testData/codegen/box/unsignedTypes/unsignedTypePrefixIncrementDecrementBoxing.kt");
    }

    @TestMetadata("unsignedTypeValuesInsideStringTemplates.kt")
    public void testUnsignedTypeValuesInsideStringTemplates() {
      runTest("compiler/testData/codegen/box/unsignedTypes/unsignedTypeValuesInsideStringTemplates.kt");
    }

    @TestMetadata("varargsOfUnsignedTypes.kt")
    public void testVarargsOfUnsignedTypes() {
      runTest("compiler/testData/codegen/box/unsignedTypes/varargsOfUnsignedTypes.kt");
    }

    @TestMetadata("whenByUnsigned.kt")
    public void testWhenByUnsigned() {
      runTest("compiler/testData/codegen/box/unsignedTypes/whenByUnsigned.kt");
    }

    @TestMetadata("compiler/testData/codegen/box/unsignedTypes/jvm8Intrinsics")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Jvm8Intrinsics extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInJvm8Intrinsics() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/unsignedTypes/jvm8Intrinsics"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("unsignedIntCompare_jvm8.kt")
      public void testUnsignedIntCompare_jvm8() {
        runTest("compiler/testData/codegen/box/unsignedTypes/jvm8Intrinsics/unsignedIntCompare_jvm8.kt");
      }

      @TestMetadata("unsignedIntDivide_jvm8.kt")
      public void testUnsignedIntDivide_jvm8() {
        runTest("compiler/testData/codegen/box/unsignedTypes/jvm8Intrinsics/unsignedIntDivide_jvm8.kt");
      }

      @TestMetadata("unsignedIntRemainder_jvm8.kt")
      public void testUnsignedIntRemainder_jvm8() {
        runTest("compiler/testData/codegen/box/unsignedTypes/jvm8Intrinsics/unsignedIntRemainder_jvm8.kt");
      }

      @TestMetadata("unsignedIntToString_jvm8.kt")
      public void testUnsignedIntToString_jvm8() {
        runTest("compiler/testData/codegen/box/unsignedTypes/jvm8Intrinsics/unsignedIntToString_jvm8.kt");
      }

      @TestMetadata("unsignedLongCompare_jvm8.kt")
      public void testUnsignedLongCompare_jvm8() {
        runTest("compiler/testData/codegen/box/unsignedTypes/jvm8Intrinsics/unsignedLongCompare_jvm8.kt");
      }

      @TestMetadata("unsignedLongDivide_jvm8.kt")
      public void testUnsignedLongDivide_jvm8() {
        runTest("compiler/testData/codegen/box/unsignedTypes/jvm8Intrinsics/unsignedLongDivide_jvm8.kt");
      }

      @TestMetadata("unsignedLongRemainder_jvm8.kt")
      public void testUnsignedLongRemainder_jvm8() {
        runTest("compiler/testData/codegen/box/unsignedTypes/jvm8Intrinsics/unsignedLongRemainder_jvm8.kt");
      }

      @TestMetadata("unsignedLongToString_jvm8.kt")
      public void testUnsignedLongToString_jvm8() {
        runTest("compiler/testData/codegen/box/unsignedTypes/jvm8Intrinsics/unsignedLongToString_jvm8.kt");
      }
    }
  }

  @TestMetadata("compiler/testData/codegen/box/valueClasses")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class ValueClasses extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    private void runTest(String testDataFilePath, java.util.function.Function<String, String> transformer) {
      KotlinTestUtils.runTest(path -> doTestWithTransformer(path, transformer), TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInValueClasses() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/valueClasses"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("classFlattening.kt")
    public void testClassFlattening() {
      runTest("compiler/testData/codegen/box/valueClasses/classFlattening.kt");
    }

    @TestMetadata("complex.kt")
    public void testComplex() {
      runTest("compiler/testData/codegen/box/valueClasses/complex.kt");
    }

    @TestMetadata("conditionalExpressions.kt")
    public void testConditionalExpressions() {
      runTest("compiler/testData/codegen/box/valueClasses/conditionalExpressions.kt");
    }

    @TestMetadata("defaultParameters.kt")
    public void testDefaultParameters() {
      runTest("compiler/testData/codegen/box/valueClasses/defaultParameters.kt");
    }

    @TestMetadata("delegating.kt")
    public void testDelegating() {
      runTest("compiler/testData/codegen/box/valueClasses/delegating.kt");
    }

    @TestMetadata("delegatingConstructors.kt")
    public void testDelegatingConstructors() {
      runTest("compiler/testData/codegen/box/valueClasses/delegatingConstructors.kt");
    }

    @TestMetadata("equality.kt")
    public void testEquality() {
      runTest("compiler/testData/codegen/box/valueClasses/equality.kt");
    }

    @TestMetadata("fakeOverrideCall.kt")
    public void testFakeOverrideCall() {
      runTest("compiler/testData/codegen/box/valueClasses/fakeOverrideCall.kt");
    }

    @TestMetadata("forStatement.kt")
    public void testForStatement() {
      runTest("compiler/testData/codegen/box/valueClasses/forStatement.kt");
    }

    @TestMetadata("functionReferences.kt")
    public void testFunctionReferences() {
      runTest("compiler/testData/codegen/box/valueClasses/functionReferences.kt");
    }

    @TestMetadata("inlineFunctions.kt")
    public void testInlineFunctions() {
      runTest("compiler/testData/codegen/box/valueClasses/inlineFunctions.kt");
    }

    @TestMetadata("kt59079.kt")
    public void testKt59079() {
      runTest("compiler/testData/codegen/box/valueClasses/kt59079.kt");
    }

    @TestMetadata("mfvcAndIcInsideConstructorsOfEachOther.kt")
    public void testMfvcAndIcInsideConstructorsOfEachOther() {
      runTest("compiler/testData/codegen/box/valueClasses/mfvcAndIcInsideConstructorsOfEachOther.kt");
    }

    @TestMetadata("mfvcBothEqualsOverride.kt")
    public void testMfvcBothEqualsOverride() {
      runTest("compiler/testData/codegen/box/valueClasses/mfvcBothEqualsOverride.kt");
    }

    @TestMetadata("mfvcEqualsConsistency.kt")
    public void testMfvcEqualsConsistency() {
      runTest("compiler/testData/codegen/box/valueClasses/mfvcEqualsConsistency.kt");
    }

    @TestMetadata("mfvcEqualsOverriddenForCollections.kt")
    public void testMfvcEqualsOverriddenForCollections() {
      runTest("compiler/testData/codegen/box/valueClasses/mfvcEqualsOverriddenForCollections.kt");
    }

    @TestMetadata("mfvcEqualsOverride.kt")
    public void testMfvcEqualsOverride() {
      runTest("compiler/testData/codegen/box/valueClasses/mfvcEqualsOverride.kt");
    }

    @TestMetadata("mfvcFieldInitializationOrder.kt")
    public void testMfvcFieldInitializationOrder() {
      runTest("compiler/testData/codegen/box/valueClasses/mfvcFieldInitializationOrder.kt");
    }

    @TestMetadata("mfvcHashCodeOverride.kt")
    public void testMfvcHashCodeOverride() {
      runTest("compiler/testData/codegen/box/valueClasses/mfvcHashCodeOverride.kt");
    }

    @TestMetadata("mfvcTypedEqualsGenerics.kt")
    public void testMfvcTypedEqualsGenerics() {
      runTest("compiler/testData/codegen/box/valueClasses/mfvcTypedEqualsGenerics.kt");
    }

    @TestMetadata("mfvcUntypedEqualsOverriden.kt")
    public void testMfvcUntypedEqualsOverriden() {
      runTest("compiler/testData/codegen/box/valueClasses/mfvcUntypedEqualsOverriden.kt");
    }

    @TestMetadata("multiModules.kt")
    public void testMultiModules() {
      runTest("compiler/testData/codegen/box/valueClasses/multiModules.kt");
    }

    @TestMetadata("mutableSharedMfvcVar.kt")
    public void testMutableSharedMfvcVar() {
      runTest("compiler/testData/codegen/box/valueClasses/mutableSharedMfvcVar.kt");
    }

    @TestMetadata("nestedLoweringStart.kt")
    public void testNestedLoweringStart() {
      runTest("compiler/testData/codegen/box/valueClasses/nestedLoweringStart.kt");
    }

    @TestMetadata("nothingAsParameterType.kt")
    public void testNothingAsParameterType() {
      runTest("compiler/testData/codegen/box/valueClasses/nothingAsParameterType.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("overrideFunctionWithDefaultParameter.kt")
    public void testOverrideFunctionWithDefaultParameter() {
      runTest("compiler/testData/codegen/box/valueClasses/overrideFunctionWithDefaultParameter.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("overrideFunctionWithDefaultParameterGeneric.kt")
    public void testOverrideFunctionWithDefaultParameterGeneric() {
      runTest("compiler/testData/codegen/box/valueClasses/overrideFunctionWithDefaultParameterGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("overrides.kt")
    public void testOverrides() {
      runTest("compiler/testData/codegen/box/valueClasses/overrides.kt");
    }

    @TestMetadata("overrides_inlineClass.kt")
    public void testOverrides_inlineClass() {
      runTest("compiler/testData/codegen/box/valueClasses/overrides_inlineClass.kt");
    }

    @TestMetadata("overrides_typeParameters.kt")
    public void testOverrides_typeParameters() {
      runTest("compiler/testData/codegen/box/valueClasses/overrides_typeParameters.kt");
    }

    @TestMetadata("regularClassSecondaryConstructorWithMfvc.kt")
    public void testRegularClassSecondaryConstructorWithMfvc() {
      runTest("compiler/testData/codegen/box/valueClasses/regularClassSecondaryConstructorWithMfvc.kt");
    }

    @TestMetadata("secondaryConstructorExpectActual.kt")
    public void testSecondaryConstructorExpectActual() {
      runTest("compiler/testData/codegen/box/valueClasses/secondaryConstructorExpectActual.kt");
    }

    @TestMetadata("secondaryConstructorVisibilies.kt")
    public void testSecondaryConstructorVisibilies() {
      runTest("compiler/testData/codegen/box/valueClasses/secondaryConstructorVisibilies.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("secondaryConstructorWithVararg.kt")
    public void testSecondaryConstructorWithVararg() {
      runTest("compiler/testData/codegen/box/valueClasses/secondaryConstructorWithVararg.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("secondaryConstructorWithVarargGeneric.kt")
    public void testSecondaryConstructorWithVarargGeneric() {
      runTest("compiler/testData/codegen/box/valueClasses/secondaryConstructorWithVarargGeneric.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithReal());
    }

    @TestMetadata("secondaryConstructorsWithBody.kt")
    public void testSecondaryConstructorsWithBody() {
      runTest("compiler/testData/codegen/box/valueClasses/secondaryConstructorsWithBody.kt");
    }

    @TestMetadata("throwingMFVCReassignments.kt")
    public void testThrowingMFVCReassignments() {
      runTest("compiler/testData/codegen/box/valueClasses/throwingMFVCReassignments.kt");
    }

    @TestMetadata("tryExpressions.kt")
    public void testTryExpressions() {
      runTest("compiler/testData/codegen/box/valueClasses/tryExpressions.kt");
    }

    @TestMetadata("visibility.kt")
    public void testVisibility() {
      runTest("compiler/testData/codegen/box/valueClasses/visibility.kt");
    }

    @TestMetadata("compiler/testData/codegen/box/valueClasses/javaInterop")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class JavaInterop extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInJavaInterop() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/valueClasses/javaInterop"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("methodWithValueClassDeclaredInJava.kt")
      public void testMethodWithValueClassDeclaredInJava() {
        runTest("compiler/testData/codegen/box/valueClasses/javaInterop/methodWithValueClassDeclaredInJava.kt");
      }

      @TestMetadata("methodWithValueClassDeclaredInJavaOverriddenInKotlin.kt")
      public void testMethodWithValueClassDeclaredInJavaOverriddenInKotlin() {
        runTest("compiler/testData/codegen/box/valueClasses/javaInterop/methodWithValueClassDeclaredInJavaOverriddenInKotlin.kt");
      }

      @TestMetadata("methodWithValueClassInheritedBothFromJavaAndKotlin.kt")
      public void testMethodWithValueClassInheritedBothFromJavaAndKotlin() {
        runTest("compiler/testData/codegen/box/valueClasses/javaInterop/methodWithValueClassInheritedBothFromJavaAndKotlin.kt");
      }

      @TestMetadata("methodWithValueClassInheritedInJavaOverriddenInKotlin.kt")
      public void testMethodWithValueClassInheritedInJavaOverriddenInKotlin() {
        runTest("compiler/testData/codegen/box/valueClasses/javaInterop/methodWithValueClassInheritedInJavaOverriddenInKotlin.kt");
      }
    }
  }

  @TestMetadata("compiler/testData/codegen/box/vararg")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Vararg extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInVararg() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/vararg"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("assigningArrayToVarargInAnnotation.kt")
    public void testAssigningArrayToVarargInAnnotation() {
      runTest("compiler/testData/codegen/box/vararg/assigningArrayToVarargInAnnotation.kt");
    }

    @TestMetadata("boxingArgumentsForVararg.kt")
    public void testBoxingArgumentsForVararg() {
      runTest("compiler/testData/codegen/box/vararg/boxingArgumentsForVararg.kt");
    }

    @TestMetadata("doNotCopyImmediatelyCreatedArrays.kt")
    public void testDoNotCopyImmediatelyCreatedArrays() {
      runTest("compiler/testData/codegen/box/vararg/doNotCopyImmediatelyCreatedArrays.kt");
    }

    @TestMetadata("emptyVarargOfBoxedPrimitiveType.kt")
    public void testEmptyVarargOfBoxedPrimitiveType() {
      runTest("compiler/testData/codegen/box/vararg/emptyVarargOfBoxedPrimitiveType.kt");
    }

    @TestMetadata("evaluationOrder.kt")
    public void testEvaluationOrder() {
      runTest("compiler/testData/codegen/box/vararg/evaluationOrder.kt");
    }

    @TestMetadata("inlineClassArraysAsNamedArgumentInVararg.kt")
    public void testInlineClassArraysAsNamedArgumentInVararg() {
      runTest("compiler/testData/codegen/box/vararg/inlineClassArraysAsNamedArgumentInVararg.kt");
    }

    @TestMetadata("kt10926.kt")
    public void testKt10926() {
      runTest("compiler/testData/codegen/box/vararg/kt10926.kt");
    }

    @TestMetadata("kt1978.kt")
    public void testKt1978() {
      runTest("compiler/testData/codegen/box/vararg/kt1978.kt");
    }

    @TestMetadata("kt37715.kt")
    public void testKt37715() {
      runTest("compiler/testData/codegen/box/vararg/kt37715.kt");
    }

    @TestMetadata("kt37779.kt")
    public void testKt37779() {
      runTest("compiler/testData/codegen/box/vararg/kt37779.kt");
    }

    @TestMetadata("kt45187.kt")
    public void testKt45187() {
      runTest("compiler/testData/codegen/box/vararg/kt45187.kt");
    }

    @TestMetadata("kt46092.kt")
    public void testKt46092() {
      runTest("compiler/testData/codegen/box/vararg/kt46092.kt");
    }

    @TestMetadata("kt52146_samWithSelfTypeAndStarProjection.kt")
    public void testKt52146_samWithSelfTypeAndStarProjection() {
      runTest("compiler/testData/codegen/box/vararg/kt52146_samWithSelfTypeAndStarProjection.kt");
    }

    @TestMetadata("kt581.kt")
    public void testKt581() {
      runTest("compiler/testData/codegen/box/vararg/kt581.kt");
    }

    @TestMetadata("kt6192.kt")
    public void testKt6192() {
      runTest("compiler/testData/codegen/box/vararg/kt6192.kt");
    }

    @TestMetadata("kt796_797.kt")
    public void testKt796_797() {
      runTest("compiler/testData/codegen/box/vararg/kt796_797.kt");
    }

    @TestMetadata("notInLastPosition.kt")
    public void testNotInLastPosition() {
      runTest("compiler/testData/codegen/box/vararg/notInLastPosition.kt");
    }

    @TestMetadata("referenceToContainsFromVarargParameter.kt")
    public void testReferenceToContainsFromVarargParameter() {
      runTest("compiler/testData/codegen/box/vararg/referenceToContainsFromVarargParameter.kt");
    }

    @TestMetadata("singleAssignmentToVarargsInFunction.kt")
    public void testSingleAssignmentToVarargsInFunction() {
      runTest("compiler/testData/codegen/box/vararg/singleAssignmentToVarargsInFunction.kt");
    }

    @TestMetadata("spreadCopiesArray.kt")
    public void testSpreadCopiesArray() {
      runTest("compiler/testData/codegen/box/vararg/spreadCopiesArray.kt");
    }

    @TestMetadata("useSuspendFunResultAsVararg.kt")
    public void testUseSuspendFunResultAsVararg() {
      runTest("compiler/testData/codegen/box/vararg/useSuspendFunResultAsVararg.kt");
    }

    @TestMetadata("varargInFunParam.kt")
    public void testVarargInFunParam() {
      runTest("compiler/testData/codegen/box/vararg/varargInFunParam.kt");
    }

    @TestMetadata("varargInJava.kt")
    public void testVarargInJava() {
      runTest("compiler/testData/codegen/box/vararg/varargInJava.kt");
    }

    @TestMetadata("varargInTailrec.kt")
    public void testVarargInTailrec() {
      runTest("compiler/testData/codegen/box/vararg/varargInTailrec.kt");
    }

    @TestMetadata("varargsAndFunctionLiterals.kt")
    public void testVarargsAndFunctionLiterals() {
      runTest("compiler/testData/codegen/box/vararg/varargsAndFunctionLiterals.kt");
    }

    @TestMetadata("varargsOverride.kt")
    public void testVarargsOverride() {
      runTest("compiler/testData/codegen/box/vararg/varargsOverride.kt");
    }

    @TestMetadata("varargsOverride2.kt")
    public void testVarargsOverride2() {
      runTest("compiler/testData/codegen/box/vararg/varargsOverride2.kt");
    }

    @TestMetadata("varargsOverride3.kt")
    public void testVarargsOverride3() {
      runTest("compiler/testData/codegen/box/vararg/varargsOverride3.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/volatile")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Volatile extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInVolatile() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/volatile"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("volatileBool.kt")
    public void testVolatileBool() {
      runTest("compiler/testData/codegen/box/volatile/volatileBool.kt");
    }

    @TestMetadata("volatileByte.kt")
    public void testVolatileByte() {
      runTest("compiler/testData/codegen/box/volatile/volatileByte.kt");
    }

    @TestMetadata("volatileDouble.kt")
    public void testVolatileDouble() {
      runTest("compiler/testData/codegen/box/volatile/volatileDouble.kt");
    }

    @TestMetadata("volatileFloat.kt")
    public void testVolatileFloat() {
      runTest("compiler/testData/codegen/box/volatile/volatileFloat.kt");
    }

    @TestMetadata("volatileGeneric.kt")
    public void testVolatileGeneric() {
      runTest("compiler/testData/codegen/box/volatile/volatileGeneric.kt");
    }

    @TestMetadata("volatileInt.kt")
    public void testVolatileInt() {
      runTest("compiler/testData/codegen/box/volatile/volatileInt.kt");
    }

    @TestMetadata("volatileLong.kt")
    public void testVolatileLong() {
      runTest("compiler/testData/codegen/box/volatile/volatileLong.kt");
    }

    @TestMetadata("volatileShort.kt")
    public void testVolatileShort() {
      runTest("compiler/testData/codegen/box/volatile/volatileShort.kt");
    }

    @TestMetadata("volatileString.kt")
    public void testVolatileString() {
      runTest("compiler/testData/codegen/box/volatile/volatileString.kt");
    }
  }

  @TestMetadata("compiler/testData/codegen/box/wasm-new-exception-handling")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Wasm_new_exception_handling extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInWasm_new_exception_handling() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/wasm-new-exception-handling"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }
  }

  @TestMetadata("compiler/testData/codegen/box/when")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class When extends AbstractLightAnalysisModeTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    public void testAllFilesPresentInWhen() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/when"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @TestMetadata("callProperty.kt")
    public void testCallProperty() {
      runTest("compiler/testData/codegen/box/when/callProperty.kt");
    }

    @TestMetadata("edgeCases.kt")
    public void testEdgeCases() {
      runTest("compiler/testData/codegen/box/when/edgeCases.kt");
    }

    @TestMetadata("emptyWhen.kt")
    public void testEmptyWhen() {
      runTest("compiler/testData/codegen/box/when/emptyWhen.kt");
    }

    @TestMetadata("exceptionOnNoMatch.kt")
    public void testExceptionOnNoMatch() {
      runTest("compiler/testData/codegen/box/when/exceptionOnNoMatch.kt");
    }

    @TestMetadata("exhaustiveBoolean.kt")
    public void testExhaustiveBoolean() {
      runTest("compiler/testData/codegen/box/when/exhaustiveBoolean.kt");
    }

    @TestMetadata("exhaustiveBreakContinue.kt")
    public void testExhaustiveBreakContinue() {
      runTest("compiler/testData/codegen/box/when/exhaustiveBreakContinue.kt");
    }

    @TestMetadata("exhaustiveWhenInitialization.kt")
    public void testExhaustiveWhenInitialization() {
      runTest("compiler/testData/codegen/box/when/exhaustiveWhenInitialization.kt");
    }

    @TestMetadata("exhaustiveWhenReturn.kt")
    public void testExhaustiveWhenReturn() {
      runTest("compiler/testData/codegen/box/when/exhaustiveWhenReturn.kt");
    }

    @TestMetadata("implicitExhaustiveAndReturn.kt")
    public void testImplicitExhaustiveAndReturn() {
      runTest("compiler/testData/codegen/box/when/implicitExhaustiveAndReturn.kt");
    }

    @TestMetadata("inferredTypeParameters.kt")
    public void testInferredTypeParameters() {
      runTest("compiler/testData/codegen/box/when/inferredTypeParameters.kt");
    }

    @TestMetadata("integralWhenWithNoInlinedConstants.kt")
    public void testIntegralWhenWithNoInlinedConstants() {
      runTest("compiler/testData/codegen/box/when/integralWhenWithNoInlinedConstants.kt");
    }

    @TestMetadata("integralWhenWithNoInlinedConstants2.kt")
    public void testIntegralWhenWithNoInlinedConstants2() {
      runTest("compiler/testData/codegen/box/when/integralWhenWithNoInlinedConstants2.kt");
    }

    @TestMetadata("is.kt")
    public void testIs() {
      runTest("compiler/testData/codegen/box/when/is.kt");
    }

    @TestMetadata("kt2457.kt")
    public void testKt2457() {
      runTest("compiler/testData/codegen/box/when/kt2457.kt");
    }

    @TestMetadata("kt2466.kt")
    public void testKt2466() {
      runTest("compiler/testData/codegen/box/when/kt2466.kt");
    }

    @TestMetadata("kt43242.kt")
    public void testKt43242() {
      runTest("compiler/testData/codegen/box/when/kt43242.kt");
    }

    @TestMetadata("kt45081.kt")
    public void testKt45081() {
      runTest("compiler/testData/codegen/box/when/kt45081.kt");
    }

    @TestMetadata("kt47365.kt")
    public void testKt47365() {
      runTest("compiler/testData/codegen/box/when/kt47365.kt");
    }

    @TestMetadata("kt47475.kt")
    public void testKt47475() {
      runTest("compiler/testData/codegen/box/when/kt47475.kt");
    }

    @TestMetadata("kt5307.kt")
    public void testKt5307() {
      runTest("compiler/testData/codegen/box/when/kt5307.kt");
    }

    @TestMetadata("kt5448.kt")
    public void testKt5448() {
      runTest("compiler/testData/codegen/box/when/kt5448.kt");
    }

    @TestMetadata("kt55993.kt")
    public void testKt55993() {
      runTest("compiler/testData/codegen/box/when/kt55993.kt");
    }

    @TestMetadata("kt59346.kt")
    public void testKt59346() {
      runTest("compiler/testData/codegen/box/when/kt59346.kt");
    }

    @TestMetadata("kt60212.kt")
    public void testKt60212() {
      runTest("compiler/testData/codegen/box/when/kt60212.kt");
    }

    @TestMetadata("longCondition.kt")
    public void testLongCondition() {
      runTest("compiler/testData/codegen/box/when/longCondition.kt");
    }

    @TestMetadata("longInRange.kt")
    public void testLongInRange() {
      runTest("compiler/testData/codegen/box/when/longInRange.kt");
    }

    @TestMetadata("matchNotNullAgainstNullable.kt")
    public void testMatchNotNullAgainstNullable() {
      runTest("compiler/testData/codegen/box/when/matchNotNullAgainstNullable.kt");
    }

    @TestMetadata("multipleEntries.kt")
    public void testMultipleEntries() {
      runTest("compiler/testData/codegen/box/when/multipleEntries.kt");
    }

    @TestMetadata("noElseCoerceToUnit.kt")
    public void testNoElseCoerceToUnit() {
      runTest("compiler/testData/codegen/box/when/noElseCoerceToUnit.kt");
    }

    @TestMetadata("noElseExhaustive.kt")
    public void testNoElseExhaustive() {
      runTest("compiler/testData/codegen/box/when/noElseExhaustive.kt");
    }

    @TestMetadata("noElseExhaustiveStatement.kt")
    public void testNoElseExhaustiveStatement() {
      runTest("compiler/testData/codegen/box/when/noElseExhaustiveStatement.kt");
    }

    @TestMetadata("noElseExhaustiveUnitExpected.kt")
    public void testNoElseExhaustiveUnitExpected() {
      runTest("compiler/testData/codegen/box/when/noElseExhaustiveUnitExpected.kt");
    }

    @TestMetadata("noElseInStatement.kt")
    public void testNoElseInStatement() {
      runTest("compiler/testData/codegen/box/when/noElseInStatement.kt");
    }

    @TestMetadata("noElseNoMatch.kt")
    public void testNoElseNoMatch() {
      runTest("compiler/testData/codegen/box/when/noElseNoMatch.kt");
    }

    @TestMetadata("nothingTyped.kt")
    public void testNothingTyped() {
      runTest("compiler/testData/codegen/box/when/nothingTyped.kt");
    }

    @TestMetadata("nullableWhen.kt")
    public void testNullableWhen() {
      runTest("compiler/testData/codegen/box/when/nullableWhen.kt");
    }

    @TestMetadata("oneUnitBranch.kt")
    public void testOneUnitBranch() {
      runTest("compiler/testData/codegen/box/when/oneUnitBranch.kt");
    }

    @TestMetadata("range.kt")
    public void testRange() {
      runTest("compiler/testData/codegen/box/when/range.kt");
    }

    @TestMetadata("sealedWhenInitialization.kt")
    public void testSealedWhenInitialization() {
      runTest("compiler/testData/codegen/box/when/sealedWhenInitialization.kt");
    }

    @TestMetadata("switchBreakNoLabel.kt")
    public void testSwitchBreakNoLabel() {
      runTest("compiler/testData/codegen/box/when/switchBreakNoLabel.kt");
    }

    @TestMetadata("switchOptimizationDense.kt")
    public void testSwitchOptimizationDense() {
      runTest("compiler/testData/codegen/box/when/switchOptimizationDense.kt");
    }

    @TestMetadata("switchOptimizationDuplicates.kt")
    public void testSwitchOptimizationDuplicates() {
      runTest("compiler/testData/codegen/box/when/switchOptimizationDuplicates.kt");
    }

    @TestMetadata("switchOptimizationMultipleConditions.kt")
    public void testSwitchOptimizationMultipleConditions() {
      runTest("compiler/testData/codegen/box/when/switchOptimizationMultipleConditions.kt");
    }

    @TestMetadata("switchOptimizationMultipleMixedConditions.kt")
    public void testSwitchOptimizationMultipleMixedConditions() {
      runTest("compiler/testData/codegen/box/when/switchOptimizationMultipleMixedConditions.kt");
    }

    @TestMetadata("switchOptimizationSingleStatementCase.kt")
    public void testSwitchOptimizationSingleStatementCase() {
      runTest("compiler/testData/codegen/box/when/switchOptimizationSingleStatementCase.kt");
    }

    @TestMetadata("switchOptimizationSparse.kt")
    public void testSwitchOptimizationSparse() {
      runTest("compiler/testData/codegen/box/when/switchOptimizationSparse.kt");
    }

    @TestMetadata("switchOptimizationStatement.kt")
    public void testSwitchOptimizationStatement() {
      runTest("compiler/testData/codegen/box/when/switchOptimizationStatement.kt");
    }

    @TestMetadata("switchOptimizationTypes.kt")
    public void testSwitchOptimizationTypes() {
      runTest("compiler/testData/codegen/box/when/switchOptimizationTypes.kt");
    }

    @TestMetadata("switchOptimizationUnordered.kt")
    public void testSwitchOptimizationUnordered() {
      runTest("compiler/testData/codegen/box/when/switchOptimizationUnordered.kt");
    }

    @TestMetadata("switchOptimizationWithGap.kt")
    public void testSwitchOptimizationWithGap() {
      runTest("compiler/testData/codegen/box/when/switchOptimizationWithGap.kt");
    }

    @TestMetadata("typeDisjunction.kt")
    public void testTypeDisjunction() {
      runTest("compiler/testData/codegen/box/when/typeDisjunction.kt");
    }

    @TestMetadata("whenArgumentIsEvaluatedOnlyOnce.kt")
    public void testWhenArgumentIsEvaluatedOnlyOnce() {
      runTest("compiler/testData/codegen/box/when/whenArgumentIsEvaluatedOnlyOnce.kt");
    }

    @TestMetadata("whenSafeCallSubjectEvaluatedOnce.kt")
    public void testWhenSafeCallSubjectEvaluatedOnce() {
      runTest("compiler/testData/codegen/box/when/whenSafeCallSubjectEvaluatedOnce.kt");
    }

    @TestMetadata("compiler/testData/codegen/box/when/enumOptimization")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class EnumOptimization extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInEnumOptimization() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/when/enumOptimization"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("bigEnum.kt")
      public void testBigEnum() {
        runTest("compiler/testData/codegen/box/when/enumOptimization/bigEnum.kt");
      }

      @TestMetadata("differentEnumClasses.kt")
      public void testDifferentEnumClasses() {
        runTest("compiler/testData/codegen/box/when/enumOptimization/differentEnumClasses.kt");
      }

      @TestMetadata("differentEnumClasses2.kt")
      public void testDifferentEnumClasses2() {
        runTest("compiler/testData/codegen/box/when/enumOptimization/differentEnumClasses2.kt");
      }

      @TestMetadata("duplicatingItems.kt")
      public void testDuplicatingItems() {
        runTest("compiler/testData/codegen/box/when/enumOptimization/duplicatingItems.kt");
      }

      @TestMetadata("enumInsideClassObject.kt")
      public void testEnumInsideClassObject() {
        runTest("compiler/testData/codegen/box/when/enumOptimization/enumInsideClassObject.kt");
      }

      @TestMetadata("expression.kt")
      public void testExpression() {
        runTest("compiler/testData/codegen/box/when/enumOptimization/expression.kt");
      }

      @TestMetadata("functionLiteralInTopLevel.kt")
      public void testFunctionLiteralInTopLevel() {
        runTest("compiler/testData/codegen/box/when/enumOptimization/functionLiteralInTopLevel.kt");
      }

      @TestMetadata("kt14597.kt")
      public void testKt14597() {
        runTest("compiler/testData/codegen/box/when/enumOptimization/kt14597.kt");
      }

      @TestMetadata("kt14597_full.kt")
      public void testKt14597_full() {
        runTest("compiler/testData/codegen/box/when/enumOptimization/kt14597_full.kt");
      }

      @TestMetadata("kt14802.kt")
      public void testKt14802() {
        runTest("compiler/testData/codegen/box/when/enumOptimization/kt14802.kt");
      }

      @TestMetadata("kt15806.kt")
      public void testKt15806() {
        runTest("compiler/testData/codegen/box/when/enumOptimization/kt15806.kt");
      }

      @TestMetadata("kt50258.kt")
      public void testKt50258() {
        runTest("compiler/testData/codegen/box/when/enumOptimization/kt50258.kt");
      }

      @TestMetadata("manyWhensWithinClass.kt")
      public void testManyWhensWithinClass() {
        runTest("compiler/testData/codegen/box/when/enumOptimization/manyWhensWithinClass.kt");
      }

      @TestMetadata("nestedWhenInCondition.kt")
      public void testNestedWhenInCondition() {
        runTest("compiler/testData/codegen/box/when/enumOptimization/nestedWhenInCondition.kt");
      }

      @TestMetadata("nestedWhenInResult.kt")
      public void testNestedWhenInResult() {
        runTest("compiler/testData/codegen/box/when/enumOptimization/nestedWhenInResult.kt");
      }

      @TestMetadata("nonConstantEnum.kt")
      public void testNonConstantEnum() {
        runTest("compiler/testData/codegen/box/when/enumOptimization/nonConstantEnum.kt");
      }

      @TestMetadata("notAllConditionsAreEqEqExceptElse.kt")
      public void testNotAllConditionsAreEqEqExceptElse() {
        runTest("compiler/testData/codegen/box/when/enumOptimization/notAllConditionsAreEqEqExceptElse.kt");
      }

      @TestMetadata("notAllEntriesAreConstants.kt")
      public void testNotAllEntriesAreConstants() {
        runTest("compiler/testData/codegen/box/when/enumOptimization/notAllEntriesAreConstants.kt");
      }

      @TestMetadata("nullIsTheFirstEntry.kt")
      public void testNullIsTheFirstEntry() {
        runTest("compiler/testData/codegen/box/when/enumOptimization/nullIsTheFirstEntry.kt");
      }

      @TestMetadata("nullability.kt")
      public void testNullability() {
        runTest("compiler/testData/codegen/box/when/enumOptimization/nullability.kt");
      }

      @TestMetadata("nullableEnum.kt")
      public void testNullableEnum() {
        runTest("compiler/testData/codegen/box/when/enumOptimization/nullableEnum.kt");
      }

      @TestMetadata("subjectAny.kt")
      public void testSubjectAny() {
        runTest("compiler/testData/codegen/box/when/enumOptimization/subjectAny.kt");
      }

      @TestMetadata("withoutElse.kt")
      public void testWithoutElse() {
        runTest("compiler/testData/codegen/box/when/enumOptimization/withoutElse.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/when/guard")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Guard extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInGuard() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/when/guard"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("whenWithGuard.kt")
      public void testWhenWithGuard() {
        runTest("compiler/testData/codegen/box/when/guard/whenWithGuard.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/when/stringOptimization")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class StringOptimization extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInStringOptimization() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/when/stringOptimization"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("duplicatingItems.kt")
      public void testDuplicatingItems() {
        runTest("compiler/testData/codegen/box/when/stringOptimization/duplicatingItems.kt");
      }

      @TestMetadata("duplicatingItemsSameHashCode.kt")
      public void testDuplicatingItemsSameHashCode() {
        runTest("compiler/testData/codegen/box/when/stringOptimization/duplicatingItemsSameHashCode.kt");
      }

      @TestMetadata("duplicatingItemsSameHashCode2.kt")
      public void testDuplicatingItemsSameHashCode2() {
        runTest("compiler/testData/codegen/box/when/stringOptimization/duplicatingItemsSameHashCode2.kt");
      }

      @TestMetadata("duplicatingItemsSameHashCode3.kt")
      public void testDuplicatingItemsSameHashCode3() {
        runTest("compiler/testData/codegen/box/when/stringOptimization/duplicatingItemsSameHashCode3.kt");
      }

      @TestMetadata("enhancedNullability.kt")
      public void testEnhancedNullability() {
        runTest("compiler/testData/codegen/box/when/stringOptimization/enhancedNullability.kt");
      }

      @TestMetadata("expression.kt")
      public void testExpression() {
        runTest("compiler/testData/codegen/box/when/stringOptimization/expression.kt");
      }

      @TestMetadata("flexibleNullability.kt")
      public void testFlexibleNullability() {
        runTest("compiler/testData/codegen/box/when/stringOptimization/flexibleNullability.kt");
      }

      @TestMetadata("nullability.kt")
      public void testNullability() {
        runTest("compiler/testData/codegen/box/when/stringOptimization/nullability.kt");
      }

      @TestMetadata("sameHashCode.kt")
      public void testSameHashCode() {
        runTest("compiler/testData/codegen/box/when/stringOptimization/sameHashCode.kt");
      }

      @TestMetadata("statement.kt")
      public void testStatement() {
        runTest("compiler/testData/codegen/box/when/stringOptimization/statement.kt");
      }

      @TestMetadata("temporaryVarInWhenByStringIsDisposedProperly.kt")
      public void testTemporaryVarInWhenByStringIsDisposedProperly() {
        runTest("compiler/testData/codegen/box/when/stringOptimization/temporaryVarInWhenByStringIsDisposedProperly.kt");
      }
    }

    @TestMetadata("compiler/testData/codegen/box/when/whenSubjectVariable")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class WhenSubjectVariable extends AbstractLightAnalysisModeTest {
      private void runTest(String testDataFilePath) {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
      }

      public void testAllFilesPresentInWhenSubjectVariable() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/when/whenSubjectVariable"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @TestMetadata("captureSubjectVariable.kt")
      public void testCaptureSubjectVariable() {
        runTest("compiler/testData/codegen/box/when/whenSubjectVariable/captureSubjectVariable.kt");
      }

      @TestMetadata("denseIntSwitchWithSubjectVariable.kt")
      public void testDenseIntSwitchWithSubjectVariable() {
        runTest("compiler/testData/codegen/box/when/whenSubjectVariable/denseIntSwitchWithSubjectVariable.kt");
      }

      @TestMetadata("equalityWithSubjectVariable.kt")
      public void testEqualityWithSubjectVariable() {
        runTest("compiler/testData/codegen/box/when/whenSubjectVariable/equalityWithSubjectVariable.kt");
      }

      @TestMetadata("ieee754Equality.kt")
      public void testIeee754Equality() {
        runTest("compiler/testData/codegen/box/when/whenSubjectVariable/ieee754Equality.kt");
      }

      @TestMetadata("ieee754EqualityWithSmartCast.kt")
      public void testIeee754EqualityWithSmartCast() {
        runTest("compiler/testData/codegen/box/when/whenSubjectVariable/ieee754EqualityWithSmartCast.kt");
      }

      @TestMetadata("isCheckOnSubjectVariable.kt")
      public void testIsCheckOnSubjectVariable() {
        runTest("compiler/testData/codegen/box/when/whenSubjectVariable/isCheckOnSubjectVariable.kt");
      }

      @TestMetadata("kt27161.kt")
      public void testKt27161() {
        runTest("compiler/testData/codegen/box/when/whenSubjectVariable/kt27161.kt");
      }

      @TestMetadata("kt27161_int.kt")
      public void testKt27161_int() {
        runTest("compiler/testData/codegen/box/when/whenSubjectVariable/kt27161_int.kt");
      }

      @TestMetadata("kt27161_nested.kt")
      public void testKt27161_nested() {
        runTest("compiler/testData/codegen/box/when/whenSubjectVariable/kt27161_nested.kt");
      }

      @TestMetadata("kt27161_nested2.kt")
      public void testKt27161_nested2() {
        runTest("compiler/testData/codegen/box/when/whenSubjectVariable/kt27161_nested2.kt");
      }

      @TestMetadata("kt27161_string.kt")
      public void testKt27161_string() {
        runTest("compiler/testData/codegen/box/when/whenSubjectVariable/kt27161_string.kt");
      }

      @TestMetadata("kt33641_inlineClass.kt")
      public void testKt33641_inlineClass() {
        runTest("compiler/testData/codegen/box/when/whenSubjectVariable/kt33641_inlineClass.kt");
      }

      @TestMetadata("rangeCheckOnSubjectVariable.kt")
      public void testRangeCheckOnSubjectVariable() {
        runTest("compiler/testData/codegen/box/when/whenSubjectVariable/rangeCheckOnSubjectVariable.kt");
      }

      @TestMetadata("sparseIntSwitchWithSubjectVariable.kt")
      public void testSparseIntSwitchWithSubjectVariable() {
        runTest("compiler/testData/codegen/box/when/whenSubjectVariable/sparseIntSwitchWithSubjectVariable.kt");
      }

      @TestMetadata("subjectExpressionIsEvaluatedOnce.kt")
      public void testSubjectExpressionIsEvaluatedOnce() {
        runTest("compiler/testData/codegen/box/when/whenSubjectVariable/subjectExpressionIsEvaluatedOnce.kt");
      }

      @TestMetadata("whenByEnum.kt")
      public void testWhenByEnum() {
        runTest("compiler/testData/codegen/box/when/whenSubjectVariable/whenByEnum.kt");
      }

      @TestMetadata("whenByNullableEnum.kt")
      public void testWhenByNullableEnum() {
        runTest("compiler/testData/codegen/box/when/whenSubjectVariable/whenByNullableEnum.kt");
      }

      @TestMetadata("whenByString.kt")
      public void testWhenByString() {
        runTest("compiler/testData/codegen/box/when/whenSubjectVariable/whenByString.kt");
      }
    }
  }
}
