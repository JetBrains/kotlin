FILE /reflectionLiterals.kt
  CLASS CLASS A
    $this: VALUE_PARAMETER this@A: A
    CONSTRUCTOR public constructor A()
      BLOCK_BODY
        DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
        INSTANCE_INITIALIZER_CALL classDescriptor='A'
    FUN public final fun foo(): kotlin.Unit
      $this: VALUE_PARAMETER this@A: A
      BLOCK_BODY
    FUN FAKE_OVERRIDE public open override fun equals(other: kotlin.Any?): kotlin.Boolean
      $this: VALUE_PARAMETER this@Any: Any
      VALUE_PARAMETER value-parameter other: kotlin.Any?
    FUN FAKE_OVERRIDE public open override fun hashCode(): kotlin.Int
      $this: VALUE_PARAMETER this@Any: Any
    FUN FAKE_OVERRIDE public open override fun toString(): kotlin.String
      $this: VALUE_PARAMETER this@Any: Any
  FUN public fun bar(): kotlin.Unit
    BLOCK_BODY
  PROPERTY public val qux: kotlin.Int = 42
    FIELD PROPERTY_BACKING_FIELD public val qux: kotlin.Int = 42
      EXPRESSION_BODY
        CONST Int type=kotlin.Int value='42'
    FUN DEFAULT_PROPERTY_ACCESSOR public fun <get-qux>(): kotlin.Int
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='<get-qux>(): Int'
          GET_FIELD 'qux: Int' type=kotlin.Int origin=null
  PROPERTY public val test1: kotlin.reflect.KClass<A>
    FIELD PROPERTY_BACKING_FIELD public val test1: kotlin.reflect.KClass<A>
      EXPRESSION_BODY
        CLASS_REFERENCE 'A' type=kotlin.reflect.KClass<A>
    FUN DEFAULT_PROPERTY_ACCESSOR public fun <get-test1>(): kotlin.reflect.KClass<A>
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='<get-test1>(): KClass<A>'
          GET_FIELD 'test1: KClass<A>' type=kotlin.reflect.KClass<A> origin=null
  PROPERTY public val test2: kotlin.reflect.KClass<out kotlin.Int>
    FIELD PROPERTY_BACKING_FIELD public val test2: kotlin.reflect.KClass<out kotlin.Int>
      EXPRESSION_BODY
        GET_CLASS type=kotlin.reflect.KClass<out kotlin.Int>
          CALL '<get-qux>(): Int' type=kotlin.Int origin=GET_PROPERTY
    FUN DEFAULT_PROPERTY_ACCESSOR public fun <get-test2>(): kotlin.reflect.KClass<out kotlin.Int>
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='<get-test2>(): KClass<out Int>'
          GET_FIELD 'test2: KClass<out Int>' type=kotlin.reflect.KClass<out kotlin.Int> origin=null
  PROPERTY public val test3: kotlin.reflect.KFunction1<A, kotlin.Unit>
    FIELD PROPERTY_BACKING_FIELD public val test3: kotlin.reflect.KFunction1<A, kotlin.Unit>
      EXPRESSION_BODY
        FUNCTION_REFERENCE 'foo(): Unit' type=kotlin.reflect.KFunction1<A, kotlin.Unit> origin=null
    FUN DEFAULT_PROPERTY_ACCESSOR public fun <get-test3>(): kotlin.reflect.KFunction1<A, kotlin.Unit>
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='<get-test3>(): KFunction1<A, Unit>'
          GET_FIELD 'test3: KFunction1<A, Unit>' type=kotlin.reflect.KFunction1<A, kotlin.Unit> origin=null
  PROPERTY public val test4: kotlin.reflect.KFunction0<A>
    FIELD PROPERTY_BACKING_FIELD public val test4: kotlin.reflect.KFunction0<A>
      EXPRESSION_BODY
        FUNCTION_REFERENCE 'constructor A()' type=kotlin.reflect.KFunction0<A> origin=null
    FUN DEFAULT_PROPERTY_ACCESSOR public fun <get-test4>(): kotlin.reflect.KFunction0<A>
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='<get-test4>(): KFunction0<A>'
          GET_FIELD 'test4: KFunction0<A>' type=kotlin.reflect.KFunction0<A> origin=null
  PROPERTY public val test5: kotlin.reflect.KFunction0<kotlin.Unit>
    FIELD PROPERTY_BACKING_FIELD public val test5: kotlin.reflect.KFunction0<kotlin.Unit>
      EXPRESSION_BODY
        FUNCTION_REFERENCE 'foo(): Unit' type=kotlin.reflect.KFunction0<kotlin.Unit> origin=null
          $this: CALL 'constructor A()' type=A origin=null
    FUN DEFAULT_PROPERTY_ACCESSOR public fun <get-test5>(): kotlin.reflect.KFunction0<kotlin.Unit>
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='<get-test5>(): KFunction0<Unit>'
          GET_FIELD 'test5: KFunction0<Unit>' type=kotlin.reflect.KFunction0<kotlin.Unit> origin=null
  PROPERTY public val test6: kotlin.reflect.KFunction0<kotlin.Unit>
    FIELD PROPERTY_BACKING_FIELD public val test6: kotlin.reflect.KFunction0<kotlin.Unit>
      EXPRESSION_BODY
        FUNCTION_REFERENCE 'bar(): Unit' type=kotlin.reflect.KFunction0<kotlin.Unit> origin=null
    FUN DEFAULT_PROPERTY_ACCESSOR public fun <get-test6>(): kotlin.reflect.KFunction0<kotlin.Unit>
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='<get-test6>(): KFunction0<Unit>'
          GET_FIELD 'test6: KFunction0<Unit>' type=kotlin.reflect.KFunction0<kotlin.Unit> origin=null
  PROPERTY public val test7: kotlin.reflect.KProperty0<kotlin.Int>
    FIELD PROPERTY_BACKING_FIELD public val test7: kotlin.reflect.KProperty0<kotlin.Int>
      EXPRESSION_BODY
        PROPERTY_REFERENCE 'qux: Int' field=null getter='<get-qux>(): Int' setter=null type=kotlin.reflect.KProperty0<kotlin.Int> origin=null
    FUN DEFAULT_PROPERTY_ACCESSOR public fun <get-test7>(): kotlin.reflect.KProperty0<kotlin.Int>
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='<get-test7>(): KProperty0<Int>'
          GET_FIELD 'test7: KProperty0<Int>' type=kotlin.reflect.KProperty0<kotlin.Int> origin=null

