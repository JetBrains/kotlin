class LockFreeQueue {
  private var head$volatile: Any?
    field = Node(value = 0)
    private get(): Any? {
      return <this>.#head$volatile
    }
    private set(value: Any?) {
      return <this>.#head$volatile = value
    }

  private var tail$volatile: Any?
    field = atomicGetField<Any?>(/* <this> = LockFreeQueue<this>::head$volatile */) as Any?
    private get(): Any? {
      return <this>.#tail$volatile
    }
    private set(value: Any?) {
      return <this>.#tail$volatile = value
    }

  private class Node {
    val value: Int
      field = value
      get

    var next$volatile: Any?
      field = null
      get(): Any? {
        return <this>.#next$volatile
      }
      set(value: Any?) {
        return <this>.#next$volatile = value
      }

    constructor(value: Int) /* primary */ {
      super/*Any*/()
      /* <init>() */

    }

  }

  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  private inline fun loop$atomicfu$NATIVE_PROPERTY_REF$Any(crossinline handler$atomicfu: Function0<KMutableProperty0<Any?>>, action$atomicfu: Function1<Any?, Unit>) {
    while (true) { // BLOCK
      val tmp_0: T = atomicGetField<Any?>(/* <this> = handler$atomicfu.invoke() */)
      action$atomicfu.invoke(p1 = tmp_0)
    }
  }

  fun dequeue(): Int {
    <this>.loop$atomicfu$NATIVE_PROPERTY_REF$Any(handler$atomicfu = local inline fun <head$volatile-getter>(): Any? {
      return LockFreeQueue<this>::head$volatile
    }
, action$atomicfu = local fun <anonymous>(curHead: Node) {
      val next: Node = { // BLOCK
        val tmp_1: Node? = atomicGetField<Any?>(/* <this> = NodecurHead::next$volatile */) as Any?
        when {
          EQEQ(arg0 = tmp_1, arg1 = null) -> return -1
          else -> tmp_1
        }
      }
      when {
        compareAndSetField<Any?>(/* <this> = LockFreeQueue<this>::head$volatile, */ expectedValue = curHead, newValue = next) -> return next.<get-value>()
      }
    }
)
  }

  fun enqueue(value: Int) {
    val node: Node = Node(value = value)
    <this>.loop$atomicfu$NATIVE_PROPERTY_REF$Any(handler$atomicfu = local inline fun <tail$volatile-getter>(): Any? {
      return LockFreeQueue<this>::tail$volatile
    }
, action$atomicfu = local fun <anonymous>(curTail: Node) {
      val curNext: Node? = atomicGetField<Any?>(/* <this> = NodecurTail::next$volatile */) as Any?
      when {
        EQEQ(arg0 = curNext, arg1 = null).not() -> { // BLOCK
          compareAndSetField<Any?>(/* <this> = LockFreeQueue<this>::tail$volatile, */ expectedValue = curTail, newValue = curNext) /*~> Unit */
          return Unit
        }
      }
      when {
        compareAndSetField<Any?>(/* <this> = NodecurTail::next$volatile, */ expectedValue = null, newValue = node) -> { // BLOCK
          compareAndSetField<Any?>(/* <this> = LockFreeQueue<this>::tail$volatile, */ expectedValue = curTail, newValue = node) /*~> Unit */
          return Unit
        }
      }
    }
)
  }

}

class LockFreeQueueTest {
  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  fun testBasic() {
    val q: LockFreeQueue = LockFreeQueue()
    assertEquals<Int>(expected = -1, actual = q.dequeue())
    q.enqueue(value = 42)
    assertEquals<Int>(expected = 42, actual = q.dequeue())
    assertEquals<Int>(expected = -1, actual = q.dequeue())
    q.enqueue(value = 1)
    q.enqueue(value = 2)
    assertEquals<Int>(expected = 1, actual = q.dequeue())
    assertEquals<Int>(expected = 2, actual = q.dequeue())
    assertEquals<Int>(expected = -1, actual = q.dequeue())
  }

}

fun box(): String {
  val testClass: LockFreeQueueTest = LockFreeQueueTest()
  testClass.testBasic()
  return "OK"
}
