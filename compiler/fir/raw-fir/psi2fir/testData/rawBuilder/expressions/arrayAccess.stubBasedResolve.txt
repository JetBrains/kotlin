FILE: [ResolvedTo(ANNOTATION_ARGUMENTS)] arrayAccess.kt
    public final [ResolvedTo(CONTRACTS)] val p: <implicit> = LAZY_EXPRESSION
        public [ResolvedTo(CONTRACTS)] get(): <implicit>
    public final [ResolvedTo(CONTRACTS)] fun foo(): <implicit> { LAZY_BLOCK }
    public final [ResolvedTo(BODY_RESOLVE)] class Wrapper : R|kotlin/Any| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Wrapper] constructor([ResolvedTo(BODY_RESOLVE)] [CorrespondingProperty=/Wrapper.v] v: R|kotlin/IntArray|): R|Wrapper| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(BODY_RESOLVE)] [IsFromPrimaryConstructor=true] val v: R|kotlin/IntArray| = R|<local>/v|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Wrapper] get(): R|kotlin/IntArray|

    }
    public final [ResolvedTo(CONTRACTS)] fun test([ResolvedTo(CONTRACTS)] a: R|kotlin/IntArray|, [ResolvedTo(CONTRACTS)] w: R|Wrapper|): <implicit> { LAZY_BLOCK }
