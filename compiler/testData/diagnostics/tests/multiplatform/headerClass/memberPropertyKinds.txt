package

public object Delegate {
    private constructor Delegate()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final operator fun getValue(/*0*/ x: kotlin.Any?, /*1*/ y: kotlin.Any?): kotlin.String
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public final expect class Foo {
    public expect final val backingFieldVal: kotlin.String = "no"
    public expect final var backingFieldVar: kotlin.String
    public expect final val customAccessorVal: kotlin.String
    public expect final var customAccessorVar: kotlin.String
    public expect final val delegated: kotlin.String
    public expect final val justVal: kotlin.String
    public expect final var justVar: kotlin.String
    public expect final lateinit var lateinitVar: kotlin.String
    public expect final val valWithGet: kotlin.String
    public expect final var varWithGetSet: kotlin.String
    public expect final val kotlin.String.extensionVal: kotlin.Unit
    public expect final var </*0*/ T> T.genericExtensionVar: T
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}
