open annotation class TestAnnotationClass : Annotation {
  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

}

class TestClass {
  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

}

enum class TestEnumClass : Enum<TestEnumClass> {
  private constructor() /* primary */ {
    super/*Enum*/<TestEnumClass>()
    /* <init>() */

  }

  fun valueOf(value: String): TestEnumClass /* Synthetic body for ENUM_VALUEOF */

  fun values(): Array<TestEnumClass> /* Synthetic body for ENUM_VALUES */

  val entries: EnumEntries<TestEnumClass>
    get(): EnumEntries<TestEnumClass> /* Synthetic body for ENUM_ENTRIES */

}

interface TestInterface {
}

object TestObject {
  private constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

}

