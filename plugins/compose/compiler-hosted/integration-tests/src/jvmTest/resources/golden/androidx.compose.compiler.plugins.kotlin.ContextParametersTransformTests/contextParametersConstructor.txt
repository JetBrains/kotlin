//
// Source
// ------------------------------------------

import androidx.compose.runtime.Composable

@JvmInline
context(huh: String)
value class Test(val v: Int)

@Composable fun Content(t: Test) {
    Content(t)
}

//
// Transformed IR
// ------------------------------------------

@JvmInline
class Test(huh: String, val v: Int) {
  private val contextReceiverField0: String
  override fun toString(): String {
    return "Test(v=%{<this>.v})"
  }
  override fun hashCode(): Int {
    return <this>.v.hashCode()
  }
  override fun equals(other: Any?): Boolean {
    when {
      other -> {
        return false
      }
    }
    val tmp0_other_with_cast = other
    when {
      <this>.v != tmp0_other_with_cast.v -> {
        return false
      }
    }
    return true
  }
}
@Composable
fun Content(t: Test, %composer: Composer?, %changed: Int) {
  %composer = %composer.startRestartGroup(<>)
  sourceInformation(%composer, "C(Content)N(t:Test)<Conten...>:Test.kt")
  val %dirty = %changed
  if (%changed and 0b0110 == 0) {
    %dirty = %dirty or if (%composer.changed(<unsafe-coerce>(t))) 0b0100 else 0b0010
  }
  if (%composer.shouldExecute(%dirty and 0b0011 != 0b0010, %dirty and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(<>, %dirty, -1, <>)
    }
    Content(t, %composer, 0b1110 and %dirty)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    %composer.skipToGroupEnd()
  }
  %composer.endRestartGroup()?.updateScope { %composer: Composer?, %force: Int ->
    Content(t, %composer, updateChangedFlags(%changed or 0b0001))
  }
}
