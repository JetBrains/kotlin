import java.time.LocalDateTime
import java.time.ZoneId
import java.util.concurrent.TimeUnit

plugins {
    id "org.jetbrains.kotlin.js"
}

String nodeJsVersion
String nodeJsLocation

tasks.create("checkDownloadedFolder") {
    description = "updated last modified date for downloaded folder"
    dependsOn "build"
    doLast {
        println("check downloaded folder existance")
        def downloadedFolder = new File(project.gradle.gradleUserHomeDir, nodeJsLocation)
        if (!downloadedFolder.exists() || !downloadedFolder.isDirectory()) {
            throw new InvalidUserDataException("Downloaded folder was not found")
        }
        println("try to update lastModifiedDate")
        println(downloadedFolder.lastModified())
        def successUpdated = downloadedFolder.setLastModified(LocalDateTime.now().minusDays(35).atZone(ZoneId.systemDefault()).toInstant().toEpochMilli())
        println(downloadedFolder.lastModified())
        if (!successUpdated) {
            throw new InvalidUserDataException("Unable to update last modified date")
        }
    }
}

tasks.create("checkIfLastModifiedNotNow") {
    description = "check if last modified is not current date now"
    dependsOn "build"
    doLast {
        println("check downloaded folder existance")
        def downloadedFolder = new File(project.gradle.gradleUserHomeDir, nodeJsLocation)
        if (!downloadedFolder.exists() || !downloadedFolder.isDirectory()) {
            throw new InvalidUserDataException("Downloaded folder was not found")
        }

        def now = LocalDateTime.now().atZone(ZoneId.systemDefault()).toInstant().toEpochMilli()

        def lastModified = downloadedFolder.lastModified()
        def lastModified1 = lastModified + TimeUnit.DAYS.toMillis(1);
        def lastModified2 = lastModified - TimeUnit.DAYS.toMillis(1);

        if (now < lastModified1 || now < lastModified2) {
            throw new InvalidUserDataException("Last modified date was updated")
        }
    }
}

tasks.create("testCleanTask") {
    description = "check clean task behaviour"
    doLast {
        println("check deletion of downloaded folder")
        def downloadedFolder = new File(project.gradle.gradleUserHomeDir, nodeJsLocation)
        if (downloadedFolder.exists()) {
            throw new InvalidUserDataException("Folder was not deleted")
        }
    }
}

repositories {
    mavenLocal()
    mavenCentral()
}

class NodeJsPlatform {
    def props = System.getProperties()
    String property(String name) {
        return props.getProperty(name) ?: System.getProperty(name)
    }

    def WIN = "win"
    def DARWIN = "darwin"
    def LINUX = "linux"
    def SUNOS = "sunos"

    String name = {
        def name = property("os.name").toLowerCase()
        if (name.contains("windows")) {
            return WIN
        }

        if (name.contains("mac")) {
            return DARWIN
        }

        if (name.contains("linux")) {
            return LINUX
        }

        if (name.contains("sunos")) {
            return SUNOS
        }

        throw new IllegalArgumentException("Unsupported OS: $name")
    }()

    def X64 = "x64"
    def X86 = "x86"
    def ARM64 = "arm64"

    String architecture = {
        def arch = property("os.arch").toLowerCase()
        if (arch == "aarch64") {
            return ARM64
        }
        if (arch.contains("64")) {
            return X64
        }
        if (arch == "arm") {
            // as Java just returns "arm" on all ARM variants, we need a system call to determine the exact arch
            // the node binaries for 'armv8l' are called 'arm64', so we need to distinguish here
            def process = Runtime.getRuntime().exec("uname -m")
            def is = process.getInputStream()
            String systemArch = null
            is.eachLine {
                systemArch = it
            }

            if (systemArch.trim() == "armv8l") {
                return ARM64
            } else {
                return systemArch
            }
        }

        return X86
    }()
}

afterEvaluate {
    project.kotlinNodeJs.nodeVersion = "18.19.1"

    project.tasks.nodeKotlinClean.dependsOn(checkDownloadedFolder)
    project.tasks.testCleanTask.dependsOn(nodeKotlinClean)

    nodeJsVersion = project.extensions.getByName("kotlinNodeJs").nodeVersion
    println("Node js version: $nodeJsVersion")

    def nodeJsPlatform = new NodeJsPlatform()

    String platform = nodeJsPlatform.name
    String architecture = nodeJsPlatform.architecture

    nodeJsLocation = "/nodejs/node-v$nodeJsVersion-$platform-$architecture"
    println("Use $nodeJsLocation location")
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-js"
}

kotlin.target.browser {}