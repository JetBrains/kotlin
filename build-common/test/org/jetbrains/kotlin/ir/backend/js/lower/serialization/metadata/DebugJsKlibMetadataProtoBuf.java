// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: compiler/ir/backend.js/src/js.debug.proto

package org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata;

public final class DebugJsKlibMetadataProtoBuf {
  private DebugJsKlibMetadataProtoBuf() {}
  public static void registerAllExtensions(
      org.jetbrains.kotlin.protobuf.ExtensionRegistry registry) {
    registry.add(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.packageFqName);
    registry.add(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.classAnnotation);
    registry.add(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.classContainingFileId);
    registry.add(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.classUniqId);
    registry.add(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.constructorAnnotation);
    registry.add(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.constructorUniqId);
    registry.add(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.functionAnnotation);
    registry.add(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.functionContainingFileId);
    registry.add(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.functionUniqId);
    registry.add(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.propertyAnnotation);
    registry.add(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.propertyGetterAnnotation);
    registry.add(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.propertySetterAnnotation);
    registry.add(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.compileTimeValue);
    registry.add(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.propertyContainingFileId);
    registry.add(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.propertyUniqId);
    registry.add(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.enumEntryAnnotation);
    registry.add(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.enumEntryUniqId);
    registry.add(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.parameterAnnotation);
    registry.add(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.valueParamUniqId);
    registry.add(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.typeAnnotation);
    registry.add(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.typeParameterAnnotation);
    registry.add(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.typeParamUniqId);
    registry.add(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.packageFragmentFiles);
  }
  public interface HeaderOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Header)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>optional int32 flags = 1;</code>
     *
     * <pre>
     *preRelease
     * </pre>
     */
    boolean hasFlags();
    /**
     * <code>optional int32 flags = 1;</code>
     *
     * <pre>
     *preRelease
     * </pre>
     */
    int getFlags();

    /**
     * <code>optional int32 js_code_binary_version = 2 [default = 1];</code>
     *
     * <pre>
     * (patch &lt;&lt; 16) + (minor &lt;&lt; 8) + major
     * </pre>
     */
    boolean hasJsCodeBinaryVersion();
    /**
     * <code>optional int32 js_code_binary_version = 2 [default = 1];</code>
     *
     * <pre>
     * (patch &lt;&lt; 16) + (minor &lt;&lt; 8) + major
     * </pre>
     */
    int getJsCodeBinaryVersion();

    /**
     * <code>optional string package_fq_name = 3;</code>
     */
    boolean hasPackageFqName();
    /**
     * <code>optional string package_fq_name = 3;</code>
     */
    java.lang.String getPackageFqName();
    /**
     * <code>optional string package_fq_name = 3;</code>
     */
    org.jetbrains.kotlin.protobuf.ByteString
        getPackageFqNameBytes();

    /**
     * <code>optional .org.jetbrains.kotlin.metadata.StringTable strings = 4;</code>
     */
    boolean hasStrings();
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.StringTable strings = 4;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTable getStrings();
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.StringTable strings = 4;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTableOrBuilder getStringsOrBuilder();

    /**
     * <code>optional .org.jetbrains.kotlin.metadata.QualifiedNameTable qualified_names = 5;</code>
     */
    boolean hasQualifiedNames();
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.QualifiedNameTable qualified_names = 5;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable getQualifiedNames();
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.QualifiedNameTable qualified_names = 5;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTableOrBuilder getQualifiedNamesOrBuilder();

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 6;</code>
     *
     * <pre>
     * Annotations on the whole module
     * </pre>
     */
    java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation> 
        getAnnotationList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 6;</code>
     *
     * <pre>
     * Annotations on the whole module
     * </pre>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation getAnnotation(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 6;</code>
     *
     * <pre>
     * Annotations on the whole module
     * </pre>
     */
    int getAnnotationCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 6;</code>
     *
     * <pre>
     * Annotations on the whole module
     * </pre>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.AnnotationOrBuilder> 
        getAnnotationOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 6;</code>
     *
     * <pre>
     * Annotations on the whole module
     * </pre>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.AnnotationOrBuilder getAnnotationOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Header}
   */
  public static final class Header extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Header)
      HeaderOrBuilder {
    // Use Header.newBuilder() to construct.
    private Header(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Header(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Header defaultInstance;
    public static Header getDefaultInstance() {
      return defaultInstance;
    }

    public Header getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Header(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              flags_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              jsCodeBinaryVersion_ = input.readInt32();
              break;
            }
            case 26: {
              org.jetbrains.kotlin.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000004;
              packageFqName_ = bs;
              break;
            }
            case 34: {
              org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTable.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = strings_.toBuilder();
              }
              strings_ = input.readMessage(org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTable.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(strings_);
                strings_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
            case 42: {
              org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.Builder subBuilder = null;
              if (((bitField0_ & 0x00000010) == 0x00000010)) {
                subBuilder = qualifiedNames_.toBuilder();
              }
              qualifiedNames_ = input.readMessage(org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(qualifiedNames_);
                qualifiedNames_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000010;
              break;
            }
            case 50: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                annotation_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation>();
                mutable_bitField0_ |= 0x00000020;
              }
              annotation_.add(input.readMessage(org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          annotation_ = java.util.Collections.unmodifiableList(annotation_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_Header_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_Header_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Header.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Header.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<Header> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<Header>() {
      public Header parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new Header(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<Header> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int FLAGS_FIELD_NUMBER = 1;
    private int flags_;
    /**
     * <code>optional int32 flags = 1;</code>
     *
     * <pre>
     *preRelease
     * </pre>
     */
    public boolean hasFlags() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 flags = 1;</code>
     *
     * <pre>
     *preRelease
     * </pre>
     */
    public int getFlags() {
      return flags_;
    }

    public static final int JS_CODE_BINARY_VERSION_FIELD_NUMBER = 2;
    private int jsCodeBinaryVersion_;
    /**
     * <code>optional int32 js_code_binary_version = 2 [default = 1];</code>
     *
     * <pre>
     * (patch &lt;&lt; 16) + (minor &lt;&lt; 8) + major
     * </pre>
     */
    public boolean hasJsCodeBinaryVersion() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 js_code_binary_version = 2 [default = 1];</code>
     *
     * <pre>
     * (patch &lt;&lt; 16) + (minor &lt;&lt; 8) + major
     * </pre>
     */
    public int getJsCodeBinaryVersion() {
      return jsCodeBinaryVersion_;
    }

    public static final int PACKAGE_FQ_NAME_FIELD_NUMBER = 3;
    private java.lang.Object packageFqName_;
    /**
     * <code>optional string package_fq_name = 3;</code>
     */
    public boolean hasPackageFqName() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional string package_fq_name = 3;</code>
     */
    public java.lang.String getPackageFqName() {
      java.lang.Object ref = packageFqName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        org.jetbrains.kotlin.protobuf.ByteString bs = 
            (org.jetbrains.kotlin.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          packageFqName_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string package_fq_name = 3;</code>
     */
    public org.jetbrains.kotlin.protobuf.ByteString
        getPackageFqNameBytes() {
      java.lang.Object ref = packageFqName_;
      if (ref instanceof java.lang.String) {
        org.jetbrains.kotlin.protobuf.ByteString b = 
            org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        packageFqName_ = b;
        return b;
      } else {
        return (org.jetbrains.kotlin.protobuf.ByteString) ref;
      }
    }

    public static final int STRINGS_FIELD_NUMBER = 4;
    private org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTable strings_;
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.StringTable strings = 4;</code>
     */
    public boolean hasStrings() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.StringTable strings = 4;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTable getStrings() {
      return strings_;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.StringTable strings = 4;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTableOrBuilder getStringsOrBuilder() {
      return strings_;
    }

    public static final int QUALIFIED_NAMES_FIELD_NUMBER = 5;
    private org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable qualifiedNames_;
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.QualifiedNameTable qualified_names = 5;</code>
     */
    public boolean hasQualifiedNames() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.QualifiedNameTable qualified_names = 5;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable getQualifiedNames() {
      return qualifiedNames_;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.QualifiedNameTable qualified_names = 5;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTableOrBuilder getQualifiedNamesOrBuilder() {
      return qualifiedNames_;
    }

    public static final int ANNOTATION_FIELD_NUMBER = 6;
    private java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation> annotation_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 6;</code>
     *
     * <pre>
     * Annotations on the whole module
     * </pre>
     */
    public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation> getAnnotationList() {
      return annotation_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 6;</code>
     *
     * <pre>
     * Annotations on the whole module
     * </pre>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.AnnotationOrBuilder> 
        getAnnotationOrBuilderList() {
      return annotation_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 6;</code>
     *
     * <pre>
     * Annotations on the whole module
     * </pre>
     */
    public int getAnnotationCount() {
      return annotation_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 6;</code>
     *
     * <pre>
     * Annotations on the whole module
     * </pre>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation getAnnotation(int index) {
      return annotation_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 6;</code>
     *
     * <pre>
     * Annotations on the whole module
     * </pre>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.AnnotationOrBuilder getAnnotationOrBuilder(
        int index) {
      return annotation_.get(index);
    }

    private void initFields() {
      flags_ = 0;
      jsCodeBinaryVersion_ = 1;
      packageFqName_ = "";
      strings_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTable.getDefaultInstance();
      qualifiedNames_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.getDefaultInstance();
      annotation_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (hasQualifiedNames()) {
        if (!getQualifiedNames().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getAnnotationCount(); i++) {
        if (!getAnnotation(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, flags_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, jsCodeBinaryVersion_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(3, getPackageFqNameBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(4, strings_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(5, qualifiedNames_);
      }
      for (int i = 0; i < annotation_.size(); i++) {
        output.writeMessage(6, annotation_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(1, flags_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(2, jsCodeBinaryVersion_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBytesSize(3, getPackageFqNameBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(4, strings_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(5, qualifiedNames_);
      }
      for (int i = 0; i < annotation_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(6, annotation_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Header parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Header parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Header parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Header parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Header parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Header parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Header parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Header parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Header parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Header parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Header prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Header}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Header)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.HeaderOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_Header_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_Header_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Header.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Header.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Header.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getStringsFieldBuilder();
          getQualifiedNamesFieldBuilder();
          getAnnotationFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        flags_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        jsCodeBinaryVersion_ = 1;
        bitField0_ = (bitField0_ & ~0x00000002);
        packageFqName_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        if (stringsBuilder_ == null) {
          strings_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTable.getDefaultInstance();
        } else {
          stringsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        if (qualifiedNamesBuilder_ == null) {
          qualifiedNames_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.getDefaultInstance();
        } else {
          qualifiedNamesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        if (annotationBuilder_ == null) {
          annotation_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
        } else {
          annotationBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_Header_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Header getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Header.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Header build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Header result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Header buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Header result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Header(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.flags_ = flags_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.jsCodeBinaryVersion_ = jsCodeBinaryVersion_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.packageFqName_ = packageFqName_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        if (stringsBuilder_ == null) {
          result.strings_ = strings_;
        } else {
          result.strings_ = stringsBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        if (qualifiedNamesBuilder_ == null) {
          result.qualifiedNames_ = qualifiedNames_;
        } else {
          result.qualifiedNames_ = qualifiedNamesBuilder_.build();
        }
        if (annotationBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020)) {
            annotation_ = java.util.Collections.unmodifiableList(annotation_);
            bitField0_ = (bitField0_ & ~0x00000020);
          }
          result.annotation_ = annotation_;
        } else {
          result.annotation_ = annotationBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Header) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Header)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Header other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Header.getDefaultInstance()) return this;
        if (other.hasFlags()) {
          setFlags(other.getFlags());
        }
        if (other.hasJsCodeBinaryVersion()) {
          setJsCodeBinaryVersion(other.getJsCodeBinaryVersion());
        }
        if (other.hasPackageFqName()) {
          bitField0_ |= 0x00000004;
          packageFqName_ = other.packageFqName_;
          onChanged();
        }
        if (other.hasStrings()) {
          mergeStrings(other.getStrings());
        }
        if (other.hasQualifiedNames()) {
          mergeQualifiedNames(other.getQualifiedNames());
        }
        if (annotationBuilder_ == null) {
          if (!other.annotation_.isEmpty()) {
            if (annotation_.isEmpty()) {
              annotation_ = other.annotation_;
              bitField0_ = (bitField0_ & ~0x00000020);
            } else {
              ensureAnnotationIsMutable();
              annotation_.addAll(other.annotation_);
            }
            onChanged();
          }
        } else {
          if (!other.annotation_.isEmpty()) {
            if (annotationBuilder_.isEmpty()) {
              annotationBuilder_.dispose();
              annotationBuilder_ = null;
              annotation_ = other.annotation_;
              bitField0_ = (bitField0_ & ~0x00000020);
              annotationBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getAnnotationFieldBuilder() : null;
            } else {
              annotationBuilder_.addAllMessages(other.annotation_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (hasQualifiedNames()) {
          if (!getQualifiedNames().isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getAnnotationCount(); i++) {
          if (!getAnnotation(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Header parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Header) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int flags_ ;
      /**
       * <code>optional int32 flags = 1;</code>
       *
       * <pre>
       *preRelease
       * </pre>
       */
      public boolean hasFlags() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 flags = 1;</code>
       *
       * <pre>
       *preRelease
       * </pre>
       */
      public int getFlags() {
        return flags_;
      }
      /**
       * <code>optional int32 flags = 1;</code>
       *
       * <pre>
       *preRelease
       * </pre>
       */
      public Builder setFlags(int value) {
        bitField0_ |= 0x00000001;
        flags_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 flags = 1;</code>
       *
       * <pre>
       *preRelease
       * </pre>
       */
      public Builder clearFlags() {
        bitField0_ = (bitField0_ & ~0x00000001);
        flags_ = 0;
        onChanged();
        return this;
      }

      private int jsCodeBinaryVersion_ = 1;
      /**
       * <code>optional int32 js_code_binary_version = 2 [default = 1];</code>
       *
       * <pre>
       * (patch &lt;&lt; 16) + (minor &lt;&lt; 8) + major
       * </pre>
       */
      public boolean hasJsCodeBinaryVersion() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 js_code_binary_version = 2 [default = 1];</code>
       *
       * <pre>
       * (patch &lt;&lt; 16) + (minor &lt;&lt; 8) + major
       * </pre>
       */
      public int getJsCodeBinaryVersion() {
        return jsCodeBinaryVersion_;
      }
      /**
       * <code>optional int32 js_code_binary_version = 2 [default = 1];</code>
       *
       * <pre>
       * (patch &lt;&lt; 16) + (minor &lt;&lt; 8) + major
       * </pre>
       */
      public Builder setJsCodeBinaryVersion(int value) {
        bitField0_ |= 0x00000002;
        jsCodeBinaryVersion_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 js_code_binary_version = 2 [default = 1];</code>
       *
       * <pre>
       * (patch &lt;&lt; 16) + (minor &lt;&lt; 8) + major
       * </pre>
       */
      public Builder clearJsCodeBinaryVersion() {
        bitField0_ = (bitField0_ & ~0x00000002);
        jsCodeBinaryVersion_ = 1;
        onChanged();
        return this;
      }

      private java.lang.Object packageFqName_ = "";
      /**
       * <code>optional string package_fq_name = 3;</code>
       */
      public boolean hasPackageFqName() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional string package_fq_name = 3;</code>
       */
      public java.lang.String getPackageFqName() {
        java.lang.Object ref = packageFqName_;
        if (!(ref instanceof java.lang.String)) {
          org.jetbrains.kotlin.protobuf.ByteString bs =
              (org.jetbrains.kotlin.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            packageFqName_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string package_fq_name = 3;</code>
       */
      public org.jetbrains.kotlin.protobuf.ByteString
          getPackageFqNameBytes() {
        java.lang.Object ref = packageFqName_;
        if (ref instanceof String) {
          org.jetbrains.kotlin.protobuf.ByteString b = 
              org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          packageFqName_ = b;
          return b;
        } else {
          return (org.jetbrains.kotlin.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string package_fq_name = 3;</code>
       */
      public Builder setPackageFqName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        packageFqName_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string package_fq_name = 3;</code>
       */
      public Builder clearPackageFqName() {
        bitField0_ = (bitField0_ & ~0x00000004);
        packageFqName_ = getDefaultInstance().getPackageFqName();
        onChanged();
        return this;
      }
      /**
       * <code>optional string package_fq_name = 3;</code>
       */
      public Builder setPackageFqNameBytes(
          org.jetbrains.kotlin.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        packageFqName_ = value;
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTable strings_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTable.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTable, org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTable.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTableOrBuilder> stringsBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.StringTable strings = 4;</code>
       */
      public boolean hasStrings() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.StringTable strings = 4;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTable getStrings() {
        if (stringsBuilder_ == null) {
          return strings_;
        } else {
          return stringsBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.StringTable strings = 4;</code>
       */
      public Builder setStrings(org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTable value) {
        if (stringsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          strings_ = value;
          onChanged();
        } else {
          stringsBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.StringTable strings = 4;</code>
       */
      public Builder setStrings(
          org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTable.Builder builderForValue) {
        if (stringsBuilder_ == null) {
          strings_ = builderForValue.build();
          onChanged();
        } else {
          stringsBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.StringTable strings = 4;</code>
       */
      public Builder mergeStrings(org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTable value) {
        if (stringsBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008) &&
              strings_ != org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTable.getDefaultInstance()) {
            strings_ =
              org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTable.newBuilder(strings_).mergeFrom(value).buildPartial();
          } else {
            strings_ = value;
          }
          onChanged();
        } else {
          stringsBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.StringTable strings = 4;</code>
       */
      public Builder clearStrings() {
        if (stringsBuilder_ == null) {
          strings_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTable.getDefaultInstance();
          onChanged();
        } else {
          stringsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.StringTable strings = 4;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTable.Builder getStringsBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getStringsFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.StringTable strings = 4;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTableOrBuilder getStringsOrBuilder() {
        if (stringsBuilder_ != null) {
          return stringsBuilder_.getMessageOrBuilder();
        } else {
          return strings_;
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.StringTable strings = 4;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTable, org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTable.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTableOrBuilder> 
          getStringsFieldBuilder() {
        if (stringsBuilder_ == null) {
          stringsBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTable, org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTable.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.StringTableOrBuilder>(
                  getStrings(),
                  getParentForChildren(),
                  isClean());
          strings_ = null;
        }
        return stringsBuilder_;
      }

      private org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable qualifiedNames_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.getDefaultInstance();
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable, org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTableOrBuilder> qualifiedNamesBuilder_;
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.QualifiedNameTable qualified_names = 5;</code>
       */
      public boolean hasQualifiedNames() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.QualifiedNameTable qualified_names = 5;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable getQualifiedNames() {
        if (qualifiedNamesBuilder_ == null) {
          return qualifiedNames_;
        } else {
          return qualifiedNamesBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.QualifiedNameTable qualified_names = 5;</code>
       */
      public Builder setQualifiedNames(org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable value) {
        if (qualifiedNamesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          qualifiedNames_ = value;
          onChanged();
        } else {
          qualifiedNamesBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.QualifiedNameTable qualified_names = 5;</code>
       */
      public Builder setQualifiedNames(
          org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.Builder builderForValue) {
        if (qualifiedNamesBuilder_ == null) {
          qualifiedNames_ = builderForValue.build();
          onChanged();
        } else {
          qualifiedNamesBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.QualifiedNameTable qualified_names = 5;</code>
       */
      public Builder mergeQualifiedNames(org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable value) {
        if (qualifiedNamesBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010) &&
              qualifiedNames_ != org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.getDefaultInstance()) {
            qualifiedNames_ =
              org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.newBuilder(qualifiedNames_).mergeFrom(value).buildPartial();
          } else {
            qualifiedNames_ = value;
          }
          onChanged();
        } else {
          qualifiedNamesBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.QualifiedNameTable qualified_names = 5;</code>
       */
      public Builder clearQualifiedNames() {
        if (qualifiedNamesBuilder_ == null) {
          qualifiedNames_ = org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.getDefaultInstance();
          onChanged();
        } else {
          qualifiedNamesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.QualifiedNameTable qualified_names = 5;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.Builder getQualifiedNamesBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getQualifiedNamesFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.QualifiedNameTable qualified_names = 5;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTableOrBuilder getQualifiedNamesOrBuilder() {
        if (qualifiedNamesBuilder_ != null) {
          return qualifiedNamesBuilder_.getMessageOrBuilder();
        } else {
          return qualifiedNames_;
        }
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.QualifiedNameTable qualified_names = 5;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable, org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTableOrBuilder> 
          getQualifiedNamesFieldBuilder() {
        if (qualifiedNamesBuilder_ == null) {
          qualifiedNamesBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable, org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTable.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.QualifiedNameTableOrBuilder>(
                  getQualifiedNames(),
                  getParentForChildren(),
                  isClean());
          qualifiedNames_ = null;
        }
        return qualifiedNamesBuilder_;
      }

      private java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation> annotation_ =
        java.util.Collections.emptyList();
      private void ensureAnnotationIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          annotation_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation>(annotation_);
          bitField0_ |= 0x00000020;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation, org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.AnnotationOrBuilder> annotationBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 6;</code>
       *
       * <pre>
       * Annotations on the whole module
       * </pre>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation> getAnnotationList() {
        if (annotationBuilder_ == null) {
          return java.util.Collections.unmodifiableList(annotation_);
        } else {
          return annotationBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 6;</code>
       *
       * <pre>
       * Annotations on the whole module
       * </pre>
       */
      public int getAnnotationCount() {
        if (annotationBuilder_ == null) {
          return annotation_.size();
        } else {
          return annotationBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 6;</code>
       *
       * <pre>
       * Annotations on the whole module
       * </pre>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation getAnnotation(int index) {
        if (annotationBuilder_ == null) {
          return annotation_.get(index);
        } else {
          return annotationBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 6;</code>
       *
       * <pre>
       * Annotations on the whole module
       * </pre>
       */
      public Builder setAnnotation(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation value) {
        if (annotationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAnnotationIsMutable();
          annotation_.set(index, value);
          onChanged();
        } else {
          annotationBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 6;</code>
       *
       * <pre>
       * Annotations on the whole module
       * </pre>
       */
      public Builder setAnnotation(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Builder builderForValue) {
        if (annotationBuilder_ == null) {
          ensureAnnotationIsMutable();
          annotation_.set(index, builderForValue.build());
          onChanged();
        } else {
          annotationBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 6;</code>
       *
       * <pre>
       * Annotations on the whole module
       * </pre>
       */
      public Builder addAnnotation(org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation value) {
        if (annotationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAnnotationIsMutable();
          annotation_.add(value);
          onChanged();
        } else {
          annotationBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 6;</code>
       *
       * <pre>
       * Annotations on the whole module
       * </pre>
       */
      public Builder addAnnotation(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation value) {
        if (annotationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAnnotationIsMutable();
          annotation_.add(index, value);
          onChanged();
        } else {
          annotationBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 6;</code>
       *
       * <pre>
       * Annotations on the whole module
       * </pre>
       */
      public Builder addAnnotation(
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Builder builderForValue) {
        if (annotationBuilder_ == null) {
          ensureAnnotationIsMutable();
          annotation_.add(builderForValue.build());
          onChanged();
        } else {
          annotationBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 6;</code>
       *
       * <pre>
       * Annotations on the whole module
       * </pre>
       */
      public Builder addAnnotation(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Builder builderForValue) {
        if (annotationBuilder_ == null) {
          ensureAnnotationIsMutable();
          annotation_.add(index, builderForValue.build());
          onChanged();
        } else {
          annotationBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 6;</code>
       *
       * <pre>
       * Annotations on the whole module
       * </pre>
       */
      public Builder addAllAnnotation(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation> values) {
        if (annotationBuilder_ == null) {
          ensureAnnotationIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, annotation_);
          onChanged();
        } else {
          annotationBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 6;</code>
       *
       * <pre>
       * Annotations on the whole module
       * </pre>
       */
      public Builder clearAnnotation() {
        if (annotationBuilder_ == null) {
          annotation_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
          onChanged();
        } else {
          annotationBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 6;</code>
       *
       * <pre>
       * Annotations on the whole module
       * </pre>
       */
      public Builder removeAnnotation(int index) {
        if (annotationBuilder_ == null) {
          ensureAnnotationIsMutable();
          annotation_.remove(index);
          onChanged();
        } else {
          annotationBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 6;</code>
       *
       * <pre>
       * Annotations on the whole module
       * </pre>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Builder getAnnotationBuilder(
          int index) {
        return getAnnotationFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 6;</code>
       *
       * <pre>
       * Annotations on the whole module
       * </pre>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.AnnotationOrBuilder getAnnotationOrBuilder(
          int index) {
        if (annotationBuilder_ == null) {
          return annotation_.get(index);  } else {
          return annotationBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 6;</code>
       *
       * <pre>
       * Annotations on the whole module
       * </pre>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.AnnotationOrBuilder> 
           getAnnotationOrBuilderList() {
        if (annotationBuilder_ != null) {
          return annotationBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(annotation_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 6;</code>
       *
       * <pre>
       * Annotations on the whole module
       * </pre>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Builder addAnnotationBuilder() {
        return getAnnotationFieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 6;</code>
       *
       * <pre>
       * Annotations on the whole module
       * </pre>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Builder addAnnotationBuilder(
          int index) {
        return getAnnotationFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 6;</code>
       *
       * <pre>
       * Annotations on the whole module
       * </pre>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Builder> 
           getAnnotationBuilderList() {
        return getAnnotationFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation, org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.AnnotationOrBuilder> 
          getAnnotationFieldBuilder() {
        if (annotationBuilder_ == null) {
          annotationBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation, org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.AnnotationOrBuilder>(
                  annotation_,
                  ((bitField0_ & 0x00000020) == 0x00000020),
                  getParentForChildren(),
                  isClean());
          annotation_ = null;
        }
        return annotationBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Header)
    }

    static {
      defaultInstance = new Header(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Header)
  }

  public interface FileOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.File)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>optional int32 id = 1;</code>
     *
     * <pre>
     * If absent, id is the index of the file in the Files.file list
     * </pre>
     */
    boolean hasId();
    /**
     * <code>optional int32 id = 1;</code>
     *
     * <pre>
     * If absent, id is the index of the file in the Files.file list
     * </pre>
     */
    int getId();

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation> 
        getAnnotationList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation getAnnotation(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
     */
    int getAnnotationCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.AnnotationOrBuilder> 
        getAnnotationOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.AnnotationOrBuilder getAnnotationOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.File}
   */
  public static final class File extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.File)
      FileOrBuilder {
    // Use File.newBuilder() to construct.
    private File(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private File(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final File defaultInstance;
    public static File getDefaultInstance() {
      return defaultInstance;
    }

    public File getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private File(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              id_ = input.readInt32();
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                annotation_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation>();
                mutable_bitField0_ |= 0x00000002;
              }
              annotation_.add(input.readMessage(org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          annotation_ = java.util.Collections.unmodifiableList(annotation_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_File_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_File_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.File.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.File.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<File> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<File>() {
      public File parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new File(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<File> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int ID_FIELD_NUMBER = 1;
    private int id_;
    /**
     * <code>optional int32 id = 1;</code>
     *
     * <pre>
     * If absent, id is the index of the file in the Files.file list
     * </pre>
     */
    public boolean hasId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 id = 1;</code>
     *
     * <pre>
     * If absent, id is the index of the file in the Files.file list
     * </pre>
     */
    public int getId() {
      return id_;
    }

    public static final int ANNOTATION_FIELD_NUMBER = 2;
    private java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation> annotation_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
     */
    public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation> getAnnotationList() {
      return annotation_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.AnnotationOrBuilder> 
        getAnnotationOrBuilderList() {
      return annotation_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
     */
    public int getAnnotationCount() {
      return annotation_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation getAnnotation(int index) {
      return annotation_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.AnnotationOrBuilder getAnnotationOrBuilder(
        int index) {
      return annotation_.get(index);
    }

    private void initFields() {
      id_ = 0;
      annotation_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getAnnotationCount(); i++) {
        if (!getAnnotation(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, id_);
      }
      for (int i = 0; i < annotation_.size(); i++) {
        output.writeMessage(2, annotation_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(1, id_);
      }
      for (int i = 0; i < annotation_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, annotation_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.File parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.File parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.File parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.File parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.File parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.File parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.File parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.File parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.File parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.File parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.File prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.File}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.File)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.FileOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_File_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_File_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.File.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.File.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.File.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getAnnotationFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        id_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        if (annotationBuilder_ == null) {
          annotation_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          annotationBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_File_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.File getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.File.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.File build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.File result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.File buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.File result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.File(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.id_ = id_;
        if (annotationBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            annotation_ = java.util.Collections.unmodifiableList(annotation_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.annotation_ = annotation_;
        } else {
          result.annotation_ = annotationBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.File) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.File)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.File other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.File.getDefaultInstance()) return this;
        if (other.hasId()) {
          setId(other.getId());
        }
        if (annotationBuilder_ == null) {
          if (!other.annotation_.isEmpty()) {
            if (annotation_.isEmpty()) {
              annotation_ = other.annotation_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureAnnotationIsMutable();
              annotation_.addAll(other.annotation_);
            }
            onChanged();
          }
        } else {
          if (!other.annotation_.isEmpty()) {
            if (annotationBuilder_.isEmpty()) {
              annotationBuilder_.dispose();
              annotationBuilder_ = null;
              annotation_ = other.annotation_;
              bitField0_ = (bitField0_ & ~0x00000002);
              annotationBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getAnnotationFieldBuilder() : null;
            } else {
              annotationBuilder_.addAllMessages(other.annotation_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getAnnotationCount(); i++) {
          if (!getAnnotation(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.File parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.File) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int id_ ;
      /**
       * <code>optional int32 id = 1;</code>
       *
       * <pre>
       * If absent, id is the index of the file in the Files.file list
       * </pre>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 id = 1;</code>
       *
       * <pre>
       * If absent, id is the index of the file in the Files.file list
       * </pre>
       */
      public int getId() {
        return id_;
      }
      /**
       * <code>optional int32 id = 1;</code>
       *
       * <pre>
       * If absent, id is the index of the file in the Files.file list
       * </pre>
       */
      public Builder setId(int value) {
        bitField0_ |= 0x00000001;
        id_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 id = 1;</code>
       *
       * <pre>
       * If absent, id is the index of the file in the Files.file list
       * </pre>
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        id_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation> annotation_ =
        java.util.Collections.emptyList();
      private void ensureAnnotationIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          annotation_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation>(annotation_);
          bitField0_ |= 0x00000002;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation, org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.AnnotationOrBuilder> annotationBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation> getAnnotationList() {
        if (annotationBuilder_ == null) {
          return java.util.Collections.unmodifiableList(annotation_);
        } else {
          return annotationBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
       */
      public int getAnnotationCount() {
        if (annotationBuilder_ == null) {
          return annotation_.size();
        } else {
          return annotationBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation getAnnotation(int index) {
        if (annotationBuilder_ == null) {
          return annotation_.get(index);
        } else {
          return annotationBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
       */
      public Builder setAnnotation(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation value) {
        if (annotationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAnnotationIsMutable();
          annotation_.set(index, value);
          onChanged();
        } else {
          annotationBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
       */
      public Builder setAnnotation(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Builder builderForValue) {
        if (annotationBuilder_ == null) {
          ensureAnnotationIsMutable();
          annotation_.set(index, builderForValue.build());
          onChanged();
        } else {
          annotationBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
       */
      public Builder addAnnotation(org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation value) {
        if (annotationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAnnotationIsMutable();
          annotation_.add(value);
          onChanged();
        } else {
          annotationBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
       */
      public Builder addAnnotation(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation value) {
        if (annotationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAnnotationIsMutable();
          annotation_.add(index, value);
          onChanged();
        } else {
          annotationBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
       */
      public Builder addAnnotation(
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Builder builderForValue) {
        if (annotationBuilder_ == null) {
          ensureAnnotationIsMutable();
          annotation_.add(builderForValue.build());
          onChanged();
        } else {
          annotationBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
       */
      public Builder addAnnotation(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Builder builderForValue) {
        if (annotationBuilder_ == null) {
          ensureAnnotationIsMutable();
          annotation_.add(index, builderForValue.build());
          onChanged();
        } else {
          annotationBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
       */
      public Builder addAllAnnotation(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation> values) {
        if (annotationBuilder_ == null) {
          ensureAnnotationIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, annotation_);
          onChanged();
        } else {
          annotationBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
       */
      public Builder clearAnnotation() {
        if (annotationBuilder_ == null) {
          annotation_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          annotationBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
       */
      public Builder removeAnnotation(int index) {
        if (annotationBuilder_ == null) {
          ensureAnnotationIsMutable();
          annotation_.remove(index);
          onChanged();
        } else {
          annotationBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Builder getAnnotationBuilder(
          int index) {
        return getAnnotationFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.AnnotationOrBuilder getAnnotationOrBuilder(
          int index) {
        if (annotationBuilder_ == null) {
          return annotation_.get(index);  } else {
          return annotationBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.AnnotationOrBuilder> 
           getAnnotationOrBuilderList() {
        if (annotationBuilder_ != null) {
          return annotationBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(annotation_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Builder addAnnotationBuilder() {
        return getAnnotationFieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Builder addAnnotationBuilder(
          int index) {
        return getAnnotationFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Builder> 
           getAnnotationBuilderList() {
        return getAnnotationFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation, org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.AnnotationOrBuilder> 
          getAnnotationFieldBuilder() {
        if (annotationBuilder_ == null) {
          annotationBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation, org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.AnnotationOrBuilder>(
                  annotation_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          annotation_ = null;
        }
        return annotationBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.File)
    }

    static {
      defaultInstance = new File(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.File)
  }

  public interface FilesOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Files)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.File file = 1;</code>
     */
    java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.File> 
        getFileList();
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.File file = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.File getFile(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.File file = 1;</code>
     */
    int getFileCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.File file = 1;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.FileOrBuilder> 
        getFileOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.File file = 1;</code>
     */
    org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.FileOrBuilder getFileOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Files}
   */
  public static final class Files extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Files)
      FilesOrBuilder {
    // Use Files.newBuilder() to construct.
    private Files(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Files(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Files defaultInstance;
    public static Files getDefaultInstance() {
      return defaultInstance;
    }

    public Files getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Files(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                file_ = new java.util.ArrayList<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.File>();
                mutable_bitField0_ |= 0x00000001;
              }
              file_.add(input.readMessage(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.File.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          file_ = java.util.Collections.unmodifiableList(file_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_Files_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_Files_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Files.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Files.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<Files> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<Files>() {
      public Files parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new Files(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<Files> getParserForType() {
      return PARSER;
    }

    public static final int FILE_FIELD_NUMBER = 1;
    private java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.File> file_;
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.File file = 1;</code>
     */
    public java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.File> getFileList() {
      return file_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.File file = 1;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.FileOrBuilder> 
        getFileOrBuilderList() {
      return file_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.File file = 1;</code>
     */
    public int getFileCount() {
      return file_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.File file = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.File getFile(int index) {
      return file_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.File file = 1;</code>
     */
    public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.FileOrBuilder getFileOrBuilder(
        int index) {
      return file_.get(index);
    }

    private void initFields() {
      file_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getFileCount(); i++) {
        if (!getFile(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < file_.size(); i++) {
        output.writeMessage(1, file_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < file_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, file_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Files parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Files parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Files parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Files parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Files parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Files parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Files parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Files parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Files parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Files parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Files prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Files}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Files)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.FilesOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_Files_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_Files_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Files.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Files.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Files.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getFileFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (fileBuilder_ == null) {
          file_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          fileBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_Files_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Files getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Files.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Files build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Files result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Files buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Files result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Files(this);
        int from_bitField0_ = bitField0_;
        if (fileBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            file_ = java.util.Collections.unmodifiableList(file_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.file_ = file_;
        } else {
          result.file_ = fileBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Files) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Files)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Files other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Files.getDefaultInstance()) return this;
        if (fileBuilder_ == null) {
          if (!other.file_.isEmpty()) {
            if (file_.isEmpty()) {
              file_ = other.file_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureFileIsMutable();
              file_.addAll(other.file_);
            }
            onChanged();
          }
        } else {
          if (!other.file_.isEmpty()) {
            if (fileBuilder_.isEmpty()) {
              fileBuilder_.dispose();
              fileBuilder_ = null;
              file_ = other.file_;
              bitField0_ = (bitField0_ & ~0x00000001);
              fileBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getFileFieldBuilder() : null;
            } else {
              fileBuilder_.addAllMessages(other.file_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getFileCount(); i++) {
          if (!getFile(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Files parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Files) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.File> file_ =
        java.util.Collections.emptyList();
      private void ensureFileIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          file_ = new java.util.ArrayList<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.File>(file_);
          bitField0_ |= 0x00000001;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.File, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.File.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.FileOrBuilder> fileBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.File file = 1;</code>
       */
      public java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.File> getFileList() {
        if (fileBuilder_ == null) {
          return java.util.Collections.unmodifiableList(file_);
        } else {
          return fileBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.File file = 1;</code>
       */
      public int getFileCount() {
        if (fileBuilder_ == null) {
          return file_.size();
        } else {
          return fileBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.File file = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.File getFile(int index) {
        if (fileBuilder_ == null) {
          return file_.get(index);
        } else {
          return fileBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.File file = 1;</code>
       */
      public Builder setFile(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.File value) {
        if (fileBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFileIsMutable();
          file_.set(index, value);
          onChanged();
        } else {
          fileBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.File file = 1;</code>
       */
      public Builder setFile(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.File.Builder builderForValue) {
        if (fileBuilder_ == null) {
          ensureFileIsMutable();
          file_.set(index, builderForValue.build());
          onChanged();
        } else {
          fileBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.File file = 1;</code>
       */
      public Builder addFile(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.File value) {
        if (fileBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFileIsMutable();
          file_.add(value);
          onChanged();
        } else {
          fileBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.File file = 1;</code>
       */
      public Builder addFile(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.File value) {
        if (fileBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFileIsMutable();
          file_.add(index, value);
          onChanged();
        } else {
          fileBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.File file = 1;</code>
       */
      public Builder addFile(
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.File.Builder builderForValue) {
        if (fileBuilder_ == null) {
          ensureFileIsMutable();
          file_.add(builderForValue.build());
          onChanged();
        } else {
          fileBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.File file = 1;</code>
       */
      public Builder addFile(
          int index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.File.Builder builderForValue) {
        if (fileBuilder_ == null) {
          ensureFileIsMutable();
          file_.add(index, builderForValue.build());
          onChanged();
        } else {
          fileBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.File file = 1;</code>
       */
      public Builder addAllFile(
          java.lang.Iterable<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.File> values) {
        if (fileBuilder_ == null) {
          ensureFileIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, file_);
          onChanged();
        } else {
          fileBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.File file = 1;</code>
       */
      public Builder clearFile() {
        if (fileBuilder_ == null) {
          file_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          fileBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.File file = 1;</code>
       */
      public Builder removeFile(int index) {
        if (fileBuilder_ == null) {
          ensureFileIsMutable();
          file_.remove(index);
          onChanged();
        } else {
          fileBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.File file = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.File.Builder getFileBuilder(
          int index) {
        return getFileFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.File file = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.FileOrBuilder getFileOrBuilder(
          int index) {
        if (fileBuilder_ == null) {
          return file_.get(index);  } else {
          return fileBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.File file = 1;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.FileOrBuilder> 
           getFileOrBuilderList() {
        if (fileBuilder_ != null) {
          return fileBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(file_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.File file = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.File.Builder addFileBuilder() {
        return getFileFieldBuilder().addBuilder(
            org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.File.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.File file = 1;</code>
       */
      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.File.Builder addFileBuilder(
          int index) {
        return getFileFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.File.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.File file = 1;</code>
       */
      public java.util.List<org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.File.Builder> 
           getFileBuilderList() {
        return getFileFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.File, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.File.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.FileOrBuilder> 
          getFileFieldBuilder() {
        if (fileBuilder_ == null) {
          fileBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.File, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.File.Builder, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.FileOrBuilder>(
                  file_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          file_ = null;
        }
        return fileBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Files)
    }

    static {
      defaultInstance = new Files(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Files)
  }

  public interface DescriptorUniqIdOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DescriptorUniqId)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>required int64 index = 1;</code>
     */
    boolean hasIndex();
    /**
     * <code>required int64 index = 1;</code>
     */
    long getIndex();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DescriptorUniqId}
   */
  public static final class DescriptorUniqId extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DescriptorUniqId)
      DescriptorUniqIdOrBuilder {
    // Use DescriptorUniqId.newBuilder() to construct.
    private DescriptorUniqId(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private DescriptorUniqId(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final DescriptorUniqId defaultInstance;
    public static DescriptorUniqId getDefaultInstance() {
      return defaultInstance;
    }

    public DescriptorUniqId getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private DescriptorUniqId(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              index_ = input.readInt64();
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_DescriptorUniqId_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_DescriptorUniqId_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.DescriptorUniqId.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.DescriptorUniqId.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<DescriptorUniqId> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<DescriptorUniqId>() {
      public DescriptorUniqId parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new DescriptorUniqId(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<DescriptorUniqId> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int INDEX_FIELD_NUMBER = 1;
    private long index_;
    /**
     * <code>required int64 index = 1;</code>
     */
    public boolean hasIndex() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int64 index = 1;</code>
     */
    public long getIndex() {
      return index_;
    }

    private void initFields() {
      index_ = 0L;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasIndex()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt64(1, index_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt64Size(1, index_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.DescriptorUniqId parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.DescriptorUniqId parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.DescriptorUniqId parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.DescriptorUniqId parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.DescriptorUniqId parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.DescriptorUniqId parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.DescriptorUniqId parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.DescriptorUniqId parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.DescriptorUniqId parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.DescriptorUniqId parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.DescriptorUniqId prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DescriptorUniqId}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DescriptorUniqId)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.DescriptorUniqIdOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_DescriptorUniqId_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_DescriptorUniqId_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.DescriptorUniqId.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.DescriptorUniqId.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.DescriptorUniqId.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        index_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_DescriptorUniqId_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.DescriptorUniqId getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.DescriptorUniqId.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.DescriptorUniqId build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.DescriptorUniqId result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.DescriptorUniqId buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.DescriptorUniqId result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.DescriptorUniqId(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.index_ = index_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.DescriptorUniqId) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.DescriptorUniqId)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.DescriptorUniqId other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.DescriptorUniqId.getDefaultInstance()) return this;
        if (other.hasIndex()) {
          setIndex(other.getIndex());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasIndex()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.DescriptorUniqId parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.DescriptorUniqId) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private long index_ ;
      /**
       * <code>required int64 index = 1;</code>
       */
      public boolean hasIndex() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int64 index = 1;</code>
       */
      public long getIndex() {
        return index_;
      }
      /**
       * <code>required int64 index = 1;</code>
       */
      public Builder setIndex(long value) {
        bitField0_ |= 0x00000001;
        index_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int64 index = 1;</code>
       */
      public Builder clearIndex() {
        bitField0_ = (bitField0_ & ~0x00000001);
        index_ = 0L;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DescriptorUniqId)
    }

    static {
      defaultInstance = new DescriptorUniqId(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DescriptorUniqId)
  }

  public interface ClassesOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Classes)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>repeated int32 class_name = 1 [packed = true];</code>
     *
     * <pre>
     * id in StringTable
     * </pre>
     */
    java.util.List<java.lang.Integer> getClassNameList();
    /**
     * <code>repeated int32 class_name = 1 [packed = true];</code>
     *
     * <pre>
     * id in StringTable
     * </pre>
     */
    int getClassNameCount();
    /**
     * <code>repeated int32 class_name = 1 [packed = true];</code>
     *
     * <pre>
     * id in StringTable
     * </pre>
     */
    int getClassName(int index);
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Classes}
   */
  public static final class Classes extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Classes)
      ClassesOrBuilder {
    // Use Classes.newBuilder() to construct.
    private Classes(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Classes(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Classes defaultInstance;
    public static Classes getDefaultInstance() {
      return defaultInstance;
    }

    public Classes getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Classes(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                className_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              className_.add(input.readInt32());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                className_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                className_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          className_ = java.util.Collections.unmodifiableList(className_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_Classes_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_Classes_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Classes.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Classes.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<Classes> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<Classes>() {
      public Classes parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new Classes(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<Classes> getParserForType() {
      return PARSER;
    }

    public static final int CLASS_NAME_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Integer> className_;
    /**
     * <code>repeated int32 class_name = 1 [packed = true];</code>
     *
     * <pre>
     * id in StringTable
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getClassNameList() {
      return className_;
    }
    /**
     * <code>repeated int32 class_name = 1 [packed = true];</code>
     *
     * <pre>
     * id in StringTable
     * </pre>
     */
    public int getClassNameCount() {
      return className_.size();
    }
    /**
     * <code>repeated int32 class_name = 1 [packed = true];</code>
     *
     * <pre>
     * id in StringTable
     * </pre>
     */
    public int getClassName(int index) {
      return className_.get(index);
    }
    private int classNameMemoizedSerializedSize = -1;

    private void initFields() {
      className_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (getClassNameList().size() > 0) {
        output.writeRawVarint32(10);
        output.writeRawVarint32(classNameMemoizedSerializedSize);
      }
      for (int i = 0; i < className_.size(); i++) {
        output.writeInt32NoTag(className_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < className_.size(); i++) {
          dataSize += org.jetbrains.kotlin.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(className_.get(i));
        }
        size += dataSize;
        if (!getClassNameList().isEmpty()) {
          size += 1;
          size += org.jetbrains.kotlin.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        classNameMemoizedSerializedSize = dataSize;
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Classes parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Classes parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Classes parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Classes parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Classes parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Classes parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Classes parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Classes parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Classes parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Classes parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Classes prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Classes}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Classes)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.ClassesOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_Classes_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_Classes_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Classes.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Classes.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Classes.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        className_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_Classes_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Classes getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Classes.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Classes build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Classes result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Classes buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Classes result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Classes(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          className_ = java.util.Collections.unmodifiableList(className_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.className_ = className_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Classes) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Classes)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Classes other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Classes.getDefaultInstance()) return this;
        if (!other.className_.isEmpty()) {
          if (className_.isEmpty()) {
            className_ = other.className_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureClassNameIsMutable();
            className_.addAll(other.className_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Classes parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Classes) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<java.lang.Integer> className_ = java.util.Collections.emptyList();
      private void ensureClassNameIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          className_ = new java.util.ArrayList<java.lang.Integer>(className_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated int32 class_name = 1 [packed = true];</code>
       *
       * <pre>
       * id in StringTable
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getClassNameList() {
        return java.util.Collections.unmodifiableList(className_);
      }
      /**
       * <code>repeated int32 class_name = 1 [packed = true];</code>
       *
       * <pre>
       * id in StringTable
       * </pre>
       */
      public int getClassNameCount() {
        return className_.size();
      }
      /**
       * <code>repeated int32 class_name = 1 [packed = true];</code>
       *
       * <pre>
       * id in StringTable
       * </pre>
       */
      public int getClassName(int index) {
        return className_.get(index);
      }
      /**
       * <code>repeated int32 class_name = 1 [packed = true];</code>
       *
       * <pre>
       * id in StringTable
       * </pre>
       */
      public Builder setClassName(
          int index, int value) {
        ensureClassNameIsMutable();
        className_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 class_name = 1 [packed = true];</code>
       *
       * <pre>
       * id in StringTable
       * </pre>
       */
      public Builder addClassName(int value) {
        ensureClassNameIsMutable();
        className_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 class_name = 1 [packed = true];</code>
       *
       * <pre>
       * id in StringTable
       * </pre>
       */
      public Builder addAllClassName(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureClassNameIsMutable();
        org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
            values, className_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 class_name = 1 [packed = true];</code>
       *
       * <pre>
       * id in StringTable
       * </pre>
       */
      public Builder clearClassName() {
        className_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Classes)
    }

    static {
      defaultInstance = new Classes(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Classes)
  }

  public interface LibraryOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Library)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.PackageFragment package_fragment = 2;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageFragment> 
        getPackageFragmentList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.PackageFragment package_fragment = 2;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageFragment getPackageFragment(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.PackageFragment package_fragment = 2;</code>
     */
    int getPackageFragmentCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.PackageFragment package_fragment = 2;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageFragmentOrBuilder> 
        getPackageFragmentOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.PackageFragment package_fragment = 2;</code>
     */
    org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageFragmentOrBuilder getPackageFragmentOrBuilder(
        int index);

    /**
     * <code>repeated string imported_module = 3;</code>
     */
    org.jetbrains.kotlin.protobuf.ProtocolStringList
        getImportedModuleList();
    /**
     * <code>repeated string imported_module = 3;</code>
     */
    int getImportedModuleCount();
    /**
     * <code>repeated string imported_module = 3;</code>
     */
    java.lang.String getImportedModule(int index);
    /**
     * <code>repeated string imported_module = 3;</code>
     */
    org.jetbrains.kotlin.protobuf.ByteString
        getImportedModuleBytes(int index);
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Library}
   */
  public static final class Library extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Library)
      LibraryOrBuilder {
    // Use Library.newBuilder() to construct.
    private Library(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Library(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Library defaultInstance;
    public static Library getDefaultInstance() {
      return defaultInstance;
    }

    public Library getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Library(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                packageFragment_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageFragment>();
                mutable_bitField0_ |= 0x00000001;
              }
              packageFragment_.add(input.readMessage(org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageFragment.PARSER, extensionRegistry));
              break;
            }
            case 26: {
              org.jetbrains.kotlin.protobuf.ByteString bs = input.readBytes();
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                importedModule_ = new org.jetbrains.kotlin.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000002;
              }
              importedModule_.add(bs);
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          packageFragment_ = java.util.Collections.unmodifiableList(packageFragment_);
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          importedModule_ = importedModule_.getUnmodifiableView();
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_Library_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_Library_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Library.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Library.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<Library> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<Library>() {
      public Library parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new Library(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<Library> getParserForType() {
      return PARSER;
    }

    public static final int PACKAGE_FRAGMENT_FIELD_NUMBER = 2;
    private java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageFragment> packageFragment_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.PackageFragment package_fragment = 2;</code>
     */
    public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageFragment> getPackageFragmentList() {
      return packageFragment_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.PackageFragment package_fragment = 2;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageFragmentOrBuilder> 
        getPackageFragmentOrBuilderList() {
      return packageFragment_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.PackageFragment package_fragment = 2;</code>
     */
    public int getPackageFragmentCount() {
      return packageFragment_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.PackageFragment package_fragment = 2;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageFragment getPackageFragment(int index) {
      return packageFragment_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.PackageFragment package_fragment = 2;</code>
     */
    public org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageFragmentOrBuilder getPackageFragmentOrBuilder(
        int index) {
      return packageFragment_.get(index);
    }

    public static final int IMPORTED_MODULE_FIELD_NUMBER = 3;
    private org.jetbrains.kotlin.protobuf.LazyStringList importedModule_;
    /**
     * <code>repeated string imported_module = 3;</code>
     */
    public org.jetbrains.kotlin.protobuf.ProtocolStringList
        getImportedModuleList() {
      return importedModule_;
    }
    /**
     * <code>repeated string imported_module = 3;</code>
     */
    public int getImportedModuleCount() {
      return importedModule_.size();
    }
    /**
     * <code>repeated string imported_module = 3;</code>
     */
    public java.lang.String getImportedModule(int index) {
      return importedModule_.get(index);
    }
    /**
     * <code>repeated string imported_module = 3;</code>
     */
    public org.jetbrains.kotlin.protobuf.ByteString
        getImportedModuleBytes(int index) {
      return importedModule_.getByteString(index);
    }

    private void initFields() {
      packageFragment_ = java.util.Collections.emptyList();
      importedModule_ = org.jetbrains.kotlin.protobuf.LazyStringArrayList.EMPTY;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getPackageFragmentCount(); i++) {
        if (!getPackageFragment(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < packageFragment_.size(); i++) {
        output.writeMessage(2, packageFragment_.get(i));
      }
      for (int i = 0; i < importedModule_.size(); i++) {
        output.writeBytes(3, importedModule_.getByteString(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < packageFragment_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, packageFragment_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < importedModule_.size(); i++) {
          dataSize += org.jetbrains.kotlin.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(importedModule_.getByteString(i));
        }
        size += dataSize;
        size += 1 * getImportedModuleList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Library parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Library parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Library parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Library parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Library parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Library parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Library parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Library parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Library parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Library parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Library prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Library}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Library)
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.LibraryOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_Library_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_Library_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Library.class, org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Library.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Library.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getPackageFragmentFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (packageFragmentBuilder_ == null) {
          packageFragment_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          packageFragmentBuilder_.clear();
        }
        importedModule_ = org.jetbrains.kotlin.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_Library_descriptor;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Library getDefaultInstanceForType() {
        return org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Library.getDefaultInstance();
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Library build() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Library result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Library buildPartial() {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Library result = new org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Library(this);
        int from_bitField0_ = bitField0_;
        if (packageFragmentBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            packageFragment_ = java.util.Collections.unmodifiableList(packageFragment_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.packageFragment_ = packageFragment_;
        } else {
          result.packageFragment_ = packageFragmentBuilder_.build();
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          importedModule_ = importedModule_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.importedModule_ = importedModule_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Library) {
          return mergeFrom((org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Library)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Library other) {
        if (other == org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Library.getDefaultInstance()) return this;
        if (packageFragmentBuilder_ == null) {
          if (!other.packageFragment_.isEmpty()) {
            if (packageFragment_.isEmpty()) {
              packageFragment_ = other.packageFragment_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensurePackageFragmentIsMutable();
              packageFragment_.addAll(other.packageFragment_);
            }
            onChanged();
          }
        } else {
          if (!other.packageFragment_.isEmpty()) {
            if (packageFragmentBuilder_.isEmpty()) {
              packageFragmentBuilder_.dispose();
              packageFragmentBuilder_ = null;
              packageFragment_ = other.packageFragment_;
              bitField0_ = (bitField0_ & ~0x00000001);
              packageFragmentBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPackageFragmentFieldBuilder() : null;
            } else {
              packageFragmentBuilder_.addAllMessages(other.packageFragment_);
            }
          }
        }
        if (!other.importedModule_.isEmpty()) {
          if (importedModule_.isEmpty()) {
            importedModule_ = other.importedModule_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureImportedModuleIsMutable();
            importedModule_.addAll(other.importedModule_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getPackageFragmentCount(); i++) {
          if (!getPackageFragment(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Library parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Library) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageFragment> packageFragment_ =
        java.util.Collections.emptyList();
      private void ensurePackageFragmentIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          packageFragment_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageFragment>(packageFragment_);
          bitField0_ |= 0x00000001;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageFragment, org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageFragment.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageFragmentOrBuilder> packageFragmentBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.PackageFragment package_fragment = 2;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageFragment> getPackageFragmentList() {
        if (packageFragmentBuilder_ == null) {
          return java.util.Collections.unmodifiableList(packageFragment_);
        } else {
          return packageFragmentBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.PackageFragment package_fragment = 2;</code>
       */
      public int getPackageFragmentCount() {
        if (packageFragmentBuilder_ == null) {
          return packageFragment_.size();
        } else {
          return packageFragmentBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.PackageFragment package_fragment = 2;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageFragment getPackageFragment(int index) {
        if (packageFragmentBuilder_ == null) {
          return packageFragment_.get(index);
        } else {
          return packageFragmentBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.PackageFragment package_fragment = 2;</code>
       */
      public Builder setPackageFragment(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageFragment value) {
        if (packageFragmentBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePackageFragmentIsMutable();
          packageFragment_.set(index, value);
          onChanged();
        } else {
          packageFragmentBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.PackageFragment package_fragment = 2;</code>
       */
      public Builder setPackageFragment(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageFragment.Builder builderForValue) {
        if (packageFragmentBuilder_ == null) {
          ensurePackageFragmentIsMutable();
          packageFragment_.set(index, builderForValue.build());
          onChanged();
        } else {
          packageFragmentBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.PackageFragment package_fragment = 2;</code>
       */
      public Builder addPackageFragment(org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageFragment value) {
        if (packageFragmentBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePackageFragmentIsMutable();
          packageFragment_.add(value);
          onChanged();
        } else {
          packageFragmentBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.PackageFragment package_fragment = 2;</code>
       */
      public Builder addPackageFragment(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageFragment value) {
        if (packageFragmentBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePackageFragmentIsMutable();
          packageFragment_.add(index, value);
          onChanged();
        } else {
          packageFragmentBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.PackageFragment package_fragment = 2;</code>
       */
      public Builder addPackageFragment(
          org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageFragment.Builder builderForValue) {
        if (packageFragmentBuilder_ == null) {
          ensurePackageFragmentIsMutable();
          packageFragment_.add(builderForValue.build());
          onChanged();
        } else {
          packageFragmentBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.PackageFragment package_fragment = 2;</code>
       */
      public Builder addPackageFragment(
          int index, org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageFragment.Builder builderForValue) {
        if (packageFragmentBuilder_ == null) {
          ensurePackageFragmentIsMutable();
          packageFragment_.add(index, builderForValue.build());
          onChanged();
        } else {
          packageFragmentBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.PackageFragment package_fragment = 2;</code>
       */
      public Builder addAllPackageFragment(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageFragment> values) {
        if (packageFragmentBuilder_ == null) {
          ensurePackageFragmentIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, packageFragment_);
          onChanged();
        } else {
          packageFragmentBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.PackageFragment package_fragment = 2;</code>
       */
      public Builder clearPackageFragment() {
        if (packageFragmentBuilder_ == null) {
          packageFragment_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          packageFragmentBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.PackageFragment package_fragment = 2;</code>
       */
      public Builder removePackageFragment(int index) {
        if (packageFragmentBuilder_ == null) {
          ensurePackageFragmentIsMutable();
          packageFragment_.remove(index);
          onChanged();
        } else {
          packageFragmentBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.PackageFragment package_fragment = 2;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageFragment.Builder getPackageFragmentBuilder(
          int index) {
        return getPackageFragmentFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.PackageFragment package_fragment = 2;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageFragmentOrBuilder getPackageFragmentOrBuilder(
          int index) {
        if (packageFragmentBuilder_ == null) {
          return packageFragment_.get(index);  } else {
          return packageFragmentBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.PackageFragment package_fragment = 2;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageFragmentOrBuilder> 
           getPackageFragmentOrBuilderList() {
        if (packageFragmentBuilder_ != null) {
          return packageFragmentBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(packageFragment_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.PackageFragment package_fragment = 2;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageFragment.Builder addPackageFragmentBuilder() {
        return getPackageFragmentFieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageFragment.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.PackageFragment package_fragment = 2;</code>
       */
      public org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageFragment.Builder addPackageFragmentBuilder(
          int index) {
        return getPackageFragmentFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageFragment.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.PackageFragment package_fragment = 2;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageFragment.Builder> 
           getPackageFragmentBuilderList() {
        return getPackageFragmentFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageFragment, org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageFragment.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageFragmentOrBuilder> 
          getPackageFragmentFieldBuilder() {
        if (packageFragmentBuilder_ == null) {
          packageFragmentBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageFragment, org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageFragment.Builder, org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageFragmentOrBuilder>(
                  packageFragment_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          packageFragment_ = null;
        }
        return packageFragmentBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.LazyStringList importedModule_ = org.jetbrains.kotlin.protobuf.LazyStringArrayList.EMPTY;
      private void ensureImportedModuleIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          importedModule_ = new org.jetbrains.kotlin.protobuf.LazyStringArrayList(importedModule_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated string imported_module = 3;</code>
       */
      public org.jetbrains.kotlin.protobuf.ProtocolStringList
          getImportedModuleList() {
        return importedModule_.getUnmodifiableView();
      }
      /**
       * <code>repeated string imported_module = 3;</code>
       */
      public int getImportedModuleCount() {
        return importedModule_.size();
      }
      /**
       * <code>repeated string imported_module = 3;</code>
       */
      public java.lang.String getImportedModule(int index) {
        return importedModule_.get(index);
      }
      /**
       * <code>repeated string imported_module = 3;</code>
       */
      public org.jetbrains.kotlin.protobuf.ByteString
          getImportedModuleBytes(int index) {
        return importedModule_.getByteString(index);
      }
      /**
       * <code>repeated string imported_module = 3;</code>
       */
      public Builder setImportedModule(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureImportedModuleIsMutable();
        importedModule_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string imported_module = 3;</code>
       */
      public Builder addImportedModule(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureImportedModuleIsMutable();
        importedModule_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string imported_module = 3;</code>
       */
      public Builder addAllImportedModule(
          java.lang.Iterable<java.lang.String> values) {
        ensureImportedModuleIsMutable();
        org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
            values, importedModule_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string imported_module = 3;</code>
       */
      public Builder clearImportedModule() {
        importedModule_ = org.jetbrains.kotlin.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string imported_module = 3;</code>
       */
      public Builder addImportedModuleBytes(
          org.jetbrains.kotlin.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureImportedModuleIsMutable();
        importedModule_.add(value);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Library)
    }

    static {
      defaultInstance = new Library(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.Library)
  }

  public static final int PACKAGE_FQ_NAME_FIELD_NUMBER = 131;
  /**
   * <code>extend .org.jetbrains.kotlin.metadata.Package { ... }</code>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessage.GeneratedExtension<
      org.jetbrains.kotlin.metadata.DebugProtoBuf.Package,
      java.lang.Integer> packageFqName = org.jetbrains.kotlin.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        java.lang.Integer.class,
        null);
  public static final int CLASS_ANNOTATION_FIELD_NUMBER = 130;
  /**
   * <code>extend .org.jetbrains.kotlin.metadata.Class { ... }</code>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessage.GeneratedExtension<
      org.jetbrains.kotlin.metadata.DebugProtoBuf.Class,
      java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation>> classAnnotation = org.jetbrains.kotlin.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.class,
        org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.getDefaultInstance());
  public static final int CLASS_CONTAINING_FILE_ID_FIELD_NUMBER = 135;
  /**
   * <code>extend .org.jetbrains.kotlin.metadata.Class { ... }</code>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessage.GeneratedExtension<
      org.jetbrains.kotlin.metadata.DebugProtoBuf.Class,
      java.lang.Integer> classContainingFileId = org.jetbrains.kotlin.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        java.lang.Integer.class,
        null);
  public static final int CLASS_UNIQ_ID_FIELD_NUMBER = 136;
  /**
   * <code>extend .org.jetbrains.kotlin.metadata.Class { ... }</code>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessage.GeneratedExtension<
      org.jetbrains.kotlin.metadata.DebugProtoBuf.Class,
      org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.DescriptorUniqId> classUniqId = org.jetbrains.kotlin.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.DescriptorUniqId.class,
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.DescriptorUniqId.getDefaultInstance());
  public static final int CONSTRUCTOR_ANNOTATION_FIELD_NUMBER = 130;
  /**
   * <code>extend .org.jetbrains.kotlin.metadata.Constructor { ... }</code>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessage.GeneratedExtension<
      org.jetbrains.kotlin.metadata.DebugProtoBuf.Constructor,
      java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation>> constructorAnnotation = org.jetbrains.kotlin.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.class,
        org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.getDefaultInstance());
  public static final int CONSTRUCTOR_UNIQ_ID_FIELD_NUMBER = 131;
  /**
   * <code>extend .org.jetbrains.kotlin.metadata.Constructor { ... }</code>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessage.GeneratedExtension<
      org.jetbrains.kotlin.metadata.DebugProtoBuf.Constructor,
      org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.DescriptorUniqId> constructorUniqId = org.jetbrains.kotlin.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.DescriptorUniqId.class,
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.DescriptorUniqId.getDefaultInstance());
  public static final int FUNCTION_ANNOTATION_FIELD_NUMBER = 130;
  /**
   * <code>extend .org.jetbrains.kotlin.metadata.Function { ... }</code>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessage.GeneratedExtension<
      org.jetbrains.kotlin.metadata.DebugProtoBuf.Function,
      java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation>> functionAnnotation = org.jetbrains.kotlin.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.class,
        org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.getDefaultInstance());
  public static final int FUNCTION_CONTAINING_FILE_ID_FIELD_NUMBER = 135;
  /**
   * <code>extend .org.jetbrains.kotlin.metadata.Function { ... }</code>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessage.GeneratedExtension<
      org.jetbrains.kotlin.metadata.DebugProtoBuf.Function,
      java.lang.Integer> functionContainingFileId = org.jetbrains.kotlin.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        java.lang.Integer.class,
        null);
  public static final int FUNCTION_UNIQ_ID_FIELD_NUMBER = 136;
  /**
   * <code>extend .org.jetbrains.kotlin.metadata.Function { ... }</code>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessage.GeneratedExtension<
      org.jetbrains.kotlin.metadata.DebugProtoBuf.Function,
      org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.DescriptorUniqId> functionUniqId = org.jetbrains.kotlin.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.DescriptorUniqId.class,
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.DescriptorUniqId.getDefaultInstance());
  public static final int PROPERTY_ANNOTATION_FIELD_NUMBER = 130;
  /**
   * <code>extend .org.jetbrains.kotlin.metadata.Property { ... }</code>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessage.GeneratedExtension<
      org.jetbrains.kotlin.metadata.DebugProtoBuf.Property,
      java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation>> propertyAnnotation = org.jetbrains.kotlin.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.class,
        org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.getDefaultInstance());
  public static final int PROPERTY_GETTER_ANNOTATION_FIELD_NUMBER = 132;
  /**
   * <code>extend .org.jetbrains.kotlin.metadata.Property { ... }</code>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessage.GeneratedExtension<
      org.jetbrains.kotlin.metadata.DebugProtoBuf.Property,
      java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation>> propertyGetterAnnotation = org.jetbrains.kotlin.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.class,
        org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.getDefaultInstance());
  public static final int PROPERTY_SETTER_ANNOTATION_FIELD_NUMBER = 133;
  /**
   * <code>extend .org.jetbrains.kotlin.metadata.Property { ... }</code>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessage.GeneratedExtension<
      org.jetbrains.kotlin.metadata.DebugProtoBuf.Property,
      java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation>> propertySetterAnnotation = org.jetbrains.kotlin.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.class,
        org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.getDefaultInstance());
  public static final int COMPILE_TIME_VALUE_FIELD_NUMBER = 131;
  /**
   * <code>extend .org.jetbrains.kotlin.metadata.Property { ... }</code>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessage.GeneratedExtension<
      org.jetbrains.kotlin.metadata.DebugProtoBuf.Property,
      org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value> compileTimeValue = org.jetbrains.kotlin.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value.class,
        org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.Argument.Value.getDefaultInstance());
  public static final int PROPERTY_CONTAINING_FILE_ID_FIELD_NUMBER = 135;
  /**
   * <code>extend .org.jetbrains.kotlin.metadata.Property { ... }</code>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessage.GeneratedExtension<
      org.jetbrains.kotlin.metadata.DebugProtoBuf.Property,
      java.lang.Integer> propertyContainingFileId = org.jetbrains.kotlin.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        java.lang.Integer.class,
        null);
  public static final int PROPERTY_UNIQ_ID_FIELD_NUMBER = 136;
  /**
   * <code>extend .org.jetbrains.kotlin.metadata.Property { ... }</code>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessage.GeneratedExtension<
      org.jetbrains.kotlin.metadata.DebugProtoBuf.Property,
      org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.DescriptorUniqId> propertyUniqId = org.jetbrains.kotlin.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.DescriptorUniqId.class,
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.DescriptorUniqId.getDefaultInstance());
  public static final int ENUM_ENTRY_ANNOTATION_FIELD_NUMBER = 130;
  /**
   * <code>extend .org.jetbrains.kotlin.metadata.EnumEntry { ... }</code>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessage.GeneratedExtension<
      org.jetbrains.kotlin.metadata.DebugProtoBuf.EnumEntry,
      java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation>> enumEntryAnnotation = org.jetbrains.kotlin.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.class,
        org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.getDefaultInstance());
  public static final int ENUM_ENTRY_UNIQ_ID_FIELD_NUMBER = 131;
  /**
   * <code>extend .org.jetbrains.kotlin.metadata.EnumEntry { ... }</code>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessage.GeneratedExtension<
      org.jetbrains.kotlin.metadata.DebugProtoBuf.EnumEntry,
      org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.DescriptorUniqId> enumEntryUniqId = org.jetbrains.kotlin.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.DescriptorUniqId.class,
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.DescriptorUniqId.getDefaultInstance());
  public static final int PARAMETER_ANNOTATION_FIELD_NUMBER = 130;
  /**
   * <code>extend .org.jetbrains.kotlin.metadata.ValueParameter { ... }</code>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessage.GeneratedExtension<
      org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter,
      java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation>> parameterAnnotation = org.jetbrains.kotlin.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.class,
        org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.getDefaultInstance());
  public static final int VALUE_PARAM_UNIQ_ID_FIELD_NUMBER = 131;
  /**
   * <code>extend .org.jetbrains.kotlin.metadata.ValueParameter { ... }</code>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessage.GeneratedExtension<
      org.jetbrains.kotlin.metadata.DebugProtoBuf.ValueParameter,
      org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.DescriptorUniqId> valueParamUniqId = org.jetbrains.kotlin.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.DescriptorUniqId.class,
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.DescriptorUniqId.getDefaultInstance());
  public static final int TYPE_ANNOTATION_FIELD_NUMBER = 130;
  /**
   * <code>extend .org.jetbrains.kotlin.metadata.Type { ... }</code>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessage.GeneratedExtension<
      org.jetbrains.kotlin.metadata.DebugProtoBuf.Type,
      java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation>> typeAnnotation = org.jetbrains.kotlin.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.class,
        org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.getDefaultInstance());
  public static final int TYPE_PARAMETER_ANNOTATION_FIELD_NUMBER = 130;
  /**
   * <code>extend .org.jetbrains.kotlin.metadata.TypeParameter { ... }</code>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessage.GeneratedExtension<
      org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter,
      java.util.List<org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation>> typeParameterAnnotation = org.jetbrains.kotlin.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.class,
        org.jetbrains.kotlin.metadata.DebugProtoBuf.Annotation.getDefaultInstance());
  public static final int TYPE_PARAM_UNIQ_ID_FIELD_NUMBER = 131;
  /**
   * <code>extend .org.jetbrains.kotlin.metadata.TypeParameter { ... }</code>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessage.GeneratedExtension<
      org.jetbrains.kotlin.metadata.DebugProtoBuf.TypeParameter,
      org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.DescriptorUniqId> typeParamUniqId = org.jetbrains.kotlin.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.DescriptorUniqId.class,
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.DescriptorUniqId.getDefaultInstance());
  public static final int PACKAGE_FRAGMENT_FILES_FIELD_NUMBER = 130;
  /**
   * <code>extend .org.jetbrains.kotlin.metadata.PackageFragment { ... }</code>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessage.GeneratedExtension<
      org.jetbrains.kotlin.metadata.DebugProtoBuf.PackageFragment,
      org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Files> packageFragmentFiles = org.jetbrains.kotlin.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Files.class,
        org.jetbrains.kotlin.ir.backend.js.lower.serialization.metadata.DebugJsKlibMetadataProtoBuf.Files.getDefaultInstance());
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_Header_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_Header_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_File_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_File_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_Files_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_Files_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_DescriptorUniqId_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_DescriptorUniqId_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_Classes_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_Classes_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_Library_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_Library_fieldAccessorTable;

  public static org.jetbrains.kotlin.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static org.jetbrains.kotlin.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n)compiler/ir/backend.js/src/js.debug.pr" +
      "oto\022?org.jetbrains.kotlin.ir.backend.js." +
      "lower.serialization.metadata\032&core/metad" +
      "ata/src/metadata.debug.proto\"\233\002\n\006Header\022" +
      "\r\n\005flags\030\001 \001(\005\022!\n\026js_code_binary_version" +
      "\030\002 \001(\005:\0011\022\027\n\017package_fq_name\030\003 \001(\t\022;\n\007st" +
      "rings\030\004 \001(\0132*.org.jetbrains.kotlin.metad" +
      "ata.StringTable\022J\n\017qualified_names\030\005 \001(\013" +
      "21.org.jetbrains.kotlin.metadata.Qualifi" +
      "edNameTable\022=\n\nannotation\030\006 \003(\0132).org.je",
      "tbrains.kotlin.metadata.Annotation\"Q\n\004Fi" +
      "le\022\n\n\002id\030\001 \001(\005\022=\n\nannotation\030\002 \003(\0132).org" +
      ".jetbrains.kotlin.metadata.Annotation\"\\\n" +
      "\005Files\022S\n\004file\030\001 \003(\0132E.org.jetbrains.kot" +
      "lin.ir.backend.js.lower.serialization.me" +
      "tadata.File\"!\n\020DescriptorUniqId\022\r\n\005index" +
      "\030\001 \002(\003\"!\n\007Classes\022\026\n\nclass_name\030\001 \003(\005B\002\020" +
      "\001\"l\n\007Library\022H\n\020package_fragment\030\002 \003(\0132." +
      ".org.jetbrains.kotlin.metadata.PackageFr" +
      "agment\022\027\n\017imported_module\030\003 \003(\t:@\n\017packa",
      "ge_fq_name\022&.org.jetbrains.kotlin.metada" +
      "ta.Package\030\203\001 \001(\005:j\n\020class_annotation\022$." +
      "org.jetbrains.kotlin.metadata.Class\030\202\001 \003" +
      "(\0132).org.jetbrains.kotlin.metadata.Annot" +
      "ation:G\n\030class_containing_file_id\022$.org." +
      "jetbrains.kotlin.metadata.Class\030\207\001 \001(\005:\217" +
      "\001\n\rclass_uniq_id\022$.org.jetbrains.kotlin." +
      "metadata.Class\030\210\001 \001(\0132Q.org.jetbrains.ko" +
      "tlin.ir.backend.js.lower.serialization.m" +
      "etadata.DescriptorUniqId:v\n\026constructor_",
      "annotation\022*.org.jetbrains.kotlin.metada" +
      "ta.Constructor\030\202\001 \003(\0132).org.jetbrains.ko" +
      "tlin.metadata.Annotation:\233\001\n\023constructor" +
      "_uniq_id\022*.org.jetbrains.kotlin.metadata" +
      ".Constructor\030\203\001 \001(\0132Q.org.jetbrains.kotl" +
      "in.ir.backend.js.lower.serialization.met" +
      "adata.DescriptorUniqId:p\n\023function_annot" +
      "ation\022\'.org.jetbrains.kotlin.metadata.Fu" +
      "nction\030\202\001 \003(\0132).org.jetbrains.kotlin.met" +
      "adata.Annotation:M\n\033function_containing_",
      "file_id\022\'.org.jetbrains.kotlin.metadata." +
      "Function\030\207\001 \001(\005:\225\001\n\020function_uniq_id\022\'.o" +
      "rg.jetbrains.kotlin.metadata.Function\030\210\001" +
      " \001(\0132Q.org.jetbrains.kotlin.ir.backend.j" +
      "s.lower.serialization.metadata.Descripto" +
      "rUniqId:p\n\023property_annotation\022\'.org.jet" +
      "brains.kotlin.metadata.Property\030\202\001 \003(\0132)" +
      ".org.jetbrains.kotlin.metadata.Annotatio" +
      "n:w\n\032property_getter_annotation\022\'.org.je" +
      "tbrains.kotlin.metadata.Property\030\204\001 \003(\0132",
      ").org.jetbrains.kotlin.metadata.Annotati" +
      "on:w\n\032property_setter_annotation\022\'.org.j" +
      "etbrains.kotlin.metadata.Property\030\205\001 \003(\013" +
      "2).org.jetbrains.kotlin.metadata.Annotat" +
      "ion:~\n\022compile_time_value\022\'.org.jetbrain" +
      "s.kotlin.metadata.Property\030\203\001 \001(\01328.org." +
      "jetbrains.kotlin.metadata.Annotation.Arg" +
      "ument.Value:M\n\033property_containing_file_" +
      "id\022\'.org.jetbrains.kotlin.metadata.Prope" +
      "rty\030\207\001 \001(\005:\225\001\n\020property_uniq_id\022\'.org.je",
      "tbrains.kotlin.metadata.Property\030\210\001 \001(\0132" +
      "Q.org.jetbrains.kotlin.ir.backend.js.low" +
      "er.serialization.metadata.DescriptorUniq" +
      "Id:s\n\025enum_entry_annotation\022(.org.jetbra" +
      "ins.kotlin.metadata.EnumEntry\030\202\001 \003(\0132).o" +
      "rg.jetbrains.kotlin.metadata.Annotation:" +
      "\230\001\n\022enum_entry_uniq_id\022(.org.jetbrains.k" +
      "otlin.metadata.EnumEntry\030\203\001 \001(\0132Q.org.je" +
      "tbrains.kotlin.ir.backend.js.lower.seria" +
      "lization.metadata.DescriptorUniqId:w\n\024pa",
      "rameter_annotation\022-.org.jetbrains.kotli" +
      "n.metadata.ValueParameter\030\202\001 \003(\0132).org.j" +
      "etbrains.kotlin.metadata.Annotation:\236\001\n\023" +
      "value_param_uniq_id\022-.org.jetbrains.kotl" +
      "in.metadata.ValueParameter\030\203\001 \001(\0132Q.org." +
      "jetbrains.kotlin.ir.backend.js.lower.ser" +
      "ialization.metadata.DescriptorUniqId:h\n\017" +
      "type_annotation\022#.org.jetbrains.kotlin.m" +
      "etadata.Type\030\202\001 \003(\0132).org.jetbrains.kotl" +
      "in.metadata.Annotation:{\n\031type_parameter",
      "_annotation\022,.org.jetbrains.kotlin.metad" +
      "ata.TypeParameter\030\202\001 \003(\0132).org.jetbrains" +
      ".kotlin.metadata.Annotation:\234\001\n\022type_par" +
      "am_uniq_id\022,.org.jetbrains.kotlin.metada" +
      "ta.TypeParameter\030\203\001 \001(\0132Q.org.jetbrains." +
      "kotlin.ir.backend.js.lower.serialization" +
      ".metadata.DescriptorUniqId:\227\001\n\026package_f" +
      "ragment_files\022..org.jetbrains.kotlin.met" +
      "adata.PackageFragment\030\202\001 \001(\0132F.org.jetbr" +
      "ains.kotlin.ir.backend.js.lower.serializ",
      "ation.metadata.FilesB\035B\033DebugJsKlibMetad" +
      "ataProtoBuf"
    };
    org.jetbrains.kotlin.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new org.jetbrains.kotlin.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public org.jetbrains.kotlin.protobuf.ExtensionRegistry assignDescriptors(
              org.jetbrains.kotlin.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    org.jetbrains.kotlin.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new org.jetbrains.kotlin.protobuf.Descriptors.FileDescriptor[] {
          org.jetbrains.kotlin.metadata.DebugProtoBuf.getDescriptor(),
        }, assigner);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_Header_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_Header_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_Header_descriptor,
        new java.lang.String[] { "Flags", "JsCodeBinaryVersion", "PackageFqName", "Strings", "QualifiedNames", "Annotation", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_File_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_File_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_File_descriptor,
        new java.lang.String[] { "Id", "Annotation", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_Files_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_Files_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_Files_descriptor,
        new java.lang.String[] { "File", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_DescriptorUniqId_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_DescriptorUniqId_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_DescriptorUniqId_descriptor,
        new java.lang.String[] { "Index", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_Classes_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_Classes_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_Classes_descriptor,
        new java.lang.String[] { "ClassName", });
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_Library_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_Library_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_ir_backend_js_lower_serialization_metadata_Library_descriptor,
        new java.lang.String[] { "PackageFragment", "ImportedModule", });
    packageFqName.internalInit(descriptor.getExtensions().get(0));
    classAnnotation.internalInit(descriptor.getExtensions().get(1));
    classContainingFileId.internalInit(descriptor.getExtensions().get(2));
    classUniqId.internalInit(descriptor.getExtensions().get(3));
    constructorAnnotation.internalInit(descriptor.getExtensions().get(4));
    constructorUniqId.internalInit(descriptor.getExtensions().get(5));
    functionAnnotation.internalInit(descriptor.getExtensions().get(6));
    functionContainingFileId.internalInit(descriptor.getExtensions().get(7));
    functionUniqId.internalInit(descriptor.getExtensions().get(8));
    propertyAnnotation.internalInit(descriptor.getExtensions().get(9));
    propertyGetterAnnotation.internalInit(descriptor.getExtensions().get(10));
    propertySetterAnnotation.internalInit(descriptor.getExtensions().get(11));
    compileTimeValue.internalInit(descriptor.getExtensions().get(12));
    propertyContainingFileId.internalInit(descriptor.getExtensions().get(13));
    propertyUniqId.internalInit(descriptor.getExtensions().get(14));
    enumEntryAnnotation.internalInit(descriptor.getExtensions().get(15));
    enumEntryUniqId.internalInit(descriptor.getExtensions().get(16));
    parameterAnnotation.internalInit(descriptor.getExtensions().get(17));
    valueParamUniqId.internalInit(descriptor.getExtensions().get(18));
    typeAnnotation.internalInit(descriptor.getExtensions().get(19));
    typeParameterAnnotation.internalInit(descriptor.getExtensions().get(20));
    typeParamUniqId.internalInit(descriptor.getExtensions().get(21));
    packageFragmentFiles.internalInit(descriptor.getExtensions().get(22));
    org.jetbrains.kotlin.metadata.DebugProtoBuf.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}