== illegalWhenBlock ==
fun illegalWhenBlock(a: Any): Any {
    when(a) {
        is Int -> return a
    }
}
---------------------
L0:
  1 <START>
    v(a: Any)
    magic[FAKE_INITIALIZER](a: Any) -> <v0>
    w(a|<v0>)
  2 mark({ when(a) { is Int -> return a } })
    mark(when(a) { is Int -> return a })
    r(a) -> <v1>
    mark(is Int -> return a)
    mark(is Int)
    magic[IS](is Int|<v1>) -> <v2>
    jmp?(L4|<v2>)                                          NEXT:[merge(when(a) { is Int -> return a }|!<v4>) -> <v5>, r(a) -> <v3>]
L3 ['when' entry body]:
    r(a) -> <v3>
    ret(*|<v3>) L1                                         NEXT:[<END>]
-   jmp(L2)                                                PREV:[]
L2 [after 'when' expression]:
L4 [next 'when' entry]:
    merge(when(a) { is Int -> return a }|!<v4>) -> <v5>    PREV:[jmp?(L4|<v2>)]
L1:
  1 <END>                                                  NEXT:[<SINK>]                                                               PREV:[ret(*|<v3>) L1, merge(when(a) { is Int -> return a }|!<v4>) -> <v5>]
error:
-   <ERROR>                                                PREV:[]
sink:
    <SINK>                                                 PREV:[<END>]
=====================
