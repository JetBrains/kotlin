/*
 * Copyright 2010-2013 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.jet.plugin.codeInsight.unwrap;

import junit.framework.Assert;
import junit.framework.Test;
import junit.framework.TestSuite;

import java.io.File;
import java.util.regex.Pattern;
import org.jetbrains.jet.JetTestUtils;
import org.jetbrains.jet.test.InnerTestClasses;
import org.jetbrains.jet.test.TestMetadata;

import org.jetbrains.jet.plugin.codeInsight.unwrap.AbstractUnwrapRemoveTest;

/** This class is generated by {@link org.jetbrains.jet.generators.tests.GenerateTests}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@InnerTestClasses({UnwrapRemoveTestGenerated.RemoveExpression.class, UnwrapRemoveTestGenerated.UnwrapThen.class, UnwrapRemoveTestGenerated.UnwrapElse.class, UnwrapRemoveTestGenerated.RemoveElse.class, UnwrapRemoveTestGenerated.UnwrapLoop.class, UnwrapRemoveTestGenerated.UnwrapTry.class, UnwrapRemoveTestGenerated.UnwrapCatch.class, UnwrapRemoveTestGenerated.RemoveCatch.class, UnwrapRemoveTestGenerated.UnwrapFinally.class, UnwrapRemoveTestGenerated.RemoveFinally.class, UnwrapRemoveTestGenerated.UnwrapLambda.class})
public class UnwrapRemoveTestGenerated extends AbstractUnwrapRemoveTest {
    @TestMetadata("idea/testData/codeInsight/unwrapAndRemove/removeExpression")
    public static class RemoveExpression extends AbstractUnwrapRemoveTest {
        public void testAllFilesPresentInRemoveExpression() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/codeInsight/unwrapAndRemove/removeExpression"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("ifInBlock.kt")
        public void testIfInBlock() throws Exception {
            doTestExpressionRemover("idea/testData/codeInsight/unwrapAndRemove/removeExpression/ifInBlock.kt");
        }
        
        @TestMetadata("ifInExpressionInReturn.kt")
        public void testIfInExpressionInReturn() throws Exception {
            doTestExpressionRemover("idea/testData/codeInsight/unwrapAndRemove/removeExpression/ifInExpressionInReturn.kt");
        }
        
        @TestMetadata("ifInReturn.kt")
        public void testIfInReturn() throws Exception {
            doTestExpressionRemover("idea/testData/codeInsight/unwrapAndRemove/removeExpression/ifInReturn.kt");
        }
        
        @TestMetadata("tryInBlock.kt")
        public void testTryInBlock() throws Exception {
            doTestExpressionRemover("idea/testData/codeInsight/unwrapAndRemove/removeExpression/tryInBlock.kt");
        }
        
        @TestMetadata("tryInReturn.kt")
        public void testTryInReturn() throws Exception {
            doTestExpressionRemover("idea/testData/codeInsight/unwrapAndRemove/removeExpression/tryInReturn.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/codeInsight/unwrapAndRemove/unwrapThen")
    public static class UnwrapThen extends AbstractUnwrapRemoveTest {
        public void testAllFilesPresentInUnwrapThen() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/codeInsight/unwrapAndRemove/unwrapThen"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("thenCompoundInBlock.kt")
        public void testThenCompoundInBlock() throws Exception {
            doTestThenUnwrapper("idea/testData/codeInsight/unwrapAndRemove/unwrapThen/thenCompoundInBlock.kt");
        }
        
        @TestMetadata("thenCompoundInReturn.kt")
        public void testThenCompoundInReturn() throws Exception {
            doTestThenUnwrapper("idea/testData/codeInsight/unwrapAndRemove/unwrapThen/thenCompoundInReturn.kt");
        }
        
        @TestMetadata("thenSimpleInReturn.kt")
        public void testThenSimpleInReturn() throws Exception {
            doTestThenUnwrapper("idea/testData/codeInsight/unwrapAndRemove/unwrapThen/thenSimpleInReturn.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/codeInsight/unwrapAndRemove/unwrapElse")
    public static class UnwrapElse extends AbstractUnwrapRemoveTest {
        public void testAllFilesPresentInUnwrapElse() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/codeInsight/unwrapAndRemove/unwrapElse"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("elseCompoundInBlock.kt")
        public void testElseCompoundInBlock() throws Exception {
            doTestElseUnwrapper("idea/testData/codeInsight/unwrapAndRemove/unwrapElse/elseCompoundInBlock.kt");
        }
        
        @TestMetadata("elseCompoundInReturn.kt")
        public void testElseCompoundInReturn() throws Exception {
            doTestElseUnwrapper("idea/testData/codeInsight/unwrapAndRemove/unwrapElse/elseCompoundInReturn.kt");
        }
        
        @TestMetadata("elseSimpleInReturn.kt")
        public void testElseSimpleInReturn() throws Exception {
            doTestElseUnwrapper("idea/testData/codeInsight/unwrapAndRemove/unwrapElse/elseSimpleInReturn.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/codeInsight/unwrapAndRemove/removeElse")
    public static class RemoveElse extends AbstractUnwrapRemoveTest {
        public void testAllFilesPresentInRemoveElse() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/codeInsight/unwrapAndRemove/removeElse"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("else.kt")
        public void testElse() throws Exception {
            doTestElseRemover("idea/testData/codeInsight/unwrapAndRemove/removeElse/else.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/codeInsight/unwrapAndRemove/unwrapLoop")
    public static class UnwrapLoop extends AbstractUnwrapRemoveTest {
        public void testAllFilesPresentInUnwrapLoop() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/codeInsight/unwrapAndRemove/unwrapLoop"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("doWhile.kt")
        public void testDoWhile() throws Exception {
            doTestLoopUnwrapper("idea/testData/codeInsight/unwrapAndRemove/unwrapLoop/doWhile.kt");
        }
        
        @TestMetadata("for.kt")
        public void testFor() throws Exception {
            doTestLoopUnwrapper("idea/testData/codeInsight/unwrapAndRemove/unwrapLoop/for.kt");
        }
        
        @TestMetadata("while.kt")
        public void testWhile() throws Exception {
            doTestLoopUnwrapper("idea/testData/codeInsight/unwrapAndRemove/unwrapLoop/while.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/codeInsight/unwrapAndRemove/unwrapTry")
    public static class UnwrapTry extends AbstractUnwrapRemoveTest {
        public void testAllFilesPresentInUnwrapTry() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/codeInsight/unwrapAndRemove/unwrapTry"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("tryCompoundInBlock.kt")
        public void testTryCompoundInBlock() throws Exception {
            doTestTryUnwrapper("idea/testData/codeInsight/unwrapAndRemove/unwrapTry/tryCompoundInBlock.kt");
        }
        
        @TestMetadata("tryCompoundInReturn.kt")
        public void testTryCompoundInReturn() throws Exception {
            doTestTryUnwrapper("idea/testData/codeInsight/unwrapAndRemove/unwrapTry/tryCompoundInReturn.kt");
        }
        
        @TestMetadata("trySimpleInReturn.kt")
        public void testTrySimpleInReturn() throws Exception {
            doTestTryUnwrapper("idea/testData/codeInsight/unwrapAndRemove/unwrapTry/trySimpleInReturn.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/codeInsight/unwrapAndRemove/unwrapCatch")
    public static class UnwrapCatch extends AbstractUnwrapRemoveTest {
        public void testAllFilesPresentInUnwrapCatch() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/codeInsight/unwrapAndRemove/unwrapCatch"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("catchCompoundInBlock.kt")
        public void testCatchCompoundInBlock() throws Exception {
            doTestCatchUnwrapper("idea/testData/codeInsight/unwrapAndRemove/unwrapCatch/catchCompoundInBlock.kt");
        }
        
        @TestMetadata("catchCompoundInReturn.kt")
        public void testCatchCompoundInReturn() throws Exception {
            doTestCatchUnwrapper("idea/testData/codeInsight/unwrapAndRemove/unwrapCatch/catchCompoundInReturn.kt");
        }
        
        @TestMetadata("catchSimpleInReturn.kt")
        public void testCatchSimpleInReturn() throws Exception {
            doTestCatchUnwrapper("idea/testData/codeInsight/unwrapAndRemove/unwrapCatch/catchSimpleInReturn.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/codeInsight/unwrapAndRemove/removeCatch")
    public static class RemoveCatch extends AbstractUnwrapRemoveTest {
        public void testAllFilesPresentInRemoveCatch() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/codeInsight/unwrapAndRemove/removeCatch"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("catch.kt")
        public void testCatch() throws Exception {
            doTestCatchRemover("idea/testData/codeInsight/unwrapAndRemove/removeCatch/catch.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/codeInsight/unwrapAndRemove/unwrapFinally")
    public static class UnwrapFinally extends AbstractUnwrapRemoveTest {
        public void testAllFilesPresentInUnwrapFinally() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/codeInsight/unwrapAndRemove/unwrapFinally"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("finallyCompoundInBlock.kt")
        public void testFinallyCompoundInBlock() throws Exception {
            doTestFinallyUnwrapper("idea/testData/codeInsight/unwrapAndRemove/unwrapFinally/finallyCompoundInBlock.kt");
        }
        
        @TestMetadata("finallyCompoundInReturn.kt")
        public void testFinallyCompoundInReturn() throws Exception {
            doTestFinallyUnwrapper("idea/testData/codeInsight/unwrapAndRemove/unwrapFinally/finallyCompoundInReturn.kt");
        }
        
        @TestMetadata("finallySimpleInReturn.kt")
        public void testFinallySimpleInReturn() throws Exception {
            doTestFinallyUnwrapper("idea/testData/codeInsight/unwrapAndRemove/unwrapFinally/finallySimpleInReturn.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/codeInsight/unwrapAndRemove/removeFinally")
    public static class RemoveFinally extends AbstractUnwrapRemoveTest {
        public void testAllFilesPresentInRemoveFinally() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/codeInsight/unwrapAndRemove/removeFinally"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("finallyInBlock.kt")
        public void testFinallyInBlock() throws Exception {
            doTestFinallyRemover("idea/testData/codeInsight/unwrapAndRemove/removeFinally/finallyInBlock.kt");
        }
        
        @TestMetadata("finallyInReturn.kt")
        public void testFinallyInReturn() throws Exception {
            doTestFinallyRemover("idea/testData/codeInsight/unwrapAndRemove/removeFinally/finallyInReturn.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/codeInsight/unwrapAndRemove/unwrapLambda")
    public static class UnwrapLambda extends AbstractUnwrapRemoveTest {
        public void testAllFilesPresentInUnwrapLambda() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/codeInsight/unwrapAndRemove/unwrapLambda"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("lambdaCallCompoundInBlock.kt")
        public void testLambdaCallCompoundInBlock() throws Exception {
            doTestLambdaUnwrapper("idea/testData/codeInsight/unwrapAndRemove/unwrapLambda/lambdaCallCompoundInBlock.kt");
        }
        
        @TestMetadata("lambdaCallCompoundInReturn.kt")
        public void testLambdaCallCompoundInReturn() throws Exception {
            doTestLambdaUnwrapper("idea/testData/codeInsight/unwrapAndRemove/unwrapLambda/lambdaCallCompoundInReturn.kt");
        }
        
        @TestMetadata("lambdaCallInBlock.kt")
        public void testLambdaCallInBlock() throws Exception {
            doTestLambdaUnwrapper("idea/testData/codeInsight/unwrapAndRemove/unwrapLambda/lambdaCallInBlock.kt");
        }
        
        @TestMetadata("lambdaCallInBlock2.kt")
        public void testLambdaCallInBlock2() throws Exception {
            doTestLambdaUnwrapper("idea/testData/codeInsight/unwrapAndRemove/unwrapLambda/lambdaCallInBlock2.kt");
        }
        
        @TestMetadata("lambdaCallSimpleInReturn.kt")
        public void testLambdaCallSimpleInReturn() throws Exception {
            doTestLambdaUnwrapper("idea/testData/codeInsight/unwrapAndRemove/unwrapLambda/lambdaCallSimpleInReturn.kt");
        }
        
        @TestMetadata("lambdaInBlock.kt")
        public void testLambdaInBlock() throws Exception {
            doTestLambdaUnwrapper("idea/testData/codeInsight/unwrapAndRemove/unwrapLambda/lambdaInBlock.kt");
        }
        
        @TestMetadata("lambdaNonLocalPropertyCompoundInBlock.kt")
        public void testLambdaNonLocalPropertyCompoundInBlock() throws Exception {
            doTestLambdaUnwrapper("idea/testData/codeInsight/unwrapAndRemove/unwrapLambda/lambdaNonLocalPropertyCompoundInBlock.kt");
        }
        
        @TestMetadata("lambdaNonLocalPropertyInBlock.kt")
        public void testLambdaNonLocalPropertyInBlock() throws Exception {
            doTestLambdaUnwrapper("idea/testData/codeInsight/unwrapAndRemove/unwrapLambda/lambdaNonLocalPropertyInBlock.kt");
        }
        
        @TestMetadata("lambdaPropertyCompoundInBlock.kt")
        public void testLambdaPropertyCompoundInBlock() throws Exception {
            doTestLambdaUnwrapper("idea/testData/codeInsight/unwrapAndRemove/unwrapLambda/lambdaPropertyCompoundInBlock.kt");
        }
        
        @TestMetadata("lambdaPropertyInBlock.kt")
        public void testLambdaPropertyInBlock() throws Exception {
            doTestLambdaUnwrapper("idea/testData/codeInsight/unwrapAndRemove/unwrapLambda/lambdaPropertyInBlock.kt");
        }
        
    }
    
    public static Test suite() {
        TestSuite suite = new TestSuite("UnwrapRemoveTestGenerated");
        suite.addTestSuite(RemoveExpression.class);
        suite.addTestSuite(UnwrapThen.class);
        suite.addTestSuite(UnwrapElse.class);
        suite.addTestSuite(RemoveElse.class);
        suite.addTestSuite(UnwrapLoop.class);
        suite.addTestSuite(UnwrapTry.class);
        suite.addTestSuite(UnwrapCatch.class);
        suite.addTestSuite(RemoveCatch.class);
        suite.addTestSuite(UnwrapFinally.class);
        suite.addTestSuite(RemoveFinally.class);
        suite.addTestSuite(UnwrapLambda.class);
        return suite;
    }
}
