package org.jetbrains.uast.kotlin

public final class LambdaReturnKt {
    public static final fun foo() : void {
        var lam1: kotlin.jvm.functions.Function1<? super java.lang.Integer,? extends java.lang.Integer> = { @org.jetbrains.annotations.NotNull var a: int ->

            var b: int = 1
            return a + b
        }
        var lam2: kotlin.jvm.functions.Function1<? super java.lang.Integer,? extends java.lang.Integer> = { @org.jetbrains.annotations.NotNull var a: int ->

            var c: int = 1
            return if (a > 0) a + c else a - c
        }
        var lam3: kotlin.jvm.functions.Function1<? super java.lang.Integer,? extends java.lang.Integer> = lbd@ { @org.jetbrains.annotations.NotNull var a: int ->

            var d: int = 1
            return a + d
        }
        var lam4: kotlin.jvm.functions.Function1<? super java.lang.Integer,? extends java.lang.String> = fun (@org.jetbrains.annotations.NotNull var a: int) {
                if (a < 5) return "5"
                if (a > 0) return "1" else return "2"
        }
        var lam5: kotlin.jvm.functions.Function1<? super java.lang.Integer,? extends java.lang.String> = fun (@org.jetbrains.annotations.NotNull var a: int) {
                return "a" + a
        }
        bar({
            if (it > 5) return
            var b: int = 1
            return it + b
        })
        var x: kotlin.jvm.functions.Function0<? extends kotlin.Unit> = {
            @org.jetbrains.annotations.NotNull var vardbcd0724: <ErrorType> = listOf(1, 2)
            @org.jetbrains.annotations.NotNull var a: int = vardbcd0724.<anonymous class>()
            @org.jetbrains.annotations.NotNull var b: int = vardbcd0724.<anonymous class>()
        }
        var y: kotlin.jvm.functions.Function0<? extends kotlin.Unit> = {
            listOf(1)
        }
    }
    private static final fun bar(@org.jetbrains.annotations.NotNull lmbd: kotlin.jvm.functions.Function1<? super java.lang.Integer,java.lang.Integer>) : void {
        invoke(1)
    }
}
