package

public fun test_1(/*0*/ namedFunction: KtNamedFunction, /*1*/ functionLiteral: KtFunctionLiteral, /*2*/ cond: kotlin.Boolean): kotlin.Unit

public abstract class ASTDelegatePsiElement {
    public constructor ASTDelegatePsiElement()
    public final fun bar(): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public interface KtFunction {
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open fun foo(): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public final class KtFunctionLiteral : ASTDelegatePsiElement, KtFunction {
    public constructor KtFunctionLiteral()
    public final override /*1*/ /*fake_override*/ fun bar(): kotlin.Unit
    public open override /*2*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun foo(): kotlin.Unit
    public open override /*2*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*2*/ /*fake_override*/ fun toString(): kotlin.String
}

public final class KtNamedFunction : ASTDelegatePsiElement, KtFunction {
    public constructor KtNamedFunction()
    public final override /*1*/ /*fake_override*/ fun bar(): kotlin.Unit
    public final fun baz(): kotlin.Unit
    public open override /*2*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun foo(): kotlin.Unit
    public open override /*2*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*2*/ /*fake_override*/ fun toString(): kotlin.String
}
