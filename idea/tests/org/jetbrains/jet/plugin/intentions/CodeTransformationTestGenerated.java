/*
 * Copyright 2010-2014 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.jet.plugin.intentions;

import junit.framework.Assert;
import junit.framework.Test;
import junit.framework.TestSuite;

import java.io.File;
import java.util.regex.Pattern;
import org.jetbrains.jet.JetTestUtils;
import org.jetbrains.jet.test.InnerTestClasses;
import org.jetbrains.jet.test.TestMetadata;

import org.jetbrains.jet.plugin.intentions.AbstractCodeTransformationTest;

/** This class is generated by {@link org.jetbrains.jet.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@InnerTestClasses({CodeTransformationTestGenerated.ElvisToIfThen.class, CodeTransformationTestGenerated.IfThenToElvis.class, CodeTransformationTestGenerated.SafeAccessToIfThen.class, CodeTransformationTestGenerated.IfThenToSafeAccess.class, CodeTransformationTestGenerated.IfToAssignment.class, CodeTransformationTestGenerated.IfToReturn.class, CodeTransformationTestGenerated.IfToReturnAsymmetrically.class, CodeTransformationTestGenerated.WhenToAssignment.class, CodeTransformationTestGenerated.WhenToReturn.class, CodeTransformationTestGenerated.AssignmentToIf.class, CodeTransformationTestGenerated.AssignmentToWhen.class, CodeTransformationTestGenerated.PropertyToIf.class, CodeTransformationTestGenerated.PropertyToWhen.class, CodeTransformationTestGenerated.ReturnToIf.class, CodeTransformationTestGenerated.ReturnToWhen.class, CodeTransformationTestGenerated.IfToWhen.class, CodeTransformationTestGenerated.WhenToIf.class, CodeTransformationTestGenerated.Flatten.class, CodeTransformationTestGenerated.Merge.class, CodeTransformationTestGenerated.IntroduceSubject.class, CodeTransformationTestGenerated.EliminateSubject.class, CodeTransformationTestGenerated.Split.class, CodeTransformationTestGenerated.Join.class, CodeTransformationTestGenerated.ConvertMemberToExtension.class, CodeTransformationTestGenerated.ReconstructedType.class, CodeTransformationTestGenerated.RemoveUnnecessaryParentheses.class, CodeTransformationTestGenerated.ReplaceWithDotQualifiedMethodCall.class, CodeTransformationTestGenerated.ReplaceWithInfixFunctionCall.class, CodeTransformationTestGenerated.RemoveCurlyBracesFromTemplate.class, CodeTransformationTestGenerated.MoveLambdaInsideParentheses.class, CodeTransformationTestGenerated.MoveLambdaOutsideParentheses.class, CodeTransformationTestGenerated.ReplaceExplicitFunctionLiteralParamWithIt.class, CodeTransformationTestGenerated.ReplaceItWithExplicitFunctionLiteralParam.class, CodeTransformationTestGenerated.RemoveBraces.class, CodeTransformationTestGenerated.AddBraces.class, CodeTransformationTestGenerated.ReplaceGetIntention.class, CodeTransformationTestGenerated.ReplaceContainsIntention.class, CodeTransformationTestGenerated.ReplaceBinaryInfixIntention.class, CodeTransformationTestGenerated.ReplaceUnaryPrefixIntention.class, CodeTransformationTestGenerated.ReplaceInvokeIntention.class, CodeTransformationTestGenerated.SimplifyNegatedBinaryExpressionIntention.class, CodeTransformationTestGenerated.ConvertNegatedBooleanSequence.class, CodeTransformationTestGenerated.ConvertNegatedExpressionWithDemorgansLaw.class, CodeTransformationTestGenerated.SwapBinaryExpression.class, CodeTransformationTestGenerated.SplitIf.class, CodeTransformationTestGenerated.ReplaceWithOperatorAssign.class, CodeTransformationTestGenerated.ReplaceWithTraditionalAssignment.class, CodeTransformationTestGenerated.SimplifyBooleanWithConstants.class, CodeTransformationTestGenerated.InsertExplicitTypeArguments.class})
public class CodeTransformationTestGenerated extends AbstractCodeTransformationTest {
    @TestMetadata("idea/testData/intentions/branched/elvisToIfThen")
    public static class ElvisToIfThen extends AbstractCodeTransformationTest {
        public void testAllFilesPresentInElvisToIfThen() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/branched/elvisToIfThen"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("callExpression.kt")
        public void testCallExpression() throws Exception {
            doTestElvisToIfThen("idea/testData/intentions/branched/elvisToIfThen/callExpression.kt");
        }
        
        @TestMetadata("callExpressionParens.kt")
        public void testCallExpressionParens() throws Exception {
            doTestElvisToIfThen("idea/testData/intentions/branched/elvisToIfThen/callExpressionParens.kt");
        }
        
        @TestMetadata("elvisAsExpression.kt")
        public void testElvisAsExpression() throws Exception {
            doTestElvisToIfThen("idea/testData/intentions/branched/elvisToIfThen/elvisAsExpression.kt");
        }
        
        @TestMetadata("localValLhs.kt")
        public void testLocalValLhs() throws Exception {
            doTestElvisToIfThen("idea/testData/intentions/branched/elvisToIfThen/localValLhs.kt");
        }
        
        @TestMetadata("localVarLhs.kt")
        public void testLocalVarLhs() throws Exception {
            doTestElvisToIfThen("idea/testData/intentions/branched/elvisToIfThen/localVarLhs.kt");
        }
        
        @TestMetadata("simpleNameExpression.kt")
        public void testSimpleNameExpression() throws Exception {
            doTestElvisToIfThen("idea/testData/intentions/branched/elvisToIfThen/simpleNameExpression.kt");
        }
        
        @TestMetadata("simpleNameExpressionInParens.kt")
        public void testSimpleNameExpressionInParens() throws Exception {
            doTestElvisToIfThen("idea/testData/intentions/branched/elvisToIfThen/simpleNameExpressionInParens.kt");
        }
        
        @TestMetadata("topLevelVal.kt")
        public void testTopLevelVal() throws Exception {
            doTestElvisToIfThen("idea/testData/intentions/branched/elvisToIfThen/topLevelVal.kt");
        }
        
        @TestMetadata("topLevelValCustomGetter.kt")
        public void testTopLevelValCustomGetter() throws Exception {
            doTestElvisToIfThen("idea/testData/intentions/branched/elvisToIfThen/topLevelValCustomGetter.kt");
        }
        
        @TestMetadata("topLevelVar.kt")
        public void testTopLevelVar() throws Exception {
            doTestElvisToIfThen("idea/testData/intentions/branched/elvisToIfThen/topLevelVar.kt");
        }
        
        @TestMetadata("topLevelVarCustomGetter.kt")
        public void testTopLevelVarCustomGetter() throws Exception {
            doTestElvisToIfThen("idea/testData/intentions/branched/elvisToIfThen/topLevelVarCustomGetter.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/branched/ifThenToElvis")
    public static class IfThenToElvis extends AbstractCodeTransformationTest {
        public void testAllFilesPresentInIfThenToElvis() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/branched/ifThenToElvis"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("blockHasMoreThanOneStatement.kt")
        public void testBlockHasMoreThanOneStatement() throws Exception {
            doTestIfThenToElvis("idea/testData/intentions/branched/ifThenToElvis/blockHasMoreThanOneStatement.kt");
        }
        
        @TestMetadata("blockUsesDifferentVar.kt")
        public void testBlockUsesDifferentVar() throws Exception {
            doTestIfThenToElvis("idea/testData/intentions/branched/ifThenToElvis/blockUsesDifferentVar.kt");
        }
        
        @TestMetadata("conditionComparesNullWithNull.kt")
        public void testConditionComparesNullWithNull() throws Exception {
            doTestIfThenToElvis("idea/testData/intentions/branched/ifThenToElvis/conditionComparesNullWithNull.kt");
        }
        
        @TestMetadata("conditionInvalidBinaryExp.kt")
        public void testConditionInvalidBinaryExp() throws Exception {
            doTestIfThenToElvis("idea/testData/intentions/branched/ifThenToElvis/conditionInvalidBinaryExp.kt");
        }
        
        @TestMetadata("conditionNotBinaryExpr.kt")
        public void testConditionNotBinaryExpr() throws Exception {
            doTestIfThenToElvis("idea/testData/intentions/branched/ifThenToElvis/conditionNotBinaryExpr.kt");
        }
        
        @TestMetadata("doesNotinlineValueIfUsedMoreThanOnce.kt")
        public void testDoesNotinlineValueIfUsedMoreThanOnce() throws Exception {
            doTestIfThenToElvis("idea/testData/intentions/branched/ifThenToElvis/doesNotinlineValueIfUsedMoreThanOnce.kt");
        }
        
        @TestMetadata("doesNotinlineValueOutsideOfScope.kt")
        public void testDoesNotinlineValueOutsideOfScope() throws Exception {
            doTestIfThenToElvis("idea/testData/intentions/branched/ifThenToElvis/doesNotinlineValueOutsideOfScope.kt");
        }
        
        @TestMetadata("emptyCondition.kt")
        public void testEmptyCondition() throws Exception {
            doTestIfThenToElvis("idea/testData/intentions/branched/ifThenToElvis/emptyCondition.kt");
        }
        
        @TestMetadata("emptyElseBlock.kt")
        public void testEmptyElseBlock() throws Exception {
            doTestIfThenToElvis("idea/testData/intentions/branched/ifThenToElvis/emptyElseBlock.kt");
        }
        
        @TestMetadata("emptyThenBlock.kt")
        public void testEmptyThenBlock() throws Exception {
            doTestIfThenToElvis("idea/testData/intentions/branched/ifThenToElvis/emptyThenBlock.kt");
        }
        
        @TestMetadata("ifAndElseBothInBlocks.kt")
        public void testIfAndElseBothInBlocks() throws Exception {
            doTestIfThenToElvis("idea/testData/intentions/branched/ifThenToElvis/ifAndElseBothInBlocks.kt");
        }
        
        @TestMetadata("ifAndElseNotInBlocks.kt")
        public void testIfAndElseNotInBlocks() throws Exception {
            doTestIfThenToElvis("idea/testData/intentions/branched/ifThenToElvis/ifAndElseNotInBlocks.kt");
        }
        
        @TestMetadata("ifAsExpression.kt")
        public void testIfAsExpression() throws Exception {
            doTestIfThenToElvis("idea/testData/intentions/branched/ifThenToElvis/ifAsExpression.kt");
        }
        
        @TestMetadata("lhsEqualsNull.kt")
        public void testLhsEqualsNull() throws Exception {
            doTestIfThenToElvis("idea/testData/intentions/branched/ifThenToElvis/lhsEqualsNull.kt");
        }
        
        @TestMetadata("lhsNotEqualsNull.kt")
        public void testLhsNotEqualsNull() throws Exception {
            doTestIfThenToElvis("idea/testData/intentions/branched/ifThenToElvis/lhsNotEqualsNull.kt");
        }
        
        @TestMetadata("missingElseClause.kt")
        public void testMissingElseClause() throws Exception {
            doTestIfThenToElvis("idea/testData/intentions/branched/ifThenToElvis/missingElseClause.kt");
        }
        
        @TestMetadata("missingThenClause.kt")
        public void testMissingThenClause() throws Exception {
            doTestIfThenToElvis("idea/testData/intentions/branched/ifThenToElvis/missingThenClause.kt");
        }
        
        @TestMetadata("noCondition.kt")
        public void testNoCondition() throws Exception {
            doTestIfThenToElvis("idea/testData/intentions/branched/ifThenToElvis/noCondition.kt");
        }
        
        @TestMetadata("noNullInCondition.kt")
        public void testNoNullInCondition() throws Exception {
            doTestIfThenToElvis("idea/testData/intentions/branched/ifThenToElvis/noNullInCondition.kt");
        }
        
        @TestMetadata("notApplicableForFunction.kt")
        public void testNotApplicableForFunction() throws Exception {
            doTestIfThenToElvis("idea/testData/intentions/branched/ifThenToElvis/notApplicableForFunction.kt");
        }
        
        @TestMetadata("notApplicableForLocalVar.kt")
        public void testNotApplicableForLocalVar() throws Exception {
            doTestIfThenToElvis("idea/testData/intentions/branched/ifThenToElvis/notApplicableForLocalVar.kt");
        }
        
        @TestMetadata("nullBranchAlsoNull.kt")
        public void testNullBranchAlsoNull() throws Exception {
            doTestIfThenToElvis("idea/testData/intentions/branched/ifThenToElvis/nullBranchAlsoNull.kt");
        }
        
        @TestMetadata("otherBlockHasMoreThanOneStatement.kt")
        public void testOtherBlockHasMoreThanOneStatement() throws Exception {
            doTestIfThenToElvis("idea/testData/intentions/branched/ifThenToElvis/otherBlockHasMoreThanOneStatement.kt");
        }
        
        @TestMetadata("rhsEqualsNull.kt")
        public void testRhsEqualsNull() throws Exception {
            doTestIfThenToElvis("idea/testData/intentions/branched/ifThenToElvis/rhsEqualsNull.kt");
        }
        
        @TestMetadata("rhsNotEqualsNull.kt")
        public void testRhsNotEqualsNull() throws Exception {
            doTestIfThenToElvis("idea/testData/intentions/branched/ifThenToElvis/rhsNotEqualsNull.kt");
        }
        
        @TestMetadata("thenAndElseBothNull.kt")
        public void testThenAndElseBothNull() throws Exception {
            doTestIfThenToElvis("idea/testData/intentions/branched/ifThenToElvis/thenAndElseBothNull.kt");
        }
        
        @TestMetadata("willNotInlineClassProperty.kt")
        public void testWillNotInlineClassProperty() throws Exception {
            doTestIfThenToElvis("idea/testData/intentions/branched/ifThenToElvis/willNotInlineClassProperty.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/branched/safeAccessToIfThen")
    public static class SafeAccessToIfThen extends AbstractCodeTransformationTest {
        public void testAllFilesPresentInSafeAccessToIfThen() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/branched/safeAccessToIfThen"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("binaryExpressionLhs.kt")
        public void testBinaryExpressionLhs() throws Exception {
            doTestSafeAccessToIfThen("idea/testData/intentions/branched/safeAccessToIfThen/binaryExpressionLhs.kt");
        }
        
        @TestMetadata("callExpression.kt")
        public void testCallExpression() throws Exception {
            doTestSafeAccessToIfThen("idea/testData/intentions/branched/safeAccessToIfThen/callExpression.kt");
        }
        
        @TestMetadata("callExpressionParens.kt")
        public void testCallExpressionParens() throws Exception {
            doTestSafeAccessToIfThen("idea/testData/intentions/branched/safeAccessToIfThen/callExpressionParens.kt");
        }
        
        @TestMetadata("customGetterAsReceiver.kt")
        public void testCustomGetterAsReceiver() throws Exception {
            doTestSafeAccessToIfThen("idea/testData/intentions/branched/safeAccessToIfThen/customGetterAsReceiver.kt");
        }
        
        @TestMetadata("localValAsReceiver.kt")
        public void testLocalValAsReceiver() throws Exception {
            doTestSafeAccessToIfThen("idea/testData/intentions/branched/safeAccessToIfThen/localValAsReceiver.kt");
        }
        
        @TestMetadata("localValLhs.kt")
        public void testLocalValLhs() throws Exception {
            doTestSafeAccessToIfThen("idea/testData/intentions/branched/safeAccessToIfThen/localValLhs.kt");
        }
        
        @TestMetadata("localVarLhs.kt")
        public void testLocalVarLhs() throws Exception {
            doTestSafeAccessToIfThen("idea/testData/intentions/branched/safeAccessToIfThen/localVarLhs.kt");
        }
        
        @TestMetadata("resultAssignedToLocalVal.kt")
        public void testResultAssignedToLocalVal() throws Exception {
            doTestSafeAccessToIfThen("idea/testData/intentions/branched/safeAccessToIfThen/resultAssignedToLocalVal.kt");
        }
        
        @TestMetadata("safeAccessAsFunctionArgument.kt")
        public void testSafeAccessAsFunctionArgument() throws Exception {
            doTestSafeAccessToIfThen("idea/testData/intentions/branched/safeAccessToIfThen/safeAccessAsFunctionArgument.kt");
        }
        
        @TestMetadata("simpleNameExpression.kt")
        public void testSimpleNameExpression() throws Exception {
            doTestSafeAccessToIfThen("idea/testData/intentions/branched/safeAccessToIfThen/simpleNameExpression.kt");
        }
        
        @TestMetadata("simpleNameExpressionInParens.kt")
        public void testSimpleNameExpressionInParens() throws Exception {
            doTestSafeAccessToIfThen("idea/testData/intentions/branched/safeAccessToIfThen/simpleNameExpressionInParens.kt");
        }
        
        @TestMetadata("simplePropertyAsReceiver.kt")
        public void testSimplePropertyAsReceiver() throws Exception {
            doTestSafeAccessToIfThen("idea/testData/intentions/branched/safeAccessToIfThen/simplePropertyAsReceiver.kt");
        }
        
        @TestMetadata("simplePropertyAsReceiver2.kt")
        public void testSimplePropertyAsReceiver2() throws Exception {
            doTestSafeAccessToIfThen("idea/testData/intentions/branched/safeAccessToIfThen/simplePropertyAsReceiver2.kt");
        }
        
        @TestMetadata("simplePropertyAsReceiver3.kt")
        public void testSimplePropertyAsReceiver3() throws Exception {
            doTestSafeAccessToIfThen("idea/testData/intentions/branched/safeAccessToIfThen/simplePropertyAsReceiver3.kt");
        }
        
        @TestMetadata("topLevelVal.kt")
        public void testTopLevelVal() throws Exception {
            doTestSafeAccessToIfThen("idea/testData/intentions/branched/safeAccessToIfThen/topLevelVal.kt");
        }
        
        @TestMetadata("topLevelValCustomGetter.kt")
        public void testTopLevelValCustomGetter() throws Exception {
            doTestSafeAccessToIfThen("idea/testData/intentions/branched/safeAccessToIfThen/topLevelValCustomGetter.kt");
        }
        
        @TestMetadata("topLevelVar.kt")
        public void testTopLevelVar() throws Exception {
            doTestSafeAccessToIfThen("idea/testData/intentions/branched/safeAccessToIfThen/topLevelVar.kt");
        }
        
        @TestMetadata("topLevelVarCustomGetter.kt")
        public void testTopLevelVarCustomGetter() throws Exception {
            doTestSafeAccessToIfThen("idea/testData/intentions/branched/safeAccessToIfThen/topLevelVarCustomGetter.kt");
        }
        
        @TestMetadata("usedAsFunctionRhs.kt")
        public void testUsedAsFunctionRhs() throws Exception {
            doTestSafeAccessToIfThen("idea/testData/intentions/branched/safeAccessToIfThen/usedAsFunctionRhs.kt");
        }
        
        @TestMetadata("usedAsResultOfCheckedIf.kt")
        public void testUsedAsResultOfCheckedIf() throws Exception {
            doTestSafeAccessToIfThen("idea/testData/intentions/branched/safeAccessToIfThen/usedAsResultOfCheckedIf.kt");
        }
        
        @TestMetadata("usedAsReturnValue.kt")
        public void testUsedAsReturnValue() throws Exception {
            doTestSafeAccessToIfThen("idea/testData/intentions/branched/safeAccessToIfThen/usedAsReturnValue.kt");
        }
        
        @TestMetadata("usedInUncheckedIfExpression.kt")
        public void testUsedInUncheckedIfExpression() throws Exception {
            doTestSafeAccessToIfThen("idea/testData/intentions/branched/safeAccessToIfThen/usedInUncheckedIfExpression.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/branched/ifThenToSafeAccess")
    @InnerTestClasses({})
    public static class IfThenToSafeAccess extends AbstractCodeTransformationTest {
        public void testAllFilesPresentInIfThenToSafeAccess() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/branched/ifThenToSafeAccess"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("blockHasMoreThanOneStatement.kt")
        public void testBlockHasMoreThanOneStatement() throws Exception {
            doTestIfThenToSafeAccess("idea/testData/intentions/branched/ifThenToSafeAccess/blockHasMoreThanOneStatement.kt");
        }
        
        @TestMetadata("blockUsesDifferentVar.kt")
        public void testBlockUsesDifferentVar() throws Exception {
            doTestIfThenToSafeAccess("idea/testData/intentions/branched/ifThenToSafeAccess/blockUsesDifferentVar.kt");
        }
        
        @TestMetadata("conditionComparesNullWithNull.kt")
        public void testConditionComparesNullWithNull() throws Exception {
            doTestIfThenToSafeAccess("idea/testData/intentions/branched/ifThenToSafeAccess/conditionComparesNullWithNull.kt");
        }
        
        @TestMetadata("conditionInvalidBinaryExp.kt")
        public void testConditionInvalidBinaryExp() throws Exception {
            doTestIfThenToSafeAccess("idea/testData/intentions/branched/ifThenToSafeAccess/conditionInvalidBinaryExp.kt");
        }
        
        @TestMetadata("conditionNotBinaryExpr.kt")
        public void testConditionNotBinaryExpr() throws Exception {
            doTestIfThenToSafeAccess("idea/testData/intentions/branched/ifThenToSafeAccess/conditionNotBinaryExpr.kt");
        }
        
        @TestMetadata("doesNotinlineValueIfUsedMoreThanOnce.kt")
        public void testDoesNotinlineValueIfUsedMoreThanOnce() throws Exception {
            doTestIfThenToSafeAccess("idea/testData/intentions/branched/ifThenToSafeAccess/doesNotinlineValueIfUsedMoreThanOnce.kt");
        }
        
        @TestMetadata("doesNotinlineValueOutsideOfScope.kt")
        public void testDoesNotinlineValueOutsideOfScope() throws Exception {
            doTestIfThenToSafeAccess("idea/testData/intentions/branched/ifThenToSafeAccess/doesNotinlineValueOutsideOfScope.kt");
        }
        
        @TestMetadata("emptyCondition.kt")
        public void testEmptyCondition() throws Exception {
            doTestIfThenToSafeAccess("idea/testData/intentions/branched/ifThenToSafeAccess/emptyCondition.kt");
        }
        
        @TestMetadata("emptyElseBlock.kt")
        public void testEmptyElseBlock() throws Exception {
            doTestIfThenToSafeAccess("idea/testData/intentions/branched/ifThenToSafeAccess/emptyElseBlock.kt");
        }
        
        @TestMetadata("emptyThenBlock.kt")
        public void testEmptyThenBlock() throws Exception {
            doTestIfThenToSafeAccess("idea/testData/intentions/branched/ifThenToSafeAccess/emptyThenBlock.kt");
        }
        
        @TestMetadata("ifAndElseBothInBlocks.kt")
        public void testIfAndElseBothInBlocks() throws Exception {
            doTestIfThenToSafeAccess("idea/testData/intentions/branched/ifThenToSafeAccess/ifAndElseBothInBlocks.kt");
        }
        
        @TestMetadata("ifAndElseNotInBlocks.kt")
        public void testIfAndElseNotInBlocks() throws Exception {
            doTestIfThenToSafeAccess("idea/testData/intentions/branched/ifThenToSafeAccess/ifAndElseNotInBlocks.kt");
        }
        
        @TestMetadata("ifAsExpression.kt")
        public void testIfAsExpression() throws Exception {
            doTestIfThenToSafeAccess("idea/testData/intentions/branched/ifThenToSafeAccess/ifAsExpression.kt");
        }
        
        @TestMetadata("lhsEqualsNull.kt")
        public void testLhsEqualsNull() throws Exception {
            doTestIfThenToSafeAccess("idea/testData/intentions/branched/ifThenToSafeAccess/lhsEqualsNull.kt");
        }
        
        @TestMetadata("lhsNotEqualsNull.kt")
        public void testLhsNotEqualsNull() throws Exception {
            doTestIfThenToSafeAccess("idea/testData/intentions/branched/ifThenToSafeAccess/lhsNotEqualsNull.kt");
        }
        
        @TestMetadata("missingNecessaryElseClause.kt")
        public void testMissingNecessaryElseClause() throws Exception {
            doTestIfThenToSafeAccess("idea/testData/intentions/branched/ifThenToSafeAccess/missingNecessaryElseClause.kt");
        }
        
        @TestMetadata("missingNecessaryThenClause.kt")
        public void testMissingNecessaryThenClause() throws Exception {
            doTestIfThenToSafeAccess("idea/testData/intentions/branched/ifThenToSafeAccess/missingNecessaryThenClause.kt");
        }
        
        @TestMetadata("noCondition.kt")
        public void testNoCondition() throws Exception {
            doTestIfThenToSafeAccess("idea/testData/intentions/branched/ifThenToSafeAccess/noCondition.kt");
        }
        
        @TestMetadata("noElseBlock.kt")
        public void testNoElseBlock() throws Exception {
            doTestIfThenToSafeAccess("idea/testData/intentions/branched/ifThenToSafeAccess/noElseBlock.kt");
        }
        
        @TestMetadata("noNullInCondition.kt")
        public void testNoNullInCondition() throws Exception {
            doTestIfThenToSafeAccess("idea/testData/intentions/branched/ifThenToSafeAccess/noNullInCondition.kt");
        }
        
        @TestMetadata("noNullInCondition2.kt")
        public void testNoNullInCondition2() throws Exception {
            doTestIfThenToSafeAccess("idea/testData/intentions/branched/ifThenToSafeAccess/noNullInCondition2.kt");
        }
        
        @TestMetadata("noThenBlock.kt")
        public void testNoThenBlock() throws Exception {
            doTestIfThenToSafeAccess("idea/testData/intentions/branched/ifThenToSafeAccess/noThenBlock.kt");
        }
        
        @TestMetadata("notApplicableForFunction.kt")
        public void testNotApplicableForFunction() throws Exception {
            doTestIfThenToSafeAccess("idea/testData/intentions/branched/ifThenToSafeAccess/notApplicableForFunction.kt");
        }
        
        @TestMetadata("notApplicableForLocalVar.kt")
        public void testNotApplicableForLocalVar() throws Exception {
            doTestIfThenToSafeAccess("idea/testData/intentions/branched/ifThenToSafeAccess/notApplicableForLocalVar.kt");
        }
        
        @TestMetadata("otherBlockHasMoreThanOneStatement.kt")
        public void testOtherBlockHasMoreThanOneStatement() throws Exception {
            doTestIfThenToSafeAccess("idea/testData/intentions/branched/ifThenToSafeAccess/otherBlockHasMoreThanOneStatement.kt");
        }
        
        @TestMetadata("rhsEqualsNull.kt")
        public void testRhsEqualsNull() throws Exception {
            doTestIfThenToSafeAccess("idea/testData/intentions/branched/ifThenToSafeAccess/rhsEqualsNull.kt");
        }
        
        @TestMetadata("rhsNotEqualsNull.kt")
        public void testRhsNotEqualsNull() throws Exception {
            doTestIfThenToSafeAccess("idea/testData/intentions/branched/ifThenToSafeAccess/rhsNotEqualsNull.kt");
        }
        
        @TestMetadata("thenAndElseBothNull.kt")
        public void testThenAndElseBothNull() throws Exception {
            doTestIfThenToSafeAccess("idea/testData/intentions/branched/ifThenToSafeAccess/thenAndElseBothNull.kt");
        }
        
        @TestMetadata("thenAndElseNotNull.kt")
        public void testThenAndElseNotNull() throws Exception {
            doTestIfThenToSafeAccess("idea/testData/intentions/branched/ifThenToSafeAccess/thenAndElseNotNull.kt");
        }
        
        @TestMetadata("unacceptableEmptyElseBlock.kt")
        public void testUnacceptableEmptyElseBlock() throws Exception {
            doTestIfThenToSafeAccess("idea/testData/intentions/branched/ifThenToSafeAccess/unacceptableEmptyElseBlock.kt");
        }
        
        @TestMetadata("unacceptableEmptyThenBlock.kt")
        public void testUnacceptableEmptyThenBlock() throws Exception {
            doTestIfThenToSafeAccess("idea/testData/intentions/branched/ifThenToSafeAccess/unacceptableEmptyThenBlock.kt");
        }
        
        @TestMetadata("unacceptableNoElseBlock.kt")
        public void testUnacceptableNoElseBlock() throws Exception {
            doTestIfThenToSafeAccess("idea/testData/intentions/branched/ifThenToSafeAccess/unacceptableNoElseBlock.kt");
        }
        
        @TestMetadata("unacceptableNoThenBlock.kt")
        public void testUnacceptableNoThenBlock() throws Exception {
            doTestIfThenToSafeAccess("idea/testData/intentions/branched/ifThenToSafeAccess/unacceptableNoThenBlock.kt");
        }
        
        @TestMetadata("willNotInlineClassProperty.kt")
        public void testWillNotInlineClassProperty() throws Exception {
            doTestIfThenToSafeAccess("idea/testData/intentions/branched/ifThenToSafeAccess/willNotInlineClassProperty.kt");
        }
        
        public static Test innerSuite() {
            TestSuite suite = new TestSuite("IfThenToSafeAccess");
            suite.addTestSuite(IfThenToSafeAccess.class);
            return suite;
        }
    }
    
    @TestMetadata("idea/testData/intentions/branched/folding/ifToAssignment")
    public static class IfToAssignment extends AbstractCodeTransformationTest {
        public void testAllFilesPresentInIfToAssignment() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/branched/folding/ifToAssignment"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("innerIfTransformed.kt")
        public void testInnerIfTransformed() throws Exception {
            doTestFoldIfToAssignment("idea/testData/intentions/branched/folding/ifToAssignment/innerIfTransformed.kt");
        }
        
        @TestMetadata("simpleIf.kt")
        public void testSimpleIf() throws Exception {
            doTestFoldIfToAssignment("idea/testData/intentions/branched/folding/ifToAssignment/simpleIf.kt");
        }
        
        @TestMetadata("simpleIfWithAugmentedAssignment.kt")
        public void testSimpleIfWithAugmentedAssignment() throws Exception {
            doTestFoldIfToAssignment("idea/testData/intentions/branched/folding/ifToAssignment/simpleIfWithAugmentedAssignment.kt");
        }
        
        @TestMetadata("simpleIfWithBlocks.kt")
        public void testSimpleIfWithBlocks() throws Exception {
            doTestFoldIfToAssignment("idea/testData/intentions/branched/folding/ifToAssignment/simpleIfWithBlocks.kt");
        }
        
        @TestMetadata("simpleIfWithShadowedVar.kt")
        public void testSimpleIfWithShadowedVar() throws Exception {
            doTestFoldIfToAssignment("idea/testData/intentions/branched/folding/ifToAssignment/simpleIfWithShadowedVar.kt");
        }
        
        @TestMetadata("simpleIfWithUnmatchedAssignmentOps.kt")
        public void testSimpleIfWithUnmatchedAssignmentOps() throws Exception {
            doTestFoldIfToAssignment("idea/testData/intentions/branched/folding/ifToAssignment/simpleIfWithUnmatchedAssignmentOps.kt");
        }
        
        @TestMetadata("simpleIfWithUnmatchedAssignments.kt")
        public void testSimpleIfWithUnmatchedAssignments() throws Exception {
            doTestFoldIfToAssignment("idea/testData/intentions/branched/folding/ifToAssignment/simpleIfWithUnmatchedAssignments.kt");
        }
        
        @TestMetadata("simpleIfWithoutElse.kt")
        public void testSimpleIfWithoutElse() throws Exception {
            doTestFoldIfToAssignment("idea/testData/intentions/branched/folding/ifToAssignment/simpleIfWithoutElse.kt");
        }
        
        @TestMetadata("simpleIfWithoutTerminatingAssignment.kt")
        public void testSimpleIfWithoutTerminatingAssignment() throws Exception {
            doTestFoldIfToAssignment("idea/testData/intentions/branched/folding/ifToAssignment/simpleIfWithoutTerminatingAssignment.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/branched/folding/ifToReturn")
    public static class IfToReturn extends AbstractCodeTransformationTest {
        public void testAllFilesPresentInIfToReturn() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/branched/folding/ifToReturn"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("innerIfTransformed.kt")
        public void testInnerIfTransformed() throws Exception {
            doTestFoldIfToReturn("idea/testData/intentions/branched/folding/ifToReturn/innerIfTransformed.kt");
        }
        
        @TestMetadata("simpleIf.kt")
        public void testSimpleIf() throws Exception {
            doTestFoldIfToReturn("idea/testData/intentions/branched/folding/ifToReturn/simpleIf.kt");
        }
        
        @TestMetadata("simpleIfWithBlocks.kt")
        public void testSimpleIfWithBlocks() throws Exception {
            doTestFoldIfToReturn("idea/testData/intentions/branched/folding/ifToReturn/simpleIfWithBlocks.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/branched/folding/ifToReturnAsymmetrically")
    public static class IfToReturnAsymmetrically extends AbstractCodeTransformationTest {
        public void testAllFilesPresentInIfToReturnAsymmetrically() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/branched/folding/ifToReturnAsymmetrically"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("simpleIf.kt")
        public void testSimpleIf() throws Exception {
            doTestFoldIfToReturnAsymmetrically("idea/testData/intentions/branched/folding/ifToReturnAsymmetrically/simpleIf.kt");
        }
        
        @TestMetadata("simpleIfWithBlocks.kt")
        public void testSimpleIfWithBlocks() throws Exception {
            doTestFoldIfToReturnAsymmetrically("idea/testData/intentions/branched/folding/ifToReturnAsymmetrically/simpleIfWithBlocks.kt");
        }
        
        @TestMetadata("simpleIfWithComments.kt")
        public void testSimpleIfWithComments() throws Exception {
            doTestFoldIfToReturnAsymmetrically("idea/testData/intentions/branched/folding/ifToReturnAsymmetrically/simpleIfWithComments.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/branched/folding/whenToAssignment")
    public static class WhenToAssignment extends AbstractCodeTransformationTest {
        public void testAllFilesPresentInWhenToAssignment() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/branched/folding/whenToAssignment"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("innerWhenTransformed.kt")
        public void testInnerWhenTransformed() throws Exception {
            doTestFoldWhenToAssignment("idea/testData/intentions/branched/folding/whenToAssignment/innerWhenTransformed.kt");
        }
        
        @TestMetadata("simpleWhen.kt")
        public void testSimpleWhen() throws Exception {
            doTestFoldWhenToAssignment("idea/testData/intentions/branched/folding/whenToAssignment/simpleWhen.kt");
        }
        
        @TestMetadata("simpleWhenWithBlocks.kt")
        public void testSimpleWhenWithBlocks() throws Exception {
            doTestFoldWhenToAssignment("idea/testData/intentions/branched/folding/whenToAssignment/simpleWhenWithBlocks.kt");
        }
        
        @TestMetadata("simpleWhenWithShadowedVar.kt")
        public void testSimpleWhenWithShadowedVar() throws Exception {
            doTestFoldWhenToAssignment("idea/testData/intentions/branched/folding/whenToAssignment/simpleWhenWithShadowedVar.kt");
        }
        
        @TestMetadata("simpleWhenWithUnmatchedAssignments.kt")
        public void testSimpleWhenWithUnmatchedAssignments() throws Exception {
            doTestFoldWhenToAssignment("idea/testData/intentions/branched/folding/whenToAssignment/simpleWhenWithUnmatchedAssignments.kt");
        }
        
        @TestMetadata("simpleWhenWithoutTerminatingAssignment.kt")
        public void testSimpleWhenWithoutTerminatingAssignment() throws Exception {
            doTestFoldWhenToAssignment("idea/testData/intentions/branched/folding/whenToAssignment/simpleWhenWithoutTerminatingAssignment.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/branched/folding/whenToReturn")
    public static class WhenToReturn extends AbstractCodeTransformationTest {
        public void testAllFilesPresentInWhenToReturn() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/branched/folding/whenToReturn"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("innerWhenTransformed.kt")
        public void testInnerWhenTransformed() throws Exception {
            doTestFoldWhenToReturn("idea/testData/intentions/branched/folding/whenToReturn/innerWhenTransformed.kt");
        }
        
        @TestMetadata("simpleWhen.kt")
        public void testSimpleWhen() throws Exception {
            doTestFoldWhenToReturn("idea/testData/intentions/branched/folding/whenToReturn/simpleWhen.kt");
        }
        
        @TestMetadata("simpleWhenWithBlocks.kt")
        public void testSimpleWhenWithBlocks() throws Exception {
            doTestFoldWhenToReturn("idea/testData/intentions/branched/folding/whenToReturn/simpleWhenWithBlocks.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/branched/unfolding/assignmentToIf")
    public static class AssignmentToIf extends AbstractCodeTransformationTest {
        public void testAllFilesPresentInAssignmentToIf() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/branched/unfolding/assignmentToIf"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("innerIfTransformed.kt")
        public void testInnerIfTransformed() throws Exception {
            doTestUnfoldAssignmentToIf("idea/testData/intentions/branched/unfolding/assignmentToIf/innerIfTransformed.kt");
        }
        
        @TestMetadata("nestedIfs.kt")
        public void testNestedIfs() throws Exception {
            doTestUnfoldAssignmentToIf("idea/testData/intentions/branched/unfolding/assignmentToIf/nestedIfs.kt");
        }
        
        @TestMetadata("simpleIf.kt")
        public void testSimpleIf() throws Exception {
            doTestUnfoldAssignmentToIf("idea/testData/intentions/branched/unfolding/assignmentToIf/simpleIf.kt");
        }
        
        @TestMetadata("simpleIfWithAugmentedAssignment.kt")
        public void testSimpleIfWithAugmentedAssignment() throws Exception {
            doTestUnfoldAssignmentToIf("idea/testData/intentions/branched/unfolding/assignmentToIf/simpleIfWithAugmentedAssignment.kt");
        }
        
        @TestMetadata("simpleIfWithBlocks.kt")
        public void testSimpleIfWithBlocks() throws Exception {
            doTestUnfoldAssignmentToIf("idea/testData/intentions/branched/unfolding/assignmentToIf/simpleIfWithBlocks.kt");
        }
        
        @TestMetadata("simpleIfWithComplexAssignmentLHS.kt")
        public void testSimpleIfWithComplexAssignmentLHS() throws Exception {
            doTestUnfoldAssignmentToIf("idea/testData/intentions/branched/unfolding/assignmentToIf/simpleIfWithComplexAssignmentLHS.kt");
        }
        
        @TestMetadata("simpleIfWithoutAssignment.kt")
        public void testSimpleIfWithoutAssignment() throws Exception {
            doTestUnfoldAssignmentToIf("idea/testData/intentions/branched/unfolding/assignmentToIf/simpleIfWithoutAssignment.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/branched/unfolding/assignmentToWhen")
    public static class AssignmentToWhen extends AbstractCodeTransformationTest {
        public void testAllFilesPresentInAssignmentToWhen() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/branched/unfolding/assignmentToWhen"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("innerWhenTransformed.kt")
        public void testInnerWhenTransformed() throws Exception {
            doTestUnfoldAssignmentToWhen("idea/testData/intentions/branched/unfolding/assignmentToWhen/innerWhenTransformed.kt");
        }
        
        @TestMetadata("simpleWhen.kt")
        public void testSimpleWhen() throws Exception {
            doTestUnfoldAssignmentToWhen("idea/testData/intentions/branched/unfolding/assignmentToWhen/simpleWhen.kt");
        }
        
        @TestMetadata("simpleWhenWithBlocks.kt")
        public void testSimpleWhenWithBlocks() throws Exception {
            doTestUnfoldAssignmentToWhen("idea/testData/intentions/branched/unfolding/assignmentToWhen/simpleWhenWithBlocks.kt");
        }
        
        @TestMetadata("simpleWhenWithComplexAssignmentLHS.kt")
        public void testSimpleWhenWithComplexAssignmentLHS() throws Exception {
            doTestUnfoldAssignmentToWhen("idea/testData/intentions/branched/unfolding/assignmentToWhen/simpleWhenWithComplexAssignmentLHS.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/branched/unfolding/propertyToIf")
    public static class PropertyToIf extends AbstractCodeTransformationTest {
        public void testAllFilesPresentInPropertyToIf() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/branched/unfolding/propertyToIf"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("nestedIfs.kt")
        public void testNestedIfs() throws Exception {
            doTestUnfoldPropertyToIf("idea/testData/intentions/branched/unfolding/propertyToIf/nestedIfs.kt");
        }
        
        @TestMetadata("nestedIfs2.kt")
        public void testNestedIfs2() throws Exception {
            doTestUnfoldPropertyToIf("idea/testData/intentions/branched/unfolding/propertyToIf/nestedIfs2.kt");
        }
        
        @TestMetadata("nonLocalProperty.kt")
        public void testNonLocalProperty() throws Exception {
            doTestUnfoldPropertyToIf("idea/testData/intentions/branched/unfolding/propertyToIf/nonLocalProperty.kt");
        }
        
        @TestMetadata("nonLocalProperty2.kt")
        public void testNonLocalProperty2() throws Exception {
            doTestUnfoldPropertyToIf("idea/testData/intentions/branched/unfolding/propertyToIf/nonLocalProperty2.kt");
        }
        
        @TestMetadata("simpleIf.kt")
        public void testSimpleIf() throws Exception {
            doTestUnfoldPropertyToIf("idea/testData/intentions/branched/unfolding/propertyToIf/simpleIf.kt");
        }
        
        @TestMetadata("simpleIf2.kt")
        public void testSimpleIf2() throws Exception {
            doTestUnfoldPropertyToIf("idea/testData/intentions/branched/unfolding/propertyToIf/simpleIf2.kt");
        }
        
        @TestMetadata("simpleIfWithBlocks.kt")
        public void testSimpleIfWithBlocks() throws Exception {
            doTestUnfoldPropertyToIf("idea/testData/intentions/branched/unfolding/propertyToIf/simpleIfWithBlocks.kt");
        }
        
        @TestMetadata("simpleIfWithBlocks2.kt")
        public void testSimpleIfWithBlocks2() throws Exception {
            doTestUnfoldPropertyToIf("idea/testData/intentions/branched/unfolding/propertyToIf/simpleIfWithBlocks2.kt");
        }
        
        @TestMetadata("simpleIfWithType.kt")
        public void testSimpleIfWithType() throws Exception {
            doTestUnfoldPropertyToIf("idea/testData/intentions/branched/unfolding/propertyToIf/simpleIfWithType.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/branched/unfolding/propertyToWhen")
    public static class PropertyToWhen extends AbstractCodeTransformationTest {
        public void testAllFilesPresentInPropertyToWhen() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/branched/unfolding/propertyToWhen"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("nonLocalProperty.kt")
        public void testNonLocalProperty() throws Exception {
            doTestUnfoldPropertyToWhen("idea/testData/intentions/branched/unfolding/propertyToWhen/nonLocalProperty.kt");
        }
        
        @TestMetadata("nonLocalProperty2.kt")
        public void testNonLocalProperty2() throws Exception {
            doTestUnfoldPropertyToWhen("idea/testData/intentions/branched/unfolding/propertyToWhen/nonLocalProperty2.kt");
        }
        
        @TestMetadata("simpleWhen.kt")
        public void testSimpleWhen() throws Exception {
            doTestUnfoldPropertyToWhen("idea/testData/intentions/branched/unfolding/propertyToWhen/simpleWhen.kt");
        }
        
        @TestMetadata("simpleWhen2.kt")
        public void testSimpleWhen2() throws Exception {
            doTestUnfoldPropertyToWhen("idea/testData/intentions/branched/unfolding/propertyToWhen/simpleWhen2.kt");
        }
        
        @TestMetadata("simpleWhenWithBlocks.kt")
        public void testSimpleWhenWithBlocks() throws Exception {
            doTestUnfoldPropertyToWhen("idea/testData/intentions/branched/unfolding/propertyToWhen/simpleWhenWithBlocks.kt");
        }
        
        @TestMetadata("simpleWhenWithBlocks2.kt")
        public void testSimpleWhenWithBlocks2() throws Exception {
            doTestUnfoldPropertyToWhen("idea/testData/intentions/branched/unfolding/propertyToWhen/simpleWhenWithBlocks2.kt");
        }
        
        @TestMetadata("simpleWhenWithType.kt")
        public void testSimpleWhenWithType() throws Exception {
            doTestUnfoldPropertyToWhen("idea/testData/intentions/branched/unfolding/propertyToWhen/simpleWhenWithType.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/branched/unfolding/returnToIf")
    public static class ReturnToIf extends AbstractCodeTransformationTest {
        public void testAllFilesPresentInReturnToIf() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/branched/unfolding/returnToIf"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("innerIfTransformed.kt")
        public void testInnerIfTransformed() throws Exception {
            doTestUnfoldReturnToIf("idea/testData/intentions/branched/unfolding/returnToIf/innerIfTransformed.kt");
        }
        
        @TestMetadata("simpleIf.kt")
        public void testSimpleIf() throws Exception {
            doTestUnfoldReturnToIf("idea/testData/intentions/branched/unfolding/returnToIf/simpleIf.kt");
        }
        
        @TestMetadata("simpleIfWithBlocks.kt")
        public void testSimpleIfWithBlocks() throws Exception {
            doTestUnfoldReturnToIf("idea/testData/intentions/branched/unfolding/returnToIf/simpleIfWithBlocks.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/branched/unfolding/returnToWhen")
    public static class ReturnToWhen extends AbstractCodeTransformationTest {
        public void testAllFilesPresentInReturnToWhen() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/branched/unfolding/returnToWhen"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("innerWhenTransformed.kt")
        public void testInnerWhenTransformed() throws Exception {
            doTestUnfoldReturnToWhen("idea/testData/intentions/branched/unfolding/returnToWhen/innerWhenTransformed.kt");
        }
        
        @TestMetadata("simpleWhen.kt")
        public void testSimpleWhen() throws Exception {
            doTestUnfoldReturnToWhen("idea/testData/intentions/branched/unfolding/returnToWhen/simpleWhen.kt");
        }
        
        @TestMetadata("simpleWhenWithBlocks.kt")
        public void testSimpleWhenWithBlocks() throws Exception {
            doTestUnfoldReturnToWhen("idea/testData/intentions/branched/unfolding/returnToWhen/simpleWhenWithBlocks.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/branched/ifWhen/ifToWhen")
    public static class IfToWhen extends AbstractCodeTransformationTest {
        public void testAllFilesPresentInIfToWhen() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/branched/ifWhen/ifToWhen"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("ifWithEqualityTests.kt")
        public void testIfWithEqualityTests() throws Exception {
            doTestIfToWhen("idea/testData/intentions/branched/ifWhen/ifToWhen/ifWithEqualityTests.kt");
        }
        
        @TestMetadata("ifWithIs.kt")
        public void testIfWithIs() throws Exception {
            doTestIfToWhen("idea/testData/intentions/branched/ifWhen/ifToWhen/ifWithIs.kt");
        }
        
        @TestMetadata("ifWithMultiConditions.kt")
        public void testIfWithMultiConditions() throws Exception {
            doTestIfToWhen("idea/testData/intentions/branched/ifWhen/ifToWhen/ifWithMultiConditions.kt");
        }
        
        @TestMetadata("ifWithNegativeIs.kt")
        public void testIfWithNegativeIs() throws Exception {
            doTestIfToWhen("idea/testData/intentions/branched/ifWhen/ifToWhen/ifWithNegativeIs.kt");
        }
        
        @TestMetadata("ifWithNegativeRangeTests.kt")
        public void testIfWithNegativeRangeTests() throws Exception {
            doTestIfToWhen("idea/testData/intentions/branched/ifWhen/ifToWhen/ifWithNegativeRangeTests.kt");
        }
        
        @TestMetadata("ifWithRangeTests.kt")
        public void testIfWithRangeTests() throws Exception {
            doTestIfToWhen("idea/testData/intentions/branched/ifWhen/ifToWhen/ifWithRangeTests.kt");
        }
        
        @TestMetadata("ifWithRangeTestsAndMultiConditions.kt")
        public void testIfWithRangeTestsAndMultiConditions() throws Exception {
            doTestIfToWhen("idea/testData/intentions/branched/ifWhen/ifToWhen/ifWithRangeTestsAndMultiConditions.kt");
        }
        
        @TestMetadata("ifWithRangeTestsAndUnparenthesizedMultiConditions.kt")
        public void testIfWithRangeTestsAndUnparenthesizedMultiConditions() throws Exception {
            doTestIfToWhen("idea/testData/intentions/branched/ifWhen/ifToWhen/ifWithRangeTestsAndUnparenthesizedMultiConditions.kt");
        }
        
        @TestMetadata("ifWithoutElse.kt")
        public void testIfWithoutElse() throws Exception {
            doTestIfToWhen("idea/testData/intentions/branched/ifWhen/ifToWhen/ifWithoutElse.kt");
        }
        
        @TestMetadata("whenWithMultipleConditionTypes.kt")
        public void testWhenWithMultipleConditionTypes() throws Exception {
            doTestIfToWhen("idea/testData/intentions/branched/ifWhen/ifToWhen/whenWithMultipleConditionTypes.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/branched/ifWhen/whenToIf")
    public static class WhenToIf extends AbstractCodeTransformationTest {
        public void testAllFilesPresentInWhenToIf() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/branched/ifWhen/whenToIf"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("whenWithDotQualifiedExpression.kt")
        public void testWhenWithDotQualifiedExpression() throws Exception {
            doTestWhenToIf("idea/testData/intentions/branched/ifWhen/whenToIf/whenWithDotQualifiedExpression.kt");
        }
        
        @TestMetadata("whenWithEqualityTests.kt")
        public void testWhenWithEqualityTests() throws Exception {
            doTestWhenToIf("idea/testData/intentions/branched/ifWhen/whenToIf/whenWithEqualityTests.kt");
        }
        
        @TestMetadata("whenWithMultiConditions.kt")
        public void testWhenWithMultiConditions() throws Exception {
            doTestWhenToIf("idea/testData/intentions/branched/ifWhen/whenToIf/whenWithMultiConditions.kt");
        }
        
        @TestMetadata("whenWithMultipleConditionTypes.kt")
        public void testWhenWithMultipleConditionTypes() throws Exception {
            doTestWhenToIf("idea/testData/intentions/branched/ifWhen/whenToIf/whenWithMultipleConditionTypes.kt");
        }
        
        @TestMetadata("whenWithNegativePatterns.kt")
        public void testWhenWithNegativePatterns() throws Exception {
            doTestWhenToIf("idea/testData/intentions/branched/ifWhen/whenToIf/whenWithNegativePatterns.kt");
        }
        
        @TestMetadata("whenWithNegativeRangeTests.kt")
        public void testWhenWithNegativeRangeTests() throws Exception {
            doTestWhenToIf("idea/testData/intentions/branched/ifWhen/whenToIf/whenWithNegativeRangeTests.kt");
        }
        
        @TestMetadata("whenWithPatterns.kt")
        public void testWhenWithPatterns() throws Exception {
            doTestWhenToIf("idea/testData/intentions/branched/ifWhen/whenToIf/whenWithPatterns.kt");
        }
        
        @TestMetadata("whenWithRangeTests.kt")
        public void testWhenWithRangeTests() throws Exception {
            doTestWhenToIf("idea/testData/intentions/branched/ifWhen/whenToIf/whenWithRangeTests.kt");
        }
        
        @TestMetadata("whenWithRangeTestsAndMultiConditions.kt")
        public void testWhenWithRangeTestsAndMultiConditions() throws Exception {
            doTestWhenToIf("idea/testData/intentions/branched/ifWhen/whenToIf/whenWithRangeTestsAndMultiConditions.kt");
        }
        
        @TestMetadata("whenWithoutElse.kt")
        public void testWhenWithoutElse() throws Exception {
            doTestWhenToIf("idea/testData/intentions/branched/ifWhen/whenToIf/whenWithoutElse.kt");
        }
        
        @TestMetadata("whenWithoutSubject.kt")
        public void testWhenWithoutSubject() throws Exception {
            doTestWhenToIf("idea/testData/intentions/branched/ifWhen/whenToIf/whenWithoutSubject.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/branched/when/flatten")
    public static class Flatten extends AbstractCodeTransformationTest {
        public void testAllFilesPresentInFlatten() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/branched/when/flatten"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("flattenWithSubject.kt")
        public void testFlattenWithSubject() throws Exception {
            doTestFlattenWhen("idea/testData/intentions/branched/when/flatten/flattenWithSubject.kt");
        }
        
        @TestMetadata("flattenWithUnmatchedSubjects.kt")
        public void testFlattenWithUnmatchedSubjects() throws Exception {
            doTestFlattenWhen("idea/testData/intentions/branched/when/flatten/flattenWithUnmatchedSubjects.kt");
        }
        
        @TestMetadata("flattenWithoutSubject.kt")
        public void testFlattenWithoutSubject() throws Exception {
            doTestFlattenWhen("idea/testData/intentions/branched/when/flatten/flattenWithoutSubject.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/branched/when/merge")
    public static class Merge extends AbstractCodeTransformationTest {
        public void testAllFilesPresentInMerge() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/branched/when/merge"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("mergeBlockWithBlock.kt")
        public void testMergeBlockWithBlock() throws Exception {
            doTestMergeWhen("idea/testData/intentions/branched/when/merge/mergeBlockWithBlock.kt");
        }
        
        @TestMetadata("mergeBlockWithSingle.kt")
        public void testMergeBlockWithSingle() throws Exception {
            doTestMergeWhen("idea/testData/intentions/branched/when/merge/mergeBlockWithSingle.kt");
        }
        
        @TestMetadata("mergeWithConflictingDeclarations.kt")
        public void testMergeWithConflictingDeclarations() throws Exception {
            doTestMergeWhen("idea/testData/intentions/branched/when/merge/mergeWithConflictingDeclarations.kt");
        }
        
        @TestMetadata("mergeWithDeclarations.kt")
        public void testMergeWithDeclarations() throws Exception {
            doTestMergeWhen("idea/testData/intentions/branched/when/merge/mergeWithDeclarations.kt");
        }
        
        @TestMetadata("mergeWithReturnAfter.kt")
        public void testMergeWithReturnAfter() throws Exception {
            doTestMergeWhen("idea/testData/intentions/branched/when/merge/mergeWithReturnAfter.kt");
        }
        
        @TestMetadata("mergeWithReturnBefore.kt")
        public void testMergeWithReturnBefore() throws Exception {
            doTestMergeWhen("idea/testData/intentions/branched/when/merge/mergeWithReturnBefore.kt");
        }
        
        @TestMetadata("mergeWithSubject.kt")
        public void testMergeWithSubject() throws Exception {
            doTestMergeWhen("idea/testData/intentions/branched/when/merge/mergeWithSubject.kt");
        }
        
        @TestMetadata("mergeWithUnmatchedConditions1.kt")
        public void testMergeWithUnmatchedConditions1() throws Exception {
            doTestMergeWhen("idea/testData/intentions/branched/when/merge/mergeWithUnmatchedConditions1.kt");
        }
        
        @TestMetadata("mergeWithUnmatchedConditions2.kt")
        public void testMergeWithUnmatchedConditions2() throws Exception {
            doTestMergeWhen("idea/testData/intentions/branched/when/merge/mergeWithUnmatchedConditions2.kt");
        }
        
        @TestMetadata("mergeWithUnmatchedConditions3.kt")
        public void testMergeWithUnmatchedConditions3() throws Exception {
            doTestMergeWhen("idea/testData/intentions/branched/when/merge/mergeWithUnmatchedConditions3.kt");
        }
        
        @TestMetadata("mergeWithUnmatchedConditions4.kt")
        public void testMergeWithUnmatchedConditions4() throws Exception {
            doTestMergeWhen("idea/testData/intentions/branched/when/merge/mergeWithUnmatchedConditions4.kt");
        }
        
        @TestMetadata("mergeWithUnmatchedConditions5.kt")
        public void testMergeWithUnmatchedConditions5() throws Exception {
            doTestMergeWhen("idea/testData/intentions/branched/when/merge/mergeWithUnmatchedConditions5.kt");
        }
        
        @TestMetadata("mergeWithUnmatchedConditions6.kt")
        public void testMergeWithUnmatchedConditions6() throws Exception {
            doTestMergeWhen("idea/testData/intentions/branched/when/merge/mergeWithUnmatchedConditions6.kt");
        }
        
        @TestMetadata("mergeWithUnmatchedConditions7.kt")
        public void testMergeWithUnmatchedConditions7() throws Exception {
            doTestMergeWhen("idea/testData/intentions/branched/when/merge/mergeWithUnmatchedConditions7.kt");
        }
        
        @TestMetadata("mergeWithUnmatchedSubjects1.kt")
        public void testMergeWithUnmatchedSubjects1() throws Exception {
            doTestMergeWhen("idea/testData/intentions/branched/when/merge/mergeWithUnmatchedSubjects1.kt");
        }
        
        @TestMetadata("mergeWithUnmatchedSubjects2.kt")
        public void testMergeWithUnmatchedSubjects2() throws Exception {
            doTestMergeWhen("idea/testData/intentions/branched/when/merge/mergeWithUnmatchedSubjects2.kt");
        }
        
        @TestMetadata("mergeWithoutSubject.kt")
        public void testMergeWithoutSubject() throws Exception {
            doTestMergeWhen("idea/testData/intentions/branched/when/merge/mergeWithoutSubject.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/branched/when/introduceSubject")
    public static class IntroduceSubject extends AbstractCodeTransformationTest {
        public void testAllFilesPresentInIntroduceSubject() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/branched/when/introduceSubject"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("whenWithEqualityTests.kt")
        public void testWhenWithEqualityTests() throws Exception {
            doTestIntroduceWhenSubject("idea/testData/intentions/branched/when/introduceSubject/whenWithEqualityTests.kt");
        }
        
        @TestMetadata("whenWithMultipleConditionTypes.kt")
        public void testWhenWithMultipleConditionTypes() throws Exception {
            doTestIntroduceWhenSubject("idea/testData/intentions/branched/when/introduceSubject/whenWithMultipleConditionTypes.kt");
        }
        
        @TestMetadata("whenWithNegativePatterns.kt")
        public void testWhenWithNegativePatterns() throws Exception {
            doTestIntroduceWhenSubject("idea/testData/intentions/branched/when/introduceSubject/whenWithNegativePatterns.kt");
        }
        
        @TestMetadata("whenWithNegativeRangeTests.kt")
        public void testWhenWithNegativeRangeTests() throws Exception {
            doTestIntroduceWhenSubject("idea/testData/intentions/branched/when/introduceSubject/whenWithNegativeRangeTests.kt");
        }
        
        @TestMetadata("whenWithNondivisibleConditions.kt")
        public void testWhenWithNondivisibleConditions() throws Exception {
            doTestIntroduceWhenSubject("idea/testData/intentions/branched/when/introduceSubject/whenWithNondivisibleConditions.kt");
        }
        
        @TestMetadata("whenWithPatterns.kt")
        public void testWhenWithPatterns() throws Exception {
            doTestIntroduceWhenSubject("idea/testData/intentions/branched/when/introduceSubject/whenWithPatterns.kt");
        }
        
        @TestMetadata("whenWithRangeTests.kt")
        public void testWhenWithRangeTests() throws Exception {
            doTestIntroduceWhenSubject("idea/testData/intentions/branched/when/introduceSubject/whenWithRangeTests.kt");
        }
        
        @TestMetadata("whenWithRangeTestsAndMultiConditions.kt")
        public void testWhenWithRangeTestsAndMultiConditions() throws Exception {
            doTestIntroduceWhenSubject("idea/testData/intentions/branched/when/introduceSubject/whenWithRangeTestsAndMultiConditions.kt");
        }
        
        @TestMetadata("whenWithSubject.kt")
        public void testWhenWithSubject() throws Exception {
            doTestIntroduceWhenSubject("idea/testData/intentions/branched/when/introduceSubject/whenWithSubject.kt");
        }
        
        @TestMetadata("whenWithSwappedEqualityTests.kt")
        public void testWhenWithSwappedEqualityTests() throws Exception {
            doTestIntroduceWhenSubject("idea/testData/intentions/branched/when/introduceSubject/whenWithSwappedEqualityTests.kt");
        }
        
        @TestMetadata("whenWithUnmatchedCandidateSubjects.kt")
        public void testWhenWithUnmatchedCandidateSubjects() throws Exception {
            doTestIntroduceWhenSubject("idea/testData/intentions/branched/when/introduceSubject/whenWithUnmatchedCandidateSubjects.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/branched/when/eliminateSubject")
    public static class EliminateSubject extends AbstractCodeTransformationTest {
        public void testAllFilesPresentInEliminateSubject() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/branched/when/eliminateSubject"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("whenWithEqualityTests.kt")
        public void testWhenWithEqualityTests() throws Exception {
            doTestEliminateWhenSubject("idea/testData/intentions/branched/when/eliminateSubject/whenWithEqualityTests.kt");
        }
        
        @TestMetadata("whenWithMultipleConditionTypes.kt")
        public void testWhenWithMultipleConditionTypes() throws Exception {
            doTestEliminateWhenSubject("idea/testData/intentions/branched/when/eliminateSubject/whenWithMultipleConditionTypes.kt");
        }
        
        @TestMetadata("whenWithNegativePatterns.kt")
        public void testWhenWithNegativePatterns() throws Exception {
            doTestEliminateWhenSubject("idea/testData/intentions/branched/when/eliminateSubject/whenWithNegativePatterns.kt");
        }
        
        @TestMetadata("whenWithNegativeRangeTests.kt")
        public void testWhenWithNegativeRangeTests() throws Exception {
            doTestEliminateWhenSubject("idea/testData/intentions/branched/when/eliminateSubject/whenWithNegativeRangeTests.kt");
        }
        
        @TestMetadata("whenWithPatterns.kt")
        public void testWhenWithPatterns() throws Exception {
            doTestEliminateWhenSubject("idea/testData/intentions/branched/when/eliminateSubject/whenWithPatterns.kt");
        }
        
        @TestMetadata("whenWithRangeTests.kt")
        public void testWhenWithRangeTests() throws Exception {
            doTestEliminateWhenSubject("idea/testData/intentions/branched/when/eliminateSubject/whenWithRangeTests.kt");
        }
        
        @TestMetadata("whenWithRangeTestsAndMultiConditions.kt")
        public void testWhenWithRangeTestsAndMultiConditions() throws Exception {
            doTestEliminateWhenSubject("idea/testData/intentions/branched/when/eliminateSubject/whenWithRangeTestsAndMultiConditions.kt");
        }
        
        @TestMetadata("whenWithoutSubject.kt")
        public void testWhenWithoutSubject() throws Exception {
            doTestEliminateWhenSubject("idea/testData/intentions/branched/when/eliminateSubject/whenWithoutSubject.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/declarations/split")
    public static class Split extends AbstractCodeTransformationTest {
        public void testAllFilesPresentInSplit() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/declarations/split"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("longInit.kt")
        public void testLongInit() throws Exception {
            doTestSplitProperty("idea/testData/intentions/declarations/split/longInit.kt");
        }
        
        @TestMetadata("longInit2.kt")
        public void testLongInit2() throws Exception {
            doTestSplitProperty("idea/testData/intentions/declarations/split/longInit2.kt");
        }
        
        @TestMetadata("noInitializer.kt")
        public void testNoInitializer() throws Exception {
            doTestSplitProperty("idea/testData/intentions/declarations/split/noInitializer.kt");
        }
        
        @TestMetadata("noInitializer2.kt")
        public void testNoInitializer2() throws Exception {
            doTestSplitProperty("idea/testData/intentions/declarations/split/noInitializer2.kt");
        }
        
        @TestMetadata("nonLocalProperty.kt")
        public void testNonLocalProperty() throws Exception {
            doTestSplitProperty("idea/testData/intentions/declarations/split/nonLocalProperty.kt");
        }
        
        @TestMetadata("nonLocalProperty2.kt")
        public void testNonLocalProperty2() throws Exception {
            doTestSplitProperty("idea/testData/intentions/declarations/split/nonLocalProperty2.kt");
        }
        
        @TestMetadata("simpleInit.kt")
        public void testSimpleInit() throws Exception {
            doTestSplitProperty("idea/testData/intentions/declarations/split/simpleInit.kt");
        }
        
        @TestMetadata("simpleInit2.kt")
        public void testSimpleInit2() throws Exception {
            doTestSplitProperty("idea/testData/intentions/declarations/split/simpleInit2.kt");
        }
        
        @TestMetadata("simpleInitWithErrorType.kt")
        public void testSimpleInitWithErrorType() throws Exception {
            doTestSplitProperty("idea/testData/intentions/declarations/split/simpleInitWithErrorType.kt");
        }
        
        @TestMetadata("simpleInitWithErrorType2.kt")
        public void testSimpleInitWithErrorType2() throws Exception {
            doTestSplitProperty("idea/testData/intentions/declarations/split/simpleInitWithErrorType2.kt");
        }
        
        @TestMetadata("simpleInitWithType.kt")
        public void testSimpleInitWithType() throws Exception {
            doTestSplitProperty("idea/testData/intentions/declarations/split/simpleInitWithType.kt");
        }
        
        @TestMetadata("simpleInitWithType2.kt")
        public void testSimpleInitWithType2() throws Exception {
            doTestSplitProperty("idea/testData/intentions/declarations/split/simpleInitWithType2.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/declarations/join")
    public static class Join extends AbstractCodeTransformationTest {
        public void testAllFilesPresentInJoin() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/declarations/join"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("longInit.kt")
        public void testLongInit() throws Exception {
            doTestJoinProperty("idea/testData/intentions/declarations/join/longInit.kt");
        }
        
        @TestMetadata("longInit2.kt")
        public void testLongInit2() throws Exception {
            doTestJoinProperty("idea/testData/intentions/declarations/join/longInit2.kt");
        }
        
        @TestMetadata("simpleInit.kt")
        public void testSimpleInit() throws Exception {
            doTestJoinProperty("idea/testData/intentions/declarations/join/simpleInit.kt");
        }
        
        @TestMetadata("simpleInit2.kt")
        public void testSimpleInit2() throws Exception {
            doTestJoinProperty("idea/testData/intentions/declarations/join/simpleInit2.kt");
        }
        
        @TestMetadata("simpleInitWithBackticks.kt")
        public void testSimpleInitWithBackticks() throws Exception {
            doTestJoinProperty("idea/testData/intentions/declarations/join/simpleInitWithBackticks.kt");
        }
        
        @TestMetadata("simpleInitWithBackticks2.kt")
        public void testSimpleInitWithBackticks2() throws Exception {
            doTestJoinProperty("idea/testData/intentions/declarations/join/simpleInitWithBackticks2.kt");
        }
        
        @TestMetadata("simpleInitWithBackticks3.kt")
        public void testSimpleInitWithBackticks3() throws Exception {
            doTestJoinProperty("idea/testData/intentions/declarations/join/simpleInitWithBackticks3.kt");
        }
        
        @TestMetadata("simpleInitWithComments.kt")
        public void testSimpleInitWithComments() throws Exception {
            doTestJoinProperty("idea/testData/intentions/declarations/join/simpleInitWithComments.kt");
        }
        
        @TestMetadata("simpleInitWithComments2.kt")
        public void testSimpleInitWithComments2() throws Exception {
            doTestJoinProperty("idea/testData/intentions/declarations/join/simpleInitWithComments2.kt");
        }
        
        @TestMetadata("simpleInitWithSemicolons.kt")
        public void testSimpleInitWithSemicolons() throws Exception {
            doTestJoinProperty("idea/testData/intentions/declarations/join/simpleInitWithSemicolons.kt");
        }
        
        @TestMetadata("simpleInitWithSemicolons2.kt")
        public void testSimpleInitWithSemicolons2() throws Exception {
            doTestJoinProperty("idea/testData/intentions/declarations/join/simpleInitWithSemicolons2.kt");
        }
        
        @TestMetadata("simpleInitWithSemicolons3.kt")
        public void testSimpleInitWithSemicolons3() throws Exception {
            doTestJoinProperty("idea/testData/intentions/declarations/join/simpleInitWithSemicolons3.kt");
        }
        
        @TestMetadata("simpleInitWithType.kt")
        public void testSimpleInitWithType() throws Exception {
            doTestJoinProperty("idea/testData/intentions/declarations/join/simpleInitWithType.kt");
        }
        
        @TestMetadata("simpleInitWithType2.kt")
        public void testSimpleInitWithType2() throws Exception {
            doTestJoinProperty("idea/testData/intentions/declarations/join/simpleInitWithType2.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/declarations/convertMemberToExtension")
    public static class ConvertMemberToExtension extends AbstractCodeTransformationTest {
        @TestMetadata("abstract.kt")
        public void testAbstract() throws Exception {
            doTestConvertMemberToExtension("idea/testData/intentions/declarations/convertMemberToExtension/abstract.kt");
        }
        
        @TestMetadata("abstractProperty.kt")
        public void testAbstractProperty() throws Exception {
            doTestConvertMemberToExtension("idea/testData/intentions/declarations/convertMemberToExtension/abstractProperty.kt");
        }
        
        public void testAllFilesPresentInConvertMemberToExtension() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/declarations/convertMemberToExtension"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("explicitUnit.kt")
        public void testExplicitUnit() throws Exception {
            doTestConvertMemberToExtension("idea/testData/intentions/declarations/convertMemberToExtension/explicitUnit.kt");
        }
        
        @TestMetadata("extension.kt")
        public void testExtension() throws Exception {
            doTestConvertMemberToExtension("idea/testData/intentions/declarations/convertMemberToExtension/extension.kt");
        }
        
        @TestMetadata("funcitonNoName.kt")
        public void testFuncitonNoName() throws Exception {
            doTestConvertMemberToExtension("idea/testData/intentions/declarations/convertMemberToExtension/funcitonNoName.kt");
        }
        
        @TestMetadata("functionType.kt")
        public void testFunctionType() throws Exception {
            doTestConvertMemberToExtension("idea/testData/intentions/declarations/convertMemberToExtension/functionType.kt");
        }
        
        @TestMetadata("genericClass.kt")
        public void testGenericClass() throws Exception {
            doTestConvertMemberToExtension("idea/testData/intentions/declarations/convertMemberToExtension/genericClass.kt");
        }
        
        @TestMetadata("genericFun.kt")
        public void testGenericFun() throws Exception {
            doTestConvertMemberToExtension("idea/testData/intentions/declarations/convertMemberToExtension/genericFun.kt");
        }
        
        @TestMetadata("genericFunInGenericClass.kt")
        public void testGenericFunInGenericClass() throws Exception {
            doTestConvertMemberToExtension("idea/testData/intentions/declarations/convertMemberToExtension/genericFunInGenericClass.kt");
        }
        
        @TestMetadata("genericFunInGenericClassWithUpperBounds.kt")
        public void testGenericFunInGenericClassWithUpperBounds() throws Exception {
            doTestConvertMemberToExtension("idea/testData/intentions/declarations/convertMemberToExtension/genericFunInGenericClassWithUpperBounds.kt");
        }
        
        @TestMetadata("genericFunParamAfterName.kt")
        public void testGenericFunParamAfterName() throws Exception {
            doTestConvertMemberToExtension("idea/testData/intentions/declarations/convertMemberToExtension/genericFunParamAfterName.kt");
        }
        
        @TestMetadata("genericProperty.kt")
        public void testGenericProperty() throws Exception {
            doTestConvertMemberToExtension("idea/testData/intentions/declarations/convertMemberToExtension/genericProperty.kt");
        }
        
        @TestMetadata("inFunctionBody.kt")
        public void testInFunctionBody() throws Exception {
            doTestConvertMemberToExtension("idea/testData/intentions/declarations/convertMemberToExtension/inFunctionBody.kt");
        }
        
        @TestMetadata("inObject.kt")
        public void testInObject() throws Exception {
            doTestConvertMemberToExtension("idea/testData/intentions/declarations/convertMemberToExtension/inObject.kt");
        }
        
        @TestMetadata("internal.kt")
        public void testInternal() throws Exception {
            doTestConvertMemberToExtension("idea/testData/intentions/declarations/convertMemberToExtension/internal.kt");
        }
        
        @TestMetadata("localFunction.kt")
        public void testLocalFunction() throws Exception {
            doTestConvertMemberToExtension("idea/testData/intentions/declarations/convertMemberToExtension/localFunction.kt");
        }
        
        @TestMetadata("nonBlockBodyNoType.kt")
        public void testNonBlockBodyNoType() throws Exception {
            doTestConvertMemberToExtension("idea/testData/intentions/declarations/convertMemberToExtension/nonBlockBodyNoType.kt");
        }
        
        @TestMetadata("nonBlockBodyWithType.kt")
        public void testNonBlockBodyWithType() throws Exception {
            doTestConvertMemberToExtension("idea/testData/intentions/declarations/convertMemberToExtension/nonBlockBodyWithType.kt");
        }
        
        @TestMetadata("outsideFunction.kt")
        public void testOutsideFunction() throws Exception {
            doTestConvertMemberToExtension("idea/testData/intentions/declarations/convertMemberToExtension/outsideFunction.kt");
        }
        
        @TestMetadata("private.kt")
        public void testPrivate() throws Exception {
            doTestConvertMemberToExtension("idea/testData/intentions/declarations/convertMemberToExtension/private.kt");
        }
        
        @TestMetadata("protected.kt")
        public void testProtected() throws Exception {
            doTestConvertMemberToExtension("idea/testData/intentions/declarations/convertMemberToExtension/protected.kt");
        }
        
        @TestMetadata("public.kt")
        public void testPublic() throws Exception {
            doTestConvertMemberToExtension("idea/testData/intentions/declarations/convertMemberToExtension/public.kt");
        }
        
        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            doTestConvertMemberToExtension("idea/testData/intentions/declarations/convertMemberToExtension/simple.kt");
        }
        
        @TestMetadata("topLevelFunction.kt")
        public void testTopLevelFunction() throws Exception {
            doTestConvertMemberToExtension("idea/testData/intentions/declarations/convertMemberToExtension/topLevelFunction.kt");
        }
        
        @TestMetadata("typeFqName.kt")
        public void testTypeFqName() throws Exception {
            doTestConvertMemberToExtension("idea/testData/intentions/declarations/convertMemberToExtension/typeFqName.kt");
        }
        
        @TestMetadata("unknownType.kt")
        public void testUnknownType() throws Exception {
            doTestConvertMemberToExtension("idea/testData/intentions/declarations/convertMemberToExtension/unknownType.kt");
        }
        
        @TestMetadata("valWithDefaultGetter.kt")
        public void testValWithDefaultGetter() throws Exception {
            doTestConvertMemberToExtension("idea/testData/intentions/declarations/convertMemberToExtension/valWithDefaultGetter.kt");
        }
        
        @TestMetadata("valWithGetter.kt")
        public void testValWithGetter() throws Exception {
            doTestConvertMemberToExtension("idea/testData/intentions/declarations/convertMemberToExtension/valWithGetter.kt");
        }
        
        @TestMetadata("valWithGetterBlockBody.kt")
        public void testValWithGetterBlockBody() throws Exception {
            doTestConvertMemberToExtension("idea/testData/intentions/declarations/convertMemberToExtension/valWithGetterBlockBody.kt");
        }
        
        @TestMetadata("varWithDefaultGetterAndSetter.kt")
        public void testVarWithDefaultGetterAndSetter() throws Exception {
            doTestConvertMemberToExtension("idea/testData/intentions/declarations/convertMemberToExtension/varWithDefaultGetterAndSetter.kt");
        }
        
        @TestMetadata("varWithDefaultSetter.kt")
        public void testVarWithDefaultSetter() throws Exception {
            doTestConvertMemberToExtension("idea/testData/intentions/declarations/convertMemberToExtension/varWithDefaultSetter.kt");
        }
        
        @TestMetadata("varWithGetter.kt")
        public void testVarWithGetter() throws Exception {
            doTestConvertMemberToExtension("idea/testData/intentions/declarations/convertMemberToExtension/varWithGetter.kt");
        }
        
        @TestMetadata("varWithGetterAndSetter.kt")
        public void testVarWithGetterAndSetter() throws Exception {
            doTestConvertMemberToExtension("idea/testData/intentions/declarations/convertMemberToExtension/varWithGetterAndSetter.kt");
        }
        
        @TestMetadata("varWithSetter.kt")
        public void testVarWithSetter() throws Exception {
            doTestConvertMemberToExtension("idea/testData/intentions/declarations/convertMemberToExtension/varWithSetter.kt");
        }
        
        @TestMetadata("withType.kt")
        public void testWithType() throws Exception {
            doTestConvertMemberToExtension("idea/testData/intentions/declarations/convertMemberToExtension/withType.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/reconstructedType")
    public static class ReconstructedType extends AbstractCodeTransformationTest {
        public void testAllFilesPresentInReconstructedType() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/reconstructedType"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("completeGenericType.kt")
        public void testCompleteGenericType() throws Exception {
            doTestReconstructType("idea/testData/intentions/reconstructedType/completeGenericType.kt");
        }
        
        @TestMetadata("completeType.kt")
        public void testCompleteType() throws Exception {
            doTestReconstructType("idea/testData/intentions/reconstructedType/completeType.kt");
        }
        
        @TestMetadata("errorType.kt")
        public void testErrorType() throws Exception {
            doTestReconstructType("idea/testData/intentions/reconstructedType/errorType.kt");
        }
        
        @TestMetadata("reconstructableType.kt")
        public void testReconstructableType() throws Exception {
            doTestReconstructType("idea/testData/intentions/reconstructedType/reconstructableType.kt");
        }
        
        @TestMetadata("typeInDeclaration.kt")
        public void testTypeInDeclaration() throws Exception {
            doTestReconstructType("idea/testData/intentions/reconstructedType/typeInDeclaration.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/removeUnnecessaryParentheses")
    public static class RemoveUnnecessaryParentheses extends AbstractCodeTransformationTest {
        public void testAllFilesPresentInRemoveUnnecessaryParentheses() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/removeUnnecessaryParentheses"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("necessaryParentheses1.kt")
        public void testNecessaryParentheses1() throws Exception {
            doTestRemoveUnnecessaryParentheses("idea/testData/intentions/removeUnnecessaryParentheses/necessaryParentheses1.kt");
        }
        
        @TestMetadata("necessaryParentheses2.kt")
        public void testNecessaryParentheses2() throws Exception {
            doTestRemoveUnnecessaryParentheses("idea/testData/intentions/removeUnnecessaryParentheses/necessaryParentheses2.kt");
        }
        
        @TestMetadata("necessaryParentheses3.kt")
        public void testNecessaryParentheses3() throws Exception {
            doTestRemoveUnnecessaryParentheses("idea/testData/intentions/removeUnnecessaryParentheses/necessaryParentheses3.kt");
        }
        
        @TestMetadata("necessaryParentheses4.kt")
        public void testNecessaryParentheses4() throws Exception {
            doTestRemoveUnnecessaryParentheses("idea/testData/intentions/removeUnnecessaryParentheses/necessaryParentheses4.kt");
        }
        
        @TestMetadata("necessaryParentheses5.kt")
        public void testNecessaryParentheses5() throws Exception {
            doTestRemoveUnnecessaryParentheses("idea/testData/intentions/removeUnnecessaryParentheses/necessaryParentheses5.kt");
        }
        
        @TestMetadata("unnecessaryParentheses1.kt")
        public void testUnnecessaryParentheses1() throws Exception {
            doTestRemoveUnnecessaryParentheses("idea/testData/intentions/removeUnnecessaryParentheses/unnecessaryParentheses1.kt");
        }
        
        @TestMetadata("unnecessaryParentheses2.kt")
        public void testUnnecessaryParentheses2() throws Exception {
            doTestRemoveUnnecessaryParentheses("idea/testData/intentions/removeUnnecessaryParentheses/unnecessaryParentheses2.kt");
        }
        
        @TestMetadata("unnecessaryParentheses3.kt")
        public void testUnnecessaryParentheses3() throws Exception {
            doTestRemoveUnnecessaryParentheses("idea/testData/intentions/removeUnnecessaryParentheses/unnecessaryParentheses3.kt");
        }
        
        @TestMetadata("unnecessaryParentheses4.kt")
        public void testUnnecessaryParentheses4() throws Exception {
            doTestRemoveUnnecessaryParentheses("idea/testData/intentions/removeUnnecessaryParentheses/unnecessaryParentheses4.kt");
        }
        
        @TestMetadata("unnecessaryParentheses5.kt")
        public void testUnnecessaryParentheses5() throws Exception {
            doTestRemoveUnnecessaryParentheses("idea/testData/intentions/removeUnnecessaryParentheses/unnecessaryParentheses5.kt");
        }
        
        @TestMetadata("unnecessaryParentheses6.kt")
        public void testUnnecessaryParentheses6() throws Exception {
            doTestRemoveUnnecessaryParentheses("idea/testData/intentions/removeUnnecessaryParentheses/unnecessaryParentheses6.kt");
        }
        
        @TestMetadata("unnecessaryParentheses7.kt")
        public void testUnnecessaryParentheses7() throws Exception {
            doTestRemoveUnnecessaryParentheses("idea/testData/intentions/removeUnnecessaryParentheses/unnecessaryParentheses7.kt");
        }
        
        @TestMetadata("unnecessaryParentheses8.kt")
        public void testUnnecessaryParentheses8() throws Exception {
            doTestRemoveUnnecessaryParentheses("idea/testData/intentions/removeUnnecessaryParentheses/unnecessaryParentheses8.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/replaceWithDotQualifiedMethodCall")
    public static class ReplaceWithDotQualifiedMethodCall extends AbstractCodeTransformationTest {
        public void testAllFilesPresentInReplaceWithDotQualifiedMethodCall() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/replaceWithDotQualifiedMethodCall"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("functionCallAfterInfixCall.kt")
        public void testFunctionCallAfterInfixCall() throws Exception {
            doTestReplaceWithDotQualifiedMethodCall("idea/testData/intentions/replaceWithDotQualifiedMethodCall/functionCallAfterInfixCall.kt");
        }
        
        @TestMetadata("functionLiteralArgument.kt")
        public void testFunctionLiteralArgument() throws Exception {
            doTestReplaceWithDotQualifiedMethodCall("idea/testData/intentions/replaceWithDotQualifiedMethodCall/functionLiteralArgument.kt");
        }
        
        @TestMetadata("nonApplicableBinaryOperation.kt")
        public void testNonApplicableBinaryOperation() throws Exception {
            doTestReplaceWithDotQualifiedMethodCall("idea/testData/intentions/replaceWithDotQualifiedMethodCall/nonApplicableBinaryOperation.kt");
        }
        
        @TestMetadata("nullAssertedCall.kt")
        public void testNullAssertedCall() throws Exception {
            doTestReplaceWithDotQualifiedMethodCall("idea/testData/intentions/replaceWithDotQualifiedMethodCall/nullAssertedCall.kt");
        }
        
        @TestMetadata("parenthesesAroundRightHandArgument.kt")
        public void testParenthesesAroundRightHandArgument() throws Exception {
            doTestReplaceWithDotQualifiedMethodCall("idea/testData/intentions/replaceWithDotQualifiedMethodCall/parenthesesAroundRightHandArgument.kt");
        }
        
        @TestMetadata("simpleInfixFunctionCall.kt")
        public void testSimpleInfixFunctionCall() throws Exception {
            doTestReplaceWithDotQualifiedMethodCall("idea/testData/intentions/replaceWithDotQualifiedMethodCall/simpleInfixFunctionCall.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/replaceWithInfixFunctionCall")
    public static class ReplaceWithInfixFunctionCall extends AbstractCodeTransformationTest {
        public void testAllFilesPresentInReplaceWithInfixFunctionCall() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/replaceWithInfixFunctionCall"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("binaryExpressionArgument.kt")
        public void testBinaryExpressionArgument() throws Exception {
            doTestReplaceWithInfixFunctionCall("idea/testData/intentions/replaceWithInfixFunctionCall/binaryExpressionArgument.kt");
        }
        
        @TestMetadata("doubleFunctionCall.kt")
        public void testDoubleFunctionCall() throws Exception {
            doTestReplaceWithInfixFunctionCall("idea/testData/intentions/replaceWithInfixFunctionCall/doubleFunctionCall.kt");
        }
        
        @TestMetadata("doubleFunctionCallWithoutParentheses.kt")
        public void testDoubleFunctionCallWithoutParentheses() throws Exception {
            doTestReplaceWithInfixFunctionCall("idea/testData/intentions/replaceWithInfixFunctionCall/doubleFunctionCallWithoutParentheses.kt");
        }
        
        @TestMetadata("firstParameterLabeled.kt")
        public void testFirstParameterLabeled() throws Exception {
            doTestReplaceWithInfixFunctionCall("idea/testData/intentions/replaceWithInfixFunctionCall/firstParameterLabeled.kt");
        }
        
        @TestMetadata("functionLiteralArgument.kt")
        public void testFunctionLiteralArgument() throws Exception {
            doTestReplaceWithInfixFunctionCall("idea/testData/intentions/replaceWithInfixFunctionCall/functionLiteralArgument.kt");
        }
        
        @TestMetadata("functionSafeCall.kt")
        public void testFunctionSafeCall() throws Exception {
            doTestReplaceWithInfixFunctionCall("idea/testData/intentions/replaceWithInfixFunctionCall/functionSafeCall.kt");
        }
        
        @TestMetadata("multipleArguments.kt")
        public void testMultipleArguments() throws Exception {
            doTestReplaceWithInfixFunctionCall("idea/testData/intentions/replaceWithInfixFunctionCall/multipleArguments.kt");
        }
        
        @TestMetadata("namedArgument.kt")
        public void testNamedArgument() throws Exception {
            doTestReplaceWithInfixFunctionCall("idea/testData/intentions/replaceWithInfixFunctionCall/namedArgument.kt");
        }
        
        @TestMetadata("nullAssertedReceiver.kt")
        public void testNullAssertedReceiver() throws Exception {
            doTestReplaceWithInfixFunctionCall("idea/testData/intentions/replaceWithInfixFunctionCall/nullAssertedReceiver.kt");
        }
        
        @TestMetadata("propertyAccess.kt")
        public void testPropertyAccess() throws Exception {
            doTestReplaceWithInfixFunctionCall("idea/testData/intentions/replaceWithInfixFunctionCall/propertyAccess.kt");
        }
        
        @TestMetadata("secondParameterLabeled.kt")
        public void testSecondParameterLabeled() throws Exception {
            doTestReplaceWithInfixFunctionCall("idea/testData/intentions/replaceWithInfixFunctionCall/secondParameterLabeled.kt");
        }
        
        @TestMetadata("simpleArgumentAndFunctionLiteralArgument.kt")
        public void testSimpleArgumentAndFunctionLiteralArgument() throws Exception {
            doTestReplaceWithInfixFunctionCall("idea/testData/intentions/replaceWithInfixFunctionCall/simpleArgumentAndFunctionLiteralArgument.kt");
        }
        
        @TestMetadata("simpleMethodCall.kt")
        public void testSimpleMethodCall() throws Exception {
            doTestReplaceWithInfixFunctionCall("idea/testData/intentions/replaceWithInfixFunctionCall/simpleMethodCall.kt");
        }
        
        @TestMetadata("zeroArguments.kt")
        public void testZeroArguments() throws Exception {
            doTestReplaceWithInfixFunctionCall("idea/testData/intentions/replaceWithInfixFunctionCall/zeroArguments.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/removeCurlyBracesFromTemplate")
    public static class RemoveCurlyBracesFromTemplate extends AbstractCodeTransformationTest {
        public void testAllFilesPresentInRemoveCurlyBracesFromTemplate() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/removeCurlyBracesFromTemplate"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("necessaryBrackets1.kt")
        public void testNecessaryBrackets1() throws Exception {
            doTestRemoveCurlyFromTemplate("idea/testData/intentions/removeCurlyBracesFromTemplate/necessaryBrackets1.kt");
        }
        
        @TestMetadata("necessaryBrackets2.kt")
        public void testNecessaryBrackets2() throws Exception {
            doTestRemoveCurlyFromTemplate("idea/testData/intentions/removeCurlyBracesFromTemplate/necessaryBrackets2.kt");
        }
        
        @TestMetadata("necessaryBrackets3.kt")
        public void testNecessaryBrackets3() throws Exception {
            doTestRemoveCurlyFromTemplate("idea/testData/intentions/removeCurlyBracesFromTemplate/necessaryBrackets3.kt");
        }
        
        @TestMetadata("necessaryBrackets4.kt")
        public void testNecessaryBrackets4() throws Exception {
            doTestRemoveCurlyFromTemplate("idea/testData/intentions/removeCurlyBracesFromTemplate/necessaryBrackets4.kt");
        }
        
        @TestMetadata("necessaryBrackets5.kt")
        public void testNecessaryBrackets5() throws Exception {
            doTestRemoveCurlyFromTemplate("idea/testData/intentions/removeCurlyBracesFromTemplate/necessaryBrackets5.kt");
        }
        
        @TestMetadata("unnecessaryBrackets1.kt")
        public void testUnnecessaryBrackets1() throws Exception {
            doTestRemoveCurlyFromTemplate("idea/testData/intentions/removeCurlyBracesFromTemplate/unnecessaryBrackets1.kt");
        }
        
        @TestMetadata("unnecessaryBrackets2.kt")
        public void testUnnecessaryBrackets2() throws Exception {
            doTestRemoveCurlyFromTemplate("idea/testData/intentions/removeCurlyBracesFromTemplate/unnecessaryBrackets2.kt");
        }
        
        @TestMetadata("unnecessaryBrackets3.kt")
        public void testUnnecessaryBrackets3() throws Exception {
            doTestRemoveCurlyFromTemplate("idea/testData/intentions/removeCurlyBracesFromTemplate/unnecessaryBrackets3.kt");
        }
        
        @TestMetadata("unnecessaryBrackets4.kt")
        public void testUnnecessaryBrackets4() throws Exception {
            doTestRemoveCurlyFromTemplate("idea/testData/intentions/removeCurlyBracesFromTemplate/unnecessaryBrackets4.kt");
        }
        
        @TestMetadata("unnecessaryBrackets5.kt")
        public void testUnnecessaryBrackets5() throws Exception {
            doTestRemoveCurlyFromTemplate("idea/testData/intentions/removeCurlyBracesFromTemplate/unnecessaryBrackets5.kt");
        }
        
        @TestMetadata("unnecessaryBrackets6.kt")
        public void testUnnecessaryBrackets6() throws Exception {
            doTestRemoveCurlyFromTemplate("idea/testData/intentions/removeCurlyBracesFromTemplate/unnecessaryBrackets6.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/moveLambdaInsideParentheses")
    public static class MoveLambdaInsideParentheses extends AbstractCodeTransformationTest {
        public void testAllFilesPresentInMoveLambdaInsideParentheses() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/moveLambdaInsideParentheses"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("inapplicable1.kt")
        public void testInapplicable1() throws Exception {
            doTestMoveLambdaInsideParentheses("idea/testData/intentions/moveLambdaInsideParentheses/inapplicable1.kt");
        }
        
        @TestMetadata("inapplicable2.kt")
        public void testInapplicable2() throws Exception {
            doTestMoveLambdaInsideParentheses("idea/testData/intentions/moveLambdaInsideParentheses/inapplicable2.kt");
        }
        
        @TestMetadata("moveLambda1.kt")
        public void testMoveLambda1() throws Exception {
            doTestMoveLambdaInsideParentheses("idea/testData/intentions/moveLambdaInsideParentheses/moveLambda1.kt");
        }
        
        @TestMetadata("moveLambda10.kt")
        public void testMoveLambda10() throws Exception {
            doTestMoveLambdaInsideParentheses("idea/testData/intentions/moveLambdaInsideParentheses/moveLambda10.kt");
        }
        
        @TestMetadata("moveLambda11.kt")
        public void testMoveLambda11() throws Exception {
            doTestMoveLambdaInsideParentheses("idea/testData/intentions/moveLambdaInsideParentheses/moveLambda11.kt");
        }
        
        @TestMetadata("moveLambda12.kt")
        public void testMoveLambda12() throws Exception {
            doTestMoveLambdaInsideParentheses("idea/testData/intentions/moveLambdaInsideParentheses/moveLambda12.kt");
        }
        
        @TestMetadata("moveLambda2.kt")
        public void testMoveLambda2() throws Exception {
            doTestMoveLambdaInsideParentheses("idea/testData/intentions/moveLambdaInsideParentheses/moveLambda2.kt");
        }
        
        @TestMetadata("moveLambda3.kt")
        public void testMoveLambda3() throws Exception {
            doTestMoveLambdaInsideParentheses("idea/testData/intentions/moveLambdaInsideParentheses/moveLambda3.kt");
        }
        
        @TestMetadata("moveLambda4.kt")
        public void testMoveLambda4() throws Exception {
            doTestMoveLambdaInsideParentheses("idea/testData/intentions/moveLambdaInsideParentheses/moveLambda4.kt");
        }
        
        @TestMetadata("moveLambda5.kt")
        public void testMoveLambda5() throws Exception {
            doTestMoveLambdaInsideParentheses("idea/testData/intentions/moveLambdaInsideParentheses/moveLambda5.kt");
        }
        
        @TestMetadata("moveLambda6.kt")
        public void testMoveLambda6() throws Exception {
            doTestMoveLambdaInsideParentheses("idea/testData/intentions/moveLambdaInsideParentheses/moveLambda6.kt");
        }
        
        @TestMetadata("moveLambda7.kt")
        public void testMoveLambda7() throws Exception {
            doTestMoveLambdaInsideParentheses("idea/testData/intentions/moveLambdaInsideParentheses/moveLambda7.kt");
        }
        
        @TestMetadata("moveLambda8.kt")
        public void testMoveLambda8() throws Exception {
            doTestMoveLambdaInsideParentheses("idea/testData/intentions/moveLambdaInsideParentheses/moveLambda8.kt");
        }
        
        @TestMetadata("moveLambda9.kt")
        public void testMoveLambda9() throws Exception {
            doTestMoveLambdaInsideParentheses("idea/testData/intentions/moveLambdaInsideParentheses/moveLambda9.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/moveLambdaOutsideParentheses")
    public static class MoveLambdaOutsideParentheses extends AbstractCodeTransformationTest {
        public void testAllFilesPresentInMoveLambdaOutsideParentheses() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/moveLambdaOutsideParentheses"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("inapplicable1.kt")
        public void testInapplicable1() throws Exception {
            doTestMoveLambdaOutsideParentheses("idea/testData/intentions/moveLambdaOutsideParentheses/inapplicable1.kt");
        }
        
        @TestMetadata("inapplicable2.kt")
        public void testInapplicable2() throws Exception {
            doTestMoveLambdaOutsideParentheses("idea/testData/intentions/moveLambdaOutsideParentheses/inapplicable2.kt");
        }
        
        @TestMetadata("inapplicable3.kt")
        public void testInapplicable3() throws Exception {
            doTestMoveLambdaOutsideParentheses("idea/testData/intentions/moveLambdaOutsideParentheses/inapplicable3.kt");
        }
        
        @TestMetadata("moveLambda1.kt")
        public void testMoveLambda1() throws Exception {
            doTestMoveLambdaOutsideParentheses("idea/testData/intentions/moveLambdaOutsideParentheses/moveLambda1.kt");
        }
        
        @TestMetadata("moveLambda2.kt")
        public void testMoveLambda2() throws Exception {
            doTestMoveLambdaOutsideParentheses("idea/testData/intentions/moveLambdaOutsideParentheses/moveLambda2.kt");
        }
        
        @TestMetadata("moveLambda3.kt")
        public void testMoveLambda3() throws Exception {
            doTestMoveLambdaOutsideParentheses("idea/testData/intentions/moveLambdaOutsideParentheses/moveLambda3.kt");
        }
        
        @TestMetadata("moveLambda4.kt")
        public void testMoveLambda4() throws Exception {
            doTestMoveLambdaOutsideParentheses("idea/testData/intentions/moveLambdaOutsideParentheses/moveLambda4.kt");
        }
        
        @TestMetadata("moveLambda7.kt")
        public void testMoveLambda7() throws Exception {
            doTestMoveLambdaOutsideParentheses("idea/testData/intentions/moveLambdaOutsideParentheses/moveLambda7.kt");
        }
        
        @TestMetadata("moveLambda8.kt")
        public void testMoveLambda8() throws Exception {
            doTestMoveLambdaOutsideParentheses("idea/testData/intentions/moveLambdaOutsideParentheses/moveLambda8.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/replaceExplicitFunctionLiteralParamWithIt")
    public static class ReplaceExplicitFunctionLiteralParamWithIt extends AbstractCodeTransformationTest {
        public void testAllFilesPresentInReplaceExplicitFunctionLiteralParamWithIt() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/replaceExplicitFunctionLiteralParamWithIt"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("applicable_cursofOverParamInInnerLiteral.kt")
        public void testApplicable_cursofOverParamInInnerLiteral() throws Exception {
            doTestReplaceExplicitFunctionLiteralParamWithIt("idea/testData/intentions/replaceExplicitFunctionLiteralParamWithIt/applicable_cursofOverParamInInnerLiteral.kt");
        }
        
        @TestMetadata("applicable_cursorOverParameterDeclaration.kt")
        public void testApplicable_cursorOverParameterDeclaration() throws Exception {
            doTestReplaceExplicitFunctionLiteralParamWithIt("idea/testData/intentions/replaceExplicitFunctionLiteralParamWithIt/applicable_cursorOverParameterDeclaration.kt");
        }
        
        @TestMetadata("applicable_cursorOverParameterUse.kt")
        public void testApplicable_cursorOverParameterUse() throws Exception {
            doTestReplaceExplicitFunctionLiteralParamWithIt("idea/testData/intentions/replaceExplicitFunctionLiteralParamWithIt/applicable_cursorOverParameterUse.kt");
        }
        
        @TestMetadata("applicable_formatsProperly.kt")
        public void testApplicable_formatsProperly() throws Exception {
            doTestReplaceExplicitFunctionLiteralParamWithIt("idea/testData/intentions/replaceExplicitFunctionLiteralParamWithIt/applicable_formatsProperly.kt");
        }
        
        @TestMetadata("notApplicable_alreadyUsesImplicitIt.kt")
        public void testNotApplicable_alreadyUsesImplicitIt() throws Exception {
            doTestReplaceExplicitFunctionLiteralParamWithIt("idea/testData/intentions/replaceExplicitFunctionLiteralParamWithIt/notApplicable_alreadyUsesImplicitIt.kt");
        }
        
        @TestMetadata("notApplicable_hasMultipleParameters.kt")
        public void testNotApplicable_hasMultipleParameters() throws Exception {
            doTestReplaceExplicitFunctionLiteralParamWithIt("idea/testData/intentions/replaceExplicitFunctionLiteralParamWithIt/notApplicable_hasMultipleParameters.kt");
        }
        
        @TestMetadata("notApplicable_notFunctionLiteralParameter.kt")
        public void testNotApplicable_notFunctionLiteralParameter() throws Exception {
            doTestReplaceExplicitFunctionLiteralParamWithIt("idea/testData/intentions/replaceExplicitFunctionLiteralParamWithIt/notApplicable_notFunctionLiteralParameter.kt");
        }
        
        @TestMetadata("notApplicable_parameterHasExplicitType.kt")
        public void testNotApplicable_parameterHasExplicitType() throws Exception {
            doTestReplaceExplicitFunctionLiteralParamWithIt("idea/testData/intentions/replaceExplicitFunctionLiteralParamWithIt/notApplicable_parameterHasExplicitType.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/replaceItWithExplicitFunctionLiteralParam")
    public static class ReplaceItWithExplicitFunctionLiteralParam extends AbstractCodeTransformationTest {
        public void testAllFilesPresentInReplaceItWithExplicitFunctionLiteralParam() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/replaceItWithExplicitFunctionLiteralParam"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("applicable.kt")
        public void testApplicable() throws Exception {
            doTestReplaceItWithExplicitFunctionLiteralParam("idea/testData/intentions/replaceItWithExplicitFunctionLiteralParam/applicable.kt");
        }
        
        @TestMetadata("applicable_nestedFunctionLiterals.kt")
        public void testApplicable_nestedFunctionLiterals() throws Exception {
            doTestReplaceItWithExplicitFunctionLiteralParam("idea/testData/intentions/replaceItWithExplicitFunctionLiteralParam/applicable_nestedFunctionLiterals.kt");
        }
        
        @TestMetadata("applicable_nestedFunctionWithIt.kt")
        public void testApplicable_nestedFunctionWithIt() throws Exception {
            doTestReplaceItWithExplicitFunctionLiteralParam("idea/testData/intentions/replaceItWithExplicitFunctionLiteralParam/applicable_nestedFunctionWithIt.kt");
        }
        
        @TestMetadata("notApplicable_localVariableIt.kt")
        public void testNotApplicable_localVariableIt() throws Exception {
            doTestReplaceItWithExplicitFunctionLiteralParam("idea/testData/intentions/replaceItWithExplicitFunctionLiteralParam/notApplicable_localVariableIt.kt");
        }
        
        @TestMetadata("notApplicable_parameterExplicitlyNamedIt.kt")
        public void testNotApplicable_parameterExplicitlyNamedIt() throws Exception {
            doTestReplaceItWithExplicitFunctionLiteralParam("idea/testData/intentions/replaceItWithExplicitFunctionLiteralParam/notApplicable_parameterExplicitlyNamedIt.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/removeBraces")
    public static class RemoveBraces extends AbstractCodeTransformationTest {
        public void testAllFilesPresentInRemoveBraces() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/removeBraces"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("removeBracesForDoWhile.kt")
        public void testRemoveBracesForDoWhile() throws Exception {
            doTestRemoveBraces("idea/testData/intentions/removeBraces/removeBracesForDoWhile.kt");
        }
        
        @TestMetadata("removeBracesForDoWhileWithTwoStatements.kt")
        public void testRemoveBracesForDoWhileWithTwoStatements() throws Exception {
            doTestRemoveBraces("idea/testData/intentions/removeBraces/removeBracesForDoWhileWithTwoStatements.kt");
        }
        
        @TestMetadata("removeBracesForElse.kt")
        public void testRemoveBracesForElse() throws Exception {
            doTestRemoveBraces("idea/testData/intentions/removeBraces/removeBracesForElse.kt");
        }
        
        @TestMetadata("removeBracesForFor.kt")
        public void testRemoveBracesForFor() throws Exception {
            doTestRemoveBraces("idea/testData/intentions/removeBraces/removeBracesForFor.kt");
        }
        
        @TestMetadata("removeBracesForIf.kt")
        public void testRemoveBracesForIf() throws Exception {
            doTestRemoveBraces("idea/testData/intentions/removeBraces/removeBracesForIf.kt");
        }
        
        @TestMetadata("removeBracesForIfWithComment.kt")
        public void testRemoveBracesForIfWithComment() throws Exception {
            doTestRemoveBraces("idea/testData/intentions/removeBraces/removeBracesForIfWithComment.kt");
        }
        
        @TestMetadata("removeBracesForIfWithNoStatement.kt")
        public void testRemoveBracesForIfWithNoStatement() throws Exception {
            doTestRemoveBraces("idea/testData/intentions/removeBraces/removeBracesForIfWithNoStatement.kt");
        }
        
        @TestMetadata("removeBracesForIfWithSemicolon.kt")
        public void testRemoveBracesForIfWithSemicolon() throws Exception {
            doTestRemoveBraces("idea/testData/intentions/removeBraces/removeBracesForIfWithSemicolon.kt");
        }
        
        @TestMetadata("removeBracesForIfWithTwoStatements.kt")
        public void testRemoveBracesForIfWithTwoStatements() throws Exception {
            doTestRemoveBraces("idea/testData/intentions/removeBraces/removeBracesForIfWithTwoStatements.kt");
        }
        
        @TestMetadata("removeBracesForWhile.kt")
        public void testRemoveBracesForWhile() throws Exception {
            doTestRemoveBraces("idea/testData/intentions/removeBraces/removeBracesForWhile.kt");
        }
        
        @TestMetadata("removeBracesForWhileWithTwoStatements.kt")
        public void testRemoveBracesForWhileWithTwoStatements() throws Exception {
            doTestRemoveBraces("idea/testData/intentions/removeBraces/removeBracesForWhileWithTwoStatements.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/addBraces")
    public static class AddBraces extends AbstractCodeTransformationTest {
        @TestMetadata("addBracesForDoWhile.kt")
        public void testAddBracesForDoWhile() throws Exception {
            doTestAddBraces("idea/testData/intentions/addBraces/addBracesForDoWhile.kt");
        }
        
        @TestMetadata("addBracesForElse.kt")
        public void testAddBracesForElse() throws Exception {
            doTestAddBraces("idea/testData/intentions/addBraces/addBracesForElse.kt");
        }
        
        @TestMetadata("addBracesForFor.kt")
        public void testAddBracesForFor() throws Exception {
            doTestAddBraces("idea/testData/intentions/addBraces/addBracesForFor.kt");
        }
        
        @TestMetadata("addBracesForIf.kt")
        public void testAddBracesForIf() throws Exception {
            doTestAddBraces("idea/testData/intentions/addBraces/addBracesForIf.kt");
        }
        
        @TestMetadata("addBracesForIfWithNoSpace.kt")
        public void testAddBracesForIfWithNoSpace() throws Exception {
            doTestAddBraces("idea/testData/intentions/addBraces/addBracesForIfWithNoSpace.kt");
        }
        
        @TestMetadata("addBracesForIfWithSemicolon.kt")
        public void testAddBracesForIfWithSemicolon() throws Exception {
            doTestAddBraces("idea/testData/intentions/addBraces/addBracesForIfWithSemicolon.kt");
        }
        
        @TestMetadata("addBracesForWhile.kt")
        public void testAddBracesForWhile() throws Exception {
            doTestAddBraces("idea/testData/intentions/addBraces/addBracesForWhile.kt");
        }
        
        @TestMetadata("addBracesWithBraces.kt")
        public void testAddBracesWithBraces() throws Exception {
            doTestAddBraces("idea/testData/intentions/addBraces/addBracesWithBraces.kt");
        }
        
        public void testAllFilesPresentInAddBraces() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/addBraces"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/attributeCallReplacements/replaceGetIntention")
    @InnerTestClasses({})
    public static class ReplaceGetIntention extends AbstractCodeTransformationTest {
        @TestMetadata("acceptableVararg.kt")
        public void testAcceptableVararg() throws Exception {
            doTestReplaceGetIntention("idea/testData/intentions/attributeCallReplacements/replaceGetIntention/acceptableVararg.kt");
        }
        
        public void testAllFilesPresentInReplaceGetIntention() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/attributeCallReplacements/replaceGetIntention"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("argumentAndFunction.kt")
        public void testArgumentAndFunction() throws Exception {
            doTestReplaceGetIntention("idea/testData/intentions/attributeCallReplacements/replaceGetIntention/argumentAndFunction.kt");
        }
        
        @TestMetadata("duplicateArguments.kt")
        public void testDuplicateArguments() throws Exception {
            doTestReplaceGetIntention("idea/testData/intentions/attributeCallReplacements/replaceGetIntention/duplicateArguments.kt");
        }
        
        @TestMetadata("extensionFunction.kt")
        public void testExtensionFunction() throws Exception {
            doTestReplaceGetIntention("idea/testData/intentions/attributeCallReplacements/replaceGetIntention/extensionFunction.kt");
        }
        
        @TestMetadata("functionalArgument.kt")
        public void testFunctionalArgument() throws Exception {
            doTestReplaceGetIntention("idea/testData/intentions/attributeCallReplacements/replaceGetIntention/functionalArgument.kt");
        }
        
        @TestMetadata("invalidArgument.kt")
        public void testInvalidArgument() throws Exception {
            doTestReplaceGetIntention("idea/testData/intentions/attributeCallReplacements/replaceGetIntention/invalidArgument.kt");
        }
        
        @TestMetadata("missingArgument.kt")
        public void testMissingArgument() throws Exception {
            doTestReplaceGetIntention("idea/testData/intentions/attributeCallReplacements/replaceGetIntention/missingArgument.kt");
        }
        
        @TestMetadata("missingDefaultArgument.kt")
        public void testMissingDefaultArgument() throws Exception {
            doTestReplaceGetIntention("idea/testData/intentions/attributeCallReplacements/replaceGetIntention/missingDefaultArgument.kt");
        }
        
        @TestMetadata("multiArgument.kt")
        public void testMultiArgument() throws Exception {
            doTestReplaceGetIntention("idea/testData/intentions/attributeCallReplacements/replaceGetIntention/multiArgument.kt");
        }
        
        @TestMetadata("namedAndFunction.kt")
        public void testNamedAndFunction() throws Exception {
            doTestReplaceGetIntention("idea/testData/intentions/attributeCallReplacements/replaceGetIntention/namedAndFunction.kt");
        }
        
        @TestMetadata("noArgument.kt")
        public void testNoArgument() throws Exception {
            doTestReplaceGetIntention("idea/testData/intentions/attributeCallReplacements/replaceGetIntention/noArgument.kt");
        }
        
        @TestMetadata("sanityCheck.kt")
        public void testSanityCheck() throws Exception {
            doTestReplaceGetIntention("idea/testData/intentions/attributeCallReplacements/replaceGetIntention/sanityCheck.kt");
        }
        
        @TestMetadata("singleArgument.kt")
        public void testSingleArgument() throws Exception {
            doTestReplaceGetIntention("idea/testData/intentions/attributeCallReplacements/replaceGetIntention/singleArgument.kt");
        }
        
        @TestMetadata("singleNamedArgument.kt")
        public void testSingleNamedArgument() throws Exception {
            doTestReplaceGetIntention("idea/testData/intentions/attributeCallReplacements/replaceGetIntention/singleNamedArgument.kt");
        }
        
        @TestMetadata("unacceptableVararg.kt")
        public void testUnacceptableVararg() throws Exception {
            doTestReplaceGetIntention("idea/testData/intentions/attributeCallReplacements/replaceGetIntention/unacceptableVararg.kt");
        }
        
        @TestMetadata("unnamedAndNamed.kt")
        public void testUnnamedAndNamed() throws Exception {
            doTestReplaceGetIntention("idea/testData/intentions/attributeCallReplacements/replaceGetIntention/unnamedAndNamed.kt");
        }
        
        public static Test innerSuite() {
            TestSuite suite = new TestSuite("ReplaceGetIntention");
            suite.addTestSuite(ReplaceGetIntention.class);
            return suite;
        }
    }
    
    @TestMetadata("idea/testData/intentions/attributeCallReplacements/replaceContainsIntention")
    public static class ReplaceContainsIntention extends AbstractCodeTransformationTest {
        @TestMetadata("acceptableVararg.kt")
        public void testAcceptableVararg() throws Exception {
            doTestReplaceContainsIntention("idea/testData/intentions/attributeCallReplacements/replaceContainsIntention/acceptableVararg.kt");
        }
        
        @TestMetadata("acceptableVararg2.kt")
        public void testAcceptableVararg2() throws Exception {
            doTestReplaceContainsIntention("idea/testData/intentions/attributeCallReplacements/replaceContainsIntention/acceptableVararg2.kt");
        }
        
        public void testAllFilesPresentInReplaceContainsIntention() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/attributeCallReplacements/replaceContainsIntention"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("allowableDefaultArgument.kt")
        public void testAllowableDefaultArgument() throws Exception {
            doTestReplaceContainsIntention("idea/testData/intentions/attributeCallReplacements/replaceContainsIntention/allowableDefaultArgument.kt");
        }
        
        @TestMetadata("containsInExpression.kt")
        public void testContainsInExpression() throws Exception {
            doTestReplaceContainsIntention("idea/testData/intentions/attributeCallReplacements/replaceContainsIntention/containsInExpression.kt");
        }
        
        @TestMetadata("extensionFunction.kt")
        public void testExtensionFunction() throws Exception {
            doTestReplaceContainsIntention("idea/testData/intentions/attributeCallReplacements/replaceContainsIntention/extensionFunction.kt");
        }
        
        @TestMetadata("functionLiteralArgument.kt")
        public void testFunctionLiteralArgument() throws Exception {
            doTestReplaceContainsIntention("idea/testData/intentions/attributeCallReplacements/replaceContainsIntention/functionLiteralArgument.kt");
        }
        
        @TestMetadata("functionLiteralArgumentAfterSemicolon.kt")
        public void testFunctionLiteralArgumentAfterSemicolon() throws Exception {
            doTestReplaceContainsIntention("idea/testData/intentions/attributeCallReplacements/replaceContainsIntention/functionLiteralArgumentAfterSemicolon.kt");
        }
        
        @TestMetadata("functionLiteralArgumentAtStartOfBlock.kt")
        public void testFunctionLiteralArgumentAtStartOfBlock() throws Exception {
            doTestReplaceContainsIntention("idea/testData/intentions/attributeCallReplacements/replaceContainsIntention/functionLiteralArgumentAtStartOfBlock.kt");
        }
        
        @TestMetadata("functionLiteralArgumentInExpression.kt")
        public void testFunctionLiteralArgumentInExpression() throws Exception {
            doTestReplaceContainsIntention("idea/testData/intentions/attributeCallReplacements/replaceContainsIntention/functionLiteralArgumentInExpression.kt");
        }
        
        @TestMetadata("invalidArgument.kt")
        public void testInvalidArgument() throws Exception {
            doTestReplaceContainsIntention("idea/testData/intentions/attributeCallReplacements/replaceContainsIntention/invalidArgument.kt");
        }
        
        @TestMetadata("missingArgument.kt")
        public void testMissingArgument() throws Exception {
            doTestReplaceContainsIntention("idea/testData/intentions/attributeCallReplacements/replaceContainsIntention/missingArgument.kt");
        }
        
        @TestMetadata("missingDefaultArgument.kt")
        public void testMissingDefaultArgument() throws Exception {
            doTestReplaceContainsIntention("idea/testData/intentions/attributeCallReplacements/replaceContainsIntention/missingDefaultArgument.kt");
        }
        
        @TestMetadata("multipleArguments.kt")
        public void testMultipleArguments() throws Exception {
            doTestReplaceContainsIntention("idea/testData/intentions/attributeCallReplacements/replaceContainsIntention/multipleArguments.kt");
        }
        
        @TestMetadata("simpleArgument.kt")
        public void testSimpleArgument() throws Exception {
            doTestReplaceContainsIntention("idea/testData/intentions/attributeCallReplacements/replaceContainsIntention/simpleArgument.kt");
        }
        
        @TestMetadata("typeArguments.kt")
        public void testTypeArguments() throws Exception {
            doTestReplaceContainsIntention("idea/testData/intentions/attributeCallReplacements/replaceContainsIntention/typeArguments.kt");
        }
        
        @TestMetadata("unacceptableVararg1.kt")
        public void testUnacceptableVararg1() throws Exception {
            doTestReplaceContainsIntention("idea/testData/intentions/attributeCallReplacements/replaceContainsIntention/unacceptableVararg1.kt");
        }
        
        @TestMetadata("unacceptableVararg2.kt")
        public void testUnacceptableVararg2() throws Exception {
            doTestReplaceContainsIntention("idea/testData/intentions/attributeCallReplacements/replaceContainsIntention/unacceptableVararg2.kt");
        }
        
        @TestMetadata("validNamedArgument.kt")
        public void testValidNamedArgument() throws Exception {
            doTestReplaceContainsIntention("idea/testData/intentions/attributeCallReplacements/replaceContainsIntention/validNamedArgument.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/attributeCallReplacements/replaceBinaryInfixIntention")
    public static class ReplaceBinaryInfixIntention extends AbstractCodeTransformationTest {
        @TestMetadata("acceptableVararg1.kt")
        public void testAcceptableVararg1() throws Exception {
            doTestReplaceBinaryInfixIntention("idea/testData/intentions/attributeCallReplacements/replaceBinaryInfixIntention/acceptableVararg1.kt");
        }
        
        @TestMetadata("acceptableVararg2.kt")
        public void testAcceptableVararg2() throws Exception {
            doTestReplaceBinaryInfixIntention("idea/testData/intentions/attributeCallReplacements/replaceBinaryInfixIntention/acceptableVararg2.kt");
        }
        
        public void testAllFilesPresentInReplaceBinaryInfixIntention() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/attributeCallReplacements/replaceBinaryInfixIntention"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("allowableDefaultArgument.kt")
        public void testAllowableDefaultArgument() throws Exception {
            doTestReplaceBinaryInfixIntention("idea/testData/intentions/attributeCallReplacements/replaceBinaryInfixIntention/allowableDefaultArgument.kt");
        }
        
        @TestMetadata("divSanityTest.kt")
        public void testDivSanityTest() throws Exception {
            doTestReplaceBinaryInfixIntention("idea/testData/intentions/attributeCallReplacements/replaceBinaryInfixIntention/divSanityTest.kt");
        }
        
        @TestMetadata("extensionFunction.kt")
        public void testExtensionFunction() throws Exception {
            doTestReplaceBinaryInfixIntention("idea/testData/intentions/attributeCallReplacements/replaceBinaryInfixIntention/extensionFunction.kt");
        }
        
        @TestMetadata("functionLiteralArgument.kt")
        public void testFunctionLiteralArgument() throws Exception {
            doTestReplaceBinaryInfixIntention("idea/testData/intentions/attributeCallReplacements/replaceBinaryInfixIntention/functionLiteralArgument.kt");
        }
        
        @TestMetadata("minusSanityTest.kt")
        public void testMinusSanityTest() throws Exception {
            doTestReplaceBinaryInfixIntention("idea/testData/intentions/attributeCallReplacements/replaceBinaryInfixIntention/minusSanityTest.kt");
        }
        
        @TestMetadata("missingDefaultArgument.kt")
        public void testMissingDefaultArgument() throws Exception {
            doTestReplaceBinaryInfixIntention("idea/testData/intentions/attributeCallReplacements/replaceBinaryInfixIntention/missingDefaultArgument.kt");
        }
        
        @TestMetadata("modSanityTest.kt")
        public void testModSanityTest() throws Exception {
            doTestReplaceBinaryInfixIntention("idea/testData/intentions/attributeCallReplacements/replaceBinaryInfixIntention/modSanityTest.kt");
        }
        
        @TestMetadata("multipleArguments.kt")
        public void testMultipleArguments() throws Exception {
            doTestReplaceBinaryInfixIntention("idea/testData/intentions/attributeCallReplacements/replaceBinaryInfixIntention/multipleArguments.kt");
        }
        
        @TestMetadata("plusSanityTest.kt")
        public void testPlusSanityTest() throws Exception {
            doTestReplaceBinaryInfixIntention("idea/testData/intentions/attributeCallReplacements/replaceBinaryInfixIntention/plusSanityTest.kt");
        }
        
        @TestMetadata("rangeToSanityTest.kt")
        public void testRangeToSanityTest() throws Exception {
            doTestReplaceBinaryInfixIntention("idea/testData/intentions/attributeCallReplacements/replaceBinaryInfixIntention/rangeToSanityTest.kt");
        }
        
        @TestMetadata("timesSanityTest.kt")
        public void testTimesSanityTest() throws Exception {
            doTestReplaceBinaryInfixIntention("idea/testData/intentions/attributeCallReplacements/replaceBinaryInfixIntention/timesSanityTest.kt");
        }
        
        @TestMetadata("typeArguments.kt")
        public void testTypeArguments() throws Exception {
            doTestReplaceBinaryInfixIntention("idea/testData/intentions/attributeCallReplacements/replaceBinaryInfixIntention/typeArguments.kt");
        }
        
        @TestMetadata("unacceptableVararg1.kt")
        public void testUnacceptableVararg1() throws Exception {
            doTestReplaceBinaryInfixIntention("idea/testData/intentions/attributeCallReplacements/replaceBinaryInfixIntention/unacceptableVararg1.kt");
        }
        
        @TestMetadata("unacceptableVararg2.kt")
        public void testUnacceptableVararg2() throws Exception {
            doTestReplaceBinaryInfixIntention("idea/testData/intentions/attributeCallReplacements/replaceBinaryInfixIntention/unacceptableVararg2.kt");
        }
        
        @TestMetadata("validNamedArgument.kt")
        public void testValidNamedArgument() throws Exception {
            doTestReplaceBinaryInfixIntention("idea/testData/intentions/attributeCallReplacements/replaceBinaryInfixIntention/validNamedArgument.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/attributeCallReplacements/replaceUnaryPrefixIntention")
    public static class ReplaceUnaryPrefixIntention extends AbstractCodeTransformationTest {
        @TestMetadata("acceptableVararg.kt")
        public void testAcceptableVararg() throws Exception {
            doTestReplaceUnaryPrefixIntention("idea/testData/intentions/attributeCallReplacements/replaceUnaryPrefixIntention/acceptableVararg.kt");
        }
        
        public void testAllFilesPresentInReplaceUnaryPrefixIntention() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/attributeCallReplacements/replaceUnaryPrefixIntention"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("complexPlus.kt")
        public void testComplexPlus() throws Exception {
            doTestReplaceUnaryPrefixIntention("idea/testData/intentions/attributeCallReplacements/replaceUnaryPrefixIntention/complexPlus.kt");
        }
        
        @TestMetadata("defaultArgument.kt")
        public void testDefaultArgument() throws Exception {
            doTestReplaceUnaryPrefixIntention("idea/testData/intentions/attributeCallReplacements/replaceUnaryPrefixIntention/defaultArgument.kt");
        }
        
        @TestMetadata("extensionFunction.kt")
        public void testExtensionFunction() throws Exception {
            doTestReplaceUnaryPrefixIntention("idea/testData/intentions/attributeCallReplacements/replaceUnaryPrefixIntention/extensionFunction.kt");
        }
        
        @TestMetadata("functionLiteralArgument.kt")
        public void testFunctionLiteralArgument() throws Exception {
            doTestReplaceUnaryPrefixIntention("idea/testData/intentions/attributeCallReplacements/replaceUnaryPrefixIntention/functionLiteralArgument.kt");
        }
        
        @TestMetadata("minusSanityTest.kt")
        public void testMinusSanityTest() throws Exception {
            doTestReplaceUnaryPrefixIntention("idea/testData/intentions/attributeCallReplacements/replaceUnaryPrefixIntention/minusSanityTest.kt");
        }
        
        @TestMetadata("namedValueArgument.kt")
        public void testNamedValueArgument() throws Exception {
            doTestReplaceUnaryPrefixIntention("idea/testData/intentions/attributeCallReplacements/replaceUnaryPrefixIntention/namedValueArgument.kt");
        }
        
        @TestMetadata("notSanityTest.kt")
        public void testNotSanityTest() throws Exception {
            doTestReplaceUnaryPrefixIntention("idea/testData/intentions/attributeCallReplacements/replaceUnaryPrefixIntention/notSanityTest.kt");
        }
        
        @TestMetadata("plusPlus.kt")
        public void testPlusPlus() throws Exception {
            doTestReplaceUnaryPrefixIntention("idea/testData/intentions/attributeCallReplacements/replaceUnaryPrefixIntention/plusPlus.kt");
        }
        
        @TestMetadata("plusSanityTest.kt")
        public void testPlusSanityTest() throws Exception {
            doTestReplaceUnaryPrefixIntention("idea/testData/intentions/attributeCallReplacements/replaceUnaryPrefixIntention/plusSanityTest.kt");
        }
        
        @TestMetadata("typeArguments.kt")
        public void testTypeArguments() throws Exception {
            doTestReplaceUnaryPrefixIntention("idea/testData/intentions/attributeCallReplacements/replaceUnaryPrefixIntention/typeArguments.kt");
        }
        
        @TestMetadata("unacceptableVararg.kt")
        public void testUnacceptableVararg() throws Exception {
            doTestReplaceUnaryPrefixIntention("idea/testData/intentions/attributeCallReplacements/replaceUnaryPrefixIntention/unacceptableVararg.kt");
        }
        
        @TestMetadata("valueArgument.kt")
        public void testValueArgument() throws Exception {
            doTestReplaceUnaryPrefixIntention("idea/testData/intentions/attributeCallReplacements/replaceUnaryPrefixIntention/valueArgument.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/attributeCallReplacements/replaceInvokeIntention")
    public static class ReplaceInvokeIntention extends AbstractCodeTransformationTest {
        public void testAllFilesPresentInReplaceInvokeIntention() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/attributeCallReplacements/replaceInvokeIntention"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("extensionFunction.kt")
        public void testExtensionFunction() throws Exception {
            doTestReplaceInvokeIntention("idea/testData/intentions/attributeCallReplacements/replaceInvokeIntention/extensionFunction.kt");
        }
        
        @TestMetadata("functionLiteralInvoke.kt")
        public void testFunctionLiteralInvoke() throws Exception {
            doTestReplaceInvokeIntention("idea/testData/intentions/attributeCallReplacements/replaceInvokeIntention/functionLiteralInvoke.kt");
        }
        
        @TestMetadata("invokeInExpression.kt")
        public void testInvokeInExpression() throws Exception {
            doTestReplaceInvokeIntention("idea/testData/intentions/attributeCallReplacements/replaceInvokeIntention/invokeInExpression.kt");
        }
        
        @TestMetadata("namedArgumentInvoke.kt")
        public void testNamedArgumentInvoke() throws Exception {
            doTestReplaceInvokeIntention("idea/testData/intentions/attributeCallReplacements/replaceInvokeIntention/namedArgumentInvoke.kt");
        }
        
        @TestMetadata("noArgumentInvoke.kt")
        public void testNoArgumentInvoke() throws Exception {
            doTestReplaceInvokeIntention("idea/testData/intentions/attributeCallReplacements/replaceInvokeIntention/noArgumentInvoke.kt");
        }
        
        @TestMetadata("typeAndValueArgument.kt")
        public void testTypeAndValueArgument() throws Exception {
            doTestReplaceInvokeIntention("idea/testData/intentions/attributeCallReplacements/replaceInvokeIntention/typeAndValueArgument.kt");
        }
        
        @TestMetadata("typeArgumentAndFunctionLiteral.kt")
        public void testTypeArgumentAndFunctionLiteral() throws Exception {
            doTestReplaceInvokeIntention("idea/testData/intentions/attributeCallReplacements/replaceInvokeIntention/typeArgumentAndFunctionLiteral.kt");
        }
        
        @TestMetadata("valueAndFunctionLiteralInvoke.kt")
        public void testValueAndFunctionLiteralInvoke() throws Exception {
            doTestReplaceInvokeIntention("idea/testData/intentions/attributeCallReplacements/replaceInvokeIntention/valueAndFunctionLiteralInvoke.kt");
        }
        
        @TestMetadata("valueArgumentInvoke.kt")
        public void testValueArgumentInvoke() throws Exception {
            doTestReplaceInvokeIntention("idea/testData/intentions/attributeCallReplacements/replaceInvokeIntention/valueArgumentInvoke.kt");
        }
        
        @TestMetadata("varargInvoke.kt")
        public void testVarargInvoke() throws Exception {
            doTestReplaceInvokeIntention("idea/testData/intentions/attributeCallReplacements/replaceInvokeIntention/varargInvoke.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/simplifyNegatedBinaryExpressionIntention")
    public static class SimplifyNegatedBinaryExpressionIntention extends AbstractCodeTransformationTest {
        public void testAllFilesPresentInSimplifyNegatedBinaryExpressionIntention() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/simplifyNegatedBinaryExpressionIntention"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("equals.kt")
        public void testEquals() throws Exception {
            doTestSimplifyNegatedBinaryExpressionIntention("idea/testData/intentions/simplifyNegatedBinaryExpressionIntention/equals.kt");
        }
        
        @TestMetadata("greaterThan.kt")
        public void testGreaterThan() throws Exception {
            doTestSimplifyNegatedBinaryExpressionIntention("idea/testData/intentions/simplifyNegatedBinaryExpressionIntention/greaterThan.kt");
        }
        
        @TestMetadata("greaterThanOrEquals.kt")
        public void testGreaterThanOrEquals() throws Exception {
            doTestSimplifyNegatedBinaryExpressionIntention("idea/testData/intentions/simplifyNegatedBinaryExpressionIntention/greaterThanOrEquals.kt");
        }
        
        @TestMetadata("in.kt")
        public void testIn() throws Exception {
            doTestSimplifyNegatedBinaryExpressionIntention("idea/testData/intentions/simplifyNegatedBinaryExpressionIntention/in.kt");
        }
        
        @TestMetadata("inapplicableBinaryOperation.kt")
        public void testInapplicableBinaryOperation() throws Exception {
            doTestSimplifyNegatedBinaryExpressionIntention("idea/testData/intentions/simplifyNegatedBinaryExpressionIntention/inapplicableBinaryOperation.kt");
        }
        
        @TestMetadata("is.kt")
        public void testIs() throws Exception {
            doTestSimplifyNegatedBinaryExpressionIntention("idea/testData/intentions/simplifyNegatedBinaryExpressionIntention/is.kt");
        }
        
        @TestMetadata("lessThan.kt")
        public void testLessThan() throws Exception {
            doTestSimplifyNegatedBinaryExpressionIntention("idea/testData/intentions/simplifyNegatedBinaryExpressionIntention/lessThan.kt");
        }
        
        @TestMetadata("lessThanOrEquals.kt")
        public void testLessThanOrEquals() throws Exception {
            doTestSimplifyNegatedBinaryExpressionIntention("idea/testData/intentions/simplifyNegatedBinaryExpressionIntention/lessThanOrEquals.kt");
        }
        
        @TestMetadata("notEquals.kt")
        public void testNotEquals() throws Exception {
            doTestSimplifyNegatedBinaryExpressionIntention("idea/testData/intentions/simplifyNegatedBinaryExpressionIntention/notEquals.kt");
        }
        
        @TestMetadata("notIn.kt")
        public void testNotIn() throws Exception {
            doTestSimplifyNegatedBinaryExpressionIntention("idea/testData/intentions/simplifyNegatedBinaryExpressionIntention/notIn.kt");
        }
        
        @TestMetadata("notIs.kt")
        public void testNotIs() throws Exception {
            doTestSimplifyNegatedBinaryExpressionIntention("idea/testData/intentions/simplifyNegatedBinaryExpressionIntention/notIs.kt");
        }
        
        @TestMetadata("simpleInvert.kt")
        public void testSimpleInvert() throws Exception {
            doTestSimplifyNegatedBinaryExpressionIntention("idea/testData/intentions/simplifyNegatedBinaryExpressionIntention/simpleInvert.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/convertNegatedBooleanSequence")
    public static class ConvertNegatedBooleanSequence extends AbstractCodeTransformationTest {
        public void testAllFilesPresentInConvertNegatedBooleanSequence() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/convertNegatedBooleanSequence"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("conjunctionOfThreeNegations.kt")
        public void testConjunctionOfThreeNegations() throws Exception {
            doTestConvertNegatedBooleanSequence("idea/testData/intentions/convertNegatedBooleanSequence/conjunctionOfThreeNegations.kt");
        }
        
        @TestMetadata("conjunctionOfTwoNegations.kt")
        public void testConjunctionOfTwoNegations() throws Exception {
            doTestConvertNegatedBooleanSequence("idea/testData/intentions/convertNegatedBooleanSequence/conjunctionOfTwoNegations.kt");
        }
        
        @TestMetadata("disjunctionOfTwoNegations.kt")
        public void testDisjunctionOfTwoNegations() throws Exception {
            doTestConvertNegatedBooleanSequence("idea/testData/intentions/convertNegatedBooleanSequence/disjunctionOfTwoNegations.kt");
        }
        
        @TestMetadata("doubleParenthesizedExpression.kt")
        public void testDoubleParenthesizedExpression() throws Exception {
            doTestConvertNegatedBooleanSequence("idea/testData/intentions/convertNegatedBooleanSequence/doubleParenthesizedExpression.kt");
        }
        
        @TestMetadata("inapplicableMixedOperators.kt")
        public void testInapplicableMixedOperators() throws Exception {
            doTestConvertNegatedBooleanSequence("idea/testData/intentions/convertNegatedBooleanSequence/inapplicableMixedOperators.kt");
        }
        
        @TestMetadata("inapplicableMixedSequence.kt")
        public void testInapplicableMixedSequence() throws Exception {
            doTestConvertNegatedBooleanSequence("idea/testData/intentions/convertNegatedBooleanSequence/inapplicableMixedSequence.kt");
        }
        
        @TestMetadata("inapplicableSingleExpression.kt")
        public void testInapplicableSingleExpression() throws Exception {
            doTestConvertNegatedBooleanSequence("idea/testData/intentions/convertNegatedBooleanSequence/inapplicableSingleExpression.kt");
        }
        
        @TestMetadata("negatedFunction.kt")
        public void testNegatedFunction() throws Exception {
            doTestConvertNegatedBooleanSequence("idea/testData/intentions/convertNegatedBooleanSequence/negatedFunction.kt");
        }
        
        @TestMetadata("parenthesizedConjunctionOfTwoNegations.kt")
        public void testParenthesizedConjunctionOfTwoNegations() throws Exception {
            doTestConvertNegatedBooleanSequence("idea/testData/intentions/convertNegatedBooleanSequence/parenthesizedConjunctionOfTwoNegations.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/convertNegatedExpressionWithDemorgansLaw")
    public static class ConvertNegatedExpressionWithDemorgansLaw extends AbstractCodeTransformationTest {
        public void testAllFilesPresentInConvertNegatedExpressionWithDemorgansLaw() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/convertNegatedExpressionWithDemorgansLaw"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("conjunctionNegation1.kt")
        public void testConjunctionNegation1() throws Exception {
            doTestConvertNegatedExpressionWithDemorgansLaw("idea/testData/intentions/convertNegatedExpressionWithDemorgansLaw/conjunctionNegation1.kt");
        }
        
        @TestMetadata("conjunctionNegation2.kt")
        public void testConjunctionNegation2() throws Exception {
            doTestConvertNegatedExpressionWithDemorgansLaw("idea/testData/intentions/convertNegatedExpressionWithDemorgansLaw/conjunctionNegation2.kt");
        }
        
        @TestMetadata("disjunctionNegation1.kt")
        public void testDisjunctionNegation1() throws Exception {
            doTestConvertNegatedExpressionWithDemorgansLaw("idea/testData/intentions/convertNegatedExpressionWithDemorgansLaw/disjunctionNegation1.kt");
        }
        
        @TestMetadata("disjunctionNegation2.kt")
        public void testDisjunctionNegation2() throws Exception {
            doTestConvertNegatedExpressionWithDemorgansLaw("idea/testData/intentions/convertNegatedExpressionWithDemorgansLaw/disjunctionNegation2.kt");
        }
        
        @TestMetadata("doubleNegation.kt")
        public void testDoubleNegation() throws Exception {
            doTestConvertNegatedExpressionWithDemorgansLaw("idea/testData/intentions/convertNegatedExpressionWithDemorgansLaw/doubleNegation.kt");
        }
        
        @TestMetadata("inapplicableNormalExpression.kt")
        public void testInapplicableNormalExpression() throws Exception {
            doTestConvertNegatedExpressionWithDemorgansLaw("idea/testData/intentions/convertNegatedExpressionWithDemorgansLaw/inapplicableNormalExpression.kt");
        }
        
        @TestMetadata("inapplicableOperator.kt")
        public void testInapplicableOperator() throws Exception {
            doTestConvertNegatedExpressionWithDemorgansLaw("idea/testData/intentions/convertNegatedExpressionWithDemorgansLaw/inapplicableOperator.kt");
        }
        
        @TestMetadata("inapplicableTriple.kt")
        public void testInapplicableTriple() throws Exception {
            doTestConvertNegatedExpressionWithDemorgansLaw("idea/testData/intentions/convertNegatedExpressionWithDemorgansLaw/inapplicableTriple.kt");
        }
        
        @TestMetadata("longMixedExpression.kt")
        public void testLongMixedExpression() throws Exception {
            doTestConvertNegatedExpressionWithDemorgansLaw("idea/testData/intentions/convertNegatedExpressionWithDemorgansLaw/longMixedExpression.kt");
        }
        
        @TestMetadata("mixedExpression.kt")
        public void testMixedExpression() throws Exception {
            doTestConvertNegatedExpressionWithDemorgansLaw("idea/testData/intentions/convertNegatedExpressionWithDemorgansLaw/mixedExpression.kt");
        }
        
        @TestMetadata("nonstandardPrefixOperator.kt")
        public void testNonstandardPrefixOperator() throws Exception {
            doTestConvertNegatedExpressionWithDemorgansLaw("idea/testData/intentions/convertNegatedExpressionWithDemorgansLaw/nonstandardPrefixOperator.kt");
        }
        
        @TestMetadata("retainedParens.kt")
        public void testRetainedParens() throws Exception {
            doTestConvertNegatedExpressionWithDemorgansLaw("idea/testData/intentions/convertNegatedExpressionWithDemorgansLaw/retainedParens.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/swapBinaryExpression")
    public static class SwapBinaryExpression extends AbstractCodeTransformationTest {
        public void testAllFilesPresentInSwapBinaryExpression() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/swapBinaryExpression"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("compareTo.kt")
        public void testCompareTo() throws Exception {
            doTestSwapBinaryExpression("idea/testData/intentions/swapBinaryExpression/compareTo.kt");
        }
        
        @TestMetadata("conjunction.kt")
        public void testConjunction() throws Exception {
            doTestSwapBinaryExpression("idea/testData/intentions/swapBinaryExpression/conjunction.kt");
        }
        
        @TestMetadata("conjunctionLiteral.kt")
        public void testConjunctionLiteral() throws Exception {
            doTestSwapBinaryExpression("idea/testData/intentions/swapBinaryExpression/conjunctionLiteral.kt");
        }
        
        @TestMetadata("disjunction.kt")
        public void testDisjunction() throws Exception {
            doTestSwapBinaryExpression("idea/testData/intentions/swapBinaryExpression/disjunction.kt");
        }
        
        @TestMetadata("disjunctionLiteral.kt")
        public void testDisjunctionLiteral() throws Exception {
            doTestSwapBinaryExpression("idea/testData/intentions/swapBinaryExpression/disjunctionLiteral.kt");
        }
        
        @TestMetadata("divide.kt")
        public void testDivide() throws Exception {
            doTestSwapBinaryExpression("idea/testData/intentions/swapBinaryExpression/divide.kt");
        }
        
        @TestMetadata("divideAssign.kt")
        public void testDivideAssign() throws Exception {
            doTestSwapBinaryExpression("idea/testData/intentions/swapBinaryExpression/divideAssign.kt");
        }
        
        @TestMetadata("divideLiteral.kt")
        public void testDivideLiteral() throws Exception {
            doTestSwapBinaryExpression("idea/testData/intentions/swapBinaryExpression/divideLiteral.kt");
        }
        
        @TestMetadata("doubleEquals.kt")
        public void testDoubleEquals() throws Exception {
            doTestSwapBinaryExpression("idea/testData/intentions/swapBinaryExpression/doubleEquals.kt");
        }
        
        @TestMetadata("equals.kt")
        public void testEquals() throws Exception {
            doTestSwapBinaryExpression("idea/testData/intentions/swapBinaryExpression/equals.kt");
        }
        
        @TestMetadata("equalsLiteral.kt")
        public void testEqualsLiteral() throws Exception {
            doTestSwapBinaryExpression("idea/testData/intentions/swapBinaryExpression/equalsLiteral.kt");
        }
        
        @TestMetadata("greaterThan.kt")
        public void testGreaterThan() throws Exception {
            doTestSwapBinaryExpression("idea/testData/intentions/swapBinaryExpression/greaterThan.kt");
        }
        
        @TestMetadata("greaterThanEquals.kt")
        public void testGreaterThanEquals() throws Exception {
            doTestSwapBinaryExpression("idea/testData/intentions/swapBinaryExpression/greaterThanEquals.kt");
        }
        
        @TestMetadata("in.kt")
        public void testIn() throws Exception {
            doTestSwapBinaryExpression("idea/testData/intentions/swapBinaryExpression/in.kt");
        }
        
        @TestMetadata("infixFunction.kt")
        public void testInfixFunction() throws Exception {
            doTestSwapBinaryExpression("idea/testData/intentions/swapBinaryExpression/infixFunction.kt");
        }
        
        @TestMetadata("is.kt")
        public void testIs() throws Exception {
            doTestSwapBinaryExpression("idea/testData/intentions/swapBinaryExpression/is.kt");
        }
        
        @TestMetadata("lessThan.kt")
        public void testLessThan() throws Exception {
            doTestSwapBinaryExpression("idea/testData/intentions/swapBinaryExpression/lessThan.kt");
        }
        
        @TestMetadata("lessThanEquals.kt")
        public void testLessThanEquals() throws Exception {
            doTestSwapBinaryExpression("idea/testData/intentions/swapBinaryExpression/lessThanEquals.kt");
        }
        
        @TestMetadata("minus.kt")
        public void testMinus() throws Exception {
            doTestSwapBinaryExpression("idea/testData/intentions/swapBinaryExpression/minus.kt");
        }
        
        @TestMetadata("minusAssign.kt")
        public void testMinusAssign() throws Exception {
            doTestSwapBinaryExpression("idea/testData/intentions/swapBinaryExpression/minusAssign.kt");
        }
        
        @TestMetadata("minusLiteral.kt")
        public void testMinusLiteral() throws Exception {
            doTestSwapBinaryExpression("idea/testData/intentions/swapBinaryExpression/minusLiteral.kt");
        }
        
        @TestMetadata("multipleOperands.kt")
        public void testMultipleOperands() throws Exception {
            doTestSwapBinaryExpression("idea/testData/intentions/swapBinaryExpression/multipleOperands.kt");
        }
        
        @TestMetadata("multiply.kt")
        public void testMultiply() throws Exception {
            doTestSwapBinaryExpression("idea/testData/intentions/swapBinaryExpression/multiply.kt");
        }
        
        @TestMetadata("multiplyAssign.kt")
        public void testMultiplyAssign() throws Exception {
            doTestSwapBinaryExpression("idea/testData/intentions/swapBinaryExpression/multiplyAssign.kt");
        }
        
        @TestMetadata("nonBinaryExpr.kt")
        public void testNonBinaryExpr() throws Exception {
            doTestSwapBinaryExpression("idea/testData/intentions/swapBinaryExpression/nonBinaryExpr.kt");
        }
        
        @TestMetadata("notDoubleEquals.kt")
        public void testNotDoubleEquals() throws Exception {
            doTestSwapBinaryExpression("idea/testData/intentions/swapBinaryExpression/notDoubleEquals.kt");
        }
        
        @TestMetadata("notEquals.kt")
        public void testNotEquals() throws Exception {
            doTestSwapBinaryExpression("idea/testData/intentions/swapBinaryExpression/notEquals.kt");
        }
        
        @TestMetadata("notIn.kt")
        public void testNotIn() throws Exception {
            doTestSwapBinaryExpression("idea/testData/intentions/swapBinaryExpression/notIn.kt");
        }
        
        @TestMetadata("notIs.kt")
        public void testNotIs() throws Exception {
            doTestSwapBinaryExpression("idea/testData/intentions/swapBinaryExpression/notIs.kt");
        }
        
        @TestMetadata("nullOperand.kt")
        public void testNullOperand() throws Exception {
            doTestSwapBinaryExpression("idea/testData/intentions/swapBinaryExpression/nullOperand.kt");
        }
        
        @TestMetadata("plus.kt")
        public void testPlus() throws Exception {
            doTestSwapBinaryExpression("idea/testData/intentions/swapBinaryExpression/plus.kt");
        }
        
        @TestMetadata("plusAssign.kt")
        public void testPlusAssign() throws Exception {
            doTestSwapBinaryExpression("idea/testData/intentions/swapBinaryExpression/plusAssign.kt");
        }
        
        @TestMetadata("plusInt.kt")
        public void testPlusInt() throws Exception {
            doTestSwapBinaryExpression("idea/testData/intentions/swapBinaryExpression/plusInt.kt");
        }
        
        @TestMetadata("plusLiteral.kt")
        public void testPlusLiteral() throws Exception {
            doTestSwapBinaryExpression("idea/testData/intentions/swapBinaryExpression/plusLiteral.kt");
        }
        
        @TestMetadata("rangeTo.kt")
        public void testRangeTo() throws Exception {
            doTestSwapBinaryExpression("idea/testData/intentions/swapBinaryExpression/rangeTo.kt");
        }
        
        @TestMetadata("rangeToLiteral.kt")
        public void testRangeToLiteral() throws Exception {
            doTestSwapBinaryExpression("idea/testData/intentions/swapBinaryExpression/rangeToLiteral.kt");
        }
        
        @TestMetadata("remainder.kt")
        public void testRemainder() throws Exception {
            doTestSwapBinaryExpression("idea/testData/intentions/swapBinaryExpression/remainder.kt");
        }
        
        @TestMetadata("remainderAssign.kt")
        public void testRemainderAssign() throws Exception {
            doTestSwapBinaryExpression("idea/testData/intentions/swapBinaryExpression/remainderAssign.kt");
        }
        
        @TestMetadata("times.kt")
        public void testTimes() throws Exception {
            doTestSwapBinaryExpression("idea/testData/intentions/swapBinaryExpression/times.kt");
        }
        
        @TestMetadata("timesAssign.kt")
        public void testTimesAssign() throws Exception {
            doTestSwapBinaryExpression("idea/testData/intentions/swapBinaryExpression/timesAssign.kt");
        }
        
        @TestMetadata("timesLiteral.kt")
        public void testTimesLiteral() throws Exception {
            doTestSwapBinaryExpression("idea/testData/intentions/swapBinaryExpression/timesLiteral.kt");
        }
        
        @TestMetadata("xor.kt")
        public void testXor() throws Exception {
            doTestSwapBinaryExpression("idea/testData/intentions/swapBinaryExpression/xor.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/splitIf")
    public static class SplitIf extends AbstractCodeTransformationTest {
        public void testAllFilesPresentInSplitIf() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/splitIf"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("splitIfAndOr.kt")
        public void testSplitIfAndOr() throws Exception {
            doTestSplitIf("idea/testData/intentions/splitIf/splitIfAndOr.kt");
        }
        
        @TestMetadata("splitIfAndOrWithBraces.kt")
        public void testSplitIfAndOrWithBraces() throws Exception {
            doTestSplitIf("idea/testData/intentions/splitIf/splitIfAndOrWithBraces.kt");
        }
        
        @TestMetadata("splitIfAndWithBraces.kt")
        public void testSplitIfAndWithBraces() throws Exception {
            doTestSplitIf("idea/testData/intentions/splitIf/splitIfAndWithBraces.kt");
        }
        
        @TestMetadata("splitIfCaretOnIf.kt")
        public void testSplitIfCaretOnIf() throws Exception {
            doTestSplitIf("idea/testData/intentions/splitIf/splitIfCaretOnIf.kt");
        }
        
        @TestMetadata("splitIfNestedIf.kt")
        public void testSplitIfNestedIf() throws Exception {
            doTestSplitIf("idea/testData/intentions/splitIf/splitIfNestedIf.kt");
        }
        
        @TestMetadata("splitIfNestedIfNotApplicable.kt")
        public void testSplitIfNestedIfNotApplicable() throws Exception {
            doTestSplitIf("idea/testData/intentions/splitIf/splitIfNestedIfNotApplicable.kt");
        }
        
        @TestMetadata("splitIfNestedInside.kt")
        public void testSplitIfNestedInside() throws Exception {
            doTestSplitIf("idea/testData/intentions/splitIf/splitIfNestedInside.kt");
        }
        
        @TestMetadata("splitIfNestedOutside.kt")
        public void testSplitIfNestedOutside() throws Exception {
            doTestSplitIf("idea/testData/intentions/splitIf/splitIfNestedOutside.kt");
        }
        
        @TestMetadata("splitIfNotIf.kt")
        public void testSplitIfNotIf() throws Exception {
            doTestSplitIf("idea/testData/intentions/splitIf/splitIfNotIf.kt");
        }
        
        @TestMetadata("splitIfOnIfWithOr.kt")
        public void testSplitIfOnIfWithOr() throws Exception {
            doTestSplitIf("idea/testData/intentions/splitIf/splitIfOnIfWithOr.kt");
        }
        
        @TestMetadata("splitIfOneAND.kt")
        public void testSplitIfOneAND() throws Exception {
            doTestSplitIf("idea/testData/intentions/splitIf/splitIfOneAND.kt");
        }
        
        @TestMetadata("splitIfOperatorAsFunctionParam.kt")
        public void testSplitIfOperatorAsFunctionParam() throws Exception {
            doTestSplitIf("idea/testData/intentions/splitIf/splitIfOperatorAsFunctionParam.kt");
        }
        
        @TestMetadata("splitIfOperatorOutsideIf.kt")
        public void testSplitIfOperatorOutsideIf() throws Exception {
            doTestSplitIf("idea/testData/intentions/splitIf/splitIfOperatorOutsideIf.kt");
        }
        
        @TestMetadata("splitIfOrAnd.kt")
        public void testSplitIfOrAnd() throws Exception {
            doTestSplitIf("idea/testData/intentions/splitIf/splitIfOrAnd.kt");
        }
        
        @TestMetadata("splitIfOrWithBraces.kt")
        public void testSplitIfOrWithBraces() throws Exception {
            doTestSplitIf("idea/testData/intentions/splitIf/splitIfOrWithBraces.kt");
        }
        
        @TestMetadata("splitIfTwoOperatorsFirst.kt")
        public void testSplitIfTwoOperatorsFirst() throws Exception {
            doTestSplitIf("idea/testData/intentions/splitIf/splitIfTwoOperatorsFirst.kt");
        }
        
        @TestMetadata("splitIfTwoOperatorsSecond.kt")
        public void testSplitIfTwoOperatorsSecond() throws Exception {
            doTestSplitIf("idea/testData/intentions/splitIf/splitIfTwoOperatorsSecond.kt");
        }
        
        @TestMetadata("splitIfWithElse.kt")
        public void testSplitIfWithElse() throws Exception {
            doTestSplitIf("idea/testData/intentions/splitIf/splitIfWithElse.kt");
        }
        
        @TestMetadata("splitIfWithFunction.kt")
        public void testSplitIfWithFunction() throws Exception {
            doTestSplitIf("idea/testData/intentions/splitIf/splitIfWithFunction.kt");
        }
        
        @TestMetadata("splitIfWithNotOperator.kt")
        public void testSplitIfWithNotOperator() throws Exception {
            doTestSplitIf("idea/testData/intentions/splitIf/splitIfWithNotOperator.kt");
        }
        
        @TestMetadata("splitIfWithNotOperatorGood.kt")
        public void testSplitIfWithNotOperatorGood() throws Exception {
            doTestSplitIf("idea/testData/intentions/splitIf/splitIfWithNotOperatorGood.kt");
        }
        
        @TestMetadata("splitIfWithOR.kt")
        public void testSplitIfWithOR() throws Exception {
            doTestSplitIf("idea/testData/intentions/splitIf/splitIfWithOR.kt");
        }
        
        @TestMetadata("splitIfWithORElse.kt")
        public void testSplitIfWithORElse() throws Exception {
            doTestSplitIf("idea/testData/intentions/splitIf/splitIfWithORElse.kt");
        }
        
        @TestMetadata("splitIfWrongCaretLocation.kt")
        public void testSplitIfWrongCaretLocation() throws Exception {
            doTestSplitIf("idea/testData/intentions/splitIf/splitIfWrongCaretLocation.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/replaceWithOperatorAssign")
    public static class ReplaceWithOperatorAssign extends AbstractCodeTransformationTest {
        public void testAllFilesPresentInReplaceWithOperatorAssign() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/replaceWithOperatorAssign"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("illegalMultipleOperators.kt")
        public void testIllegalMultipleOperators() throws Exception {
            doTestReplaceWithOperatorAssign("idea/testData/intentions/replaceWithOperatorAssign/illegalMultipleOperators.kt");
        }
        
        @TestMetadata("illegalMultipleOperatorsMiddle.kt")
        public void testIllegalMultipleOperatorsMiddle() throws Exception {
            doTestReplaceWithOperatorAssign("idea/testData/intentions/replaceWithOperatorAssign/illegalMultipleOperatorsMiddle.kt");
        }
        
        @TestMetadata("invalidSubtraction.kt")
        public void testInvalidSubtraction() throws Exception {
            doTestReplaceWithOperatorAssign("idea/testData/intentions/replaceWithOperatorAssign/invalidSubtraction.kt");
        }
        
        @TestMetadata("multipleOperators.kt")
        public void testMultipleOperators() throws Exception {
            doTestReplaceWithOperatorAssign("idea/testData/intentions/replaceWithOperatorAssign/multipleOperators.kt");
        }
        
        @TestMetadata("multipleOperatorsRightSideRepeat.kt")
        public void testMultipleOperatorsRightSideRepeat() throws Exception {
            doTestReplaceWithOperatorAssign("idea/testData/intentions/replaceWithOperatorAssign/multipleOperatorsRightSideRepeat.kt");
        }
        
        @TestMetadata("nonRepeatingAssignment.kt")
        public void testNonRepeatingAssignment() throws Exception {
            doTestReplaceWithOperatorAssign("idea/testData/intentions/replaceWithOperatorAssign/nonRepeatingAssignment.kt");
        }
        
        @TestMetadata("rightSideRepeat.kt")
        public void testRightSideRepeat() throws Exception {
            doTestReplaceWithOperatorAssign("idea/testData/intentions/replaceWithOperatorAssign/rightSideRepeat.kt");
        }
        
        @TestMetadata("simpleAssign.kt")
        public void testSimpleAssign() throws Exception {
            doTestReplaceWithOperatorAssign("idea/testData/intentions/replaceWithOperatorAssign/simpleAssign.kt");
        }
        
        @TestMetadata("validSubtraction.kt")
        public void testValidSubtraction() throws Exception {
            doTestReplaceWithOperatorAssign("idea/testData/intentions/replaceWithOperatorAssign/validSubtraction.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/replaceWithTraditionalAssignment")
    public static class ReplaceWithTraditionalAssignment extends AbstractCodeTransformationTest {
        public void testAllFilesPresentInReplaceWithTraditionalAssignment() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/replaceWithTraditionalAssignment"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("complexRightExpression.kt")
        public void testComplexRightExpression() throws Exception {
            doTestReplaceWithTraditionalAssignment("idea/testData/intentions/replaceWithTraditionalAssignment/complexRightExpression.kt");
        }
        
        @TestMetadata("nonAssignmentExpression.kt")
        public void testNonAssignmentExpression() throws Exception {
            doTestReplaceWithTraditionalAssignment("idea/testData/intentions/replaceWithTraditionalAssignment/nonAssignmentExpression.kt");
        }
        
        @TestMetadata("nonAugmentedAssign.kt")
        public void testNonAugmentedAssign() throws Exception {
            doTestReplaceWithTraditionalAssignment("idea/testData/intentions/replaceWithTraditionalAssignment/nonAugmentedAssign.kt");
        }
        
        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            doTestReplaceWithTraditionalAssignment("idea/testData/intentions/replaceWithTraditionalAssignment/simple.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/simplifyBooleanWithConstants")
    public static class SimplifyBooleanWithConstants extends AbstractCodeTransformationTest {
        public void testAllFilesPresentInSimplifyBooleanWithConstants() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/simplifyBooleanWithConstants"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("inapplicableNoConstants.kt")
        public void testInapplicableNoConstants() throws Exception {
            doTestSimplifyBooleanWithConstants("idea/testData/intentions/simplifyBooleanWithConstants/inapplicableNoConstants.kt");
        }
        
        @TestMetadata("inapplicableNotBinary.kt")
        public void testInapplicableNotBinary() throws Exception {
            doTestSimplifyBooleanWithConstants("idea/testData/intentions/simplifyBooleanWithConstants/inapplicableNotBinary.kt");
        }
        
        @TestMetadata("inapplicableUsesVals.kt")
        public void testInapplicableUsesVals() throws Exception {
            doTestSimplifyBooleanWithConstants("idea/testData/intentions/simplifyBooleanWithConstants/inapplicableUsesVals.kt");
        }
        
        @TestMetadata("inapplicableUsesVals2.kt")
        public void testInapplicableUsesVals2() throws Exception {
            doTestSimplifyBooleanWithConstants("idea/testData/intentions/simplifyBooleanWithConstants/inapplicableUsesVals2.kt");
        }
        
        @TestMetadata("inapplicableUsesVals3.kt")
        public void testInapplicableUsesVals3() throws Exception {
            doTestSimplifyBooleanWithConstants("idea/testData/intentions/simplifyBooleanWithConstants/inapplicableUsesVals3.kt");
        }
        
        @TestMetadata("reduceableBinary.kt")
        public void testReduceableBinary() throws Exception {
            doTestSimplifyBooleanWithConstants("idea/testData/intentions/simplifyBooleanWithConstants/reduceableBinary.kt");
        }
        
        @TestMetadata("reduceableBinary2.kt")
        public void testReduceableBinary2() throws Exception {
            doTestSimplifyBooleanWithConstants("idea/testData/intentions/simplifyBooleanWithConstants/reduceableBinary2.kt");
        }
        
        @TestMetadata("reduceableBinary3.kt")
        public void testReduceableBinary3() throws Exception {
            doTestSimplifyBooleanWithConstants("idea/testData/intentions/simplifyBooleanWithConstants/reduceableBinary3.kt");
        }
        
        @TestMetadata("reduceableBinaryWithParenthese.kt")
        public void testReduceableBinaryWithParenthese() throws Exception {
            doTestSimplifyBooleanWithConstants("idea/testData/intentions/simplifyBooleanWithConstants/reduceableBinaryWithParenthese.kt");
        }
        
        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            doTestSimplifyBooleanWithConstants("idea/testData/intentions/simplifyBooleanWithConstants/simple.kt");
        }
        
        @TestMetadata("simpleWithMoreBinaries.kt")
        public void testSimpleWithMoreBinaries() throws Exception {
            doTestSimplifyBooleanWithConstants("idea/testData/intentions/simplifyBooleanWithConstants/simpleWithMoreBinaries.kt");
        }
        
        @TestMetadata("simpleWithMoreBinaries2.kt")
        public void testSimpleWithMoreBinaries2() throws Exception {
            doTestSimplifyBooleanWithConstants("idea/testData/intentions/simplifyBooleanWithConstants/simpleWithMoreBinaries2.kt");
        }
        
        @TestMetadata("simpleWithMoreBinaries3.kt")
        public void testSimpleWithMoreBinaries3() throws Exception {
            doTestSimplifyBooleanWithConstants("idea/testData/intentions/simplifyBooleanWithConstants/simpleWithMoreBinaries3.kt");
        }
        
        @TestMetadata("simpleWithMoreBinariesAndParentheses.kt")
        public void testSimpleWithMoreBinariesAndParentheses() throws Exception {
            doTestSimplifyBooleanWithConstants("idea/testData/intentions/simplifyBooleanWithConstants/simpleWithMoreBinariesAndParentheses.kt");
        }
        
        @TestMetadata("simpleWithMoreBinariesAndParentheses2.kt")
        public void testSimpleWithMoreBinariesAndParentheses2() throws Exception {
            doTestSimplifyBooleanWithConstants("idea/testData/intentions/simplifyBooleanWithConstants/simpleWithMoreBinariesAndParentheses2.kt");
        }
        
        @TestMetadata("simpleWithMoreBinariesAndParentheses3.kt")
        public void testSimpleWithMoreBinariesAndParentheses3() throws Exception {
            doTestSimplifyBooleanWithConstants("idea/testData/intentions/simplifyBooleanWithConstants/simpleWithMoreBinariesAndParentheses3.kt");
        }
        
        @TestMetadata("simpleWithNonsensical2.kt")
        public void testSimpleWithNonsensical2() throws Exception {
            doTestSimplifyBooleanWithConstants("idea/testData/intentions/simplifyBooleanWithConstants/simpleWithNonsensical2.kt");
        }
        
        @TestMetadata("simpleWithParentheses.kt")
        public void testSimpleWithParentheses() throws Exception {
            doTestSimplifyBooleanWithConstants("idea/testData/intentions/simplifyBooleanWithConstants/simpleWithParentheses.kt");
        }
        
        @TestMetadata("simpleWithParentheses2.kt")
        public void testSimpleWithParentheses2() throws Exception {
            doTestSimplifyBooleanWithConstants("idea/testData/intentions/simplifyBooleanWithConstants/simpleWithParentheses2.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/insertExplicitTypeArguments")
    public static class InsertExplicitTypeArguments extends AbstractCodeTransformationTest {
        public void testAllFilesPresentInInsertExplicitTypeArguments() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/insertExplicitTypeArguments"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("inapplicableAlreadyTyped.kt")
        public void testInapplicableAlreadyTyped() throws Exception {
            doTestInsertExplicitTypeArguments("idea/testData/intentions/insertExplicitTypeArguments/inapplicableAlreadyTyped.kt");
        }
        
        @TestMetadata("inapplicableNotGeneric.kt")
        public void testInapplicableNotGeneric() throws Exception {
            doTestInsertExplicitTypeArguments("idea/testData/intentions/insertExplicitTypeArguments/inapplicableNotGeneric.kt");
        }
        
        @TestMetadata("inapplicableTypeNotInferred.kt")
        public void testInapplicableTypeNotInferred() throws Exception {
            doTestInsertExplicitTypeArguments("idea/testData/intentions/insertExplicitTypeArguments/inapplicableTypeNotInferred.kt");
        }
        
        @TestMetadata("insertManyTypes.kt")
        public void testInsertManyTypes() throws Exception {
            doTestInsertExplicitTypeArguments("idea/testData/intentions/insertExplicitTypeArguments/insertManyTypes.kt");
        }
        
        @TestMetadata("insertManyTypesInDifferentOrder.kt")
        public void testInsertManyTypesInDifferentOrder() throws Exception {
            doTestInsertExplicitTypeArguments("idea/testData/intentions/insertExplicitTypeArguments/insertManyTypesInDifferentOrder.kt");
        }
        
        @TestMetadata("insertMultipleSomeWithClashingName.kt")
        public void testInsertMultipleSomeWithClashingName() throws Exception {
            doTestInsertExplicitTypeArguments("idea/testData/intentions/insertExplicitTypeArguments/insertMultipleSomeWithClashingName.kt");
        }
        
        @TestMetadata("insertTwoTypesFun.kt")
        public void testInsertTwoTypesFun() throws Exception {
            doTestInsertExplicitTypeArguments("idea/testData/intentions/insertExplicitTypeArguments/insertTwoTypesFun.kt");
        }
        
        @TestMetadata("insertTypeAny.kt")
        public void testInsertTypeAny() throws Exception {
            doTestInsertExplicitTypeArguments("idea/testData/intentions/insertExplicitTypeArguments/insertTypeAny.kt");
        }
        
        @TestMetadata("insertTypeThatIsAFunction.kt")
        public void testInsertTypeThatIsAFunction() throws Exception {
            doTestInsertExplicitTypeArguments("idea/testData/intentions/insertExplicitTypeArguments/insertTypeThatIsAFunction.kt");
        }
        
        @TestMetadata("insertTypeThatIsATypeArg.kt")
        public void testInsertTypeThatIsATypeArg() throws Exception {
            doTestInsertExplicitTypeArguments("idea/testData/intentions/insertExplicitTypeArguments/insertTypeThatIsATypeArg.kt");
        }
        
        @TestMetadata("insertTypeWithClashingName.kt")
        public void testInsertTypeWithClashingName() throws Exception {
            doTestInsertExplicitTypeArguments("idea/testData/intentions/insertExplicitTypeArguments/insertTypeWithClashingName.kt");
        }
        
        @TestMetadata("insertTypeWithLambda.kt")
        public void testInsertTypeWithLambda() throws Exception {
            doTestInsertExplicitTypeArguments("idea/testData/intentions/insertExplicitTypeArguments/insertTypeWithLambda.kt");
        }
        
        @TestMetadata("insertTypeWithTypeArguments.kt")
        public void testInsertTypeWithTypeArguments() throws Exception {
            doTestInsertExplicitTypeArguments("idea/testData/intentions/insertExplicitTypeArguments/insertTypeWithTypeArguments.kt");
        }
        
        @TestMetadata("insertTypeWithVarargs.kt")
        public void testInsertTypeWithVarargs() throws Exception {
            doTestInsertExplicitTypeArguments("idea/testData/intentions/insertExplicitTypeArguments/insertTypeWithVarargs.kt");
        }
        
        @TestMetadata("simpleInsertTypeClass.kt")
        public void testSimpleInsertTypeClass() throws Exception {
            doTestInsertExplicitTypeArguments("idea/testData/intentions/insertExplicitTypeArguments/simpleInsertTypeClass.kt");
        }
        
        @TestMetadata("simpleInsertTypeFun.kt")
        public void testSimpleInsertTypeFun() throws Exception {
            doTestInsertExplicitTypeArguments("idea/testData/intentions/insertExplicitTypeArguments/simpleInsertTypeFun.kt");
        }
        
    }
    
    public static Test suite() {
        TestSuite suite = new TestSuite("CodeTransformationTestGenerated");
        suite.addTestSuite(ElvisToIfThen.class);
        suite.addTestSuite(IfThenToElvis.class);
        suite.addTestSuite(SafeAccessToIfThen.class);
        suite.addTest(IfThenToSafeAccess.innerSuite());
        suite.addTestSuite(IfToAssignment.class);
        suite.addTestSuite(IfToReturn.class);
        suite.addTestSuite(IfToReturnAsymmetrically.class);
        suite.addTestSuite(WhenToAssignment.class);
        suite.addTestSuite(WhenToReturn.class);
        suite.addTestSuite(AssignmentToIf.class);
        suite.addTestSuite(AssignmentToWhen.class);
        suite.addTestSuite(PropertyToIf.class);
        suite.addTestSuite(PropertyToWhen.class);
        suite.addTestSuite(ReturnToIf.class);
        suite.addTestSuite(ReturnToWhen.class);
        suite.addTestSuite(IfToWhen.class);
        suite.addTestSuite(WhenToIf.class);
        suite.addTestSuite(Flatten.class);
        suite.addTestSuite(Merge.class);
        suite.addTestSuite(IntroduceSubject.class);
        suite.addTestSuite(EliminateSubject.class);
        suite.addTestSuite(Split.class);
        suite.addTestSuite(Join.class);
        suite.addTestSuite(ConvertMemberToExtension.class);
        suite.addTestSuite(ReconstructedType.class);
        suite.addTestSuite(RemoveUnnecessaryParentheses.class);
        suite.addTestSuite(ReplaceWithDotQualifiedMethodCall.class);
        suite.addTestSuite(ReplaceWithInfixFunctionCall.class);
        suite.addTestSuite(RemoveCurlyBracesFromTemplate.class);
        suite.addTestSuite(MoveLambdaInsideParentheses.class);
        suite.addTestSuite(MoveLambdaOutsideParentheses.class);
        suite.addTestSuite(ReplaceExplicitFunctionLiteralParamWithIt.class);
        suite.addTestSuite(ReplaceItWithExplicitFunctionLiteralParam.class);
        suite.addTestSuite(RemoveBraces.class);
        suite.addTestSuite(AddBraces.class);
        suite.addTest(ReplaceGetIntention.innerSuite());
        suite.addTestSuite(ReplaceContainsIntention.class);
        suite.addTestSuite(ReplaceBinaryInfixIntention.class);
        suite.addTestSuite(ReplaceUnaryPrefixIntention.class);
        suite.addTestSuite(ReplaceInvokeIntention.class);
        suite.addTestSuite(SimplifyNegatedBinaryExpressionIntention.class);
        suite.addTestSuite(ConvertNegatedBooleanSequence.class);
        suite.addTestSuite(ConvertNegatedExpressionWithDemorgansLaw.class);
        suite.addTestSuite(SwapBinaryExpression.class);
        suite.addTestSuite(SplitIf.class);
        suite.addTestSuite(ReplaceWithOperatorAssign.class);
        suite.addTestSuite(ReplaceWithTraditionalAssignment.class);
        suite.addTestSuite(SimplifyBooleanWithConstants.class);
        suite.addTestSuite(InsertExplicitTypeArguments.class);
        return suite;
    }
}
