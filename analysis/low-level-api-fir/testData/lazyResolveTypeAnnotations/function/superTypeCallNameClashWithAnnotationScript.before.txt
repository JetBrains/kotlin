@R|second/Anno|(LAZY_EXPRESSION)  second/Base
  context -> FirConstructorSymbol second/MyClass.MyClass
  anchor -> [FirRegularClassSymbol second/MyClass]

@R|second/Anno|(LAZY_EXPRESSION)  second/Base
  context -> FirConstructorSymbol second/MyClass.MyClass
  anchor -> [FirRegularClassSymbol second/MyClass]

FILE: [ResolvedTo(IMPORTS)] superTypeCallNameClashWithAnnotationScript.kts
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-superTypeCallNameClashWithAnnotationScript.kts>
        [ResolvedTo(RAW_FIR)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        @R|kotlin/annotation/Target|[CompilerRequiredAnnotations](Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.TYPE|) public final? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] [ContainingScriptKey=FirScriptSymbol second.<script-superTypeCallNameClashWithAnnotationScript.kts>] annotation class Anno : R|kotlin/Annotation| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=second/Anno.i] i: Int): R|second/Anno| {
                LAZY_super<R|kotlin/Any|>
            }

            public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val i: Int = R|<local>/i|
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): Int

        }

        public open [ResolvedTo(SUPER_TYPES)] [ContainingScriptKey=FirScriptSymbol second.<script-superTypeCallNameClashWithAnnotationScript.kts>] class Base : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Base] constructor(): R|second/Base| {
                LAZY_super<R|kotlin/Any|>
            }

        }

        public? final? const [ResolvedTo(RAW_FIR)] val outer: <implicit> = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] get(): <implicit>

        public? final? const [ResolvedTo(RAW_FIR)] val inner: <implicit> = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] get(): <implicit>

        public final? [ResolvedTo(TYPES)] [ContainingScriptKey=FirScriptSymbol second.<script-superTypeCallNameClashWithAnnotationScript.kts>] class MyClass : R|@R|second/Anno|(LAZY_EXPRESSION)  second/Base| {
            public? [ResolvedTo(TYPES)] [ContainingClassKey=MyClass] constructor(): R|second/MyClass| {
                LAZY_super<R|@R|second/Anno|(LAZY_EXPRESSION)  second/Base|>
            }

            public open [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol second.<script-superTypeCallNameClashWithAnnotationScript.kts>] class Base : R|kotlin/Any| {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Base] constructor(): R|second/MyClass.Base| {
                    LAZY_super<R|kotlin/Any|>
                }

            }

            public final? companion [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol second.<script-superTypeCallNameClashWithAnnotationScript.kts>] object Companion : R|kotlin/Any| {
                private [ResolvedTo(RAW_FIR)] [ContainingClassKey=Companion] constructor(): R|second/MyClass.Companion| {
                    LAZY_super<R|kotlin/Any|>
                }

                public? final? const [ResolvedTo(RAW_FIR)] val outer: <implicit> = LAZY_EXPRESSION
                    public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Companion] get(): <implicit>

                public? final? const [ResolvedTo(RAW_FIR)] val inner: <implicit> = LAZY_EXPRESSION
                    public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Companion] get(): <implicit>

            }

        }

