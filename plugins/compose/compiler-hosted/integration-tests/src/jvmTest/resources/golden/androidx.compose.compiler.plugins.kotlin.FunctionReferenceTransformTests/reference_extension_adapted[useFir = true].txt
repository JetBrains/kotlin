//
// Source
// ------------------------------------------

import androidx.compose.runtime.*

@Composable
fun Ref(cls: Cls, content: @Composable () -> Unit) {
    Ref(cls, cls::Fn)
}

//
// Transformed IR
// ------------------------------------------

@Composable
@FunctionKeyMeta(key = 1397724954, startOffset = 84, endOffset = 184)
fun Ref(cls: Cls, content: Function2<Composer, Int, Unit>, %composer: Composer?, %changed: Int) {
  %composer = %composer.startRestartGroup(<>)
  sourceInformation(%composer, "C(Ref)N(cls,content)<cls::F...>,<cls::F...>,<Ref(cl...>:Test.kt")
  val %dirty = %changed
  if (%changed and 0b0110 == 0) {
    %dirty = %dirty or if (%composer.changed(cls)) 0b0100 else 0b0010
  }
  if (%composer.shouldExecute(%dirty and 0b0011 != 0b0010, %dirty and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(<>, %dirty, -1, <>)
    }
    Ref(cls, <block>{
      val tmp0 = cls
      sourceInformationMarkerStart(%composer, <>, "CC(remember):Test.kt#9igjgp")
      val tmp0_group = %composer.cache(%dirty and 0b1110 == 0b0100) {
        @Composable
        @FunctionKeyMeta(key = -1775639072, startOffset = 162, endOffset = 169)
        fun Cls.Fn(%composer: Composer?, %changed: Int) {
          receiver.Fn(0, %composer, 0b1110 and %changed, 0b0001)
        }
        tmp0::Fn
      }
      sourceInformationMarkerEnd(%composer)
      tmp0_group
    }, %composer, 0b1110 and %dirty)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    %composer.skipToGroupEnd()
  }
  %composer.endRestartGroup()?.updateScope { %composer: Composer?, %force: Int ->
    Ref(cls, content, %composer, updateChangedFlags(%changed or 0b0001))
  }
}
