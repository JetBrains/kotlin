val test1: Int /* by */
  field = lazy<Int>(initializer = local fun <anonymous>(): Int {
    return 42
  }
)
  get(): Int {
    return getValue<Int>(/* <this> = #test1$delegate, */ thisRef = null, property = ::test1)
  }

var test4: Any /* by */
  field = hashMapOf<String, Any>()
  get(): Any {
    return getValue<Any, Any>(/* <this> = #test4$delegate, */ thisRef = null, property = ::test4)
  }
  set(<set-?>: Any) {
    return setValue<Any>(/* <this> = #test4$delegate, */ thisRef = null, property = ::test4, value = <set-?>)
  }

class C {
  val map: MutableMap<String, Any>
    field = map
    get

  val test2: Int /* by */
    field = lazy<Int>(initializer = local fun <anonymous>(): Int {
      return 42
    }
)
    get(): Int {
      return getValue<Int>(/* <this> = <this>.#test2$delegate, */ thisRef = <this>, property = C::test2)
    }

  var test3: Any /* by */
    field = <this>.<get-map>()
    get(): Any {
      return getValue<Any, Any>(/* <this> = <this>.#test3$delegate, */ thisRef = <this>, property = C::test3)
    }
    set(<set-?>: Any) {
      return setValue<Any>(/* <this> = <this>.#test3$delegate, */ thisRef = <this>, property = C::test3, value = <set-?>)
    }

  constructor(map: MutableMap<String, Any>) /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

}

