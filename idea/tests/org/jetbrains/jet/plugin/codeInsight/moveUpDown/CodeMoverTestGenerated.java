/*
 * Copyright 2010-2013 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.jet.plugin.codeInsight.moveUpDown;

import junit.framework.Assert;
import junit.framework.Test;
import junit.framework.TestSuite;

import java.io.File;
import java.util.regex.Pattern;
import org.jetbrains.jet.JetTestUtils;
import org.jetbrains.jet.test.InnerTestClasses;
import org.jetbrains.jet.test.TestMetadata;

import org.jetbrains.jet.plugin.codeInsight.moveUpDown.AbstractCodeMoverTest;

/** This class is generated by {@link org.jetbrains.jet.generators.tests.GenerateTests}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@InnerTestClasses({CodeMoverTestGenerated.ClassBodyDeclarations.class, CodeMoverTestGenerated.ClosingBraces.class, CodeMoverTestGenerated.Expressions.class})
public class CodeMoverTestGenerated extends AbstractCodeMoverTest {
    @TestMetadata("idea/testData/codeInsight/moveUpDown/classBodyDeclarations")
    @InnerTestClasses({ClassBodyDeclarations.Accessors.class, ClassBodyDeclarations.Class.class, ClassBodyDeclarations.ClassInitializer.class, ClassBodyDeclarations.Enums.class, ClassBodyDeclarations.Function.class, ClassBodyDeclarations.FunctionAnchors.class, ClassBodyDeclarations.Property.class, ClassBodyDeclarations.PropertyAnchors.class})
    public static class ClassBodyDeclarations extends AbstractCodeMoverTest {
        public void testAllFilesPresentInClassBodyDeclarations() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/codeInsight/moveUpDown/classBodyDeclarations"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/accessors")
        public static class Accessors extends AbstractCodeMoverTest {
            @TestMetadata("accessor1.kt")
            public void testAccessor1() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/accessors/accessor1.kt");
            }
            
            @TestMetadata("accessor2.kt")
            public void testAccessor2() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/accessors/accessor2.kt");
            }
            
            @TestMetadata("accessor3.kt")
            public void testAccessor3() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/accessors/accessor3.kt");
            }
            
            @TestMetadata("accessor4.kt")
            public void testAccessor4() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/accessors/accessor4.kt");
            }
            
            public void testAllFilesPresentInAccessors() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/accessors"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
        }
        
        @TestMetadata("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/class")
        public static class Class extends AbstractCodeMoverTest {
            public void testAllFilesPresentInClass() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/class"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("classAtBrace1.kt")
            public void testClassAtBrace1() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/class/classAtBrace1.kt");
            }
            
            @TestMetadata("classAtBrace2.kt")
            public void testClassAtBrace2() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/class/classAtBrace2.kt");
            }
            
            @TestMetadata("classAtBrace3.kt")
            public void testClassAtBrace3() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/class/classAtBrace3.kt");
            }
            
            @TestMetadata("classAtBrace4.kt")
            public void testClassAtBrace4() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/class/classAtBrace4.kt");
            }
            
            @TestMetadata("classAtBrace5.kt")
            public void testClassAtBrace5() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/class/classAtBrace5.kt");
            }
            
            @TestMetadata("classAtBrace6.kt")
            public void testClassAtBrace6() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/class/classAtBrace6.kt");
            }
            
            @TestMetadata("classAtClass1.kt")
            public void testClassAtClass1() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/class/classAtClass1.kt");
            }
            
            @TestMetadata("classAtClass2.kt")
            public void testClassAtClass2() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/class/classAtClass2.kt");
            }
            
            @TestMetadata("classAtClassInitializer1.kt")
            public void testClassAtClassInitializer1() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/class/classAtClassInitializer1.kt");
            }
            
            @TestMetadata("classAtClassInitializer2.kt")
            public void testClassAtClassInitializer2() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/class/classAtClassInitializer2.kt");
            }
            
            @TestMetadata("classAtEmptyLine1.kt")
            public void testClassAtEmptyLine1() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/class/classAtEmptyLine1.kt");
            }
            
            @TestMetadata("classAtEmptyLine2.kt")
            public void testClassAtEmptyLine2() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/class/classAtEmptyLine2.kt");
            }
            
            @TestMetadata("classAtFunction1.kt")
            public void testClassAtFunction1() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/class/classAtFunction1.kt");
            }
            
            @TestMetadata("classAtFunction2.kt")
            public void testClassAtFunction2() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/class/classAtFunction2.kt");
            }
            
            @TestMetadata("classAtProperty1.kt")
            public void testClassAtProperty1() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/class/classAtProperty1.kt");
            }
            
            @TestMetadata("classAtProperty2.kt")
            public void testClassAtProperty2() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/class/classAtProperty2.kt");
            }
            
            @TestMetadata("classWithoutBody1.kt")
            public void testClassWithoutBody1() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/class/classWithoutBody1.kt");
            }
            
            @TestMetadata("classWithoutBody2.kt")
            public void testClassWithoutBody2() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/class/classWithoutBody2.kt");
            }
            
            @TestMetadata("classWithoutBody3.kt")
            public void testClassWithoutBody3() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/class/classWithoutBody3.kt");
            }
            
            @TestMetadata("classWithoutBody4.kt")
            public void testClassWithoutBody4() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/class/classWithoutBody4.kt");
            }
            
        }
        
        @TestMetadata("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/classInitializer")
        public static class ClassInitializer extends AbstractCodeMoverTest {
            public void testAllFilesPresentInClassInitializer() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/classInitializer"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("classInitializerAtBrace1.kt")
            public void testClassInitializerAtBrace1() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/classInitializer/classInitializerAtBrace1.kt");
            }
            
            @TestMetadata("classInitializerAtBrace2.kt")
            public void testClassInitializerAtBrace2() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/classInitializer/classInitializerAtBrace2.kt");
            }
            
            @TestMetadata("classInitializerAtClass1.kt")
            public void testClassInitializerAtClass1() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/classInitializer/classInitializerAtClass1.kt");
            }
            
            @TestMetadata("classInitializerAtClass2.kt")
            public void testClassInitializerAtClass2() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/classInitializer/classInitializerAtClass2.kt");
            }
            
            @TestMetadata("classInitializerAtClassInitializer1.kt")
            public void testClassInitializerAtClassInitializer1() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/classInitializer/classInitializerAtClassInitializer1.kt");
            }
            
            @TestMetadata("classInitializerAtClassInitializer2.kt")
            public void testClassInitializerAtClassInitializer2() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/classInitializer/classInitializerAtClassInitializer2.kt");
            }
            
            @TestMetadata("classInitializerAtEmptyLine1.kt")
            public void testClassInitializerAtEmptyLine1() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/classInitializer/classInitializerAtEmptyLine1.kt");
            }
            
            @TestMetadata("classInitializerAtEmptyLine2.kt")
            public void testClassInitializerAtEmptyLine2() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/classInitializer/classInitializerAtEmptyLine2.kt");
            }
            
            @TestMetadata("classInitializerAtFunction1.kt")
            public void testClassInitializerAtFunction1() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/classInitializer/classInitializerAtFunction1.kt");
            }
            
            @TestMetadata("classInitializerAtFunction2.kt")
            public void testClassInitializerAtFunction2() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/classInitializer/classInitializerAtFunction2.kt");
            }
            
            @TestMetadata("classInitializerAtProperty1.kt")
            public void testClassInitializerAtProperty1() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/classInitializer/classInitializerAtProperty1.kt");
            }
            
            @TestMetadata("classInitializerAtProperty2.kt")
            public void testClassInitializerAtProperty2() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/classInitializer/classInitializerAtProperty2.kt");
            }
            
        }
        
        @TestMetadata("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/enums")
        public static class Enums extends AbstractCodeMoverTest {
            public void testAllFilesPresentInEnums() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/enums"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("enum1.kt")
            public void testEnum1() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/enums/enum1.kt");
            }
            
            @TestMetadata("enum2.kt")
            public void testEnum2() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/enums/enum2.kt");
            }
            
            @TestMetadata("enum3.kt")
            public void testEnum3() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/enums/enum3.kt");
            }
            
            @TestMetadata("enum4.kt")
            public void testEnum4() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/enums/enum4.kt");
            }
            
            @TestMetadata("enum5.kt")
            public void testEnum5() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/enums/enum5.kt");
            }
            
            @TestMetadata("enum6.kt")
            public void testEnum6() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/enums/enum6.kt");
            }
            
        }
        
        @TestMetadata("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/function")
        public static class Function extends AbstractCodeMoverTest {
            public void testAllFilesPresentInFunction() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/function"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("functionAtBrace1.kt")
            public void testFunctionAtBrace1() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/function/functionAtBrace1.kt");
            }
            
            @TestMetadata("functionAtBrace2.kt")
            public void testFunctionAtBrace2() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/function/functionAtBrace2.kt");
            }
            
            @TestMetadata("functionAtBrace3.kt")
            public void testFunctionAtBrace3() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/function/functionAtBrace3.kt");
            }
            
            @TestMetadata("functionAtBrace4.kt")
            public void testFunctionAtBrace4() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/function/functionAtBrace4.kt");
            }
            
            @TestMetadata("functionAtBrace5.kt")
            public void testFunctionAtBrace5() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/function/functionAtBrace5.kt");
            }
            
            @TestMetadata("functionAtBrace6.kt")
            public void testFunctionAtBrace6() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/function/functionAtBrace6.kt");
            }
            
            @TestMetadata("functionAtClass1.kt")
            public void testFunctionAtClass1() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/function/functionAtClass1.kt");
            }
            
            @TestMetadata("functionAtClass2.kt")
            public void testFunctionAtClass2() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/function/functionAtClass2.kt");
            }
            
            @TestMetadata("functionAtClassInitializer1.kt")
            public void testFunctionAtClassInitializer1() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/function/functionAtClassInitializer1.kt");
            }
            
            @TestMetadata("functionAtClassInitializer2.kt")
            public void testFunctionAtClassInitializer2() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/function/functionAtClassInitializer2.kt");
            }
            
            @TestMetadata("functionAtEmptyLine1.kt")
            public void testFunctionAtEmptyLine1() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/function/functionAtEmptyLine1.kt");
            }
            
            @TestMetadata("functionAtEmptyLine2.kt")
            public void testFunctionAtEmptyLine2() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/function/functionAtEmptyLine2.kt");
            }
            
            @TestMetadata("functionAtFunction1.kt")
            public void testFunctionAtFunction1() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/function/functionAtFunction1.kt");
            }
            
            @TestMetadata("functionAtFunction2.kt")
            public void testFunctionAtFunction2() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/function/functionAtFunction2.kt");
            }
            
            @TestMetadata("functionAtProperty1.kt")
            public void testFunctionAtProperty1() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/function/functionAtProperty1.kt");
            }
            
            @TestMetadata("functionAtProperty2.kt")
            public void testFunctionAtProperty2() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/function/functionAtProperty2.kt");
            }
            
        }
        
        @TestMetadata("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/functionAnchors")
        public static class FunctionAnchors extends AbstractCodeMoverTest {
            public void testAllFilesPresentInFunctionAnchors() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/functionAnchors"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("keyword.kt")
            public void testKeyword() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/functionAnchors/keyword.kt");
            }
            
            @TestMetadata("name.kt")
            public void testName() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/functionAnchors/name.kt");
            }
            
            @TestMetadata("returnType.kt")
            public void testReturnType() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/functionAnchors/returnType.kt");
            }
            
            @TestMetadata("typeParams1.kt")
            public void testTypeParams1() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/functionAnchors/typeParams1.kt");
            }
            
            @TestMetadata("typeParams2.kt")
            public void testTypeParams2() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/functionAnchors/typeParams2.kt");
            }
            
            @TestMetadata("typeParams3.kt")
            public void testTypeParams3() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/functionAnchors/typeParams3.kt");
            }
            
            @TestMetadata("valueArgs1.kt")
            public void testValueArgs1() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/functionAnchors/valueArgs1.kt");
            }
            
            @TestMetadata("valueArgs2.kt")
            public void testValueArgs2() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/functionAnchors/valueArgs2.kt");
            }
            
            @TestMetadata("valueArgs3.kt")
            public void testValueArgs3() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/functionAnchors/valueArgs3.kt");
            }
            
            @TestMetadata("valueArgs4.kt")
            public void testValueArgs4() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/functionAnchors/valueArgs4.kt");
            }
            
            @TestMetadata("valueArgs5.kt")
            public void testValueArgs5() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/functionAnchors/valueArgs5.kt");
            }
            
            @TestMetadata("valueArgs6.kt")
            public void testValueArgs6() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/functionAnchors/valueArgs6.kt");
            }
            
            @TestMetadata("valueParams1.kt")
            public void testValueParams1() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/functionAnchors/valueParams1.kt");
            }
            
            @TestMetadata("valueParams2.kt")
            public void testValueParams2() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/functionAnchors/valueParams2.kt");
            }
            
            @TestMetadata("valueParams3.kt")
            public void testValueParams3() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/functionAnchors/valueParams3.kt");
            }
            
            @TestMetadata("valueParams4.kt")
            public void testValueParams4() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/functionAnchors/valueParams4.kt");
            }
            
            @TestMetadata("valueParams5.kt")
            public void testValueParams5() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/functionAnchors/valueParams5.kt");
            }
            
            @TestMetadata("valueParams6.kt")
            public void testValueParams6() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/functionAnchors/valueParams6.kt");
            }
            
        }
        
        @TestMetadata("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/property")
        public static class Property extends AbstractCodeMoverTest {
            public void testAllFilesPresentInProperty() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/property"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("propertyAtBrace1.kt")
            public void testPropertyAtBrace1() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/property/propertyAtBrace1.kt");
            }
            
            @TestMetadata("propertyAtBrace2.kt")
            public void testPropertyAtBrace2() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/property/propertyAtBrace2.kt");
            }
            
            @TestMetadata("propertyAtBrace3.kt")
            public void testPropertyAtBrace3() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/property/propertyAtBrace3.kt");
            }
            
            @TestMetadata("propertyAtBrace4.kt")
            public void testPropertyAtBrace4() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/property/propertyAtBrace4.kt");
            }
            
            @TestMetadata("propertyAtBrace5.kt")
            public void testPropertyAtBrace5() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/property/propertyAtBrace5.kt");
            }
            
            @TestMetadata("propertyAtBrace6.kt")
            public void testPropertyAtBrace6() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/property/propertyAtBrace6.kt");
            }
            
            @TestMetadata("propertyAtClass1.kt")
            public void testPropertyAtClass1() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/property/propertyAtClass1.kt");
            }
            
            @TestMetadata("propertyAtClass2.kt")
            public void testPropertyAtClass2() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/property/propertyAtClass2.kt");
            }
            
            @TestMetadata("propertyAtClassInitializer1.kt")
            public void testPropertyAtClassInitializer1() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/property/propertyAtClassInitializer1.kt");
            }
            
            @TestMetadata("propertyAtClassInitializer2.kt")
            public void testPropertyAtClassInitializer2() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/property/propertyAtClassInitializer2.kt");
            }
            
            @TestMetadata("propertyAtEmptyLine1.kt")
            public void testPropertyAtEmptyLine1() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/property/propertyAtEmptyLine1.kt");
            }
            
            @TestMetadata("propertyAtEmptyLine2.kt")
            public void testPropertyAtEmptyLine2() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/property/propertyAtEmptyLine2.kt");
            }
            
            @TestMetadata("propertyAtFunction1.kt")
            public void testPropertyAtFunction1() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/property/propertyAtFunction1.kt");
            }
            
            @TestMetadata("propertyAtFunction2.kt")
            public void testPropertyAtFunction2() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/property/propertyAtFunction2.kt");
            }
            
            @TestMetadata("propertyAtProperty1.kt")
            public void testPropertyAtProperty1() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/property/propertyAtProperty1.kt");
            }
            
            @TestMetadata("propertyAtProperty2.kt")
            public void testPropertyAtProperty2() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/property/propertyAtProperty2.kt");
            }
            
        }
        
        @TestMetadata("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/propertyAnchors")
        public static class PropertyAnchors extends AbstractCodeMoverTest {
            public void testAllFilesPresentInPropertyAnchors() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/propertyAnchors"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("keyword.kt")
            public void testKeyword() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/propertyAnchors/keyword.kt");
            }
            
            @TestMetadata("name.kt")
            public void testName() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/propertyAnchors/name.kt");
            }
            
            @TestMetadata("returnType.kt")
            public void testReturnType() throws Exception {
                doTestClassBodyDeclaration("idea/testData/codeInsight/moveUpDown/classBodyDeclarations/propertyAnchors/returnType.kt");
            }
            
        }
        
        public static Test innerSuite() {
            TestSuite suite = new TestSuite("ClassBodyDeclarations");
            suite.addTestSuite(ClassBodyDeclarations.class);
            suite.addTestSuite(Accessors.class);
            suite.addTestSuite(Class.class);
            suite.addTestSuite(ClassInitializer.class);
            suite.addTestSuite(Enums.class);
            suite.addTestSuite(Function.class);
            suite.addTestSuite(FunctionAnchors.class);
            suite.addTestSuite(Property.class);
            suite.addTestSuite(PropertyAnchors.class);
            return suite;
        }
    }
    
    @TestMetadata("idea/testData/codeInsight/moveUpDown/closingBraces")
    @InnerTestClasses({ClosingBraces.For.class, ClosingBraces.Function.class, ClosingBraces.If.class, ClosingBraces.Nested.class, ClosingBraces.When.class, ClosingBraces.While.class})
    public static class ClosingBraces extends AbstractCodeMoverTest {
        public void testAllFilesPresentInClosingBraces() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/codeInsight/moveUpDown/closingBraces"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("idea/testData/codeInsight/moveUpDown/closingBraces/for")
        public static class For extends AbstractCodeMoverTest {
            public void testAllFilesPresentInFor() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/codeInsight/moveUpDown/closingBraces/for"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("for1.kt")
            public void testFor1() throws Exception {
                doTestExpression("idea/testData/codeInsight/moveUpDown/closingBraces/for/for1.kt");
            }
            
            @TestMetadata("for2.kt")
            public void testFor2() throws Exception {
                doTestExpression("idea/testData/codeInsight/moveUpDown/closingBraces/for/for2.kt");
            }
            
        }
        
        @TestMetadata("idea/testData/codeInsight/moveUpDown/closingBraces/function")
        public static class Function extends AbstractCodeMoverTest {
            public void testAllFilesPresentInFunction() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/codeInsight/moveUpDown/closingBraces/function"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("function1.kt")
            public void testFunction1() throws Exception {
                doTestExpression("idea/testData/codeInsight/moveUpDown/closingBraces/function/function1.kt");
            }
            
            @TestMetadata("function2.kt")
            public void testFunction2() throws Exception {
                doTestExpression("idea/testData/codeInsight/moveUpDown/closingBraces/function/function2.kt");
            }
            
            @TestMetadata("function3.kt")
            public void testFunction3() throws Exception {
                doTestExpression("idea/testData/codeInsight/moveUpDown/closingBraces/function/function3.kt");
            }
            
            @TestMetadata("function4.kt")
            public void testFunction4() throws Exception {
                doTestExpression("idea/testData/codeInsight/moveUpDown/closingBraces/function/function4.kt");
            }
            
        }
        
        @TestMetadata("idea/testData/codeInsight/moveUpDown/closingBraces/if")
        public static class If extends AbstractCodeMoverTest {
            public void testAllFilesPresentInIf() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/codeInsight/moveUpDown/closingBraces/if"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("if1.kt")
            public void testIf1() throws Exception {
                doTestExpression("idea/testData/codeInsight/moveUpDown/closingBraces/if/if1.kt");
            }
            
            @TestMetadata("if2.kt")
            public void testIf2() throws Exception {
                doTestExpression("idea/testData/codeInsight/moveUpDown/closingBraces/if/if2.kt");
            }
            
            @TestMetadata("if3.kt")
            public void testIf3() throws Exception {
                doTestExpression("idea/testData/codeInsight/moveUpDown/closingBraces/if/if3.kt");
            }
            
            @TestMetadata("if4.kt")
            public void testIf4() throws Exception {
                doTestExpression("idea/testData/codeInsight/moveUpDown/closingBraces/if/if4.kt");
            }
            
        }
        
        @TestMetadata("idea/testData/codeInsight/moveUpDown/closingBraces/nested")
        public static class Nested extends AbstractCodeMoverTest {
            public void testAllFilesPresentInNested() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/codeInsight/moveUpDown/closingBraces/nested"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("nested1.kt")
            public void testNested1() throws Exception {
                doTestExpression("idea/testData/codeInsight/moveUpDown/closingBraces/nested/nested1.kt");
            }
            
            @TestMetadata("nested2.kt")
            public void testNested2() throws Exception {
                doTestExpression("idea/testData/codeInsight/moveUpDown/closingBraces/nested/nested2.kt");
            }
            
        }
        
        @TestMetadata("idea/testData/codeInsight/moveUpDown/closingBraces/when")
        public static class When extends AbstractCodeMoverTest {
            public void testAllFilesPresentInWhen() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/codeInsight/moveUpDown/closingBraces/when"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("when1.kt")
            public void testWhen1() throws Exception {
                doTestExpression("idea/testData/codeInsight/moveUpDown/closingBraces/when/when1.kt");
            }
            
            @TestMetadata("when2.kt")
            public void testWhen2() throws Exception {
                doTestExpression("idea/testData/codeInsight/moveUpDown/closingBraces/when/when2.kt");
            }
            
            @TestMetadata("whenEntry1.kt")
            public void testWhenEntry1() throws Exception {
                doTestExpression("idea/testData/codeInsight/moveUpDown/closingBraces/when/whenEntry1.kt");
            }
            
            @TestMetadata("whenEntry2.kt")
            public void testWhenEntry2() throws Exception {
                doTestExpression("idea/testData/codeInsight/moveUpDown/closingBraces/when/whenEntry2.kt");
            }
            
            @TestMetadata("whenEntry3.kt")
            public void testWhenEntry3() throws Exception {
                doTestExpression("idea/testData/codeInsight/moveUpDown/closingBraces/when/whenEntry3.kt");
            }
            
            @TestMetadata("whenEntry4.kt")
            public void testWhenEntry4() throws Exception {
                doTestExpression("idea/testData/codeInsight/moveUpDown/closingBraces/when/whenEntry4.kt");
            }
            
        }
        
        @TestMetadata("idea/testData/codeInsight/moveUpDown/closingBraces/while")
        public static class While extends AbstractCodeMoverTest {
            public void testAllFilesPresentInWhile() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/codeInsight/moveUpDown/closingBraces/while"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("while1.kt")
            public void testWhile1() throws Exception {
                doTestExpression("idea/testData/codeInsight/moveUpDown/closingBraces/while/while1.kt");
            }
            
            @TestMetadata("while2.kt")
            public void testWhile2() throws Exception {
                doTestExpression("idea/testData/codeInsight/moveUpDown/closingBraces/while/while2.kt");
            }
            
            @TestMetadata("while3.kt")
            public void testWhile3() throws Exception {
                doTestExpression("idea/testData/codeInsight/moveUpDown/closingBraces/while/while3.kt");
            }
            
            @TestMetadata("while4.kt")
            public void testWhile4() throws Exception {
                doTestExpression("idea/testData/codeInsight/moveUpDown/closingBraces/while/while4.kt");
            }
            
        }
        
        public static Test innerSuite() {
            TestSuite suite = new TestSuite("ClosingBraces");
            suite.addTestSuite(ClosingBraces.class);
            suite.addTestSuite(For.class);
            suite.addTestSuite(Function.class);
            suite.addTestSuite(If.class);
            suite.addTestSuite(Nested.class);
            suite.addTestSuite(When.class);
            suite.addTestSuite(While.class);
            return suite;
        }
    }
    
    @TestMetadata("idea/testData/codeInsight/moveUpDown/expressions")
    public static class Expressions extends AbstractCodeMoverTest {
        public void testAllFilesPresentInExpressions() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/codeInsight/moveUpDown/expressions"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("declaration1.kt")
        public void testDeclaration1() throws Exception {
            doTestExpression("idea/testData/codeInsight/moveUpDown/expressions/declaration1.kt");
        }
        
        @TestMetadata("declaration2.kt")
        public void testDeclaration2() throws Exception {
            doTestExpression("idea/testData/codeInsight/moveUpDown/expressions/declaration2.kt");
        }
        
        @TestMetadata("If1.kt")
        public void testIf1() throws Exception {
            doTestExpression("idea/testData/codeInsight/moveUpDown/expressions/If1.kt");
        }
        
        @TestMetadata("if2.kt")
        public void testIf2() throws Exception {
            doTestExpression("idea/testData/codeInsight/moveUpDown/expressions/if2.kt");
        }
        
        @TestMetadata("if3.kt")
        public void testIf3() throws Exception {
            doTestExpression("idea/testData/codeInsight/moveUpDown/expressions/if3.kt");
        }
        
        @TestMetadata("if4.kt")
        public void testIf4() throws Exception {
            doTestExpression("idea/testData/codeInsight/moveUpDown/expressions/if4.kt");
        }
        
        @TestMetadata("lambda1.kt")
        public void testLambda1() throws Exception {
            doTestExpression("idea/testData/codeInsight/moveUpDown/expressions/lambda1.kt");
        }
        
        @TestMetadata("lambda2.kt")
        public void testLambda2() throws Exception {
            doTestExpression("idea/testData/codeInsight/moveUpDown/expressions/lambda2.kt");
        }
        
        @TestMetadata("lambda3.kt")
        public void testLambda3() throws Exception {
            doTestExpression("idea/testData/codeInsight/moveUpDown/expressions/lambda3.kt");
        }
        
        @TestMetadata("when1.kt")
        public void testWhen1() throws Exception {
            doTestExpression("idea/testData/codeInsight/moveUpDown/expressions/when1.kt");
        }
        
        @TestMetadata("when2.kt")
        public void testWhen2() throws Exception {
            doTestExpression("idea/testData/codeInsight/moveUpDown/expressions/when2.kt");
        }
        
        @TestMetadata("whenEntry1.kt")
        public void testWhenEntry1() throws Exception {
            doTestExpression("idea/testData/codeInsight/moveUpDown/expressions/whenEntry1.kt");
        }
        
        @TestMetadata("whenEntry2.kt")
        public void testWhenEntry2() throws Exception {
            doTestExpression("idea/testData/codeInsight/moveUpDown/expressions/whenEntry2.kt");
        }
        
        @TestMetadata("whenEntry3.kt")
        public void testWhenEntry3() throws Exception {
            doTestExpression("idea/testData/codeInsight/moveUpDown/expressions/whenEntry3.kt");
        }
        
        @TestMetadata("whenEntry4.kt")
        public void testWhenEntry4() throws Exception {
            doTestExpression("idea/testData/codeInsight/moveUpDown/expressions/whenEntry4.kt");
        }
        
        @TestMetadata("whenEntry5.kt")
        public void testWhenEntry5() throws Exception {
            doTestExpression("idea/testData/codeInsight/moveUpDown/expressions/whenEntry5.kt");
        }
        
        @TestMetadata("whenEntry6.kt")
        public void testWhenEntry6() throws Exception {
            doTestExpression("idea/testData/codeInsight/moveUpDown/expressions/whenEntry6.kt");
        }
        
        @TestMetadata("while1.kt")
        public void testWhile1() throws Exception {
            doTestExpression("idea/testData/codeInsight/moveUpDown/expressions/while1.kt");
        }
        
        @TestMetadata("while2.kt")
        public void testWhile2() throws Exception {
            doTestExpression("idea/testData/codeInsight/moveUpDown/expressions/while2.kt");
        }
        
    }
    
    public static Test suite() {
        TestSuite suite = new TestSuite("CodeMoverTestGenerated");
        suite.addTest(ClassBodyDeclarations.innerSuite());
        suite.addTest(ClosingBraces.innerSuite());
        suite.addTestSuite(Expressions.class);
        return suite;
    }
}
