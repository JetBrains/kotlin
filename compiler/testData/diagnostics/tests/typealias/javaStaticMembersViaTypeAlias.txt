package

public val seeAlsoDerivedFoo: kotlin.String
public val seeAlsoFoo: kotlin.String
public val testDerivedFoo: kotlin.String
public val testFoo: kotlin.String
public val testInner1: [Error type: Unresolved type for JT.Inner]
public val testInner2: [Error type: Unresolved type for KT.Inner]
public val testNested1: [Error type: Unresolved type for JT.Nested]
public val testNested2: [Error type: Unresolved type for KT.Nested]
public val testNested3: [Error type: Unresolved type for IT.Nested]
public fun testInnerAsTypeArgument1(/*0*/ x: kotlin.collections.List<[Error type: Unresolved type for JT.Inner]>): kotlin.Unit
public fun testInnerAsTypeArgument2(/*0*/ x: kotlin.collections.List<[Error type: Unresolved type for KT.Inner]>): kotlin.Unit
public fun testNestedAsTypeArgument1(/*0*/ x: kotlin.collections.List<[Error type: Unresolved type for JT.Nested]>): kotlin.Unit
public fun testNestedAsTypeArgument2(/*0*/ x: kotlin.collections.List<[Error type: Unresolved type for KT.Nested]>): kotlin.Unit
public fun testNestedAsTypeArgument3(/*0*/ x: kotlin.collections.List<[Error type: Unresolved type for IT.Nested]>): kotlin.Unit

public interface ITest {
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

    public final class Nested {
        public constructor Nested()
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}

public open class JDerived : JTest {
    public constructor JDerived()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

    // Static members
    public open override /*1*/ /*fake_override*/ fun foo(): kotlin.String!
}

public open class JTest {
    public constructor JTest()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

    public open class Nested {
        public constructor Nested()
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }

    // Static members
    public open fun foo(): kotlin.String!
}

public final class KTest {
    public constructor KTest()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

    public final inner class Inner {
        public constructor Inner()
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }

    public final class Nested {
        public constructor Nested()
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}
public typealias IT = ITest
public typealias JD = JDerived
public typealias JT = JTest
public typealias KT = KTest
