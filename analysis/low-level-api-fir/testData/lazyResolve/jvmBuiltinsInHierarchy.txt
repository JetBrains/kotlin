RAW_FIR:
FILE: [ResolvedTo(RAW_FIR)] Any.kt
    @FILE:kotlin.internal.JvmBuiltin[Unresolved]()
    @FILE:kotlin.internal.SuppressBytecodeGeneration[Unresolved]()
    @FILE:Suppress[Unresolved](LAZY_EXPRESSION)
    public open actual [ResolvedTo(RAW_FIR)] class Any {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Any] constructor(): R|kotlin/Any|

        public open actual operator [ResolvedTo(RAW_FIR)] fun equals([ResolvedTo(RAW_FIR)] other: Any?): Boolean

        public open actual [ResolvedTo(RAW_FIR)] fun hashCode(): Int

        public open actual [ResolvedTo(RAW_FIR)] fun toString(): String

    }

FILE: [ResolvedTo(RAW_FIR)] main.kt
    public abstract [ResolvedTo(RAW_FIR)] class MyMutableSet<[ResolvedTo(RAW_FIR)] E> : AbstractMutableSet<E> {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyMutableSet] constructor<[ResolvedTo(RAW_FIR)] E>(): R|MyMutableSet<E>| {
            LAZY_super<AbstractMutableSet<E>>
        }

        public? open? override [ResolvedTo(RAW_FIR)] val size: Int
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyMutableSet] get(): Int { LAZY_BLOCK }

    }

IMPORTS:
FILE: [ResolvedTo(RAW_FIR)] Any.kt
    @FILE:kotlin.internal.JvmBuiltin[Unresolved]()
    @FILE:kotlin.internal.SuppressBytecodeGeneration[Unresolved]()
    @FILE:Suppress[Unresolved](LAZY_EXPRESSION)
    public open actual [ResolvedTo(RAW_FIR)] class Any {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Any] constructor(): R|kotlin/Any|

        public open actual operator [ResolvedTo(RAW_FIR)] fun equals([ResolvedTo(RAW_FIR)] other: Any?): Boolean

        public open actual [ResolvedTo(RAW_FIR)] fun hashCode(): Int

        public open actual [ResolvedTo(RAW_FIR)] fun toString(): String

    }

FILE: [ResolvedTo(IMPORTS)] main.kt
    public abstract [ResolvedTo(RAW_FIR)] class MyMutableSet<[ResolvedTo(RAW_FIR)] E> : AbstractMutableSet<E> {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyMutableSet] constructor<[ResolvedTo(RAW_FIR)] E>(): R|MyMutableSet<E>| {
            LAZY_super<AbstractMutableSet<E>>
        }

        public? open? override [ResolvedTo(RAW_FIR)] val size: Int
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyMutableSet] get(): Int { LAZY_BLOCK }

    }

COMPILER_REQUIRED_ANNOTATIONS:
FILE: [ResolvedTo(RAW_FIR)] Any.kt
    @FILE:kotlin.internal.JvmBuiltin[Unresolved]()
    @FILE:kotlin.internal.SuppressBytecodeGeneration[Unresolved]()
    @FILE:Suppress[Unresolved](LAZY_EXPRESSION)
    public open actual [ResolvedTo(RAW_FIR)] class Any {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Any] constructor(): R|kotlin/Any|

        public open actual operator [ResolvedTo(RAW_FIR)] fun equals([ResolvedTo(RAW_FIR)] other: Any?): Boolean

        public open actual [ResolvedTo(RAW_FIR)] fun hashCode(): Int

        public open actual [ResolvedTo(RAW_FIR)] fun toString(): String

    }

FILE: [ResolvedTo(IMPORTS)] main.kt
    public abstract [ResolvedTo(RAW_FIR)] class MyMutableSet<[ResolvedTo(RAW_FIR)] E> : AbstractMutableSet<E> {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyMutableSet] constructor<[ResolvedTo(RAW_FIR)] E>(): R|MyMutableSet<E>| {
            LAZY_super<AbstractMutableSet<E>>
        }

        public? open? override [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] val size: Int
            public? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] [ContainingClassKey=MyMutableSet] get(): Int { LAZY_BLOCK }

    }

COMPANION_GENERATION:
FILE: [ResolvedTo(RAW_FIR)] Any.kt
    @FILE:kotlin.internal.JvmBuiltin[Unresolved]()
    @FILE:kotlin.internal.SuppressBytecodeGeneration[Unresolved]()
    @FILE:Suppress[Unresolved](LAZY_EXPRESSION)
    public open actual [ResolvedTo(RAW_FIR)] class Any {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Any] constructor(): R|kotlin/Any|

        public open actual operator [ResolvedTo(RAW_FIR)] fun equals([ResolvedTo(RAW_FIR)] other: Any?): Boolean

        public open actual [ResolvedTo(RAW_FIR)] fun hashCode(): Int

        public open actual [ResolvedTo(RAW_FIR)] fun toString(): String

    }

FILE: [ResolvedTo(IMPORTS)] main.kt
    public abstract [ResolvedTo(RAW_FIR)] class MyMutableSet<[ResolvedTo(RAW_FIR)] E> : AbstractMutableSet<E> {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyMutableSet] constructor<[ResolvedTo(RAW_FIR)] E>(): R|MyMutableSet<E>| {
            LAZY_super<AbstractMutableSet<E>>
        }

        public? open? override [ResolvedTo(COMPANION_GENERATION)] val size: Int
            public? [ResolvedTo(COMPANION_GENERATION)] [ContainingClassKey=MyMutableSet] get(): Int { LAZY_BLOCK }

    }

SUPER_TYPES:
FILE: [ResolvedTo(IMPORTS)] Any.kt
    @FILE:kotlin.internal.JvmBuiltin[Unresolved]()
    @FILE:kotlin.internal.SuppressBytecodeGeneration[Unresolved]()
    @FILE:Suppress[Unresolved](LAZY_EXPRESSION)
    public open actual [ResolvedTo(SUPER_TYPES)] class Any {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Any] constructor(): R|kotlin/Any|

        public open actual operator [ResolvedTo(RAW_FIR)] fun equals([ResolvedTo(RAW_FIR)] other: Any?): Boolean

        public open actual [ResolvedTo(RAW_FIR)] fun hashCode(): Int

        public open actual [ResolvedTo(RAW_FIR)] fun toString(): String

    }

FILE: [ResolvedTo(IMPORTS)] main.kt
    public abstract [ResolvedTo(SUPER_TYPES)] class MyMutableSet<[ResolvedTo(SUPER_TYPES)] E> : R|kotlin/collections/AbstractMutableSet<E>| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyMutableSet] constructor<[ResolvedTo(SUPER_TYPES)] E>(): R|MyMutableSet<E>| {
            LAZY_super<AbstractMutableSet<R|E|>>
        }

        public? open? override [ResolvedTo(SUPER_TYPES)] val size: Int
            public? [ResolvedTo(SUPER_TYPES)] [ContainingClassKey=MyMutableSet] get(): Int { LAZY_BLOCK }

    }

TYPES:
FILE: [ResolvedTo(IMPORTS)] Any.kt
    @FILE:kotlin.internal.JvmBuiltin[Unresolved]()
    @FILE:kotlin.internal.SuppressBytecodeGeneration[Unresolved]()
    @FILE:Suppress[Unresolved](LAZY_EXPRESSION)
    public open actual [ResolvedTo(SUPER_TYPES)] class Any {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Any] constructor(): R|kotlin/Any|

        public open actual operator [ResolvedTo(RAW_FIR)] fun equals([ResolvedTo(RAW_FIR)] other: Any?): Boolean

        public open actual [ResolvedTo(RAW_FIR)] fun hashCode(): Int

        public open actual [ResolvedTo(RAW_FIR)] fun toString(): String

    }

FILE: [ResolvedTo(IMPORTS)] main.kt
    public abstract [ResolvedTo(TYPES)] class MyMutableSet<[ResolvedTo(TYPES)] E> : R|kotlin/collections/AbstractMutableSet<E>| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyMutableSet] constructor<[ResolvedTo(TYPES)] E>(): R|MyMutableSet<E>| {
            LAZY_super<AbstractMutableSet<R|E|>>
        }

        public? open? override [ResolvedTo(TYPES)] val size: R|kotlin/Int|
            public? [ResolvedTo(TYPES)] [ContainingClassKey=MyMutableSet] get(): R|kotlin/Int| { LAZY_BLOCK }

    }

STATUS:
FILE: [ResolvedTo(TYPES)] Any.kt
    @FILE:<ERROR TYPE REF: HIDDEN: kotlin/internal/JvmBuiltin is invisible>[Types]()
    @FILE:<ERROR TYPE REF: HIDDEN: kotlin/internal/SuppressBytecodeGeneration is invisible>[Types]()
    @FILE:R|kotlin/Suppress|[Types](LAZY_EXPRESSION)
    public open actual [ResolvedTo(STATUS)] class Any {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Any] constructor(): R|kotlin/Any|

        public open actual operator [ResolvedTo(STATUS)] fun equals([ResolvedTo(STATUS)] other: R|kotlin/Any?|): R|kotlin/Boolean|

        public open actual [ResolvedTo(STATUS)] fun hashCode(): R|kotlin/Int|

        public open actual [ResolvedTo(STATUS)] fun toString(): R|kotlin/String|

    }

FILE: [ResolvedTo(IMPORTS)] main.kt
    public abstract [ResolvedTo(STATUS)] class MyMutableSet<[ResolvedTo(STATUS)] E> : R|kotlin/collections/AbstractMutableSet<E>| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=MyMutableSet] constructor<[ResolvedTo(STATUS)] E>(): R|MyMutableSet<E>| {
            LAZY_super<R|kotlin/collections/AbstractMutableSet<E>|>
        }

        public open override [ResolvedTo(STATUS)] val size: R|kotlin/Int|
            public [ResolvedTo(STATUS)] [ContainingClassKey=MyMutableSet] get(): R|kotlin/Int| { LAZY_BLOCK }

    }

EXPECT_ACTUAL_MATCHING:
FILE: [ResolvedTo(TYPES)] Any.kt
    @FILE:<ERROR TYPE REF: HIDDEN: kotlin/internal/JvmBuiltin is invisible>[Types]()
    @FILE:<ERROR TYPE REF: HIDDEN: kotlin/internal/SuppressBytecodeGeneration is invisible>[Types]()
    @FILE:R|kotlin/Suppress|[Types](LAZY_EXPRESSION)
    public open actual [ResolvedTo(STATUS)] class Any {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Any] constructor(): R|kotlin/Any|

        public open actual operator [ResolvedTo(STATUS)] fun equals([ResolvedTo(STATUS)] other: R|kotlin/Any?|): R|kotlin/Boolean|

        public open actual [ResolvedTo(STATUS)] fun hashCode(): R|kotlin/Int|

        public open actual [ResolvedTo(STATUS)] fun toString(): R|kotlin/String|

    }

FILE: [ResolvedTo(IMPORTS)] main.kt
    public abstract [ResolvedTo(STATUS)] class MyMutableSet<[ResolvedTo(STATUS)] E> : R|kotlin/collections/AbstractMutableSet<E>| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=MyMutableSet] constructor<[ResolvedTo(STATUS)] E>(): R|MyMutableSet<E>| {
            LAZY_super<R|kotlin/collections/AbstractMutableSet<E>|>
        }

        public open override [ResolvedTo(EXPECT_ACTUAL_MATCHING)] val size: R|kotlin/Int|
            public [ResolvedTo(EXPECT_ACTUAL_MATCHING)] [ContainingClassKey=MyMutableSet] get(): R|kotlin/Int| { LAZY_BLOCK }

    }

CONTRACTS:
FILE: [ResolvedTo(TYPES)] Any.kt
    @FILE:<ERROR TYPE REF: HIDDEN: kotlin/internal/JvmBuiltin is invisible>[Types]()
    @FILE:<ERROR TYPE REF: HIDDEN: kotlin/internal/SuppressBytecodeGeneration is invisible>[Types]()
    @FILE:R|kotlin/Suppress|[Types](LAZY_EXPRESSION)
    public open actual [ResolvedTo(STATUS)] class Any {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Any] constructor(): R|kotlin/Any|

        public open actual operator [ResolvedTo(STATUS)] fun equals([ResolvedTo(STATUS)] other: R|kotlin/Any?|): R|kotlin/Boolean|

        public open actual [ResolvedTo(STATUS)] fun hashCode(): R|kotlin/Int|

        public open actual [ResolvedTo(STATUS)] fun toString(): R|kotlin/String|

    }

FILE: [ResolvedTo(IMPORTS)] main.kt
    public abstract [ResolvedTo(STATUS)] class MyMutableSet<[ResolvedTo(STATUS)] E> : R|kotlin/collections/AbstractMutableSet<E>| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=MyMutableSet] constructor<[ResolvedTo(STATUS)] E>(): R|MyMutableSet<E>| {
            LAZY_super<R|kotlin/collections/AbstractMutableSet<E>|>
        }

        public open override [ResolvedTo(CONTRACTS)] val size: R|kotlin/Int|
            public [ResolvedTo(CONTRACTS)] [ContainingClassKey=MyMutableSet] get(): R|kotlin/Int| { LAZY_BLOCK }

    }

IMPLICIT_TYPES_BODY_RESOLVE:
FILE: [ResolvedTo(TYPES)] Any.kt
    @FILE:<ERROR TYPE REF: HIDDEN: kotlin/internal/JvmBuiltin is invisible>[Types]()
    @FILE:<ERROR TYPE REF: HIDDEN: kotlin/internal/SuppressBytecodeGeneration is invisible>[Types]()
    @FILE:R|kotlin/Suppress|[Types](LAZY_EXPRESSION)
    public open actual [ResolvedTo(STATUS)] class Any {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Any] constructor(): R|kotlin/Any|

        public open actual operator [ResolvedTo(STATUS)] fun equals([ResolvedTo(STATUS)] other: R|kotlin/Any?|): R|kotlin/Boolean|

        public open actual [ResolvedTo(STATUS)] fun hashCode(): R|kotlin/Int|

        public open actual [ResolvedTo(STATUS)] fun toString(): R|kotlin/String|

    }

FILE: [ResolvedTo(IMPORTS)] main.kt
    public abstract [ResolvedTo(STATUS)] class MyMutableSet<[ResolvedTo(STATUS)] E> : R|kotlin/collections/AbstractMutableSet<E>| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=MyMutableSet] constructor<[ResolvedTo(STATUS)] E>(): R|MyMutableSet<E>| {
            LAZY_super<R|kotlin/collections/AbstractMutableSet<E>|>
        }

        public open override [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] val size: R|kotlin/Int|
            public [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] [ContainingClassKey=MyMutableSet] get(): R|kotlin/Int| { LAZY_BLOCK }

    }

CONSTANT_EVALUATION:
FILE: [ResolvedTo(TYPES)] Any.kt
    @FILE:<ERROR TYPE REF: HIDDEN: kotlin/internal/JvmBuiltin is invisible>[Types]()
    @FILE:<ERROR TYPE REF: HIDDEN: kotlin/internal/SuppressBytecodeGeneration is invisible>[Types]()
    @FILE:R|kotlin/Suppress|[Types](LAZY_EXPRESSION)
    public open actual [ResolvedTo(STATUS)] class Any {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Any] constructor(): R|kotlin/Any|

        public open actual operator [ResolvedTo(STATUS)] fun equals([ResolvedTo(STATUS)] other: R|kotlin/Any?|): R|kotlin/Boolean|

        public open actual [ResolvedTo(STATUS)] fun hashCode(): R|kotlin/Int|

        public open actual [ResolvedTo(STATUS)] fun toString(): R|kotlin/String|

    }

FILE: [ResolvedTo(IMPORTS)] main.kt
    public abstract [ResolvedTo(STATUS)] class MyMutableSet<[ResolvedTo(STATUS)] E> : R|kotlin/collections/AbstractMutableSet<E>| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=MyMutableSet] constructor<[ResolvedTo(STATUS)] E>(): R|MyMutableSet<E>| {
            LAZY_super<R|kotlin/collections/AbstractMutableSet<E>|>
        }

        public open override [ResolvedTo(CONSTANT_EVALUATION)] val size: R|kotlin/Int|
            public [ResolvedTo(CONSTANT_EVALUATION)] [ContainingClassKey=MyMutableSet] get(): R|kotlin/Int| { LAZY_BLOCK }

    }

ANNOTATION_ARGUMENTS:
FILE: [ResolvedTo(TYPES)] Any.kt
    @FILE:<ERROR TYPE REF: HIDDEN: kotlin/internal/JvmBuiltin is invisible>[Types]()
    @FILE:<ERROR TYPE REF: HIDDEN: kotlin/internal/SuppressBytecodeGeneration is invisible>[Types]()
    @FILE:R|kotlin/Suppress|[Types](LAZY_EXPRESSION)
    public open actual [ResolvedTo(STATUS)] class Any {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Any] constructor(): R|kotlin/Any|

        public open actual operator [ResolvedTo(STATUS)] fun equals([ResolvedTo(STATUS)] other: R|kotlin/Any?|): R|kotlin/Boolean|

        public open actual [ResolvedTo(STATUS)] fun hashCode(): R|kotlin/Int|

        public open actual [ResolvedTo(STATUS)] fun toString(): R|kotlin/String|

    }

FILE: [ResolvedTo(IMPORTS)] main.kt
    public abstract [ResolvedTo(STATUS)] class MyMutableSet<[ResolvedTo(STATUS)] E> : R|kotlin/collections/AbstractMutableSet<E>| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=MyMutableSet] constructor<[ResolvedTo(STATUS)] E>(): R|MyMutableSet<E>| {
            LAZY_super<R|kotlin/collections/AbstractMutableSet<E>|>
        }

        public open override [ResolvedTo(ANNOTATION_ARGUMENTS)] val size: R|kotlin/Int|
            public [ResolvedTo(ANNOTATION_ARGUMENTS)] [ContainingClassKey=MyMutableSet] get(): R|kotlin/Int| { LAZY_BLOCK }

    }

BODY_RESOLVE:
FILE: [ResolvedTo(TYPES)] Any.kt
    @FILE:<ERROR TYPE REF: HIDDEN: kotlin/internal/JvmBuiltin is invisible>[Types]()
    @FILE:<ERROR TYPE REF: HIDDEN: kotlin/internal/SuppressBytecodeGeneration is invisible>[Types]()
    @FILE:R|kotlin/Suppress|[Types](LAZY_EXPRESSION)
    public open actual [ResolvedTo(STATUS)] class Any {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Any] constructor(): R|kotlin/Any|

        public open actual operator [ResolvedTo(STATUS)] fun equals([ResolvedTo(STATUS)] other: R|kotlin/Any?|): R|kotlin/Boolean|

        public open actual [ResolvedTo(STATUS)] fun hashCode(): R|kotlin/Int|

        public open actual [ResolvedTo(STATUS)] fun toString(): R|kotlin/String|

    }

FILE: [ResolvedTo(IMPORTS)] main.kt
    public abstract [ResolvedTo(STATUS)] class MyMutableSet<[ResolvedTo(STATUS)] E> : R|kotlin/collections/AbstractMutableSet<E>| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=MyMutableSet] constructor<[ResolvedTo(STATUS)] E>(): R|MyMutableSet<E>| {
            LAZY_super<R|kotlin/collections/AbstractMutableSet<E>|>
        }

        public open override [ResolvedTo(BODY_RESOLVE)] val size: R|kotlin/Int|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=MyMutableSet] get(): R|kotlin/Int| {
                ^ Int(0)
            }

    }

FILE RAW TO BODY:
FILE: [ResolvedTo(BODY_RESOLVE)] main.kt
    public abstract [ResolvedTo(BODY_RESOLVE)] class MyMutableSet<[ResolvedTo(BODY_RESOLVE)] E> : R|kotlin/collections/AbstractMutableSet<E>| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=MyMutableSet] constructor<[ResolvedTo(BODY_RESOLVE)] E>(): R|MyMutableSet<E>| {
            super<R|kotlin/collections/AbstractMutableSet<E>|>()
        }

        public open override [ResolvedTo(BODY_RESOLVE)] val size: R|kotlin/Int|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=MyMutableSet] get(): R|kotlin/Int| {
                ^ Int(0)
            }

    }
