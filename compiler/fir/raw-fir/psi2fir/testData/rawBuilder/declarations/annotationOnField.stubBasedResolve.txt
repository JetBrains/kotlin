FILE: [ResolvedTo(BODY_RESOLVE)] annotationOnField.kt
    public final [ResolvedTo(BODY_RESOLVE)] annotation class Ann : R|kotlin/Annotation| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Ann] constructor(): R|Ann| {
            super<R|kotlin/Any|>()
        }

    }
    public final [ResolvedTo(BODY_RESOLVE)] class CustomDelegate : R|kotlin/Any| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=CustomDelegate] constructor(): R|CustomDelegate| {
            super<R|kotlin/Any|>()
        }

        public final operator [ResolvedTo(ANNOTATION_ARGUMENTS)] fun getValue([ResolvedTo(ANNOTATION_ARGUMENTS)] thisRef: R|kotlin/Any?|, [ResolvedTo(ANNOTATION_ARGUMENTS)] prop: R|kotlin/reflect/KProperty<*>|): R|kotlin/String| { LAZY_BLOCK }

    }
    @FIELD:R|Ann|[Types]() public final [ResolvedTo(ANNOTATION_ARGUMENTS)] class SomeClass : R|kotlin/Any| {
        @FIELD:R|Ann|[Types]() public [ResolvedTo(ANNOTATION_ARGUMENTS)] [ContainingClassKey=SomeClass] constructor(): R|SomeClass| {
            LAZY_super<R|kotlin/Any|>
        }

        field:@FIELD:R|Ann|[Types]() protected final [ResolvedTo(ANNOTATION_ARGUMENTS)] val simpleProperty: R|kotlin/String| = LAZY_EXPRESSION
            protected [ResolvedTo(ANNOTATION_ARGUMENTS)] [ContainingClassKey=SomeClass] get(): R|kotlin/String|

        field:@FIELD:R|Ann|[Types]() protected final [ResolvedTo(ANNOTATION_ARGUMENTS)] val simplePropertyWithAnnotationList: R|kotlin/String| = LAZY_EXPRESSION
            protected [ResolvedTo(ANNOTATION_ARGUMENTS)] [ContainingClassKey=SomeClass] get(): R|kotlin/String|

        field:@FIELD:R|Ann|[Types]() protected final [ResolvedTo(ANNOTATION_ARGUMENTS)] val delegatedProperty: R|kotlin/String|by LAZY_EXPRESSION
            protected [ResolvedTo(ANNOTATION_ARGUMENTS)] [ContainingClassKey=SomeClass] get(): R|kotlin/String| { LAZY_BLOCK }

        field:@FIELD:R|Ann|[Types]() public final [ResolvedTo(ANNOTATION_ARGUMENTS)] val propertyWithCustomGetter: R|kotlin/Int|
            public [ResolvedTo(ANNOTATION_ARGUMENTS)] [ContainingClassKey=SomeClass] get(): R|kotlin/Int| { LAZY_BLOCK }

        @FIELD:R|Ann|[Types]() public final [ResolvedTo(ANNOTATION_ARGUMENTS)] fun anotherFun([ResolvedTo(ANNOTATION_ARGUMENTS)] @FIELD:R|Ann|[Types]() s: R|kotlin/String|): R|kotlin/Unit| { LAZY_BLOCK }

    }
    public final [ResolvedTo(BODY_RESOLVE)] class WithPrimaryConstructor : R|kotlin/Any| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=WithPrimaryConstructor] constructor([ResolvedTo(BODY_RESOLVE)] [CorrespondingProperty=/WithPrimaryConstructor.a] a: R|kotlin/String|): R|WithPrimaryConstructor| {
            super<R|kotlin/Any|>()
        }

        field:@FIELD:R|Ann|[Types]() public final [ResolvedTo(BODY_RESOLVE)] [IsFromPrimaryConstructor=true] val a: R|kotlin/String| = R|<local>/a|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=WithPrimaryConstructor] get(): R|kotlin/String|

    }