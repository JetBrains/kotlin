package

public val test1: JHost.Runnable
public val test2: JHost.Consumer<kotlin.String>
public val test3: JHost.Consumer<kotlin.String>
public val test4: JHost.Consumer<kotlin.collections.List<kotlin.String>>
public val test5: JHost.Consumer2<kotlin.Int, kotlin.Int>

public open class JHost {
    public constructor JHost()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

    public interface Consumer</*0*/ T : kotlin.Any!> {
        public abstract fun consume(/*0*/ x: T!): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }

    public interface Consumer2</*0*/ T1 : kotlin.Any!, /*1*/ T2 : kotlin.Any!> {
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public abstract fun run(/*0*/ x1: T1!, /*1*/ x2: T2!): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }

    public interface Runnable {
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public abstract fun run(): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}
public typealias C</*0*/ T>  = JHost.Consumer<T>
public typealias C2</*0*/ T>  = JHost.Consumer2<T, T>
public typealias CStr = JHost.Consumer<kotlin.String>
public typealias CStrList = JHost.Consumer<kotlin.collections.List<kotlin.String>>
public typealias R = JHost.Runnable
