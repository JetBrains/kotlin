RAW_FIR:
FILE: [ResolvedTo(RAW_FIR)] superTypesLoopScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-superTypesLoopScript.kts>
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public open [ResolvedTo(RAW_FIR)] class resolveMe : C {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=resolveMe] constructor(): R|resolveMe| {
                LAZY_super<C>
            }

        }

        public open [ResolvedTo(RAW_FIR)] class A : B {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
                LAZY_super<B>
            }

        }

        public open [ResolvedTo(RAW_FIR)] class B : C {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=B] constructor(): R|B| {
                LAZY_super<C>
            }

        }

        public open [ResolvedTo(RAW_FIR)] class C : A {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] constructor(): R|C| {
                LAZY_super<A>
            }

        }


IMPORTS:
FILE: [ResolvedTo(IMPORTS)] superTypesLoopScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-superTypesLoopScript.kts>
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public open [ResolvedTo(RAW_FIR)] class resolveMe : C {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=resolveMe] constructor(): R|resolveMe| {
                LAZY_super<C>
            }

        }

        public open [ResolvedTo(RAW_FIR)] class A : B {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
                LAZY_super<B>
            }

        }

        public open [ResolvedTo(RAW_FIR)] class B : C {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=B] constructor(): R|B| {
                LAZY_super<C>
            }

        }

        public open [ResolvedTo(RAW_FIR)] class C : A {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] constructor(): R|C| {
                LAZY_super<A>
            }

        }


COMPILER_REQUIRED_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] superTypesLoopScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-superTypesLoopScript.kts>
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public open [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] class resolveMe : C {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=resolveMe] constructor(): R|resolveMe| {
                LAZY_super<C>
            }

        }

        public open [ResolvedTo(RAW_FIR)] class A : B {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
                LAZY_super<B>
            }

        }

        public open [ResolvedTo(RAW_FIR)] class B : C {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=B] constructor(): R|B| {
                LAZY_super<C>
            }

        }

        public open [ResolvedTo(RAW_FIR)] class C : A {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] constructor(): R|C| {
                LAZY_super<A>
            }

        }


COMPANION_GENERATION:
FILE: [ResolvedTo(IMPORTS)] superTypesLoopScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-superTypesLoopScript.kts>
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public open [ResolvedTo(COMPANION_GENERATION)] class resolveMe : C {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=resolveMe] constructor(): R|resolveMe| {
                LAZY_super<C>
            }

        }

        public open [ResolvedTo(RAW_FIR)] class A : B {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
                LAZY_super<B>
            }

        }

        public open [ResolvedTo(RAW_FIR)] class B : C {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=B] constructor(): R|B| {
                LAZY_super<C>
            }

        }

        public open [ResolvedTo(RAW_FIR)] class C : A {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] constructor(): R|C| {
                LAZY_super<A>
            }

        }


SUPER_TYPES:
FILE: [ResolvedTo(IMPORTS)] superTypesLoopScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-superTypesLoopScript.kts>
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public open [ResolvedTo(SUPER_TYPES)] class resolveMe : R|C| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=resolveMe] constructor(): R|resolveMe| {
                LAZY_super<C>
            }

        }

        public open [ResolvedTo(SUPER_TYPES)] class A : <ERROR TYPE REF: Loop in supertype: /A -> /B> {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
                LAZY_super<B>
            }

        }

        public open [ResolvedTo(SUPER_TYPES)] class B : <ERROR TYPE REF: Loop in supertype: /B -> /C> {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=B] constructor(): R|B| {
                LAZY_super<C>
            }

        }

        public open [ResolvedTo(SUPER_TYPES)] class C : <ERROR TYPE REF: Loop in supertype: /C -> /A> {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] constructor(): R|C| {
                LAZY_super<A>
            }

        }


TYPES:
FILE: [ResolvedTo(IMPORTS)] superTypesLoopScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-superTypesLoopScript.kts>
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public open [ResolvedTo(TYPES)] class resolveMe : R|C| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=resolveMe] constructor(): R|resolveMe| {
                LAZY_super<C>
            }

        }

        public open [ResolvedTo(SUPER_TYPES)] class A : <ERROR TYPE REF: Loop in supertype: /A -> /B> {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
                LAZY_super<B>
            }

        }

        public open [ResolvedTo(SUPER_TYPES)] class B : <ERROR TYPE REF: Loop in supertype: /B -> /C> {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=B] constructor(): R|B| {
                LAZY_super<C>
            }

        }

        public open [ResolvedTo(SUPER_TYPES)] class C : <ERROR TYPE REF: Loop in supertype: /C -> /A> {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] constructor(): R|C| {
                LAZY_super<A>
            }

        }


STATUS:
FILE: [ResolvedTo(IMPORTS)] superTypesLoopScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-superTypesLoopScript.kts>
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public open [ResolvedTo(STATUS)] class resolveMe : R|C| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=resolveMe] constructor(): R|resolveMe| {
                LAZY_super<C>
            }

        }

        public open [ResolvedTo(SUPER_TYPES)] class A : <ERROR TYPE REF: Loop in supertype: /A -> /B> {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
                LAZY_super<B>
            }

        }

        public open [ResolvedTo(SUPER_TYPES)] class B : <ERROR TYPE REF: Loop in supertype: /B -> /C> {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=B] constructor(): R|B| {
                LAZY_super<C>
            }

        }

        public open [ResolvedTo(SUPER_TYPES)] class C : <ERROR TYPE REF: Loop in supertype: /C -> /A> {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] constructor(): R|C| {
                LAZY_super<A>
            }

        }


EXPECT_ACTUAL_MATCHING:
FILE: [ResolvedTo(IMPORTS)] superTypesLoopScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-superTypesLoopScript.kts>
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public open [ResolvedTo(EXPECT_ACTUAL_MATCHING)] class resolveMe : R|C| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=resolveMe] constructor(): R|resolveMe| {
                LAZY_super<C>
            }

        }

        public open [ResolvedTo(SUPER_TYPES)] class A : <ERROR TYPE REF: Loop in supertype: /A -> /B> {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
                LAZY_super<B>
            }

        }

        public open [ResolvedTo(SUPER_TYPES)] class B : <ERROR TYPE REF: Loop in supertype: /B -> /C> {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=B] constructor(): R|B| {
                LAZY_super<C>
            }

        }

        public open [ResolvedTo(SUPER_TYPES)] class C : <ERROR TYPE REF: Loop in supertype: /C -> /A> {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] constructor(): R|C| {
                LAZY_super<A>
            }

        }


CONTRACTS:
FILE: [ResolvedTo(IMPORTS)] superTypesLoopScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(TYPES)] <script-superTypesLoopScript.kts>
        [ResolvedTo(TYPES)] lval args: R|kotlin/Array<kotlin/String>|

        public open [ResolvedTo(CONTRACTS)] class resolveMe : R|C| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=resolveMe] constructor(): R|resolveMe| {
                LAZY_super<C>
            }

        }

        public open [ResolvedTo(SUPER_TYPES)] class A : <ERROR TYPE REF: Loop in supertype: /A -> /B> {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
                LAZY_super<B>
            }

        }

        public open [ResolvedTo(SUPER_TYPES)] class B : <ERROR TYPE REF: Loop in supertype: /B -> /C> {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=B] constructor(): R|B| {
                LAZY_super<C>
            }

        }

        public open [ResolvedTo(SUPER_TYPES)] class C : <ERROR TYPE REF: Loop in supertype: /C -> /A> {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] constructor(): R|C| {
                LAZY_super<A>
            }

        }


IMPLICIT_TYPES_BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] superTypesLoopScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(TYPES)] <script-superTypesLoopScript.kts>
        [ResolvedTo(TYPES)] lval args: R|kotlin/Array<kotlin/String>|

        public open [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] class resolveMe : R|C| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=resolveMe] constructor(): R|resolveMe| {
                LAZY_super<C>
            }

        }

        public open [ResolvedTo(SUPER_TYPES)] class A : <ERROR TYPE REF: Loop in supertype: /A -> /B> {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
                LAZY_super<B>
            }

        }

        public open [ResolvedTo(SUPER_TYPES)] class B : <ERROR TYPE REF: Loop in supertype: /B -> /C> {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=B] constructor(): R|B| {
                LAZY_super<C>
            }

        }

        public open [ResolvedTo(SUPER_TYPES)] class C : <ERROR TYPE REF: Loop in supertype: /C -> /A> {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] constructor(): R|C| {
                LAZY_super<A>
            }

        }


CONSTANT_EVALUATION:
FILE: [ResolvedTo(IMPORTS)] superTypesLoopScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(TYPES)] <script-superTypesLoopScript.kts>
        [ResolvedTo(TYPES)] lval args: R|kotlin/Array<kotlin/String>|

        public open [ResolvedTo(CONSTANT_EVALUATION)] class resolveMe : R|C| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=resolveMe] constructor(): R|resolveMe| {
                LAZY_super<C>
            }

        }

        public open [ResolvedTo(SUPER_TYPES)] class A : <ERROR TYPE REF: Loop in supertype: /A -> /B> {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
                LAZY_super<B>
            }

        }

        public open [ResolvedTo(SUPER_TYPES)] class B : <ERROR TYPE REF: Loop in supertype: /B -> /C> {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=B] constructor(): R|B| {
                LAZY_super<C>
            }

        }

        public open [ResolvedTo(SUPER_TYPES)] class C : <ERROR TYPE REF: Loop in supertype: /C -> /A> {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] constructor(): R|C| {
                LAZY_super<A>
            }

        }


ANNOTATION_ARGUMENTS:
FILE: [ResolvedTo(IMPORTS)] superTypesLoopScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(TYPES)] <script-superTypesLoopScript.kts>
        [ResolvedTo(TYPES)] lval args: R|kotlin/Array<kotlin/String>|

        public open [ResolvedTo(ANNOTATION_ARGUMENTS)] class resolveMe : R|C| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=resolveMe] constructor(): R|resolveMe| {
                LAZY_super<C>
            }

        }

        public open [ResolvedTo(SUPER_TYPES)] class A : <ERROR TYPE REF: Loop in supertype: /A -> /B> {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
                LAZY_super<B>
            }

        }

        public open [ResolvedTo(SUPER_TYPES)] class B : <ERROR TYPE REF: Loop in supertype: /B -> /C> {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=B] constructor(): R|B| {
                LAZY_super<C>
            }

        }

        public open [ResolvedTo(SUPER_TYPES)] class C : <ERROR TYPE REF: Loop in supertype: /C -> /A> {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] constructor(): R|C| {
                LAZY_super<A>
            }

        }


BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] superTypesLoopScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(TYPES)] <script-superTypesLoopScript.kts>
        [ResolvedTo(TYPES)] lval args: R|kotlin/Array<kotlin/String>|

        public open [ResolvedTo(BODY_RESOLVE)] class resolveMe : R|C| {
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=resolveMe] constructor(): R|resolveMe| {
                super<R|C|>()
            }

        }

        public open [ResolvedTo(SUPER_TYPES)] class A : <ERROR TYPE REF: Loop in supertype: /A -> /B> {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
                LAZY_super<B>
            }

        }

        public open [ResolvedTo(SUPER_TYPES)] class B : <ERROR TYPE REF: Loop in supertype: /B -> /C> {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=B] constructor(): R|B| {
                LAZY_super<C>
            }

        }

        public open [ResolvedTo(STATUS)] class C : <ERROR TYPE REF: Loop in supertype: /C -> /A> {
            public [ResolvedTo(STATUS)] [ContainingClassKey=C] constructor(): R|C| {
                LAZY_super<R|A|>
            }

        }


FILE RAW TO BODY:
FILE: [ResolvedTo(BODY_RESOLVE)] superTypesLoopScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] <script-superTypesLoopScript.kts>
        [ResolvedTo(BODY_RESOLVE)] lval args: R|kotlin/Array<kotlin/String>|

        public open [ResolvedTo(BODY_RESOLVE)] class resolveMe : R|C| {
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=resolveMe] constructor(): R|resolveMe| {
                super<R|C|>()
            }

        }

        public open [ResolvedTo(BODY_RESOLVE)] class A : <ERROR TYPE REF: Loop in supertype: /A -> /B> {
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=A] constructor(): R|A| {
                super<R|B|>()
            }

        }

        public open [ResolvedTo(BODY_RESOLVE)] class B : <ERROR TYPE REF: Loop in supertype: /B -> /C> {
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=B] constructor(): R|B| {
                super<R|C|>()
            }

        }

        public open [ResolvedTo(BODY_RESOLVE)] class C : <ERROR TYPE REF: Loop in supertype: /C -> /A> {
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=C] constructor(): R|C| {
                super<R|A|>()
            }

        }
