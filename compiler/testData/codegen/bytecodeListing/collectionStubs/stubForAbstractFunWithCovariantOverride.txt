@kotlin.Metadata
public abstract class AbstractAdd {
    // source: 'stubForAbstractFunWithCovariantOverride.kt'
    public method <init>(): void
    public abstract @org.jetbrains.annotations.NotNull method add(@org.jetbrains.annotations.NotNull p0: java.lang.String): java.lang.Object
}

@kotlin.Metadata
public final class StringCollection {
    // source: 'stubForAbstractFunWithCovariantOverride.kt'
    public method <init>(): void
    public @org.jetbrains.annotations.NotNull method add(@org.jetbrains.annotations.NotNull p0: java.lang.String): java.lang.Boolean
    public synthetic bridge method add(p0: java.lang.Object): boolean
    public synthetic bridge method add(p0: java.lang.String): java.lang.Object
    public method addAll(p0: java.util.Collection): boolean
    public method clear(): void
    public method contains(@org.jetbrains.annotations.NotNull p0: java.lang.String): boolean
    public bridge final method contains(p0: java.lang.Object): boolean
    public method containsAll(@org.jetbrains.annotations.NotNull p0: java.util.Collection): boolean
    public method getSize(): int
    public method isEmpty(): boolean
    public @org.jetbrains.annotations.NotNull method iterator(): java.util.Iterator
    public method remove(p0: java.lang.Object): boolean
    public method removeAll(p0: java.util.Collection): boolean
    public method retainAll(p0: java.util.Collection): boolean
    public bridge final method size(): int
    public method toArray(): java.lang.Object[]
    public method toArray(p0: java.lang.Object[]): java.lang.Object[]
}
