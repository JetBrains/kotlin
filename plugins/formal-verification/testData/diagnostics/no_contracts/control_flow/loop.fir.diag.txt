/loop.kt:(23,32): info: Generated Viper text for whileLoop:
method f$whileLoop$TF$T$Boolean(p$b: Ref) returns (ret$0: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$boolType())
{
  var anon$0: Ref
  inhale df$rt$isSubtype(df$rt$typeOf(p$b), df$rt$boolType())
  label lbl$continue$0
  anon$0 := p$b
  while (df$rt$boolFromRef(anon$0))
    invariant df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$boolType())
  {
    var l1$a: Ref
    var l1$c: Ref
    l1$a := df$rt$intToRef(1)
    l1$c := df$rt$intToRef(2)
    anon$0 := p$b
  }
  label lbl$break$0
  ret$0 := df$rt$boolToRef(false)
  goto lbl$ret$0
  label lbl$ret$0
}

/loop.kt:(138,160): info: Generated Viper text for whileFunctionCondition:
method f$whileFunctionCondition$TF$() returns (ret$0: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$unitType())
{
  var anon$0: Ref
  ret$0 := df$rt$unitValue()
  label lbl$continue$0
  anon$0 := f$whileLoop$TF$T$Boolean(df$rt$boolToRef(true))
  while (df$rt$boolFromRef(anon$0))
    invariant df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$unitType())
  {
    anon$0 := f$whileLoop$TF$T$Boolean(df$rt$boolToRef(true))
  }
  label lbl$break$0
  label lbl$ret$0
}

method f$whileLoop$TF$T$Boolean(p$b: Ref) returns (ret: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret), df$rt$boolType())
