namespace <root>

// <namespace name="variance">
namespace variance

internal final class variance.Array</*0*/ T : jet.Any?> : jet.Any {
    public final /*constructor*/ fun </*0*/ T : jet.Any?><init>(/*0*/ length: jet.Int, /*1*/ t: T): variance.Array<T>
    internal final fun get(/*0*/ index: jet.Int): T
    internal final val length: jet.Int
    internal final fun set(/*0*/ index: jet.Int, /*1*/ value: T): jet.Tuple0
    internal final val t: T
}
internal abstract class variance.Consumer</*0*/ in T : jet.Any?> : jet.Any {
    public final /*constructor*/ fun </*0*/ in T : jet.Any?><init>(): variance.Consumer<T>
}
internal abstract class variance.Producer</*0*/ out T : jet.Any?> : jet.Any {
    public final /*constructor*/ fun </*0*/ out T : jet.Any?><init>(): variance.Producer<T>
}
internal abstract class variance.Usual</*0*/ T : jet.Any?> : jet.Any {
    public final /*constructor*/ fun </*0*/ T : jet.Any?><init>(): variance.Usual<T>
}
internal final fun copy1(/*0*/ from: variance.Array<jet.Any>, /*1*/ to: variance.Array<jet.Any>): jet.Tuple0
internal final fun copy2(/*0*/ from: variance.Array<out jet.Any>, /*1*/ to: variance.Array<in jet.Any>): jet.Tuple0
internal final fun </*0*/ T : jet.Any?>copy3(/*0*/ from: variance.Array<out T>, /*1*/ to: variance.Array<in T>): jet.Tuple0
internal final fun copy4(/*0*/ from: variance.Array<out jet.Number>, /*1*/ to: variance.Array<in jet.Int>): jet.Tuple0
internal final fun f(/*0*/ ints: variance.Array<jet.Int>, /*1*/ any: variance.Array<jet.Any>, /*2*/ numbers: variance.Array<jet.Number>): jet.Tuple0
internal final fun foo(/*0*/ c: variance.Consumer<jet.Int>, /*1*/ p: variance.Producer<jet.Int>, /*2*/ u: variance.Usual<jet.Int>): jet.Tuple0
// </namespace name="variance">
