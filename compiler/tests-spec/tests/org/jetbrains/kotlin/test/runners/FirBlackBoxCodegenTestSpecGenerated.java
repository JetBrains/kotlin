/*
 * Copyright 2010-2024 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.test.runners;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.util.KtTestUtil;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.spec.utils.tasks.GenerateSpecTestsKt}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("compiler/tests-spec/testData/codegen/box")
@TestDataPath("$PROJECT_ROOT")
public class FirBlackBoxCodegenTestSpecGenerated extends AbstractFirBlackBoxCodegenTestSpec {
  @Test
  public void testAllFilesPresentInBox() {
    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true, "helpers", "templates", "linked/exceptions", "linked/operator-call", "linked/overload-resolution/building-the-overload-candidate-set-ocs/call-with-an-explicit-receiver", "linked/overloadable-operators");
  }

  @Nested
  @TestMetadata("compiler/tests-spec/testData/codegen/box/linked")
  @TestDataPath("$PROJECT_ROOT")
  public class Linked {
    @Test
    public void testAllFilesPresentInLinked() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true, "exceptions", "operator-call", "overload-resolution/building-the-overload-candidate-set-ocs/call-with-an-explicit-receiver", "overloadable-operators");
    }

    @Nested
    @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions")
    @TestDataPath("$PROJECT_ROOT")
    public class Expressions {
      @Test
      public void testAllFilesPresentInExpressions() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @Nested
      @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/additive-expression")
      @TestDataPath("$PROJECT_ROOT")
      public class Additive_expression {
        @Test
        public void testAllFilesPresentInAdditive_expression() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/additive-expression"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @Nested
        @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/additive-expression/p-2")
        @TestDataPath("$PROJECT_ROOT")
        public class P_2 {
          @Test
          public void testAllFilesPresentInP_2() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/additive-expression/p-2"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/additive-expression/p-2/pos")
          @TestDataPath("$PROJECT_ROOT")
          public class Pos {
            @Test
            @TestMetadata("1.1.kt")
            public void test1_1() {
              runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/additive-expression/p-2/pos/1.1.kt");
            }

            @Test
            @TestMetadata("2.1.kt")
            public void test2_1() {
              runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/additive-expression/p-2/pos/2.1.kt");
            }

            @Test
            public void testAllFilesPresentInPos() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/additive-expression/p-2/pos"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }
          }
        }
      }

      @Nested
      @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/built-in-types-and-their-semantics")
      @TestDataPath("$PROJECT_ROOT")
      public class Built_in_types_and_their_semantics {
        @Test
        public void testAllFilesPresentInBuilt_in_types_and_their_semantics() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/built-in-types-and-their-semantics"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @Nested
        @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/built-in-types-and-their-semantics/kotlin.nothing-1")
        @TestDataPath("$PROJECT_ROOT")
        public class Kotlin_nothing_1 {
          @Test
          public void testAllFilesPresentInKotlin_nothing_1() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/built-in-types-and-their-semantics/kotlin.nothing-1"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/built-in-types-and-their-semantics/kotlin.nothing-1/p-1")
          @TestDataPath("$PROJECT_ROOT")
          public class P_1 {
            @Test
            public void testAllFilesPresentInP_1() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/built-in-types-and-their-semantics/kotlin.nothing-1/p-1"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }

            @Nested
            @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/built-in-types-and-their-semantics/kotlin.nothing-1/p-1/pos")
            @TestDataPath("$PROJECT_ROOT")
            public class Pos {
              @Test
              @TestMetadata("1.1.kt")
              public void test1_1() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/built-in-types-and-their-semantics/kotlin.nothing-1/p-1/pos/1.1.kt");
              }

              @Test
              @TestMetadata("1.10.kt")
              public void test1_10() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/built-in-types-and-their-semantics/kotlin.nothing-1/p-1/pos/1.10.kt");
              }

              @Test
              @TestMetadata("1.2.kt")
              public void test1_2() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/built-in-types-and-their-semantics/kotlin.nothing-1/p-1/pos/1.2.kt");
              }

              @Test
              @TestMetadata("1.3.kt")
              public void test1_3() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/built-in-types-and-their-semantics/kotlin.nothing-1/p-1/pos/1.3.kt");
              }

              @Test
              @TestMetadata("1.4.kt")
              public void test1_4() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/built-in-types-and-their-semantics/kotlin.nothing-1/p-1/pos/1.4.kt");
              }

              @Test
              @TestMetadata("1.5.kt")
              public void test1_5() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/built-in-types-and-their-semantics/kotlin.nothing-1/p-1/pos/1.5.kt");
              }

              @Test
              @TestMetadata("1.6.kt")
              public void test1_6() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/built-in-types-and-their-semantics/kotlin.nothing-1/p-1/pos/1.6.kt");
              }

              @Test
              @TestMetadata("1.7.kt")
              public void test1_7() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/built-in-types-and-their-semantics/kotlin.nothing-1/p-1/pos/1.7.kt");
              }

              @Test
              @TestMetadata("1.8.kt")
              public void test1_8() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/built-in-types-and-their-semantics/kotlin.nothing-1/p-1/pos/1.8.kt");
              }

              @Test
              @TestMetadata("1.9.kt")
              public void test1_9() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/built-in-types-and-their-semantics/kotlin.nothing-1/p-1/pos/1.9.kt");
              }

              @Test
              public void testAllFilesPresentInPos() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/built-in-types-and-their-semantics/kotlin.nothing-1/p-1/pos"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
              }
            }
          }
        }

        @Nested
        @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/built-in-types-and-their-semantics/kotlin.unit")
        @TestDataPath("$PROJECT_ROOT")
        public class Kotlin_unit {
          @Test
          public void testAllFilesPresentInKotlin_unit() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/built-in-types-and-their-semantics/kotlin.unit"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/built-in-types-and-their-semantics/kotlin.unit/p-1")
          @TestDataPath("$PROJECT_ROOT")
          public class P_1 {
            @Test
            public void testAllFilesPresentInP_1() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/built-in-types-and-their-semantics/kotlin.unit/p-1"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }

            @Nested
            @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/built-in-types-and-their-semantics/kotlin.unit/p-1/pos")
            @TestDataPath("$PROJECT_ROOT")
            public class Pos {
              @Test
              @TestMetadata("1.1.kt")
              public void test1_1() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/built-in-types-and-their-semantics/kotlin.unit/p-1/pos/1.1.kt");
              }

              @Test
              public void testAllFilesPresentInPos() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/built-in-types-and-their-semantics/kotlin.unit/p-1/pos"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
              }
            }
          }
        }
      }

      @Nested
      @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/cast-expression")
      @TestDataPath("$PROJECT_ROOT")
      public class Cast_expression {
        @Test
        public void testAllFilesPresentInCast_expression() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/cast-expression"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @Nested
        @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/cast-expression/p-1")
        @TestDataPath("$PROJECT_ROOT")
        public class P_1 {
          @Test
          public void testAllFilesPresentInP_1() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/cast-expression/p-1"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/cast-expression/p-1/pos")
          @TestDataPath("$PROJECT_ROOT")
          public class Pos {
            @Test
            @TestMetadata("1.1.kt")
            public void test1_1() {
              runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/cast-expression/p-1/pos/1.1.kt");
            }

            @Test
            public void testAllFilesPresentInPos() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/cast-expression/p-1/pos"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }
          }
        }
      }

      @Nested
      @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/comparison-expressions")
      @TestDataPath("$PROJECT_ROOT")
      public class Comparison_expressions {
        @Test
        public void testAllFilesPresentInComparison_expressions() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/comparison-expressions"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @Nested
        @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/comparison-expressions/p-1")
        @TestDataPath("$PROJECT_ROOT")
        public class P_1 {
          @Test
          public void testAllFilesPresentInP_1() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/comparison-expressions/p-1"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/comparison-expressions/p-1/pos")
          @TestDataPath("$PROJECT_ROOT")
          public class Pos {
            @Test
            @TestMetadata("2.1.kt")
            public void test2_1() {
              runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/comparison-expressions/p-1/pos/2.1.kt");
            }

            @Test
            @TestMetadata("2.2.kt")
            public void test2_2() {
              runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/comparison-expressions/p-1/pos/2.2.kt");
            }

            @Test
            @TestMetadata("2.3.kt")
            public void test2_3() {
              runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/comparison-expressions/p-1/pos/2.3.kt");
            }

            @Test
            @TestMetadata("2.4.kt")
            public void test2_4() {
              runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/comparison-expressions/p-1/pos/2.4.kt");
            }

            @Test
            public void testAllFilesPresentInPos() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/comparison-expressions/p-1/pos"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }
          }
        }
      }

      @Nested
      @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/conditional-expression")
      @TestDataPath("$PROJECT_ROOT")
      public class Conditional_expression {
        @Test
        public void testAllFilesPresentInConditional_expression() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/conditional-expression"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @Nested
        @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/conditional-expression/p-1")
        @TestDataPath("$PROJECT_ROOT")
        public class P_1 {
          @Test
          public void testAllFilesPresentInP_1() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/conditional-expression/p-1"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/conditional-expression/p-1/pos")
          @TestDataPath("$PROJECT_ROOT")
          public class Pos {
            @Test
            @TestMetadata("2.1.kt")
            public void test2_1() {
              runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/conditional-expression/p-1/pos/2.1.kt");
            }

            @Test
            @TestMetadata("2.2.kt")
            public void test2_2() {
              runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/conditional-expression/p-1/pos/2.2.kt");
            }

            @Test
            @TestMetadata("2.3.kt")
            public void test2_3() {
              runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/conditional-expression/p-1/pos/2.3.kt");
            }

            @Test
            @TestMetadata("2.4.kt")
            public void test2_4() {
              runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/conditional-expression/p-1/pos/2.4.kt");
            }

            @Test
            @TestMetadata("2.5.kt")
            public void test2_5() {
              runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/conditional-expression/p-1/pos/2.5.kt");
            }

            @Test
            @TestMetadata("2.6.kt")
            public void test2_6() {
              runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/conditional-expression/p-1/pos/2.6.kt");
            }

            @Test
            @TestMetadata("2.7.kt")
            public void test2_7() {
              runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/conditional-expression/p-1/pos/2.7.kt");
            }

            @Test
            @TestMetadata("2.8.kt")
            public void test2_8() {
              runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/conditional-expression/p-1/pos/2.8.kt");
            }

            @Test
            public void testAllFilesPresentInPos() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/conditional-expression/p-1/pos"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }
          }
        }

        @Nested
        @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/conditional-expression/p-2")
        @TestDataPath("$PROJECT_ROOT")
        public class P_2 {
          @Test
          public void testAllFilesPresentInP_2() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/conditional-expression/p-2"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/conditional-expression/p-2/pos")
          @TestDataPath("$PROJECT_ROOT")
          public class Pos {
            @Test
            @TestMetadata("1.1.kt")
            public void test1_1() {
              runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/conditional-expression/p-2/pos/1.1.kt");
            }

            @Test
            public void testAllFilesPresentInPos() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/conditional-expression/p-2/pos"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }
          }
        }

        @Nested
        @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/conditional-expression/p-6")
        @TestDataPath("$PROJECT_ROOT")
        public class P_6 {
          @Test
          public void testAllFilesPresentInP_6() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/conditional-expression/p-6"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/conditional-expression/p-6/pos")
          @TestDataPath("$PROJECT_ROOT")
          public class Pos {
            @Test
            @TestMetadata("1.1.kt")
            public void test1_1() {
              runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/conditional-expression/p-6/pos/1.1.kt");
            }

            @Test
            public void testAllFilesPresentInPos() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/conditional-expression/p-6/pos"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }
          }
        }
      }

      @Nested
      @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals")
      @TestDataPath("$PROJECT_ROOT")
      public class Constant_literals {
        @Test
        public void testAllFilesPresentInConstant_literals() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @Nested
        @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/boolean-literals")
        @TestDataPath("$PROJECT_ROOT")
        public class Boolean_literals {
          @Test
          public void testAllFilesPresentInBoolean_literals() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/boolean-literals"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/boolean-literals/p-1")
          @TestDataPath("$PROJECT_ROOT")
          public class P_1 {
            @Test
            public void testAllFilesPresentInP_1() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/boolean-literals/p-1"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }

            @Nested
            @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/boolean-literals/p-1/pos")
            @TestDataPath("$PROJECT_ROOT")
            public class Pos {
              @Test
              @TestMetadata("2.1.kt")
              public void test2_1() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/boolean-literals/p-1/pos/2.1.kt");
              }

              @Test
              @TestMetadata("2.10.kt")
              public void test2_10() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/boolean-literals/p-1/pos/2.10.kt");
              }

              @Test
              @TestMetadata("2.11.kt")
              public void test2_11() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/boolean-literals/p-1/pos/2.11.kt");
              }

              @Test
              @TestMetadata("2.12.kt")
              public void test2_12() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/boolean-literals/p-1/pos/2.12.kt");
              }

              @Test
              @TestMetadata("2.13.kt")
              public void test2_13() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/boolean-literals/p-1/pos/2.13.kt");
              }

              @Test
              @TestMetadata("2.14.kt")
              public void test2_14() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/boolean-literals/p-1/pos/2.14.kt");
              }

              @Test
              @TestMetadata("2.15.kt")
              public void test2_15() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/boolean-literals/p-1/pos/2.15.kt");
              }

              @Test
              @TestMetadata("2.16.kt")
              public void test2_16() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/boolean-literals/p-1/pos/2.16.kt");
              }

              @Test
              @TestMetadata("2.17.kt")
              public void test2_17() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/boolean-literals/p-1/pos/2.17.kt");
              }

              @Test
              @TestMetadata("2.18.kt")
              public void test2_18() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/boolean-literals/p-1/pos/2.18.kt");
              }

              @Test
              @TestMetadata("2.19.kt")
              public void test2_19() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/boolean-literals/p-1/pos/2.19.kt");
              }

              @Test
              @TestMetadata("2.2.kt")
              public void test2_2() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/boolean-literals/p-1/pos/2.2.kt");
              }

              @Test
              @TestMetadata("2.20.kt")
              public void test2_20() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/boolean-literals/p-1/pos/2.20.kt");
              }

              @Test
              @TestMetadata("2.21.kt")
              public void test2_21() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/boolean-literals/p-1/pos/2.21.kt");
              }

              @Test
              @TestMetadata("2.22.kt")
              public void test2_22() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/boolean-literals/p-1/pos/2.22.kt");
              }

              @Test
              @TestMetadata("2.23.kt")
              public void test2_23() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/boolean-literals/p-1/pos/2.23.kt");
              }

              @Test
              @TestMetadata("2.24.kt")
              public void test2_24() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/boolean-literals/p-1/pos/2.24.kt");
              }

              @Test
              @TestMetadata("2.25.kt")
              public void test2_25() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/boolean-literals/p-1/pos/2.25.kt");
              }

              @Test
              @TestMetadata("2.26.kt")
              public void test2_26() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/boolean-literals/p-1/pos/2.26.kt");
              }

              @Test
              @TestMetadata("2.3.kt")
              public void test2_3() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/boolean-literals/p-1/pos/2.3.kt");
              }

              @Test
              @TestMetadata("2.4.kt")
              public void test2_4() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/boolean-literals/p-1/pos/2.4.kt");
              }

              @Test
              @TestMetadata("2.5.kt")
              public void test2_5() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/boolean-literals/p-1/pos/2.5.kt");
              }

              @Test
              @TestMetadata("2.6.kt")
              public void test2_6() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/boolean-literals/p-1/pos/2.6.kt");
              }

              @Test
              @TestMetadata("2.7.kt")
              public void test2_7() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/boolean-literals/p-1/pos/2.7.kt");
              }

              @Test
              @TestMetadata("2.8.kt")
              public void test2_8() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/boolean-literals/p-1/pos/2.8.kt");
              }

              @Test
              @TestMetadata("2.9.kt")
              public void test2_9() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/boolean-literals/p-1/pos/2.9.kt");
              }

              @Test
              public void testAllFilesPresentInPos() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/boolean-literals/p-1/pos"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
              }
            }
          }
        }

        @Nested
        @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/character-literals")
        @TestDataPath("$PROJECT_ROOT")
        public class Character_literals {
          @Test
          public void testAllFilesPresentInCharacter_literals() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/character-literals"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/character-literals/p-4")
          @TestDataPath("$PROJECT_ROOT")
          public class P_4 {
            @Test
            public void testAllFilesPresentInP_4() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/character-literals/p-4"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }

            @Nested
            @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/character-literals/p-4/pos")
            @TestDataPath("$PROJECT_ROOT")
            public class Pos {
              @Test
              @TestMetadata("2.1.kt")
              public void test2_1() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/character-literals/p-4/pos/2.1.kt");
              }

              @Test
              public void testAllFilesPresentInPos() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/character-literals/p-4/pos"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
              }
            }
          }
        }

        @Nested
        @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/integer-literals")
        @TestDataPath("$PROJECT_ROOT")
        public class Integer_literals {
          @Test
          public void testAllFilesPresentInInteger_literals() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/integer-literals"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/integer-literals/binary-integer-literals")
          @TestDataPath("$PROJECT_ROOT")
          public class Binary_integer_literals {
            @Test
            public void testAllFilesPresentInBinary_integer_literals() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/integer-literals/binary-integer-literals"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }

            @Nested
            @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/integer-literals/binary-integer-literals/p-1")
            @TestDataPath("$PROJECT_ROOT")
            public class P_1 {
              @Test
              public void testAllFilesPresentInP_1() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/integer-literals/binary-integer-literals/p-1"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
              }

              @Nested
              @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/integer-literals/binary-integer-literals/p-1/pos")
              @TestDataPath("$PROJECT_ROOT")
              public class Pos {
                @Test
                @TestMetadata("1.1.kt")
                public void test1_1() {
                  runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/integer-literals/binary-integer-literals/p-1/pos/1.1.kt");
                }

                @Test
                @TestMetadata("2.1.kt")
                public void test2_1() {
                  runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/integer-literals/binary-integer-literals/p-1/pos/2.1.kt");
                }

                @Test
                public void testAllFilesPresentInPos() {
                  KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/integer-literals/binary-integer-literals/p-1/pos"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
                }
              }
            }
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/integer-literals/decimal-integer-literals")
          @TestDataPath("$PROJECT_ROOT")
          public class Decimal_integer_literals {
            @Test
            public void testAllFilesPresentInDecimal_integer_literals() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/integer-literals/decimal-integer-literals"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }

            @Nested
            @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/integer-literals/decimal-integer-literals/p-1")
            @TestDataPath("$PROJECT_ROOT")
            public class P_1 {
              @Test
              public void testAllFilesPresentInP_1() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/integer-literals/decimal-integer-literals/p-1"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
              }

              @Nested
              @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/integer-literals/decimal-integer-literals/p-1/pos")
              @TestDataPath("$PROJECT_ROOT")
              public class Pos {
                @Test
                @TestMetadata("1.1.kt")
                public void test1_1() {
                  runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/integer-literals/decimal-integer-literals/p-1/pos/1.1.kt");
                }

                @Test
                @TestMetadata("2.1.kt")
                public void test2_1() {
                  runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/integer-literals/decimal-integer-literals/p-1/pos/2.1.kt");
                }

                @Test
                public void testAllFilesPresentInPos() {
                  KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/integer-literals/decimal-integer-literals/p-1/pos"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
                }
              }
            }
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/integer-literals/hexadecimal-integer-literals")
          @TestDataPath("$PROJECT_ROOT")
          public class Hexadecimal_integer_literals {
            @Test
            public void testAllFilesPresentInHexadecimal_integer_literals() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/integer-literals/hexadecimal-integer-literals"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }

            @Nested
            @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/integer-literals/hexadecimal-integer-literals/p-1")
            @TestDataPath("$PROJECT_ROOT")
            public class P_1 {
              @Test
              public void testAllFilesPresentInP_1() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/integer-literals/hexadecimal-integer-literals/p-1"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
              }

              @Nested
              @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/integer-literals/hexadecimal-integer-literals/p-1/pos")
              @TestDataPath("$PROJECT_ROOT")
              public class Pos {
                @Test
                @TestMetadata("1.1.kt")
                public void test1_1() {
                  runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/integer-literals/hexadecimal-integer-literals/p-1/pos/1.1.kt");
                }

                @Test
                @TestMetadata("2.1.kt")
                public void test2_1() {
                  runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/integer-literals/hexadecimal-integer-literals/p-1/pos/2.1.kt");
                }

                @Test
                public void testAllFilesPresentInPos() {
                  KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/integer-literals/hexadecimal-integer-literals/p-1/pos"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
                }
              }
            }
          }
        }

        @Nested
        @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/real-literals")
        @TestDataPath("$PROJECT_ROOT")
        public class Real_literals {
          @Test
          public void testAllFilesPresentInReal_literals() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/real-literals"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/real-literals/p-1")
          @TestDataPath("$PROJECT_ROOT")
          public class P_1 {
            @Test
            public void testAllFilesPresentInP_1() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/real-literals/p-1"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }

            @Nested
            @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/real-literals/p-1/pos")
            @TestDataPath("$PROJECT_ROOT")
            public class Pos {
              @Test
              @TestMetadata("1.1.kt")
              public void test1_1() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/real-literals/p-1/pos/1.1.kt");
              }

              @Test
              @TestMetadata("3.1.kt")
              public void test3_1() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/real-literals/p-1/pos/3.1.kt");
              }

              @Test
              public void testAllFilesPresentInPos() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/real-literals/p-1/pos"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
              }
            }
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/real-literals/p-2")
          @TestDataPath("$PROJECT_ROOT")
          public class P_2 {
            @Test
            public void testAllFilesPresentInP_2() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/real-literals/p-2"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }

            @Nested
            @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/real-literals/p-2/pos")
            @TestDataPath("$PROJECT_ROOT")
            public class Pos {
              @Test
              @TestMetadata("1.1.kt")
              public void test1_1() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/real-literals/p-2/pos/1.1.kt");
              }

              @Test
              @TestMetadata("1.2.kt")
              public void test1_2() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/real-literals/p-2/pos/1.2.kt");
              }

              @Test
              public void testAllFilesPresentInPos() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/real-literals/p-2/pos"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
              }
            }
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/real-literals/p-3")
          @TestDataPath("$PROJECT_ROOT")
          public class P_3 {
            @Test
            public void testAllFilesPresentInP_3() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/real-literals/p-3"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }

            @Nested
            @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/real-literals/p-3/pos")
            @TestDataPath("$PROJECT_ROOT")
            public class Pos {
              @Test
              @TestMetadata("1.1.kt")
              public void test1_1() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/real-literals/p-3/pos/1.1.kt");
              }

              @Test
              @TestMetadata("1.2.kt")
              public void test1_2() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/real-literals/p-3/pos/1.2.kt");
              }

              @Test
              @TestMetadata("1.3.kt")
              public void test1_3() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/real-literals/p-3/pos/1.3.kt");
              }

              @Test
              @TestMetadata("1.4.kt")
              public void test1_4() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/real-literals/p-3/pos/1.4.kt");
              }

              @Test
              @TestMetadata("2.1.kt")
              public void test2_1() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/real-literals/p-3/pos/2.1.kt");
              }

              @Test
              @TestMetadata("2.2.kt")
              public void test2_2() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/real-literals/p-3/pos/2.2.kt");
              }

              @Test
              @TestMetadata("2.3.kt")
              public void test2_3() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/real-literals/p-3/pos/2.3.kt");
              }

              @Test
              public void testAllFilesPresentInPos() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/real-literals/p-3/pos"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
              }
            }
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/real-literals/p-4")
          @TestDataPath("$PROJECT_ROOT")
          public class P_4 {
            @Test
            public void testAllFilesPresentInP_4() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/real-literals/p-4"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }

            @Nested
            @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/real-literals/p-4/pos")
            @TestDataPath("$PROJECT_ROOT")
            public class Pos {
              @Test
              @TestMetadata("1.1.kt")
              public void test1_1() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/real-literals/p-4/pos/1.1.kt");
              }

              @Test
              @TestMetadata("1.2.kt")
              public void test1_2() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/real-literals/p-4/pos/1.2.kt");
              }

              @Test
              @TestMetadata("1.3.kt")
              public void test1_3() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/real-literals/p-4/pos/1.3.kt");
              }

              @Test
              @TestMetadata("1.4.kt")
              public void test1_4() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/real-literals/p-4/pos/1.4.kt");
              }

              @Test
              @TestMetadata("1.5.kt")
              public void test1_5() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/real-literals/p-4/pos/1.5.kt");
              }

              @Test
              public void testAllFilesPresentInPos() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/real-literals/p-4/pos"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
              }
            }
          }
        }

        @Nested
        @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/the-types-for-integer-literals")
        @TestDataPath("$PROJECT_ROOT")
        public class The_types_for_integer_literals {
          @Test
          public void testAllFilesPresentInThe_types_for_integer_literals() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/the-types-for-integer-literals"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/the-types-for-integer-literals/p-1")
          @TestDataPath("$PROJECT_ROOT")
          public class P_1 {
            @Test
            public void testAllFilesPresentInP_1() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/the-types-for-integer-literals/p-1"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }

            @Nested
            @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/the-types-for-integer-literals/p-1/pos")
            @TestDataPath("$PROJECT_ROOT")
            public class Pos {
              @Test
              @TestMetadata("1.1.kt")
              public void test1_1() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/the-types-for-integer-literals/p-1/pos/1.1.kt");
              }

              @Test
              @TestMetadata("1.2.kt")
              public void test1_2() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/the-types-for-integer-literals/p-1/pos/1.2.kt");
              }

              @Test
              @TestMetadata("1.3.kt")
              public void test1_3() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/the-types-for-integer-literals/p-1/pos/1.3.kt");
              }

              @Test
              public void testAllFilesPresentInPos() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/constant-literals/the-types-for-integer-literals/p-1/pos"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
              }
            }
          }
        }
      }

      @Nested
      @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/elvis-operator-expression")
      @TestDataPath("$PROJECT_ROOT")
      public class Elvis_operator_expression {
        @Test
        public void testAllFilesPresentInElvis_operator_expression() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/elvis-operator-expression"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @Nested
        @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/elvis-operator-expression/p-1")
        @TestDataPath("$PROJECT_ROOT")
        public class P_1 {
          @Test
          public void testAllFilesPresentInP_1() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/elvis-operator-expression/p-1"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/elvis-operator-expression/p-1/pos")
          @TestDataPath("$PROJECT_ROOT")
          public class Pos {
            @Test
            @TestMetadata("2.1.kt")
            public void test2_1() {
              runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/elvis-operator-expression/p-1/pos/2.1.kt");
            }

            @Test
            public void testAllFilesPresentInPos() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/elvis-operator-expression/p-1/pos"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }
          }
        }
      }

      @Nested
      @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/equality-expressions")
      @TestDataPath("$PROJECT_ROOT")
      public class Equality_expressions {
        @Test
        public void testAllFilesPresentInEquality_expressions() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/equality-expressions"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @Nested
        @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/equality-expressions/reference-equality-expressions")
        @TestDataPath("$PROJECT_ROOT")
        public class Reference_equality_expressions {
          @Test
          public void testAllFilesPresentInReference_equality_expressions() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/equality-expressions/reference-equality-expressions"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/equality-expressions/reference-equality-expressions/p-1")
          @TestDataPath("$PROJECT_ROOT")
          public class P_1 {
            @Test
            public void testAllFilesPresentInP_1() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/equality-expressions/reference-equality-expressions/p-1"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }

            @Nested
            @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/equality-expressions/reference-equality-expressions/p-1/pos")
            @TestDataPath("$PROJECT_ROOT")
            public class Pos {
              @Test
              @TestMetadata("2.1.kt")
              public void test2_1() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/equality-expressions/reference-equality-expressions/p-1/pos/2.1.kt");
              }

              @Test
              @TestMetadata("2.2.kt")
              public void test2_2() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/equality-expressions/reference-equality-expressions/p-1/pos/2.2.kt");
              }

              @Test
              @TestMetadata("2.3.kt")
              public void test2_3() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/equality-expressions/reference-equality-expressions/p-1/pos/2.3.kt");
              }

              @Test
              @TestMetadata("2.4.kt")
              public void test2_4() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/equality-expressions/reference-equality-expressions/p-1/pos/2.4.kt");
              }

              @Test
              @TestMetadata("2.5.kt")
              public void test2_5() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/equality-expressions/reference-equality-expressions/p-1/pos/2.5.kt");
              }

              @Test
              @TestMetadata("3.1.kt")
              public void test3_1() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/equality-expressions/reference-equality-expressions/p-1/pos/3.1.kt");
              }

              @Test
              public void testAllFilesPresentInPos() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/equality-expressions/reference-equality-expressions/p-1/pos"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
              }
            }
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/equality-expressions/reference-equality-expressions/p-3")
          @TestDataPath("$PROJECT_ROOT")
          public class P_3 {
            @Test
            public void testAllFilesPresentInP_3() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/equality-expressions/reference-equality-expressions/p-3"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }

            @Nested
            @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/equality-expressions/reference-equality-expressions/p-3/pos")
            @TestDataPath("$PROJECT_ROOT")
            public class Pos {
              @Test
              @TestMetadata("1.1.kt")
              public void test1_1() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/equality-expressions/reference-equality-expressions/p-3/pos/1.1.kt");
              }

              @Test
              @TestMetadata("2.1.kt")
              public void test2_1() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/equality-expressions/reference-equality-expressions/p-3/pos/2.1.kt");
              }

              @Test
              @TestMetadata("2.2.kt")
              public void test2_2() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/equality-expressions/reference-equality-expressions/p-3/pos/2.2.kt");
              }

              @Test
              public void testAllFilesPresentInPos() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/equality-expressions/reference-equality-expressions/p-3/pos"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
              }
            }
          }
        }

        @Nested
        @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/equality-expressions/value-equality-expressions")
        @TestDataPath("$PROJECT_ROOT")
        public class Value_equality_expressions {
          @Test
          public void testAllFilesPresentInValue_equality_expressions() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/equality-expressions/value-equality-expressions"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/equality-expressions/value-equality-expressions/p-2")
          @TestDataPath("$PROJECT_ROOT")
          public class P_2 {
            @Test
            public void testAllFilesPresentInP_2() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/equality-expressions/value-equality-expressions/p-2"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }

            @Nested
            @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/equality-expressions/value-equality-expressions/p-2/pos")
            @TestDataPath("$PROJECT_ROOT")
            public class Pos {
              @Test
              @TestMetadata("1.1.kt")
              public void test1_1() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/equality-expressions/value-equality-expressions/p-2/pos/1.1.kt");
              }

              @Test
              @TestMetadata("1.2.kt")
              public void test1_2() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/equality-expressions/value-equality-expressions/p-2/pos/1.2.kt");
              }

              @Test
              @TestMetadata("1.3.kt")
              public void test1_3() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/equality-expressions/value-equality-expressions/p-2/pos/1.3.kt");
              }

              @Test
              @TestMetadata("1.4.kt")
              public void test1_4() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/equality-expressions/value-equality-expressions/p-2/pos/1.4.kt");
              }

              @Test
              @TestMetadata("1.5.kt")
              public void test1_5() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/equality-expressions/value-equality-expressions/p-2/pos/1.5.kt");
              }

              @Test
              @TestMetadata("2.1.kt")
              public void test2_1() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/equality-expressions/value-equality-expressions/p-2/pos/2.1.kt");
              }

              @Test
              @TestMetadata("2.2.kt")
              public void test2_2() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/equality-expressions/value-equality-expressions/p-2/pos/2.2.kt");
              }

              @Test
              @TestMetadata("2.3.kt")
              public void test2_3() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/equality-expressions/value-equality-expressions/p-2/pos/2.3.kt");
              }

              @Test
              @TestMetadata("2.4.kt")
              public void test2_4() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/equality-expressions/value-equality-expressions/p-2/pos/2.4.kt");
              }

              @Test
              @TestMetadata("2.5.kt")
              public void test2_5() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/equality-expressions/value-equality-expressions/p-2/pos/2.5.kt");
              }

              @Test
              public void testAllFilesPresentInPos() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/equality-expressions/value-equality-expressions/p-2/pos"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
              }
            }
          }
        }
      }

      @Nested
      @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/indexing-expressions")
      @TestDataPath("$PROJECT_ROOT")
      public class Indexing_expressions {
        @Test
        public void testAllFilesPresentInIndexing_expressions() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/indexing-expressions"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @Nested
        @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/indexing-expressions/p-3")
        @TestDataPath("$PROJECT_ROOT")
        public class P_3 {
          @Test
          public void testAllFilesPresentInP_3() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/indexing-expressions/p-3"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/indexing-expressions/p-3/pos")
          @TestDataPath("$PROJECT_ROOT")
          public class Pos {
            @Test
            @TestMetadata("1.1.kt")
            public void test1_1() {
              runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/indexing-expressions/p-3/pos/1.1.kt");
            }

            @Test
            @TestMetadata("1.2.kt")
            public void test1_2() {
              runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/indexing-expressions/p-3/pos/1.2.kt");
            }

            @Test
            @TestMetadata("1.3.kt")
            public void test1_3() {
              runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/indexing-expressions/p-3/pos/1.3.kt");
            }

            @Test
            @TestMetadata("1.4.kt")
            public void test1_4() {
              runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/indexing-expressions/p-3/pos/1.4.kt");
            }

            @Test
            @TestMetadata("1.5.kt")
            public void test1_5() {
              runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/indexing-expressions/p-3/pos/1.5.kt");
            }

            @Test
            public void testAllFilesPresentInPos() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/indexing-expressions/p-3/pos"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }
          }
        }
      }

      @Nested
      @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/jump-expressions")
      @TestDataPath("$PROJECT_ROOT")
      public class Jump_expressions {
        @Test
        public void testAllFilesPresentInJump_expressions() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/jump-expressions"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @Nested
        @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/jump-expressions/break-expression")
        @TestDataPath("$PROJECT_ROOT")
        public class Break_expression {
          @Test
          public void testAllFilesPresentInBreak_expression() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/jump-expressions/break-expression"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/jump-expressions/break-expression/p-3")
          @TestDataPath("$PROJECT_ROOT")
          public class P_3 {
            @Test
            public void testAllFilesPresentInP_3() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/jump-expressions/break-expression/p-3"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }

            @Nested
            @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/jump-expressions/break-expression/p-3/pos")
            @TestDataPath("$PROJECT_ROOT")
            public class Pos {
              @Test
              @TestMetadata("1.1.kt")
              public void test1_1() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/jump-expressions/break-expression/p-3/pos/1.1.kt");
              }

              @Test
              @TestMetadata("1.2.kt")
              public void test1_2() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/jump-expressions/break-expression/p-3/pos/1.2.kt");
              }

              @Test
              @TestMetadata("2.1.kt")
              public void test2_1() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/jump-expressions/break-expression/p-3/pos/2.1.kt");
              }

              @Test
              @TestMetadata("2.2.kt")
              public void test2_2() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/jump-expressions/break-expression/p-3/pos/2.2.kt");
              }

              @Test
              public void testAllFilesPresentInPos() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/jump-expressions/break-expression/p-3/pos"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
              }
            }
          }
        }

        @Nested
        @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/jump-expressions/continue-expression")
        @TestDataPath("$PROJECT_ROOT")
        public class Continue_expression {
          @Test
          public void testAllFilesPresentInContinue_expression() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/jump-expressions/continue-expression"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/jump-expressions/continue-expression/p-3")
          @TestDataPath("$PROJECT_ROOT")
          public class P_3 {
            @Test
            public void testAllFilesPresentInP_3() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/jump-expressions/continue-expression/p-3"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }

            @Nested
            @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/jump-expressions/continue-expression/p-3/pos")
            @TestDataPath("$PROJECT_ROOT")
            public class Pos {
              @Test
              @TestMetadata("1.1.kt")
              public void test1_1() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/jump-expressions/continue-expression/p-3/pos/1.1.kt");
              }

              @Test
              @TestMetadata("1.2.kt")
              public void test1_2() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/jump-expressions/continue-expression/p-3/pos/1.2.kt");
              }

              @Test
              @TestMetadata("2.1.kt")
              public void test2_1() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/jump-expressions/continue-expression/p-3/pos/2.1.kt");
              }

              @Test
              @TestMetadata("2.2.kt")
              public void test2_2() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/jump-expressions/continue-expression/p-3/pos/2.2.kt");
              }

              @Test
              public void testAllFilesPresentInPos() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/jump-expressions/continue-expression/p-3/pos"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
              }
            }
          }
        }

        @Nested
        @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/jump-expressions/return-expressions")
        @TestDataPath("$PROJECT_ROOT")
        public class Return_expressions {
          @Test
          public void testAllFilesPresentInReturn_expressions() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/jump-expressions/return-expressions"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/jump-expressions/return-expressions/p-1")
          @TestDataPath("$PROJECT_ROOT")
          public class P_1 {
            @Test
            public void testAllFilesPresentInP_1() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/jump-expressions/return-expressions/p-1"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }

            @Nested
            @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/jump-expressions/return-expressions/p-1/pos")
            @TestDataPath("$PROJECT_ROOT")
            public class Pos {
              @Test
              @TestMetadata("1.1.kt")
              public void test1_1() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/jump-expressions/return-expressions/p-1/pos/1.1.kt");
              }

              @Test
              @TestMetadata("1.2.kt")
              public void test1_2() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/jump-expressions/return-expressions/p-1/pos/1.2.kt");
              }

              @Test
              @TestMetadata("1.3.kt")
              public void test1_3() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/jump-expressions/return-expressions/p-1/pos/1.3.kt");
              }

              @Test
              public void testAllFilesPresentInPos() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/jump-expressions/return-expressions/p-1/pos"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
              }
            }
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/jump-expressions/return-expressions/p-3")
          @TestDataPath("$PROJECT_ROOT")
          public class P_3 {
            @Test
            public void testAllFilesPresentInP_3() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/jump-expressions/return-expressions/p-3"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }

            @Nested
            @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/jump-expressions/return-expressions/p-3/pos")
            @TestDataPath("$PROJECT_ROOT")
            public class Pos {
              @Test
              @TestMetadata("2.1.kt")
              public void test2_1() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/jump-expressions/return-expressions/p-3/pos/2.1.kt");
              }

              @Test
              @TestMetadata("3.1.kt")
              public void test3_1() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/jump-expressions/return-expressions/p-3/pos/3.1.kt");
              }

              @Test
              public void testAllFilesPresentInPos() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/jump-expressions/return-expressions/p-3/pos"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
              }
            }
          }
        }
      }

      @Nested
      @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/logical-conjunction-expression")
      @TestDataPath("$PROJECT_ROOT")
      public class Logical_conjunction_expression {
        @Test
        public void testAllFilesPresentInLogical_conjunction_expression() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/logical-conjunction-expression"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @Nested
        @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/logical-conjunction-expression/p-1")
        @TestDataPath("$PROJECT_ROOT")
        public class P_1 {
          @Test
          public void testAllFilesPresentInP_1() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/logical-conjunction-expression/p-1"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/logical-conjunction-expression/p-1/pos")
          @TestDataPath("$PROJECT_ROOT")
          public class Pos {
            @Test
            @TestMetadata("2.1.kt")
            public void test2_1() {
              runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/logical-conjunction-expression/p-1/pos/2.1.kt");
            }

            @Test
            @TestMetadata("2.2.kt")
            public void test2_2() {
              runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/logical-conjunction-expression/p-1/pos/2.2.kt");
            }

            @Test
            @TestMetadata("2.3.kt")
            public void test2_3() {
              runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/logical-conjunction-expression/p-1/pos/2.3.kt");
            }

            @Test
            public void testAllFilesPresentInPos() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/logical-conjunction-expression/p-1/pos"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }
          }
        }
      }

      @Nested
      @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/logical-disjunction-expression")
      @TestDataPath("$PROJECT_ROOT")
      public class Logical_disjunction_expression {
        @Test
        public void testAllFilesPresentInLogical_disjunction_expression() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/logical-disjunction-expression"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @Nested
        @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/logical-disjunction-expression/p-1")
        @TestDataPath("$PROJECT_ROOT")
        public class P_1 {
          @Test
          public void testAllFilesPresentInP_1() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/logical-disjunction-expression/p-1"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/logical-disjunction-expression/p-1/pos")
          @TestDataPath("$PROJECT_ROOT")
          public class Pos {
            @Test
            @TestMetadata("2.1.kt")
            public void test2_1() {
              runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/logical-disjunction-expression/p-1/pos/2.1.kt");
            }

            @Test
            @TestMetadata("2.2.kt")
            public void test2_2() {
              runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/logical-disjunction-expression/p-1/pos/2.2.kt");
            }

            @Test
            @TestMetadata("2.3.kt")
            public void test2_3() {
              runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/logical-disjunction-expression/p-1/pos/2.3.kt");
            }

            @Test
            public void testAllFilesPresentInPos() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/logical-disjunction-expression/p-1/pos"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }
          }
        }
      }

      @Nested
      @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/multiplicative-expression")
      @TestDataPath("$PROJECT_ROOT")
      public class Multiplicative_expression {
        @Test
        public void testAllFilesPresentInMultiplicative_expression() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/multiplicative-expression"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @Nested
        @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/multiplicative-expression/p-2")
        @TestDataPath("$PROJECT_ROOT")
        public class P_2 {
          @Test
          public void testAllFilesPresentInP_2() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/multiplicative-expression/p-2"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/multiplicative-expression/p-2/pos")
          @TestDataPath("$PROJECT_ROOT")
          public class Pos {
            @Test
            @TestMetadata("1.1.kt")
            public void test1_1() {
              runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/multiplicative-expression/p-2/pos/1.1.kt");
            }

            @Test
            @TestMetadata("2.1.kt")
            public void test2_1() {
              runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/multiplicative-expression/p-2/pos/2.1.kt");
            }

            @Test
            @TestMetadata("3.1.kt")
            public void test3_1() {
              runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/multiplicative-expression/p-2/pos/3.1.kt");
            }

            @Test
            public void testAllFilesPresentInPos() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/multiplicative-expression/p-2/pos"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }
          }
        }
      }

      @Nested
      @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/not-null-assertion-expression")
      @TestDataPath("$PROJECT_ROOT")
      public class Not_null_assertion_expression {
        @Test
        public void testAllFilesPresentInNot_null_assertion_expression() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/not-null-assertion-expression"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @Nested
        @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/not-null-assertion-expression/p-2")
        @TestDataPath("$PROJECT_ROOT")
        public class P_2 {
          @Test
          public void testAllFilesPresentInP_2() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/not-null-assertion-expression/p-2"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/not-null-assertion-expression/p-2/pos")
          @TestDataPath("$PROJECT_ROOT")
          public class Pos {
            @Test
            @TestMetadata("2.1.kt")
            public void test2_1() {
              runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/not-null-assertion-expression/p-2/pos/2.1.kt");
            }

            @Test
            @TestMetadata("2.2.kt")
            public void test2_2() {
              runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/not-null-assertion-expression/p-2/pos/2.2.kt");
            }

            @Test
            @TestMetadata("3.1.kt")
            public void test3_1() {
              runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/not-null-assertion-expression/p-2/pos/3.1.kt");
            }

            @Test
            public void testAllFilesPresentInPos() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/not-null-assertion-expression/p-2/pos"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }
          }
        }
      }

      @Nested
      @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/postfix-operator-expressions")
      @TestDataPath("$PROJECT_ROOT")
      public class Postfix_operator_expressions {
        @Test
        public void testAllFilesPresentInPostfix_operator_expressions() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/postfix-operator-expressions"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @Nested
        @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/postfix-operator-expressions/postfix-decrement-expression")
        @TestDataPath("$PROJECT_ROOT")
        public class Postfix_decrement_expression {
          @Test
          public void testAllFilesPresentInPostfix_decrement_expression() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/postfix-operator-expressions/postfix-decrement-expression"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/postfix-operator-expressions/postfix-decrement-expression/p-1")
          @TestDataPath("$PROJECT_ROOT")
          public class P_1 {
            @Test
            public void testAllFilesPresentInP_1() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/postfix-operator-expressions/postfix-decrement-expression/p-1"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }

            @Nested
            @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/postfix-operator-expressions/postfix-decrement-expression/p-1/pos")
            @TestDataPath("$PROJECT_ROOT")
            public class Pos {
              @Test
              @TestMetadata("1.1.kt")
              public void test1_1() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/postfix-operator-expressions/postfix-decrement-expression/p-1/pos/1.1.kt");
              }

              @Test
              @TestMetadata("1.2.kt")
              public void test1_2() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/postfix-operator-expressions/postfix-decrement-expression/p-1/pos/1.2.kt");
              }

              @Test
              public void testAllFilesPresentInPos() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/postfix-operator-expressions/postfix-decrement-expression/p-1/pos"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
              }
            }
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/postfix-operator-expressions/postfix-decrement-expression/p-4")
          @TestDataPath("$PROJECT_ROOT")
          public class P_4 {
            @Test
            public void testAllFilesPresentInP_4() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/postfix-operator-expressions/postfix-decrement-expression/p-4"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }

            @Nested
            @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/postfix-operator-expressions/postfix-decrement-expression/p-4/pos")
            @TestDataPath("$PROJECT_ROOT")
            public class Pos {
              @Test
              @TestMetadata("1.1.kt")
              public void test1_1() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/postfix-operator-expressions/postfix-decrement-expression/p-4/pos/1.1.kt");
              }

              @Test
              @TestMetadata("1.2.kt")
              public void test1_2() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/postfix-operator-expressions/postfix-decrement-expression/p-4/pos/1.2.kt");
              }

              @Test
              public void testAllFilesPresentInPos() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/postfix-operator-expressions/postfix-decrement-expression/p-4/pos"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
              }
            }
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/postfix-operator-expressions/postfix-decrement-expression/p-5")
          @TestDataPath("$PROJECT_ROOT")
          public class P_5 {
            @Test
            public void testAllFilesPresentInP_5() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/postfix-operator-expressions/postfix-decrement-expression/p-5"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }

            @Nested
            @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/postfix-operator-expressions/postfix-decrement-expression/p-5/pos")
            @TestDataPath("$PROJECT_ROOT")
            public class Pos {
              @Test
              @TestMetadata("1.1.kt")
              public void test1_1() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/postfix-operator-expressions/postfix-decrement-expression/p-5/pos/1.1.kt");
              }

              @Test
              public void testAllFilesPresentInPos() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/postfix-operator-expressions/postfix-decrement-expression/p-5/pos"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
              }
            }
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/postfix-operator-expressions/postfix-decrement-expression/p-6")
          @TestDataPath("$PROJECT_ROOT")
          public class P_6 {
            @Test
            public void testAllFilesPresentInP_6() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/postfix-operator-expressions/postfix-decrement-expression/p-6"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }

            @Nested
            @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/postfix-operator-expressions/postfix-decrement-expression/p-6/pos")
            @TestDataPath("$PROJECT_ROOT")
            public class Pos {
              @Test
              @TestMetadata("1.1.kt")
              public void test1_1() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/postfix-operator-expressions/postfix-decrement-expression/p-6/pos/1.1.kt");
              }

              @Test
              @TestMetadata("1.2.kt")
              public void test1_2() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/postfix-operator-expressions/postfix-decrement-expression/p-6/pos/1.2.kt");
              }

              @Test
              public void testAllFilesPresentInPos() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/postfix-operator-expressions/postfix-decrement-expression/p-6/pos"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
              }
            }
          }
        }

        @Nested
        @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/postfix-operator-expressions/postfix-increment-expression")
        @TestDataPath("$PROJECT_ROOT")
        public class Postfix_increment_expression {
          @Test
          public void testAllFilesPresentInPostfix_increment_expression() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/postfix-operator-expressions/postfix-increment-expression"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/postfix-operator-expressions/postfix-increment-expression/p-1")
          @TestDataPath("$PROJECT_ROOT")
          public class P_1 {
            @Test
            public void testAllFilesPresentInP_1() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/postfix-operator-expressions/postfix-increment-expression/p-1"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }

            @Nested
            @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/postfix-operator-expressions/postfix-increment-expression/p-1/pos")
            @TestDataPath("$PROJECT_ROOT")
            public class Pos {
              @Test
              @TestMetadata("1.1.kt")
              public void test1_1() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/postfix-operator-expressions/postfix-increment-expression/p-1/pos/1.1.kt");
              }

              @Test
              @TestMetadata("1.2.kt")
              public void test1_2() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/postfix-operator-expressions/postfix-increment-expression/p-1/pos/1.2.kt");
              }

              @Test
              public void testAllFilesPresentInPos() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/postfix-operator-expressions/postfix-increment-expression/p-1/pos"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
              }
            }
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/postfix-operator-expressions/postfix-increment-expression/p-4")
          @TestDataPath("$PROJECT_ROOT")
          public class P_4 {
            @Test
            public void testAllFilesPresentInP_4() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/postfix-operator-expressions/postfix-increment-expression/p-4"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }

            @Nested
            @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/postfix-operator-expressions/postfix-increment-expression/p-4/pos")
            @TestDataPath("$PROJECT_ROOT")
            public class Pos {
              @Test
              @TestMetadata("1.1.kt")
              public void test1_1() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/postfix-operator-expressions/postfix-increment-expression/p-4/pos/1.1.kt");
              }

              @Test
              @TestMetadata("1.2.kt")
              public void test1_2() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/postfix-operator-expressions/postfix-increment-expression/p-4/pos/1.2.kt");
              }

              @Test
              public void testAllFilesPresentInPos() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/postfix-operator-expressions/postfix-increment-expression/p-4/pos"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
              }
            }
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/postfix-operator-expressions/postfix-increment-expression/p-5")
          @TestDataPath("$PROJECT_ROOT")
          public class P_5 {
            @Test
            public void testAllFilesPresentInP_5() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/postfix-operator-expressions/postfix-increment-expression/p-5"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }

            @Nested
            @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/postfix-operator-expressions/postfix-increment-expression/p-5/pos")
            @TestDataPath("$PROJECT_ROOT")
            public class Pos {
              @Test
              @TestMetadata("1.1.kt")
              public void test1_1() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/postfix-operator-expressions/postfix-increment-expression/p-5/pos/1.1.kt");
              }

              @Test
              public void testAllFilesPresentInPos() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/postfix-operator-expressions/postfix-increment-expression/p-5/pos"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
              }
            }
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/postfix-operator-expressions/postfix-increment-expression/p-6")
          @TestDataPath("$PROJECT_ROOT")
          public class P_6 {
            @Test
            public void testAllFilesPresentInP_6() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/postfix-operator-expressions/postfix-increment-expression/p-6"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }

            @Nested
            @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/postfix-operator-expressions/postfix-increment-expression/p-6/pos")
            @TestDataPath("$PROJECT_ROOT")
            public class Pos {
              @Test
              @TestMetadata("1.1.kt")
              public void test1_1() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/postfix-operator-expressions/postfix-increment-expression/p-6/pos/1.1.kt");
              }

              @Test
              @TestMetadata("1.2.kt")
              public void test1_2() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/postfix-operator-expressions/postfix-increment-expression/p-6/pos/1.2.kt");
              }

              @Test
              public void testAllFilesPresentInPos() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/postfix-operator-expressions/postfix-increment-expression/p-6/pos"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
              }
            }
          }
        }
      }

      @Nested
      @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/prefix-expressions")
      @TestDataPath("$PROJECT_ROOT")
      public class Prefix_expressions {
        @Test
        public void testAllFilesPresentInPrefix_expressions() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/prefix-expressions"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @Nested
        @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/prefix-expressions/logical-not-expression")
        @TestDataPath("$PROJECT_ROOT")
        public class Logical_not_expression {
          @Test
          public void testAllFilesPresentInLogical_not_expression() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/prefix-expressions/logical-not-expression"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/prefix-expressions/logical-not-expression/p-2")
          @TestDataPath("$PROJECT_ROOT")
          public class P_2 {
            @Test
            public void testAllFilesPresentInP_2() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/prefix-expressions/logical-not-expression/p-2"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }

            @Nested
            @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/prefix-expressions/logical-not-expression/p-2/pos")
            @TestDataPath("$PROJECT_ROOT")
            public class Pos {
              @Test
              @TestMetadata("1.1.kt")
              public void test1_1() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/prefix-expressions/logical-not-expression/p-2/pos/1.1.kt");
              }

              @Test
              public void testAllFilesPresentInPos() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/prefix-expressions/logical-not-expression/p-2/pos"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
              }
            }
          }
        }

        @Nested
        @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/prefix-expressions/prefix-decrement-expression")
        @TestDataPath("$PROJECT_ROOT")
        public class Prefix_decrement_expression {
          @Test
          public void testAllFilesPresentInPrefix_decrement_expression() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/prefix-expressions/prefix-decrement-expression"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/prefix-expressions/prefix-decrement-expression/p-1")
          @TestDataPath("$PROJECT_ROOT")
          public class P_1 {
            @Test
            public void testAllFilesPresentInP_1() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/prefix-expressions/prefix-decrement-expression/p-1"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }

            @Nested
            @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/prefix-expressions/prefix-decrement-expression/p-1/pos")
            @TestDataPath("$PROJECT_ROOT")
            public class Pos {
              @Test
              @TestMetadata("1.1.kt")
              public void test1_1() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/prefix-expressions/prefix-decrement-expression/p-1/pos/1.1.kt");
              }

              @Test
              @TestMetadata("1.2.kt")
              public void test1_2() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/prefix-expressions/prefix-decrement-expression/p-1/pos/1.2.kt");
              }

              @Test
              public void testAllFilesPresentInPos() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/prefix-expressions/prefix-decrement-expression/p-1/pos"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
              }
            }
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/prefix-expressions/prefix-decrement-expression/p-4")
          @TestDataPath("$PROJECT_ROOT")
          public class P_4 {
            @Test
            public void testAllFilesPresentInP_4() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/prefix-expressions/prefix-decrement-expression/p-4"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }

            @Nested
            @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/prefix-expressions/prefix-decrement-expression/p-4/pos")
            @TestDataPath("$PROJECT_ROOT")
            public class Pos {
              @Test
              @TestMetadata("1.1.kt")
              public void test1_1() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/prefix-expressions/prefix-decrement-expression/p-4/pos/1.1.kt");
              }

              @Test
              @TestMetadata("1.2.kt")
              public void test1_2() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/prefix-expressions/prefix-decrement-expression/p-4/pos/1.2.kt");
              }

              @Test
              public void testAllFilesPresentInPos() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/prefix-expressions/prefix-decrement-expression/p-4/pos"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
              }
            }
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/prefix-expressions/prefix-decrement-expression/p-5")
          @TestDataPath("$PROJECT_ROOT")
          public class P_5 {
            @Test
            public void testAllFilesPresentInP_5() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/prefix-expressions/prefix-decrement-expression/p-5"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }

            @Nested
            @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/prefix-expressions/prefix-decrement-expression/p-5/pos")
            @TestDataPath("$PROJECT_ROOT")
            public class Pos {
              @Test
              @TestMetadata("1.1.kt")
              public void test1_1() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/prefix-expressions/prefix-decrement-expression/p-5/pos/1.1.kt");
              }

              @Test
              public void testAllFilesPresentInPos() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/prefix-expressions/prefix-decrement-expression/p-5/pos"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
              }
            }
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/prefix-expressions/prefix-decrement-expression/p-6")
          @TestDataPath("$PROJECT_ROOT")
          public class P_6 {
            @Test
            public void testAllFilesPresentInP_6() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/prefix-expressions/prefix-decrement-expression/p-6"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }

            @Nested
            @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/prefix-expressions/prefix-decrement-expression/p-6/pos")
            @TestDataPath("$PROJECT_ROOT")
            public class Pos {
              @Test
              @TestMetadata("1.1.kt")
              public void test1_1() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/prefix-expressions/prefix-decrement-expression/p-6/pos/1.1.kt");
              }

              @Test
              @TestMetadata("1.2.kt")
              public void test1_2() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/prefix-expressions/prefix-decrement-expression/p-6/pos/1.2.kt");
              }

              @Test
              public void testAllFilesPresentInPos() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/prefix-expressions/prefix-decrement-expression/p-6/pos"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
              }
            }
          }
        }

        @Nested
        @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/prefix-expressions/prefix-increment-expression")
        @TestDataPath("$PROJECT_ROOT")
        public class Prefix_increment_expression {
          @Test
          public void testAllFilesPresentInPrefix_increment_expression() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/prefix-expressions/prefix-increment-expression"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/prefix-expressions/prefix-increment-expression/p-1")
          @TestDataPath("$PROJECT_ROOT")
          public class P_1 {
            @Test
            public void testAllFilesPresentInP_1() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/prefix-expressions/prefix-increment-expression/p-1"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }

            @Nested
            @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/prefix-expressions/prefix-increment-expression/p-1/pos")
            @TestDataPath("$PROJECT_ROOT")
            public class Pos {
              @Test
              @TestMetadata("1.1.kt")
              public void test1_1() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/prefix-expressions/prefix-increment-expression/p-1/pos/1.1.kt");
              }

              @Test
              @TestMetadata("1.2.kt")
              public void test1_2() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/prefix-expressions/prefix-increment-expression/p-1/pos/1.2.kt");
              }

              @Test
              public void testAllFilesPresentInPos() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/prefix-expressions/prefix-increment-expression/p-1/pos"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
              }
            }
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/prefix-expressions/prefix-increment-expression/p-4")
          @TestDataPath("$PROJECT_ROOT")
          public class P_4 {
            @Test
            public void testAllFilesPresentInP_4() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/prefix-expressions/prefix-increment-expression/p-4"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }

            @Nested
            @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/prefix-expressions/prefix-increment-expression/p-4/pos")
            @TestDataPath("$PROJECT_ROOT")
            public class Pos {
              @Test
              @TestMetadata("1.1.kt")
              public void test1_1() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/prefix-expressions/prefix-increment-expression/p-4/pos/1.1.kt");
              }

              @Test
              @TestMetadata("1.2.kt")
              public void test1_2() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/prefix-expressions/prefix-increment-expression/p-4/pos/1.2.kt");
              }

              @Test
              public void testAllFilesPresentInPos() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/prefix-expressions/prefix-increment-expression/p-4/pos"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
              }
            }
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/prefix-expressions/prefix-increment-expression/p-5")
          @TestDataPath("$PROJECT_ROOT")
          public class P_5 {
            @Test
            public void testAllFilesPresentInP_5() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/prefix-expressions/prefix-increment-expression/p-5"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }

            @Nested
            @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/prefix-expressions/prefix-increment-expression/p-5/pos")
            @TestDataPath("$PROJECT_ROOT")
            public class Pos {
              @Test
              @TestMetadata("1.1.kt")
              public void test1_1() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/prefix-expressions/prefix-increment-expression/p-5/pos/1.1.kt");
              }

              @Test
              public void testAllFilesPresentInPos() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/prefix-expressions/prefix-increment-expression/p-5/pos"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
              }
            }
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/prefix-expressions/prefix-increment-expression/p-6")
          @TestDataPath("$PROJECT_ROOT")
          public class P_6 {
            @Test
            public void testAllFilesPresentInP_6() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/prefix-expressions/prefix-increment-expression/p-6"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }

            @Nested
            @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/prefix-expressions/prefix-increment-expression/p-6/pos")
            @TestDataPath("$PROJECT_ROOT")
            public class Pos {
              @Test
              @TestMetadata("1.1.kt")
              public void test1_1() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/prefix-expressions/prefix-increment-expression/p-6/pos/1.1.kt");
              }

              @Test
              @TestMetadata("1.2.kt")
              public void test1_2() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/prefix-expressions/prefix-increment-expression/p-6/pos/1.2.kt");
              }

              @Test
              public void testAllFilesPresentInPos() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/prefix-expressions/prefix-increment-expression/p-6/pos"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
              }
            }
          }
        }

        @Nested
        @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/prefix-expressions/unary-minus-expression")
        @TestDataPath("$PROJECT_ROOT")
        public class Unary_minus_expression {
          @Test
          public void testAllFilesPresentInUnary_minus_expression() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/prefix-expressions/unary-minus-expression"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/prefix-expressions/unary-minus-expression/p-2")
          @TestDataPath("$PROJECT_ROOT")
          public class P_2 {
            @Test
            public void testAllFilesPresentInP_2() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/prefix-expressions/unary-minus-expression/p-2"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }

            @Nested
            @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/prefix-expressions/unary-minus-expression/p-2/pos")
            @TestDataPath("$PROJECT_ROOT")
            public class Pos {
              @Test
              @TestMetadata("1.1.kt")
              public void test1_1() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/prefix-expressions/unary-minus-expression/p-2/pos/1.1.kt");
              }

              @Test
              public void testAllFilesPresentInPos() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/prefix-expressions/unary-minus-expression/p-2/pos"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
              }
            }
          }
        }

        @Nested
        @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/prefix-expressions/unary-plus-expression")
        @TestDataPath("$PROJECT_ROOT")
        public class Unary_plus_expression {
          @Test
          public void testAllFilesPresentInUnary_plus_expression() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/prefix-expressions/unary-plus-expression"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/prefix-expressions/unary-plus-expression/p-2")
          @TestDataPath("$PROJECT_ROOT")
          public class P_2 {
            @Test
            public void testAllFilesPresentInP_2() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/prefix-expressions/unary-plus-expression/p-2"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }

            @Nested
            @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/prefix-expressions/unary-plus-expression/p-2/pos")
            @TestDataPath("$PROJECT_ROOT")
            public class Pos {
              @Test
              @TestMetadata("1.1.kt")
              public void test1_1() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/prefix-expressions/unary-plus-expression/p-2/pos/1.1.kt");
              }

              @Test
              public void testAllFilesPresentInPos() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/prefix-expressions/unary-plus-expression/p-2/pos"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
              }
            }
          }
        }
      }

      @Nested
      @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/range-expression")
      @TestDataPath("$PROJECT_ROOT")
      public class Range_expression {
        @Test
        public void testAllFilesPresentInRange_expression() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/range-expression"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @Nested
        @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/range-expression/p-2")
        @TestDataPath("$PROJECT_ROOT")
        public class P_2 {
          @Test
          public void testAllFilesPresentInP_2() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/range-expression/p-2"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/range-expression/p-2/pos")
          @TestDataPath("$PROJECT_ROOT")
          public class Pos {
            @Test
            @TestMetadata("1.1.kt")
            public void test1_1() {
              runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/range-expression/p-2/pos/1.1.kt");
            }

            @Test
            public void testAllFilesPresentInPos() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/range-expression/p-2/pos"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }
          }
        }
      }

      @Nested
      @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/try-expression")
      @TestDataPath("$PROJECT_ROOT")
      public class Try_expression {
        @Test
        public void testAllFilesPresentInTry_expression() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/try-expression"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @Nested
        @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/try-expression/p-2")
        @TestDataPath("$PROJECT_ROOT")
        public class P_2 {
          @Test
          public void testAllFilesPresentInP_2() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/try-expression/p-2"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/try-expression/p-2/neg")
          @TestDataPath("$PROJECT_ROOT")
          public class Neg {
            @Test
            @TestMetadata("2.1.kt")
            public void test2_1() {
              runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/try-expression/p-2/neg/2.1.kt");
            }

            @Test
            public void testAllFilesPresentInNeg() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/try-expression/p-2/neg"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/try-expression/p-2/pos")
          @TestDataPath("$PROJECT_ROOT")
          public class Pos {
            @Test
            @TestMetadata("2.1.kt")
            public void test2_1() {
              runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/try-expression/p-2/pos/2.1.kt");
            }

            @Test
            @TestMetadata("2.2.kt")
            public void test2_2() {
              runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/try-expression/p-2/pos/2.2.kt");
            }

            @Test
            @TestMetadata("2.3.kt")
            public void test2_3() {
              runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/try-expression/p-2/pos/2.3.kt");
            }

            @Test
            @TestMetadata("3.1.kt")
            public void test3_1() {
              runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/try-expression/p-2/pos/3.1.kt");
            }

            @Test
            @TestMetadata("3.2.kt")
            public void test3_2() {
              runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/try-expression/p-2/pos/3.2.kt");
            }

            @Test
            public void testAllFilesPresentInPos() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/try-expression/p-2/pos"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }
          }
        }

        @Nested
        @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/try-expression/p-5")
        @TestDataPath("$PROJECT_ROOT")
        public class P_5 {
          @Test
          public void testAllFilesPresentInP_5() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/try-expression/p-5"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/try-expression/p-5/neg")
          @TestDataPath("$PROJECT_ROOT")
          public class Neg {
            @Test
            @TestMetadata("3.1.kt")
            public void test3_1() {
              runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/try-expression/p-5/neg/3.1.kt");
            }

            @Test
            public void testAllFilesPresentInNeg() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/try-expression/p-5/neg"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/try-expression/p-5/pos")
          @TestDataPath("$PROJECT_ROOT")
          public class Pos {
            @Test
            @TestMetadata("1.1.kt")
            public void test1_1() {
              runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/try-expression/p-5/pos/1.1.kt");
            }

            @Test
            @TestMetadata("2.1.kt")
            public void test2_1() {
              runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/try-expression/p-5/pos/2.1.kt");
            }

            @Test
            @TestMetadata("3.1.kt")
            public void test3_1() {
              runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/try-expression/p-5/pos/3.1.kt");
            }

            @Test
            public void testAllFilesPresentInPos() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/try-expression/p-5/pos"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }
          }
        }

        @Nested
        @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/try-expression/p-6")
        @TestDataPath("$PROJECT_ROOT")
        public class P_6 {
          @Test
          public void testAllFilesPresentInP_6() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/try-expression/p-6"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/try-expression/p-6/pos")
          @TestDataPath("$PROJECT_ROOT")
          public class Pos {
            @Test
            @TestMetadata("1.1.kt")
            public void test1_1() {
              runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/try-expression/p-6/pos/1.1.kt");
            }

            @Test
            public void testAllFilesPresentInPos() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/try-expression/p-6/pos"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }
          }
        }

        @Nested
        @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/try-expression/p-7")
        @TestDataPath("$PROJECT_ROOT")
        public class P_7 {
          @Test
          public void testAllFilesPresentInP_7() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/try-expression/p-7"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/try-expression/p-7/pos")
          @TestDataPath("$PROJECT_ROOT")
          public class Pos {
            @Test
            @TestMetadata("1.1.kt")
            public void test1_1() {
              runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/try-expression/p-7/pos/1.1.kt");
            }

            @Test
            public void testAllFilesPresentInPos() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/try-expression/p-7/pos"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }
          }
        }
      }

      @Nested
      @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/type-checking-and-containment-checking-expressions")
      @TestDataPath("$PROJECT_ROOT")
      public class Type_checking_and_containment_checking_expressions {
        @Test
        public void testAllFilesPresentInType_checking_and_containment_checking_expressions() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/type-checking-and-containment-checking-expressions"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @Nested
        @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/type-checking-and-containment-checking-expressions/containment-checking-expression")
        @TestDataPath("$PROJECT_ROOT")
        public class Containment_checking_expression {
          @Test
          public void testAllFilesPresentInContainment_checking_expression() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/type-checking-and-containment-checking-expressions/containment-checking-expression"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/type-checking-and-containment-checking-expressions/containment-checking-expression/p-2")
          @TestDataPath("$PROJECT_ROOT")
          public class P_2 {
            @Test
            public void testAllFilesPresentInP_2() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/type-checking-and-containment-checking-expressions/containment-checking-expression/p-2"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }

            @Nested
            @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/type-checking-and-containment-checking-expressions/containment-checking-expression/p-2/pos")
            @TestDataPath("$PROJECT_ROOT")
            public class Pos {
              @Test
              @TestMetadata("1.1.kt")
              public void test1_1() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/type-checking-and-containment-checking-expressions/containment-checking-expression/p-2/pos/1.1.kt");
              }

              @Test
              @TestMetadata("1.2.kt")
              public void test1_2() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/type-checking-and-containment-checking-expressions/containment-checking-expression/p-2/pos/1.2.kt");
              }

              @Test
              public void testAllFilesPresentInPos() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/type-checking-and-containment-checking-expressions/containment-checking-expression/p-2/pos"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
              }
            }
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/type-checking-and-containment-checking-expressions/containment-checking-expression/p-4")
          @TestDataPath("$PROJECT_ROOT")
          public class P_4 {
            @Test
            public void testAllFilesPresentInP_4() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/type-checking-and-containment-checking-expressions/containment-checking-expression/p-4"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }

            @Nested
            @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/type-checking-and-containment-checking-expressions/containment-checking-expression/p-4/pos")
            @TestDataPath("$PROJECT_ROOT")
            public class Pos {
              @Test
              @TestMetadata("1.1.kt")
              public void test1_1() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/type-checking-and-containment-checking-expressions/containment-checking-expression/p-4/pos/1.1.kt");
              }

              @Test
              @TestMetadata("1.2.kt")
              public void test1_2() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/type-checking-and-containment-checking-expressions/containment-checking-expression/p-4/pos/1.2.kt");
              }

              @Test
              public void testAllFilesPresentInPos() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/type-checking-and-containment-checking-expressions/containment-checking-expression/p-4/pos"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
              }
            }
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/type-checking-and-containment-checking-expressions/containment-checking-expression/p-5")
          @TestDataPath("$PROJECT_ROOT")
          public class P_5 {
            @Test
            public void testAllFilesPresentInP_5() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/type-checking-and-containment-checking-expressions/containment-checking-expression/p-5"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }

            @Nested
            @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/type-checking-and-containment-checking-expressions/containment-checking-expression/p-5/neg")
            @TestDataPath("$PROJECT_ROOT")
            public class Neg {
              @Test
              @TestMetadata("1.1.kt")
              public void test1_1() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/type-checking-and-containment-checking-expressions/containment-checking-expression/p-5/neg/1.1.kt");
              }

              @Test
              public void testAllFilesPresentInNeg() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/type-checking-and-containment-checking-expressions/containment-checking-expression/p-5/neg"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
              }
            }
          }
        }

        @Nested
        @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/type-checking-and-containment-checking-expressions/type-checking-expression")
        @TestDataPath("$PROJECT_ROOT")
        public class Type_checking_expression {
          @Test
          public void testAllFilesPresentInType_checking_expression() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/type-checking-and-containment-checking-expressions/type-checking-expression"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/type-checking-and-containment-checking-expressions/type-checking-expression/p-1")
          @TestDataPath("$PROJECT_ROOT")
          public class P_1 {
            @Test
            public void testAllFilesPresentInP_1() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/type-checking-and-containment-checking-expressions/type-checking-expression/p-1"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }

            @Nested
            @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/type-checking-and-containment-checking-expressions/type-checking-expression/p-1/neg")
            @TestDataPath("$PROJECT_ROOT")
            public class Neg {
              @Test
              public void testAllFilesPresentInNeg() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/type-checking-and-containment-checking-expressions/type-checking-expression/p-1/neg"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
              }
            }

            @Nested
            @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/type-checking-and-containment-checking-expressions/type-checking-expression/p-1/pos")
            @TestDataPath("$PROJECT_ROOT")
            public class Pos {
              @Test
              @TestMetadata("3.1.kt")
              public void test3_1() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/type-checking-and-containment-checking-expressions/type-checking-expression/p-1/pos/3.1.kt");
              }

              @Test
              @TestMetadata("3.2.kt")
              public void test3_2() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/type-checking-and-containment-checking-expressions/type-checking-expression/p-1/pos/3.2.kt");
              }

              @Test
              public void testAllFilesPresentInPos() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/type-checking-and-containment-checking-expressions/type-checking-expression/p-1/pos"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
              }
            }
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/type-checking-and-containment-checking-expressions/type-checking-expression/p-2")
          @TestDataPath("$PROJECT_ROOT")
          public class P_2 {
            @Test
            public void testAllFilesPresentInP_2() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/type-checking-and-containment-checking-expressions/type-checking-expression/p-2"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }

            @Nested
            @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/type-checking-and-containment-checking-expressions/type-checking-expression/p-2/neg")
            @TestDataPath("$PROJECT_ROOT")
            public class Neg {
              @Test
              @TestMetadata("1.1.kt")
              public void test1_1() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/type-checking-and-containment-checking-expressions/type-checking-expression/p-2/neg/1.1.kt");
              }

              @Test
              public void testAllFilesPresentInNeg() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/type-checking-and-containment-checking-expressions/type-checking-expression/p-2/neg"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
              }
            }
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/type-checking-and-containment-checking-expressions/type-checking-expression/p-5")
          @TestDataPath("$PROJECT_ROOT")
          public class P_5 {
            @Test
            public void testAllFilesPresentInP_5() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/type-checking-and-containment-checking-expressions/type-checking-expression/p-5"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }

            @Nested
            @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/type-checking-and-containment-checking-expressions/type-checking-expression/p-5/pos")
            @TestDataPath("$PROJECT_ROOT")
            public class Pos {
              @Test
              @TestMetadata("1.1.kt")
              public void test1_1() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/type-checking-and-containment-checking-expressions/type-checking-expression/p-5/pos/1.1.kt");
              }

              @Test
              public void testAllFilesPresentInPos() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/type-checking-and-containment-checking-expressions/type-checking-expression/p-5/pos"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
              }
            }
          }
        }
      }

      @Nested
      @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/when-expression")
      @TestDataPath("$PROJECT_ROOT")
      public class When_expression {
        @Test
        public void testAllFilesPresentInWhen_expression() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/when-expression"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @Nested
        @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/when-expression/p-4")
        @TestDataPath("$PROJECT_ROOT")
        public class P_4 {
          @Test
          public void testAllFilesPresentInP_4() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/when-expression/p-4"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/when-expression/p-4/neg")
          @TestDataPath("$PROJECT_ROOT")
          public class Neg {
            @Test
            @TestMetadata("1.1.kt")
            public void test1_1() {
              runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/when-expression/p-4/neg/1.1.kt");
            }

            @Test
            @TestMetadata("1.2.kt")
            public void test1_2() {
              runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/when-expression/p-4/neg/1.2.kt");
            }

            @Test
            @TestMetadata("1.3.kt")
            public void test1_3() {
              runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/when-expression/p-4/neg/1.3.kt");
            }

            @Test
            @TestMetadata("1.4.kt")
            public void test1_4() {
              runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/when-expression/p-4/neg/1.4.kt");
            }

            @Test
            public void testAllFilesPresentInNeg() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/when-expression/p-4/neg"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/when-expression/p-4/pos")
          @TestDataPath("$PROJECT_ROOT")
          public class Pos {
            @Test
            @TestMetadata("1.1.kt")
            public void test1_1() {
              runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/when-expression/p-4/pos/1.1.kt");
            }

            @Test
            @TestMetadata("1.2.kt")
            public void test1_2() {
              runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/when-expression/p-4/pos/1.2.kt");
            }

            @Test
            @TestMetadata("1.3.kt")
            public void test1_3() {
              runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/when-expression/p-4/pos/1.3.kt");
            }

            @Test
            @TestMetadata("1.4.kt")
            public void test1_4() {
              runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/when-expression/p-4/pos/1.4.kt");
            }

            @Test
            public void testAllFilesPresentInPos() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/when-expression/p-4/pos"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }
          }
        }

        @Nested
        @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/when-expression/p-5")
        @TestDataPath("$PROJECT_ROOT")
        public class P_5 {
          @Test
          public void testAllFilesPresentInP_5() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/when-expression/p-5"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/when-expression/p-5/neg")
          @TestDataPath("$PROJECT_ROOT")
          public class Neg {
            @Test
            @TestMetadata("2.1.kt")
            public void test2_1() {
              runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/when-expression/p-5/neg/2.1.kt");
            }

            @Test
            public void testAllFilesPresentInNeg() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/when-expression/p-5/neg"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/expressions/when-expression/p-5/pos")
          @TestDataPath("$PROJECT_ROOT")
          public class Pos {
            @Test
            @TestMetadata("1.1.kt")
            public void test1_1() {
              runTest("compiler/tests-spec/testData/codegen/box/linked/expressions/when-expression/p-5/pos/1.1.kt");
            }

            @Test
            public void testAllFilesPresentInPos() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/expressions/when-expression/p-5/pos"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }
          }
        }
      }
    }

    @Nested
    @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/overload-resolution")
    @TestDataPath("$PROJECT_ROOT")
    public class Overload_resolution {
      @Test
      public void testAllFilesPresentInOverload_resolution() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/overload-resolution"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true, "building-the-overload-candidate-set-ocs/call-with-an-explicit-receiver");
      }

      @Nested
      @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/building-the-overload-candidate-set-ocs")
      @TestDataPath("$PROJECT_ROOT")
      public class Building_the_overload_candidate_set_ocs {
        @Test
        public void testAllFilesPresentInBuilding_the_overload_candidate_set_ocs() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/building-the-overload-candidate-set-ocs"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true, "call-with-an-explicit-receiver");
        }

        @Nested
        @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/building-the-overload-candidate-set-ocs/infix-function-call")
        @TestDataPath("$PROJECT_ROOT")
        public class Infix_function_call {
          @Test
          public void testAllFilesPresentInInfix_function_call() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/building-the-overload-candidate-set-ocs/infix-function-call"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/building-the-overload-candidate-set-ocs/infix-function-call/p-2")
          @TestDataPath("$PROJECT_ROOT")
          public class P_2 {
            @Test
            public void testAllFilesPresentInP_2() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/building-the-overload-candidate-set-ocs/infix-function-call/p-2"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }

            @Nested
            @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/building-the-overload-candidate-set-ocs/infix-function-call/p-2/pos")
            @TestDataPath("$PROJECT_ROOT")
            public class Pos {
              @Test
              @TestMetadata("2.1.kt")
              public void test2_1() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/building-the-overload-candidate-set-ocs/infix-function-call/p-2/pos/2.1.kt");
              }

              @Test
              public void testAllFilesPresentInPos() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/building-the-overload-candidate-set-ocs/infix-function-call/p-2/pos"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
              }
            }
          }
        }

        @Nested
        @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/building-the-overload-candidate-set-ocs/operator-call")
        @TestDataPath("$PROJECT_ROOT")
        public class Operator_call {
          @Test
          public void testAllFilesPresentInOperator_call() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/building-the-overload-candidate-set-ocs/operator-call"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/building-the-overload-candidate-set-ocs/operator-call/p-1")
          @TestDataPath("$PROJECT_ROOT")
          public class P_1 {
            @Test
            public void testAllFilesPresentInP_1() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/building-the-overload-candidate-set-ocs/operator-call/p-1"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }

            @Nested
            @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/building-the-overload-candidate-set-ocs/operator-call/p-1/neg")
            @TestDataPath("$PROJECT_ROOT")
            public class Neg {
              @Test
              @TestMetadata("2.1.kt")
              public void test2_1() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/building-the-overload-candidate-set-ocs/operator-call/p-1/neg/2.1.kt");
              }

              @Test
              @TestMetadata("2.2.kt")
              public void test2_2() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/building-the-overload-candidate-set-ocs/operator-call/p-1/neg/2.2.kt");
              }

              @Test
              @TestMetadata("2.3.kt")
              public void test2_3() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/building-the-overload-candidate-set-ocs/operator-call/p-1/neg/2.3.kt");
              }

              @Test
              @TestMetadata("2.4.kt")
              public void test2_4() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/building-the-overload-candidate-set-ocs/operator-call/p-1/neg/2.4.kt");
              }

              @Test
              @TestMetadata("2.5.kt")
              public void test2_5() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/building-the-overload-candidate-set-ocs/operator-call/p-1/neg/2.5.kt");
              }

              @Test
              @TestMetadata("2.6.kt")
              public void test2_6() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/building-the-overload-candidate-set-ocs/operator-call/p-1/neg/2.6.kt");
              }

              @Test
              public void testAllFilesPresentInNeg() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/building-the-overload-candidate-set-ocs/operator-call/p-1/neg"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
              }
            }

            @Nested
            @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/building-the-overload-candidate-set-ocs/operator-call/p-1/pos")
            @TestDataPath("$PROJECT_ROOT")
            public class Pos {
              @Test
              @TestMetadata("2.1.kt")
              public void test2_1() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/building-the-overload-candidate-set-ocs/operator-call/p-1/pos/2.1.kt");
              }

              @Test
              @TestMetadata("2.10.kt")
              public void test2_10() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/building-the-overload-candidate-set-ocs/operator-call/p-1/pos/2.10.kt");
              }

              @Test
              @TestMetadata("2.2.kt")
              public void test2_2() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/building-the-overload-candidate-set-ocs/operator-call/p-1/pos/2.2.kt");
              }

              @Test
              @TestMetadata("2.3.kt")
              public void test2_3() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/building-the-overload-candidate-set-ocs/operator-call/p-1/pos/2.3.kt");
              }

              @Test
              @TestMetadata("2.4.kt")
              public void test2_4() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/building-the-overload-candidate-set-ocs/operator-call/p-1/pos/2.4.kt");
              }

              @Test
              @TestMetadata("2.5.kt")
              public void test2_5() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/building-the-overload-candidate-set-ocs/operator-call/p-1/pos/2.5.kt");
              }

              @Test
              @TestMetadata("2.6.kt")
              public void test2_6() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/building-the-overload-candidate-set-ocs/operator-call/p-1/pos/2.6.kt");
              }

              @Test
              @TestMetadata("2.7.kt")
              public void test2_7() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/building-the-overload-candidate-set-ocs/operator-call/p-1/pos/2.7.kt");
              }

              @Test
              @TestMetadata("2.8.kt")
              public void test2_8() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/building-the-overload-candidate-set-ocs/operator-call/p-1/pos/2.8.kt");
              }

              @Test
              @TestMetadata("2.9.kt")
              public void test2_9() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/building-the-overload-candidate-set-ocs/operator-call/p-1/pos/2.9.kt");
              }

              @Test
              public void testAllFilesPresentInPos() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/building-the-overload-candidate-set-ocs/operator-call/p-1/pos"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
              }
            }
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/building-the-overload-candidate-set-ocs/operator-call/p-2")
          @TestDataPath("$PROJECT_ROOT")
          public class P_2 {
            @Test
            public void testAllFilesPresentInP_2() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/building-the-overload-candidate-set-ocs/operator-call/p-2"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }

            @Nested
            @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/building-the-overload-candidate-set-ocs/operator-call/p-2/pos")
            @TestDataPath("$PROJECT_ROOT")
            public class Pos {
              @Test
              @TestMetadata("3.1.kt")
              public void test3_1() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/building-the-overload-candidate-set-ocs/operator-call/p-2/pos/3.1.kt");
              }

              @Test
              @TestMetadata("3.10.kt")
              public void test3_10() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/building-the-overload-candidate-set-ocs/operator-call/p-2/pos/3.10.kt");
              }

              @Test
              @TestMetadata("3.2.kt")
              public void test3_2() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/building-the-overload-candidate-set-ocs/operator-call/p-2/pos/3.2.kt");
              }

              @Test
              @TestMetadata("3.3.kt")
              public void test3_3() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/building-the-overload-candidate-set-ocs/operator-call/p-2/pos/3.3.kt");
              }

              @Test
              @TestMetadata("3.4.kt")
              public void test3_4() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/building-the-overload-candidate-set-ocs/operator-call/p-2/pos/3.4.kt");
              }

              @Test
              @TestMetadata("3.5.kt")
              public void test3_5() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/building-the-overload-candidate-set-ocs/operator-call/p-2/pos/3.5.kt");
              }

              @Test
              @TestMetadata("3.6.kt")
              public void test3_6() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/building-the-overload-candidate-set-ocs/operator-call/p-2/pos/3.6.kt");
              }

              @Test
              @TestMetadata("3.7.kt")
              public void test3_7() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/building-the-overload-candidate-set-ocs/operator-call/p-2/pos/3.7.kt");
              }

              @Test
              @TestMetadata("3.8.kt")
              public void test3_8() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/building-the-overload-candidate-set-ocs/operator-call/p-2/pos/3.8.kt");
              }

              @Test
              @TestMetadata("3.9.kt")
              public void test3_9() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/building-the-overload-candidate-set-ocs/operator-call/p-2/pos/3.9.kt");
              }

              @Test
              public void testAllFilesPresentInPos() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/building-the-overload-candidate-set-ocs/operator-call/p-2/pos"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
              }
            }
          }
        }
      }

      @Nested
      @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/callables-and-invoke-convention")
      @TestDataPath("$PROJECT_ROOT")
      public class Callables_and_invoke_convention {
        @Test
        public void testAllFilesPresentInCallables_and_invoke_convention() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/callables-and-invoke-convention"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @Nested
        @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/callables-and-invoke-convention/p-5")
        @TestDataPath("$PROJECT_ROOT")
        public class P_5 {
          @Test
          public void testAllFilesPresentInP_5() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/callables-and-invoke-convention/p-5"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/callables-and-invoke-convention/p-5/pos")
          @TestDataPath("$PROJECT_ROOT")
          public class Pos {
            @Test
            @TestMetadata("1.1.kt")
            public void test1_1() {
              runTest("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/callables-and-invoke-convention/p-5/pos/1.1.kt");
            }

            @Test
            @TestMetadata("1.10.kt")
            public void test1_10() {
              runTest("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/callables-and-invoke-convention/p-5/pos/1.10.kt");
            }

            @Test
            @TestMetadata("1.2.kt")
            public void test1_2() {
              runTest("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/callables-and-invoke-convention/p-5/pos/1.2.kt");
            }

            @Test
            @TestMetadata("1.4.kt")
            public void test1_4() {
              runTest("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/callables-and-invoke-convention/p-5/pos/1.4.kt");
            }

            @Test
            @TestMetadata("1.5.kt")
            public void test1_5() {
              runTest("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/callables-and-invoke-convention/p-5/pos/1.5.kt");
            }

            @Test
            @TestMetadata("1.6.kt")
            public void test1_6() {
              runTest("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/callables-and-invoke-convention/p-5/pos/1.6.kt");
            }

            @Test
            @TestMetadata("1.7.kt")
            public void test1_7() {
              runTest("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/callables-and-invoke-convention/p-5/pos/1.7.kt");
            }

            @Test
            @TestMetadata("1.8.kt")
            public void test1_8() {
              runTest("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/callables-and-invoke-convention/p-5/pos/1.8.kt");
            }

            @Test
            @TestMetadata("1.9.kt")
            public void test1_9() {
              runTest("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/callables-and-invoke-convention/p-5/pos/1.9.kt");
            }

            @Test
            public void testAllFilesPresentInPos() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/callables-and-invoke-convention/p-5/pos"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }
          }
        }
      }

      @Nested
      @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/choosing-the-most-specific-candidate-from-the-overload-candidate-set")
      @TestDataPath("$PROJECT_ROOT")
      public class Choosing_the_most_specific_candidate_from_the_overload_candidate_set {
        @Test
        public void testAllFilesPresentInChoosing_the_most_specific_candidate_from_the_overload_candidate_set() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/choosing-the-most-specific-candidate-from-the-overload-candidate-set"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @Nested
        @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/choosing-the-most-specific-candidate-from-the-overload-candidate-set/algorithm-of-msc-selection")
        @TestDataPath("$PROJECT_ROOT")
        public class Algorithm_of_msc_selection {
          @Test
          public void testAllFilesPresentInAlgorithm_of_msc_selection() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/choosing-the-most-specific-candidate-from-the-overload-candidate-set/algorithm-of-msc-selection"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/choosing-the-most-specific-candidate-from-the-overload-candidate-set/algorithm-of-msc-selection/p-3")
          @TestDataPath("$PROJECT_ROOT")
          public class P_3 {
            @Test
            public void testAllFilesPresentInP_3() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/choosing-the-most-specific-candidate-from-the-overload-candidate-set/algorithm-of-msc-selection/p-3"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }

            @Nested
            @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/choosing-the-most-specific-candidate-from-the-overload-candidate-set/algorithm-of-msc-selection/p-3/pos")
            @TestDataPath("$PROJECT_ROOT")
            public class Pos {
              @Test
              @TestMetadata("1.1.kt")
              public void test1_1() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/choosing-the-most-specific-candidate-from-the-overload-candidate-set/algorithm-of-msc-selection/p-3/pos/1.1.kt");
              }

              @Test
              @TestMetadata("1.2.kt")
              public void test1_2() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/choosing-the-most-specific-candidate-from-the-overload-candidate-set/algorithm-of-msc-selection/p-3/pos/1.2.kt");
              }

              @Test
              public void testAllFilesPresentInPos() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/choosing-the-most-specific-candidate-from-the-overload-candidate-set/algorithm-of-msc-selection/p-3/pos"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
              }
            }
          }
        }
      }

      @Nested
      @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/receivers")
      @TestDataPath("$PROJECT_ROOT")
      public class Receivers {
        @Test
        public void testAllFilesPresentInReceivers() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/receivers"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @Nested
        @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/receivers/p-6")
        @TestDataPath("$PROJECT_ROOT")
        public class P_6 {
          @Test
          public void testAllFilesPresentInP_6() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/receivers/p-6"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/receivers/p-6/pos")
          @TestDataPath("$PROJECT_ROOT")
          public class Pos {
            @Test
            @TestMetadata("2.1.kt")
            public void test2_1() {
              runTest("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/receivers/p-6/pos/2.1.kt");
            }

            @Test
            @TestMetadata("2.2.kt")
            public void test2_2() {
              runTest("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/receivers/p-6/pos/2.2.kt");
            }

            @Test
            @TestMetadata("3.1.kt")
            public void test3_1() {
              runTest("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/receivers/p-6/pos/3.1.kt");
            }

            @Test
            @TestMetadata("4.2.kt")
            public void test4_2() {
              runTest("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/receivers/p-6/pos/4.2.kt");
            }

            @Test
            @TestMetadata("5.1.kt")
            public void test5_1() {
              runTest("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/receivers/p-6/pos/5.1.kt");
            }

            @Test
            public void testAllFilesPresentInPos() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/overload-resolution/receivers/p-6/pos"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }
          }
        }
      }
    }

    @Nested
    @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/statements")
    @TestDataPath("$PROJECT_ROOT")
    public class Statements {
      @Test
      public void testAllFilesPresentInStatements() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/statements"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @Nested
      @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/statements/assignments")
      @TestDataPath("$PROJECT_ROOT")
      public class Assignments {
        @Test
        public void testAllFilesPresentInAssignments() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/statements/assignments"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @Nested
        @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/statements/assignments/operator-assignments")
        @TestDataPath("$PROJECT_ROOT")
        public class Operator_assignments {
          @Test
          public void testAllFilesPresentInOperator_assignments() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/statements/assignments/operator-assignments"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/statements/assignments/operator-assignments/p-2")
          @TestDataPath("$PROJECT_ROOT")
          public class P_2 {
            @Test
            public void testAllFilesPresentInP_2() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/statements/assignments/operator-assignments/p-2"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }

            @Nested
            @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/statements/assignments/operator-assignments/p-2/neg")
            @TestDataPath("$PROJECT_ROOT")
            public class Neg {
              @Test
              @TestMetadata("10.1.kt")
              public void test10_1() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/statements/assignments/operator-assignments/p-2/neg/10.1.kt");
              }

              @Test
              @TestMetadata("10.2.kt")
              public void test10_2() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/statements/assignments/operator-assignments/p-2/neg/10.2.kt");
              }

              @Test
              @TestMetadata("13.1.kt")
              public void test13_1() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/statements/assignments/operator-assignments/p-2/neg/13.1.kt");
              }

              @Test
              @TestMetadata("13.2.kt")
              public void test13_2() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/statements/assignments/operator-assignments/p-2/neg/13.2.kt");
              }

              @Test
              @TestMetadata("1.1.kt")
              public void test1_1() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/statements/assignments/operator-assignments/p-2/neg/1.1.kt");
              }

              @Test
              @TestMetadata("1.2.kt")
              public void test1_2() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/statements/assignments/operator-assignments/p-2/neg/1.2.kt");
              }

              @Test
              @TestMetadata("4.1.kt")
              public void test4_1() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/statements/assignments/operator-assignments/p-2/neg/4.1.kt");
              }

              @Test
              @TestMetadata("4.2.kt")
              public void test4_2() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/statements/assignments/operator-assignments/p-2/neg/4.2.kt");
              }

              @Test
              @TestMetadata("7.1.kt")
              public void test7_1() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/statements/assignments/operator-assignments/p-2/neg/7.1.kt");
              }

              @Test
              @TestMetadata("7.2.kt")
              public void test7_2() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/statements/assignments/operator-assignments/p-2/neg/7.2.kt");
              }

              @Test
              public void testAllFilesPresentInNeg() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/statements/assignments/operator-assignments/p-2/neg"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
              }
            }

            @Nested
            @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/statements/assignments/operator-assignments/p-2/pos")
            @TestDataPath("$PROJECT_ROOT")
            public class Pos {
              @Test
              @TestMetadata("10.1.kt")
              public void test10_1() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/statements/assignments/operator-assignments/p-2/pos/10.1.kt");
              }

              @Test
              @TestMetadata("10.2.kt")
              public void test10_2() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/statements/assignments/operator-assignments/p-2/pos/10.2.kt");
              }

              @Test
              @TestMetadata("13.1.kt")
              public void test13_1() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/statements/assignments/operator-assignments/p-2/pos/13.1.kt");
              }

              @Test
              @TestMetadata("13.2.kt")
              public void test13_2() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/statements/assignments/operator-assignments/p-2/pos/13.2.kt");
              }

              @Test
              @TestMetadata("1.1.kt")
              public void test1_1() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/statements/assignments/operator-assignments/p-2/pos/1.1.kt");
              }

              @Test
              @TestMetadata("1.2.kt")
              public void test1_2() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/statements/assignments/operator-assignments/p-2/pos/1.2.kt");
              }

              @Test
              @TestMetadata("4.1.kt")
              public void test4_1() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/statements/assignments/operator-assignments/p-2/pos/4.1.kt");
              }

              @Test
              @TestMetadata("4.2.kt")
              public void test4_2() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/statements/assignments/operator-assignments/p-2/pos/4.2.kt");
              }

              @Test
              @TestMetadata("7.1.kt")
              public void test7_1() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/statements/assignments/operator-assignments/p-2/pos/7.1.kt");
              }

              @Test
              @TestMetadata("7.2.kt")
              public void test7_2() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/statements/assignments/operator-assignments/p-2/pos/7.2.kt");
              }

              @Test
              public void testAllFilesPresentInPos() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/statements/assignments/operator-assignments/p-2/pos"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
              }
            }
          }
        }

        @Nested
        @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/statements/assignments/simple-assignments")
        @TestDataPath("$PROJECT_ROOT")
        public class Simple_assignments {
          @Test
          public void testAllFilesPresentInSimple_assignments() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/statements/assignments/simple-assignments"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/statements/assignments/simple-assignments/p-2")
          @TestDataPath("$PROJECT_ROOT")
          public class P_2 {
            @Test
            public void testAllFilesPresentInP_2() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/statements/assignments/simple-assignments/p-2"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }

            @Nested
            @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/statements/assignments/simple-assignments/p-2/pos")
            @TestDataPath("$PROJECT_ROOT")
            public class Pos {
              @Test
              @TestMetadata("1.1.kt")
              public void test1_1() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/statements/assignments/simple-assignments/p-2/pos/1.1.kt");
              }

              @Test
              @TestMetadata("1.2.kt")
              public void test1_2() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/statements/assignments/simple-assignments/p-2/pos/1.2.kt");
              }

              @Test
              @TestMetadata("1.3.kt")
              public void test1_3() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/statements/assignments/simple-assignments/p-2/pos/1.3.kt");
              }

              @Test
              @TestMetadata("1.4.kt")
              public void test1_4() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/statements/assignments/simple-assignments/p-2/pos/1.4.kt");
              }

              @Test
              @TestMetadata("1.5.kt")
              public void test1_5() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/statements/assignments/simple-assignments/p-2/pos/1.5.kt");
              }

              @Test
              @TestMetadata("1.6.kt")
              public void test1_6() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/statements/assignments/simple-assignments/p-2/pos/1.6.kt");
              }

              @Test
              @TestMetadata("1.7.kt")
              public void test1_7() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/statements/assignments/simple-assignments/p-2/pos/1.7.kt");
              }

              @Test
              @TestMetadata("1.8.kt")
              public void test1_8() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/statements/assignments/simple-assignments/p-2/pos/1.8.kt");
              }

              @Test
              @TestMetadata("2.1.kt")
              public void test2_1() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/statements/assignments/simple-assignments/p-2/pos/2.1.kt");
              }

              @Test
              @TestMetadata("2.2.kt")
              public void test2_2() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/statements/assignments/simple-assignments/p-2/pos/2.2.kt");
              }

              @Test
              @TestMetadata("2.3.kt")
              public void test2_3() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/statements/assignments/simple-assignments/p-2/pos/2.3.kt");
              }

              @Test
              public void testAllFilesPresentInPos() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/statements/assignments/simple-assignments/p-2/pos"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
              }
            }
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/statements/assignments/simple-assignments/p-6")
          @TestDataPath("$PROJECT_ROOT")
          public class P_6 {
            @Test
            public void testAllFilesPresentInP_6() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/statements/assignments/simple-assignments/p-6"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }

            @Nested
            @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/statements/assignments/simple-assignments/p-6/pos")
            @TestDataPath("$PROJECT_ROOT")
            public class Pos {
              @Test
              @TestMetadata("1.1.kt")
              public void test1_1() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/statements/assignments/simple-assignments/p-6/pos/1.1.kt");
              }

              @Test
              public void testAllFilesPresentInPos() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/statements/assignments/simple-assignments/p-6/pos"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
              }
            }
          }
        }
      }

      @Nested
      @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/statements/loop-statements")
      @TestDataPath("$PROJECT_ROOT")
      public class Loop_statements {
        @Test
        public void testAllFilesPresentInLoop_statements() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/statements/loop-statements"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @Nested
        @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/statements/loop-statements/do-while-loop-statement")
        @TestDataPath("$PROJECT_ROOT")
        public class Do_while_loop_statement {
          @Test
          public void testAllFilesPresentInDo_while_loop_statement() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/statements/loop-statements/do-while-loop-statement"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/statements/loop-statements/do-while-loop-statement/p-1")
          @TestDataPath("$PROJECT_ROOT")
          public class P_1 {
            @Test
            public void testAllFilesPresentInP_1() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/statements/loop-statements/do-while-loop-statement/p-1"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }

            @Nested
            @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/statements/loop-statements/do-while-loop-statement/p-1/pos")
            @TestDataPath("$PROJECT_ROOT")
            public class Pos {
              @Test
              @TestMetadata("3.1.kt")
              public void test3_1() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/statements/loop-statements/do-while-loop-statement/p-1/pos/3.1.kt");
              }

              @Test
              @TestMetadata("3.2.kt")
              public void test3_2() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/statements/loop-statements/do-while-loop-statement/p-1/pos/3.2.kt");
              }

              @Test
              public void testAllFilesPresentInPos() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/statements/loop-statements/do-while-loop-statement/p-1/pos"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
              }
            }
          }
        }

        @Nested
        @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/statements/loop-statements/while-loop-statement")
        @TestDataPath("$PROJECT_ROOT")
        public class While_loop_statement {
          @Test
          public void testAllFilesPresentInWhile_loop_statement() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/statements/loop-statements/while-loop-statement"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/statements/loop-statements/while-loop-statement/p-1")
          @TestDataPath("$PROJECT_ROOT")
          public class P_1 {
            @Test
            public void testAllFilesPresentInP_1() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/statements/loop-statements/while-loop-statement/p-1"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }

            @Nested
            @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/statements/loop-statements/while-loop-statement/p-1/pos")
            @TestDataPath("$PROJECT_ROOT")
            public class Pos {
              @Test
              @TestMetadata("2.1.kt")
              public void test2_1() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/statements/loop-statements/while-loop-statement/p-1/pos/2.1.kt");
              }

              @Test
              @TestMetadata("2.2.kt")
              public void test2_2() {
                runTest("compiler/tests-spec/testData/codegen/box/linked/statements/loop-statements/while-loop-statement/p-1/pos/2.2.kt");
              }

              @Test
              public void testAllFilesPresentInPos() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/statements/loop-statements/while-loop-statement/p-1/pos"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
              }
            }
          }
        }
      }
    }

    @Nested
    @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/type-system")
    @TestDataPath("$PROJECT_ROOT")
    public class Type_system {
      @Test
      public void testAllFilesPresentInType_system() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/type-system"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @Nested
      @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/type-system/introduction-1")
      @TestDataPath("$PROJECT_ROOT")
      public class Introduction_1 {
        @Test
        public void testAllFilesPresentInIntroduction_1() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/type-system/introduction-1"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @Nested
        @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/type-system/introduction-1/p-5")
        @TestDataPath("$PROJECT_ROOT")
        public class P_5 {
          @Test
          public void testAllFilesPresentInP_5() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/type-system/introduction-1/p-5"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/type-system/introduction-1/p-5/pos")
          @TestDataPath("$PROJECT_ROOT")
          public class Pos {
            @Test
            @TestMetadata("2.1.kt")
            public void test2_1() {
              runTest("compiler/tests-spec/testData/codegen/box/linked/type-system/introduction-1/p-5/pos/2.1.kt");
            }

            @Test
            public void testAllFilesPresentInPos() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/type-system/introduction-1/p-5/pos"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }
          }
        }
      }

      @Nested
      @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/type-system/type-kinds")
      @TestDataPath("$PROJECT_ROOT")
      public class Type_kinds {
        @Test
        public void testAllFilesPresentInType_kinds() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/type-system/type-kinds"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @Nested
        @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/type-system/type-kinds/built-in-types")
        @TestDataPath("$PROJECT_ROOT")
        public class Built_in_types {
          @Test
          public void testAllFilesPresentInBuilt_in_types() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/type-system/type-kinds/built-in-types"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }

          @Nested
          @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/type-system/type-kinds/built-in-types/kotlin.nothing")
          @TestDataPath("$PROJECT_ROOT")
          public class Kotlin_nothing {
            @Test
            public void testAllFilesPresentInKotlin_nothing() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/type-system/type-kinds/built-in-types/kotlin.nothing"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }

            @Nested
            @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/type-system/type-kinds/built-in-types/kotlin.nothing/p-1")
            @TestDataPath("$PROJECT_ROOT")
            public class P_1 {
              @Test
              public void testAllFilesPresentInP_1() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/type-system/type-kinds/built-in-types/kotlin.nothing/p-1"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
              }

              @Nested
              @TestMetadata("compiler/tests-spec/testData/codegen/box/linked/type-system/type-kinds/built-in-types/kotlin.nothing/p-1/pos")
              @TestDataPath("$PROJECT_ROOT")
              public class Pos {
                @Test
                @TestMetadata("1.1.kt")
                public void test1_1() {
                  runTest("compiler/tests-spec/testData/codegen/box/linked/type-system/type-kinds/built-in-types/kotlin.nothing/p-1/pos/1.1.kt");
                }

                @Test
                @TestMetadata("1.2.kt")
                public void test1_2() {
                  runTest("compiler/tests-spec/testData/codegen/box/linked/type-system/type-kinds/built-in-types/kotlin.nothing/p-1/pos/1.2.kt");
                }

                @Test
                public void testAllFilesPresentInPos() {
                  KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/linked/type-system/type-kinds/built-in-types/kotlin.nothing/p-1/pos"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
                }
              }
            }
          }
        }
      }
    }
  }

  @Nested
  @TestMetadata("compiler/tests-spec/testData/codegen/box/notLinked")
  @TestDataPath("$PROJECT_ROOT")
  public class NotLinked {
    @Test
    public void testAllFilesPresentInNotLinked() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/notLinked"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @Nested
    @TestMetadata("compiler/tests-spec/testData/codegen/box/notLinked/flexibility")
    @TestDataPath("$PROJECT_ROOT")
    public class Flexibility {
      @Test
      public void testAllFilesPresentInFlexibility() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/notLinked/flexibility"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @Nested
      @TestMetadata("compiler/tests-spec/testData/codegen/box/notLinked/flexibility/neg")
      @TestDataPath("$PROJECT_ROOT")
      public class Neg {
        @Test
        @TestMetadata("1.kt")
        public void test1() {
          runTest("compiler/tests-spec/testData/codegen/box/notLinked/flexibility/neg/1.kt");
        }

        @Test
        @TestMetadata("2.kt")
        public void test2() {
          runTest("compiler/tests-spec/testData/codegen/box/notLinked/flexibility/neg/2.kt");
        }

        @Test
        public void testAllFilesPresentInNeg() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/notLinked/flexibility/neg"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }
      }
    }

    @Nested
    @TestMetadata("compiler/tests-spec/testData/codegen/box/notLinked/objects")
    @TestDataPath("$PROJECT_ROOT")
    public class Objects {
      @Test
      public void testAllFilesPresentInObjects() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/notLinked/objects"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @Nested
      @TestMetadata("compiler/tests-spec/testData/codegen/box/notLinked/objects/inheritance")
      @TestDataPath("$PROJECT_ROOT")
      public class Inheritance {
        @Test
        public void testAllFilesPresentInInheritance() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/notLinked/objects/inheritance"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @Nested
        @TestMetadata("compiler/tests-spec/testData/codegen/box/notLinked/objects/inheritance/neg")
        @TestDataPath("$PROJECT_ROOT")
        public class Neg {
          @Test
          @TestMetadata("1.kt")
          public void test1() {
            runTest("compiler/tests-spec/testData/codegen/box/notLinked/objects/inheritance/neg/1.kt");
          }

          @Test
          @TestMetadata("10.kt")
          public void test10() {
            runTest("compiler/tests-spec/testData/codegen/box/notLinked/objects/inheritance/neg/10.kt");
          }

          @Test
          @TestMetadata("11.kt")
          public void test11() {
            runTest("compiler/tests-spec/testData/codegen/box/notLinked/objects/inheritance/neg/11.kt");
          }

          @Test
          @TestMetadata("12.kt")
          public void test12() {
            runTest("compiler/tests-spec/testData/codegen/box/notLinked/objects/inheritance/neg/12.kt");
          }

          @Test
          @TestMetadata("2.kt")
          public void test2() {
            runTest("compiler/tests-spec/testData/codegen/box/notLinked/objects/inheritance/neg/2.kt");
          }

          @Test
          @TestMetadata("3.kt")
          public void test3() {
            runTest("compiler/tests-spec/testData/codegen/box/notLinked/objects/inheritance/neg/3.kt");
          }

          @Test
          @TestMetadata("4.kt")
          public void test4() {
            runTest("compiler/tests-spec/testData/codegen/box/notLinked/objects/inheritance/neg/4.kt");
          }

          @Test
          @TestMetadata("5.kt")
          public void test5() {
            runTest("compiler/tests-spec/testData/codegen/box/notLinked/objects/inheritance/neg/5.kt");
          }

          @Test
          @TestMetadata("6.kt")
          public void test6() {
            runTest("compiler/tests-spec/testData/codegen/box/notLinked/objects/inheritance/neg/6.kt");
          }

          @Test
          @TestMetadata("7.kt")
          public void test7() {
            runTest("compiler/tests-spec/testData/codegen/box/notLinked/objects/inheritance/neg/7.kt");
          }

          @Test
          @TestMetadata("8.kt")
          public void test8() {
            runTest("compiler/tests-spec/testData/codegen/box/notLinked/objects/inheritance/neg/8.kt");
          }

          @Test
          @TestMetadata("9.kt")
          public void test9() {
            runTest("compiler/tests-spec/testData/codegen/box/notLinked/objects/inheritance/neg/9.kt");
          }

          @Test
          public void testAllFilesPresentInNeg() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/notLinked/objects/inheritance/neg"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }
        }

        @Nested
        @TestMetadata("compiler/tests-spec/testData/codegen/box/notLinked/objects/inheritance/pos")
        @TestDataPath("$PROJECT_ROOT")
        public class Pos {
          @Test
          @TestMetadata("1.kt")
          public void test1() {
            runTest("compiler/tests-spec/testData/codegen/box/notLinked/objects/inheritance/pos/1.kt");
          }

          @Test
          @TestMetadata("2.kt")
          public void test2() {
            runTest("compiler/tests-spec/testData/codegen/box/notLinked/objects/inheritance/pos/2.kt");
          }

          @Test
          public void testAllFilesPresentInPos() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/tests-spec/testData/codegen/box/notLinked/objects/inheritance/pos"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
          }
        }
      }
    }
  }
}
