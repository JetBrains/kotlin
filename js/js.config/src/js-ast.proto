/*
 * Copyright 2010-2017 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

edition = "2023";

package org.jetbrains.kotlin.serialization.js.ast;

option java_outer_classname = "JsAstProtoBuf";
option features.utf8_validation = NONE;


message Location {
    int32 startLine = 1 [features.field_presence = LEGACY_REQUIRED];
    int32 startChar = 2 [features.field_presence = LEGACY_REQUIRED];
}

enum SideEffects {
    option features.enum_type = CLOSED;
    AFFECTS_STATE = 1;
    DEPENDS_ON_STATE = 2;
    PURE = 3;
}

message JsImportedModule {
    int32 external_name = 1 [features.field_presence = LEGACY_REQUIRED];
    int32 internal_name = 2 [features.field_presence = LEGACY_REQUIRED];
    Expression plain_reference = 3;
}


// Expressions
//

message Expression {
    int32 fileId = 1;
    Location location = 2;
    bool synthetic = 3 [default = false];
    SideEffects side_effects = 4 [default = AFFECTS_STATE];
    JsImportedModule local_alias = 5;
    repeated Comment before_comments = 6;
    repeated Comment after_comments = 7;

    oneof expression {
        int32 simple_name_reference = 22;
        ThisLiteral this_literal = 23;
        NullLiteral null_literal = 24;
        TrueLiteral true_literal = 25;
        FalseLiteral false_literal = 26;
        int32 string_literal = 27;
        RegExpLiteral reg_exp_literal = 28;
        int32 int_literal = 29;
        double double_literal = 30;
        ArrayLiteral array_literal = 31;
        ObjectLiteral object_literal = 32;
        Function function = 33;
        DocComment doc_comment = 34;
        BinaryOperation binary = 35;
        UnaryOperation unary = 36;
        Conditional conditional = 37;
        ArrayAccess array_access = 38;
        NameReference name_reference = 39;
        PropertyReference property_reference = 40;
        Invocation invocation = 41;
        Instantiation instantiation = 42;
        SuperLiteral super_literal = 43;
        Class class = 44;
    }
}

message ThisLiteral {
}

message SuperLiteral {
}

message NullLiteral {
}

message TrueLiteral {
}

message FalseLiteral {
}

message RegExpLiteral {
    int32 pattern_string_id = 1 [features.field_presence = LEGACY_REQUIRED];
    int32 flags_string_id = 2;
}

message ArrayLiteral {
    repeated Expression element = 1;
}

message ObjectLiteral {
    repeated ObjectLiteralEntry entry = 1;
    bool multiline = 2 [default = true];
}

message ObjectLiteralEntry {
    Expression key = 1 [features.field_presence = LEGACY_REQUIRED];
    Expression value = 2 [features.field_presence = LEGACY_REQUIRED];
}

message Function {
    repeated Parameter parameter = 1;
    int32 name_id = 2;
    Statement body = 3 [features.field_presence = LEGACY_REQUIRED];
    bool local = 4 [default = false];
    repeated Modifier modifier = 5;
    bool is_es6_arrow = 6 [default = false];

    enum Modifier {
        option features.enum_type = CLOSED;
        STATIC = 1;
        GET = 2;
        SET = 3;
        GENERATOR = 4;
    }
}

message Class {
    int32 name_id = 1;
    Expression super_expression = 2;
    Function constructor = 3;
    repeated Function member = 4;
}

message Parameter {
    int32 name_id = 1 [features.field_presence = LEGACY_REQUIRED];
    bool has_default_value = 2 [default = false];
}

message DocComment {
    repeated DocCommentTag tag = 1;
}

message DocCommentTag {
    int32 name_id = 1 [features.field_presence = LEGACY_REQUIRED];
    oneof value {
        int32 value_string_id = 2;
        Expression expression = 3;
    }
}

message Comment {
    string text = 1 [features.field_presence = LEGACY_REQUIRED];
    bool multiline = 2 [features.field_presence = LEGACY_REQUIRED];
}

message BinaryOperation {
    Expression left = 1 [features.field_presence = LEGACY_REQUIRED];
    Expression right = 2 [features.field_presence = LEGACY_REQUIRED];
    Type type = 3 [features.field_presence = LEGACY_REQUIRED];

    enum Type {
        option features.enum_type = CLOSED;
        MUL = 1;
        DIV = 2;
        MOD = 3;
        ADD = 4;
        SUB = 5;
        SHL = 6;
        SHR = 7;
        SHRU = 8;
        LT = 9;
        LTE = 10;
        GT = 11;
        GTE = 12;
        INSTANCEOF = 13;
        IN = 14;
        EQ = 15;
        NEQ = 16;
        REF_EQ = 17;
        REF_NEQ = 18;
        BIT_AND = 19;
        BIT_XOR = 20;
        BIT_OR = 21;
        AND = 22;
        OR = 23;
        ASG = 24;
        ASG_ADD = 25;
        ASG_SUB = 26;
        ASG_MUL = 27;
        ASG_DIV = 28;
        ASG_MOD = 29;
        ASG_SHL = 30;
        ASG_SHR = 31;
        ASG_SHRU = 32;
        ASG_BIT_AND = 33;
        ASG_BIT_OR = 34;
        ASG_BIT_XOR = 35;
        COMMA = 36;
    }
}

message UnaryOperation {
    Expression operand = 1 [features.field_presence = LEGACY_REQUIRED];
    Type type = 2 [features.field_presence = LEGACY_REQUIRED];
    bool postfix = 3 [features.field_presence = LEGACY_REQUIRED];

    enum Type {
        option features.enum_type = CLOSED;
        BIT_NOT = 1;
        DEC = 2;
        DELETE = 3;
        INC = 4;
        NEG = 5;
        POS = 6;
        NOT = 7;
        TYPEOF = 8;
        VOID = 9;
    }
}

message Conditional {
    Expression test_expression = 1 [features.field_presence = LEGACY_REQUIRED];
    Expression then_expression = 2 [features.field_presence = LEGACY_REQUIRED];
    Expression else_expression = 3 [features.field_presence = LEGACY_REQUIRED];
}

message ArrayAccess {
    Expression array = 1 [features.field_presence = LEGACY_REQUIRED];
    Expression index = 2 [features.field_presence = LEGACY_REQUIRED];
}

message NameReference {
    int32 name_id = 1 [features.field_presence = LEGACY_REQUIRED];
    Expression qualifier = 2;
    InlineStrategy inline_strategy = 3 [default=NOT_INLINE];
}

message PropertyReference {
    int32 string_id = 1 [features.field_presence = LEGACY_REQUIRED];
    Expression qualifier = 2;
    InlineStrategy inline_strategy = 3 [default=NOT_INLINE];
}

message Invocation {
    Expression qualifier = 1 [features.field_presence = LEGACY_REQUIRED];
    repeated Expression argument = 2;
    InlineStrategy inline_strategy = 3 [default=NOT_INLINE];
}

message Instantiation {
    Expression qualifier = 1 [features.field_presence = LEGACY_REQUIRED];
    repeated Expression argument = 2;
}


// Statements
//

message Statement {
    int32 fileId = 1;
    Location location = 2;
    bool synthetic = 3 [default = false];
    repeated Comment before_comments = 4;
    repeated Comment after_comments = 5;

    oneof statement {
        Return return_statement = 21;
        Throw throw_statement = 22;
        Break break_statement = 23;
        Continue continue_statement = 24;
        Debugger debugger = 25;
        ExpressionStatement expression = 26;
        Vars vars = 27;
        Block block = 28;
        CompositeBlock composite_block = 29;
        Label label = 30;
        If if_statement = 31;
        Switch switch_statement = 32;
        While while_statement = 33;
        DoWhile do_while_statement = 34;
        For for_statement = 35;
        ForIn for_in_statement = 36;
        Try try_statement = 37;
        Empty empty = 38;
        SingleLineComment single_line_comment = 39;
        MultiLineComment multi_line_comment = 40;
    }
}

message Return {
    Expression value = 1;
}

message Throw {
    Expression exception = 1 [features.field_presence = LEGACY_REQUIRED];
}

message Break {
    int32 label_id = 1;
}

message Continue {
    int32 label_id = 1;
}

message Debugger {
}

message ExpressionStatement {
    Expression expression = 1 [features.field_presence = LEGACY_REQUIRED];
    int32 exported_tag_id = 2;
}

message Vars {
    repeated VarDeclaration declaration = 1;
    bool multiline = 2 [default = false];
    int32 exported_package_id = 3;
}

message VarDeclaration {
    int32 name_id = 1 [features.field_presence = LEGACY_REQUIRED];
    Expression initial_value = 2;
    int32 fileId = 3;
    Location location = 4;
}

message Block {
    repeated Statement statement = 1;
}

message CompositeBlock {
    repeated Statement statement = 1;
}

message Label {
    int32 nameId = 1 [features.field_presence = LEGACY_REQUIRED];
    Statement inner_statement = 2 [features.field_presence = LEGACY_REQUIRED];
}

message If {
    Expression condition = 1 [features.field_presence = LEGACY_REQUIRED];
    Statement then_statement = 2 [features.field_presence = LEGACY_REQUIRED];
    Statement else_statement = 3;
}

message Switch {
    Expression expression = 1 [features.field_presence = LEGACY_REQUIRED];
    repeated SwitchEntry entry = 2;
}

message SwitchEntry {
    Expression label = 1;
    repeated Statement statement = 2;

    int32 fileId = 3;
    Location location = 4;
}

message While {
    Expression condition = 1 [features.field_presence = LEGACY_REQUIRED];
    Statement body = 2 [features.field_presence = LEGACY_REQUIRED];
}

message DoWhile {
    Expression condition = 1 [features.field_presence = LEGACY_REQUIRED];
    Statement body = 2 [features.field_presence = LEGACY_REQUIRED];
}

message For {
    oneof init {
        Statement variables = 1;
        Expression expression = 2;
        EmptyInit empty = 3;
    }
    Expression condition = 4;
    Expression increment = 5;
    Statement body = 6 [features.field_presence = LEGACY_REQUIRED];
}

message EmptyInit {
}

message ForIn {
    oneof value {
        int32 nameId = 1;
        Expression expression = 2;
    }
    Expression iterable = 3 [features.field_presence = LEGACY_REQUIRED];
    Statement body = 4 [features.field_presence = LEGACY_REQUIRED];
}

message Try {
    Statement tryBlock = 1 [features.field_presence = LEGACY_REQUIRED];
    Catch catchBlock = 2;
    Statement finallyBlock = 3;
}

message Catch {
    Parameter parameter = 1 [features.field_presence = LEGACY_REQUIRED];
    Statement body = 2 [features.field_presence = LEGACY_REQUIRED];
}

message Empty {
}

message SingleLineComment {
    string message = 1 [features.field_presence = LEGACY_REQUIRED];
}

message MultiLineComment {
    string message = 1 [features.field_presence = LEGACY_REQUIRED];
}

enum InlineStrategy {
    option features.enum_type = CLOSED;
    AS_FUNCTION = 0;
    IN_PLACE = 1;
    NOT_INLINE = 2;
}


// Fragment

message Fragment {
    repeated ImportedModule imported_module = 1;
    repeated Import import_entry = 2;
    CompositeBlock declaration_block = 3;
    CompositeBlock export_block = 4;
    CompositeBlock initializer_block = 5;
    repeated NameBinding name_binding = 6;
    repeated ClassModel class_model = 7;
    repeated Expression module_expression = 8;
    repeated InlineModule inline_module = 9;
    string package_fqn = 10;
    Statement tests_invocation = 11;
    Statement main_invocation = 12;
    repeated InlinedLocalDeclarations inlined_local_declarations = 13;
    repeated IrClassModel ir_class_model = 14;
    string dts = 15;
    int32 suite_function = 16;
    repeated int32 definitions = 17 [features.repeated_field_encoding = EXPANDED];
    CompositeBlock polyfills = 18;
    repeated int32 optionalCrossModuleImports = 19 [features.repeated_field_encoding = EXPANDED];
}

message InlinedLocalDeclarations {
    int32 tag = 1 [features.field_presence = LEGACY_REQUIRED];
    CompositeBlock block = 2 [features.field_presence = LEGACY_REQUIRED];
}

message ImportedModule {
    int32 external_name_id = 1 [features.field_presence = LEGACY_REQUIRED];
    int32 internal_name_id = 2 [features.field_presence = LEGACY_REQUIRED];
    Expression plain_reference = 3;
}

message Import {
    int32 signature_id = 1 [features.field_presence = LEGACY_REQUIRED];
    Expression expression = 2 [features.field_presence = LEGACY_REQUIRED];
}

message NameBinding {
    int32 signature_id = 1 [features.field_presence = LEGACY_REQUIRED];
    int32 nameId = 2 [features.field_presence = LEGACY_REQUIRED];
}

message ClassModel {
    int32 name_id = 1 [features.field_presence = LEGACY_REQUIRED];
    int32 super_name_id = 2;
    repeated int32 interface_name_id = 4 [features.repeated_field_encoding = EXPANDED];
    CompositeBlock post_declaration_block = 3;
}

message IrClassModel {
    int32 name_id = 1 [features.field_presence = LEGACY_REQUIRED];
    repeated int32 super_classes = 2 [features.repeated_field_encoding = EXPANDED];
    CompositeBlock pre_declaration_block = 3;
    CompositeBlock post_declaration_block = 4;
}

message InlineModule {
    int32 signature_id = 1 [features.field_presence = LEGACY_REQUIRED];
    int32 expression_id = 2 [features.field_presence = LEGACY_REQUIRED];
}

// Tables
//

message StringTable {
    repeated string entry = 1;
}

message NameTable {
    repeated Name entry = 1;
}

message Name {
    bool temporary = 1 [features.field_presence = LEGACY_REQUIRED];
    int32 identifier = 2;
    LocalAlias local_name_id = 3;
    bool imported = 4 [default = false];
    SpecialFunction special_function = 5;
}

message LocalAlias {
    int32 local_name_id = 1 [features.field_presence = LEGACY_REQUIRED];
    int32 tag = 2;
}

enum SpecialFunction {
    option features.enum_type = CLOSED;
    DEFINE_INLINE_FUNCTION = 1;
    WRAP_FUNCTION = 2;
    TO_BOXED_CHAR = 3;
    UNBOX_CHAR = 4;
    SUSPEND_CALL = 5;
    COROUTINE_RESULT = 6;
    COROUTINE_CONTROLLER = 7;
    COROUTINE_RECEIVER = 8;
    SET_COROUTINE_RESULT = 9;
    GET_KCLASS = 10;
    GET_REIFIED_TYPE_PARAMETER_KTYPE = 11;
}


// Chunk
//

message Chunk {
    StringTable string_table = 1 [features.field_presence = LEGACY_REQUIRED];
    NameTable name_table = 2 [features.field_presence = LEGACY_REQUIRED];
    Fragment fragment = 3 [features.field_presence = LEGACY_REQUIRED];
}

// InlineData
//

message InlineData {
    repeated string inline_function_tags = 1;
}
