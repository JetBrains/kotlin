FILE fqName:<root> fileName:/ArrayInlineExtensionTest.kt
  CLASS CLASS name:AtomicBooleanArrayInlineExtensionTest modality:FINAL visibility:public superTypes:[kotlin.Any]
    thisReceiver: VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> type:<root>.AtomicBooleanArrayInlineExtensionTest
    PROPERTY ATOMICFU_GENERATED_PROPERTY name:booleanArr visibility:private modality:FINAL [val]
      FIELD ATOMICFU_GENERATED_FIELD name:booleanArr type:kotlin.concurrent.AtomicIntArray visibility:private [final]
        EXPRESSION_BODY
          CONSTRUCTOR_CALL 'public constructor <init> (size: kotlin.Int) declared in kotlin.concurrent.AtomicIntArray' type=kotlin.concurrent.AtomicIntArray origin=null
            ARG size: CONST Int type=kotlin.Int value=10
      FUN ATOMICFU_GENERATED_PROPERTY_ACCESSOR name:<get-booleanArr> visibility:private modality:FINAL returnType:kotlin.concurrent.AtomicIntArray
        VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.AtomicBooleanArrayInlineExtensionTest
        correspondingProperty: PROPERTY ATOMICFU_GENERATED_PROPERTY name:booleanArr visibility:private modality:FINAL [val]
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='private final fun <get-booleanArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.AtomicBooleanArrayInlineExtensionTest'
            GET_FIELD 'FIELD ATOMICFU_GENERATED_FIELD name:booleanArr type:kotlin.concurrent.AtomicIntArray visibility:private [final] declared in <root>.AtomicBooleanArrayInlineExtensionTest' type=kotlin.concurrent.AtomicIntArray origin=null
              receiver: GET_VAR '<this>: <root>.AtomicBooleanArrayInlineExtensionTest declared in <root>.AtomicBooleanArrayInlineExtensionTest.<get-booleanArr>' type=<root>.AtomicBooleanArrayInlineExtensionTest origin=null
    CONSTRUCTOR visibility:public returnType:<root>.AtomicBooleanArrayInlineExtensionTest [primary]
      BLOCK_BODY
        DELEGATING_CONSTRUCTOR_CALL 'public constructor <init> () declared in kotlin.Any'
        INSTANCE_INITIALIZER_CALL classDescriptor='CLASS CLASS name:AtomicBooleanArrayInlineExtensionTest modality:FINAL visibility:public superTypes:[kotlin.Any]' type=kotlin.Unit
    FUN ATOMICFU_GENERATED_FUNCTION name:extensionLoop$atomicfu$ATOMIC_ARRAY$Boolean visibility:private modality:FINAL returnType:kotlin.Boolean [inline]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.AtomicBooleanArrayInlineExtensionTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.concurrent.AtomicIntArray
      VALUE_PARAMETER kind:Regular name:index$atomicfu index:2 type:kotlin.Int
      VALUE_PARAMETER kind:Regular name:to index:3 type:kotlin.Boolean
      BLOCK_BODY
        CALL 'private final fun loop$atomicfu$ATOMIC_ARRAY$Boolean (handler$atomicfu: kotlin.concurrent.AtomicIntArray, index$atomicfu: kotlin.Int, action$atomicfu: kotlin.Function1<kotlin.Boolean, kotlin.Unit>): kotlin.Unit declared in <root>.AtomicBooleanArrayInlineExtensionTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.AtomicBooleanArrayInlineExtensionTest declared in <root>.AtomicBooleanArrayInlineExtensionTest.extensionLoop$atomicfu$ATOMIC_ARRAY$Boolean' type=<root>.AtomicBooleanArrayInlineExtensionTest origin=null
          ARG handler$atomicfu: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicIntArray declared in <root>.AtomicBooleanArrayInlineExtensionTest.extensionLoop$atomicfu$ATOMIC_ARRAY$Boolean' type=kotlin.concurrent.AtomicIntArray origin=null
          ARG index$atomicfu: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.AtomicBooleanArrayInlineExtensionTest.extensionLoop$atomicfu$ATOMIC_ARRAY$Boolean' type=kotlin.Int origin=null
          ARG action$atomicfu: FUN_EXPR type=kotlin.Function1<kotlin.Boolean, kotlin.Unit> origin=LAMBDA
            FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Unit
              VALUE_PARAMETER kind:Regular name:cur index:0 type:kotlin.Boolean
              BLOCK_BODY
                WHEN type=kotlin.Unit origin=IF
                  BRANCH
                    if: CALL 'public final fun compareAndSet (index: kotlin.Int, expectedValue: kotlin.Int, newValue: kotlin.Int): kotlin.Boolean declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Boolean origin=null
                      ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicIntArray declared in <root>.AtomicBooleanArrayInlineExtensionTest.extensionLoop$atomicfu$ATOMIC_ARRAY$Boolean' type=kotlin.concurrent.AtomicIntArray origin=null
                      ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.AtomicBooleanArrayInlineExtensionTest.extensionLoop$atomicfu$ATOMIC_ARRAY$Boolean' type=kotlin.Int origin=null
                      ARG expectedValue: WHEN type=kotlin.Int origin=null
                        BRANCH
                          if: GET_VAR 'cur: kotlin.Boolean declared in <root>.AtomicBooleanArrayInlineExtensionTest.extensionLoop$atomicfu$ATOMIC_ARRAY$Boolean.<anonymous>' type=kotlin.Boolean origin=null
                          then: CONST Int type=kotlin.Int value=1
                        BRANCH
                          if: CONST Boolean type=kotlin.Boolean value=true
                          then: CONST Int type=kotlin.Int value=0
                      ARG newValue: WHEN type=kotlin.Int origin=null
                        BRANCH
                          if: GET_VAR 'to: kotlin.Boolean declared in <root>.AtomicBooleanArrayInlineExtensionTest.extensionLoop$atomicfu$ATOMIC_ARRAY$Boolean' type=kotlin.Boolean origin=null
                          then: CONST Int type=kotlin.Int value=1
                        BRANCH
                          if: CONST Boolean type=kotlin.Boolean value=true
                          then: CONST Int type=kotlin.Int value=0
                    then: RETURN type=kotlin.Nothing from='private final fun extensionLoop$atomicfu$ATOMIC_ARRAY$Boolean (handler$atomicfu: kotlin.concurrent.AtomicIntArray, index$atomicfu: kotlin.Int, to: kotlin.Boolean): kotlin.Boolean declared in <root>.AtomicBooleanArrayInlineExtensionTest'
                      TYPE_OP type=kotlin.Boolean origin=CAST typeOperand=kotlin.Boolean
                        CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                          ARG arg0: CALL 'public final fun get (index: kotlin.Int): kotlin.Int declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Int origin=null
                            ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicIntArray declared in <root>.AtomicBooleanArrayInlineExtensionTest.extensionLoop$atomicfu$ATOMIC_ARRAY$Boolean' type=kotlin.concurrent.AtomicIntArray origin=null
                            ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.AtomicBooleanArrayInlineExtensionTest.extensionLoop$atomicfu$ATOMIC_ARRAY$Boolean' type=kotlin.Int origin=null
                          ARG arg1: CONST Int type=kotlin.Int value=1
    FUN ATOMICFU_GENERATED_FUNCTION name:extensionLoop$atomicfu$NATIVE_PROPERTY_REF$Boolean visibility:private modality:FINAL returnType:kotlin.Boolean [inline]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.AtomicBooleanArrayInlineExtensionTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Boolean>> [crossinline]
      VALUE_PARAMETER kind:Regular name:to index:2 type:kotlin.Boolean
      BLOCK_BODY
        CALL 'private final fun loop$atomicfu$NATIVE_PROPERTY_REF$Boolean (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Boolean>>, action$atomicfu: kotlin.Function1<kotlin.Boolean, kotlin.Unit>): kotlin.Unit declared in <root>.AtomicBooleanArrayInlineExtensionTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.AtomicBooleanArrayInlineExtensionTest declared in <root>.AtomicBooleanArrayInlineExtensionTest.extensionLoop$atomicfu$NATIVE_PROPERTY_REF$Boolean' type=<root>.AtomicBooleanArrayInlineExtensionTest origin=null
          ARG handler$atomicfu: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Boolean>> declared in <root>.AtomicBooleanArrayInlineExtensionTest.extensionLoop$atomicfu$NATIVE_PROPERTY_REF$Boolean' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Boolean>> origin=null
          ARG action$atomicfu: FUN_EXPR type=kotlin.Function1<kotlin.Boolean, kotlin.Unit> origin=LAMBDA
            FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Unit
              VALUE_PARAMETER kind:Regular name:cur index:0 type:kotlin.Boolean
              BLOCK_BODY
                WHEN type=kotlin.Unit origin=IF
                  BRANCH
                    if: CALL 'internal final fun compareAndSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.compareAndSetField>, expectedValue: T of kotlin.concurrent.compareAndSetField, newValue: T of kotlin.concurrent.compareAndSetField): kotlin.Boolean declared in kotlin.concurrent' type=kotlin.Boolean origin=null
                      TYPE_ARG T: kotlin.Boolean
                      ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                        ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Boolean>> declared in <root>.AtomicBooleanArrayInlineExtensionTest.extensionLoop$atomicfu$NATIVE_PROPERTY_REF$Boolean' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Boolean>> origin=null
                      ARG expectedValue: GET_VAR 'cur: kotlin.Boolean declared in <root>.AtomicBooleanArrayInlineExtensionTest.extensionLoop$atomicfu$NATIVE_PROPERTY_REF$Boolean.<anonymous>' type=kotlin.Boolean origin=null
                      ARG newValue: GET_VAR 'to: kotlin.Boolean declared in <root>.AtomicBooleanArrayInlineExtensionTest.extensionLoop$atomicfu$NATIVE_PROPERTY_REF$Boolean' type=kotlin.Boolean origin=null
                    then: RETURN type=kotlin.Nothing from='private final fun extensionLoop$atomicfu$NATIVE_PROPERTY_REF$Boolean (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Boolean>>, to: kotlin.Boolean): kotlin.Boolean declared in <root>.AtomicBooleanArrayInlineExtensionTest'
                      TYPE_OP type=kotlin.Boolean origin=CAST typeOperand=kotlin.Boolean
                        CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                          TYPE_ARG T: kotlin.Boolean
                          ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                            ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Boolean>> declared in <root>.AtomicBooleanArrayInlineExtensionTest.extensionLoop$atomicfu$NATIVE_PROPERTY_REF$Boolean' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Boolean>> origin=null
    FUN ATOMICFU_GENERATED_FUNCTION name:extensionLoopExpression$atomicfu$ATOMIC_ARRAY$Boolean visibility:private modality:FINAL returnType:kotlin.Boolean [inline]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.AtomicBooleanArrayInlineExtensionTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.concurrent.AtomicIntArray
      VALUE_PARAMETER kind:Regular name:index$atomicfu index:2 type:kotlin.Int
      VALUE_PARAMETER kind:Regular name:to index:3 type:kotlin.Boolean
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='private final fun extensionLoopExpression$atomicfu$ATOMIC_ARRAY$Boolean (handler$atomicfu: kotlin.concurrent.AtomicIntArray, index$atomicfu: kotlin.Int, to: kotlin.Boolean): kotlin.Boolean declared in <root>.AtomicBooleanArrayInlineExtensionTest'
          CALL 'private final fun loop$atomicfu$ATOMIC_ARRAY$Boolean (handler$atomicfu: kotlin.concurrent.AtomicIntArray, index$atomicfu: kotlin.Int, action$atomicfu: kotlin.Function1<kotlin.Boolean, kotlin.Unit>): kotlin.Unit declared in <root>.AtomicBooleanArrayInlineExtensionTest' type=kotlin.Unit origin=null
            ARG <this>: GET_VAR '<this>: <root>.AtomicBooleanArrayInlineExtensionTest declared in <root>.AtomicBooleanArrayInlineExtensionTest.extensionLoopExpression$atomicfu$ATOMIC_ARRAY$Boolean' type=<root>.AtomicBooleanArrayInlineExtensionTest origin=null
            ARG handler$atomicfu: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicIntArray declared in <root>.AtomicBooleanArrayInlineExtensionTest.extensionLoopExpression$atomicfu$ATOMIC_ARRAY$Boolean' type=kotlin.concurrent.AtomicIntArray origin=null
            ARG index$atomicfu: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.AtomicBooleanArrayInlineExtensionTest.extensionLoopExpression$atomicfu$ATOMIC_ARRAY$Boolean' type=kotlin.Int origin=null
            ARG action$atomicfu: FUN_EXPR type=kotlin.Function1<kotlin.Boolean, kotlin.Unit> origin=LAMBDA
              FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Unit
                VALUE_PARAMETER kind:Regular name:cur index:0 type:kotlin.Boolean
                BLOCK_BODY
                  CALL 'public final fun set (index: kotlin.Int, newValue: kotlin.Int): kotlin.Unit declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Unit origin=null
                    ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicIntArray declared in <root>.AtomicBooleanArrayInlineExtensionTest.extensionLoopExpression$atomicfu$ATOMIC_ARRAY$Boolean' type=kotlin.concurrent.AtomicIntArray origin=null
                    ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.AtomicBooleanArrayInlineExtensionTest.extensionLoopExpression$atomicfu$ATOMIC_ARRAY$Boolean' type=kotlin.Int origin=null
                    ARG newValue: WHEN type=kotlin.Int origin=null
                      BRANCH
                        if: CONST Boolean type=kotlin.Boolean value=false
                        then: CONST Int type=kotlin.Int value=1
                      BRANCH
                        if: CONST Boolean type=kotlin.Boolean value=true
                        then: CONST Int type=kotlin.Int value=0
                  RETURN type=kotlin.Nothing from='private final fun extensionLoopExpression$atomicfu$ATOMIC_ARRAY$Boolean (handler$atomicfu: kotlin.concurrent.AtomicIntArray, index$atomicfu: kotlin.Int, to: kotlin.Boolean): kotlin.Boolean declared in <root>.AtomicBooleanArrayInlineExtensionTest'
                    WHEN type=kotlin.Boolean origin=IF
                      BRANCH
                        if: CALL 'public final fun compareAndSet (index: kotlin.Int, expectedValue: kotlin.Int, newValue: kotlin.Int): kotlin.Boolean declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Boolean origin=null
                          ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicIntArray declared in <root>.AtomicBooleanArrayInlineExtensionTest.extensionLoopExpression$atomicfu$ATOMIC_ARRAY$Boolean' type=kotlin.concurrent.AtomicIntArray origin=null
                          ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.AtomicBooleanArrayInlineExtensionTest.extensionLoopExpression$atomicfu$ATOMIC_ARRAY$Boolean' type=kotlin.Int origin=null
                          ARG expectedValue: WHEN type=kotlin.Int origin=null
                            BRANCH
                              if: GET_VAR 'cur: kotlin.Boolean declared in <root>.AtomicBooleanArrayInlineExtensionTest.extensionLoopExpression$atomicfu$ATOMIC_ARRAY$Boolean.<anonymous>' type=kotlin.Boolean origin=null
                              then: CONST Int type=kotlin.Int value=1
                            BRANCH
                              if: CONST Boolean type=kotlin.Boolean value=true
                              then: CONST Int type=kotlin.Int value=0
                          ARG newValue: WHEN type=kotlin.Int origin=null
                            BRANCH
                              if: GET_VAR 'to: kotlin.Boolean declared in <root>.AtomicBooleanArrayInlineExtensionTest.extensionLoopExpression$atomicfu$ATOMIC_ARRAY$Boolean' type=kotlin.Boolean origin=null
                              then: CONST Int type=kotlin.Int value=1
                            BRANCH
                              if: CONST Boolean type=kotlin.Boolean value=true
                              then: CONST Int type=kotlin.Int value=0
                        then: TYPE_OP type=kotlin.Boolean origin=CAST typeOperand=kotlin.Boolean
                          CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                            ARG arg0: CALL 'public final fun get (index: kotlin.Int): kotlin.Int declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Int origin=null
                              ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicIntArray declared in <root>.AtomicBooleanArrayInlineExtensionTest.extensionLoopExpression$atomicfu$ATOMIC_ARRAY$Boolean' type=kotlin.concurrent.AtomicIntArray origin=null
                              ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.AtomicBooleanArrayInlineExtensionTest.extensionLoopExpression$atomicfu$ATOMIC_ARRAY$Boolean' type=kotlin.Int origin=null
                            ARG arg1: CONST Int type=kotlin.Int value=1
                      BRANCH
                        if: CONST Boolean type=kotlin.Boolean value=true
                        then: CALL 'public final fun not (): kotlin.Boolean declared in kotlin.Boolean' type=kotlin.Boolean origin=null
                          ARG <this>: TYPE_OP type=kotlin.Boolean origin=CAST typeOperand=kotlin.Boolean
                            CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                              ARG arg0: CALL 'public final fun get (index: kotlin.Int): kotlin.Int declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Int origin=null
                                ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicIntArray declared in <root>.AtomicBooleanArrayInlineExtensionTest.extensionLoopExpression$atomicfu$ATOMIC_ARRAY$Boolean' type=kotlin.concurrent.AtomicIntArray origin=null
                                ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.AtomicBooleanArrayInlineExtensionTest.extensionLoopExpression$atomicfu$ATOMIC_ARRAY$Boolean' type=kotlin.Int origin=null
                              ARG arg1: CONST Int type=kotlin.Int value=1
    FUN ATOMICFU_GENERATED_FUNCTION name:extensionLoopExpression$atomicfu$NATIVE_PROPERTY_REF$Boolean visibility:private modality:FINAL returnType:kotlin.Boolean [inline]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.AtomicBooleanArrayInlineExtensionTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Boolean>> [crossinline]
      VALUE_PARAMETER kind:Regular name:to index:2 type:kotlin.Boolean
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='private final fun extensionLoopExpression$atomicfu$NATIVE_PROPERTY_REF$Boolean (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Boolean>>, to: kotlin.Boolean): kotlin.Boolean declared in <root>.AtomicBooleanArrayInlineExtensionTest'
          CALL 'private final fun loop$atomicfu$NATIVE_PROPERTY_REF$Boolean (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Boolean>>, action$atomicfu: kotlin.Function1<kotlin.Boolean, kotlin.Unit>): kotlin.Unit declared in <root>.AtomicBooleanArrayInlineExtensionTest' type=kotlin.Unit origin=null
            ARG <this>: GET_VAR '<this>: <root>.AtomicBooleanArrayInlineExtensionTest declared in <root>.AtomicBooleanArrayInlineExtensionTest.extensionLoopExpression$atomicfu$NATIVE_PROPERTY_REF$Boolean' type=<root>.AtomicBooleanArrayInlineExtensionTest origin=null
            ARG handler$atomicfu: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Boolean>> declared in <root>.AtomicBooleanArrayInlineExtensionTest.extensionLoopExpression$atomicfu$NATIVE_PROPERTY_REF$Boolean' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Boolean>> origin=null
            ARG action$atomicfu: FUN_EXPR type=kotlin.Function1<kotlin.Boolean, kotlin.Unit> origin=LAMBDA
              FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Unit
                VALUE_PARAMETER kind:Regular name:cur index:0 type:kotlin.Boolean
                BLOCK_BODY
                  CALL 'internal final fun atomicSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicSetField>, newValue: T of kotlin.concurrent.atomicSetField): kotlin.Unit declared in kotlin.concurrent' type=kotlin.Unit origin=null
                    TYPE_ARG T: kotlin.Boolean
                    ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                      ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Boolean>> declared in <root>.AtomicBooleanArrayInlineExtensionTest.extensionLoopExpression$atomicfu$NATIVE_PROPERTY_REF$Boolean' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Boolean>> origin=null
                    ARG newValue: CONST Boolean type=kotlin.Boolean value=false
                  RETURN type=kotlin.Nothing from='private final fun extensionLoopExpression$atomicfu$NATIVE_PROPERTY_REF$Boolean (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Boolean>>, to: kotlin.Boolean): kotlin.Boolean declared in <root>.AtomicBooleanArrayInlineExtensionTest'
                    WHEN type=kotlin.Boolean origin=IF
                      BRANCH
                        if: CALL 'internal final fun compareAndSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.compareAndSetField>, expectedValue: T of kotlin.concurrent.compareAndSetField, newValue: T of kotlin.concurrent.compareAndSetField): kotlin.Boolean declared in kotlin.concurrent' type=kotlin.Boolean origin=null
                          TYPE_ARG T: kotlin.Boolean
                          ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                            ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Boolean>> declared in <root>.AtomicBooleanArrayInlineExtensionTest.extensionLoopExpression$atomicfu$NATIVE_PROPERTY_REF$Boolean' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Boolean>> origin=null
                          ARG expectedValue: GET_VAR 'cur: kotlin.Boolean declared in <root>.AtomicBooleanArrayInlineExtensionTest.extensionLoopExpression$atomicfu$NATIVE_PROPERTY_REF$Boolean.<anonymous>' type=kotlin.Boolean origin=null
                          ARG newValue: GET_VAR 'to: kotlin.Boolean declared in <root>.AtomicBooleanArrayInlineExtensionTest.extensionLoopExpression$atomicfu$NATIVE_PROPERTY_REF$Boolean' type=kotlin.Boolean origin=null
                        then: TYPE_OP type=kotlin.Boolean origin=CAST typeOperand=kotlin.Boolean
                          CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                            TYPE_ARG T: kotlin.Boolean
                            ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                              ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Boolean>> declared in <root>.AtomicBooleanArrayInlineExtensionTest.extensionLoopExpression$atomicfu$NATIVE_PROPERTY_REF$Boolean' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Boolean>> origin=null
                      BRANCH
                        if: CONST Boolean type=kotlin.Boolean value=true
                        then: CALL 'public final fun not (): kotlin.Boolean declared in kotlin.Boolean' type=kotlin.Boolean origin=null
                          ARG <this>: TYPE_OP type=kotlin.Boolean origin=CAST typeOperand=kotlin.Boolean
                            CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                              TYPE_ARG T: kotlin.Boolean
                              ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                                ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Boolean>> declared in <root>.AtomicBooleanArrayInlineExtensionTest.extensionLoopExpression$atomicfu$NATIVE_PROPERTY_REF$Boolean' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Boolean>> origin=null
    FUN ATOMICFU_GENERATED_FUNCTION name:extensionLoopMixedReceivers$atomicfu$ATOMIC_ARRAY$Boolean visibility:private modality:FINAL returnType:kotlin.Boolean [inline]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.AtomicBooleanArrayInlineExtensionTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.concurrent.AtomicIntArray
      VALUE_PARAMETER kind:Regular name:index$atomicfu index:2 type:kotlin.Int
      VALUE_PARAMETER kind:Regular name:first index:3 type:kotlin.Boolean
      VALUE_PARAMETER kind:Regular name:second index:4 type:kotlin.Boolean
      VALUE_PARAMETER kind:Regular name:index index:5 type:kotlin.Int
      BLOCK_BODY
        CALL 'private final fun loop$atomicfu$ATOMIC_ARRAY$Boolean (handler$atomicfu: kotlin.concurrent.AtomicIntArray, index$atomicfu: kotlin.Int, action$atomicfu: kotlin.Function1<kotlin.Boolean, kotlin.Unit>): kotlin.Unit declared in <root>.AtomicBooleanArrayInlineExtensionTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.AtomicBooleanArrayInlineExtensionTest declared in <root>.AtomicBooleanArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$ATOMIC_ARRAY$Boolean' type=<root>.AtomicBooleanArrayInlineExtensionTest origin=null
          ARG handler$atomicfu: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicIntArray declared in <root>.AtomicBooleanArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$ATOMIC_ARRAY$Boolean' type=kotlin.concurrent.AtomicIntArray origin=null
          ARG index$atomicfu: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.AtomicBooleanArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$ATOMIC_ARRAY$Boolean' type=kotlin.Int origin=null
          ARG action$atomicfu: FUN_EXPR type=kotlin.Function1<kotlin.Boolean, kotlin.Unit> origin=LAMBDA
            FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Unit
              VALUE_PARAMETER kind:Regular name:cur index:0 type:kotlin.Boolean
              BLOCK_BODY
                TYPE_OP type=kotlin.Unit origin=IMPLICIT_COERCION_TO_UNIT typeOperand=kotlin.Unit
                  CALL 'public final fun compareAndSet (index: kotlin.Int, expectedValue: kotlin.Int, newValue: kotlin.Int): kotlin.Boolean declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Boolean origin=null
                    ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicIntArray declared in <root>.AtomicBooleanArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$ATOMIC_ARRAY$Boolean' type=kotlin.concurrent.AtomicIntArray origin=null
                    ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.AtomicBooleanArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$ATOMIC_ARRAY$Boolean' type=kotlin.Int origin=null
                    ARG expectedValue: WHEN type=kotlin.Int origin=null
                      BRANCH
                        if: GET_VAR 'cur: kotlin.Boolean declared in <root>.AtomicBooleanArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$ATOMIC_ARRAY$Boolean.<anonymous>' type=kotlin.Boolean origin=null
                        then: CONST Int type=kotlin.Int value=1
                      BRANCH
                        if: CONST Boolean type=kotlin.Boolean value=true
                        then: CONST Int type=kotlin.Int value=0
                    ARG newValue: WHEN type=kotlin.Int origin=null
                      BRANCH
                        if: GET_VAR 'first: kotlin.Boolean declared in <root>.AtomicBooleanArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$ATOMIC_ARRAY$Boolean' type=kotlin.Boolean origin=null
                        then: CONST Int type=kotlin.Int value=1
                      BRANCH
                        if: CONST Boolean type=kotlin.Boolean value=true
                        then: CONST Int type=kotlin.Int value=0
                TYPE_OP type=kotlin.Unit origin=IMPLICIT_COERCION_TO_UNIT typeOperand=kotlin.Unit
                  CALL 'public final fun compareAndSet (index: kotlin.Int, expectedValue: kotlin.Int, newValue: kotlin.Int): kotlin.Boolean declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Boolean origin=null
                    ARG <this>: CALL 'private final fun <get-booleanArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.AtomicBooleanArrayInlineExtensionTest' type=kotlin.concurrent.AtomicIntArray origin=null
                      ARG <this>: GET_VAR '<this>: <root>.AtomicBooleanArrayInlineExtensionTest declared in <root>.AtomicBooleanArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$ATOMIC_ARRAY$Boolean' type=<root>.AtomicBooleanArrayInlineExtensionTest origin=null
                    ARG index: GET_VAR 'index: kotlin.Int declared in <root>.AtomicBooleanArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$ATOMIC_ARRAY$Boolean' type=kotlin.Int origin=null
                    ARG expectedValue: WHEN type=kotlin.Int origin=null
                      BRANCH
                        if: GET_VAR 'first: kotlin.Boolean declared in <root>.AtomicBooleanArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$ATOMIC_ARRAY$Boolean' type=kotlin.Boolean origin=null
                        then: CONST Int type=kotlin.Int value=1
                      BRANCH
                        if: CONST Boolean type=kotlin.Boolean value=true
                        then: CONST Int type=kotlin.Int value=0
                    ARG newValue: WHEN type=kotlin.Int origin=null
                      BRANCH
                        if: GET_VAR 'second: kotlin.Boolean declared in <root>.AtomicBooleanArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$ATOMIC_ARRAY$Boolean' type=kotlin.Boolean origin=null
                        then: CONST Int type=kotlin.Int value=1
                      BRANCH
                        if: CONST Boolean type=kotlin.Boolean value=true
                        then: CONST Int type=kotlin.Int value=0
                RETURN type=kotlin.Nothing from='private final fun extensionLoopMixedReceivers$atomicfu$ATOMIC_ARRAY$Boolean (handler$atomicfu: kotlin.concurrent.AtomicIntArray, index$atomicfu: kotlin.Int, first: kotlin.Boolean, second: kotlin.Boolean, index: kotlin.Int): kotlin.Boolean declared in <root>.AtomicBooleanArrayInlineExtensionTest'
                  TYPE_OP type=kotlin.Boolean origin=CAST typeOperand=kotlin.Boolean
                    CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                      ARG arg0: CALL 'public final fun get (index: kotlin.Int): kotlin.Int declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Int origin=null
                        ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicIntArray declared in <root>.AtomicBooleanArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$ATOMIC_ARRAY$Boolean' type=kotlin.concurrent.AtomicIntArray origin=null
                        ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.AtomicBooleanArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$ATOMIC_ARRAY$Boolean' type=kotlin.Int origin=null
                      ARG arg1: CONST Int type=kotlin.Int value=1
    FUN ATOMICFU_GENERATED_FUNCTION name:extensionLoopMixedReceivers$atomicfu$NATIVE_PROPERTY_REF$Boolean visibility:private modality:FINAL returnType:kotlin.Boolean [inline]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.AtomicBooleanArrayInlineExtensionTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Boolean>> [crossinline]
      VALUE_PARAMETER kind:Regular name:first index:2 type:kotlin.Boolean
      VALUE_PARAMETER kind:Regular name:second index:3 type:kotlin.Boolean
      VALUE_PARAMETER kind:Regular name:index index:4 type:kotlin.Int
      BLOCK_BODY
        CALL 'private final fun loop$atomicfu$NATIVE_PROPERTY_REF$Boolean (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Boolean>>, action$atomicfu: kotlin.Function1<kotlin.Boolean, kotlin.Unit>): kotlin.Unit declared in <root>.AtomicBooleanArrayInlineExtensionTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.AtomicBooleanArrayInlineExtensionTest declared in <root>.AtomicBooleanArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$NATIVE_PROPERTY_REF$Boolean' type=<root>.AtomicBooleanArrayInlineExtensionTest origin=null
          ARG handler$atomicfu: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Boolean>> declared in <root>.AtomicBooleanArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$NATIVE_PROPERTY_REF$Boolean' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Boolean>> origin=null
          ARG action$atomicfu: FUN_EXPR type=kotlin.Function1<kotlin.Boolean, kotlin.Unit> origin=LAMBDA
            FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Unit
              VALUE_PARAMETER kind:Regular name:cur index:0 type:kotlin.Boolean
              BLOCK_BODY
                TYPE_OP type=kotlin.Unit origin=IMPLICIT_COERCION_TO_UNIT typeOperand=kotlin.Unit
                  CALL 'internal final fun compareAndSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.compareAndSetField>, expectedValue: T of kotlin.concurrent.compareAndSetField, newValue: T of kotlin.concurrent.compareAndSetField): kotlin.Boolean declared in kotlin.concurrent' type=kotlin.Boolean origin=null
                    TYPE_ARG T: kotlin.Boolean
                    ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                      ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Boolean>> declared in <root>.AtomicBooleanArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$NATIVE_PROPERTY_REF$Boolean' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Boolean>> origin=null
                    ARG expectedValue: GET_VAR 'cur: kotlin.Boolean declared in <root>.AtomicBooleanArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$NATIVE_PROPERTY_REF$Boolean.<anonymous>' type=kotlin.Boolean origin=null
                    ARG newValue: GET_VAR 'first: kotlin.Boolean declared in <root>.AtomicBooleanArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$NATIVE_PROPERTY_REF$Boolean' type=kotlin.Boolean origin=null
                TYPE_OP type=kotlin.Unit origin=IMPLICIT_COERCION_TO_UNIT typeOperand=kotlin.Unit
                  CALL 'public final fun compareAndSet (index: kotlin.Int, expectedValue: kotlin.Int, newValue: kotlin.Int): kotlin.Boolean declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Boolean origin=null
                    ARG <this>: CALL 'private final fun <get-booleanArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.AtomicBooleanArrayInlineExtensionTest' type=kotlin.concurrent.AtomicIntArray origin=null
                      ARG <this>: GET_VAR '<this>: <root>.AtomicBooleanArrayInlineExtensionTest declared in <root>.AtomicBooleanArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$NATIVE_PROPERTY_REF$Boolean' type=<root>.AtomicBooleanArrayInlineExtensionTest origin=null
                    ARG index: GET_VAR 'index: kotlin.Int declared in <root>.AtomicBooleanArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$NATIVE_PROPERTY_REF$Boolean' type=kotlin.Int origin=null
                    ARG expectedValue: WHEN type=kotlin.Int origin=null
                      BRANCH
                        if: GET_VAR 'first: kotlin.Boolean declared in <root>.AtomicBooleanArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$NATIVE_PROPERTY_REF$Boolean' type=kotlin.Boolean origin=null
                        then: CONST Int type=kotlin.Int value=1
                      BRANCH
                        if: CONST Boolean type=kotlin.Boolean value=true
                        then: CONST Int type=kotlin.Int value=0
                    ARG newValue: WHEN type=kotlin.Int origin=null
                      BRANCH
                        if: GET_VAR 'second: kotlin.Boolean declared in <root>.AtomicBooleanArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$NATIVE_PROPERTY_REF$Boolean' type=kotlin.Boolean origin=null
                        then: CONST Int type=kotlin.Int value=1
                      BRANCH
                        if: CONST Boolean type=kotlin.Boolean value=true
                        then: CONST Int type=kotlin.Int value=0
                RETURN type=kotlin.Nothing from='private final fun extensionLoopMixedReceivers$atomicfu$NATIVE_PROPERTY_REF$Boolean (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Boolean>>, first: kotlin.Boolean, second: kotlin.Boolean, index: kotlin.Int): kotlin.Boolean declared in <root>.AtomicBooleanArrayInlineExtensionTest'
                  TYPE_OP type=kotlin.Boolean origin=CAST typeOperand=kotlin.Boolean
                    CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                      TYPE_ARG T: kotlin.Boolean
                      ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                        ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Boolean>> declared in <root>.AtomicBooleanArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$NATIVE_PROPERTY_REF$Boolean' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Boolean>> origin=null
    FUN ATOMICFU_GENERATED_FUNCTION name:loop$atomicfu$ATOMIC_ARRAY$Boolean visibility:private modality:FINAL returnType:kotlin.Unit [inline]
      VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.AtomicBooleanArrayInlineExtensionTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.concurrent.AtomicIntArray
      VALUE_PARAMETER kind:Regular name:index$atomicfu index:2 type:kotlin.Int
      VALUE_PARAMETER kind:Regular name:action$atomicfu index:3 type:kotlin.Function1<kotlin.Boolean, kotlin.Unit>
      BLOCK_BODY
        WHILE label=null origin=null
          condition: CONST Boolean type=kotlin.Boolean value=true
          body: BLOCK type=R of kotlin.Function1 origin=null
            VAR IR_TEMPORARY_VARIABLE name:tmp_0 type:kotlin.Boolean [val]
              CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                ARG arg0: CALL 'public final fun get (index: kotlin.Int): kotlin.Int declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Int origin=null
                  ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicIntArray declared in <root>.AtomicBooleanArrayInlineExtensionTest.loop$atomicfu$ATOMIC_ARRAY$Boolean' type=kotlin.concurrent.AtomicIntArray origin=null
                  ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.AtomicBooleanArrayInlineExtensionTest.loop$atomicfu$ATOMIC_ARRAY$Boolean' type=kotlin.Int origin=null
                ARG arg1: CONST Int type=kotlin.Int value=1
            CALL 'public abstract fun invoke (p1: P1 of kotlin.Function1): R of kotlin.Function1 declared in kotlin.Function1' type=R of kotlin.Function1 origin=null
              ARG <this>: GET_VAR 'action$atomicfu: kotlin.Function1<kotlin.Boolean, kotlin.Unit> declared in <root>.AtomicBooleanArrayInlineExtensionTest.loop$atomicfu$ATOMIC_ARRAY$Boolean' type=kotlin.Function1<kotlin.Boolean, kotlin.Unit> origin=null
              ARG p1: GET_VAR 'val tmp_0: kotlin.Boolean declared in <root>.AtomicBooleanArrayInlineExtensionTest.loop$atomicfu$ATOMIC_ARRAY$Boolean' type=kotlin.Boolean origin=null
    FUN ATOMICFU_GENERATED_FUNCTION name:loop$atomicfu$NATIVE_PROPERTY_REF$Boolean visibility:private modality:FINAL returnType:kotlin.Unit [inline]
      VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.AtomicBooleanArrayInlineExtensionTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Boolean>> [crossinline]
      VALUE_PARAMETER kind:Regular name:action$atomicfu index:2 type:kotlin.Function1<kotlin.Boolean, kotlin.Unit>
      BLOCK_BODY
        WHILE label=null origin=null
          condition: CONST Boolean type=kotlin.Boolean value=true
          body: BLOCK type=R of kotlin.Function1 origin=null
            VAR IR_TEMPORARY_VARIABLE name:tmp_1 type:T of kotlin.concurrent.atomicGetField [val]
              CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                TYPE_ARG T: kotlin.Boolean
                ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                  ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Boolean>> declared in <root>.AtomicBooleanArrayInlineExtensionTest.loop$atomicfu$NATIVE_PROPERTY_REF$Boolean' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Boolean>> origin=null
            CALL 'public abstract fun invoke (p1: P1 of kotlin.Function1): R of kotlin.Function1 declared in kotlin.Function1' type=R of kotlin.Function1 origin=null
              ARG <this>: GET_VAR 'action$atomicfu: kotlin.Function1<kotlin.Boolean, kotlin.Unit> declared in <root>.AtomicBooleanArrayInlineExtensionTest.loop$atomicfu$NATIVE_PROPERTY_REF$Boolean' type=kotlin.Function1<kotlin.Boolean, kotlin.Unit> origin=null
              ARG p1: GET_VAR 'val tmp_1: T of kotlin.concurrent.atomicGetField declared in <root>.AtomicBooleanArrayInlineExtensionTest.loop$atomicfu$NATIVE_PROPERTY_REF$Boolean' type=T of kotlin.concurrent.atomicGetField origin=null
    FUN FAKE_OVERRIDE name:equals visibility:public modality:OPEN returnType:kotlin.Boolean [fake_override,operator]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Any
      VALUE_PARAMETER kind:Regular name:other index:1 type:kotlin.Any?
      overridden:
        public open fun equals (other: kotlin.Any?): kotlin.Boolean declared in kotlin.Any
    FUN FAKE_OVERRIDE name:hashCode visibility:public modality:OPEN returnType:kotlin.Int [fake_override]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Any
      overridden:
        public open fun hashCode (): kotlin.Int declared in kotlin.Any
    FUN FAKE_OVERRIDE name:toString visibility:public modality:OPEN returnType:kotlin.String [fake_override]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Any
      overridden:
        public open fun toString (): kotlin.String declared in kotlin.Any
    FUN name:casLoop visibility:private modality:FINAL returnType:kotlin.Boolean [inline]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.AtomicBooleanArrayInlineExtensionTest
      VALUE_PARAMETER kind:Regular name:to index:1 type:kotlin.Boolean
      BLOCK_BODY
        CALL 'private final fun loop$atomicfu$ATOMIC_ARRAY$Boolean (handler$atomicfu: kotlin.concurrent.AtomicIntArray, index$atomicfu: kotlin.Int, action$atomicfu: kotlin.Function1<kotlin.Boolean, kotlin.Unit>): kotlin.Unit declared in <root>.AtomicBooleanArrayInlineExtensionTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.AtomicBooleanArrayInlineExtensionTest declared in <root>.AtomicBooleanArrayInlineExtensionTest.casLoop' type=<root>.AtomicBooleanArrayInlineExtensionTest origin=null
          ARG handler$atomicfu: CALL 'private final fun <get-booleanArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.AtomicBooleanArrayInlineExtensionTest' type=kotlin.concurrent.AtomicIntArray origin=null
            ARG <this>: GET_VAR '<this>: <root>.AtomicBooleanArrayInlineExtensionTest declared in <root>.AtomicBooleanArrayInlineExtensionTest.casLoop' type=<root>.AtomicBooleanArrayInlineExtensionTest origin=IMPLICIT_ARGUMENT
          ARG index$atomicfu: CONST Int type=kotlin.Int value=0
          ARG action$atomicfu: FUN_EXPR type=kotlin.Function1<kotlin.Boolean, kotlin.Unit> origin=LAMBDA
            FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Unit
              VALUE_PARAMETER kind:Regular name:cur index:0 type:kotlin.Boolean
              BLOCK_BODY
                WHEN type=kotlin.Unit origin=IF
                  BRANCH
                    if: CALL 'public final fun compareAndSet (index: kotlin.Int, expectedValue: kotlin.Int, newValue: kotlin.Int): kotlin.Boolean declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Boolean origin=null
                      ARG <this>: CALL 'private final fun <get-booleanArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.AtomicBooleanArrayInlineExtensionTest' type=kotlin.concurrent.AtomicIntArray origin=null
                        ARG <this>: GET_VAR '<this>: <root>.AtomicBooleanArrayInlineExtensionTest declared in <root>.AtomicBooleanArrayInlineExtensionTest.casLoop' type=<root>.AtomicBooleanArrayInlineExtensionTest origin=IMPLICIT_ARGUMENT
                      ARG index: CONST Int type=kotlin.Int value=0
                      ARG expectedValue: WHEN type=kotlin.Int origin=null
                        BRANCH
                          if: GET_VAR 'cur: kotlin.Boolean declared in <root>.AtomicBooleanArrayInlineExtensionTest.casLoop.<anonymous>' type=kotlin.Boolean origin=null
                          then: CONST Int type=kotlin.Int value=1
                        BRANCH
                          if: CONST Boolean type=kotlin.Boolean value=true
                          then: CONST Int type=kotlin.Int value=0
                      ARG newValue: WHEN type=kotlin.Int origin=null
                        BRANCH
                          if: GET_VAR 'to: kotlin.Boolean declared in <root>.AtomicBooleanArrayInlineExtensionTest.casLoop' type=kotlin.Boolean origin=null
                          then: CONST Int type=kotlin.Int value=1
                        BRANCH
                          if: CONST Boolean type=kotlin.Boolean value=true
                          then: CONST Int type=kotlin.Int value=0
                    then: RETURN type=kotlin.Nothing from='private final fun casLoop (to: kotlin.Boolean): kotlin.Boolean declared in <root>.AtomicBooleanArrayInlineExtensionTest'
                      TYPE_OP type=kotlin.Boolean origin=CAST typeOperand=kotlin.Boolean
                        CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                          ARG arg0: CALL 'public final fun get (index: kotlin.Int): kotlin.Int declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Int origin=null
                            ARG <this>: CALL 'private final fun <get-booleanArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.AtomicBooleanArrayInlineExtensionTest' type=kotlin.concurrent.AtomicIntArray origin=null
                              ARG <this>: GET_VAR '<this>: <root>.AtomicBooleanArrayInlineExtensionTest declared in <root>.AtomicBooleanArrayInlineExtensionTest.casLoop' type=<root>.AtomicBooleanArrayInlineExtensionTest origin=IMPLICIT_ARGUMENT
                            ARG index: CONST Int type=kotlin.Int value=0
                          ARG arg1: CONST Int type=kotlin.Int value=1
    FUN name:casLoopExpression visibility:private modality:FINAL returnType:kotlin.Boolean [inline]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.AtomicBooleanArrayInlineExtensionTest
      VALUE_PARAMETER kind:Regular name:to index:1 type:kotlin.Boolean
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='private final fun casLoopExpression (to: kotlin.Boolean): kotlin.Boolean declared in <root>.AtomicBooleanArrayInlineExtensionTest'
          CALL 'private final fun loop$atomicfu$ATOMIC_ARRAY$Boolean (handler$atomicfu: kotlin.concurrent.AtomicIntArray, index$atomicfu: kotlin.Int, action$atomicfu: kotlin.Function1<kotlin.Boolean, kotlin.Unit>): kotlin.Unit declared in <root>.AtomicBooleanArrayInlineExtensionTest' type=kotlin.Unit origin=null
            ARG <this>: GET_VAR '<this>: <root>.AtomicBooleanArrayInlineExtensionTest declared in <root>.AtomicBooleanArrayInlineExtensionTest.casLoopExpression' type=<root>.AtomicBooleanArrayInlineExtensionTest origin=null
            ARG handler$atomicfu: CALL 'private final fun <get-booleanArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.AtomicBooleanArrayInlineExtensionTest' type=kotlin.concurrent.AtomicIntArray origin=null
              ARG <this>: GET_VAR '<this>: <root>.AtomicBooleanArrayInlineExtensionTest declared in <root>.AtomicBooleanArrayInlineExtensionTest.casLoopExpression' type=<root>.AtomicBooleanArrayInlineExtensionTest origin=IMPLICIT_ARGUMENT
            ARG index$atomicfu: CONST Int type=kotlin.Int value=3
            ARG action$atomicfu: FUN_EXPR type=kotlin.Function1<kotlin.Boolean, kotlin.Unit> origin=LAMBDA
              FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Unit
                VALUE_PARAMETER kind:Regular name:cur index:0 type:kotlin.Boolean
                BLOCK_BODY
                  WHEN type=kotlin.Unit origin=IF
                    BRANCH
                      if: CALL 'public final fun compareAndSet (index: kotlin.Int, expectedValue: kotlin.Int, newValue: kotlin.Int): kotlin.Boolean declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Boolean origin=null
                        ARG <this>: CALL 'private final fun <get-booleanArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.AtomicBooleanArrayInlineExtensionTest' type=kotlin.concurrent.AtomicIntArray origin=null
                          ARG <this>: GET_VAR '<this>: <root>.AtomicBooleanArrayInlineExtensionTest declared in <root>.AtomicBooleanArrayInlineExtensionTest.casLoopExpression' type=<root>.AtomicBooleanArrayInlineExtensionTest origin=IMPLICIT_ARGUMENT
                        ARG index: CONST Int type=kotlin.Int value=3
                        ARG expectedValue: WHEN type=kotlin.Int origin=null
                          BRANCH
                            if: GET_VAR 'cur: kotlin.Boolean declared in <root>.AtomicBooleanArrayInlineExtensionTest.casLoopExpression.<anonymous>' type=kotlin.Boolean origin=null
                            then: CONST Int type=kotlin.Int value=1
                          BRANCH
                            if: CONST Boolean type=kotlin.Boolean value=true
                            then: CONST Int type=kotlin.Int value=0
                        ARG newValue: WHEN type=kotlin.Int origin=null
                          BRANCH
                            if: GET_VAR 'to: kotlin.Boolean declared in <root>.AtomicBooleanArrayInlineExtensionTest.casLoopExpression' type=kotlin.Boolean origin=null
                            then: CONST Int type=kotlin.Int value=1
                          BRANCH
                            if: CONST Boolean type=kotlin.Boolean value=true
                            then: CONST Int type=kotlin.Int value=0
                      then: RETURN type=kotlin.Nothing from='private final fun casLoopExpression (to: kotlin.Boolean): kotlin.Boolean declared in <root>.AtomicBooleanArrayInlineExtensionTest'
                        TYPE_OP type=kotlin.Boolean origin=CAST typeOperand=kotlin.Boolean
                          CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                            ARG arg0: CALL 'public final fun get (index: kotlin.Int): kotlin.Int declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Int origin=null
                              ARG <this>: CALL 'private final fun <get-booleanArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.AtomicBooleanArrayInlineExtensionTest' type=kotlin.concurrent.AtomicIntArray origin=null
                                ARG <this>: GET_VAR '<this>: <root>.AtomicBooleanArrayInlineExtensionTest declared in <root>.AtomicBooleanArrayInlineExtensionTest.casLoopExpression' type=<root>.AtomicBooleanArrayInlineExtensionTest origin=IMPLICIT_ARGUMENT
                              ARG index: CONST Int type=kotlin.Int value=3
                            ARG arg1: CONST Int type=kotlin.Int value=1
    FUN name:test visibility:public modality:FINAL returnType:kotlin.Unit
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.AtomicBooleanArrayInlineExtensionTest
      BLOCK_BODY
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Boolean
          ARG expected: CONST Boolean type=kotlin.Boolean value=true
          ARG actual: CALL 'private final fun casLoop (to: kotlin.Boolean): kotlin.Boolean declared in <root>.AtomicBooleanArrayInlineExtensionTest' type=kotlin.Boolean origin=null
            ARG <this>: GET_VAR '<this>: <root>.AtomicBooleanArrayInlineExtensionTest declared in <root>.AtomicBooleanArrayInlineExtensionTest.test' type=<root>.AtomicBooleanArrayInlineExtensionTest origin=IMPLICIT_ARGUMENT
            ARG to: CONST Boolean type=kotlin.Boolean value=true
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Boolean
          ARG expected: CONST Boolean type=kotlin.Boolean value=true
          ARG actual: CALL 'private final fun casLoopExpression (to: kotlin.Boolean): kotlin.Boolean declared in <root>.AtomicBooleanArrayInlineExtensionTest' type=kotlin.Boolean origin=null
            ARG <this>: GET_VAR '<this>: <root>.AtomicBooleanArrayInlineExtensionTest declared in <root>.AtomicBooleanArrayInlineExtensionTest.test' type=<root>.AtomicBooleanArrayInlineExtensionTest origin=IMPLICIT_ARGUMENT
            ARG to: CONST Boolean type=kotlin.Boolean value=true
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Boolean
          ARG expected: CONST Boolean type=kotlin.Boolean value=true
          ARG actual: CALL 'private final fun extensionLoop$atomicfu$ATOMIC_ARRAY$Boolean (handler$atomicfu: kotlin.concurrent.AtomicIntArray, index$atomicfu: kotlin.Int, to: kotlin.Boolean): kotlin.Boolean declared in <root>.AtomicBooleanArrayInlineExtensionTest' type=kotlin.Boolean origin=null
            ARG <this>: GET_VAR '<this>: <root>.AtomicBooleanArrayInlineExtensionTest declared in <root>.AtomicBooleanArrayInlineExtensionTest.test' type=<root>.AtomicBooleanArrayInlineExtensionTest origin=IMPLICIT_ARGUMENT
            ARG handler$atomicfu: CALL 'private final fun <get-booleanArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.AtomicBooleanArrayInlineExtensionTest' type=kotlin.concurrent.AtomicIntArray origin=null
              ARG <this>: GET_VAR '<this>: <root>.AtomicBooleanArrayInlineExtensionTest declared in <root>.AtomicBooleanArrayInlineExtensionTest.test' type=<root>.AtomicBooleanArrayInlineExtensionTest origin=IMPLICIT_ARGUMENT
            ARG index$atomicfu: CONST Int type=kotlin.Int value=1
            ARG to: CONST Boolean type=kotlin.Boolean value=true
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Boolean
          ARG expected: CONST Boolean type=kotlin.Boolean value=true
          ARG actual: CALL 'private final fun extensionLoopExpression$atomicfu$ATOMIC_ARRAY$Boolean (handler$atomicfu: kotlin.concurrent.AtomicIntArray, index$atomicfu: kotlin.Int, to: kotlin.Boolean): kotlin.Boolean declared in <root>.AtomicBooleanArrayInlineExtensionTest' type=kotlin.Boolean origin=null
            ARG <this>: GET_VAR '<this>: <root>.AtomicBooleanArrayInlineExtensionTest declared in <root>.AtomicBooleanArrayInlineExtensionTest.test' type=<root>.AtomicBooleanArrayInlineExtensionTest origin=IMPLICIT_ARGUMENT
            ARG handler$atomicfu: CALL 'private final fun <get-booleanArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.AtomicBooleanArrayInlineExtensionTest' type=kotlin.concurrent.AtomicIntArray origin=null
              ARG <this>: GET_VAR '<this>: <root>.AtomicBooleanArrayInlineExtensionTest declared in <root>.AtomicBooleanArrayInlineExtensionTest.test' type=<root>.AtomicBooleanArrayInlineExtensionTest origin=IMPLICIT_ARGUMENT
            ARG index$atomicfu: CONST Int type=kotlin.Int value=1
            ARG to: CONST Boolean type=kotlin.Boolean value=true
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Boolean
          ARG expected: CONST Boolean type=kotlin.Boolean value=false
          ARG actual: CALL 'private final fun extensionLoopMixedReceivers$atomicfu$ATOMIC_ARRAY$Boolean (handler$atomicfu: kotlin.concurrent.AtomicIntArray, index$atomicfu: kotlin.Int, first: kotlin.Boolean, second: kotlin.Boolean, index: kotlin.Int): kotlin.Boolean declared in <root>.AtomicBooleanArrayInlineExtensionTest' type=kotlin.Boolean origin=null
            ARG <this>: GET_VAR '<this>: <root>.AtomicBooleanArrayInlineExtensionTest declared in <root>.AtomicBooleanArrayInlineExtensionTest.test' type=<root>.AtomicBooleanArrayInlineExtensionTest origin=IMPLICIT_ARGUMENT
            ARG handler$atomicfu: CALL 'private final fun <get-booleanArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.AtomicBooleanArrayInlineExtensionTest' type=kotlin.concurrent.AtomicIntArray origin=null
              ARG <this>: GET_VAR '<this>: <root>.AtomicBooleanArrayInlineExtensionTest declared in <root>.AtomicBooleanArrayInlineExtensionTest.test' type=<root>.AtomicBooleanArrayInlineExtensionTest origin=IMPLICIT_ARGUMENT
            ARG index$atomicfu: CONST Int type=kotlin.Int value=7
            ARG first: CONST Boolean type=kotlin.Boolean value=true
            ARG second: CONST Boolean type=kotlin.Boolean value=false
            ARG index: CONST Int type=kotlin.Int value=7
  CLASS CLASS name:AtomicIntArrayInlineExtensionTest modality:FINAL visibility:public superTypes:[kotlin.Any]
    thisReceiver: VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> type:<root>.AtomicIntArrayInlineExtensionTest
    PROPERTY ATOMICFU_GENERATED_PROPERTY name:intArr visibility:private modality:FINAL [val]
      FIELD ATOMICFU_GENERATED_FIELD name:intArr type:kotlin.concurrent.AtomicIntArray visibility:private [final]
        EXPRESSION_BODY
          CONSTRUCTOR_CALL 'public constructor <init> (size: kotlin.Int) declared in kotlin.concurrent.AtomicIntArray' type=kotlin.concurrent.AtomicIntArray origin=null
            ARG size: CONST Int type=kotlin.Int value=10
      FUN ATOMICFU_GENERATED_PROPERTY_ACCESSOR name:<get-intArr> visibility:private modality:FINAL returnType:kotlin.concurrent.AtomicIntArray
        VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.AtomicIntArrayInlineExtensionTest
        correspondingProperty: PROPERTY ATOMICFU_GENERATED_PROPERTY name:intArr visibility:private modality:FINAL [val]
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='private final fun <get-intArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.AtomicIntArrayInlineExtensionTest'
            GET_FIELD 'FIELD ATOMICFU_GENERATED_FIELD name:intArr type:kotlin.concurrent.AtomicIntArray visibility:private [final] declared in <root>.AtomicIntArrayInlineExtensionTest' type=kotlin.concurrent.AtomicIntArray origin=null
              receiver: GET_VAR '<this>: <root>.AtomicIntArrayInlineExtensionTest declared in <root>.AtomicIntArrayInlineExtensionTest.<get-intArr>' type=<root>.AtomicIntArrayInlineExtensionTest origin=null
    PROPERTY ATOMICFU_GENERATED_PROPERTY name:a$volatile visibility:private modality:FINAL [var]
      FIELD ATOMICFU_GENERATED_FIELD name:a$volatile type:kotlin.Int visibility:private
        annotations:
          Volatile
        EXPRESSION_BODY
          CONST Int type=kotlin.Int value=0
      FUN ATOMICFU_GENERATED_PROPERTY_ACCESSOR name:<get-a$volatile> visibility:private modality:FINAL returnType:kotlin.Int
        VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.AtomicIntArrayInlineExtensionTest
        correspondingProperty: PROPERTY ATOMICFU_GENERATED_PROPERTY name:a$volatile visibility:private modality:FINAL [var]
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='private final fun <get-a$volatile> (): kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest'
            GET_FIELD 'FIELD ATOMICFU_GENERATED_FIELD name:a$volatile type:kotlin.Int visibility:private declared in <root>.AtomicIntArrayInlineExtensionTest' type=kotlin.Int origin=null
              receiver: GET_VAR '<this>: <root>.AtomicIntArrayInlineExtensionTest declared in <root>.AtomicIntArrayInlineExtensionTest.<get-a$volatile>' type=<root>.AtomicIntArrayInlineExtensionTest origin=null
      FUN ATOMICFU_GENERATED_PROPERTY_ACCESSOR name:<set-a$volatile> visibility:private modality:FINAL returnType:kotlin.Unit
        VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.AtomicIntArrayInlineExtensionTest
        VALUE_PARAMETER kind:Regular name:value index:1 type:kotlin.Int
        correspondingProperty: PROPERTY ATOMICFU_GENERATED_PROPERTY name:a$volatile visibility:private modality:FINAL [var]
        BLOCK_BODY
          RETURN type=kotlin.Unit from='private final fun <set-a$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.AtomicIntArrayInlineExtensionTest'
            SET_FIELD 'FIELD ATOMICFU_GENERATED_FIELD name:a$volatile type:kotlin.Int visibility:private declared in <root>.AtomicIntArrayInlineExtensionTest' type=kotlin.Unit origin=null
              receiver: GET_VAR '<this>: <root>.AtomicIntArrayInlineExtensionTest declared in <root>.AtomicIntArrayInlineExtensionTest.<set-a$volatile>' type=<root>.AtomicIntArrayInlineExtensionTest origin=null
              value: GET_VAR 'value: kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest.<set-a$volatile>' type=kotlin.Int origin=null
    CONSTRUCTOR visibility:public returnType:<root>.AtomicIntArrayInlineExtensionTest [primary]
      BLOCK_BODY
        DELEGATING_CONSTRUCTOR_CALL 'public constructor <init> () declared in kotlin.Any'
        INSTANCE_INITIALIZER_CALL classDescriptor='CLASS CLASS name:AtomicIntArrayInlineExtensionTest modality:FINAL visibility:public superTypes:[kotlin.Any]' type=kotlin.Unit
    FUN ATOMICFU_GENERATED_FUNCTION name:bar$atomicfu$ATOMIC_ARRAY$Int visibility:private modality:FINAL returnType:kotlin.Int [inline]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.AtomicIntArrayInlineExtensionTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.concurrent.AtomicIntArray
      VALUE_PARAMETER kind:Regular name:index$atomicfu index:2 type:kotlin.Int
      VALUE_PARAMETER kind:Regular name:delta index:3 type:kotlin.Int
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='private final fun bar$atomicfu$ATOMIC_ARRAY$Int (handler$atomicfu: kotlin.concurrent.AtomicIntArray, index$atomicfu: kotlin.Int, delta: kotlin.Int): kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest'
          CALL 'private final fun foo$atomicfu$ATOMIC_ARRAY$Int (handler$atomicfu: kotlin.concurrent.AtomicIntArray, index$atomicfu: kotlin.Int, to: kotlin.Int): kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest' type=kotlin.Int origin=null
            ARG <this>: GET_VAR '<this>: <root>.AtomicIntArrayInlineExtensionTest declared in <root>.AtomicIntArrayInlineExtensionTest.bar$atomicfu$ATOMIC_ARRAY$Int' type=<root>.AtomicIntArrayInlineExtensionTest origin=null
            ARG handler$atomicfu: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicIntArray declared in <root>.AtomicIntArrayInlineExtensionTest.bar$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.concurrent.AtomicIntArray origin=null
            ARG index$atomicfu: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest.bar$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.Int origin=null
            ARG to: CALL 'public final fun plus (other: kotlin.Int): kotlin.Int declared in kotlin.Int' type=kotlin.Int origin=PLUS
              ARG <this>: TYPE_OP type=kotlin.Int origin=CAST typeOperand=kotlin.Int
                CALL 'public final fun get (index: kotlin.Int): kotlin.Int declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Int origin=null
                  ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicIntArray declared in <root>.AtomicIntArrayInlineExtensionTest.bar$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.concurrent.AtomicIntArray origin=null
                  ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest.bar$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.Int origin=null
              ARG other: GET_VAR 'delta: kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest.bar$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.Int origin=null
    FUN ATOMICFU_GENERATED_FUNCTION name:bar$atomicfu$NATIVE_PROPERTY_REF$Int visibility:private modality:FINAL returnType:kotlin.Int [inline]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.AtomicIntArrayInlineExtensionTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> [crossinline]
      VALUE_PARAMETER kind:Regular name:delta index:2 type:kotlin.Int
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='private final fun bar$atomicfu$NATIVE_PROPERTY_REF$Int (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>>, delta: kotlin.Int): kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest'
          CALL 'private final fun foo$atomicfu$NATIVE_PROPERTY_REF$Int (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>>, to: kotlin.Int): kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest' type=kotlin.Int origin=null
            ARG <this>: GET_VAR '<this>: <root>.AtomicIntArrayInlineExtensionTest declared in <root>.AtomicIntArrayInlineExtensionTest.bar$atomicfu$NATIVE_PROPERTY_REF$Int' type=<root>.AtomicIntArrayInlineExtensionTest origin=null
            ARG handler$atomicfu: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> declared in <root>.AtomicIntArrayInlineExtensionTest.bar$atomicfu$NATIVE_PROPERTY_REF$Int' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> origin=null
            ARG to: CALL 'public final fun plus (other: kotlin.Int): kotlin.Int declared in kotlin.Int' type=kotlin.Int origin=PLUS
              ARG <this>: TYPE_OP type=kotlin.Int origin=CAST typeOperand=kotlin.Int
                CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                  TYPE_ARG T: kotlin.Int
                  ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                    ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> declared in <root>.AtomicIntArrayInlineExtensionTest.bar$atomicfu$NATIVE_PROPERTY_REF$Int' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> origin=null
              ARG other: GET_VAR 'delta: kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest.bar$atomicfu$NATIVE_PROPERTY_REF$Int' type=kotlin.Int origin=null
    FUN ATOMICFU_GENERATED_FUNCTION name:extensionLoop$atomicfu$ATOMIC_ARRAY$Int visibility:private modality:FINAL returnType:kotlin.Int [inline]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.AtomicIntArrayInlineExtensionTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.concurrent.AtomicIntArray
      VALUE_PARAMETER kind:Regular name:index$atomicfu index:2 type:kotlin.Int
      VALUE_PARAMETER kind:Regular name:to index:3 type:kotlin.Int
      BLOCK_BODY
        CALL 'private final fun loop$atomicfu$ATOMIC_ARRAY$Int (handler$atomicfu: kotlin.concurrent.AtomicIntArray, index$atomicfu: kotlin.Int, action$atomicfu: kotlin.Function1<kotlin.Int, kotlin.Unit>): kotlin.Unit declared in <root>.AtomicIntArrayInlineExtensionTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.AtomicIntArrayInlineExtensionTest declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoop$atomicfu$ATOMIC_ARRAY$Int' type=<root>.AtomicIntArrayInlineExtensionTest origin=null
          ARG handler$atomicfu: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicIntArray declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoop$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.concurrent.AtomicIntArray origin=null
          ARG index$atomicfu: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoop$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.Int origin=null
          ARG action$atomicfu: FUN_EXPR type=kotlin.Function1<kotlin.Int, kotlin.Unit> origin=LAMBDA
            FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Unit
              VALUE_PARAMETER kind:Regular name:cur index:0 type:kotlin.Int
              BLOCK_BODY
                WHEN type=kotlin.Unit origin=IF
                  BRANCH
                    if: CALL 'public final fun compareAndSet (index: kotlin.Int, expectedValue: kotlin.Int, newValue: kotlin.Int): kotlin.Boolean declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Boolean origin=null
                      ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicIntArray declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoop$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.concurrent.AtomicIntArray origin=null
                      ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoop$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.Int origin=null
                      ARG expectedValue: GET_VAR 'cur: kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoop$atomicfu$ATOMIC_ARRAY$Int.<anonymous>' type=kotlin.Int origin=null
                      ARG newValue: GET_VAR 'to: kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoop$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.Int origin=null
                    then: RETURN type=kotlin.Nothing from='private final fun extensionLoop$atomicfu$ATOMIC_ARRAY$Int (handler$atomicfu: kotlin.concurrent.AtomicIntArray, index$atomicfu: kotlin.Int, to: kotlin.Int): kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest'
                      TYPE_OP type=kotlin.Int origin=CAST typeOperand=kotlin.Int
                        CALL 'public final fun get (index: kotlin.Int): kotlin.Int declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Int origin=null
                          ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicIntArray declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoop$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.concurrent.AtomicIntArray origin=null
                          ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoop$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.Int origin=null
                RETURN type=kotlin.Nothing from='private final fun extensionLoop$atomicfu$ATOMIC_ARRAY$Int (handler$atomicfu: kotlin.concurrent.AtomicIntArray, index$atomicfu: kotlin.Int, to: kotlin.Int): kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest'
                  CONST Int type=kotlin.Int value=777
    FUN ATOMICFU_GENERATED_FUNCTION name:extensionLoop$atomicfu$NATIVE_PROPERTY_REF$Int visibility:private modality:FINAL returnType:kotlin.Int [inline]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.AtomicIntArrayInlineExtensionTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> [crossinline]
      VALUE_PARAMETER kind:Regular name:to index:2 type:kotlin.Int
      BLOCK_BODY
        CALL 'private final fun loop$atomicfu$NATIVE_PROPERTY_REF$Int (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>>, action$atomicfu: kotlin.Function1<kotlin.Int, kotlin.Unit>): kotlin.Unit declared in <root>.AtomicIntArrayInlineExtensionTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.AtomicIntArrayInlineExtensionTest declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoop$atomicfu$NATIVE_PROPERTY_REF$Int' type=<root>.AtomicIntArrayInlineExtensionTest origin=null
          ARG handler$atomicfu: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoop$atomicfu$NATIVE_PROPERTY_REF$Int' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> origin=null
          ARG action$atomicfu: FUN_EXPR type=kotlin.Function1<kotlin.Int, kotlin.Unit> origin=LAMBDA
            FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Unit
              VALUE_PARAMETER kind:Regular name:cur index:0 type:kotlin.Int
              BLOCK_BODY
                WHEN type=kotlin.Unit origin=IF
                  BRANCH
                    if: CALL 'internal final fun compareAndSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.compareAndSetField>, expectedValue: T of kotlin.concurrent.compareAndSetField, newValue: T of kotlin.concurrent.compareAndSetField): kotlin.Boolean declared in kotlin.concurrent' type=kotlin.Boolean origin=null
                      TYPE_ARG T: kotlin.Int
                      ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                        ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoop$atomicfu$NATIVE_PROPERTY_REF$Int' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> origin=null
                      ARG expectedValue: GET_VAR 'cur: kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoop$atomicfu$NATIVE_PROPERTY_REF$Int.<anonymous>' type=kotlin.Int origin=null
                      ARG newValue: GET_VAR 'to: kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoop$atomicfu$NATIVE_PROPERTY_REF$Int' type=kotlin.Int origin=null
                    then: RETURN type=kotlin.Nothing from='private final fun extensionLoop$atomicfu$NATIVE_PROPERTY_REF$Int (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>>, to: kotlin.Int): kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest'
                      TYPE_OP type=kotlin.Int origin=CAST typeOperand=kotlin.Int
                        CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                          TYPE_ARG T: kotlin.Int
                          ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                            ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoop$atomicfu$NATIVE_PROPERTY_REF$Int' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> origin=null
                RETURN type=kotlin.Nothing from='private final fun extensionLoop$atomicfu$NATIVE_PROPERTY_REF$Int (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>>, to: kotlin.Int): kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest'
                  CONST Int type=kotlin.Int value=777
    FUN ATOMICFU_GENERATED_FUNCTION name:extensionLoopExpression$atomicfu$ATOMIC_ARRAY$Int visibility:private modality:FINAL returnType:kotlin.Int [inline]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.AtomicIntArrayInlineExtensionTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.concurrent.AtomicIntArray
      VALUE_PARAMETER kind:Regular name:index$atomicfu index:2 type:kotlin.Int
      VALUE_PARAMETER kind:Regular name:to index:3 type:kotlin.Int
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='private final fun extensionLoopExpression$atomicfu$ATOMIC_ARRAY$Int (handler$atomicfu: kotlin.concurrent.AtomicIntArray, index$atomicfu: kotlin.Int, to: kotlin.Int): kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest'
          CALL 'private final fun loop$atomicfu$ATOMIC_ARRAY$Int (handler$atomicfu: kotlin.concurrent.AtomicIntArray, index$atomicfu: kotlin.Int, action$atomicfu: kotlin.Function1<kotlin.Int, kotlin.Unit>): kotlin.Unit declared in <root>.AtomicIntArrayInlineExtensionTest' type=kotlin.Unit origin=null
            ARG <this>: GET_VAR '<this>: <root>.AtomicIntArrayInlineExtensionTest declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoopExpression$atomicfu$ATOMIC_ARRAY$Int' type=<root>.AtomicIntArrayInlineExtensionTest origin=null
            ARG handler$atomicfu: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicIntArray declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoopExpression$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.concurrent.AtomicIntArray origin=null
            ARG index$atomicfu: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoopExpression$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.Int origin=null
            ARG action$atomicfu: FUN_EXPR type=kotlin.Function1<kotlin.Int, kotlin.Unit> origin=LAMBDA
              FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Unit
                VALUE_PARAMETER kind:Regular name:cur index:0 type:kotlin.Int
                BLOCK_BODY
                  CALL 'public final fun set (index: kotlin.Int, newValue: kotlin.Int): kotlin.Unit declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Unit origin=null
                    ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicIntArray declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoopExpression$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.concurrent.AtomicIntArray origin=null
                    ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoopExpression$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.Int origin=null
                    ARG newValue: CALL 'public final fun plus (other: kotlin.Int): kotlin.Int declared in kotlin.Int' type=kotlin.Int origin=PLUS
                      ARG <this>: GET_VAR 'cur: kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoopExpression$atomicfu$ATOMIC_ARRAY$Int.<anonymous>' type=kotlin.Int origin=null
                      ARG other: CONST Int type=kotlin.Int value=10
                  RETURN type=kotlin.Nothing from='private final fun extensionLoopExpression$atomicfu$ATOMIC_ARRAY$Int (handler$atomicfu: kotlin.concurrent.AtomicIntArray, index$atomicfu: kotlin.Int, to: kotlin.Int): kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest'
                    WHEN type=kotlin.Int origin=IF
                      BRANCH
                        if: CALL 'public final fun compareAndSet (index: kotlin.Int, expectedValue: kotlin.Int, newValue: kotlin.Int): kotlin.Boolean declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Boolean origin=null
                          ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicIntArray declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoopExpression$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.concurrent.AtomicIntArray origin=null
                          ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoopExpression$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.Int origin=null
                          ARG expectedValue: GET_VAR 'cur: kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoopExpression$atomicfu$ATOMIC_ARRAY$Int.<anonymous>' type=kotlin.Int origin=null
                          ARG newValue: GET_VAR 'to: kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoopExpression$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.Int origin=null
                        then: TYPE_OP type=kotlin.Int origin=CAST typeOperand=kotlin.Int
                          CALL 'public final fun get (index: kotlin.Int): kotlin.Int declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Int origin=null
                            ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicIntArray declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoopExpression$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.concurrent.AtomicIntArray origin=null
                            ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoopExpression$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.Int origin=null
                      BRANCH
                        if: CONST Boolean type=kotlin.Boolean value=true
                        then: CALL 'public final fun incrementAndGet (index: kotlin.Int): kotlin.Int declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Int origin=null
                          ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicIntArray declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoopExpression$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.concurrent.AtomicIntArray origin=null
                          ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoopExpression$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.Int origin=null
    FUN ATOMICFU_GENERATED_FUNCTION name:extensionLoopExpression$atomicfu$NATIVE_PROPERTY_REF$Int visibility:private modality:FINAL returnType:kotlin.Int [inline]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.AtomicIntArrayInlineExtensionTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> [crossinline]
      VALUE_PARAMETER kind:Regular name:to index:2 type:kotlin.Int
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='private final fun extensionLoopExpression$atomicfu$NATIVE_PROPERTY_REF$Int (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>>, to: kotlin.Int): kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest'
          CALL 'private final fun loop$atomicfu$NATIVE_PROPERTY_REF$Int (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>>, action$atomicfu: kotlin.Function1<kotlin.Int, kotlin.Unit>): kotlin.Unit declared in <root>.AtomicIntArrayInlineExtensionTest' type=kotlin.Unit origin=null
            ARG <this>: GET_VAR '<this>: <root>.AtomicIntArrayInlineExtensionTest declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoopExpression$atomicfu$NATIVE_PROPERTY_REF$Int' type=<root>.AtomicIntArrayInlineExtensionTest origin=null
            ARG handler$atomicfu: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoopExpression$atomicfu$NATIVE_PROPERTY_REF$Int' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> origin=null
            ARG action$atomicfu: FUN_EXPR type=kotlin.Function1<kotlin.Int, kotlin.Unit> origin=LAMBDA
              FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Unit
                VALUE_PARAMETER kind:Regular name:cur index:0 type:kotlin.Int
                BLOCK_BODY
                  CALL 'internal final fun atomicSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicSetField>, newValue: T of kotlin.concurrent.atomicSetField): kotlin.Unit declared in kotlin.concurrent' type=kotlin.Unit origin=null
                    TYPE_ARG T: kotlin.Int
                    ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                      ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoopExpression$atomicfu$NATIVE_PROPERTY_REF$Int' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> origin=null
                    ARG newValue: CALL 'public final fun plus (other: kotlin.Int): kotlin.Int declared in kotlin.Int' type=kotlin.Int origin=PLUS
                      ARG <this>: GET_VAR 'cur: kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoopExpression$atomicfu$NATIVE_PROPERTY_REF$Int.<anonymous>' type=kotlin.Int origin=null
                      ARG other: CONST Int type=kotlin.Int value=10
                  RETURN type=kotlin.Nothing from='private final fun extensionLoopExpression$atomicfu$NATIVE_PROPERTY_REF$Int (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>>, to: kotlin.Int): kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest'
                    WHEN type=kotlin.Int origin=IF
                      BRANCH
                        if: CALL 'internal final fun compareAndSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.compareAndSetField>, expectedValue: T of kotlin.concurrent.compareAndSetField, newValue: T of kotlin.concurrent.compareAndSetField): kotlin.Boolean declared in kotlin.concurrent' type=kotlin.Boolean origin=null
                          TYPE_ARG T: kotlin.Int
                          ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                            ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoopExpression$atomicfu$NATIVE_PROPERTY_REF$Int' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> origin=null
                          ARG expectedValue: GET_VAR 'cur: kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoopExpression$atomicfu$NATIVE_PROPERTY_REF$Int.<anonymous>' type=kotlin.Int origin=null
                          ARG newValue: GET_VAR 'to: kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoopExpression$atomicfu$NATIVE_PROPERTY_REF$Int' type=kotlin.Int origin=null
                        then: TYPE_OP type=kotlin.Int origin=CAST typeOperand=kotlin.Int
                          CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                            TYPE_ARG T: kotlin.Int
                            ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                              ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoopExpression$atomicfu$NATIVE_PROPERTY_REF$Int' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> origin=null
                      BRANCH
                        if: CONST Boolean type=kotlin.Boolean value=true
                        then: CALL 'public final fun plus (other: kotlin.Int): kotlin.Int declared in kotlin.Int' type=kotlin.Int origin=null
                          ARG <this>: CALL 'internal final fun getAndAddField (<this>: kotlin.reflect.KMutableProperty0<kotlin.Int>, delta: kotlin.Int): kotlin.Int declared in kotlin.concurrent' type=kotlin.Int origin=null
                            ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                              ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoopExpression$atomicfu$NATIVE_PROPERTY_REF$Int' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> origin=null
                            ARG delta: CONST Int type=kotlin.Int value=1
                          ARG other: CONST Int type=kotlin.Int value=1
    FUN ATOMICFU_GENERATED_FUNCTION name:extensionLoopMixedReceivers$atomicfu$ATOMIC_ARRAY$Int visibility:private modality:FINAL returnType:kotlin.Int [inline]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.AtomicIntArrayInlineExtensionTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.concurrent.AtomicIntArray
      VALUE_PARAMETER kind:Regular name:index$atomicfu index:2 type:kotlin.Int
      VALUE_PARAMETER kind:Regular name:first index:3 type:kotlin.Int
      VALUE_PARAMETER kind:Regular name:second index:4 type:kotlin.Int
      VALUE_PARAMETER kind:Regular name:index index:5 type:kotlin.Int
      BLOCK_BODY
        CALL 'private final fun loop$atomicfu$ATOMIC_ARRAY$Int (handler$atomicfu: kotlin.concurrent.AtomicIntArray, index$atomicfu: kotlin.Int, action$atomicfu: kotlin.Function1<kotlin.Int, kotlin.Unit>): kotlin.Unit declared in <root>.AtomicIntArrayInlineExtensionTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.AtomicIntArrayInlineExtensionTest declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$ATOMIC_ARRAY$Int' type=<root>.AtomicIntArrayInlineExtensionTest origin=null
          ARG handler$atomicfu: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicIntArray declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.concurrent.AtomicIntArray origin=null
          ARG index$atomicfu: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.Int origin=null
          ARG action$atomicfu: FUN_EXPR type=kotlin.Function1<kotlin.Int, kotlin.Unit> origin=LAMBDA
            FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Unit
              VALUE_PARAMETER kind:Regular name:cur index:0 type:kotlin.Int
              BLOCK_BODY
                TYPE_OP type=kotlin.Unit origin=IMPLICIT_COERCION_TO_UNIT typeOperand=kotlin.Unit
                  CALL 'public final fun compareAndSet (index: kotlin.Int, expectedValue: kotlin.Int, newValue: kotlin.Int): kotlin.Boolean declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Boolean origin=null
                    ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicIntArray declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.concurrent.AtomicIntArray origin=null
                    ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.Int origin=null
                    ARG expectedValue: GET_VAR 'cur: kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$ATOMIC_ARRAY$Int.<anonymous>' type=kotlin.Int origin=null
                    ARG newValue: GET_VAR 'first: kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.Int origin=null
                TYPE_OP type=kotlin.Unit origin=IMPLICIT_COERCION_TO_UNIT typeOperand=kotlin.Unit
                  CALL 'public final fun compareAndSet (index: kotlin.Int, expectedValue: kotlin.Int, newValue: kotlin.Int): kotlin.Boolean declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Boolean origin=null
                    ARG <this>: CALL 'private final fun <get-intArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.AtomicIntArrayInlineExtensionTest' type=kotlin.concurrent.AtomicIntArray origin=null
                      ARG <this>: GET_VAR '<this>: <root>.AtomicIntArrayInlineExtensionTest declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$ATOMIC_ARRAY$Int' type=<root>.AtomicIntArrayInlineExtensionTest origin=null
                    ARG index: GET_VAR 'index: kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.Int origin=null
                    ARG expectedValue: GET_VAR 'first: kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.Int origin=null
                    ARG newValue: GET_VAR 'second: kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.Int origin=null
                RETURN type=kotlin.Nothing from='private final fun extensionLoopMixedReceivers$atomicfu$ATOMIC_ARRAY$Int (handler$atomicfu: kotlin.concurrent.AtomicIntArray, index$atomicfu: kotlin.Int, first: kotlin.Int, second: kotlin.Int, index: kotlin.Int): kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest'
                  TYPE_OP type=kotlin.Int origin=CAST typeOperand=kotlin.Int
                    CALL 'public final fun get (index: kotlin.Int): kotlin.Int declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Int origin=null
                      ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicIntArray declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.concurrent.AtomicIntArray origin=null
                      ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.Int origin=null
    FUN ATOMICFU_GENERATED_FUNCTION name:extensionLoopMixedReceivers$atomicfu$NATIVE_PROPERTY_REF$Int visibility:private modality:FINAL returnType:kotlin.Int [inline]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.AtomicIntArrayInlineExtensionTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> [crossinline]
      VALUE_PARAMETER kind:Regular name:first index:2 type:kotlin.Int
      VALUE_PARAMETER kind:Regular name:second index:3 type:kotlin.Int
      VALUE_PARAMETER kind:Regular name:index index:4 type:kotlin.Int
      BLOCK_BODY
        CALL 'private final fun loop$atomicfu$NATIVE_PROPERTY_REF$Int (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>>, action$atomicfu: kotlin.Function1<kotlin.Int, kotlin.Unit>): kotlin.Unit declared in <root>.AtomicIntArrayInlineExtensionTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.AtomicIntArrayInlineExtensionTest declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$NATIVE_PROPERTY_REF$Int' type=<root>.AtomicIntArrayInlineExtensionTest origin=null
          ARG handler$atomicfu: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$NATIVE_PROPERTY_REF$Int' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> origin=null
          ARG action$atomicfu: FUN_EXPR type=kotlin.Function1<kotlin.Int, kotlin.Unit> origin=LAMBDA
            FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Unit
              VALUE_PARAMETER kind:Regular name:cur index:0 type:kotlin.Int
              BLOCK_BODY
                TYPE_OP type=kotlin.Unit origin=IMPLICIT_COERCION_TO_UNIT typeOperand=kotlin.Unit
                  CALL 'internal final fun compareAndSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.compareAndSetField>, expectedValue: T of kotlin.concurrent.compareAndSetField, newValue: T of kotlin.concurrent.compareAndSetField): kotlin.Boolean declared in kotlin.concurrent' type=kotlin.Boolean origin=null
                    TYPE_ARG T: kotlin.Int
                    ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                      ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$NATIVE_PROPERTY_REF$Int' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> origin=null
                    ARG expectedValue: GET_VAR 'cur: kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$NATIVE_PROPERTY_REF$Int.<anonymous>' type=kotlin.Int origin=null
                    ARG newValue: GET_VAR 'first: kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$NATIVE_PROPERTY_REF$Int' type=kotlin.Int origin=null
                TYPE_OP type=kotlin.Unit origin=IMPLICIT_COERCION_TO_UNIT typeOperand=kotlin.Unit
                  CALL 'public final fun compareAndSet (index: kotlin.Int, expectedValue: kotlin.Int, newValue: kotlin.Int): kotlin.Boolean declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Boolean origin=null
                    ARG <this>: CALL 'private final fun <get-intArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.AtomicIntArrayInlineExtensionTest' type=kotlin.concurrent.AtomicIntArray origin=null
                      ARG <this>: GET_VAR '<this>: <root>.AtomicIntArrayInlineExtensionTest declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$NATIVE_PROPERTY_REF$Int' type=<root>.AtomicIntArrayInlineExtensionTest origin=null
                    ARG index: GET_VAR 'index: kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$NATIVE_PROPERTY_REF$Int' type=kotlin.Int origin=null
                    ARG expectedValue: GET_VAR 'first: kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$NATIVE_PROPERTY_REF$Int' type=kotlin.Int origin=null
                    ARG newValue: GET_VAR 'second: kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$NATIVE_PROPERTY_REF$Int' type=kotlin.Int origin=null
                RETURN type=kotlin.Nothing from='private final fun extensionLoopMixedReceivers$atomicfu$NATIVE_PROPERTY_REF$Int (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>>, first: kotlin.Int, second: kotlin.Int, index: kotlin.Int): kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest'
                  TYPE_OP type=kotlin.Int origin=CAST typeOperand=kotlin.Int
                    CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                      TYPE_ARG T: kotlin.Int
                      ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                        ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$NATIVE_PROPERTY_REF$Int' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> origin=null
    FUN ATOMICFU_GENERATED_FUNCTION name:extensionLoopRecursive$atomicfu$ATOMIC_ARRAY$Int visibility:private modality:FINAL returnType:kotlin.Int [inline]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.AtomicIntArrayInlineExtensionTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.concurrent.AtomicIntArray
      VALUE_PARAMETER kind:Regular name:index$atomicfu index:2 type:kotlin.Int
      VALUE_PARAMETER kind:Regular name:to index:3 type:kotlin.Int
      BLOCK_BODY
        CALL 'private final fun loop$atomicfu$ATOMIC_ARRAY$Int (handler$atomicfu: kotlin.concurrent.AtomicIntArray, index$atomicfu: kotlin.Int, action$atomicfu: kotlin.Function1<kotlin.Int, kotlin.Unit>): kotlin.Unit declared in <root>.AtomicIntArrayInlineExtensionTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.AtomicIntArrayInlineExtensionTest declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoopRecursive$atomicfu$ATOMIC_ARRAY$Int' type=<root>.AtomicIntArrayInlineExtensionTest origin=null
          ARG handler$atomicfu: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicIntArray declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoopRecursive$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.concurrent.AtomicIntArray origin=null
          ARG index$atomicfu: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoopRecursive$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.Int origin=null
          ARG action$atomicfu: FUN_EXPR type=kotlin.Function1<kotlin.Int, kotlin.Unit> origin=LAMBDA
            FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Unit
              VALUE_PARAMETER kind:Regular name:cur index:0 type:kotlin.Int
              BLOCK_BODY
                TYPE_OP type=kotlin.Unit origin=IMPLICIT_COERCION_TO_UNIT typeOperand=kotlin.Unit
                  CALL 'public final fun compareAndSet (index: kotlin.Int, expectedValue: kotlin.Int, newValue: kotlin.Int): kotlin.Boolean declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Boolean origin=null
                    ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicIntArray declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoopRecursive$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.concurrent.AtomicIntArray origin=null
                    ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoopRecursive$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.Int origin=null
                    ARG expectedValue: GET_VAR 'cur: kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoopRecursive$atomicfu$ATOMIC_ARRAY$Int.<anonymous>' type=kotlin.Int origin=null
                    ARG newValue: GET_VAR 'to: kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoopRecursive$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.Int origin=null
                TYPE_OP type=kotlin.Unit origin=IMPLICIT_COERCION_TO_UNIT typeOperand=kotlin.Unit
                  CALL 'private final fun extensionLoop$atomicfu$NATIVE_PROPERTY_REF$Int (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>>, to: kotlin.Int): kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest' type=kotlin.Int origin=null
                    ARG <this>: GET_VAR '<this>: <root>.AtomicIntArrayInlineExtensionTest declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoopRecursive$atomicfu$ATOMIC_ARRAY$Int' type=<root>.AtomicIntArrayInlineExtensionTest origin=null
                    ARG handler$atomicfu: FUN_EXPR type=kotlin.Function0<kotlin.Int> origin=LAMBDA
                      FUN ATOMICFU_GENERATED_FUNCTION name:<a$volatile-getter> visibility:local modality:FINAL returnType:kotlin.Int [inline]
                        BLOCK_BODY
                          RETURN type=kotlin.Nothing from='local final fun <a$volatile-getter> (): kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoopRecursive$atomicfu$ATOMIC_ARRAY$Int.<anonymous>'
                            PROPERTY_REFERENCE 'private final a$volatile: kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest' field='FIELD ATOMICFU_GENERATED_FIELD name:a$volatile type:kotlin.Int visibility:private declared in <root>.AtomicIntArrayInlineExtensionTest' getter='private final fun <get-a$volatile> (): kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest' setter='private final fun <set-a$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.AtomicIntArrayInlineExtensionTest' type=kotlin.Int origin=null
                              ARG 1: GET_VAR '<this>: <root>.AtomicIntArrayInlineExtensionTest declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoopRecursive$atomicfu$ATOMIC_ARRAY$Int' type=<root>.AtomicIntArrayInlineExtensionTest origin=null
                    ARG to: CONST Int type=kotlin.Int value=5
                RETURN type=kotlin.Nothing from='private final fun extensionLoopRecursive$atomicfu$ATOMIC_ARRAY$Int (handler$atomicfu: kotlin.concurrent.AtomicIntArray, index$atomicfu: kotlin.Int, to: kotlin.Int): kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest'
                  TYPE_OP type=kotlin.Int origin=CAST typeOperand=kotlin.Int
                    CALL 'public final fun get (index: kotlin.Int): kotlin.Int declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Int origin=null
                      ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicIntArray declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoopRecursive$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.concurrent.AtomicIntArray origin=null
                      ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoopRecursive$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.Int origin=null
    FUN ATOMICFU_GENERATED_FUNCTION name:extensionLoopRecursive$atomicfu$NATIVE_PROPERTY_REF$Int visibility:private modality:FINAL returnType:kotlin.Int [inline]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.AtomicIntArrayInlineExtensionTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> [crossinline]
      VALUE_PARAMETER kind:Regular name:to index:2 type:kotlin.Int
      BLOCK_BODY
        CALL 'private final fun loop$atomicfu$NATIVE_PROPERTY_REF$Int (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>>, action$atomicfu: kotlin.Function1<kotlin.Int, kotlin.Unit>): kotlin.Unit declared in <root>.AtomicIntArrayInlineExtensionTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.AtomicIntArrayInlineExtensionTest declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoopRecursive$atomicfu$NATIVE_PROPERTY_REF$Int' type=<root>.AtomicIntArrayInlineExtensionTest origin=null
          ARG handler$atomicfu: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoopRecursive$atomicfu$NATIVE_PROPERTY_REF$Int' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> origin=null
          ARG action$atomicfu: FUN_EXPR type=kotlin.Function1<kotlin.Int, kotlin.Unit> origin=LAMBDA
            FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Unit
              VALUE_PARAMETER kind:Regular name:cur index:0 type:kotlin.Int
              BLOCK_BODY
                TYPE_OP type=kotlin.Unit origin=IMPLICIT_COERCION_TO_UNIT typeOperand=kotlin.Unit
                  CALL 'internal final fun compareAndSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.compareAndSetField>, expectedValue: T of kotlin.concurrent.compareAndSetField, newValue: T of kotlin.concurrent.compareAndSetField): kotlin.Boolean declared in kotlin.concurrent' type=kotlin.Boolean origin=null
                    TYPE_ARG T: kotlin.Int
                    ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                      ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoopRecursive$atomicfu$NATIVE_PROPERTY_REF$Int' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> origin=null
                    ARG expectedValue: GET_VAR 'cur: kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoopRecursive$atomicfu$NATIVE_PROPERTY_REF$Int.<anonymous>' type=kotlin.Int origin=null
                    ARG newValue: GET_VAR 'to: kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoopRecursive$atomicfu$NATIVE_PROPERTY_REF$Int' type=kotlin.Int origin=null
                TYPE_OP type=kotlin.Unit origin=IMPLICIT_COERCION_TO_UNIT typeOperand=kotlin.Unit
                  CALL 'private final fun extensionLoop$atomicfu$NATIVE_PROPERTY_REF$Int (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>>, to: kotlin.Int): kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest' type=kotlin.Int origin=null
                    ARG <this>: GET_VAR '<this>: <root>.AtomicIntArrayInlineExtensionTest declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoopRecursive$atomicfu$NATIVE_PROPERTY_REF$Int' type=<root>.AtomicIntArrayInlineExtensionTest origin=null
                    ARG handler$atomicfu: FUN_EXPR type=kotlin.Function0<kotlin.Int> origin=LAMBDA
                      FUN ATOMICFU_GENERATED_FUNCTION name:<a$volatile-getter> visibility:local modality:FINAL returnType:kotlin.Int [inline]
                        BLOCK_BODY
                          RETURN type=kotlin.Nothing from='local final fun <a$volatile-getter> (): kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoopRecursive$atomicfu$NATIVE_PROPERTY_REF$Int.<anonymous>'
                            PROPERTY_REFERENCE 'private final a$volatile: kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest' field='FIELD ATOMICFU_GENERATED_FIELD name:a$volatile type:kotlin.Int visibility:private declared in <root>.AtomicIntArrayInlineExtensionTest' getter='private final fun <get-a$volatile> (): kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest' setter='private final fun <set-a$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.AtomicIntArrayInlineExtensionTest' type=kotlin.Int origin=null
                              ARG 1: GET_VAR '<this>: <root>.AtomicIntArrayInlineExtensionTest declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoopRecursive$atomicfu$NATIVE_PROPERTY_REF$Int' type=<root>.AtomicIntArrayInlineExtensionTest origin=null
                    ARG to: CONST Int type=kotlin.Int value=5
                RETURN type=kotlin.Nothing from='private final fun extensionLoopRecursive$atomicfu$NATIVE_PROPERTY_REF$Int (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>>, to: kotlin.Int): kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest'
                  TYPE_OP type=kotlin.Int origin=CAST typeOperand=kotlin.Int
                    CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                      TYPE_ARG T: kotlin.Int
                      ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                        ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> declared in <root>.AtomicIntArrayInlineExtensionTest.extensionLoopRecursive$atomicfu$NATIVE_PROPERTY_REF$Int' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> origin=null
    FUN ATOMICFU_GENERATED_FUNCTION name:foo$atomicfu$ATOMIC_ARRAY$Int visibility:private modality:FINAL returnType:kotlin.Int [inline]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.AtomicIntArrayInlineExtensionTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.concurrent.AtomicIntArray
      VALUE_PARAMETER kind:Regular name:index$atomicfu index:2 type:kotlin.Int
      VALUE_PARAMETER kind:Regular name:to index:3 type:kotlin.Int
      BLOCK_BODY
        CALL 'private final fun loop$atomicfu$ATOMIC_ARRAY$Int (handler$atomicfu: kotlin.concurrent.AtomicIntArray, index$atomicfu: kotlin.Int, action$atomicfu: kotlin.Function1<kotlin.Int, kotlin.Unit>): kotlin.Unit declared in <root>.AtomicIntArrayInlineExtensionTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.AtomicIntArrayInlineExtensionTest declared in <root>.AtomicIntArrayInlineExtensionTest.foo$atomicfu$ATOMIC_ARRAY$Int' type=<root>.AtomicIntArrayInlineExtensionTest origin=null
          ARG handler$atomicfu: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicIntArray declared in <root>.AtomicIntArrayInlineExtensionTest.foo$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.concurrent.AtomicIntArray origin=null
          ARG index$atomicfu: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest.foo$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.Int origin=null
          ARG action$atomicfu: FUN_EXPR type=kotlin.Function1<kotlin.Int, kotlin.Unit> origin=LAMBDA
            FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Unit
              VALUE_PARAMETER kind:Regular name:cur index:0 type:kotlin.Int
              BLOCK_BODY
                WHEN type=kotlin.Unit origin=IF
                  BRANCH
                    if: CALL 'public final fun compareAndSet (index: kotlin.Int, expectedValue: kotlin.Int, newValue: kotlin.Int): kotlin.Boolean declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Boolean origin=null
                      ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicIntArray declared in <root>.AtomicIntArrayInlineExtensionTest.foo$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.concurrent.AtomicIntArray origin=null
                      ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest.foo$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.Int origin=null
                      ARG expectedValue: GET_VAR 'cur: kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest.foo$atomicfu$ATOMIC_ARRAY$Int.<anonymous>' type=kotlin.Int origin=null
                      ARG newValue: GET_VAR 'to: kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest.foo$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.Int origin=null
                    then: RETURN type=kotlin.Nothing from='private final fun foo$atomicfu$ATOMIC_ARRAY$Int (handler$atomicfu: kotlin.concurrent.AtomicIntArray, index$atomicfu: kotlin.Int, to: kotlin.Int): kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest'
                      CONST Int type=kotlin.Int value=777
                  BRANCH
                    if: CONST Boolean type=kotlin.Boolean value=true
                    then: RETURN type=kotlin.Nothing from='private final fun foo$atomicfu$ATOMIC_ARRAY$Int (handler$atomicfu: kotlin.concurrent.AtomicIntArray, index$atomicfu: kotlin.Int, to: kotlin.Int): kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest'
                      TYPE_OP type=kotlin.Int origin=CAST typeOperand=kotlin.Int
                        CALL 'public final fun get (index: kotlin.Int): kotlin.Int declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Int origin=null
                          ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicIntArray declared in <root>.AtomicIntArrayInlineExtensionTest.foo$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.concurrent.AtomicIntArray origin=null
                          ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest.foo$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.Int origin=null
    FUN ATOMICFU_GENERATED_FUNCTION name:foo$atomicfu$NATIVE_PROPERTY_REF$Int visibility:private modality:FINAL returnType:kotlin.Int [inline]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.AtomicIntArrayInlineExtensionTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> [crossinline]
      VALUE_PARAMETER kind:Regular name:to index:2 type:kotlin.Int
      BLOCK_BODY
        CALL 'private final fun loop$atomicfu$NATIVE_PROPERTY_REF$Int (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>>, action$atomicfu: kotlin.Function1<kotlin.Int, kotlin.Unit>): kotlin.Unit declared in <root>.AtomicIntArrayInlineExtensionTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.AtomicIntArrayInlineExtensionTest declared in <root>.AtomicIntArrayInlineExtensionTest.foo$atomicfu$NATIVE_PROPERTY_REF$Int' type=<root>.AtomicIntArrayInlineExtensionTest origin=null
          ARG handler$atomicfu: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> declared in <root>.AtomicIntArrayInlineExtensionTest.foo$atomicfu$NATIVE_PROPERTY_REF$Int' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> origin=null
          ARG action$atomicfu: FUN_EXPR type=kotlin.Function1<kotlin.Int, kotlin.Unit> origin=LAMBDA
            FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Unit
              VALUE_PARAMETER kind:Regular name:cur index:0 type:kotlin.Int
              BLOCK_BODY
                WHEN type=kotlin.Unit origin=IF
                  BRANCH
                    if: CALL 'internal final fun compareAndSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.compareAndSetField>, expectedValue: T of kotlin.concurrent.compareAndSetField, newValue: T of kotlin.concurrent.compareAndSetField): kotlin.Boolean declared in kotlin.concurrent' type=kotlin.Boolean origin=null
                      TYPE_ARG T: kotlin.Int
                      ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                        ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> declared in <root>.AtomicIntArrayInlineExtensionTest.foo$atomicfu$NATIVE_PROPERTY_REF$Int' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> origin=null
                      ARG expectedValue: GET_VAR 'cur: kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest.foo$atomicfu$NATIVE_PROPERTY_REF$Int.<anonymous>' type=kotlin.Int origin=null
                      ARG newValue: GET_VAR 'to: kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest.foo$atomicfu$NATIVE_PROPERTY_REF$Int' type=kotlin.Int origin=null
                    then: RETURN type=kotlin.Nothing from='private final fun foo$atomicfu$NATIVE_PROPERTY_REF$Int (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>>, to: kotlin.Int): kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest'
                      CONST Int type=kotlin.Int value=777
                  BRANCH
                    if: CONST Boolean type=kotlin.Boolean value=true
                    then: RETURN type=kotlin.Nothing from='private final fun foo$atomicfu$NATIVE_PROPERTY_REF$Int (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>>, to: kotlin.Int): kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest'
                      TYPE_OP type=kotlin.Int origin=CAST typeOperand=kotlin.Int
                        CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                          TYPE_ARG T: kotlin.Int
                          ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                            ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> declared in <root>.AtomicIntArrayInlineExtensionTest.foo$atomicfu$NATIVE_PROPERTY_REF$Int' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> origin=null
    FUN ATOMICFU_GENERATED_FUNCTION name:loop$atomicfu$ATOMIC_ARRAY$Int visibility:private modality:FINAL returnType:kotlin.Unit [inline]
      VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.AtomicIntArrayInlineExtensionTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.concurrent.AtomicIntArray
      VALUE_PARAMETER kind:Regular name:index$atomicfu index:2 type:kotlin.Int
      VALUE_PARAMETER kind:Regular name:action$atomicfu index:3 type:kotlin.Function1<kotlin.Int, kotlin.Unit>
      BLOCK_BODY
        WHILE label=null origin=null
          condition: CONST Boolean type=kotlin.Boolean value=true
          body: BLOCK type=R of kotlin.Function1 origin=null
            VAR IR_TEMPORARY_VARIABLE name:tmp_2 type:kotlin.Int [val]
              CALL 'public final fun get (index: kotlin.Int): kotlin.Int declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Int origin=null
                ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicIntArray declared in <root>.AtomicIntArrayInlineExtensionTest.loop$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.concurrent.AtomicIntArray origin=null
                ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest.loop$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.Int origin=null
            CALL 'public abstract fun invoke (p1: P1 of kotlin.Function1): R of kotlin.Function1 declared in kotlin.Function1' type=R of kotlin.Function1 origin=null
              ARG <this>: GET_VAR 'action$atomicfu: kotlin.Function1<kotlin.Int, kotlin.Unit> declared in <root>.AtomicIntArrayInlineExtensionTest.loop$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.Function1<kotlin.Int, kotlin.Unit> origin=null
              ARG p1: GET_VAR 'val tmp_2: kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest.loop$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.Int origin=null
    FUN ATOMICFU_GENERATED_FUNCTION name:loop$atomicfu$NATIVE_PROPERTY_REF$Int visibility:private modality:FINAL returnType:kotlin.Unit [inline]
      VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.AtomicIntArrayInlineExtensionTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> [crossinline]
      VALUE_PARAMETER kind:Regular name:action$atomicfu index:2 type:kotlin.Function1<kotlin.Int, kotlin.Unit>
      BLOCK_BODY
        WHILE label=null origin=null
          condition: CONST Boolean type=kotlin.Boolean value=true
          body: BLOCK type=R of kotlin.Function1 origin=null
            VAR IR_TEMPORARY_VARIABLE name:tmp_3 type:T of kotlin.concurrent.atomicGetField [val]
              CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                TYPE_ARG T: kotlin.Int
                ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                  ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> declared in <root>.AtomicIntArrayInlineExtensionTest.loop$atomicfu$NATIVE_PROPERTY_REF$Int' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> origin=null
            CALL 'public abstract fun invoke (p1: P1 of kotlin.Function1): R of kotlin.Function1 declared in kotlin.Function1' type=R of kotlin.Function1 origin=null
              ARG <this>: GET_VAR 'action$atomicfu: kotlin.Function1<kotlin.Int, kotlin.Unit> declared in <root>.AtomicIntArrayInlineExtensionTest.loop$atomicfu$NATIVE_PROPERTY_REF$Int' type=kotlin.Function1<kotlin.Int, kotlin.Unit> origin=null
              ARG p1: GET_VAR 'val tmp_3: T of kotlin.concurrent.atomicGetField declared in <root>.AtomicIntArrayInlineExtensionTest.loop$atomicfu$NATIVE_PROPERTY_REF$Int' type=T of kotlin.concurrent.atomicGetField origin=null
    FUN FAKE_OVERRIDE name:equals visibility:public modality:OPEN returnType:kotlin.Boolean [fake_override,operator]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Any
      VALUE_PARAMETER kind:Regular name:other index:1 type:kotlin.Any?
      overridden:
        public open fun equals (other: kotlin.Any?): kotlin.Boolean declared in kotlin.Any
    FUN FAKE_OVERRIDE name:hashCode visibility:public modality:OPEN returnType:kotlin.Int [fake_override]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Any
      overridden:
        public open fun hashCode (): kotlin.Int declared in kotlin.Any
    FUN FAKE_OVERRIDE name:toString visibility:public modality:OPEN returnType:kotlin.String [fake_override]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Any
      overridden:
        public open fun toString (): kotlin.String declared in kotlin.Any
    FUN name:casLoop visibility:private modality:FINAL returnType:kotlin.Int [inline]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.AtomicIntArrayInlineExtensionTest
      VALUE_PARAMETER kind:Regular name:to index:1 type:kotlin.Int
      BLOCK_BODY
        CALL 'private final fun loop$atomicfu$ATOMIC_ARRAY$Int (handler$atomicfu: kotlin.concurrent.AtomicIntArray, index$atomicfu: kotlin.Int, action$atomicfu: kotlin.Function1<kotlin.Int, kotlin.Unit>): kotlin.Unit declared in <root>.AtomicIntArrayInlineExtensionTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.AtomicIntArrayInlineExtensionTest declared in <root>.AtomicIntArrayInlineExtensionTest.casLoop' type=<root>.AtomicIntArrayInlineExtensionTest origin=null
          ARG handler$atomicfu: CALL 'private final fun <get-intArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.AtomicIntArrayInlineExtensionTest' type=kotlin.concurrent.AtomicIntArray origin=null
            ARG <this>: GET_VAR '<this>: <root>.AtomicIntArrayInlineExtensionTest declared in <root>.AtomicIntArrayInlineExtensionTest.casLoop' type=<root>.AtomicIntArrayInlineExtensionTest origin=IMPLICIT_ARGUMENT
          ARG index$atomicfu: CONST Int type=kotlin.Int value=0
          ARG action$atomicfu: FUN_EXPR type=kotlin.Function1<kotlin.Int, kotlin.Unit> origin=LAMBDA
            FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Unit
              VALUE_PARAMETER kind:Regular name:cur index:0 type:kotlin.Int
              BLOCK_BODY
                WHEN type=kotlin.Unit origin=IF
                  BRANCH
                    if: CALL 'public final fun compareAndSet (index: kotlin.Int, expectedValue: kotlin.Int, newValue: kotlin.Int): kotlin.Boolean declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Boolean origin=null
                      ARG <this>: CALL 'private final fun <get-intArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.AtomicIntArrayInlineExtensionTest' type=kotlin.concurrent.AtomicIntArray origin=null
                        ARG <this>: GET_VAR '<this>: <root>.AtomicIntArrayInlineExtensionTest declared in <root>.AtomicIntArrayInlineExtensionTest.casLoop' type=<root>.AtomicIntArrayInlineExtensionTest origin=IMPLICIT_ARGUMENT
                      ARG index: CONST Int type=kotlin.Int value=0
                      ARG expectedValue: GET_VAR 'cur: kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest.casLoop.<anonymous>' type=kotlin.Int origin=null
                      ARG newValue: GET_VAR 'to: kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest.casLoop' type=kotlin.Int origin=null
                    then: RETURN type=kotlin.Nothing from='private final fun casLoop (to: kotlin.Int): kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest'
                      TYPE_OP type=kotlin.Int origin=CAST typeOperand=kotlin.Int
                        CALL 'public final fun get (index: kotlin.Int): kotlin.Int declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Int origin=null
                          ARG <this>: CALL 'private final fun <get-intArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.AtomicIntArrayInlineExtensionTest' type=kotlin.concurrent.AtomicIntArray origin=null
                            ARG <this>: GET_VAR '<this>: <root>.AtomicIntArrayInlineExtensionTest declared in <root>.AtomicIntArrayInlineExtensionTest.casLoop' type=<root>.AtomicIntArrayInlineExtensionTest origin=IMPLICIT_ARGUMENT
                          ARG index: CONST Int type=kotlin.Int value=0
                RETURN type=kotlin.Nothing from='private final fun casLoop (to: kotlin.Int): kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest'
                  CONST Int type=kotlin.Int value=777
    FUN name:casLoopExpression visibility:private modality:FINAL returnType:kotlin.Int [inline]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.AtomicIntArrayInlineExtensionTest
      VALUE_PARAMETER kind:Regular name:to index:1 type:kotlin.Int
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='private final fun casLoopExpression (to: kotlin.Int): kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest'
          CALL 'private final fun loop$atomicfu$ATOMIC_ARRAY$Int (handler$atomicfu: kotlin.concurrent.AtomicIntArray, index$atomicfu: kotlin.Int, action$atomicfu: kotlin.Function1<kotlin.Int, kotlin.Unit>): kotlin.Unit declared in <root>.AtomicIntArrayInlineExtensionTest' type=kotlin.Unit origin=null
            ARG <this>: GET_VAR '<this>: <root>.AtomicIntArrayInlineExtensionTest declared in <root>.AtomicIntArrayInlineExtensionTest.casLoopExpression' type=<root>.AtomicIntArrayInlineExtensionTest origin=null
            ARG handler$atomicfu: CALL 'private final fun <get-intArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.AtomicIntArrayInlineExtensionTest' type=kotlin.concurrent.AtomicIntArray origin=null
              ARG <this>: GET_VAR '<this>: <root>.AtomicIntArrayInlineExtensionTest declared in <root>.AtomicIntArrayInlineExtensionTest.casLoopExpression' type=<root>.AtomicIntArrayInlineExtensionTest origin=IMPLICIT_ARGUMENT
            ARG index$atomicfu: CONST Int type=kotlin.Int value=3
            ARG action$atomicfu: FUN_EXPR type=kotlin.Function1<kotlin.Int, kotlin.Unit> origin=LAMBDA
              FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Unit
                VALUE_PARAMETER kind:Regular name:cur index:0 type:kotlin.Int
                BLOCK_BODY
                  WHEN type=kotlin.Unit origin=IF
                    BRANCH
                      if: CALL 'public final fun compareAndSet (index: kotlin.Int, expectedValue: kotlin.Int, newValue: kotlin.Int): kotlin.Boolean declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Boolean origin=null
                        ARG <this>: CALL 'private final fun <get-intArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.AtomicIntArrayInlineExtensionTest' type=kotlin.concurrent.AtomicIntArray origin=null
                          ARG <this>: GET_VAR '<this>: <root>.AtomicIntArrayInlineExtensionTest declared in <root>.AtomicIntArrayInlineExtensionTest.casLoopExpression' type=<root>.AtomicIntArrayInlineExtensionTest origin=IMPLICIT_ARGUMENT
                        ARG index: CONST Int type=kotlin.Int value=3
                        ARG expectedValue: GET_VAR 'cur: kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest.casLoopExpression.<anonymous>' type=kotlin.Int origin=null
                        ARG newValue: GET_VAR 'to: kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest.casLoopExpression' type=kotlin.Int origin=null
                      then: RETURN type=kotlin.Nothing from='private final fun casLoopExpression (to: kotlin.Int): kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest'
                        TYPE_OP type=kotlin.Int origin=CAST typeOperand=kotlin.Int
                          CALL 'public final fun get (index: kotlin.Int): kotlin.Int declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Int origin=null
                            ARG <this>: CALL 'private final fun <get-intArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.AtomicIntArrayInlineExtensionTest' type=kotlin.concurrent.AtomicIntArray origin=null
                              ARG <this>: GET_VAR '<this>: <root>.AtomicIntArrayInlineExtensionTest declared in <root>.AtomicIntArrayInlineExtensionTest.casLoopExpression' type=<root>.AtomicIntArrayInlineExtensionTest origin=IMPLICIT_ARGUMENT
                            ARG index: CONST Int type=kotlin.Int value=3
                  RETURN type=kotlin.Nothing from='private final fun casLoopExpression (to: kotlin.Int): kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest'
                    CONST Int type=kotlin.Int value=777
    FUN name:test visibility:public modality:FINAL returnType:kotlin.Unit
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.AtomicIntArrayInlineExtensionTest
      BLOCK_BODY
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Int
          ARG expected: CONST Int type=kotlin.Int value=5
          ARG actual: CALL 'private final fun casLoop (to: kotlin.Int): kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest' type=kotlin.Int origin=null
            ARG <this>: GET_VAR '<this>: <root>.AtomicIntArrayInlineExtensionTest declared in <root>.AtomicIntArrayInlineExtensionTest.test' type=<root>.AtomicIntArrayInlineExtensionTest origin=IMPLICIT_ARGUMENT
            ARG to: CONST Int type=kotlin.Int value=5
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Int
          ARG expected: CONST Int type=kotlin.Int value=6
          ARG actual: CALL 'private final fun casLoopExpression (to: kotlin.Int): kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest' type=kotlin.Int origin=null
            ARG <this>: GET_VAR '<this>: <root>.AtomicIntArrayInlineExtensionTest declared in <root>.AtomicIntArrayInlineExtensionTest.test' type=<root>.AtomicIntArrayInlineExtensionTest origin=IMPLICIT_ARGUMENT
            ARG to: CONST Int type=kotlin.Int value=6
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Int
          ARG expected: CONST Int type=kotlin.Int value=66
          ARG actual: CALL 'private final fun extensionLoop$atomicfu$ATOMIC_ARRAY$Int (handler$atomicfu: kotlin.concurrent.AtomicIntArray, index$atomicfu: kotlin.Int, to: kotlin.Int): kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest' type=kotlin.Int origin=null
            ARG <this>: GET_VAR '<this>: <root>.AtomicIntArrayInlineExtensionTest declared in <root>.AtomicIntArrayInlineExtensionTest.test' type=<root>.AtomicIntArrayInlineExtensionTest origin=IMPLICIT_ARGUMENT
            ARG handler$atomicfu: CALL 'private final fun <get-intArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.AtomicIntArrayInlineExtensionTest' type=kotlin.concurrent.AtomicIntArray origin=null
              ARG <this>: GET_VAR '<this>: <root>.AtomicIntArrayInlineExtensionTest declared in <root>.AtomicIntArrayInlineExtensionTest.test' type=<root>.AtomicIntArrayInlineExtensionTest origin=IMPLICIT_ARGUMENT
            ARG index$atomicfu: CONST Int type=kotlin.Int value=1
            ARG to: CONST Int type=kotlin.Int value=66
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Int
          ARG expected: CONST Int type=kotlin.Int value=66
          ARG actual: CALL 'private final fun extensionLoop$atomicfu$ATOMIC_ARRAY$Int (handler$atomicfu: kotlin.concurrent.AtomicIntArray, index$atomicfu: kotlin.Int, to: kotlin.Int): kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest' type=kotlin.Int origin=null
            ARG <this>: GET_VAR '<this>: <root>.AtomicIntArrayInlineExtensionTest declared in <root>.AtomicIntArrayInlineExtensionTest.test' type=<root>.AtomicIntArrayInlineExtensionTest origin=IMPLICIT_ARGUMENT
            ARG handler$atomicfu: CALL 'private final fun <get-intArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.AtomicIntArrayInlineExtensionTest' type=kotlin.concurrent.AtomicIntArray origin=null
              ARG <this>: GET_VAR '<this>: <root>.AtomicIntArrayInlineExtensionTest declared in <root>.AtomicIntArrayInlineExtensionTest.test' type=<root>.AtomicIntArrayInlineExtensionTest origin=IMPLICIT_ARGUMENT
            ARG index$atomicfu: CONST Int type=kotlin.Int value=2
            ARG to: CONST Int type=kotlin.Int value=66
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Int
          ARG expected: CONST Int type=kotlin.Int value=77
          ARG actual: CALL 'private final fun extensionLoopExpression$atomicfu$ATOMIC_ARRAY$Int (handler$atomicfu: kotlin.concurrent.AtomicIntArray, index$atomicfu: kotlin.Int, to: kotlin.Int): kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest' type=kotlin.Int origin=null
            ARG <this>: GET_VAR '<this>: <root>.AtomicIntArrayInlineExtensionTest declared in <root>.AtomicIntArrayInlineExtensionTest.test' type=<root>.AtomicIntArrayInlineExtensionTest origin=IMPLICIT_ARGUMENT
            ARG handler$atomicfu: CALL 'private final fun <get-intArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.AtomicIntArrayInlineExtensionTest' type=kotlin.concurrent.AtomicIntArray origin=null
              ARG <this>: GET_VAR '<this>: <root>.AtomicIntArrayInlineExtensionTest declared in <root>.AtomicIntArrayInlineExtensionTest.test' type=<root>.AtomicIntArrayInlineExtensionTest origin=IMPLICIT_ARGUMENT
            ARG index$atomicfu: CONST Int type=kotlin.Int value=1
            ARG to: CONST Int type=kotlin.Int value=777
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Int
          ARG expected: CONST Int type=kotlin.Int value=99
          ARG actual: CALL 'private final fun extensionLoopMixedReceivers$atomicfu$ATOMIC_ARRAY$Int (handler$atomicfu: kotlin.concurrent.AtomicIntArray, index$atomicfu: kotlin.Int, first: kotlin.Int, second: kotlin.Int, index: kotlin.Int): kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest' type=kotlin.Int origin=null
            ARG <this>: GET_VAR '<this>: <root>.AtomicIntArrayInlineExtensionTest declared in <root>.AtomicIntArrayInlineExtensionTest.test' type=<root>.AtomicIntArrayInlineExtensionTest origin=IMPLICIT_ARGUMENT
            ARG handler$atomicfu: CALL 'private final fun <get-intArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.AtomicIntArrayInlineExtensionTest' type=kotlin.concurrent.AtomicIntArray origin=null
              ARG <this>: GET_VAR '<this>: <root>.AtomicIntArrayInlineExtensionTest declared in <root>.AtomicIntArrayInlineExtensionTest.test' type=<root>.AtomicIntArrayInlineExtensionTest origin=IMPLICIT_ARGUMENT
            ARG index$atomicfu: CONST Int type=kotlin.Int value=1
            ARG first: CONST Int type=kotlin.Int value=88
            ARG second: CONST Int type=kotlin.Int value=99
            ARG index: CONST Int type=kotlin.Int value=1
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Int
          ARG expected: CONST Int type=kotlin.Int value=100
          ARG actual: CALL 'private final fun extensionLoopRecursive$atomicfu$ATOMIC_ARRAY$Int (handler$atomicfu: kotlin.concurrent.AtomicIntArray, index$atomicfu: kotlin.Int, to: kotlin.Int): kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest' type=kotlin.Int origin=null
            ARG <this>: GET_VAR '<this>: <root>.AtomicIntArrayInlineExtensionTest declared in <root>.AtomicIntArrayInlineExtensionTest.test' type=<root>.AtomicIntArrayInlineExtensionTest origin=IMPLICIT_ARGUMENT
            ARG handler$atomicfu: CALL 'private final fun <get-intArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.AtomicIntArrayInlineExtensionTest' type=kotlin.concurrent.AtomicIntArray origin=null
              ARG <this>: GET_VAR '<this>: <root>.AtomicIntArrayInlineExtensionTest declared in <root>.AtomicIntArrayInlineExtensionTest.test' type=<root>.AtomicIntArrayInlineExtensionTest origin=IMPLICIT_ARGUMENT
            ARG index$atomicfu: CONST Int type=kotlin.Int value=1
            ARG to: CONST Int type=kotlin.Int value=100
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Int
          ARG expected: CONST Int type=kotlin.Int value=777
          ARG actual: CALL 'private final fun bar$atomicfu$ATOMIC_ARRAY$Int (handler$atomicfu: kotlin.concurrent.AtomicIntArray, index$atomicfu: kotlin.Int, delta: kotlin.Int): kotlin.Int declared in <root>.AtomicIntArrayInlineExtensionTest' type=kotlin.Int origin=null
            ARG <this>: GET_VAR '<this>: <root>.AtomicIntArrayInlineExtensionTest declared in <root>.AtomicIntArrayInlineExtensionTest.test' type=<root>.AtomicIntArrayInlineExtensionTest origin=IMPLICIT_ARGUMENT
            ARG handler$atomicfu: CALL 'private final fun <get-intArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.AtomicIntArrayInlineExtensionTest' type=kotlin.concurrent.AtomicIntArray origin=null
              ARG <this>: GET_VAR '<this>: <root>.AtomicIntArrayInlineExtensionTest declared in <root>.AtomicIntArrayInlineExtensionTest.test' type=<root>.AtomicIntArrayInlineExtensionTest origin=IMPLICIT_ARGUMENT
            ARG index$atomicfu: CONST Int type=kotlin.Int value=1
            ARG delta: CONST Int type=kotlin.Int value=100
  CLASS CLASS name:AtomicLongArrayInlineExtensionTest modality:FINAL visibility:public superTypes:[kotlin.Any]
    thisReceiver: VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> type:<root>.AtomicLongArrayInlineExtensionTest
    PROPERTY ATOMICFU_GENERATED_PROPERTY name:longArr visibility:private modality:FINAL [val]
      FIELD ATOMICFU_GENERATED_FIELD name:longArr type:kotlin.concurrent.AtomicLongArray visibility:private [final]
        EXPRESSION_BODY
          CONSTRUCTOR_CALL 'public constructor <init> (size: kotlin.Int) declared in kotlin.concurrent.AtomicLongArray' type=kotlin.concurrent.AtomicLongArray origin=null
            ARG size: CONST Int type=kotlin.Int value=10
      FUN ATOMICFU_GENERATED_PROPERTY_ACCESSOR name:<get-longArr> visibility:private modality:FINAL returnType:kotlin.concurrent.AtomicLongArray
        VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.AtomicLongArrayInlineExtensionTest
        correspondingProperty: PROPERTY ATOMICFU_GENERATED_PROPERTY name:longArr visibility:private modality:FINAL [val]
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='private final fun <get-longArr> (): kotlin.concurrent.AtomicLongArray declared in <root>.AtomicLongArrayInlineExtensionTest'
            GET_FIELD 'FIELD ATOMICFU_GENERATED_FIELD name:longArr type:kotlin.concurrent.AtomicLongArray visibility:private [final] declared in <root>.AtomicLongArrayInlineExtensionTest' type=kotlin.concurrent.AtomicLongArray origin=null
              receiver: GET_VAR '<this>: <root>.AtomicLongArrayInlineExtensionTest declared in <root>.AtomicLongArrayInlineExtensionTest.<get-longArr>' type=<root>.AtomicLongArrayInlineExtensionTest origin=null
    PROPERTY ATOMICFU_GENERATED_PROPERTY name:a$volatile visibility:private modality:FINAL [var]
      FIELD ATOMICFU_GENERATED_FIELD name:a$volatile type:kotlin.Long visibility:private
        annotations:
          Volatile
        EXPRESSION_BODY
          CONST Long type=kotlin.Long value=0
      FUN ATOMICFU_GENERATED_PROPERTY_ACCESSOR name:<get-a$volatile> visibility:private modality:FINAL returnType:kotlin.Long
        VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.AtomicLongArrayInlineExtensionTest
        correspondingProperty: PROPERTY ATOMICFU_GENERATED_PROPERTY name:a$volatile visibility:private modality:FINAL [var]
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='private final fun <get-a$volatile> (): kotlin.Long declared in <root>.AtomicLongArrayInlineExtensionTest'
            GET_FIELD 'FIELD ATOMICFU_GENERATED_FIELD name:a$volatile type:kotlin.Long visibility:private declared in <root>.AtomicLongArrayInlineExtensionTest' type=kotlin.Long origin=null
              receiver: GET_VAR '<this>: <root>.AtomicLongArrayInlineExtensionTest declared in <root>.AtomicLongArrayInlineExtensionTest.<get-a$volatile>' type=<root>.AtomicLongArrayInlineExtensionTest origin=null
      FUN ATOMICFU_GENERATED_PROPERTY_ACCESSOR name:<set-a$volatile> visibility:private modality:FINAL returnType:kotlin.Unit
        VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.AtomicLongArrayInlineExtensionTest
        VALUE_PARAMETER kind:Regular name:value index:1 type:kotlin.Long
        correspondingProperty: PROPERTY ATOMICFU_GENERATED_PROPERTY name:a$volatile visibility:private modality:FINAL [var]
        BLOCK_BODY
          RETURN type=kotlin.Unit from='private final fun <set-a$volatile> (value: kotlin.Long): kotlin.Unit declared in <root>.AtomicLongArrayInlineExtensionTest'
            SET_FIELD 'FIELD ATOMICFU_GENERATED_FIELD name:a$volatile type:kotlin.Long visibility:private declared in <root>.AtomicLongArrayInlineExtensionTest' type=kotlin.Unit origin=null
              receiver: GET_VAR '<this>: <root>.AtomicLongArrayInlineExtensionTest declared in <root>.AtomicLongArrayInlineExtensionTest.<set-a$volatile>' type=<root>.AtomicLongArrayInlineExtensionTest origin=null
              value: GET_VAR 'value: kotlin.Long declared in <root>.AtomicLongArrayInlineExtensionTest.<set-a$volatile>' type=kotlin.Long origin=null
    CONSTRUCTOR visibility:public returnType:<root>.AtomicLongArrayInlineExtensionTest [primary]
      BLOCK_BODY
        DELEGATING_CONSTRUCTOR_CALL 'public constructor <init> () declared in kotlin.Any'
        INSTANCE_INITIALIZER_CALL classDescriptor='CLASS CLASS name:AtomicLongArrayInlineExtensionTest modality:FINAL visibility:public superTypes:[kotlin.Any]' type=kotlin.Unit
    FUN ATOMICFU_GENERATED_FUNCTION name:bar$atomicfu$ATOMIC_ARRAY$Long visibility:private modality:FINAL returnType:kotlin.Long [inline]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.AtomicLongArrayInlineExtensionTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.concurrent.AtomicLongArray
      VALUE_PARAMETER kind:Regular name:index$atomicfu index:2 type:kotlin.Int
      VALUE_PARAMETER kind:Regular name:delta index:3 type:kotlin.Long
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='private final fun bar$atomicfu$ATOMIC_ARRAY$Long (handler$atomicfu: kotlin.concurrent.AtomicLongArray, index$atomicfu: kotlin.Int, delta: kotlin.Long): kotlin.Long declared in <root>.AtomicLongArrayInlineExtensionTest'
          CALL 'private final fun foo$atomicfu$ATOMIC_ARRAY$Long (handler$atomicfu: kotlin.concurrent.AtomicLongArray, index$atomicfu: kotlin.Int, to: kotlin.Long): kotlin.Long declared in <root>.AtomicLongArrayInlineExtensionTest' type=kotlin.Long origin=null
            ARG <this>: GET_VAR '<this>: <root>.AtomicLongArrayInlineExtensionTest declared in <root>.AtomicLongArrayInlineExtensionTest.bar$atomicfu$ATOMIC_ARRAY$Long' type=<root>.AtomicLongArrayInlineExtensionTest origin=null
            ARG handler$atomicfu: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicLongArray declared in <root>.AtomicLongArrayInlineExtensionTest.bar$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.concurrent.AtomicLongArray origin=null
            ARG index$atomicfu: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.AtomicLongArrayInlineExtensionTest.bar$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.Int origin=null
            ARG to: CALL 'public final fun plus (other: kotlin.Long): kotlin.Long declared in kotlin.Long' type=kotlin.Long origin=PLUS
              ARG <this>: TYPE_OP type=kotlin.Long origin=CAST typeOperand=kotlin.Long
                CALL 'public final fun get (index: kotlin.Int): kotlin.Long declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Long origin=null
                  ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicLongArray declared in <root>.AtomicLongArrayInlineExtensionTest.bar$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.concurrent.AtomicLongArray origin=null
                  ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.AtomicLongArrayInlineExtensionTest.bar$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.Int origin=null
              ARG other: GET_VAR 'delta: kotlin.Long declared in <root>.AtomicLongArrayInlineExtensionTest.bar$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.Long origin=null
    FUN ATOMICFU_GENERATED_FUNCTION name:bar$atomicfu$NATIVE_PROPERTY_REF$Long visibility:private modality:FINAL returnType:kotlin.Long [inline]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.AtomicLongArrayInlineExtensionTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> [crossinline]
      VALUE_PARAMETER kind:Regular name:delta index:2 type:kotlin.Long
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='private final fun bar$atomicfu$NATIVE_PROPERTY_REF$Long (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>>, delta: kotlin.Long): kotlin.Long declared in <root>.AtomicLongArrayInlineExtensionTest'
          CALL 'private final fun foo$atomicfu$NATIVE_PROPERTY_REF$Long (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>>, to: kotlin.Long): kotlin.Long declared in <root>.AtomicLongArrayInlineExtensionTest' type=kotlin.Long origin=null
            ARG <this>: GET_VAR '<this>: <root>.AtomicLongArrayInlineExtensionTest declared in <root>.AtomicLongArrayInlineExtensionTest.bar$atomicfu$NATIVE_PROPERTY_REF$Long' type=<root>.AtomicLongArrayInlineExtensionTest origin=null
            ARG handler$atomicfu: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> declared in <root>.AtomicLongArrayInlineExtensionTest.bar$atomicfu$NATIVE_PROPERTY_REF$Long' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> origin=null
            ARG to: CALL 'public final fun plus (other: kotlin.Long): kotlin.Long declared in kotlin.Long' type=kotlin.Long origin=PLUS
              ARG <this>: TYPE_OP type=kotlin.Long origin=CAST typeOperand=kotlin.Long
                CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                  TYPE_ARG T: kotlin.Long
                  ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                    ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> declared in <root>.AtomicLongArrayInlineExtensionTest.bar$atomicfu$NATIVE_PROPERTY_REF$Long' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> origin=null
              ARG other: GET_VAR 'delta: kotlin.Long declared in <root>.AtomicLongArrayInlineExtensionTest.bar$atomicfu$NATIVE_PROPERTY_REF$Long' type=kotlin.Long origin=null
    FUN ATOMICFU_GENERATED_FUNCTION name:extensionLoop$atomicfu$ATOMIC_ARRAY$Long visibility:private modality:FINAL returnType:kotlin.Long [inline]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.AtomicLongArrayInlineExtensionTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.concurrent.AtomicLongArray
      VALUE_PARAMETER kind:Regular name:index$atomicfu index:2 type:kotlin.Int
      VALUE_PARAMETER kind:Regular name:to index:3 type:kotlin.Long
      BLOCK_BODY
        CALL 'private final fun loop$atomicfu$ATOMIC_ARRAY$Long (handler$atomicfu: kotlin.concurrent.AtomicLongArray, index$atomicfu: kotlin.Int, action$atomicfu: kotlin.Function1<kotlin.Long, kotlin.Unit>): kotlin.Unit declared in <root>.AtomicLongArrayInlineExtensionTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.AtomicLongArrayInlineExtensionTest declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoop$atomicfu$ATOMIC_ARRAY$Long' type=<root>.AtomicLongArrayInlineExtensionTest origin=null
          ARG handler$atomicfu: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicLongArray declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoop$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.concurrent.AtomicLongArray origin=null
          ARG index$atomicfu: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoop$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.Int origin=null
          ARG action$atomicfu: FUN_EXPR type=kotlin.Function1<kotlin.Long, kotlin.Unit> origin=LAMBDA
            FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Unit
              VALUE_PARAMETER kind:Regular name:cur index:0 type:kotlin.Long
              BLOCK_BODY
                WHEN type=kotlin.Unit origin=IF
                  BRANCH
                    if: CALL 'public final fun compareAndSet (index: kotlin.Int, expectedValue: kotlin.Long, newValue: kotlin.Long): kotlin.Boolean declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Boolean origin=null
                      ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicLongArray declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoop$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.concurrent.AtomicLongArray origin=null
                      ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoop$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.Int origin=null
                      ARG expectedValue: GET_VAR 'cur: kotlin.Long declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoop$atomicfu$ATOMIC_ARRAY$Long.<anonymous>' type=kotlin.Long origin=null
                      ARG newValue: GET_VAR 'to: kotlin.Long declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoop$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.Long origin=null
                    then: RETURN type=kotlin.Nothing from='private final fun extensionLoop$atomicfu$ATOMIC_ARRAY$Long (handler$atomicfu: kotlin.concurrent.AtomicLongArray, index$atomicfu: kotlin.Int, to: kotlin.Long): kotlin.Long declared in <root>.AtomicLongArrayInlineExtensionTest'
                      TYPE_OP type=kotlin.Long origin=CAST typeOperand=kotlin.Long
                        CALL 'public final fun get (index: kotlin.Int): kotlin.Long declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Long origin=null
                          ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicLongArray declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoop$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.concurrent.AtomicLongArray origin=null
                          ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoop$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.Int origin=null
                RETURN type=kotlin.Nothing from='private final fun extensionLoop$atomicfu$ATOMIC_ARRAY$Long (handler$atomicfu: kotlin.concurrent.AtomicLongArray, index$atomicfu: kotlin.Int, to: kotlin.Long): kotlin.Long declared in <root>.AtomicLongArrayInlineExtensionTest'
                  CONST Long type=kotlin.Long value=777
    FUN ATOMICFU_GENERATED_FUNCTION name:extensionLoop$atomicfu$NATIVE_PROPERTY_REF$Long visibility:private modality:FINAL returnType:kotlin.Long [inline]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.AtomicLongArrayInlineExtensionTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> [crossinline]
      VALUE_PARAMETER kind:Regular name:to index:2 type:kotlin.Long
      BLOCK_BODY
        CALL 'private final fun loop$atomicfu$NATIVE_PROPERTY_REF$Long (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>>, action$atomicfu: kotlin.Function1<kotlin.Long, kotlin.Unit>): kotlin.Unit declared in <root>.AtomicLongArrayInlineExtensionTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.AtomicLongArrayInlineExtensionTest declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoop$atomicfu$NATIVE_PROPERTY_REF$Long' type=<root>.AtomicLongArrayInlineExtensionTest origin=null
          ARG handler$atomicfu: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoop$atomicfu$NATIVE_PROPERTY_REF$Long' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> origin=null
          ARG action$atomicfu: FUN_EXPR type=kotlin.Function1<kotlin.Long, kotlin.Unit> origin=LAMBDA
            FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Unit
              VALUE_PARAMETER kind:Regular name:cur index:0 type:kotlin.Long
              BLOCK_BODY
                WHEN type=kotlin.Unit origin=IF
                  BRANCH
                    if: CALL 'internal final fun compareAndSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.compareAndSetField>, expectedValue: T of kotlin.concurrent.compareAndSetField, newValue: T of kotlin.concurrent.compareAndSetField): kotlin.Boolean declared in kotlin.concurrent' type=kotlin.Boolean origin=null
                      TYPE_ARG T: kotlin.Long
                      ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                        ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoop$atomicfu$NATIVE_PROPERTY_REF$Long' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> origin=null
                      ARG expectedValue: GET_VAR 'cur: kotlin.Long declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoop$atomicfu$NATIVE_PROPERTY_REF$Long.<anonymous>' type=kotlin.Long origin=null
                      ARG newValue: GET_VAR 'to: kotlin.Long declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoop$atomicfu$NATIVE_PROPERTY_REF$Long' type=kotlin.Long origin=null
                    then: RETURN type=kotlin.Nothing from='private final fun extensionLoop$atomicfu$NATIVE_PROPERTY_REF$Long (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>>, to: kotlin.Long): kotlin.Long declared in <root>.AtomicLongArrayInlineExtensionTest'
                      TYPE_OP type=kotlin.Long origin=CAST typeOperand=kotlin.Long
                        CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                          TYPE_ARG T: kotlin.Long
                          ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                            ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoop$atomicfu$NATIVE_PROPERTY_REF$Long' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> origin=null
                RETURN type=kotlin.Nothing from='private final fun extensionLoop$atomicfu$NATIVE_PROPERTY_REF$Long (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>>, to: kotlin.Long): kotlin.Long declared in <root>.AtomicLongArrayInlineExtensionTest'
                  CONST Long type=kotlin.Long value=777
    FUN ATOMICFU_GENERATED_FUNCTION name:extensionLoopExpression$atomicfu$ATOMIC_ARRAY$Long visibility:private modality:FINAL returnType:kotlin.Long [inline]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.AtomicLongArrayInlineExtensionTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.concurrent.AtomicLongArray
      VALUE_PARAMETER kind:Regular name:index$atomicfu index:2 type:kotlin.Int
      VALUE_PARAMETER kind:Regular name:to index:3 type:kotlin.Long
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='private final fun extensionLoopExpression$atomicfu$ATOMIC_ARRAY$Long (handler$atomicfu: kotlin.concurrent.AtomicLongArray, index$atomicfu: kotlin.Int, to: kotlin.Long): kotlin.Long declared in <root>.AtomicLongArrayInlineExtensionTest'
          CALL 'private final fun loop$atomicfu$ATOMIC_ARRAY$Long (handler$atomicfu: kotlin.concurrent.AtomicLongArray, index$atomicfu: kotlin.Int, action$atomicfu: kotlin.Function1<kotlin.Long, kotlin.Unit>): kotlin.Unit declared in <root>.AtomicLongArrayInlineExtensionTest' type=kotlin.Unit origin=null
            ARG <this>: GET_VAR '<this>: <root>.AtomicLongArrayInlineExtensionTest declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoopExpression$atomicfu$ATOMIC_ARRAY$Long' type=<root>.AtomicLongArrayInlineExtensionTest origin=null
            ARG handler$atomicfu: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicLongArray declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoopExpression$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.concurrent.AtomicLongArray origin=null
            ARG index$atomicfu: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoopExpression$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.Int origin=null
            ARG action$atomicfu: FUN_EXPR type=kotlin.Function1<kotlin.Long, kotlin.Unit> origin=LAMBDA
              FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Unit
                VALUE_PARAMETER kind:Regular name:cur index:0 type:kotlin.Long
                BLOCK_BODY
                  CALL 'public final fun set (index: kotlin.Int, newValue: kotlin.Long): kotlin.Unit declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Unit origin=null
                    ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicLongArray declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoopExpression$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.concurrent.AtomicLongArray origin=null
                    ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoopExpression$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.Int origin=null
                    ARG newValue: CALL 'public final fun plus (other: kotlin.Long): kotlin.Long declared in kotlin.Long' type=kotlin.Long origin=PLUS
                      ARG <this>: GET_VAR 'cur: kotlin.Long declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoopExpression$atomicfu$ATOMIC_ARRAY$Long.<anonymous>' type=kotlin.Long origin=null
                      ARG other: CONST Long type=kotlin.Long value=10
                  RETURN type=kotlin.Nothing from='private final fun extensionLoopExpression$atomicfu$ATOMIC_ARRAY$Long (handler$atomicfu: kotlin.concurrent.AtomicLongArray, index$atomicfu: kotlin.Int, to: kotlin.Long): kotlin.Long declared in <root>.AtomicLongArrayInlineExtensionTest'
                    WHEN type=kotlin.Long origin=IF
                      BRANCH
                        if: CALL 'public final fun compareAndSet (index: kotlin.Int, expectedValue: kotlin.Long, newValue: kotlin.Long): kotlin.Boolean declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Boolean origin=null
                          ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicLongArray declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoopExpression$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.concurrent.AtomicLongArray origin=null
                          ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoopExpression$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.Int origin=null
                          ARG expectedValue: GET_VAR 'cur: kotlin.Long declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoopExpression$atomicfu$ATOMIC_ARRAY$Long.<anonymous>' type=kotlin.Long origin=null
                          ARG newValue: GET_VAR 'to: kotlin.Long declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoopExpression$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.Long origin=null
                        then: TYPE_OP type=kotlin.Long origin=CAST typeOperand=kotlin.Long
                          CALL 'public final fun get (index: kotlin.Int): kotlin.Long declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Long origin=null
                            ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicLongArray declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoopExpression$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.concurrent.AtomicLongArray origin=null
                            ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoopExpression$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.Int origin=null
                      BRANCH
                        if: CONST Boolean type=kotlin.Boolean value=true
                        then: CALL 'public final fun incrementAndGet (index: kotlin.Int): kotlin.Long declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Long origin=null
                          ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicLongArray declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoopExpression$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.concurrent.AtomicLongArray origin=null
                          ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoopExpression$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.Int origin=null
    FUN ATOMICFU_GENERATED_FUNCTION name:extensionLoopExpression$atomicfu$NATIVE_PROPERTY_REF$Long visibility:private modality:FINAL returnType:kotlin.Long [inline]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.AtomicLongArrayInlineExtensionTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> [crossinline]
      VALUE_PARAMETER kind:Regular name:to index:2 type:kotlin.Long
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='private final fun extensionLoopExpression$atomicfu$NATIVE_PROPERTY_REF$Long (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>>, to: kotlin.Long): kotlin.Long declared in <root>.AtomicLongArrayInlineExtensionTest'
          CALL 'private final fun loop$atomicfu$NATIVE_PROPERTY_REF$Long (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>>, action$atomicfu: kotlin.Function1<kotlin.Long, kotlin.Unit>): kotlin.Unit declared in <root>.AtomicLongArrayInlineExtensionTest' type=kotlin.Unit origin=null
            ARG <this>: GET_VAR '<this>: <root>.AtomicLongArrayInlineExtensionTest declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoopExpression$atomicfu$NATIVE_PROPERTY_REF$Long' type=<root>.AtomicLongArrayInlineExtensionTest origin=null
            ARG handler$atomicfu: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoopExpression$atomicfu$NATIVE_PROPERTY_REF$Long' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> origin=null
            ARG action$atomicfu: FUN_EXPR type=kotlin.Function1<kotlin.Long, kotlin.Unit> origin=LAMBDA
              FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Unit
                VALUE_PARAMETER kind:Regular name:cur index:0 type:kotlin.Long
                BLOCK_BODY
                  CALL 'internal final fun atomicSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicSetField>, newValue: T of kotlin.concurrent.atomicSetField): kotlin.Unit declared in kotlin.concurrent' type=kotlin.Unit origin=null
                    TYPE_ARG T: kotlin.Long
                    ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                      ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoopExpression$atomicfu$NATIVE_PROPERTY_REF$Long' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> origin=null
                    ARG newValue: CALL 'public final fun plus (other: kotlin.Long): kotlin.Long declared in kotlin.Long' type=kotlin.Long origin=PLUS
                      ARG <this>: GET_VAR 'cur: kotlin.Long declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoopExpression$atomicfu$NATIVE_PROPERTY_REF$Long.<anonymous>' type=kotlin.Long origin=null
                      ARG other: CONST Long type=kotlin.Long value=10
                  RETURN type=kotlin.Nothing from='private final fun extensionLoopExpression$atomicfu$NATIVE_PROPERTY_REF$Long (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>>, to: kotlin.Long): kotlin.Long declared in <root>.AtomicLongArrayInlineExtensionTest'
                    WHEN type=kotlin.Long origin=IF
                      BRANCH
                        if: CALL 'internal final fun compareAndSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.compareAndSetField>, expectedValue: T of kotlin.concurrent.compareAndSetField, newValue: T of kotlin.concurrent.compareAndSetField): kotlin.Boolean declared in kotlin.concurrent' type=kotlin.Boolean origin=null
                          TYPE_ARG T: kotlin.Long
                          ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                            ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoopExpression$atomicfu$NATIVE_PROPERTY_REF$Long' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> origin=null
                          ARG expectedValue: GET_VAR 'cur: kotlin.Long declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoopExpression$atomicfu$NATIVE_PROPERTY_REF$Long.<anonymous>' type=kotlin.Long origin=null
                          ARG newValue: GET_VAR 'to: kotlin.Long declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoopExpression$atomicfu$NATIVE_PROPERTY_REF$Long' type=kotlin.Long origin=null
                        then: TYPE_OP type=kotlin.Long origin=CAST typeOperand=kotlin.Long
                          CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                            TYPE_ARG T: kotlin.Long
                            ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                              ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoopExpression$atomicfu$NATIVE_PROPERTY_REF$Long' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> origin=null
                      BRANCH
                        if: CONST Boolean type=kotlin.Boolean value=true
                        then: CALL 'public final fun plus (other: kotlin.Long): kotlin.Long declared in kotlin.Long' type=kotlin.Long origin=null
                          ARG <this>: CALL 'internal final fun getAndAddField (<this>: kotlin.reflect.KMutableProperty0<kotlin.Long>, delta: kotlin.Long): kotlin.Long declared in kotlin.concurrent' type=kotlin.Long origin=null
                            ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                              ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoopExpression$atomicfu$NATIVE_PROPERTY_REF$Long' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> origin=null
                            ARG delta: TYPE_OP type=kotlin.Long origin=IMPLICIT_CAST typeOperand=kotlin.Long
                              CONST Long type=kotlin.Long value=1
                          ARG other: CONST Long type=kotlin.Long value=1
    FUN ATOMICFU_GENERATED_FUNCTION name:extensionLoopMixedReceivers$atomicfu$ATOMIC_ARRAY$Long visibility:private modality:FINAL returnType:kotlin.Long [inline]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.AtomicLongArrayInlineExtensionTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.concurrent.AtomicLongArray
      VALUE_PARAMETER kind:Regular name:index$atomicfu index:2 type:kotlin.Int
      VALUE_PARAMETER kind:Regular name:first index:3 type:kotlin.Long
      VALUE_PARAMETER kind:Regular name:second index:4 type:kotlin.Long
      VALUE_PARAMETER kind:Regular name:index index:5 type:kotlin.Int
      BLOCK_BODY
        CALL 'private final fun loop$atomicfu$ATOMIC_ARRAY$Long (handler$atomicfu: kotlin.concurrent.AtomicLongArray, index$atomicfu: kotlin.Int, action$atomicfu: kotlin.Function1<kotlin.Long, kotlin.Unit>): kotlin.Unit declared in <root>.AtomicLongArrayInlineExtensionTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.AtomicLongArrayInlineExtensionTest declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$ATOMIC_ARRAY$Long' type=<root>.AtomicLongArrayInlineExtensionTest origin=null
          ARG handler$atomicfu: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicLongArray declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.concurrent.AtomicLongArray origin=null
          ARG index$atomicfu: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.Int origin=null
          ARG action$atomicfu: FUN_EXPR type=kotlin.Function1<kotlin.Long, kotlin.Unit> origin=LAMBDA
            FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Unit
              VALUE_PARAMETER kind:Regular name:cur index:0 type:kotlin.Long
              BLOCK_BODY
                TYPE_OP type=kotlin.Unit origin=IMPLICIT_COERCION_TO_UNIT typeOperand=kotlin.Unit
                  CALL 'public final fun compareAndSet (index: kotlin.Int, expectedValue: kotlin.Long, newValue: kotlin.Long): kotlin.Boolean declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Boolean origin=null
                    ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicLongArray declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.concurrent.AtomicLongArray origin=null
                    ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.Int origin=null
                    ARG expectedValue: GET_VAR 'cur: kotlin.Long declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$ATOMIC_ARRAY$Long.<anonymous>' type=kotlin.Long origin=null
                    ARG newValue: GET_VAR 'first: kotlin.Long declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.Long origin=null
                TYPE_OP type=kotlin.Unit origin=IMPLICIT_COERCION_TO_UNIT typeOperand=kotlin.Unit
                  CALL 'public final fun compareAndSet (index: kotlin.Int, expectedValue: kotlin.Long, newValue: kotlin.Long): kotlin.Boolean declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Boolean origin=null
                    ARG <this>: CALL 'private final fun <get-longArr> (): kotlin.concurrent.AtomicLongArray declared in <root>.AtomicLongArrayInlineExtensionTest' type=kotlin.concurrent.AtomicLongArray origin=null
                      ARG <this>: GET_VAR '<this>: <root>.AtomicLongArrayInlineExtensionTest declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$ATOMIC_ARRAY$Long' type=<root>.AtomicLongArrayInlineExtensionTest origin=null
                    ARG index: GET_VAR 'index: kotlin.Int declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.Int origin=null
                    ARG expectedValue: GET_VAR 'first: kotlin.Long declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.Long origin=null
                    ARG newValue: GET_VAR 'second: kotlin.Long declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.Long origin=null
                RETURN type=kotlin.Nothing from='private final fun extensionLoopMixedReceivers$atomicfu$ATOMIC_ARRAY$Long (handler$atomicfu: kotlin.concurrent.AtomicLongArray, index$atomicfu: kotlin.Int, first: kotlin.Long, second: kotlin.Long, index: kotlin.Int): kotlin.Long declared in <root>.AtomicLongArrayInlineExtensionTest'
                  TYPE_OP type=kotlin.Long origin=CAST typeOperand=kotlin.Long
                    CALL 'public final fun get (index: kotlin.Int): kotlin.Long declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Long origin=null
                      ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicLongArray declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.concurrent.AtomicLongArray origin=null
                      ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.Int origin=null
    FUN ATOMICFU_GENERATED_FUNCTION name:extensionLoopMixedReceivers$atomicfu$NATIVE_PROPERTY_REF$Long visibility:private modality:FINAL returnType:kotlin.Long [inline]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.AtomicLongArrayInlineExtensionTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> [crossinline]
      VALUE_PARAMETER kind:Regular name:first index:2 type:kotlin.Long
      VALUE_PARAMETER kind:Regular name:second index:3 type:kotlin.Long
      VALUE_PARAMETER kind:Regular name:index index:4 type:kotlin.Int
      BLOCK_BODY
        CALL 'private final fun loop$atomicfu$NATIVE_PROPERTY_REF$Long (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>>, action$atomicfu: kotlin.Function1<kotlin.Long, kotlin.Unit>): kotlin.Unit declared in <root>.AtomicLongArrayInlineExtensionTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.AtomicLongArrayInlineExtensionTest declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$NATIVE_PROPERTY_REF$Long' type=<root>.AtomicLongArrayInlineExtensionTest origin=null
          ARG handler$atomicfu: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$NATIVE_PROPERTY_REF$Long' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> origin=null
          ARG action$atomicfu: FUN_EXPR type=kotlin.Function1<kotlin.Long, kotlin.Unit> origin=LAMBDA
            FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Unit
              VALUE_PARAMETER kind:Regular name:cur index:0 type:kotlin.Long
              BLOCK_BODY
                TYPE_OP type=kotlin.Unit origin=IMPLICIT_COERCION_TO_UNIT typeOperand=kotlin.Unit
                  CALL 'internal final fun compareAndSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.compareAndSetField>, expectedValue: T of kotlin.concurrent.compareAndSetField, newValue: T of kotlin.concurrent.compareAndSetField): kotlin.Boolean declared in kotlin.concurrent' type=kotlin.Boolean origin=null
                    TYPE_ARG T: kotlin.Long
                    ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                      ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$NATIVE_PROPERTY_REF$Long' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> origin=null
                    ARG expectedValue: GET_VAR 'cur: kotlin.Long declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$NATIVE_PROPERTY_REF$Long.<anonymous>' type=kotlin.Long origin=null
                    ARG newValue: GET_VAR 'first: kotlin.Long declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$NATIVE_PROPERTY_REF$Long' type=kotlin.Long origin=null
                TYPE_OP type=kotlin.Unit origin=IMPLICIT_COERCION_TO_UNIT typeOperand=kotlin.Unit
                  CALL 'public final fun compareAndSet (index: kotlin.Int, expectedValue: kotlin.Long, newValue: kotlin.Long): kotlin.Boolean declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Boolean origin=null
                    ARG <this>: CALL 'private final fun <get-longArr> (): kotlin.concurrent.AtomicLongArray declared in <root>.AtomicLongArrayInlineExtensionTest' type=kotlin.concurrent.AtomicLongArray origin=null
                      ARG <this>: GET_VAR '<this>: <root>.AtomicLongArrayInlineExtensionTest declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$NATIVE_PROPERTY_REF$Long' type=<root>.AtomicLongArrayInlineExtensionTest origin=null
                    ARG index: GET_VAR 'index: kotlin.Int declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$NATIVE_PROPERTY_REF$Long' type=kotlin.Int origin=null
                    ARG expectedValue: GET_VAR 'first: kotlin.Long declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$NATIVE_PROPERTY_REF$Long' type=kotlin.Long origin=null
                    ARG newValue: GET_VAR 'second: kotlin.Long declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$NATIVE_PROPERTY_REF$Long' type=kotlin.Long origin=null
                RETURN type=kotlin.Nothing from='private final fun extensionLoopMixedReceivers$atomicfu$NATIVE_PROPERTY_REF$Long (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>>, first: kotlin.Long, second: kotlin.Long, index: kotlin.Int): kotlin.Long declared in <root>.AtomicLongArrayInlineExtensionTest'
                  TYPE_OP type=kotlin.Long origin=CAST typeOperand=kotlin.Long
                    CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                      TYPE_ARG T: kotlin.Long
                      ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                        ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$NATIVE_PROPERTY_REF$Long' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> origin=null
    FUN ATOMICFU_GENERATED_FUNCTION name:extensionLoopRecursive$atomicfu$ATOMIC_ARRAY$Long visibility:private modality:FINAL returnType:kotlin.Long [inline]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.AtomicLongArrayInlineExtensionTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.concurrent.AtomicLongArray
      VALUE_PARAMETER kind:Regular name:index$atomicfu index:2 type:kotlin.Int
      VALUE_PARAMETER kind:Regular name:to index:3 type:kotlin.Long
      BLOCK_BODY
        CALL 'private final fun loop$atomicfu$ATOMIC_ARRAY$Long (handler$atomicfu: kotlin.concurrent.AtomicLongArray, index$atomicfu: kotlin.Int, action$atomicfu: kotlin.Function1<kotlin.Long, kotlin.Unit>): kotlin.Unit declared in <root>.AtomicLongArrayInlineExtensionTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.AtomicLongArrayInlineExtensionTest declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoopRecursive$atomicfu$ATOMIC_ARRAY$Long' type=<root>.AtomicLongArrayInlineExtensionTest origin=null
          ARG handler$atomicfu: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicLongArray declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoopRecursive$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.concurrent.AtomicLongArray origin=null
          ARG index$atomicfu: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoopRecursive$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.Int origin=null
          ARG action$atomicfu: FUN_EXPR type=kotlin.Function1<kotlin.Long, kotlin.Unit> origin=LAMBDA
            FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Unit
              VALUE_PARAMETER kind:Regular name:cur index:0 type:kotlin.Long
              BLOCK_BODY
                TYPE_OP type=kotlin.Unit origin=IMPLICIT_COERCION_TO_UNIT typeOperand=kotlin.Unit
                  CALL 'public final fun compareAndSet (index: kotlin.Int, expectedValue: kotlin.Long, newValue: kotlin.Long): kotlin.Boolean declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Boolean origin=null
                    ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicLongArray declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoopRecursive$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.concurrent.AtomicLongArray origin=null
                    ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoopRecursive$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.Int origin=null
                    ARG expectedValue: GET_VAR 'cur: kotlin.Long declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoopRecursive$atomicfu$ATOMIC_ARRAY$Long.<anonymous>' type=kotlin.Long origin=null
                    ARG newValue: GET_VAR 'to: kotlin.Long declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoopRecursive$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.Long origin=null
                TYPE_OP type=kotlin.Unit origin=IMPLICIT_COERCION_TO_UNIT typeOperand=kotlin.Unit
                  CALL 'private final fun extensionLoop$atomicfu$NATIVE_PROPERTY_REF$Long (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>>, to: kotlin.Long): kotlin.Long declared in <root>.AtomicLongArrayInlineExtensionTest' type=kotlin.Long origin=null
                    ARG <this>: GET_VAR '<this>: <root>.AtomicLongArrayInlineExtensionTest declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoopRecursive$atomicfu$ATOMIC_ARRAY$Long' type=<root>.AtomicLongArrayInlineExtensionTest origin=null
                    ARG handler$atomicfu: FUN_EXPR type=kotlin.Function0<kotlin.Long> origin=LAMBDA
                      FUN ATOMICFU_GENERATED_FUNCTION name:<a$volatile-getter> visibility:local modality:FINAL returnType:kotlin.Long [inline]
                        BLOCK_BODY
                          RETURN type=kotlin.Nothing from='local final fun <a$volatile-getter> (): kotlin.Long declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoopRecursive$atomicfu$ATOMIC_ARRAY$Long.<anonymous>'
                            PROPERTY_REFERENCE 'private final a$volatile: kotlin.Long declared in <root>.AtomicLongArrayInlineExtensionTest' field='FIELD ATOMICFU_GENERATED_FIELD name:a$volatile type:kotlin.Long visibility:private declared in <root>.AtomicLongArrayInlineExtensionTest' getter='private final fun <get-a$volatile> (): kotlin.Long declared in <root>.AtomicLongArrayInlineExtensionTest' setter='private final fun <set-a$volatile> (value: kotlin.Long): kotlin.Unit declared in <root>.AtomicLongArrayInlineExtensionTest' type=kotlin.Long origin=null
                              ARG 1: GET_VAR '<this>: <root>.AtomicLongArrayInlineExtensionTest declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoopRecursive$atomicfu$ATOMIC_ARRAY$Long' type=<root>.AtomicLongArrayInlineExtensionTest origin=null
                    ARG to: CONST Long type=kotlin.Long value=5
                RETURN type=kotlin.Nothing from='private final fun extensionLoopRecursive$atomicfu$ATOMIC_ARRAY$Long (handler$atomicfu: kotlin.concurrent.AtomicLongArray, index$atomicfu: kotlin.Int, to: kotlin.Long): kotlin.Long declared in <root>.AtomicLongArrayInlineExtensionTest'
                  TYPE_OP type=kotlin.Long origin=CAST typeOperand=kotlin.Long
                    CALL 'public final fun get (index: kotlin.Int): kotlin.Long declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Long origin=null
                      ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicLongArray declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoopRecursive$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.concurrent.AtomicLongArray origin=null
                      ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoopRecursive$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.Int origin=null
    FUN ATOMICFU_GENERATED_FUNCTION name:extensionLoopRecursive$atomicfu$NATIVE_PROPERTY_REF$Long visibility:private modality:FINAL returnType:kotlin.Long [inline]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.AtomicLongArrayInlineExtensionTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> [crossinline]
      VALUE_PARAMETER kind:Regular name:to index:2 type:kotlin.Long
      BLOCK_BODY
        CALL 'private final fun loop$atomicfu$NATIVE_PROPERTY_REF$Long (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>>, action$atomicfu: kotlin.Function1<kotlin.Long, kotlin.Unit>): kotlin.Unit declared in <root>.AtomicLongArrayInlineExtensionTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.AtomicLongArrayInlineExtensionTest declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoopRecursive$atomicfu$NATIVE_PROPERTY_REF$Long' type=<root>.AtomicLongArrayInlineExtensionTest origin=null
          ARG handler$atomicfu: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoopRecursive$atomicfu$NATIVE_PROPERTY_REF$Long' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> origin=null
          ARG action$atomicfu: FUN_EXPR type=kotlin.Function1<kotlin.Long, kotlin.Unit> origin=LAMBDA
            FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Unit
              VALUE_PARAMETER kind:Regular name:cur index:0 type:kotlin.Long
              BLOCK_BODY
                TYPE_OP type=kotlin.Unit origin=IMPLICIT_COERCION_TO_UNIT typeOperand=kotlin.Unit
                  CALL 'internal final fun compareAndSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.compareAndSetField>, expectedValue: T of kotlin.concurrent.compareAndSetField, newValue: T of kotlin.concurrent.compareAndSetField): kotlin.Boolean declared in kotlin.concurrent' type=kotlin.Boolean origin=null
                    TYPE_ARG T: kotlin.Long
                    ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                      ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoopRecursive$atomicfu$NATIVE_PROPERTY_REF$Long' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> origin=null
                    ARG expectedValue: GET_VAR 'cur: kotlin.Long declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoopRecursive$atomicfu$NATIVE_PROPERTY_REF$Long.<anonymous>' type=kotlin.Long origin=null
                    ARG newValue: GET_VAR 'to: kotlin.Long declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoopRecursive$atomicfu$NATIVE_PROPERTY_REF$Long' type=kotlin.Long origin=null
                TYPE_OP type=kotlin.Unit origin=IMPLICIT_COERCION_TO_UNIT typeOperand=kotlin.Unit
                  CALL 'private final fun extensionLoop$atomicfu$NATIVE_PROPERTY_REF$Long (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>>, to: kotlin.Long): kotlin.Long declared in <root>.AtomicLongArrayInlineExtensionTest' type=kotlin.Long origin=null
                    ARG <this>: GET_VAR '<this>: <root>.AtomicLongArrayInlineExtensionTest declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoopRecursive$atomicfu$NATIVE_PROPERTY_REF$Long' type=<root>.AtomicLongArrayInlineExtensionTest origin=null
                    ARG handler$atomicfu: FUN_EXPR type=kotlin.Function0<kotlin.Long> origin=LAMBDA
                      FUN ATOMICFU_GENERATED_FUNCTION name:<a$volatile-getter> visibility:local modality:FINAL returnType:kotlin.Long [inline]
                        BLOCK_BODY
                          RETURN type=kotlin.Nothing from='local final fun <a$volatile-getter> (): kotlin.Long declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoopRecursive$atomicfu$NATIVE_PROPERTY_REF$Long.<anonymous>'
                            PROPERTY_REFERENCE 'private final a$volatile: kotlin.Long declared in <root>.AtomicLongArrayInlineExtensionTest' field='FIELD ATOMICFU_GENERATED_FIELD name:a$volatile type:kotlin.Long visibility:private declared in <root>.AtomicLongArrayInlineExtensionTest' getter='private final fun <get-a$volatile> (): kotlin.Long declared in <root>.AtomicLongArrayInlineExtensionTest' setter='private final fun <set-a$volatile> (value: kotlin.Long): kotlin.Unit declared in <root>.AtomicLongArrayInlineExtensionTest' type=kotlin.Long origin=null
                              ARG 1: GET_VAR '<this>: <root>.AtomicLongArrayInlineExtensionTest declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoopRecursive$atomicfu$NATIVE_PROPERTY_REF$Long' type=<root>.AtomicLongArrayInlineExtensionTest origin=null
                    ARG to: CONST Long type=kotlin.Long value=5
                RETURN type=kotlin.Nothing from='private final fun extensionLoopRecursive$atomicfu$NATIVE_PROPERTY_REF$Long (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>>, to: kotlin.Long): kotlin.Long declared in <root>.AtomicLongArrayInlineExtensionTest'
                  TYPE_OP type=kotlin.Long origin=CAST typeOperand=kotlin.Long
                    CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                      TYPE_ARG T: kotlin.Long
                      ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                        ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> declared in <root>.AtomicLongArrayInlineExtensionTest.extensionLoopRecursive$atomicfu$NATIVE_PROPERTY_REF$Long' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> origin=null
    FUN ATOMICFU_GENERATED_FUNCTION name:foo$atomicfu$ATOMIC_ARRAY$Long visibility:private modality:FINAL returnType:kotlin.Long [inline]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.AtomicLongArrayInlineExtensionTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.concurrent.AtomicLongArray
      VALUE_PARAMETER kind:Regular name:index$atomicfu index:2 type:kotlin.Int
      VALUE_PARAMETER kind:Regular name:to index:3 type:kotlin.Long
      BLOCK_BODY
        CALL 'private final fun loop$atomicfu$ATOMIC_ARRAY$Long (handler$atomicfu: kotlin.concurrent.AtomicLongArray, index$atomicfu: kotlin.Int, action$atomicfu: kotlin.Function1<kotlin.Long, kotlin.Unit>): kotlin.Unit declared in <root>.AtomicLongArrayInlineExtensionTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.AtomicLongArrayInlineExtensionTest declared in <root>.AtomicLongArrayInlineExtensionTest.foo$atomicfu$ATOMIC_ARRAY$Long' type=<root>.AtomicLongArrayInlineExtensionTest origin=null
          ARG handler$atomicfu: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicLongArray declared in <root>.AtomicLongArrayInlineExtensionTest.foo$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.concurrent.AtomicLongArray origin=null
          ARG index$atomicfu: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.AtomicLongArrayInlineExtensionTest.foo$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.Int origin=null
          ARG action$atomicfu: FUN_EXPR type=kotlin.Function1<kotlin.Long, kotlin.Unit> origin=LAMBDA
            FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Unit
              VALUE_PARAMETER kind:Regular name:cur index:0 type:kotlin.Long
              BLOCK_BODY
                WHEN type=kotlin.Unit origin=IF
                  BRANCH
                    if: CALL 'public final fun compareAndSet (index: kotlin.Int, expectedValue: kotlin.Long, newValue: kotlin.Long): kotlin.Boolean declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Boolean origin=null
                      ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicLongArray declared in <root>.AtomicLongArrayInlineExtensionTest.foo$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.concurrent.AtomicLongArray origin=null
                      ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.AtomicLongArrayInlineExtensionTest.foo$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.Int origin=null
                      ARG expectedValue: GET_VAR 'cur: kotlin.Long declared in <root>.AtomicLongArrayInlineExtensionTest.foo$atomicfu$ATOMIC_ARRAY$Long.<anonymous>' type=kotlin.Long origin=null
                      ARG newValue: GET_VAR 'to: kotlin.Long declared in <root>.AtomicLongArrayInlineExtensionTest.foo$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.Long origin=null
                    then: RETURN type=kotlin.Nothing from='private final fun foo$atomicfu$ATOMIC_ARRAY$Long (handler$atomicfu: kotlin.concurrent.AtomicLongArray, index$atomicfu: kotlin.Int, to: kotlin.Long): kotlin.Long declared in <root>.AtomicLongArrayInlineExtensionTest'
                      CONST Long type=kotlin.Long value=777
                  BRANCH
                    if: CONST Boolean type=kotlin.Boolean value=true
                    then: RETURN type=kotlin.Nothing from='private final fun foo$atomicfu$ATOMIC_ARRAY$Long (handler$atomicfu: kotlin.concurrent.AtomicLongArray, index$atomicfu: kotlin.Int, to: kotlin.Long): kotlin.Long declared in <root>.AtomicLongArrayInlineExtensionTest'
                      TYPE_OP type=kotlin.Long origin=CAST typeOperand=kotlin.Long
                        CALL 'public final fun get (index: kotlin.Int): kotlin.Long declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Long origin=null
                          ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicLongArray declared in <root>.AtomicLongArrayInlineExtensionTest.foo$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.concurrent.AtomicLongArray origin=null
                          ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.AtomicLongArrayInlineExtensionTest.foo$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.Int origin=null
    FUN ATOMICFU_GENERATED_FUNCTION name:foo$atomicfu$NATIVE_PROPERTY_REF$Long visibility:private modality:FINAL returnType:kotlin.Long [inline]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.AtomicLongArrayInlineExtensionTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> [crossinline]
      VALUE_PARAMETER kind:Regular name:to index:2 type:kotlin.Long
      BLOCK_BODY
        CALL 'private final fun loop$atomicfu$NATIVE_PROPERTY_REF$Long (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>>, action$atomicfu: kotlin.Function1<kotlin.Long, kotlin.Unit>): kotlin.Unit declared in <root>.AtomicLongArrayInlineExtensionTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.AtomicLongArrayInlineExtensionTest declared in <root>.AtomicLongArrayInlineExtensionTest.foo$atomicfu$NATIVE_PROPERTY_REF$Long' type=<root>.AtomicLongArrayInlineExtensionTest origin=null
          ARG handler$atomicfu: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> declared in <root>.AtomicLongArrayInlineExtensionTest.foo$atomicfu$NATIVE_PROPERTY_REF$Long' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> origin=null
          ARG action$atomicfu: FUN_EXPR type=kotlin.Function1<kotlin.Long, kotlin.Unit> origin=LAMBDA
            FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Unit
              VALUE_PARAMETER kind:Regular name:cur index:0 type:kotlin.Long
              BLOCK_BODY
                WHEN type=kotlin.Unit origin=IF
                  BRANCH
                    if: CALL 'internal final fun compareAndSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.compareAndSetField>, expectedValue: T of kotlin.concurrent.compareAndSetField, newValue: T of kotlin.concurrent.compareAndSetField): kotlin.Boolean declared in kotlin.concurrent' type=kotlin.Boolean origin=null
                      TYPE_ARG T: kotlin.Long
                      ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                        ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> declared in <root>.AtomicLongArrayInlineExtensionTest.foo$atomicfu$NATIVE_PROPERTY_REF$Long' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> origin=null
                      ARG expectedValue: GET_VAR 'cur: kotlin.Long declared in <root>.AtomicLongArrayInlineExtensionTest.foo$atomicfu$NATIVE_PROPERTY_REF$Long.<anonymous>' type=kotlin.Long origin=null
                      ARG newValue: GET_VAR 'to: kotlin.Long declared in <root>.AtomicLongArrayInlineExtensionTest.foo$atomicfu$NATIVE_PROPERTY_REF$Long' type=kotlin.Long origin=null
                    then: RETURN type=kotlin.Nothing from='private final fun foo$atomicfu$NATIVE_PROPERTY_REF$Long (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>>, to: kotlin.Long): kotlin.Long declared in <root>.AtomicLongArrayInlineExtensionTest'
                      CONST Long type=kotlin.Long value=777
                  BRANCH
                    if: CONST Boolean type=kotlin.Boolean value=true
                    then: RETURN type=kotlin.Nothing from='private final fun foo$atomicfu$NATIVE_PROPERTY_REF$Long (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>>, to: kotlin.Long): kotlin.Long declared in <root>.AtomicLongArrayInlineExtensionTest'
                      TYPE_OP type=kotlin.Long origin=CAST typeOperand=kotlin.Long
                        CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                          TYPE_ARG T: kotlin.Long
                          ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                            ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> declared in <root>.AtomicLongArrayInlineExtensionTest.foo$atomicfu$NATIVE_PROPERTY_REF$Long' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> origin=null
    FUN ATOMICFU_GENERATED_FUNCTION name:loop$atomicfu$ATOMIC_ARRAY$Long visibility:private modality:FINAL returnType:kotlin.Unit [inline]
      VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.AtomicLongArrayInlineExtensionTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.concurrent.AtomicLongArray
      VALUE_PARAMETER kind:Regular name:index$atomicfu index:2 type:kotlin.Int
      VALUE_PARAMETER kind:Regular name:action$atomicfu index:3 type:kotlin.Function1<kotlin.Long, kotlin.Unit>
      BLOCK_BODY
        WHILE label=null origin=null
          condition: CONST Boolean type=kotlin.Boolean value=true
          body: BLOCK type=R of kotlin.Function1 origin=null
            VAR IR_TEMPORARY_VARIABLE name:tmp_4 type:kotlin.Long [val]
              CALL 'public final fun get (index: kotlin.Int): kotlin.Long declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Long origin=null
                ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicLongArray declared in <root>.AtomicLongArrayInlineExtensionTest.loop$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.concurrent.AtomicLongArray origin=null
                ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.AtomicLongArrayInlineExtensionTest.loop$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.Int origin=null
            CALL 'public abstract fun invoke (p1: P1 of kotlin.Function1): R of kotlin.Function1 declared in kotlin.Function1' type=R of kotlin.Function1 origin=null
              ARG <this>: GET_VAR 'action$atomicfu: kotlin.Function1<kotlin.Long, kotlin.Unit> declared in <root>.AtomicLongArrayInlineExtensionTest.loop$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.Function1<kotlin.Long, kotlin.Unit> origin=null
              ARG p1: GET_VAR 'val tmp_4: kotlin.Long declared in <root>.AtomicLongArrayInlineExtensionTest.loop$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.Long origin=null
    FUN ATOMICFU_GENERATED_FUNCTION name:loop$atomicfu$NATIVE_PROPERTY_REF$Long visibility:private modality:FINAL returnType:kotlin.Unit [inline]
      VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.AtomicLongArrayInlineExtensionTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> [crossinline]
      VALUE_PARAMETER kind:Regular name:action$atomicfu index:2 type:kotlin.Function1<kotlin.Long, kotlin.Unit>
      BLOCK_BODY
        WHILE label=null origin=null
          condition: CONST Boolean type=kotlin.Boolean value=true
          body: BLOCK type=R of kotlin.Function1 origin=null
            VAR IR_TEMPORARY_VARIABLE name:tmp_5 type:T of kotlin.concurrent.atomicGetField [val]
              CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                TYPE_ARG T: kotlin.Long
                ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                  ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> declared in <root>.AtomicLongArrayInlineExtensionTest.loop$atomicfu$NATIVE_PROPERTY_REF$Long' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> origin=null
            CALL 'public abstract fun invoke (p1: P1 of kotlin.Function1): R of kotlin.Function1 declared in kotlin.Function1' type=R of kotlin.Function1 origin=null
              ARG <this>: GET_VAR 'action$atomicfu: kotlin.Function1<kotlin.Long, kotlin.Unit> declared in <root>.AtomicLongArrayInlineExtensionTest.loop$atomicfu$NATIVE_PROPERTY_REF$Long' type=kotlin.Function1<kotlin.Long, kotlin.Unit> origin=null
              ARG p1: GET_VAR 'val tmp_5: T of kotlin.concurrent.atomicGetField declared in <root>.AtomicLongArrayInlineExtensionTest.loop$atomicfu$NATIVE_PROPERTY_REF$Long' type=T of kotlin.concurrent.atomicGetField origin=null
    FUN FAKE_OVERRIDE name:equals visibility:public modality:OPEN returnType:kotlin.Boolean [fake_override,operator]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Any
      VALUE_PARAMETER kind:Regular name:other index:1 type:kotlin.Any?
      overridden:
        public open fun equals (other: kotlin.Any?): kotlin.Boolean declared in kotlin.Any
    FUN FAKE_OVERRIDE name:hashCode visibility:public modality:OPEN returnType:kotlin.Int [fake_override]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Any
      overridden:
        public open fun hashCode (): kotlin.Int declared in kotlin.Any
    FUN FAKE_OVERRIDE name:toString visibility:public modality:OPEN returnType:kotlin.String [fake_override]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Any
      overridden:
        public open fun toString (): kotlin.String declared in kotlin.Any
    FUN name:casLoop visibility:private modality:FINAL returnType:kotlin.Long [inline]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.AtomicLongArrayInlineExtensionTest
      VALUE_PARAMETER kind:Regular name:to index:1 type:kotlin.Long
      BLOCK_BODY
        CALL 'private final fun loop$atomicfu$ATOMIC_ARRAY$Long (handler$atomicfu: kotlin.concurrent.AtomicLongArray, index$atomicfu: kotlin.Int, action$atomicfu: kotlin.Function1<kotlin.Long, kotlin.Unit>): kotlin.Unit declared in <root>.AtomicLongArrayInlineExtensionTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.AtomicLongArrayInlineExtensionTest declared in <root>.AtomicLongArrayInlineExtensionTest.casLoop' type=<root>.AtomicLongArrayInlineExtensionTest origin=null
          ARG handler$atomicfu: CALL 'private final fun <get-longArr> (): kotlin.concurrent.AtomicLongArray declared in <root>.AtomicLongArrayInlineExtensionTest' type=kotlin.concurrent.AtomicLongArray origin=null
            ARG <this>: GET_VAR '<this>: <root>.AtomicLongArrayInlineExtensionTest declared in <root>.AtomicLongArrayInlineExtensionTest.casLoop' type=<root>.AtomicLongArrayInlineExtensionTest origin=IMPLICIT_ARGUMENT
          ARG index$atomicfu: CONST Int type=kotlin.Int value=0
          ARG action$atomicfu: FUN_EXPR type=kotlin.Function1<kotlin.Long, kotlin.Unit> origin=LAMBDA
            FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Unit
              VALUE_PARAMETER kind:Regular name:cur index:0 type:kotlin.Long
              BLOCK_BODY
                WHEN type=kotlin.Unit origin=IF
                  BRANCH
                    if: CALL 'public final fun compareAndSet (index: kotlin.Int, expectedValue: kotlin.Long, newValue: kotlin.Long): kotlin.Boolean declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Boolean origin=null
                      ARG <this>: CALL 'private final fun <get-longArr> (): kotlin.concurrent.AtomicLongArray declared in <root>.AtomicLongArrayInlineExtensionTest' type=kotlin.concurrent.AtomicLongArray origin=null
                        ARG <this>: GET_VAR '<this>: <root>.AtomicLongArrayInlineExtensionTest declared in <root>.AtomicLongArrayInlineExtensionTest.casLoop' type=<root>.AtomicLongArrayInlineExtensionTest origin=IMPLICIT_ARGUMENT
                      ARG index: CONST Int type=kotlin.Int value=0
                      ARG expectedValue: GET_VAR 'cur: kotlin.Long declared in <root>.AtomicLongArrayInlineExtensionTest.casLoop.<anonymous>' type=kotlin.Long origin=null
                      ARG newValue: GET_VAR 'to: kotlin.Long declared in <root>.AtomicLongArrayInlineExtensionTest.casLoop' type=kotlin.Long origin=null
                    then: RETURN type=kotlin.Nothing from='private final fun casLoop (to: kotlin.Long): kotlin.Long declared in <root>.AtomicLongArrayInlineExtensionTest'
                      TYPE_OP type=kotlin.Long origin=CAST typeOperand=kotlin.Long
                        CALL 'public final fun get (index: kotlin.Int): kotlin.Long declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Long origin=null
                          ARG <this>: CALL 'private final fun <get-longArr> (): kotlin.concurrent.AtomicLongArray declared in <root>.AtomicLongArrayInlineExtensionTest' type=kotlin.concurrent.AtomicLongArray origin=null
                            ARG <this>: GET_VAR '<this>: <root>.AtomicLongArrayInlineExtensionTest declared in <root>.AtomicLongArrayInlineExtensionTest.casLoop' type=<root>.AtomicLongArrayInlineExtensionTest origin=IMPLICIT_ARGUMENT
                          ARG index: CONST Int type=kotlin.Int value=0
                RETURN type=kotlin.Nothing from='private final fun casLoop (to: kotlin.Long): kotlin.Long declared in <root>.AtomicLongArrayInlineExtensionTest'
                  CONST Long type=kotlin.Long value=777
    FUN name:casLoopExpression visibility:private modality:FINAL returnType:kotlin.Long [inline]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.AtomicLongArrayInlineExtensionTest
      VALUE_PARAMETER kind:Regular name:to index:1 type:kotlin.Long
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='private final fun casLoopExpression (to: kotlin.Long): kotlin.Long declared in <root>.AtomicLongArrayInlineExtensionTest'
          CALL 'private final fun loop$atomicfu$ATOMIC_ARRAY$Long (handler$atomicfu: kotlin.concurrent.AtomicLongArray, index$atomicfu: kotlin.Int, action$atomicfu: kotlin.Function1<kotlin.Long, kotlin.Unit>): kotlin.Unit declared in <root>.AtomicLongArrayInlineExtensionTest' type=kotlin.Unit origin=null
            ARG <this>: GET_VAR '<this>: <root>.AtomicLongArrayInlineExtensionTest declared in <root>.AtomicLongArrayInlineExtensionTest.casLoopExpression' type=<root>.AtomicLongArrayInlineExtensionTest origin=null
            ARG handler$atomicfu: CALL 'private final fun <get-longArr> (): kotlin.concurrent.AtomicLongArray declared in <root>.AtomicLongArrayInlineExtensionTest' type=kotlin.concurrent.AtomicLongArray origin=null
              ARG <this>: GET_VAR '<this>: <root>.AtomicLongArrayInlineExtensionTest declared in <root>.AtomicLongArrayInlineExtensionTest.casLoopExpression' type=<root>.AtomicLongArrayInlineExtensionTest origin=IMPLICIT_ARGUMENT
            ARG index$atomicfu: CONST Int type=kotlin.Int value=3
            ARG action$atomicfu: FUN_EXPR type=kotlin.Function1<kotlin.Long, kotlin.Unit> origin=LAMBDA
              FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Unit
                VALUE_PARAMETER kind:Regular name:cur index:0 type:kotlin.Long
                BLOCK_BODY
                  WHEN type=kotlin.Unit origin=IF
                    BRANCH
                      if: CALL 'public final fun compareAndSet (index: kotlin.Int, expectedValue: kotlin.Long, newValue: kotlin.Long): kotlin.Boolean declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Boolean origin=null
                        ARG <this>: CALL 'private final fun <get-longArr> (): kotlin.concurrent.AtomicLongArray declared in <root>.AtomicLongArrayInlineExtensionTest' type=kotlin.concurrent.AtomicLongArray origin=null
                          ARG <this>: GET_VAR '<this>: <root>.AtomicLongArrayInlineExtensionTest declared in <root>.AtomicLongArrayInlineExtensionTest.casLoopExpression' type=<root>.AtomicLongArrayInlineExtensionTest origin=IMPLICIT_ARGUMENT
                        ARG index: CONST Int type=kotlin.Int value=3
                        ARG expectedValue: GET_VAR 'cur: kotlin.Long declared in <root>.AtomicLongArrayInlineExtensionTest.casLoopExpression.<anonymous>' type=kotlin.Long origin=null
                        ARG newValue: GET_VAR 'to: kotlin.Long declared in <root>.AtomicLongArrayInlineExtensionTest.casLoopExpression' type=kotlin.Long origin=null
                      then: RETURN type=kotlin.Nothing from='private final fun casLoopExpression (to: kotlin.Long): kotlin.Long declared in <root>.AtomicLongArrayInlineExtensionTest'
                        TYPE_OP type=kotlin.Long origin=CAST typeOperand=kotlin.Long
                          CALL 'public final fun get (index: kotlin.Int): kotlin.Long declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Long origin=null
                            ARG <this>: CALL 'private final fun <get-longArr> (): kotlin.concurrent.AtomicLongArray declared in <root>.AtomicLongArrayInlineExtensionTest' type=kotlin.concurrent.AtomicLongArray origin=null
                              ARG <this>: GET_VAR '<this>: <root>.AtomicLongArrayInlineExtensionTest declared in <root>.AtomicLongArrayInlineExtensionTest.casLoopExpression' type=<root>.AtomicLongArrayInlineExtensionTest origin=IMPLICIT_ARGUMENT
                            ARG index: CONST Int type=kotlin.Int value=3
                  RETURN type=kotlin.Nothing from='private final fun casLoopExpression (to: kotlin.Long): kotlin.Long declared in <root>.AtomicLongArrayInlineExtensionTest'
                    CONST Long type=kotlin.Long value=777
    FUN name:test visibility:public modality:FINAL returnType:kotlin.Unit
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.AtomicLongArrayInlineExtensionTest
      BLOCK_BODY
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Long
          ARG expected: CONST Long type=kotlin.Long value=5
          ARG actual: CALL 'private final fun casLoop (to: kotlin.Long): kotlin.Long declared in <root>.AtomicLongArrayInlineExtensionTest' type=kotlin.Long origin=null
            ARG <this>: GET_VAR '<this>: <root>.AtomicLongArrayInlineExtensionTest declared in <root>.AtomicLongArrayInlineExtensionTest.test' type=<root>.AtomicLongArrayInlineExtensionTest origin=IMPLICIT_ARGUMENT
            ARG to: CONST Long type=kotlin.Long value=5
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Long
          ARG expected: CONST Long type=kotlin.Long value=6
          ARG actual: CALL 'private final fun casLoopExpression (to: kotlin.Long): kotlin.Long declared in <root>.AtomicLongArrayInlineExtensionTest' type=kotlin.Long origin=null
            ARG <this>: GET_VAR '<this>: <root>.AtomicLongArrayInlineExtensionTest declared in <root>.AtomicLongArrayInlineExtensionTest.test' type=<root>.AtomicLongArrayInlineExtensionTest origin=IMPLICIT_ARGUMENT
            ARG to: CONST Long type=kotlin.Long value=6
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Long
          ARG expected: CONST Long type=kotlin.Long value=66
          ARG actual: CALL 'private final fun extensionLoop$atomicfu$ATOMIC_ARRAY$Long (handler$atomicfu: kotlin.concurrent.AtomicLongArray, index$atomicfu: kotlin.Int, to: kotlin.Long): kotlin.Long declared in <root>.AtomicLongArrayInlineExtensionTest' type=kotlin.Long origin=null
            ARG <this>: GET_VAR '<this>: <root>.AtomicLongArrayInlineExtensionTest declared in <root>.AtomicLongArrayInlineExtensionTest.test' type=<root>.AtomicLongArrayInlineExtensionTest origin=IMPLICIT_ARGUMENT
            ARG handler$atomicfu: CALL 'private final fun <get-longArr> (): kotlin.concurrent.AtomicLongArray declared in <root>.AtomicLongArrayInlineExtensionTest' type=kotlin.concurrent.AtomicLongArray origin=null
              ARG <this>: GET_VAR '<this>: <root>.AtomicLongArrayInlineExtensionTest declared in <root>.AtomicLongArrayInlineExtensionTest.test' type=<root>.AtomicLongArrayInlineExtensionTest origin=IMPLICIT_ARGUMENT
            ARG index$atomicfu: CONST Int type=kotlin.Int value=1
            ARG to: CONST Long type=kotlin.Long value=66
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Long
          ARG expected: CONST Long type=kotlin.Long value=66
          ARG actual: CALL 'private final fun extensionLoop$atomicfu$ATOMIC_ARRAY$Long (handler$atomicfu: kotlin.concurrent.AtomicLongArray, index$atomicfu: kotlin.Int, to: kotlin.Long): kotlin.Long declared in <root>.AtomicLongArrayInlineExtensionTest' type=kotlin.Long origin=null
            ARG <this>: GET_VAR '<this>: <root>.AtomicLongArrayInlineExtensionTest declared in <root>.AtomicLongArrayInlineExtensionTest.test' type=<root>.AtomicLongArrayInlineExtensionTest origin=IMPLICIT_ARGUMENT
            ARG handler$atomicfu: CALL 'private final fun <get-longArr> (): kotlin.concurrent.AtomicLongArray declared in <root>.AtomicLongArrayInlineExtensionTest' type=kotlin.concurrent.AtomicLongArray origin=null
              ARG <this>: GET_VAR '<this>: <root>.AtomicLongArrayInlineExtensionTest declared in <root>.AtomicLongArrayInlineExtensionTest.test' type=<root>.AtomicLongArrayInlineExtensionTest origin=IMPLICIT_ARGUMENT
            ARG index$atomicfu: CONST Int type=kotlin.Int value=2
            ARG to: CONST Long type=kotlin.Long value=66
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Long
          ARG expected: CONST Long type=kotlin.Long value=77
          ARG actual: CALL 'private final fun extensionLoopExpression$atomicfu$ATOMIC_ARRAY$Long (handler$atomicfu: kotlin.concurrent.AtomicLongArray, index$atomicfu: kotlin.Int, to: kotlin.Long): kotlin.Long declared in <root>.AtomicLongArrayInlineExtensionTest' type=kotlin.Long origin=null
            ARG <this>: GET_VAR '<this>: <root>.AtomicLongArrayInlineExtensionTest declared in <root>.AtomicLongArrayInlineExtensionTest.test' type=<root>.AtomicLongArrayInlineExtensionTest origin=IMPLICIT_ARGUMENT
            ARG handler$atomicfu: CALL 'private final fun <get-longArr> (): kotlin.concurrent.AtomicLongArray declared in <root>.AtomicLongArrayInlineExtensionTest' type=kotlin.concurrent.AtomicLongArray origin=null
              ARG <this>: GET_VAR '<this>: <root>.AtomicLongArrayInlineExtensionTest declared in <root>.AtomicLongArrayInlineExtensionTest.test' type=<root>.AtomicLongArrayInlineExtensionTest origin=IMPLICIT_ARGUMENT
            ARG index$atomicfu: CONST Int type=kotlin.Int value=1
            ARG to: CONST Long type=kotlin.Long value=777
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Long
          ARG expected: CONST Long type=kotlin.Long value=99
          ARG actual: CALL 'private final fun extensionLoopMixedReceivers$atomicfu$ATOMIC_ARRAY$Long (handler$atomicfu: kotlin.concurrent.AtomicLongArray, index$atomicfu: kotlin.Int, first: kotlin.Long, second: kotlin.Long, index: kotlin.Int): kotlin.Long declared in <root>.AtomicLongArrayInlineExtensionTest' type=kotlin.Long origin=null
            ARG <this>: GET_VAR '<this>: <root>.AtomicLongArrayInlineExtensionTest declared in <root>.AtomicLongArrayInlineExtensionTest.test' type=<root>.AtomicLongArrayInlineExtensionTest origin=IMPLICIT_ARGUMENT
            ARG handler$atomicfu: CALL 'private final fun <get-longArr> (): kotlin.concurrent.AtomicLongArray declared in <root>.AtomicLongArrayInlineExtensionTest' type=kotlin.concurrent.AtomicLongArray origin=null
              ARG <this>: GET_VAR '<this>: <root>.AtomicLongArrayInlineExtensionTest declared in <root>.AtomicLongArrayInlineExtensionTest.test' type=<root>.AtomicLongArrayInlineExtensionTest origin=IMPLICIT_ARGUMENT
            ARG index$atomicfu: CONST Int type=kotlin.Int value=1
            ARG first: CONST Long type=kotlin.Long value=88
            ARG second: CONST Long type=kotlin.Long value=99
            ARG index: CONST Int type=kotlin.Int value=1
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Long
          ARG expected: CONST Long type=kotlin.Long value=100
          ARG actual: CALL 'private final fun extensionLoopRecursive$atomicfu$ATOMIC_ARRAY$Long (handler$atomicfu: kotlin.concurrent.AtomicLongArray, index$atomicfu: kotlin.Int, to: kotlin.Long): kotlin.Long declared in <root>.AtomicLongArrayInlineExtensionTest' type=kotlin.Long origin=null
            ARG <this>: GET_VAR '<this>: <root>.AtomicLongArrayInlineExtensionTest declared in <root>.AtomicLongArrayInlineExtensionTest.test' type=<root>.AtomicLongArrayInlineExtensionTest origin=IMPLICIT_ARGUMENT
            ARG handler$atomicfu: CALL 'private final fun <get-longArr> (): kotlin.concurrent.AtomicLongArray declared in <root>.AtomicLongArrayInlineExtensionTest' type=kotlin.concurrent.AtomicLongArray origin=null
              ARG <this>: GET_VAR '<this>: <root>.AtomicLongArrayInlineExtensionTest declared in <root>.AtomicLongArrayInlineExtensionTest.test' type=<root>.AtomicLongArrayInlineExtensionTest origin=IMPLICIT_ARGUMENT
            ARG index$atomicfu: CONST Int type=kotlin.Int value=1
            ARG to: CONST Long type=kotlin.Long value=100
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Long
          ARG expected: CONST Long type=kotlin.Long value=777
          ARG actual: CALL 'private final fun bar$atomicfu$ATOMIC_ARRAY$Long (handler$atomicfu: kotlin.concurrent.AtomicLongArray, index$atomicfu: kotlin.Int, delta: kotlin.Long): kotlin.Long declared in <root>.AtomicLongArrayInlineExtensionTest' type=kotlin.Long origin=null
            ARG <this>: GET_VAR '<this>: <root>.AtomicLongArrayInlineExtensionTest declared in <root>.AtomicLongArrayInlineExtensionTest.test' type=<root>.AtomicLongArrayInlineExtensionTest origin=IMPLICIT_ARGUMENT
            ARG handler$atomicfu: CALL 'private final fun <get-longArr> (): kotlin.concurrent.AtomicLongArray declared in <root>.AtomicLongArrayInlineExtensionTest' type=kotlin.concurrent.AtomicLongArray origin=null
              ARG <this>: GET_VAR '<this>: <root>.AtomicLongArrayInlineExtensionTest declared in <root>.AtomicLongArrayInlineExtensionTest.test' type=<root>.AtomicLongArrayInlineExtensionTest origin=IMPLICIT_ARGUMENT
            ARG index$atomicfu: CONST Int type=kotlin.Int value=1
            ARG delta: CONST Long type=kotlin.Long value=100
  CLASS CLASS name:AtomicRefArrayInlineExtensionTest modality:FINAL visibility:public superTypes:[kotlin.Any]
    thisReceiver: VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> type:<root>.AtomicRefArrayInlineExtensionTest
    PROPERTY ATOMICFU_GENERATED_PROPERTY name:refArr visibility:private modality:FINAL [val]
      FIELD ATOMICFU_GENERATED_FIELD name:refArr type:kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> visibility:private [final]
        EXPRESSION_BODY
          CONSTRUCTOR_CALL 'internal constructor <init> (array: kotlin.Array<T of kotlin.concurrent.AtomicArray>) declared in kotlin.concurrent.AtomicArray' type=kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> origin=null
            TYPE_ARG (of class) T: kotlin.Any?
            ARG array: CALL 'public final fun arrayOfNulls <T> (size: kotlin.Int): kotlin.Array<T of kotlin.arrayOfNulls?> declared in kotlin' type=kotlin.Array<T of kotlin.arrayOfNulls?> origin=null
              TYPE_ARG T: kotlin.Any?
              ARG size: CONST Int type=kotlin.Int value=10
      FUN ATOMICFU_GENERATED_PROPERTY_ACCESSOR name:<get-refArr> visibility:private modality:FINAL returnType:kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray>
        VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.AtomicRefArrayInlineExtensionTest
        correspondingProperty: PROPERTY ATOMICFU_GENERATED_PROPERTY name:refArr visibility:private modality:FINAL [val]
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='private final fun <get-refArr> (): kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> declared in <root>.AtomicRefArrayInlineExtensionTest'
            GET_FIELD 'FIELD ATOMICFU_GENERATED_FIELD name:refArr type:kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> visibility:private [final] declared in <root>.AtomicRefArrayInlineExtensionTest' type=kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> origin=null
              receiver: GET_VAR '<this>: <root>.AtomicRefArrayInlineExtensionTest declared in <root>.AtomicRefArrayInlineExtensionTest.<get-refArr>' type=<root>.AtomicRefArrayInlineExtensionTest origin=null
    PROPERTY ATOMICFU_GENERATED_PROPERTY name:a$volatile visibility:private modality:FINAL [var]
      FIELD ATOMICFU_GENERATED_FIELD name:a$volatile type:kotlin.Long visibility:private
        annotations:
          Volatile
        EXPRESSION_BODY
          CONST Long type=kotlin.Long value=0
      FUN ATOMICFU_GENERATED_PROPERTY_ACCESSOR name:<get-a$volatile> visibility:private modality:FINAL returnType:kotlin.Long
        VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.AtomicRefArrayInlineExtensionTest
        correspondingProperty: PROPERTY ATOMICFU_GENERATED_PROPERTY name:a$volatile visibility:private modality:FINAL [var]
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='private final fun <get-a$volatile> (): kotlin.Long declared in <root>.AtomicRefArrayInlineExtensionTest'
            GET_FIELD 'FIELD ATOMICFU_GENERATED_FIELD name:a$volatile type:kotlin.Long visibility:private declared in <root>.AtomicRefArrayInlineExtensionTest' type=kotlin.Long origin=null
              receiver: GET_VAR '<this>: <root>.AtomicRefArrayInlineExtensionTest declared in <root>.AtomicRefArrayInlineExtensionTest.<get-a$volatile>' type=<root>.AtomicRefArrayInlineExtensionTest origin=null
      FUN ATOMICFU_GENERATED_PROPERTY_ACCESSOR name:<set-a$volatile> visibility:private modality:FINAL returnType:kotlin.Unit
        VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.AtomicRefArrayInlineExtensionTest
        VALUE_PARAMETER kind:Regular name:value index:1 type:kotlin.Long
        correspondingProperty: PROPERTY ATOMICFU_GENERATED_PROPERTY name:a$volatile visibility:private modality:FINAL [var]
        BLOCK_BODY
          RETURN type=kotlin.Unit from='private final fun <set-a$volatile> (value: kotlin.Long): kotlin.Unit declared in <root>.AtomicRefArrayInlineExtensionTest'
            SET_FIELD 'FIELD ATOMICFU_GENERATED_FIELD name:a$volatile type:kotlin.Long visibility:private declared in <root>.AtomicRefArrayInlineExtensionTest' type=kotlin.Unit origin=null
              receiver: GET_VAR '<this>: <root>.AtomicRefArrayInlineExtensionTest declared in <root>.AtomicRefArrayInlineExtensionTest.<set-a$volatile>' type=<root>.AtomicRefArrayInlineExtensionTest origin=null
              value: GET_VAR 'value: kotlin.Long declared in <root>.AtomicRefArrayInlineExtensionTest.<set-a$volatile>' type=kotlin.Long origin=null
    CONSTRUCTOR visibility:public returnType:<root>.AtomicRefArrayInlineExtensionTest [primary]
      BLOCK_BODY
        DELEGATING_CONSTRUCTOR_CALL 'public constructor <init> () declared in kotlin.Any'
        INSTANCE_INITIALIZER_CALL classDescriptor='CLASS CLASS name:AtomicRefArrayInlineExtensionTest modality:FINAL visibility:public superTypes:[kotlin.Any]' type=kotlin.Unit
    FUN ATOMICFU_GENERATED_FUNCTION name:extensionLoop$atomicfu$ATOMIC_ARRAY$Any visibility:private modality:FINAL returnType:kotlin.String? [inline]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.AtomicRefArrayInlineExtensionTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.concurrent.AtomicArray<kotlin.Any?>
      VALUE_PARAMETER kind:Regular name:index$atomicfu index:2 type:kotlin.Int
      VALUE_PARAMETER kind:Regular name:to index:3 type:kotlin.String
      BLOCK_BODY
        CALL 'private final fun loop$atomicfu$ATOMIC_ARRAY$Any (handler$atomicfu: kotlin.concurrent.AtomicArray<kotlin.Any?>, index$atomicfu: kotlin.Int, action$atomicfu: kotlin.Function1<kotlin.Any?, kotlin.Unit>): kotlin.Unit declared in <root>.AtomicRefArrayInlineExtensionTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.AtomicRefArrayInlineExtensionTest declared in <root>.AtomicRefArrayInlineExtensionTest.extensionLoop$atomicfu$ATOMIC_ARRAY$Any' type=<root>.AtomicRefArrayInlineExtensionTest origin=null
          ARG handler$atomicfu: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicArray<kotlin.Any?> declared in <root>.AtomicRefArrayInlineExtensionTest.extensionLoop$atomicfu$ATOMIC_ARRAY$Any' type=kotlin.concurrent.AtomicArray<kotlin.Any?> origin=null
          ARG index$atomicfu: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.AtomicRefArrayInlineExtensionTest.extensionLoop$atomicfu$ATOMIC_ARRAY$Any' type=kotlin.Int origin=null
          ARG action$atomicfu: FUN_EXPR type=kotlin.Function1<kotlin.String?, kotlin.Unit> origin=LAMBDA
            FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Unit
              VALUE_PARAMETER kind:Regular name:cur index:0 type:kotlin.String?
              BLOCK_BODY
                TYPE_OP type=kotlin.Unit origin=IMPLICIT_COERCION_TO_UNIT typeOperand=kotlin.Unit
                  WHEN type=kotlin.String origin=IF
                    BRANCH
                      if: CALL 'public final fun compareAndSet (index: kotlin.Int, expectedValue: T of kotlin.concurrent.AtomicArray, newValue: T of kotlin.concurrent.AtomicArray): kotlin.Boolean declared in kotlin.concurrent.AtomicArray' type=kotlin.Boolean origin=null
                        ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicArray<kotlin.Any?> declared in <root>.AtomicRefArrayInlineExtensionTest.extensionLoop$atomicfu$ATOMIC_ARRAY$Any' type=kotlin.concurrent.AtomicArray<kotlin.Any?> origin=null
                        ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.AtomicRefArrayInlineExtensionTest.extensionLoop$atomicfu$ATOMIC_ARRAY$Any' type=kotlin.Int origin=null
                        ARG expectedValue: GET_VAR 'cur: kotlin.String? declared in <root>.AtomicRefArrayInlineExtensionTest.extensionLoop$atomicfu$ATOMIC_ARRAY$Any.<anonymous>' type=kotlin.String? origin=null
                        ARG newValue: GET_VAR 'to: kotlin.String declared in <root>.AtomicRefArrayInlineExtensionTest.extensionLoop$atomicfu$ATOMIC_ARRAY$Any' type=kotlin.String origin=null
                      then: RETURN type=kotlin.Nothing from='private final fun extensionLoop$atomicfu$ATOMIC_ARRAY$Any (handler$atomicfu: kotlin.concurrent.AtomicArray<kotlin.Any?>, index$atomicfu: kotlin.Int, to: kotlin.String): kotlin.String? declared in <root>.AtomicRefArrayInlineExtensionTest'
                        TYPE_OP type=kotlin.Any? origin=CAST typeOperand=kotlin.Any?
                          CALL 'public final fun get (index: kotlin.Int): T of kotlin.concurrent.AtomicArray declared in kotlin.concurrent.AtomicArray' type=T of kotlin.concurrent.AtomicArray origin=null
                            ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicArray<kotlin.Any?> declared in <root>.AtomicRefArrayInlineExtensionTest.extensionLoop$atomicfu$ATOMIC_ARRAY$Any' type=kotlin.concurrent.AtomicArray<kotlin.Any?> origin=null
                            ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.AtomicRefArrayInlineExtensionTest.extensionLoop$atomicfu$ATOMIC_ARRAY$Any' type=kotlin.Int origin=null
                    BRANCH
                      if: CONST Boolean type=kotlin.Boolean value=true
                      then: CONST String type=kotlin.String value="incorrect"
    FUN ATOMICFU_GENERATED_FUNCTION name:extensionLoop$atomicfu$NATIVE_PROPERTY_REF$Any visibility:private modality:FINAL returnType:kotlin.String? [inline]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.AtomicRefArrayInlineExtensionTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Any?>> [crossinline]
      VALUE_PARAMETER kind:Regular name:to index:2 type:kotlin.String
      BLOCK_BODY
        CALL 'private final fun loop$atomicfu$NATIVE_PROPERTY_REF$Any (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Any?>>, action$atomicfu: kotlin.Function1<kotlin.Any?, kotlin.Unit>): kotlin.Unit declared in <root>.AtomicRefArrayInlineExtensionTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.AtomicRefArrayInlineExtensionTest declared in <root>.AtomicRefArrayInlineExtensionTest.extensionLoop$atomicfu$NATIVE_PROPERTY_REF$Any' type=<root>.AtomicRefArrayInlineExtensionTest origin=null
          ARG handler$atomicfu: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Any?>> declared in <root>.AtomicRefArrayInlineExtensionTest.extensionLoop$atomicfu$NATIVE_PROPERTY_REF$Any' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Any?>> origin=null
          ARG action$atomicfu: FUN_EXPR type=kotlin.Function1<kotlin.String?, kotlin.Unit> origin=LAMBDA
            FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Unit
              VALUE_PARAMETER kind:Regular name:cur index:0 type:kotlin.String?
              BLOCK_BODY
                TYPE_OP type=kotlin.Unit origin=IMPLICIT_COERCION_TO_UNIT typeOperand=kotlin.Unit
                  WHEN type=kotlin.String origin=IF
                    BRANCH
                      if: CALL 'internal final fun compareAndSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.compareAndSetField>, expectedValue: T of kotlin.concurrent.compareAndSetField, newValue: T of kotlin.concurrent.compareAndSetField): kotlin.Boolean declared in kotlin.concurrent' type=kotlin.Boolean origin=null
                        TYPE_ARG T: kotlin.Any?
                        ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                          ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Any?>> declared in <root>.AtomicRefArrayInlineExtensionTest.extensionLoop$atomicfu$NATIVE_PROPERTY_REF$Any' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Any?>> origin=null
                        ARG expectedValue: GET_VAR 'cur: kotlin.String? declared in <root>.AtomicRefArrayInlineExtensionTest.extensionLoop$atomicfu$NATIVE_PROPERTY_REF$Any.<anonymous>' type=kotlin.String? origin=null
                        ARG newValue: GET_VAR 'to: kotlin.String declared in <root>.AtomicRefArrayInlineExtensionTest.extensionLoop$atomicfu$NATIVE_PROPERTY_REF$Any' type=kotlin.String origin=null
                      then: RETURN type=kotlin.Nothing from='private final fun extensionLoop$atomicfu$NATIVE_PROPERTY_REF$Any (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Any?>>, to: kotlin.String): kotlin.String? declared in <root>.AtomicRefArrayInlineExtensionTest'
                        TYPE_OP type=kotlin.Any? origin=CAST typeOperand=kotlin.Any?
                          CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                            TYPE_ARG T: kotlin.Any?
                            ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                              ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Any?>> declared in <root>.AtomicRefArrayInlineExtensionTest.extensionLoop$atomicfu$NATIVE_PROPERTY_REF$Any' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Any?>> origin=null
                    BRANCH
                      if: CONST Boolean type=kotlin.Boolean value=true
                      then: CONST String type=kotlin.String value="incorrect"
    FUN ATOMICFU_GENERATED_FUNCTION name:extensionLoopExpression$atomicfu$ATOMIC_ARRAY$Any visibility:private modality:FINAL returnType:kotlin.String? [inline]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.AtomicRefArrayInlineExtensionTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.concurrent.AtomicArray<kotlin.Any?>
      VALUE_PARAMETER kind:Regular name:index$atomicfu index:2 type:kotlin.Int
      VALUE_PARAMETER kind:Regular name:to index:3 type:kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='private final fun extensionLoopExpression$atomicfu$ATOMIC_ARRAY$Any (handler$atomicfu: kotlin.concurrent.AtomicArray<kotlin.Any?>, index$atomicfu: kotlin.Int, to: kotlin.String): kotlin.String? declared in <root>.AtomicRefArrayInlineExtensionTest'
          CALL 'private final fun loop$atomicfu$ATOMIC_ARRAY$Any (handler$atomicfu: kotlin.concurrent.AtomicArray<kotlin.Any?>, index$atomicfu: kotlin.Int, action$atomicfu: kotlin.Function1<kotlin.Any?, kotlin.Unit>): kotlin.Unit declared in <root>.AtomicRefArrayInlineExtensionTest' type=kotlin.Unit origin=null
            ARG <this>: GET_VAR '<this>: <root>.AtomicRefArrayInlineExtensionTest declared in <root>.AtomicRefArrayInlineExtensionTest.extensionLoopExpression$atomicfu$ATOMIC_ARRAY$Any' type=<root>.AtomicRefArrayInlineExtensionTest origin=null
            ARG handler$atomicfu: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicArray<kotlin.Any?> declared in <root>.AtomicRefArrayInlineExtensionTest.extensionLoopExpression$atomicfu$ATOMIC_ARRAY$Any' type=kotlin.concurrent.AtomicArray<kotlin.Any?> origin=null
            ARG index$atomicfu: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.AtomicRefArrayInlineExtensionTest.extensionLoopExpression$atomicfu$ATOMIC_ARRAY$Any' type=kotlin.Int origin=null
            ARG action$atomicfu: FUN_EXPR type=kotlin.Function1<kotlin.String?, kotlin.Unit> origin=LAMBDA
              FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Unit
                VALUE_PARAMETER kind:Regular name:cur index:0 type:kotlin.String?
                BLOCK_BODY
                  CALL 'public final fun set (index: kotlin.Int, newValue: T of kotlin.concurrent.AtomicArray): kotlin.Unit declared in kotlin.concurrent.AtomicArray' type=kotlin.Unit origin=null
                    ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicArray<kotlin.Any?> declared in <root>.AtomicRefArrayInlineExtensionTest.extensionLoopExpression$atomicfu$ATOMIC_ARRAY$Any' type=kotlin.concurrent.AtomicArray<kotlin.Any?> origin=null
                    ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.AtomicRefArrayInlineExtensionTest.extensionLoopExpression$atomicfu$ATOMIC_ARRAY$Any' type=kotlin.Int origin=null
                    ARG newValue: CONST String type=kotlin.String value="aaa"
                  RETURN type=kotlin.Nothing from='private final fun extensionLoopExpression$atomicfu$ATOMIC_ARRAY$Any (handler$atomicfu: kotlin.concurrent.AtomicArray<kotlin.Any?>, index$atomicfu: kotlin.Int, to: kotlin.String): kotlin.String? declared in <root>.AtomicRefArrayInlineExtensionTest'
                    WHEN type=kotlin.String? origin=IF
                      BRANCH
                        if: CALL 'public final fun compareAndSet (index: kotlin.Int, expectedValue: T of kotlin.concurrent.AtomicArray, newValue: T of kotlin.concurrent.AtomicArray): kotlin.Boolean declared in kotlin.concurrent.AtomicArray' type=kotlin.Boolean origin=null
                          ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicArray<kotlin.Any?> declared in <root>.AtomicRefArrayInlineExtensionTest.extensionLoopExpression$atomicfu$ATOMIC_ARRAY$Any' type=kotlin.concurrent.AtomicArray<kotlin.Any?> origin=null
                          ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.AtomicRefArrayInlineExtensionTest.extensionLoopExpression$atomicfu$ATOMIC_ARRAY$Any' type=kotlin.Int origin=null
                          ARG expectedValue: GET_VAR 'cur: kotlin.String? declared in <root>.AtomicRefArrayInlineExtensionTest.extensionLoopExpression$atomicfu$ATOMIC_ARRAY$Any.<anonymous>' type=kotlin.String? origin=null
                          ARG newValue: GET_VAR 'to: kotlin.String declared in <root>.AtomicRefArrayInlineExtensionTest.extensionLoopExpression$atomicfu$ATOMIC_ARRAY$Any' type=kotlin.String origin=null
                        then: TYPE_OP type=kotlin.Any? origin=CAST typeOperand=kotlin.Any?
                          CALL 'public final fun get (index: kotlin.Int): T of kotlin.concurrent.AtomicArray declared in kotlin.concurrent.AtomicArray' type=T of kotlin.concurrent.AtomicArray origin=null
                            ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicArray<kotlin.Any?> declared in <root>.AtomicRefArrayInlineExtensionTest.extensionLoopExpression$atomicfu$ATOMIC_ARRAY$Any' type=kotlin.concurrent.AtomicArray<kotlin.Any?> origin=null
                            ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.AtomicRefArrayInlineExtensionTest.extensionLoopExpression$atomicfu$ATOMIC_ARRAY$Any' type=kotlin.Int origin=null
                      BRANCH
                        if: CONST Boolean type=kotlin.Boolean value=true
                        then: CONST String type=kotlin.String value="CAS_failed"
    FUN ATOMICFU_GENERATED_FUNCTION name:extensionLoopExpression$atomicfu$NATIVE_PROPERTY_REF$Any visibility:private modality:FINAL returnType:kotlin.String? [inline]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.AtomicRefArrayInlineExtensionTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Any?>> [crossinline]
      VALUE_PARAMETER kind:Regular name:to index:2 type:kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='private final fun extensionLoopExpression$atomicfu$NATIVE_PROPERTY_REF$Any (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Any?>>, to: kotlin.String): kotlin.String? declared in <root>.AtomicRefArrayInlineExtensionTest'
          CALL 'private final fun loop$atomicfu$NATIVE_PROPERTY_REF$Any (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Any?>>, action$atomicfu: kotlin.Function1<kotlin.Any?, kotlin.Unit>): kotlin.Unit declared in <root>.AtomicRefArrayInlineExtensionTest' type=kotlin.Unit origin=null
            ARG <this>: GET_VAR '<this>: <root>.AtomicRefArrayInlineExtensionTest declared in <root>.AtomicRefArrayInlineExtensionTest.extensionLoopExpression$atomicfu$NATIVE_PROPERTY_REF$Any' type=<root>.AtomicRefArrayInlineExtensionTest origin=null
            ARG handler$atomicfu: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Any?>> declared in <root>.AtomicRefArrayInlineExtensionTest.extensionLoopExpression$atomicfu$NATIVE_PROPERTY_REF$Any' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Any?>> origin=null
            ARG action$atomicfu: FUN_EXPR type=kotlin.Function1<kotlin.String?, kotlin.Unit> origin=LAMBDA
              FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Unit
                VALUE_PARAMETER kind:Regular name:cur index:0 type:kotlin.String?
                BLOCK_BODY
                  CALL 'internal final fun atomicSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicSetField>, newValue: T of kotlin.concurrent.atomicSetField): kotlin.Unit declared in kotlin.concurrent' type=kotlin.Unit origin=null
                    TYPE_ARG T: kotlin.Any?
                    ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                      ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Any?>> declared in <root>.AtomicRefArrayInlineExtensionTest.extensionLoopExpression$atomicfu$NATIVE_PROPERTY_REF$Any' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Any?>> origin=null
                    ARG newValue: CONST String type=kotlin.String value="aaa"
                  RETURN type=kotlin.Nothing from='private final fun extensionLoopExpression$atomicfu$NATIVE_PROPERTY_REF$Any (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Any?>>, to: kotlin.String): kotlin.String? declared in <root>.AtomicRefArrayInlineExtensionTest'
                    WHEN type=kotlin.String? origin=IF
                      BRANCH
                        if: CALL 'internal final fun compareAndSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.compareAndSetField>, expectedValue: T of kotlin.concurrent.compareAndSetField, newValue: T of kotlin.concurrent.compareAndSetField): kotlin.Boolean declared in kotlin.concurrent' type=kotlin.Boolean origin=null
                          TYPE_ARG T: kotlin.Any?
                          ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                            ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Any?>> declared in <root>.AtomicRefArrayInlineExtensionTest.extensionLoopExpression$atomicfu$NATIVE_PROPERTY_REF$Any' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Any?>> origin=null
                          ARG expectedValue: GET_VAR 'cur: kotlin.String? declared in <root>.AtomicRefArrayInlineExtensionTest.extensionLoopExpression$atomicfu$NATIVE_PROPERTY_REF$Any.<anonymous>' type=kotlin.String? origin=null
                          ARG newValue: GET_VAR 'to: kotlin.String declared in <root>.AtomicRefArrayInlineExtensionTest.extensionLoopExpression$atomicfu$NATIVE_PROPERTY_REF$Any' type=kotlin.String origin=null
                        then: TYPE_OP type=kotlin.Any? origin=CAST typeOperand=kotlin.Any?
                          CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                            TYPE_ARG T: kotlin.Any?
                            ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                              ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Any?>> declared in <root>.AtomicRefArrayInlineExtensionTest.extensionLoopExpression$atomicfu$NATIVE_PROPERTY_REF$Any' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Any?>> origin=null
                      BRANCH
                        if: CONST Boolean type=kotlin.Boolean value=true
                        then: CONST String type=kotlin.String value="CAS_failed"
    FUN ATOMICFU_GENERATED_FUNCTION name:extensionLoopMixedReceivers$atomicfu$ATOMIC_ARRAY$Any visibility:private modality:FINAL returnType:kotlin.String? [inline]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.AtomicRefArrayInlineExtensionTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.concurrent.AtomicArray<kotlin.Any?>
      VALUE_PARAMETER kind:Regular name:index$atomicfu index:2 type:kotlin.Int
      VALUE_PARAMETER kind:Regular name:first index:3 type:kotlin.String
      VALUE_PARAMETER kind:Regular name:second index:4 type:kotlin.String
      VALUE_PARAMETER kind:Regular name:index index:5 type:kotlin.Int
      BLOCK_BODY
        CALL 'private final fun loop$atomicfu$ATOMIC_ARRAY$Any (handler$atomicfu: kotlin.concurrent.AtomicArray<kotlin.Any?>, index$atomicfu: kotlin.Int, action$atomicfu: kotlin.Function1<kotlin.Any?, kotlin.Unit>): kotlin.Unit declared in <root>.AtomicRefArrayInlineExtensionTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.AtomicRefArrayInlineExtensionTest declared in <root>.AtomicRefArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$ATOMIC_ARRAY$Any' type=<root>.AtomicRefArrayInlineExtensionTest origin=null
          ARG handler$atomicfu: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicArray<kotlin.Any?> declared in <root>.AtomicRefArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$ATOMIC_ARRAY$Any' type=kotlin.concurrent.AtomicArray<kotlin.Any?> origin=null
          ARG index$atomicfu: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.AtomicRefArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$ATOMIC_ARRAY$Any' type=kotlin.Int origin=null
          ARG action$atomicfu: FUN_EXPR type=kotlin.Function1<kotlin.String?, kotlin.Unit> origin=LAMBDA
            FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Unit
              VALUE_PARAMETER kind:Regular name:cur index:0 type:kotlin.String?
              BLOCK_BODY
                TYPE_OP type=kotlin.Unit origin=IMPLICIT_COERCION_TO_UNIT typeOperand=kotlin.Unit
                  CALL 'public final fun compareAndSet (index: kotlin.Int, expectedValue: T of kotlin.concurrent.AtomicArray, newValue: T of kotlin.concurrent.AtomicArray): kotlin.Boolean declared in kotlin.concurrent.AtomicArray' type=kotlin.Boolean origin=null
                    ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicArray<kotlin.Any?> declared in <root>.AtomicRefArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$ATOMIC_ARRAY$Any' type=kotlin.concurrent.AtomicArray<kotlin.Any?> origin=null
                    ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.AtomicRefArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$ATOMIC_ARRAY$Any' type=kotlin.Int origin=null
                    ARG expectedValue: GET_VAR 'cur: kotlin.String? declared in <root>.AtomicRefArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$ATOMIC_ARRAY$Any.<anonymous>' type=kotlin.String? origin=null
                    ARG newValue: GET_VAR 'first: kotlin.String declared in <root>.AtomicRefArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$ATOMIC_ARRAY$Any' type=kotlin.String origin=null
                TYPE_OP type=kotlin.Unit origin=IMPLICIT_COERCION_TO_UNIT typeOperand=kotlin.Unit
                  CALL 'public final fun compareAndSet (index: kotlin.Int, expectedValue: T of kotlin.concurrent.AtomicArray, newValue: T of kotlin.concurrent.AtomicArray): kotlin.Boolean declared in kotlin.concurrent.AtomicArray' type=kotlin.Boolean origin=null
                    ARG <this>: CALL 'private final fun <get-refArr> (): kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> declared in <root>.AtomicRefArrayInlineExtensionTest' type=kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> origin=null
                      ARG <this>: GET_VAR '<this>: <root>.AtomicRefArrayInlineExtensionTest declared in <root>.AtomicRefArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$ATOMIC_ARRAY$Any' type=<root>.AtomicRefArrayInlineExtensionTest origin=null
                    ARG index: GET_VAR 'index: kotlin.Int declared in <root>.AtomicRefArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$ATOMIC_ARRAY$Any' type=kotlin.Int origin=null
                    ARG expectedValue: GET_VAR 'first: kotlin.String declared in <root>.AtomicRefArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$ATOMIC_ARRAY$Any' type=kotlin.String origin=null
                    ARG newValue: GET_VAR 'second: kotlin.String declared in <root>.AtomicRefArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$ATOMIC_ARRAY$Any' type=kotlin.String origin=null
                RETURN type=kotlin.Nothing from='private final fun extensionLoopMixedReceivers$atomicfu$ATOMIC_ARRAY$Any (handler$atomicfu: kotlin.concurrent.AtomicArray<kotlin.Any?>, index$atomicfu: kotlin.Int, first: kotlin.String, second: kotlin.String, index: kotlin.Int): kotlin.String? declared in <root>.AtomicRefArrayInlineExtensionTest'
                  TYPE_OP type=kotlin.Any? origin=CAST typeOperand=kotlin.Any?
                    CALL 'public final fun get (index: kotlin.Int): T of kotlin.concurrent.AtomicArray declared in kotlin.concurrent.AtomicArray' type=T of kotlin.concurrent.AtomicArray origin=null
                      ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicArray<kotlin.Any?> declared in <root>.AtomicRefArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$ATOMIC_ARRAY$Any' type=kotlin.concurrent.AtomicArray<kotlin.Any?> origin=null
                      ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.AtomicRefArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$ATOMIC_ARRAY$Any' type=kotlin.Int origin=null
    FUN ATOMICFU_GENERATED_FUNCTION name:extensionLoopMixedReceivers$atomicfu$NATIVE_PROPERTY_REF$Any visibility:private modality:FINAL returnType:kotlin.String? [inline]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.AtomicRefArrayInlineExtensionTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Any?>> [crossinline]
      VALUE_PARAMETER kind:Regular name:first index:2 type:kotlin.String
      VALUE_PARAMETER kind:Regular name:second index:3 type:kotlin.String
      VALUE_PARAMETER kind:Regular name:index index:4 type:kotlin.Int
      BLOCK_BODY
        CALL 'private final fun loop$atomicfu$NATIVE_PROPERTY_REF$Any (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Any?>>, action$atomicfu: kotlin.Function1<kotlin.Any?, kotlin.Unit>): kotlin.Unit declared in <root>.AtomicRefArrayInlineExtensionTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.AtomicRefArrayInlineExtensionTest declared in <root>.AtomicRefArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$NATIVE_PROPERTY_REF$Any' type=<root>.AtomicRefArrayInlineExtensionTest origin=null
          ARG handler$atomicfu: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Any?>> declared in <root>.AtomicRefArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$NATIVE_PROPERTY_REF$Any' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Any?>> origin=null
          ARG action$atomicfu: FUN_EXPR type=kotlin.Function1<kotlin.String?, kotlin.Unit> origin=LAMBDA
            FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Unit
              VALUE_PARAMETER kind:Regular name:cur index:0 type:kotlin.String?
              BLOCK_BODY
                TYPE_OP type=kotlin.Unit origin=IMPLICIT_COERCION_TO_UNIT typeOperand=kotlin.Unit
                  CALL 'internal final fun compareAndSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.compareAndSetField>, expectedValue: T of kotlin.concurrent.compareAndSetField, newValue: T of kotlin.concurrent.compareAndSetField): kotlin.Boolean declared in kotlin.concurrent' type=kotlin.Boolean origin=null
                    TYPE_ARG T: kotlin.Any?
                    ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                      ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Any?>> declared in <root>.AtomicRefArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$NATIVE_PROPERTY_REF$Any' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Any?>> origin=null
                    ARG expectedValue: GET_VAR 'cur: kotlin.String? declared in <root>.AtomicRefArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$NATIVE_PROPERTY_REF$Any.<anonymous>' type=kotlin.String? origin=null
                    ARG newValue: GET_VAR 'first: kotlin.String declared in <root>.AtomicRefArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$NATIVE_PROPERTY_REF$Any' type=kotlin.String origin=null
                TYPE_OP type=kotlin.Unit origin=IMPLICIT_COERCION_TO_UNIT typeOperand=kotlin.Unit
                  CALL 'public final fun compareAndSet (index: kotlin.Int, expectedValue: T of kotlin.concurrent.AtomicArray, newValue: T of kotlin.concurrent.AtomicArray): kotlin.Boolean declared in kotlin.concurrent.AtomicArray' type=kotlin.Boolean origin=null
                    ARG <this>: CALL 'private final fun <get-refArr> (): kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> declared in <root>.AtomicRefArrayInlineExtensionTest' type=kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> origin=null
                      ARG <this>: GET_VAR '<this>: <root>.AtomicRefArrayInlineExtensionTest declared in <root>.AtomicRefArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$NATIVE_PROPERTY_REF$Any' type=<root>.AtomicRefArrayInlineExtensionTest origin=null
                    ARG index: GET_VAR 'index: kotlin.Int declared in <root>.AtomicRefArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$NATIVE_PROPERTY_REF$Any' type=kotlin.Int origin=null
                    ARG expectedValue: GET_VAR 'first: kotlin.String declared in <root>.AtomicRefArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$NATIVE_PROPERTY_REF$Any' type=kotlin.String origin=null
                    ARG newValue: GET_VAR 'second: kotlin.String declared in <root>.AtomicRefArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$NATIVE_PROPERTY_REF$Any' type=kotlin.String origin=null
                RETURN type=kotlin.Nothing from='private final fun extensionLoopMixedReceivers$atomicfu$NATIVE_PROPERTY_REF$Any (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Any?>>, first: kotlin.String, second: kotlin.String, index: kotlin.Int): kotlin.String? declared in <root>.AtomicRefArrayInlineExtensionTest'
                  TYPE_OP type=kotlin.Any? origin=CAST typeOperand=kotlin.Any?
                    CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                      TYPE_ARG T: kotlin.Any?
                      ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                        ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Any?>> declared in <root>.AtomicRefArrayInlineExtensionTest.extensionLoopMixedReceivers$atomicfu$NATIVE_PROPERTY_REF$Any' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Any?>> origin=null
    FUN ATOMICFU_GENERATED_FUNCTION name:loop$atomicfu$ATOMIC_ARRAY$Any visibility:private modality:FINAL returnType:kotlin.Unit [inline]
      VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.AtomicRefArrayInlineExtensionTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.concurrent.AtomicArray<kotlin.Any?>
      VALUE_PARAMETER kind:Regular name:index$atomicfu index:2 type:kotlin.Int
      VALUE_PARAMETER kind:Regular name:action$atomicfu index:3 type:kotlin.Function1<kotlin.Any?, kotlin.Unit>
      BLOCK_BODY
        WHILE label=null origin=null
          condition: CONST Boolean type=kotlin.Boolean value=true
          body: BLOCK type=R of kotlin.Function1 origin=null
            VAR IR_TEMPORARY_VARIABLE name:tmp_6 type:T of kotlin.concurrent.AtomicArray [val]
              CALL 'public final fun get (index: kotlin.Int): T of kotlin.concurrent.AtomicArray declared in kotlin.concurrent.AtomicArray' type=T of kotlin.concurrent.AtomicArray origin=null
                ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicArray<kotlin.Any?> declared in <root>.AtomicRefArrayInlineExtensionTest.loop$atomicfu$ATOMIC_ARRAY$Any' type=kotlin.concurrent.AtomicArray<kotlin.Any?> origin=null
                ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.AtomicRefArrayInlineExtensionTest.loop$atomicfu$ATOMIC_ARRAY$Any' type=kotlin.Int origin=null
            CALL 'public abstract fun invoke (p1: P1 of kotlin.Function1): R of kotlin.Function1 declared in kotlin.Function1' type=R of kotlin.Function1 origin=null
              ARG <this>: GET_VAR 'action$atomicfu: kotlin.Function1<kotlin.Any?, kotlin.Unit> declared in <root>.AtomicRefArrayInlineExtensionTest.loop$atomicfu$ATOMIC_ARRAY$Any' type=kotlin.Function1<kotlin.Any?, kotlin.Unit> origin=null
              ARG p1: GET_VAR 'val tmp_6: T of kotlin.concurrent.AtomicArray declared in <root>.AtomicRefArrayInlineExtensionTest.loop$atomicfu$ATOMIC_ARRAY$Any' type=T of kotlin.concurrent.AtomicArray origin=null
    FUN ATOMICFU_GENERATED_FUNCTION name:loop$atomicfu$NATIVE_PROPERTY_REF$Any visibility:private modality:FINAL returnType:kotlin.Unit [inline]
      VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.AtomicRefArrayInlineExtensionTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Any?>> [crossinline]
      VALUE_PARAMETER kind:Regular name:action$atomicfu index:2 type:kotlin.Function1<kotlin.Any?, kotlin.Unit>
      BLOCK_BODY
        WHILE label=null origin=null
          condition: CONST Boolean type=kotlin.Boolean value=true
          body: BLOCK type=R of kotlin.Function1 origin=null
            VAR IR_TEMPORARY_VARIABLE name:tmp_7 type:T of kotlin.concurrent.atomicGetField [val]
              CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                TYPE_ARG T: kotlin.Any?
                ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                  ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Any?>> declared in <root>.AtomicRefArrayInlineExtensionTest.loop$atomicfu$NATIVE_PROPERTY_REF$Any' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Any?>> origin=null
            CALL 'public abstract fun invoke (p1: P1 of kotlin.Function1): R of kotlin.Function1 declared in kotlin.Function1' type=R of kotlin.Function1 origin=null
              ARG <this>: GET_VAR 'action$atomicfu: kotlin.Function1<kotlin.Any?, kotlin.Unit> declared in <root>.AtomicRefArrayInlineExtensionTest.loop$atomicfu$NATIVE_PROPERTY_REF$Any' type=kotlin.Function1<kotlin.Any?, kotlin.Unit> origin=null
              ARG p1: GET_VAR 'val tmp_7: T of kotlin.concurrent.atomicGetField declared in <root>.AtomicRefArrayInlineExtensionTest.loop$atomicfu$NATIVE_PROPERTY_REF$Any' type=T of kotlin.concurrent.atomicGetField origin=null
    FUN FAKE_OVERRIDE name:equals visibility:public modality:OPEN returnType:kotlin.Boolean [fake_override,operator]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Any
      VALUE_PARAMETER kind:Regular name:other index:1 type:kotlin.Any?
      overridden:
        public open fun equals (other: kotlin.Any?): kotlin.Boolean declared in kotlin.Any
    FUN FAKE_OVERRIDE name:hashCode visibility:public modality:OPEN returnType:kotlin.Int [fake_override]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Any
      overridden:
        public open fun hashCode (): kotlin.Int declared in kotlin.Any
    FUN FAKE_OVERRIDE name:toString visibility:public modality:OPEN returnType:kotlin.String [fake_override]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Any
      overridden:
        public open fun toString (): kotlin.String declared in kotlin.Any
    FUN name:casLoop visibility:private modality:FINAL returnType:kotlin.String? [inline]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.AtomicRefArrayInlineExtensionTest
      VALUE_PARAMETER kind:Regular name:to index:1 type:kotlin.String
      BLOCK_BODY
        CALL 'private final fun loop$atomicfu$ATOMIC_ARRAY$Any (handler$atomicfu: kotlin.concurrent.AtomicArray<kotlin.Any?>, index$atomicfu: kotlin.Int, action$atomicfu: kotlin.Function1<kotlin.Any?, kotlin.Unit>): kotlin.Unit declared in <root>.AtomicRefArrayInlineExtensionTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.AtomicRefArrayInlineExtensionTest declared in <root>.AtomicRefArrayInlineExtensionTest.casLoop' type=<root>.AtomicRefArrayInlineExtensionTest origin=null
          ARG handler$atomicfu: CALL 'private final fun <get-refArr> (): kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> declared in <root>.AtomicRefArrayInlineExtensionTest' type=kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> origin=null
            ARG <this>: GET_VAR '<this>: <root>.AtomicRefArrayInlineExtensionTest declared in <root>.AtomicRefArrayInlineExtensionTest.casLoop' type=<root>.AtomicRefArrayInlineExtensionTest origin=IMPLICIT_ARGUMENT
          ARG index$atomicfu: CONST Int type=kotlin.Int value=0
          ARG action$atomicfu: FUN_EXPR type=kotlin.Function1<kotlin.String?, kotlin.Unit> origin=LAMBDA
            FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Unit
              VALUE_PARAMETER kind:Regular name:cur index:0 type:kotlin.String?
              BLOCK_BODY
                WHEN type=kotlin.Unit origin=IF
                  BRANCH
                    if: CALL 'public final fun compareAndSet (index: kotlin.Int, expectedValue: T of kotlin.concurrent.AtomicArray, newValue: T of kotlin.concurrent.AtomicArray): kotlin.Boolean declared in kotlin.concurrent.AtomicArray' type=kotlin.Boolean origin=null
                      ARG <this>: CALL 'private final fun <get-refArr> (): kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> declared in <root>.AtomicRefArrayInlineExtensionTest' type=kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> origin=null
                        ARG <this>: GET_VAR '<this>: <root>.AtomicRefArrayInlineExtensionTest declared in <root>.AtomicRefArrayInlineExtensionTest.casLoop' type=<root>.AtomicRefArrayInlineExtensionTest origin=IMPLICIT_ARGUMENT
                      ARG index: CONST Int type=kotlin.Int value=0
                      ARG expectedValue: GET_VAR 'cur: kotlin.String? declared in <root>.AtomicRefArrayInlineExtensionTest.casLoop.<anonymous>' type=kotlin.String? origin=null
                      ARG newValue: GET_VAR 'to: kotlin.String declared in <root>.AtomicRefArrayInlineExtensionTest.casLoop' type=kotlin.String origin=null
                    then: RETURN type=kotlin.Nothing from='private final fun casLoop (to: kotlin.String): kotlin.String? declared in <root>.AtomicRefArrayInlineExtensionTest'
                      TYPE_OP type=kotlin.Any? origin=CAST typeOperand=kotlin.Any?
                        CALL 'public final fun get (index: kotlin.Int): T of kotlin.concurrent.AtomicArray declared in kotlin.concurrent.AtomicArray' type=T of kotlin.concurrent.AtomicArray origin=null
                          ARG <this>: CALL 'private final fun <get-refArr> (): kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> declared in <root>.AtomicRefArrayInlineExtensionTest' type=kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> origin=null
                            ARG <this>: GET_VAR '<this>: <root>.AtomicRefArrayInlineExtensionTest declared in <root>.AtomicRefArrayInlineExtensionTest.casLoop' type=<root>.AtomicRefArrayInlineExtensionTest origin=IMPLICIT_ARGUMENT
                          ARG index: CONST Int type=kotlin.Int value=0
    FUN name:casLoopExpression visibility:private modality:FINAL returnType:kotlin.String? [inline]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.AtomicRefArrayInlineExtensionTest
      VALUE_PARAMETER kind:Regular name:to index:1 type:kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='private final fun casLoopExpression (to: kotlin.String): kotlin.String? declared in <root>.AtomicRefArrayInlineExtensionTest'
          CALL 'private final fun loop$atomicfu$ATOMIC_ARRAY$Any (handler$atomicfu: kotlin.concurrent.AtomicArray<kotlin.Any?>, index$atomicfu: kotlin.Int, action$atomicfu: kotlin.Function1<kotlin.Any?, kotlin.Unit>): kotlin.Unit declared in <root>.AtomicRefArrayInlineExtensionTest' type=kotlin.Unit origin=null
            ARG <this>: GET_VAR '<this>: <root>.AtomicRefArrayInlineExtensionTest declared in <root>.AtomicRefArrayInlineExtensionTest.casLoopExpression' type=<root>.AtomicRefArrayInlineExtensionTest origin=null
            ARG handler$atomicfu: CALL 'private final fun <get-refArr> (): kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> declared in <root>.AtomicRefArrayInlineExtensionTest' type=kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> origin=null
              ARG <this>: GET_VAR '<this>: <root>.AtomicRefArrayInlineExtensionTest declared in <root>.AtomicRefArrayInlineExtensionTest.casLoopExpression' type=<root>.AtomicRefArrayInlineExtensionTest origin=IMPLICIT_ARGUMENT
            ARG index$atomicfu: CONST Int type=kotlin.Int value=3
            ARG action$atomicfu: FUN_EXPR type=kotlin.Function1<kotlin.String?, kotlin.Unit> origin=LAMBDA
              FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Unit
                VALUE_PARAMETER kind:Regular name:cur index:0 type:kotlin.String?
                BLOCK_BODY
                  WHEN type=kotlin.Unit origin=IF
                    BRANCH
                      if: CALL 'public final fun compareAndSet (index: kotlin.Int, expectedValue: T of kotlin.concurrent.AtomicArray, newValue: T of kotlin.concurrent.AtomicArray): kotlin.Boolean declared in kotlin.concurrent.AtomicArray' type=kotlin.Boolean origin=null
                        ARG <this>: CALL 'private final fun <get-refArr> (): kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> declared in <root>.AtomicRefArrayInlineExtensionTest' type=kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> origin=null
                          ARG <this>: GET_VAR '<this>: <root>.AtomicRefArrayInlineExtensionTest declared in <root>.AtomicRefArrayInlineExtensionTest.casLoopExpression' type=<root>.AtomicRefArrayInlineExtensionTest origin=IMPLICIT_ARGUMENT
                        ARG index: CONST Int type=kotlin.Int value=3
                        ARG expectedValue: GET_VAR 'cur: kotlin.String? declared in <root>.AtomicRefArrayInlineExtensionTest.casLoopExpression.<anonymous>' type=kotlin.String? origin=null
                        ARG newValue: GET_VAR 'to: kotlin.String declared in <root>.AtomicRefArrayInlineExtensionTest.casLoopExpression' type=kotlin.String origin=null
                      then: RETURN type=kotlin.Nothing from='private final fun casLoopExpression (to: kotlin.String): kotlin.String? declared in <root>.AtomicRefArrayInlineExtensionTest'
                        TYPE_OP type=kotlin.Any? origin=CAST typeOperand=kotlin.Any?
                          CALL 'public final fun get (index: kotlin.Int): T of kotlin.concurrent.AtomicArray declared in kotlin.concurrent.AtomicArray' type=T of kotlin.concurrent.AtomicArray origin=null
                            ARG <this>: CALL 'private final fun <get-refArr> (): kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> declared in <root>.AtomicRefArrayInlineExtensionTest' type=kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> origin=null
                              ARG <this>: GET_VAR '<this>: <root>.AtomicRefArrayInlineExtensionTest declared in <root>.AtomicRefArrayInlineExtensionTest.casLoopExpression' type=<root>.AtomicRefArrayInlineExtensionTest origin=IMPLICIT_ARGUMENT
                            ARG index: CONST Int type=kotlin.Int value=3
    FUN name:test visibility:public modality:FINAL returnType:kotlin.Unit
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.AtomicRefArrayInlineExtensionTest
      BLOCK_BODY
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.String?
          ARG expected: CONST String type=kotlin.String value="aaa"
          ARG actual: CALL 'private final fun casLoop (to: kotlin.String): kotlin.String? declared in <root>.AtomicRefArrayInlineExtensionTest' type=kotlin.String? origin=null
            ARG <this>: GET_VAR '<this>: <root>.AtomicRefArrayInlineExtensionTest declared in <root>.AtomicRefArrayInlineExtensionTest.test' type=<root>.AtomicRefArrayInlineExtensionTest origin=IMPLICIT_ARGUMENT
            ARG to: CONST String type=kotlin.String value="aaa"
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.String?
          ARG expected: CONST String type=kotlin.String value="bbb"
          ARG actual: CALL 'private final fun casLoopExpression (to: kotlin.String): kotlin.String? declared in <root>.AtomicRefArrayInlineExtensionTest' type=kotlin.String? origin=null
            ARG <this>: GET_VAR '<this>: <root>.AtomicRefArrayInlineExtensionTest declared in <root>.AtomicRefArrayInlineExtensionTest.test' type=<root>.AtomicRefArrayInlineExtensionTest origin=IMPLICIT_ARGUMENT
            ARG to: CONST String type=kotlin.String value="bbb"
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.String?
          ARG expected: CONST String type=kotlin.String value="ccc"
          ARG actual: CALL 'private final fun extensionLoop$atomicfu$ATOMIC_ARRAY$Any (handler$atomicfu: kotlin.concurrent.AtomicArray<kotlin.Any?>, index$atomicfu: kotlin.Int, to: kotlin.String): kotlin.String? declared in <root>.AtomicRefArrayInlineExtensionTest' type=kotlin.String? origin=null
            ARG <this>: GET_VAR '<this>: <root>.AtomicRefArrayInlineExtensionTest declared in <root>.AtomicRefArrayInlineExtensionTest.test' type=<root>.AtomicRefArrayInlineExtensionTest origin=IMPLICIT_ARGUMENT
            ARG handler$atomicfu: CALL 'private final fun <get-refArr> (): kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> declared in <root>.AtomicRefArrayInlineExtensionTest' type=kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> origin=null
              ARG <this>: GET_VAR '<this>: <root>.AtomicRefArrayInlineExtensionTest declared in <root>.AtomicRefArrayInlineExtensionTest.test' type=<root>.AtomicRefArrayInlineExtensionTest origin=IMPLICIT_ARGUMENT
            ARG index$atomicfu: CONST Int type=kotlin.Int value=1
            ARG to: CONST String type=kotlin.String value="ccc"
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.String?
          ARG expected: CONST String type=kotlin.String value="CAS_failed"
          ARG actual: CALL 'private final fun extensionLoopExpression$atomicfu$ATOMIC_ARRAY$Any (handler$atomicfu: kotlin.concurrent.AtomicArray<kotlin.Any?>, index$atomicfu: kotlin.Int, to: kotlin.String): kotlin.String? declared in <root>.AtomicRefArrayInlineExtensionTest' type=kotlin.String? origin=null
            ARG <this>: GET_VAR '<this>: <root>.AtomicRefArrayInlineExtensionTest declared in <root>.AtomicRefArrayInlineExtensionTest.test' type=<root>.AtomicRefArrayInlineExtensionTest origin=IMPLICIT_ARGUMENT
            ARG handler$atomicfu: CALL 'private final fun <get-refArr> (): kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> declared in <root>.AtomicRefArrayInlineExtensionTest' type=kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> origin=null
              ARG <this>: GET_VAR '<this>: <root>.AtomicRefArrayInlineExtensionTest declared in <root>.AtomicRefArrayInlineExtensionTest.test' type=<root>.AtomicRefArrayInlineExtensionTest origin=IMPLICIT_ARGUMENT
            ARG index$atomicfu: CONST Int type=kotlin.Int value=1
            ARG to: CONST String type=kotlin.String value="ccc"
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.String?
          ARG expected: CONST String type=kotlin.String value="bbb"
          ARG actual: CALL 'private final fun extensionLoopMixedReceivers$atomicfu$ATOMIC_ARRAY$Any (handler$atomicfu: kotlin.concurrent.AtomicArray<kotlin.Any?>, index$atomicfu: kotlin.Int, first: kotlin.String, second: kotlin.String, index: kotlin.Int): kotlin.String? declared in <root>.AtomicRefArrayInlineExtensionTest' type=kotlin.String? origin=null
            ARG <this>: GET_VAR '<this>: <root>.AtomicRefArrayInlineExtensionTest declared in <root>.AtomicRefArrayInlineExtensionTest.test' type=<root>.AtomicRefArrayInlineExtensionTest origin=IMPLICIT_ARGUMENT
            ARG handler$atomicfu: CALL 'private final fun <get-refArr> (): kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> declared in <root>.AtomicRefArrayInlineExtensionTest' type=kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> origin=null
              ARG <this>: GET_VAR '<this>: <root>.AtomicRefArrayInlineExtensionTest declared in <root>.AtomicRefArrayInlineExtensionTest.test' type=<root>.AtomicRefArrayInlineExtensionTest origin=IMPLICIT_ARGUMENT
            ARG index$atomicfu: CONST Int type=kotlin.Int value=7
            ARG first: CONST String type=kotlin.String value="aaa"
            ARG second: CONST String type=kotlin.String value="bbb"
            ARG index: CONST Int type=kotlin.Int value=7
  FUN name:box visibility:public modality:FINAL returnType:kotlin.String
    BLOCK_BODY
      CALL 'public final fun test (): kotlin.Unit declared in <root>.AtomicIntArrayInlineExtensionTest' type=kotlin.Unit origin=null
        ARG <this>: CONSTRUCTOR_CALL 'public constructor <init> () declared in <root>.AtomicIntArrayInlineExtensionTest' type=<root>.AtomicIntArrayInlineExtensionTest origin=null
      CALL 'public final fun test (): kotlin.Unit declared in <root>.AtomicLongArrayInlineExtensionTest' type=kotlin.Unit origin=null
        ARG <this>: CONSTRUCTOR_CALL 'public constructor <init> () declared in <root>.AtomicLongArrayInlineExtensionTest' type=<root>.AtomicLongArrayInlineExtensionTest origin=null
      CALL 'public final fun test (): kotlin.Unit declared in <root>.AtomicBooleanArrayInlineExtensionTest' type=kotlin.Unit origin=null
        ARG <this>: CONSTRUCTOR_CALL 'public constructor <init> () declared in <root>.AtomicBooleanArrayInlineExtensionTest' type=<root>.AtomicBooleanArrayInlineExtensionTest origin=null
      CALL 'public final fun test (): kotlin.Unit declared in <root>.AtomicRefArrayInlineExtensionTest' type=kotlin.Unit origin=null
        ARG <this>: CONSTRUCTOR_CALL 'public constructor <init> () declared in <root>.AtomicRefArrayInlineExtensionTest' type=<root>.AtomicRefArrayInlineExtensionTest origin=null
      RETURN type=kotlin.Nothing from='public final fun box (): kotlin.String declared in <root>'
        CONST String type=kotlin.String value="OK"
