/*
 * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.gradle.dsl

import groovy.lang.Closure
import org.gradle.api.Action
import org.gradle.api.Task
import org.gradle.api.tasks.Internal

@Deprecated(
    message = "Replaced by KotlinCompilationTask",
    replaceWith = ReplaceWith(
        "KotlinCompilationTask",
        "org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask"
    )
)
@Suppress("DEPRECATION")
interface KotlinCompile<out T : KotlinCommonOptions> : Task {

    @Deprecated(
        message = "Replaced by compilerOptions input",
        replaceWith = ReplaceWith("compilerOptions")
    )
    @get:Internal
    val kotlinOptions: T

    @Deprecated(
        message = "Replaced by compilerOptions { .. }",
        replaceWith = ReplaceWith("compilerOptions(fn)")
    )
    fun kotlinOptions(fn: T.() -> Unit) {
        kotlinOptions.fn()
    }

    @Deprecated(
        message = "Replaced by compilerOptions(Action)",
        replaceWith = ReplaceWith("compilerOptions(fn)")
    )
    fun kotlinOptions(fn: Action<in T>) {
        fn.execute(kotlinOptions)
    }

    @Deprecated("Should be autogenerated by Gradle")
    fun kotlinOptions(fn: Closure<*>) {
        project.configure(kotlinOptions, fn)
    }
}
