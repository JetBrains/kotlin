@R|Anno|(LAZY_EXPRESSION)  kotlin/Int
  context -> FirPropertySymbol /foo
  anchor -> [FirValueParameterSymbol <local>/List from FirPropertySymbol /foo]

@R|Anno|(LAZY_EXPRESSION)  kotlin/Int
  context -> FirValueParameterSymbol <local>/List from FirPropertySymbol /foo
  anchor -> [FirValueParameterSymbol <local>/List from FirPropertySymbol /foo]

@R|Anno|(LAZY_EXPRESSION)  kotlin/Int
  context -> FirPropertyAccessorSymbol special/accessor from FirPropertySymbol /foo
  anchor -> [FirValueParameterSymbol <local>/List from FirPropertySymbol /foo]

@R|Anno|(LAZY_EXPRESSION)  kotlin/Int
  context -> FirBackingFieldSymbol <local>/field from FirPropertySymbol /foo
  anchor -> [FirValueParameterSymbol <local>/List from FirPropertySymbol /foo]

FILE: [ResolvedTo(IMPORTS)] contextReceiverAsImplicitReturnType.kt
    @R|kotlin/annotation/Target|[CompilerRequiredAnnotations](Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.TYPE|) public final? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] annotation class Anno : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/Anno.position] position: String): R|Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val position: String = R|<local>/position|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

    }
    public? final? const [ResolvedTo(RAW_FIR)] val prop: <implicit> = LAZY_EXPRESSION
        public? [ResolvedTo(RAW_FIR)] get(): <implicit>
    context([ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] R|kotlin/collections/List<@R|Anno|(LAZY_EXPRESSION)  kotlin/Int>|)
    public final [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] val foo: R|kotlin/collections/List<@R|Anno|(LAZY_EXPRESSION)  kotlin/Int>|
        public [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] get(): R|kotlin/collections/List<@R|Anno|(LAZY_EXPRESSION)  kotlin/Int>| {
            ^ this@R|context of /foo|
        }
