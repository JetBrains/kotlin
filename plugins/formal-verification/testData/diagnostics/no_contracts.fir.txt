FILE: no_contracts.kt
    public final fun return_unit(): R|kotlin/Unit| {
    }
    public final fun return_int(): R|kotlin/Int| {
        ^return_int Int(0)
    }
    public final fun take_int_return_unit(@R|kotlin/Suppress|(names = vararg(String(UNUSED_PARAMETER))) x: R|kotlin/Int|): R|kotlin/Unit| {
    }
    public final fun take_int_return_int(x: R|kotlin/Int|): R|kotlin/Int| {
        ^take_int_return_int R|<local>/x|
    }
    public final fun take_int_return_int_expr(x: R|kotlin/Int|): R|kotlin/Int| {
        ^take_int_return_int_expr R|<local>/x|
    }
    public final fun with_int_declaration(): R|kotlin/Int| {
        lval x: R|kotlin/Int| = Int(0)
        ^with_int_declaration R|<local>/x|
    }
    public final fun while_loop(b: R|kotlin/Boolean|): R|kotlin/Int| {
        while(R|<local>/b|) {
            lval a: R|kotlin/Int| = Int(1)
            lval c: R|kotlin/Int| = Int(2)
        }

        ^while_loop Int(0)
    }
    public final fun simple_if(): R|kotlin/Int| {
        when () {
            Boolean(true) ->  {
                ^simple_if Int(0)
            }
            else ->  {
                ^simple_if Int(1)
            }
        }

    }
    public final fun if_on_parameter(b: R|kotlin/Boolean|): R|kotlin/Int| {
        when () {
            R|<local>/b| ->  {
                ^if_on_parameter Int(0)
            }
            else ->  {
                ^if_on_parameter Int(1)
            }
        }

    }
    public final fun function_call(): R|kotlin/Unit| {
        R|/return_unit|()
        R|/return_unit|()
    }
    public final fun function_call_nested(): R|kotlin/Unit| {
        R|/take_int_return_unit|(R|/take_int_return_int|(R|/return_int|()))
    }
