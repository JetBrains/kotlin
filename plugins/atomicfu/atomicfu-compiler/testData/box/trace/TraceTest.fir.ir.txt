FILE fqName:<root> fileName:/TraceTest.kt
  CLASS CLASS name:TraceTest modality:FINAL visibility:public superTypes:[kotlin.Any]
    thisReceiver: VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> type:<root>.TraceTest
    PROPERTY ATOMICFU_GENERATED_PROPERTY name:a1$volatile visibility:private modality:FINAL [var]
      FIELD ATOMICFU_GENERATED_FIELD name:a1$volatile type:kotlin.Int visibility:private
        annotations:
          Volatile
        EXPRESSION_BODY
          CONST Int type=kotlin.Int value=5
      FUN ATOMICFU_GENERATED_PROPERTY_ACCESSOR name:<get-a1$volatile> visibility:private modality:FINAL returnType:kotlin.Int
        VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.TraceTest
        correspondingProperty: PROPERTY ATOMICFU_GENERATED_PROPERTY name:a1$volatile visibility:private modality:FINAL [var]
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='private final fun <get-a1$volatile> (): kotlin.Int declared in <root>.TraceTest'
            GET_FIELD 'FIELD ATOMICFU_GENERATED_FIELD name:a1$volatile type:kotlin.Int visibility:private declared in <root>.TraceTest' type=kotlin.Int origin=null
              receiver: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.<get-a1$volatile>' type=<root>.TraceTest origin=null
      FUN ATOMICFU_GENERATED_PROPERTY_ACCESSOR name:<set-a1$volatile> visibility:private modality:FINAL returnType:kotlin.Unit
        VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.TraceTest
        VALUE_PARAMETER kind:Regular name:value index:1 type:kotlin.Int
        correspondingProperty: PROPERTY ATOMICFU_GENERATED_PROPERTY name:a1$volatile visibility:private modality:FINAL [var]
        BLOCK_BODY
          RETURN type=kotlin.Unit from='private final fun <set-a1$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.TraceTest'
            SET_FIELD 'FIELD ATOMICFU_GENERATED_FIELD name:a1$volatile type:kotlin.Int visibility:private declared in <root>.TraceTest' type=kotlin.Unit origin=null
              receiver: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.<set-a1$volatile>' type=<root>.TraceTest origin=null
              value: GET_VAR 'value: kotlin.Int declared in <root>.TraceTest.<set-a1$volatile>' type=kotlin.Int origin=null
    PROPERTY ATOMICFU_GENERATED_PROPERTY name:a2$volatile visibility:private modality:FINAL [var]
      FIELD ATOMICFU_GENERATED_FIELD name:a2$volatile type:kotlin.Int visibility:private
        annotations:
          Volatile
        EXPRESSION_BODY
          CONST Int type=kotlin.Int value=1
      FUN ATOMICFU_GENERATED_PROPERTY_ACCESSOR name:<get-a2$volatile> visibility:private modality:FINAL returnType:kotlin.Int
        VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.TraceTest
        correspondingProperty: PROPERTY ATOMICFU_GENERATED_PROPERTY name:a2$volatile visibility:private modality:FINAL [var]
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='private final fun <get-a2$volatile> (): kotlin.Int declared in <root>.TraceTest'
            GET_FIELD 'FIELD ATOMICFU_GENERATED_FIELD name:a2$volatile type:kotlin.Int visibility:private declared in <root>.TraceTest' type=kotlin.Int origin=null
              receiver: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.<get-a2$volatile>' type=<root>.TraceTest origin=null
      FUN ATOMICFU_GENERATED_PROPERTY_ACCESSOR name:<set-a2$volatile> visibility:private modality:FINAL returnType:kotlin.Unit
        VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.TraceTest
        VALUE_PARAMETER kind:Regular name:value index:1 type:kotlin.Int
        correspondingProperty: PROPERTY ATOMICFU_GENERATED_PROPERTY name:a2$volatile visibility:private modality:FINAL [var]
        BLOCK_BODY
          RETURN type=kotlin.Unit from='private final fun <set-a2$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.TraceTest'
            SET_FIELD 'FIELD ATOMICFU_GENERATED_FIELD name:a2$volatile type:kotlin.Int visibility:private declared in <root>.TraceTest' type=kotlin.Unit origin=null
              receiver: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.<set-a2$volatile>' type=<root>.TraceTest origin=null
              value: GET_VAR 'value: kotlin.Int declared in <root>.TraceTest.<set-a2$volatile>' type=kotlin.Int origin=null
    PROPERTY ATOMICFU_GENERATED_PROPERTY name:a$volatile visibility:private modality:FINAL [var]
      FIELD ATOMICFU_GENERATED_FIELD name:a$volatile type:kotlin.Int visibility:private
        annotations:
          Volatile
        EXPRESSION_BODY
          CONST Int type=kotlin.Int value=0
      FUN ATOMICFU_GENERATED_PROPERTY_ACCESSOR name:<get-a$volatile> visibility:private modality:FINAL returnType:kotlin.Int
        VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.TraceTest
        correspondingProperty: PROPERTY ATOMICFU_GENERATED_PROPERTY name:a$volatile visibility:private modality:FINAL [var]
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='private final fun <get-a$volatile> (): kotlin.Int declared in <root>.TraceTest'
            GET_FIELD 'FIELD ATOMICFU_GENERATED_FIELD name:a$volatile type:kotlin.Int visibility:private declared in <root>.TraceTest' type=kotlin.Int origin=null
              receiver: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.<get-a$volatile>' type=<root>.TraceTest origin=null
      FUN ATOMICFU_GENERATED_PROPERTY_ACCESSOR name:<set-a$volatile> visibility:private modality:FINAL returnType:kotlin.Unit
        VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.TraceTest
        VALUE_PARAMETER kind:Regular name:value index:1 type:kotlin.Int
        correspondingProperty: PROPERTY ATOMICFU_GENERATED_PROPERTY name:a$volatile visibility:private modality:FINAL [var]
        BLOCK_BODY
          RETURN type=kotlin.Unit from='private final fun <set-a$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.TraceTest'
            SET_FIELD 'FIELD ATOMICFU_GENERATED_FIELD name:a$volatile type:kotlin.Int visibility:private declared in <root>.TraceTest' type=kotlin.Unit origin=null
              receiver: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.<set-a$volatile>' type=<root>.TraceTest origin=null
              value: GET_VAR 'value: kotlin.Int declared in <root>.TraceTest.<set-a$volatile>' type=kotlin.Int origin=null
    PROPERTY ATOMICFU_GENERATED_PROPERTY name:a3$volatile visibility:private modality:FINAL [var]
      FIELD ATOMICFU_GENERATED_FIELD name:a3$volatile type:kotlin.Int visibility:private
        annotations:
          Volatile
        EXPRESSION_BODY
          CONST Int type=kotlin.Int value=2
      FUN ATOMICFU_GENERATED_PROPERTY_ACCESSOR name:<get-a3$volatile> visibility:private modality:FINAL returnType:kotlin.Int
        VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.TraceTest
        correspondingProperty: PROPERTY ATOMICFU_GENERATED_PROPERTY name:a3$volatile visibility:private modality:FINAL [var]
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='private final fun <get-a3$volatile> (): kotlin.Int declared in <root>.TraceTest'
            GET_FIELD 'FIELD ATOMICFU_GENERATED_FIELD name:a3$volatile type:kotlin.Int visibility:private declared in <root>.TraceTest' type=kotlin.Int origin=null
              receiver: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.<get-a3$volatile>' type=<root>.TraceTest origin=null
      FUN ATOMICFU_GENERATED_PROPERTY_ACCESSOR name:<set-a3$volatile> visibility:private modality:FINAL returnType:kotlin.Unit
        VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.TraceTest
        VALUE_PARAMETER kind:Regular name:value index:1 type:kotlin.Int
        correspondingProperty: PROPERTY ATOMICFU_GENERATED_PROPERTY name:a3$volatile visibility:private modality:FINAL [var]
        BLOCK_BODY
          RETURN type=kotlin.Unit from='private final fun <set-a3$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.TraceTest'
            SET_FIELD 'FIELD ATOMICFU_GENERATED_FIELD name:a3$volatile type:kotlin.Int visibility:private declared in <root>.TraceTest' type=kotlin.Unit origin=null
              receiver: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.<set-a3$volatile>' type=<root>.TraceTest origin=null
              value: GET_VAR 'value: kotlin.Int declared in <root>.TraceTest.<set-a3$volatile>' type=kotlin.Int origin=null
    PROPERTY ATOMICFU_GENERATED_PROPERTY name:s$volatile visibility:private modality:FINAL [var]
      FIELD ATOMICFU_GENERATED_FIELD name:s$volatile type:kotlin.Int visibility:private
        annotations:
          Volatile
        EXPRESSION_BODY
          CONST Int type=kotlin.Int value=0
      FUN ATOMICFU_GENERATED_PROPERTY_ACCESSOR name:<get-s$volatile> visibility:private modality:FINAL returnType:kotlin.Int
        VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.TraceTest
        correspondingProperty: PROPERTY ATOMICFU_GENERATED_PROPERTY name:s$volatile visibility:private modality:FINAL [var]
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='private final fun <get-s$volatile> (): kotlin.Int declared in <root>.TraceTest'
            GET_FIELD 'FIELD ATOMICFU_GENERATED_FIELD name:s$volatile type:kotlin.Int visibility:private declared in <root>.TraceTest' type=kotlin.Int origin=null
              receiver: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.<get-s$volatile>' type=<root>.TraceTest origin=null
      FUN ATOMICFU_GENERATED_PROPERTY_ACCESSOR name:<set-s$volatile> visibility:private modality:FINAL returnType:kotlin.Unit
        VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.TraceTest
        VALUE_PARAMETER kind:Regular name:value index:1 type:kotlin.Int
        correspondingProperty: PROPERTY ATOMICFU_GENERATED_PROPERTY name:s$volatile visibility:private modality:FINAL [var]
        BLOCK_BODY
          RETURN type=kotlin.Unit from='private final fun <set-s$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.TraceTest'
            SET_FIELD 'FIELD ATOMICFU_GENERATED_FIELD name:s$volatile type:kotlin.Int visibility:private declared in <root>.TraceTest' type=kotlin.Unit origin=null
              receiver: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.<set-s$volatile>' type=<root>.TraceTest origin=null
              value: GET_VAR 'value: kotlin.Int declared in <root>.TraceTest.<set-s$volatile>' type=kotlin.Int origin=null
    CLASS ENUM_CLASS name:Status modality:FINAL visibility:private superTypes:[kotlin.Enum<<root>.TraceTest.Status>]
      thisReceiver: VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> type:<root>.TraceTest.Status
      ENUM_ENTRY name:START
        init: EXPRESSION_BODY
          ENUM_CONSTRUCTOR_CALL 'private constructor <init> () declared in <root>.TraceTest.Status'
      ENUM_ENTRY name:END
        init: EXPRESSION_BODY
          ENUM_CONSTRUCTOR_CALL 'private constructor <init> () declared in <root>.TraceTest.Status'
      CONSTRUCTOR visibility:private returnType:<root>.TraceTest.Status [primary]
        BLOCK_BODY
          ENUM_CONSTRUCTOR_CALL 'public constructor <init> (name: kotlin.String, ordinal: kotlin.Int) declared in kotlin.Enum'
            TYPE_ARG E: <root>.TraceTest.Status
          INSTANCE_INITIALIZER_CALL classDescriptor='CLASS ENUM_CLASS name:Status modality:FINAL visibility:private superTypes:[kotlin.Enum<<root>.TraceTest.Status>]' type=kotlin.Unit
      FUN ENUM_CLASS_SPECIAL_MEMBER name:valueOf visibility:public modality:FINAL returnType:<root>.TraceTest.Status
        VALUE_PARAMETER kind:Regular name:value index:0 type:kotlin.String
        SYNTHETIC_BODY kind=ENUM_VALUEOF
      FUN ENUM_CLASS_SPECIAL_MEMBER name:values visibility:public modality:FINAL returnType:kotlin.Array<<root>.TraceTest.Status>
        SYNTHETIC_BODY kind=ENUM_VALUES
      FUN FAKE_OVERRIDE name:compareTo visibility:public modality:FINAL returnType:kotlin.Int [fake_override,operator]
        VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Enum<<root>.TraceTest.Status>
        VALUE_PARAMETER kind:Regular name:other index:1 type:<root>.TraceTest.Status
        overridden:
          public final fun compareTo (other: E of kotlin.Enum): kotlin.Int declared in kotlin.Enum
      FUN FAKE_OVERRIDE name:equals visibility:public modality:FINAL returnType:kotlin.Boolean [fake_override,operator]
        VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Enum<<root>.TraceTest.Status>
        VALUE_PARAMETER kind:Regular name:other index:1 type:kotlin.Any?
        overridden:
          public final fun equals (other: kotlin.Any?): kotlin.Boolean declared in kotlin.Enum
      FUN FAKE_OVERRIDE name:hashCode visibility:public modality:FINAL returnType:kotlin.Int [fake_override]
        VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Enum<<root>.TraceTest.Status>
        overridden:
          public final fun hashCode (): kotlin.Int declared in kotlin.Enum
      FUN FAKE_OVERRIDE name:toString visibility:public modality:OPEN returnType:kotlin.String [fake_override]
        VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Enum<<root>.TraceTest.Status>
        overridden:
          public open fun toString (): kotlin.String declared in kotlin.Enum
      PROPERTY ENUM_CLASS_SPECIAL_MEMBER name:entries visibility:public modality:FINAL [val]
        FUN ENUM_CLASS_SPECIAL_MEMBER name:<get-entries> visibility:public modality:FINAL returnType:kotlin.enums.EnumEntries<<root>.TraceTest.Status>
          correspondingProperty: PROPERTY ENUM_CLASS_SPECIAL_MEMBER name:entries visibility:public modality:FINAL [val]
          SYNTHETIC_BODY kind=ENUM_ENTRIES
      PROPERTY FAKE_OVERRIDE name:name visibility:public modality:FINAL [fake_override,val]
        annotations:
          IntrinsicConstEvaluation
        overridden:
          public final name: kotlin.String declared in kotlin.Enum
        FUN FAKE_OVERRIDE name:<get-name> visibility:public modality:FINAL returnType:kotlin.String [fake_override]
          VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Enum<<root>.TraceTest.Status>
          correspondingProperty: PROPERTY FAKE_OVERRIDE name:name visibility:public modality:FINAL [fake_override,val]
          overridden:
            public final fun <get-name> (): kotlin.String declared in kotlin.Enum
      PROPERTY FAKE_OVERRIDE name:ordinal visibility:public modality:FINAL [fake_override,val]
        overridden:
          public final ordinal: kotlin.Int declared in kotlin.Enum
        FUN FAKE_OVERRIDE name:<get-ordinal> visibility:public modality:FINAL returnType:kotlin.Int [fake_override]
          VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Enum<<root>.TraceTest.Status>
          correspondingProperty: PROPERTY FAKE_OVERRIDE name:ordinal visibility:public modality:FINAL [fake_override,val]
          overridden:
            public final fun <get-ordinal> (): kotlin.Int declared in kotlin.Enum
    CONSTRUCTOR visibility:public returnType:<root>.TraceTest [primary]
      BLOCK_BODY
        DELEGATING_CONSTRUCTOR_CALL 'public constructor <init> () declared in kotlin.Any'
        INSTANCE_INITIALIZER_CALL classDescriptor='CLASS CLASS name:TraceTest modality:FINAL visibility:public superTypes:[kotlin.Any]' type=kotlin.Unit
    FUN FAKE_OVERRIDE name:equals visibility:public modality:OPEN returnType:kotlin.Boolean [fake_override,operator]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Any
      VALUE_PARAMETER kind:Regular name:other index:1 type:kotlin.Any?
      overridden:
        public open fun equals (other: kotlin.Any?): kotlin.Boolean declared in kotlin.Any
    FUN FAKE_OVERRIDE name:hashCode visibility:public modality:OPEN returnType:kotlin.Int [fake_override]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Any
      overridden:
        public open fun hashCode (): kotlin.Int declared in kotlin.Any
    FUN FAKE_OVERRIDE name:toString visibility:public modality:OPEN returnType:kotlin.String [fake_override]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Any
      overridden:
        public open fun toString (): kotlin.String declared in kotlin.Any
    FUN name:test visibility:public modality:FINAL returnType:kotlin.Unit
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.TraceTest
      BLOCK_BODY
        CALL 'public final fun testDefaultTrace (): kotlin.Unit declared in <root>.TraceTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.test' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
        CALL 'public final fun testTraceWithSize (): kotlin.Unit declared in <root>.TraceTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.test' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
        CALL 'public final fun testTraceWithFormat (): kotlin.Unit declared in <root>.TraceTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.test' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
        CALL 'public final fun testNamedTrace (): kotlin.Unit declared in <root>.TraceTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.test' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
        CALL 'public final fun testMultipleAppend (): kotlin.Unit declared in <root>.TraceTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.test' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
        CALL 'public final fun testTraceInBlock (): kotlin.Unit declared in <root>.TraceTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.test' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
    FUN name:testDefaultTrace visibility:public modality:FINAL returnType:kotlin.Unit
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.TraceTest
      BLOCK_BODY
        VAR name:oldValue type:kotlin.Int [val]
          TYPE_OP type=kotlin.Int origin=CAST typeOperand=kotlin.Int
            CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
              TYPE_ARG T: kotlin.Int
              ARG <this>: PROPERTY_REFERENCE 'private final a1$volatile: kotlin.Int declared in <root>.TraceTest' field='FIELD ATOMICFU_GENERATED_FIELD name:a1$volatile type:kotlin.Int visibility:private declared in <root>.TraceTest' getter='private final fun <get-a1$volatile> (): kotlin.Int declared in <root>.TraceTest' setter='private final fun <set-a1$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.TraceTest' type=kotlin.Int origin=null
                ARG 1: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testDefaultTrace' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
        VAR name:res type:kotlin.Boolean [val]
          CALL 'internal final fun compareAndSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.compareAndSetField>, expectedValue: T of kotlin.concurrent.compareAndSetField, newValue: T of kotlin.concurrent.compareAndSetField): kotlin.Boolean declared in kotlin.concurrent' type=kotlin.Boolean origin=null
            TYPE_ARG T: kotlin.Int
            ARG <this>: PROPERTY_REFERENCE 'private final a1$volatile: kotlin.Int declared in <root>.TraceTest' field='FIELD ATOMICFU_GENERATED_FIELD name:a1$volatile type:kotlin.Int visibility:private declared in <root>.TraceTest' getter='private final fun <get-a1$volatile> (): kotlin.Int declared in <root>.TraceTest' setter='private final fun <set-a1$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.TraceTest' type=kotlin.Int origin=null
              ARG 1: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testDefaultTrace' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
            ARG expectedValue: GET_VAR 'val oldValue: kotlin.Int declared in <root>.TraceTest.testDefaultTrace' type=kotlin.Int origin=null
            ARG newValue: CALL 'public final fun times (other: kotlin.Int): kotlin.Int declared in kotlin.Int' type=kotlin.Int origin=MUL
              ARG <this>: GET_VAR 'val oldValue: kotlin.Int declared in <root>.TraceTest.testDefaultTrace' type=kotlin.Int origin=null
              ARG other: CONST Int type=kotlin.Int value=10
        VAR name:newValue type:kotlin.Int [val]
          TYPE_OP type=kotlin.Int origin=CAST typeOperand=kotlin.Int
            CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
              TYPE_ARG T: kotlin.Int
              ARG <this>: PROPERTY_REFERENCE 'private final a1$volatile: kotlin.Int declared in <root>.TraceTest' field='FIELD ATOMICFU_GENERATED_FIELD name:a1$volatile type:kotlin.Int visibility:private declared in <root>.TraceTest' getter='private final fun <get-a1$volatile> (): kotlin.Int declared in <root>.TraceTest' setter='private final fun <set-a1$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.TraceTest' type=kotlin.Int origin=null
                ARG 1: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testDefaultTrace' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
    FUN name:testMultipleAppend visibility:public modality:FINAL returnType:kotlin.Unit
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.TraceTest
      BLOCK_BODY
        VAR name:i type:kotlin.Int [val]
          CONST Int type=kotlin.Int value=1
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Int
          ARG expected: CONST Int type=kotlin.Int value=0
          ARG actual: TYPE_OP type=kotlin.Int origin=CAST typeOperand=kotlin.Int
            CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
              TYPE_ARG T: kotlin.Int
              ARG <this>: PROPERTY_REFERENCE 'private final a$volatile: kotlin.Int declared in <root>.TraceTest' field='FIELD ATOMICFU_GENERATED_FIELD name:a$volatile type:kotlin.Int visibility:private declared in <root>.TraceTest' getter='private final fun <get-a$volatile> (): kotlin.Int declared in <root>.TraceTest' setter='private final fun <set-a$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.TraceTest' type=kotlin.Int origin=null
                ARG 1: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testMultipleAppend' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
        TYPE_OP type=kotlin.Unit origin=IMPLICIT_COERCION_TO_UNIT typeOperand=kotlin.Unit
          CALL 'public final fun plus (other: kotlin.Int): kotlin.Int declared in kotlin.Int' type=kotlin.Int origin=null
            ARG <this>: CALL 'internal final fun getAndAddField (<this>: kotlin.reflect.KMutableProperty0<kotlin.Int>, delta: kotlin.Int): kotlin.Int declared in kotlin.concurrent' type=kotlin.Int origin=null
              ARG <this>: PROPERTY_REFERENCE 'private final a$volatile: kotlin.Int declared in <root>.TraceTest' field='FIELD ATOMICFU_GENERATED_FIELD name:a$volatile type:kotlin.Int visibility:private declared in <root>.TraceTest' getter='private final fun <get-a$volatile> (): kotlin.Int declared in <root>.TraceTest' setter='private final fun <set-a$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.TraceTest' type=kotlin.Int origin=null
                ARG 1: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testMultipleAppend' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
              ARG delta: CONST Int type=kotlin.Int value=1
            ARG other: CONST Int type=kotlin.Int value=1
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Int
          ARG expected: CONST Int type=kotlin.Int value=1
          ARG actual: TYPE_OP type=kotlin.Int origin=CAST typeOperand=kotlin.Int
            CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
              TYPE_ARG T: kotlin.Int
              ARG <this>: PROPERTY_REFERENCE 'private final a$volatile: kotlin.Int declared in <root>.TraceTest' field='FIELD ATOMICFU_GENERATED_FIELD name:a$volatile type:kotlin.Int visibility:private declared in <root>.TraceTest' getter='private final fun <get-a$volatile> (): kotlin.Int declared in <root>.TraceTest' setter='private final fun <set-a$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.TraceTest' type=kotlin.Int origin=null
                ARG 1: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testMultipleAppend' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
        CALL 'internal final fun atomicSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicSetField>, newValue: T of kotlin.concurrent.atomicSetField): kotlin.Unit declared in kotlin.concurrent' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Int
          ARG <this>: PROPERTY_REFERENCE 'private final a$volatile: kotlin.Int declared in <root>.TraceTest' field='FIELD ATOMICFU_GENERATED_FIELD name:a$volatile type:kotlin.Int visibility:private declared in <root>.TraceTest' getter='private final fun <get-a$volatile> (): kotlin.Int declared in <root>.TraceTest' setter='private final fun <set-a$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.TraceTest' type=kotlin.Int origin=null
            ARG 1: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testMultipleAppend' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
          ARG newValue: CONST Int type=kotlin.Int value=10
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Int
          ARG expected: CONST Int type=kotlin.Int value=10
          ARG actual: TYPE_OP type=kotlin.Int origin=CAST typeOperand=kotlin.Int
            CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
              TYPE_ARG T: kotlin.Int
              ARG <this>: PROPERTY_REFERENCE 'private final a$volatile: kotlin.Int declared in <root>.TraceTest' field='FIELD ATOMICFU_GENERATED_FIELD name:a$volatile type:kotlin.Int visibility:private declared in <root>.TraceTest' getter='private final fun <get-a$volatile> (): kotlin.Int declared in <root>.TraceTest' setter='private final fun <set-a$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.TraceTest' type=kotlin.Int origin=null
                ARG 1: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testMultipleAppend' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
    FUN name:testNamedTrace visibility:public modality:FINAL returnType:kotlin.Unit
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.TraceTest
      BLOCK_BODY
        CALL 'internal final fun atomicSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicSetField>, newValue: T of kotlin.concurrent.atomicSetField): kotlin.Unit declared in kotlin.concurrent' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Int
          ARG <this>: PROPERTY_REFERENCE 'private final s$volatile: kotlin.Int declared in <root>.TraceTest' field='FIELD ATOMICFU_GENERATED_FIELD name:s$volatile type:kotlin.Int visibility:private declared in <root>.TraceTest' getter='private final fun <get-s$volatile> (): kotlin.Int declared in <root>.TraceTest' setter='private final fun <set-s$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.TraceTest' type=kotlin.Int origin=null
            ARG 1: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testNamedTrace' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
          ARG newValue: CONST Int type=kotlin.Int value=5
        TYPE_OP type=kotlin.Unit origin=IMPLICIT_COERCION_TO_UNIT typeOperand=kotlin.Unit
          CALL 'internal final fun compareAndSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.compareAndSetField>, expectedValue: T of kotlin.concurrent.compareAndSetField, newValue: T of kotlin.concurrent.compareAndSetField): kotlin.Boolean declared in kotlin.concurrent' type=kotlin.Boolean origin=null
            TYPE_ARG T: kotlin.Int
            ARG <this>: PROPERTY_REFERENCE 'private final s$volatile: kotlin.Int declared in <root>.TraceTest' field='FIELD ATOMICFU_GENERATED_FIELD name:s$volatile type:kotlin.Int visibility:private declared in <root>.TraceTest' getter='private final fun <get-s$volatile> (): kotlin.Int declared in <root>.TraceTest' setter='private final fun <set-s$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.TraceTest' type=kotlin.Int origin=null
              ARG 1: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testNamedTrace' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
            ARG expectedValue: CONST Int type=kotlin.Int value=5
            ARG newValue: CONST Int type=kotlin.Int value=-2
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Int
          ARG expected: CONST Int type=kotlin.Int value=-2
          ARG actual: TYPE_OP type=kotlin.Int origin=CAST typeOperand=kotlin.Int
            CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
              TYPE_ARG T: kotlin.Int
              ARG <this>: PROPERTY_REFERENCE 'private final s$volatile: kotlin.Int declared in <root>.TraceTest' field='FIELD ATOMICFU_GENERATED_FIELD name:s$volatile type:kotlin.Int visibility:private declared in <root>.TraceTest' getter='private final fun <get-s$volatile> (): kotlin.Int declared in <root>.TraceTest' setter='private final fun <set-s$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.TraceTest' type=kotlin.Int origin=null
                ARG 1: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testNamedTrace' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
    FUN name:testTraceInBlock visibility:public modality:FINAL returnType:kotlin.Unit
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.TraceTest
      BLOCK_BODY
        CALL 'internal final fun atomicSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicSetField>, newValue: T of kotlin.concurrent.atomicSetField): kotlin.Unit declared in kotlin.concurrent' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Int
          ARG <this>: PROPERTY_REFERENCE 'private final a1$volatile: kotlin.Int declared in <root>.TraceTest' field='FIELD ATOMICFU_GENERATED_FIELD name:a1$volatile type:kotlin.Int visibility:private declared in <root>.TraceTest' getter='private final fun <get-a1$volatile> (): kotlin.Int declared in <root>.TraceTest' setter='private final fun <set-a1$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.TraceTest' type=kotlin.Int origin=null
            ARG 1: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testTraceInBlock' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
          ARG newValue: CONST Int type=kotlin.Int value=5
        WHEN type=kotlin.Unit origin=IF
          BRANCH
            if: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
              ARG arg0: TYPE_OP type=kotlin.Int origin=CAST typeOperand=kotlin.Int
                CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                  TYPE_ARG T: kotlin.Int
                  ARG <this>: PROPERTY_REFERENCE 'private final a1$volatile: kotlin.Int declared in <root>.TraceTest' field='FIELD ATOMICFU_GENERATED_FIELD name:a1$volatile type:kotlin.Int visibility:private declared in <root>.TraceTest' getter='private final fun <get-a1$volatile> (): kotlin.Int declared in <root>.TraceTest' setter='private final fun <set-a1$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.TraceTest' type=kotlin.Int origin=null
                    ARG 1: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testTraceInBlock' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
              ARG arg1: CONST Int type=kotlin.Int value=5
            then: BLOCK type=kotlin.Unit origin=null
              WHEN type=kotlin.Unit origin=IF
                BRANCH
                  if: CALL 'internal final fun compareAndSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.compareAndSetField>, expectedValue: T of kotlin.concurrent.compareAndSetField, newValue: T of kotlin.concurrent.compareAndSetField): kotlin.Boolean declared in kotlin.concurrent' type=kotlin.Boolean origin=null
                    TYPE_ARG T: kotlin.Int
                    ARG <this>: PROPERTY_REFERENCE 'private final a1$volatile: kotlin.Int declared in <root>.TraceTest' field='FIELD ATOMICFU_GENERATED_FIELD name:a1$volatile type:kotlin.Int visibility:private declared in <root>.TraceTest' getter='private final fun <get-a1$volatile> (): kotlin.Int declared in <root>.TraceTest' setter='private final fun <set-a1$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.TraceTest' type=kotlin.Int origin=null
                      ARG 1: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testTraceInBlock' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
                    ARG expectedValue: CONST Int type=kotlin.Int value=5
                    ARG newValue: CONST Int type=kotlin.Int value=10
                  then: BLOCK type=kotlin.Unit origin=null
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Int
          ARG expected: CONST Int type=kotlin.Int value=10
          ARG actual: TYPE_OP type=kotlin.Int origin=CAST typeOperand=kotlin.Int
            CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
              TYPE_ARG T: kotlin.Int
              ARG <this>: PROPERTY_REFERENCE 'private final a1$volatile: kotlin.Int declared in <root>.TraceTest' field='FIELD ATOMICFU_GENERATED_FIELD name:a1$volatile type:kotlin.Int visibility:private declared in <root>.TraceTest' getter='private final fun <get-a1$volatile> (): kotlin.Int declared in <root>.TraceTest' setter='private final fun <set-a1$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.TraceTest' type=kotlin.Int origin=null
                ARG 1: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testTraceInBlock' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
        WHILE label=null origin=WHILE_LOOP
          condition: CONST Boolean type=kotlin.Boolean value=true
          body: BLOCK type=kotlin.Unit origin=null
            WHEN type=kotlin.Unit origin=IF
              BRANCH
                if: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                  ARG arg0: TYPE_OP type=kotlin.Int origin=CAST typeOperand=kotlin.Int
                    CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                      TYPE_ARG T: kotlin.Int
                      ARG <this>: PROPERTY_REFERENCE 'private final a1$volatile: kotlin.Int declared in <root>.TraceTest' field='FIELD ATOMICFU_GENERATED_FIELD name:a1$volatile type:kotlin.Int visibility:private declared in <root>.TraceTest' getter='private final fun <get-a1$volatile> (): kotlin.Int declared in <root>.TraceTest' setter='private final fun <set-a1$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.TraceTest' type=kotlin.Int origin=null
                        ARG 1: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testTraceInBlock' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
                  ARG arg1: CONST Int type=kotlin.Int value=10
                then: BLOCK type=kotlin.Unit origin=null
                  CALL 'internal final fun atomicSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicSetField>, newValue: T of kotlin.concurrent.atomicSetField): kotlin.Unit declared in kotlin.concurrent' type=kotlin.Unit origin=null
                    TYPE_ARG T: kotlin.Int
                    ARG <this>: PROPERTY_REFERENCE 'private final a1$volatile: kotlin.Int declared in <root>.TraceTest' field='FIELD ATOMICFU_GENERATED_FIELD name:a1$volatile type:kotlin.Int visibility:private declared in <root>.TraceTest' getter='private final fun <get-a1$volatile> (): kotlin.Int declared in <root>.TraceTest' setter='private final fun <set-a1$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.TraceTest' type=kotlin.Int origin=null
                      ARG 1: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testTraceInBlock' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
                    ARG newValue: CONST Int type=kotlin.Int value=15
                  BREAK label=null loop.label=null
              BRANCH
                if: CONST Boolean type=kotlin.Boolean value=true
                then: BLOCK type=kotlin.Unit origin=null
    FUN name:testTraceWithFormat visibility:public modality:FINAL returnType:kotlin.Unit
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.TraceTest
      BLOCK_BODY
        VAR name:oldValue type:kotlin.Int [val]
          TYPE_OP type=kotlin.Int origin=CAST typeOperand=kotlin.Int
            CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
              TYPE_ARG T: kotlin.Int
              ARG <this>: PROPERTY_REFERENCE 'private final a3$volatile: kotlin.Int declared in <root>.TraceTest' field='FIELD ATOMICFU_GENERATED_FIELD name:a3$volatile type:kotlin.Int visibility:private declared in <root>.TraceTest' getter='private final fun <get-a3$volatile> (): kotlin.Int declared in <root>.TraceTest' setter='private final fun <set-a3$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.TraceTest' type=kotlin.Int origin=null
                ARG 1: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testTraceWithFormat' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
        CALL 'public final fun assertTrue (actual: kotlin.Boolean, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          ARG actual: CALL 'internal final fun compareAndSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.compareAndSetField>, expectedValue: T of kotlin.concurrent.compareAndSetField, newValue: T of kotlin.concurrent.compareAndSetField): kotlin.Boolean declared in kotlin.concurrent' type=kotlin.Boolean origin=null
            TYPE_ARG T: kotlin.Int
            ARG <this>: PROPERTY_REFERENCE 'private final a3$volatile: kotlin.Int declared in <root>.TraceTest' field='FIELD ATOMICFU_GENERATED_FIELD name:a3$volatile type:kotlin.Int visibility:private declared in <root>.TraceTest' getter='private final fun <get-a3$volatile> (): kotlin.Int declared in <root>.TraceTest' setter='private final fun <set-a3$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.TraceTest' type=kotlin.Int origin=null
              ARG 1: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testTraceWithFormat' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
            ARG expectedValue: GET_VAR 'val oldValue: kotlin.Int declared in <root>.TraceTest.testTraceWithFormat' type=kotlin.Int origin=null
            ARG newValue: CALL 'public final fun times (other: kotlin.Int): kotlin.Int declared in kotlin.Int' type=kotlin.Int origin=MUL
              ARG <this>: GET_VAR 'val oldValue: kotlin.Int declared in <root>.TraceTest.testTraceWithFormat' type=kotlin.Int origin=null
              ARG other: CONST Int type=kotlin.Int value=10
        TYPE_OP type=kotlin.Unit origin=IMPLICIT_COERCION_TO_UNIT typeOperand=kotlin.Unit
          CALL 'internal final fun getAndAddField (<this>: kotlin.reflect.KMutableProperty0<kotlin.Int>, delta: kotlin.Int): kotlin.Int declared in kotlin.concurrent' type=kotlin.Int origin=null
            ARG <this>: PROPERTY_REFERENCE 'private final a3$volatile: kotlin.Int declared in <root>.TraceTest' field='FIELD ATOMICFU_GENERATED_FIELD name:a3$volatile type:kotlin.Int visibility:private declared in <root>.TraceTest' getter='private final fun <get-a3$volatile> (): kotlin.Int declared in <root>.TraceTest' setter='private final fun <set-a3$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.TraceTest' type=kotlin.Int origin=null
              ARG 1: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testTraceWithFormat' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
            ARG delta: CONST Int type=kotlin.Int value=-1
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Int
          ARG expected: CONST Int type=kotlin.Int value=19
          ARG actual: TYPE_OP type=kotlin.Int origin=CAST typeOperand=kotlin.Int
            CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
              TYPE_ARG T: kotlin.Int
              ARG <this>: PROPERTY_REFERENCE 'private final a3$volatile: kotlin.Int declared in <root>.TraceTest' field='FIELD ATOMICFU_GENERATED_FIELD name:a3$volatile type:kotlin.Int visibility:private declared in <root>.TraceTest' getter='private final fun <get-a3$volatile> (): kotlin.Int declared in <root>.TraceTest' setter='private final fun <set-a3$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.TraceTest' type=kotlin.Int origin=null
                ARG 1: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testTraceWithFormat' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
    FUN name:testTraceWithSize visibility:public modality:FINAL returnType:kotlin.Unit
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.TraceTest
      BLOCK_BODY
        VAR name:oldValue type:kotlin.Int [val]
          TYPE_OP type=kotlin.Int origin=CAST typeOperand=kotlin.Int
            CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
              TYPE_ARG T: kotlin.Int
              ARG <this>: PROPERTY_REFERENCE 'private final a2$volatile: kotlin.Int declared in <root>.TraceTest' field='FIELD ATOMICFU_GENERATED_FIELD name:a2$volatile type:kotlin.Int visibility:private declared in <root>.TraceTest' getter='private final fun <get-a2$volatile> (): kotlin.Int declared in <root>.TraceTest' setter='private final fun <set-a2$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.TraceTest' type=kotlin.Int origin=null
                ARG 1: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testTraceWithSize' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
        CALL 'public final fun assertTrue (actual: kotlin.Boolean, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          ARG actual: CALL 'internal final fun compareAndSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.compareAndSetField>, expectedValue: T of kotlin.concurrent.compareAndSetField, newValue: T of kotlin.concurrent.compareAndSetField): kotlin.Boolean declared in kotlin.concurrent' type=kotlin.Boolean origin=null
            TYPE_ARG T: kotlin.Int
            ARG <this>: PROPERTY_REFERENCE 'private final a2$volatile: kotlin.Int declared in <root>.TraceTest' field='FIELD ATOMICFU_GENERATED_FIELD name:a2$volatile type:kotlin.Int visibility:private declared in <root>.TraceTest' getter='private final fun <get-a2$volatile> (): kotlin.Int declared in <root>.TraceTest' setter='private final fun <set-a2$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.TraceTest' type=kotlin.Int origin=null
              ARG 1: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testTraceWithSize' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
            ARG expectedValue: GET_VAR 'val oldValue: kotlin.Int declared in <root>.TraceTest.testTraceWithSize' type=kotlin.Int origin=null
            ARG newValue: CALL 'public final fun times (other: kotlin.Int): kotlin.Int declared in kotlin.Int' type=kotlin.Int origin=MUL
              ARG <this>: GET_VAR 'val oldValue: kotlin.Int declared in <root>.TraceTest.testTraceWithSize' type=kotlin.Int origin=null
              ARG other: CONST Int type=kotlin.Int value=10
        TYPE_OP type=kotlin.Unit origin=IMPLICIT_COERCION_TO_UNIT typeOperand=kotlin.Unit
          CALL 'internal final fun getAndAddField (<this>: kotlin.reflect.KMutableProperty0<kotlin.Int>, delta: kotlin.Int): kotlin.Int declared in kotlin.concurrent' type=kotlin.Int origin=null
            ARG <this>: PROPERTY_REFERENCE 'private final a2$volatile: kotlin.Int declared in <root>.TraceTest' field='FIELD ATOMICFU_GENERATED_FIELD name:a2$volatile type:kotlin.Int visibility:private declared in <root>.TraceTest' getter='private final fun <get-a2$volatile> (): kotlin.Int declared in <root>.TraceTest' setter='private final fun <set-a2$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.TraceTest' type=kotlin.Int origin=null
              ARG 1: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testTraceWithSize' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
            ARG delta: CONST Int type=kotlin.Int value=-1
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Int
          ARG expected: CONST Int type=kotlin.Int value=9
          ARG actual: TYPE_OP type=kotlin.Int origin=CAST typeOperand=kotlin.Int
            CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
              TYPE_ARG T: kotlin.Int
              ARG <this>: PROPERTY_REFERENCE 'private final a2$volatile: kotlin.Int declared in <root>.TraceTest' field='FIELD ATOMICFU_GENERATED_FIELD name:a2$volatile type:kotlin.Int visibility:private declared in <root>.TraceTest' getter='private final fun <get-a2$volatile> (): kotlin.Int declared in <root>.TraceTest' setter='private final fun <set-a2$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.TraceTest' type=kotlin.Int origin=null
                ARG 1: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testTraceWithSize' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
  FUN name:box visibility:public modality:FINAL returnType:kotlin.String
    BLOCK_BODY
      CALL 'public final fun test (): kotlin.Unit declared in <root>.TraceTest' type=kotlin.Unit origin=null
        ARG <this>: CONSTRUCTOR_CALL 'public constructor <init> () declared in <root>.TraceTest' type=<root>.TraceTest origin=null
      RETURN type=kotlin.Nothing from='public final fun box (): kotlin.String declared in <root>'
        CONST String type=kotlin.String value="OK"
