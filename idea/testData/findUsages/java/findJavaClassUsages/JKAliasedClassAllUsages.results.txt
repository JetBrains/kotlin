Class/object property type 3 var next: A? = A()
Function return types 16 fun getNext(): A? {
Function return types 37 fun Any.toA(): A? {
Nested class/object 2 public class X(bar: String? = A.BAR): A() {
Nested class/object 4 val myBar: String? = A.BAR
Nested class/object 7 A.BAR = ""
Nested class/object 8 AAA.foos()
New instance creation 3 var next: A? = A()
New instance creation 33 fun X.bar(a: A = A()) {
Parameter type 11 fun foo(a: A) {
Parameter type 33 fun X.bar(a: A = A()) {
Super type qualifier 21 super<A>.foo()
Supertype 2 public class X(bar: String? = A.BAR): A() {
Supertype 29 object O: A() {
Target type of 'is' operation 38 return if (this is A) this as A else null
Usage in cast target type 38 return if (this is A) this as A else null
Usage in import 1 import AAA as A