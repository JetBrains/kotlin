/*
 * Copyright 2010-2017 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.kotlin.jvm.compiler;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@RunWith(JUnit3RunnerWithInners.class)
public class CompileJavaAgainstKotlinTestGenerated extends AbstractCompileJavaAgainstKotlinTest {
    @TestMetadata("compiler/testData/compileJavaAgainstKotlin")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class WithoutJavac extends AbstractCompileJavaAgainstKotlinTest {
        public void testAllFilesPresentInWithoutJavac() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/compileJavaAgainstKotlin"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("compiler/testData/compileJavaAgainstKotlin/callableReference")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class CallableReference extends AbstractCompileJavaAgainstKotlinTest {
            public void testAllFilesPresentInCallableReference() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/compileJavaAgainstKotlin/callableReference"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("GenericSignature.kt")
            public void testGenericSignature() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/callableReference/GenericSignature.kt");
                doTestWithoutJavac(fileName);
            }
        }

        @TestMetadata("compiler/testData/compileJavaAgainstKotlin/class")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Class extends AbstractCompileJavaAgainstKotlinTest {
            public void testAllFilesPresentInClass() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/compileJavaAgainstKotlin/class"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("ClassObject.kt")
            public void testClassObject() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/class/ClassObject.kt");
                doTestWithoutJavac(fileName);
            }

            @TestMetadata("DefaultConstructor.kt")
            public void testDefaultConstructor() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/class/DefaultConstructor.kt");
                doTestWithoutJavac(fileName);
            }

            @TestMetadata("DefaultConstructorWithTwoArgs.kt")
            public void testDefaultConstructorWithTwoArgs() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/class/DefaultConstructorWithTwoArgs.kt");
                doTestWithoutJavac(fileName);
            }

            @TestMetadata("ExtendsAbstractListT.kt")
            public void testExtendsAbstractListT() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/class/ExtendsAbstractListT.kt");
                doTestWithoutJavac(fileName);
            }

            @TestMetadata("ImplementsListString.kt")
            public void testImplementsListString() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/class/ImplementsListString.kt");
                doTestWithoutJavac(fileName);
            }

            @TestMetadata("ImplementsMapPP.kt")
            public void testImplementsMapPP() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/class/ImplementsMapPP.kt");
                doTestWithoutJavac(fileName);
            }

            @TestMetadata("InnerClass.kt")
            public void testInnerClass() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/class/InnerClass.kt");
                doTestWithoutJavac(fileName);
            }

            @TestMetadata("InnerClassConstructors.kt")
            public void testInnerClassConstructors() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/class/InnerClassConstructors.kt");
                doTestWithoutJavac(fileName);
            }

            @TestMetadata("InnerClassOfGeneric.kt")
            public void testInnerClassOfGeneric() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/class/InnerClassOfGeneric.kt");
                doTestWithoutJavac(fileName);
            }

            @TestMetadata("kt3561.kt")
            public void testKt3561() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/class/kt3561.kt");
                doTestWithoutJavac(fileName);
            }

            @TestMetadata("kt4050.kt")
            public void testKt4050() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/class/kt4050.kt");
                doTestWithoutJavac(fileName);
            }

            @TestMetadata("Simple.kt")
            public void testSimple() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/class/Simple.kt");
                doTestWithoutJavac(fileName);
            }

            @TestMetadata("StarProjection.kt")
            public void testStarProjection() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/class/StarProjection.kt");
                doTestWithoutJavac(fileName);
            }
        }

        @TestMetadata("compiler/testData/compileJavaAgainstKotlin/enum")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Enum extends AbstractCompileJavaAgainstKotlinTest {
            public void testAllFilesPresentInEnum() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/compileJavaAgainstKotlin/enum"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("DefaultArgumentInEnumConstructor.kt")
            public void testDefaultArgumentInEnumConstructor() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/enum/DefaultArgumentInEnumConstructor.kt");
                doTestWithoutJavac(fileName);
            }
        }

        @TestMetadata("compiler/testData/compileJavaAgainstKotlin/jvmStatic")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class JvmStatic extends AbstractCompileJavaAgainstKotlinTest {
            public void testAllFilesPresentInJvmStatic() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/compileJavaAgainstKotlin/jvmStatic"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("simpleCompanionObject.kt")
            public void testSimpleCompanionObject() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/jvmStatic/simpleCompanionObject.kt");
                doTestWithoutJavac(fileName);
            }

            @TestMetadata("simpleCompanionObjectProperty.kt")
            public void testSimpleCompanionObjectProperty() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/jvmStatic/simpleCompanionObjectProperty.kt");
                doTestWithoutJavac(fileName);
            }

            @TestMetadata("simpleObject.kt")
            public void testSimpleObject() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/jvmStatic/simpleObject.kt");
                doTestWithoutJavac(fileName);
            }

            @TestMetadata("simpleObjectProperty.kt")
            public void testSimpleObjectProperty() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/jvmStatic/simpleObjectProperty.kt");
                doTestWithoutJavac(fileName);
            }
        }

        @TestMetadata("compiler/testData/compileJavaAgainstKotlin/method")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Method extends AbstractCompileJavaAgainstKotlinTest {
            @TestMetadata("AccessorGenericSignature.kt")
            public void testAccessorGenericSignature() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/AccessorGenericSignature.kt");
                doTestWithoutJavac(fileName);
            }

            public void testAllFilesPresentInMethod() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/compileJavaAgainstKotlin/method"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("Any.kt")
            public void testAny() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/Any.kt");
                doTestWithoutJavac(fileName);
            }

            @TestMetadata("ArrayOfIntArray.kt")
            public void testArrayOfIntArray() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/ArrayOfIntArray.kt");
                doTestWithoutJavac(fileName);
            }

            @TestMetadata("ArrayOfIntegerArray.kt")
            public void testArrayOfIntegerArray() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/ArrayOfIntegerArray.kt");
                doTestWithoutJavac(fileName);
            }

            @TestMetadata("ClashingSignaturesWithoutReturnType.kt")
            public void testClashingSignaturesWithoutReturnType() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/ClashingSignaturesWithoutReturnType.kt");
                doTestWithoutJavac(fileName);
            }

            @TestMetadata("Delegation.kt")
            public void testDelegation() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/Delegation.kt");
                doTestWithoutJavac(fileName);
            }

            @TestMetadata("Extensions.kt")
            public void testExtensions() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/Extensions.kt");
                doTestWithoutJavac(fileName);
            }

            @TestMetadata("GenericArray.kt")
            public void testGenericArray() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/GenericArray.kt");
                doTestWithoutJavac(fileName);
            }

            @TestMetadata("Hello.kt")
            public void testHello() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/Hello.kt");
                doTestWithoutJavac(fileName);
            }

            @TestMetadata("Int.kt")
            public void testInt() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/Int.kt");
                doTestWithoutJavac(fileName);
            }

            @TestMetadata("IntArray.kt")
            public void testIntArray() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/IntArray.kt");
                doTestWithoutJavac(fileName);
            }

            @TestMetadata("IntWithDefault.kt")
            public void testIntWithDefault() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/IntWithDefault.kt");
                doTestWithoutJavac(fileName);
            }

            @TestMetadata("IntegerArray.kt")
            public void testIntegerArray() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/IntegerArray.kt");
                doTestWithoutJavac(fileName);
            }

            @TestMetadata("ListOfInt.kt")
            public void testListOfInt() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/ListOfInt.kt");
                doTestWithoutJavac(fileName);
            }

            @TestMetadata("ListOfString.kt")
            public void testListOfString() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/ListOfString.kt");
                doTestWithoutJavac(fileName);
            }

            @TestMetadata("ListOfT.kt")
            public void testListOfT() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/ListOfT.kt");
                doTestWithoutJavac(fileName);
            }

            @TestMetadata("MapOfKString.kt")
            public void testMapOfKString() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/MapOfKString.kt");
                doTestWithoutJavac(fileName);
            }

            @TestMetadata("MapOfStringIntQ.kt")
            public void testMapOfStringIntQ() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/MapOfStringIntQ.kt");
                doTestWithoutJavac(fileName);
            }

            @TestMetadata("QExtendsListString.kt")
            public void testQExtendsListString() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/QExtendsListString.kt");
                doTestWithoutJavac(fileName);
            }

            @TestMetadata("QExtendsString.kt")
            public void testQExtendsString() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/QExtendsString.kt");
                doTestWithoutJavac(fileName);
            }

            @TestMetadata("TraitImpl.kt")
            public void testTraitImpl() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/TraitImpl.kt");
                doTestWithoutJavac(fileName);
            }

            @TestMetadata("Vararg.kt")
            public void testVararg() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/Vararg.kt");
                doTestWithoutJavac(fileName);
            }

            @TestMetadata("Void.kt")
            public void testVoid() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/Void.kt");
                doTestWithoutJavac(fileName);
            }

            @TestMetadata("compiler/testData/compileJavaAgainstKotlin/method/platformName")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class PlatformName extends AbstractCompileJavaAgainstKotlinTest {
                public void testAllFilesPresentInPlatformName() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/compileJavaAgainstKotlin/method/platformName"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("PlatformName.kt")
                public void testPlatformName() throws Exception {
                    String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/platformName/PlatformName.kt");
                    doTestWithoutJavac(fileName);
                }
            }

            @TestMetadata("compiler/testData/compileJavaAgainstKotlin/method/primitiveOverride")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class PrimitiveOverride extends AbstractCompileJavaAgainstKotlinTest {
                public void testAllFilesPresentInPrimitiveOverride() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/compileJavaAgainstKotlin/method/primitiveOverride"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("ByteOverridesObject.kt")
                public void testByteOverridesObject() throws Exception {
                    String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/primitiveOverride/ByteOverridesObject.kt");
                    doTestWithoutJavac(fileName);
                }

                @TestMetadata("CallFinalNotInSubclass.kt")
                public void testCallFinalNotInSubclass() throws Exception {
                    String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/primitiveOverride/CallFinalNotInSubclass.kt");
                    doTestWithoutJavac(fileName);
                }

                @TestMetadata("CallNotInSubclass.kt")
                public void testCallNotInSubclass() throws Exception {
                    String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/primitiveOverride/CallNotInSubclass.kt");
                    doTestWithoutJavac(fileName);
                }

                @TestMetadata("CovariantReturnTypeOverride.kt")
                public void testCovariantReturnTypeOverride() throws Exception {
                    String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/primitiveOverride/CovariantReturnTypeOverride.kt");
                    doTestWithoutJavac(fileName);
                }

                @TestMetadata("FinalOverride.kt")
                public void testFinalOverride() throws Exception {
                    String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/primitiveOverride/FinalOverride.kt");
                    doTestWithoutJavac(fileName);
                }

                @TestMetadata("IntOverridesComparable.kt")
                public void testIntOverridesComparable() throws Exception {
                    String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/primitiveOverride/IntOverridesComparable.kt");
                    doTestWithoutJavac(fileName);
                }

                @TestMetadata("IntOverridesNumber.kt")
                public void testIntOverridesNumber() throws Exception {
                    String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/primitiveOverride/IntOverridesNumber.kt");
                    doTestWithoutJavac(fileName);
                }

                @TestMetadata("IntOverridesObject.kt")
                public void testIntOverridesObject() throws Exception {
                    String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/primitiveOverride/IntOverridesObject.kt");
                    doTestWithoutJavac(fileName);
                }

                @TestMetadata("ManyClassesHierarchy.kt")
                public void testManyClassesHierarchy() throws Exception {
                    String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/primitiveOverride/ManyClassesHierarchy.kt");
                    doTestWithoutJavac(fileName);
                }

                @TestMetadata("NullableIntOverridesObject.kt")
                public void testNullableIntOverridesObject() throws Exception {
                    String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/primitiveOverride/NullableIntOverridesObject.kt");
                    doTestWithoutJavac(fileName);
                }

                @TestMetadata("OverrideInJava.kt")
                public void testOverrideInJava() throws Exception {
                    String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/primitiveOverride/OverrideInJava.kt");
                    doTestWithoutJavac(fileName);
                }
            }

            @TestMetadata("compiler/testData/compileJavaAgainstKotlin/method/throws")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Throws extends AbstractCompileJavaAgainstKotlinTest {
                public void testAllFilesPresentInThrows() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/compileJavaAgainstKotlin/method/throws"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("ClassMembers.kt")
                public void testClassMembers() throws Exception {
                    String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/throws/ClassMembers.kt");
                    doTestWithoutJavac(fileName);
                }

                @TestMetadata("Constructor.kt")
                public void testConstructor() throws Exception {
                    String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/throws/Constructor.kt");
                    doTestWithoutJavac(fileName);
                }

                @TestMetadata("DefaultArgs.kt")
                public void testDefaultArgs() throws Exception {
                    String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/throws/DefaultArgs.kt");
                    doTestWithoutJavac(fileName);
                }

                @TestMetadata("Delegation.kt")
                public void testDelegation() throws Exception {
                    String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/throws/Delegation.kt");
                    doTestWithoutJavac(fileName);
                }

                @TestMetadata("GenericSubstitution.kt")
                public void testGenericSubstitution() throws Exception {
                    String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/throws/GenericSubstitution.kt");
                    doTestWithoutJavac(fileName);
                }

                @TestMetadata("TopLevel.kt")
                public void testTopLevel() throws Exception {
                    String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/throws/TopLevel.kt");
                    doTestWithoutJavac(fileName);
                }

                @TestMetadata("TraitMembers.kt")
                public void testTraitMembers() throws Exception {
                    String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/throws/TraitMembers.kt");
                    doTestWithoutJavac(fileName);
                }
            }
        }

        @TestMetadata("compiler/testData/compileJavaAgainstKotlin/property")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Property extends AbstractCompileJavaAgainstKotlinTest {
            public void testAllFilesPresentInProperty() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/compileJavaAgainstKotlin/property"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("ConstVal.kt")
            public void testConstVal() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/property/ConstVal.kt");
                doTestWithoutJavac(fileName);
            }

            @TestMetadata("Extensions.kt")
            public void testExtensions() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/property/Extensions.kt");
                doTestWithoutJavac(fileName);
            }

            @TestMetadata("GenericProperty.kt")
            public void testGenericProperty() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/property/GenericProperty.kt");
                doTestWithoutJavac(fileName);
            }

            @TestMetadata("compiler/testData/compileJavaAgainstKotlin/property/platformName")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class PlatformName extends AbstractCompileJavaAgainstKotlinTest {
                public void testAllFilesPresentInPlatformName() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/compileJavaAgainstKotlin/property/platformName"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("PlatformName.kt")
                public void testPlatformName() throws Exception {
                    String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/property/platformName/PlatformName.kt");
                    doTestWithoutJavac(fileName);
                }
            }
        }

        @TestMetadata("compiler/testData/compileJavaAgainstKotlin/sealed")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Sealed extends AbstractCompileJavaAgainstKotlinTest {
            public void testAllFilesPresentInSealed() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/compileJavaAgainstKotlin/sealed"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("Derived.kt")
            public void testDerived() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/sealed/Derived.kt");
                doTestWithoutJavac(fileName);
            }

            @TestMetadata("Instance.kt")
            public void testInstance() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/sealed/Instance.kt");
                doTestWithoutJavac(fileName);
            }
        }

        @TestMetadata("compiler/testData/compileJavaAgainstKotlin/staticFields")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class StaticFields extends AbstractCompileJavaAgainstKotlinTest {
            public void testAllFilesPresentInStaticFields() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/compileJavaAgainstKotlin/staticFields"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("AnnotationClass.kt")
            public void testAnnotationClass() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/staticFields/AnnotationClass.kt");
                doTestWithoutJavac(fileName);
            }

            @TestMetadata("AnnotationTrait.kt")
            public void testAnnotationTrait() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/staticFields/AnnotationTrait.kt");
                doTestWithoutJavac(fileName);
            }

            @TestMetadata("kt3698.kt")
            public void testKt3698() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/staticFields/kt3698.kt");
                doTestWithoutJavac(fileName);
            }

            @TestMetadata("staticClassProperty.kt")
            public void testStaticClassProperty() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/staticFields/staticClassProperty.kt");
                doTestWithoutJavac(fileName);
            }

            @TestMetadata("staticTraitProperty.kt")
            public void testStaticTraitProperty() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/staticFields/staticTraitProperty.kt");
                doTestWithoutJavac(fileName);
            }
        }

        @TestMetadata("compiler/testData/compileJavaAgainstKotlin/targets")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Targets extends AbstractCompileJavaAgainstKotlinTest {
            public void testAllFilesPresentInTargets() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/compileJavaAgainstKotlin/targets"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("annotation.kt")
            public void testAnnotation() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/targets/annotation.kt");
                doTestWithoutJavac(fileName);
            }

            @TestMetadata("base.kt")
            public void testBase() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/targets/base.kt");
                doTestWithoutJavac(fileName);
            }

            @TestMetadata("classifier.kt")
            public void testClassifier() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/targets/classifier.kt");
                doTestWithoutJavac(fileName);
            }

            @TestMetadata("constructor.kt")
            public void testConstructor() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/targets/constructor.kt");
                doTestWithoutJavac(fileName);
            }

            @TestMetadata("empty.kt")
            public void testEmpty() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/targets/empty.kt");
                doTestWithoutJavac(fileName);
            }

            @TestMetadata("field.kt")
            public void testField() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/targets/field.kt");
                doTestWithoutJavac(fileName);
            }

            @TestMetadata("function.kt")
            public void testFunction() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/targets/function.kt");
                doTestWithoutJavac(fileName);
            }

            @TestMetadata("getter.kt")
            public void testGetter() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/targets/getter.kt");
                doTestWithoutJavac(fileName);
            }

            @TestMetadata("local.kt")
            public void testLocal() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/targets/local.kt");
                doTestWithoutJavac(fileName);
            }

            @TestMetadata("multiple.kt")
            public void testMultiple() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/targets/multiple.kt");
                doTestWithoutJavac(fileName);
            }

            @TestMetadata("parameter.kt")
            public void testParameter() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/targets/parameter.kt");
                doTestWithoutJavac(fileName);
            }

            @TestMetadata("property.kt")
            public void testProperty() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/targets/property.kt");
                doTestWithoutJavac(fileName);
            }

            @TestMetadata("setter.kt")
            public void testSetter() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/targets/setter.kt");
                doTestWithoutJavac(fileName);
            }
        }
    }

    @TestMetadata("compiler/testData/compileJavaAgainstKotlin")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class WithJavac extends AbstractCompileJavaAgainstKotlinTest {
        public void testAllFilesPresentInWithJavac() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/compileJavaAgainstKotlin"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("compiler/testData/compileJavaAgainstKotlin/callableReference")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class CallableReference extends AbstractCompileJavaAgainstKotlinTest {
            public void testAllFilesPresentInCallableReference() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/compileJavaAgainstKotlin/callableReference"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("GenericSignature.kt")
            public void testGenericSignature() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/callableReference/GenericSignature.kt");
                doTestWithJavac(fileName);
            }
        }

        @TestMetadata("compiler/testData/compileJavaAgainstKotlin/class")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Class extends AbstractCompileJavaAgainstKotlinTest {
            public void testAllFilesPresentInClass() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/compileJavaAgainstKotlin/class"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("ClassObject.kt")
            public void testClassObject() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/class/ClassObject.kt");
                doTestWithJavac(fileName);
            }

            @TestMetadata("DefaultConstructor.kt")
            public void testDefaultConstructor() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/class/DefaultConstructor.kt");
                doTestWithJavac(fileName);
            }

            @TestMetadata("DefaultConstructorWithTwoArgs.kt")
            public void testDefaultConstructorWithTwoArgs() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/class/DefaultConstructorWithTwoArgs.kt");
                doTestWithJavac(fileName);
            }

            @TestMetadata("ExtendsAbstractListT.kt")
            public void testExtendsAbstractListT() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/class/ExtendsAbstractListT.kt");
                doTestWithJavac(fileName);
            }

            @TestMetadata("ImplementsListString.kt")
            public void testImplementsListString() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/class/ImplementsListString.kt");
                doTestWithJavac(fileName);
            }

            @TestMetadata("ImplementsMapPP.kt")
            public void testImplementsMapPP() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/class/ImplementsMapPP.kt");
                doTestWithJavac(fileName);
            }

            @TestMetadata("InnerClass.kt")
            public void testInnerClass() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/class/InnerClass.kt");
                doTestWithJavac(fileName);
            }

            @TestMetadata("InnerClassConstructors.kt")
            public void testInnerClassConstructors() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/class/InnerClassConstructors.kt");
                doTestWithJavac(fileName);
            }

            @TestMetadata("InnerClassOfGeneric.kt")
            public void testInnerClassOfGeneric() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/class/InnerClassOfGeneric.kt");
                doTestWithJavac(fileName);
            }

            @TestMetadata("kt3561.kt")
            public void testKt3561() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/class/kt3561.kt");
                doTestWithJavac(fileName);
            }

            @TestMetadata("kt4050.kt")
            public void testKt4050() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/class/kt4050.kt");
                doTestWithJavac(fileName);
            }

            @TestMetadata("Simple.kt")
            public void testSimple() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/class/Simple.kt");
                doTestWithJavac(fileName);
            }

            @TestMetadata("StarProjection.kt")
            public void testStarProjection() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/class/StarProjection.kt");
                doTestWithJavac(fileName);
            }
        }

        @TestMetadata("compiler/testData/compileJavaAgainstKotlin/enum")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Enum extends AbstractCompileJavaAgainstKotlinTest {
            public void testAllFilesPresentInEnum() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/compileJavaAgainstKotlin/enum"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("DefaultArgumentInEnumConstructor.kt")
            public void testDefaultArgumentInEnumConstructor() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/enum/DefaultArgumentInEnumConstructor.kt");
                doTestWithJavac(fileName);
            }
        }

        @TestMetadata("compiler/testData/compileJavaAgainstKotlin/jvmStatic")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class JvmStatic extends AbstractCompileJavaAgainstKotlinTest {
            public void testAllFilesPresentInJvmStatic() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/compileJavaAgainstKotlin/jvmStatic"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("simpleCompanionObject.kt")
            public void testSimpleCompanionObject() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/jvmStatic/simpleCompanionObject.kt");
                doTestWithJavac(fileName);
            }

            @TestMetadata("simpleCompanionObjectProperty.kt")
            public void testSimpleCompanionObjectProperty() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/jvmStatic/simpleCompanionObjectProperty.kt");
                doTestWithJavac(fileName);
            }

            @TestMetadata("simpleObject.kt")
            public void testSimpleObject() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/jvmStatic/simpleObject.kt");
                doTestWithJavac(fileName);
            }

            @TestMetadata("simpleObjectProperty.kt")
            public void testSimpleObjectProperty() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/jvmStatic/simpleObjectProperty.kt");
                doTestWithJavac(fileName);
            }
        }

        @TestMetadata("compiler/testData/compileJavaAgainstKotlin/method")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Method extends AbstractCompileJavaAgainstKotlinTest {
            @TestMetadata("AccessorGenericSignature.kt")
            public void testAccessorGenericSignature() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/AccessorGenericSignature.kt");
                doTestWithJavac(fileName);
            }

            public void testAllFilesPresentInMethod() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/compileJavaAgainstKotlin/method"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("Any.kt")
            public void testAny() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/Any.kt");
                doTestWithJavac(fileName);
            }

            @TestMetadata("ArrayOfIntArray.kt")
            public void testArrayOfIntArray() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/ArrayOfIntArray.kt");
                doTestWithJavac(fileName);
            }

            @TestMetadata("ArrayOfIntegerArray.kt")
            public void testArrayOfIntegerArray() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/ArrayOfIntegerArray.kt");
                doTestWithJavac(fileName);
            }

            @TestMetadata("ClashingSignaturesWithoutReturnType.kt")
            public void testClashingSignaturesWithoutReturnType() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/ClashingSignaturesWithoutReturnType.kt");
                doTestWithJavac(fileName);
            }

            @TestMetadata("Delegation.kt")
            public void testDelegation() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/Delegation.kt");
                doTestWithJavac(fileName);
            }

            @TestMetadata("Extensions.kt")
            public void testExtensions() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/Extensions.kt");
                doTestWithJavac(fileName);
            }

            @TestMetadata("GenericArray.kt")
            public void testGenericArray() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/GenericArray.kt");
                doTestWithJavac(fileName);
            }

            @TestMetadata("Hello.kt")
            public void testHello() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/Hello.kt");
                doTestWithJavac(fileName);
            }

            @TestMetadata("Int.kt")
            public void testInt() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/Int.kt");
                doTestWithJavac(fileName);
            }

            @TestMetadata("IntArray.kt")
            public void testIntArray() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/IntArray.kt");
                doTestWithJavac(fileName);
            }

            @TestMetadata("IntWithDefault.kt")
            public void testIntWithDefault() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/IntWithDefault.kt");
                doTestWithJavac(fileName);
            }

            @TestMetadata("IntegerArray.kt")
            public void testIntegerArray() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/IntegerArray.kt");
                doTestWithJavac(fileName);
            }

            @TestMetadata("ListOfInt.kt")
            public void testListOfInt() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/ListOfInt.kt");
                doTestWithJavac(fileName);
            }

            @TestMetadata("ListOfString.kt")
            public void testListOfString() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/ListOfString.kt");
                doTestWithJavac(fileName);
            }

            @TestMetadata("ListOfT.kt")
            public void testListOfT() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/ListOfT.kt");
                doTestWithJavac(fileName);
            }

            @TestMetadata("MapOfKString.kt")
            public void testMapOfKString() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/MapOfKString.kt");
                doTestWithJavac(fileName);
            }

            @TestMetadata("MapOfStringIntQ.kt")
            public void testMapOfStringIntQ() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/MapOfStringIntQ.kt");
                doTestWithJavac(fileName);
            }

            @TestMetadata("QExtendsListString.kt")
            public void testQExtendsListString() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/QExtendsListString.kt");
                doTestWithJavac(fileName);
            }

            @TestMetadata("QExtendsString.kt")
            public void testQExtendsString() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/QExtendsString.kt");
                doTestWithJavac(fileName);
            }

            @TestMetadata("TraitImpl.kt")
            public void testTraitImpl() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/TraitImpl.kt");
                doTestWithJavac(fileName);
            }

            @TestMetadata("Vararg.kt")
            public void testVararg() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/Vararg.kt");
                doTestWithJavac(fileName);
            }

            @TestMetadata("Void.kt")
            public void testVoid() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/Void.kt");
                doTestWithJavac(fileName);
            }

            @TestMetadata("compiler/testData/compileJavaAgainstKotlin/method/platformName")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class PlatformName extends AbstractCompileJavaAgainstKotlinTest {
                public void testAllFilesPresentInPlatformName() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/compileJavaAgainstKotlin/method/platformName"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("PlatformName.kt")
                public void testPlatformName() throws Exception {
                    String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/platformName/PlatformName.kt");
                    doTestWithJavac(fileName);
                }
            }

            @TestMetadata("compiler/testData/compileJavaAgainstKotlin/method/primitiveOverride")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class PrimitiveOverride extends AbstractCompileJavaAgainstKotlinTest {
                public void testAllFilesPresentInPrimitiveOverride() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/compileJavaAgainstKotlin/method/primitiveOverride"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("ByteOverridesObject.kt")
                public void testByteOverridesObject() throws Exception {
                    String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/primitiveOverride/ByteOverridesObject.kt");
                    doTestWithJavac(fileName);
                }

                @TestMetadata("CallFinalNotInSubclass.kt")
                public void testCallFinalNotInSubclass() throws Exception {
                    String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/primitiveOverride/CallFinalNotInSubclass.kt");
                    doTestWithJavac(fileName);
                }

                @TestMetadata("CallNotInSubclass.kt")
                public void testCallNotInSubclass() throws Exception {
                    String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/primitiveOverride/CallNotInSubclass.kt");
                    doTestWithJavac(fileName);
                }

                @TestMetadata("CovariantReturnTypeOverride.kt")
                public void testCovariantReturnTypeOverride() throws Exception {
                    String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/primitiveOverride/CovariantReturnTypeOverride.kt");
                    doTestWithJavac(fileName);
                }

                @TestMetadata("FinalOverride.kt")
                public void testFinalOverride() throws Exception {
                    String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/primitiveOverride/FinalOverride.kt");
                    doTestWithJavac(fileName);
                }

                @TestMetadata("IntOverridesComparable.kt")
                public void testIntOverridesComparable() throws Exception {
                    String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/primitiveOverride/IntOverridesComparable.kt");
                    doTestWithJavac(fileName);
                }

                @TestMetadata("IntOverridesNumber.kt")
                public void testIntOverridesNumber() throws Exception {
                    String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/primitiveOverride/IntOverridesNumber.kt");
                    doTestWithJavac(fileName);
                }

                @TestMetadata("IntOverridesObject.kt")
                public void testIntOverridesObject() throws Exception {
                    String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/primitiveOverride/IntOverridesObject.kt");
                    doTestWithJavac(fileName);
                }

                @TestMetadata("ManyClassesHierarchy.kt")
                public void testManyClassesHierarchy() throws Exception {
                    String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/primitiveOverride/ManyClassesHierarchy.kt");
                    doTestWithJavac(fileName);
                }

                @TestMetadata("NullableIntOverridesObject.kt")
                public void testNullableIntOverridesObject() throws Exception {
                    String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/primitiveOverride/NullableIntOverridesObject.kt");
                    doTestWithJavac(fileName);
                }

                @TestMetadata("OverrideInJava.kt")
                public void testOverrideInJava() throws Exception {
                    String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/primitiveOverride/OverrideInJava.kt");
                    doTestWithJavac(fileName);
                }
            }

            @TestMetadata("compiler/testData/compileJavaAgainstKotlin/method/throws")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Throws extends AbstractCompileJavaAgainstKotlinTest {
                public void testAllFilesPresentInThrows() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/compileJavaAgainstKotlin/method/throws"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("ClassMembers.kt")
                public void testClassMembers() throws Exception {
                    String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/throws/ClassMembers.kt");
                    doTestWithJavac(fileName);
                }

                @TestMetadata("Constructor.kt")
                public void testConstructor() throws Exception {
                    String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/throws/Constructor.kt");
                    doTestWithJavac(fileName);
                }

                @TestMetadata("DefaultArgs.kt")
                public void testDefaultArgs() throws Exception {
                    String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/throws/DefaultArgs.kt");
                    doTestWithJavac(fileName);
                }

                @TestMetadata("Delegation.kt")
                public void testDelegation() throws Exception {
                    String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/throws/Delegation.kt");
                    doTestWithJavac(fileName);
                }

                @TestMetadata("GenericSubstitution.kt")
                public void testGenericSubstitution() throws Exception {
                    String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/throws/GenericSubstitution.kt");
                    doTestWithJavac(fileName);
                }

                @TestMetadata("TopLevel.kt")
                public void testTopLevel() throws Exception {
                    String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/throws/TopLevel.kt");
                    doTestWithJavac(fileName);
                }

                @TestMetadata("TraitMembers.kt")
                public void testTraitMembers() throws Exception {
                    String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/method/throws/TraitMembers.kt");
                    doTestWithJavac(fileName);
                }
            }
        }

        @TestMetadata("compiler/testData/compileJavaAgainstKotlin/property")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Property extends AbstractCompileJavaAgainstKotlinTest {
            public void testAllFilesPresentInProperty() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/compileJavaAgainstKotlin/property"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("ConstVal.kt")
            public void testConstVal() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/property/ConstVal.kt");
                doTestWithJavac(fileName);
            }

            @TestMetadata("Extensions.kt")
            public void testExtensions() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/property/Extensions.kt");
                doTestWithJavac(fileName);
            }

            @TestMetadata("GenericProperty.kt")
            public void testGenericProperty() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/property/GenericProperty.kt");
                doTestWithJavac(fileName);
            }

            @TestMetadata("compiler/testData/compileJavaAgainstKotlin/property/platformName")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class PlatformName extends AbstractCompileJavaAgainstKotlinTest {
                public void testAllFilesPresentInPlatformName() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/compileJavaAgainstKotlin/property/platformName"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("PlatformName.kt")
                public void testPlatformName() throws Exception {
                    String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/property/platformName/PlatformName.kt");
                    doTestWithJavac(fileName);
                }
            }
        }

        @TestMetadata("compiler/testData/compileJavaAgainstKotlin/sealed")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Sealed extends AbstractCompileJavaAgainstKotlinTest {
            public void testAllFilesPresentInSealed() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/compileJavaAgainstKotlin/sealed"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("Derived.kt")
            public void testDerived() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/sealed/Derived.kt");
                doTestWithJavac(fileName);
            }

            @TestMetadata("Instance.kt")
            public void testInstance() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/sealed/Instance.kt");
                doTestWithJavac(fileName);
            }
        }

        @TestMetadata("compiler/testData/compileJavaAgainstKotlin/staticFields")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class StaticFields extends AbstractCompileJavaAgainstKotlinTest {
            public void testAllFilesPresentInStaticFields() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/compileJavaAgainstKotlin/staticFields"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("AnnotationClass.kt")
            public void testAnnotationClass() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/staticFields/AnnotationClass.kt");
                doTestWithJavac(fileName);
            }

            @TestMetadata("AnnotationTrait.kt")
            public void testAnnotationTrait() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/staticFields/AnnotationTrait.kt");
                doTestWithJavac(fileName);
            }

            @TestMetadata("kt3698.kt")
            public void testKt3698() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/staticFields/kt3698.kt");
                doTestWithJavac(fileName);
            }

            @TestMetadata("staticClassProperty.kt")
            public void testStaticClassProperty() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/staticFields/staticClassProperty.kt");
                doTestWithJavac(fileName);
            }

            @TestMetadata("staticTraitProperty.kt")
            public void testStaticTraitProperty() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/staticFields/staticTraitProperty.kt");
                doTestWithJavac(fileName);
            }
        }

        @TestMetadata("compiler/testData/compileJavaAgainstKotlin/targets")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Targets extends AbstractCompileJavaAgainstKotlinTest {
            public void testAllFilesPresentInTargets() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/compileJavaAgainstKotlin/targets"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("annotation.kt")
            public void testAnnotation() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/targets/annotation.kt");
                doTestWithJavac(fileName);
            }

            @TestMetadata("base.kt")
            public void testBase() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/targets/base.kt");
                doTestWithJavac(fileName);
            }

            @TestMetadata("classifier.kt")
            public void testClassifier() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/targets/classifier.kt");
                doTestWithJavac(fileName);
            }

            @TestMetadata("constructor.kt")
            public void testConstructor() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/targets/constructor.kt");
                doTestWithJavac(fileName);
            }

            @TestMetadata("empty.kt")
            public void testEmpty() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/targets/empty.kt");
                doTestWithJavac(fileName);
            }

            @TestMetadata("field.kt")
            public void testField() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/targets/field.kt");
                doTestWithJavac(fileName);
            }

            @TestMetadata("function.kt")
            public void testFunction() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/targets/function.kt");
                doTestWithJavac(fileName);
            }

            @TestMetadata("getter.kt")
            public void testGetter() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/targets/getter.kt");
                doTestWithJavac(fileName);
            }

            @TestMetadata("local.kt")
            public void testLocal() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/targets/local.kt");
                doTestWithJavac(fileName);
            }

            @TestMetadata("multiple.kt")
            public void testMultiple() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/targets/multiple.kt");
                doTestWithJavac(fileName);
            }

            @TestMetadata("parameter.kt")
            public void testParameter() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/targets/parameter.kt");
                doTestWithJavac(fileName);
            }

            @TestMetadata("property.kt")
            public void testProperty() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/targets/property.kt");
                doTestWithJavac(fileName);
            }

            @TestMetadata("setter.kt")
            public void testSetter() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileJavaAgainstKotlin/targets/setter.kt");
                doTestWithJavac(fileName);
            }
        }
    }
}
