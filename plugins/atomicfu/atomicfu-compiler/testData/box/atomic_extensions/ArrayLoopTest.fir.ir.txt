FILE fqName:<root> fileName:/ArrayLoopTest.kt
  CLASS CLASS name:ArrayLoopTest modality:FINAL visibility:public superTypes:[kotlin.Any]
    thisReceiver: VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> type:<root>.ArrayLoopTest
    PROPERTY name:SIZE visibility:private modality:FINAL [val]
      FIELD PROPERTY_BACKING_FIELD name:SIZE type:kotlin.Int visibility:private [final]
        EXPRESSION_BODY
          CONST Int type=kotlin.Int value=10
      FUN DEFAULT_PROPERTY_ACCESSOR name:<get-SIZE> visibility:private modality:FINAL returnType:kotlin.Int
        VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.ArrayLoopTest
        correspondingProperty: PROPERTY name:SIZE visibility:private modality:FINAL [val]
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='private final fun <get-SIZE> (): kotlin.Int declared in <root>.ArrayLoopTest'
            GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:SIZE type:kotlin.Int visibility:private [final]' type=kotlin.Int origin=null
              receiver: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.<get-SIZE>' type=<root>.ArrayLoopTest origin=null
    PROPERTY ATOMICFU_GENERATED_PROPERTY name:intArr visibility:private modality:FINAL [val]
      FIELD ATOMICFU_GENERATED_FIELD name:intArr type:kotlin.concurrent.AtomicIntArray visibility:private [final]
        EXPRESSION_BODY
          CONSTRUCTOR_CALL 'public constructor <init> (size: kotlin.Int) declared in kotlin.concurrent.AtomicIntArray' type=kotlin.concurrent.AtomicIntArray origin=null
            ARG size: CONST Int type=kotlin.Int value=10
      FUN ATOMICFU_GENERATED_PROPERTY_ACCESSOR name:<get-intArr> visibility:private modality:FINAL returnType:kotlin.concurrent.AtomicIntArray
        VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.ArrayLoopTest
        correspondingProperty: PROPERTY ATOMICFU_GENERATED_PROPERTY name:intArr visibility:private modality:FINAL [val]
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='private final fun <get-intArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.ArrayLoopTest'
            GET_FIELD 'FIELD ATOMICFU_GENERATED_FIELD name:intArr type:kotlin.concurrent.AtomicIntArray visibility:private [final] declared in <root>.ArrayLoopTest' type=kotlin.concurrent.AtomicIntArray origin=null
              receiver: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.<get-intArr>' type=<root>.ArrayLoopTest origin=null
    PROPERTY ATOMICFU_GENERATED_PROPERTY name:longArr visibility:private modality:FINAL [val]
      FIELD ATOMICFU_GENERATED_FIELD name:longArr type:kotlin.concurrent.AtomicLongArray visibility:private [final]
        EXPRESSION_BODY
          CONSTRUCTOR_CALL 'public constructor <init> (size: kotlin.Int) declared in kotlin.concurrent.AtomicLongArray' type=kotlin.concurrent.AtomicLongArray origin=null
            ARG size: CONST Int type=kotlin.Int value=10
      FUN ATOMICFU_GENERATED_PROPERTY_ACCESSOR name:<get-longArr> visibility:private modality:FINAL returnType:kotlin.concurrent.AtomicLongArray
        VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.ArrayLoopTest
        correspondingProperty: PROPERTY ATOMICFU_GENERATED_PROPERTY name:longArr visibility:private modality:FINAL [val]
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='private final fun <get-longArr> (): kotlin.concurrent.AtomicLongArray declared in <root>.ArrayLoopTest'
            GET_FIELD 'FIELD ATOMICFU_GENERATED_FIELD name:longArr type:kotlin.concurrent.AtomicLongArray visibility:private [final] declared in <root>.ArrayLoopTest' type=kotlin.concurrent.AtomicLongArray origin=null
              receiver: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.<get-longArr>' type=<root>.ArrayLoopTest origin=null
    PROPERTY ATOMICFU_GENERATED_PROPERTY name:boolArr visibility:private modality:FINAL [val]
      FIELD ATOMICFU_GENERATED_FIELD name:boolArr type:kotlin.concurrent.AtomicIntArray visibility:private [final]
        EXPRESSION_BODY
          CONSTRUCTOR_CALL 'public constructor <init> (size: kotlin.Int) declared in kotlin.concurrent.AtomicIntArray' type=kotlin.concurrent.AtomicIntArray origin=null
            ARG size: CONST Int type=kotlin.Int value=10
      FUN ATOMICFU_GENERATED_PROPERTY_ACCESSOR name:<get-boolArr> visibility:private modality:FINAL returnType:kotlin.concurrent.AtomicIntArray
        VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.ArrayLoopTest
        correspondingProperty: PROPERTY ATOMICFU_GENERATED_PROPERTY name:boolArr visibility:private modality:FINAL [val]
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='private final fun <get-boolArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.ArrayLoopTest'
            GET_FIELD 'FIELD ATOMICFU_GENERATED_FIELD name:boolArr type:kotlin.concurrent.AtomicIntArray visibility:private [final] declared in <root>.ArrayLoopTest' type=kotlin.concurrent.AtomicIntArray origin=null
              receiver: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.<get-boolArr>' type=<root>.ArrayLoopTest origin=null
    PROPERTY ATOMICFU_GENERATED_PROPERTY name:refArr visibility:private modality:FINAL [val]
      FIELD ATOMICFU_GENERATED_FIELD name:refArr type:kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> visibility:private [final]
        EXPRESSION_BODY
          CONSTRUCTOR_CALL 'internal constructor <init> (array: kotlin.Array<T of kotlin.concurrent.AtomicArray>) declared in kotlin.concurrent.AtomicArray' type=kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> origin=null
            TYPE_ARG (of class) T: kotlin.Any?
            ARG array: CALL 'public final fun arrayOfNulls <T> (size: kotlin.Int): kotlin.Array<T of kotlin.arrayOfNulls?> declared in kotlin' type=kotlin.Array<T of kotlin.arrayOfNulls?> origin=null
              TYPE_ARG T: kotlin.Any?
              ARG size: CONST Int type=kotlin.Int value=10
      FUN ATOMICFU_GENERATED_PROPERTY_ACCESSOR name:<get-refArr> visibility:private modality:FINAL returnType:kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray>
        VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.ArrayLoopTest
        correspondingProperty: PROPERTY ATOMICFU_GENERATED_PROPERTY name:refArr visibility:private modality:FINAL [val]
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='private final fun <get-refArr> (): kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> declared in <root>.ArrayLoopTest'
            GET_FIELD 'FIELD ATOMICFU_GENERATED_FIELD name:refArr type:kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> visibility:private [final] declared in <root>.ArrayLoopTest' type=kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> origin=null
              receiver: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.<get-refArr>' type=<root>.ArrayLoopTest origin=null
    CLASS CLASS name:Box modality:FINAL visibility:public superTypes:[kotlin.Any]
      thisReceiver: VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> type:<root>.ArrayLoopTest.Box
      PROPERTY name:n visibility:public modality:FINAL [val]
        FIELD PROPERTY_BACKING_FIELD name:n type:kotlin.Int visibility:private [final]
          EXPRESSION_BODY
            GET_VAR 'n: kotlin.Int declared in <root>.ArrayLoopTest.Box.<init>' type=kotlin.Int origin=INITIALIZE_PROPERTY_FROM_PARAMETER
        FUN DEFAULT_PROPERTY_ACCESSOR name:<get-n> visibility:public modality:FINAL returnType:kotlin.Int
          VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.ArrayLoopTest.Box
          correspondingProperty: PROPERTY name:n visibility:public modality:FINAL [val]
          BLOCK_BODY
            RETURN type=kotlin.Nothing from='public final fun <get-n> (): kotlin.Int declared in <root>.ArrayLoopTest.Box'
              GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:n type:kotlin.Int visibility:private [final]' type=kotlin.Int origin=null
                receiver: GET_VAR '<this>: <root>.ArrayLoopTest.Box declared in <root>.ArrayLoopTest.Box.<get-n>' type=<root>.ArrayLoopTest.Box origin=null
      CONSTRUCTOR visibility:public returnType:<root>.ArrayLoopTest.Box [primary]
        VALUE_PARAMETER kind:Regular name:n index:0 type:kotlin.Int
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'public constructor <init> () declared in kotlin.Any'
          INSTANCE_INITIALIZER_CALL classDescriptor='CLASS CLASS name:Box modality:FINAL visibility:public superTypes:[kotlin.Any]' type=kotlin.Unit
      FUN FAKE_OVERRIDE name:equals visibility:public modality:OPEN returnType:kotlin.Boolean [fake_override,operator]
        VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Any
        VALUE_PARAMETER kind:Regular name:other index:1 type:kotlin.Any?
        overridden:
          public open fun equals (other: kotlin.Any?): kotlin.Boolean declared in kotlin.Any
      FUN FAKE_OVERRIDE name:hashCode visibility:public modality:OPEN returnType:kotlin.Int [fake_override]
        VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Any
        overridden:
          public open fun hashCode (): kotlin.Int declared in kotlin.Any
      FUN FAKE_OVERRIDE name:toString visibility:public modality:OPEN returnType:kotlin.String [fake_override]
        VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Any
        overridden:
          public open fun toString (): kotlin.String declared in kotlin.Any
    CONSTRUCTOR visibility:public returnType:<root>.ArrayLoopTest [primary]
      BLOCK_BODY
        DELEGATING_CONSTRUCTOR_CALL 'public constructor <init> () declared in kotlin.Any'
        INSTANCE_INITIALIZER_CALL classDescriptor='CLASS CLASS name:ArrayLoopTest modality:FINAL visibility:public superTypes:[kotlin.Any]' type=kotlin.Unit
    FUN ATOMICFU_GENERATED_FUNCTION name:getAndUpdate$atomicfu$ATOMIC_ARRAY$Any visibility:private modality:FINAL returnType:kotlin.Any? [inline]
      VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.ArrayLoopTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.concurrent.AtomicArray<kotlin.Any?>
      VALUE_PARAMETER kind:Regular name:index$atomicfu index:2 type:kotlin.Int
      VALUE_PARAMETER kind:Regular name:action$atomicfu index:3 type:kotlin.Function1<kotlin.Any?, kotlin.Any?>
      BLOCK_BODY
        WHILE label=null origin=null
          condition: CONST Boolean type=kotlin.Boolean value=true
          body: BLOCK type=kotlin.Unit origin=null
            VAR IR_TEMPORARY_VARIABLE name:tmp_0 type:T of kotlin.concurrent.AtomicArray [val]
              CALL 'public final fun get (index: kotlin.Int): T of kotlin.concurrent.AtomicArray declared in kotlin.concurrent.AtomicArray' type=T of kotlin.concurrent.AtomicArray origin=null
                ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicArray<kotlin.Any?> declared in <root>.ArrayLoopTest.getAndUpdate$atomicfu$ATOMIC_ARRAY$Any' type=kotlin.concurrent.AtomicArray<kotlin.Any?> origin=null
                ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ArrayLoopTest.getAndUpdate$atomicfu$ATOMIC_ARRAY$Any' type=kotlin.Int origin=null
            VAR IR_TEMPORARY_VARIABLE name:tmp_1 type:R of kotlin.Function1 [val]
              CALL 'public abstract fun invoke (p1: P1 of kotlin.Function1): R of kotlin.Function1 declared in kotlin.Function1' type=R of kotlin.Function1 origin=null
                ARG <this>: GET_VAR 'action$atomicfu: kotlin.Function1<kotlin.Any?, kotlin.Any?> declared in <root>.ArrayLoopTest.getAndUpdate$atomicfu$ATOMIC_ARRAY$Any' type=kotlin.Function1<kotlin.Any?, kotlin.Any?> origin=null
                ARG p1: GET_VAR 'val tmp_0: T of kotlin.concurrent.AtomicArray declared in <root>.ArrayLoopTest.getAndUpdate$atomicfu$ATOMIC_ARRAY$Any' type=T of kotlin.concurrent.AtomicArray origin=null
            WHEN type=kotlin.Unit origin=null
              BRANCH
                if: CALL 'public final fun compareAndSet (index: kotlin.Int, expectedValue: T of kotlin.concurrent.AtomicArray, newValue: T of kotlin.concurrent.AtomicArray): kotlin.Boolean declared in kotlin.concurrent.AtomicArray' type=kotlin.Boolean origin=null
                  ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicArray<kotlin.Any?> declared in <root>.ArrayLoopTest.getAndUpdate$atomicfu$ATOMIC_ARRAY$Any' type=kotlin.concurrent.AtomicArray<kotlin.Any?> origin=null
                  ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ArrayLoopTest.getAndUpdate$atomicfu$ATOMIC_ARRAY$Any' type=kotlin.Int origin=null
                  ARG expectedValue: GET_VAR 'val tmp_0: T of kotlin.concurrent.AtomicArray declared in <root>.ArrayLoopTest.getAndUpdate$atomicfu$ATOMIC_ARRAY$Any' type=T of kotlin.concurrent.AtomicArray origin=null
                  ARG newValue: GET_VAR 'val tmp_1: R of kotlin.Function1 declared in <root>.ArrayLoopTest.getAndUpdate$atomicfu$ATOMIC_ARRAY$Any' type=R of kotlin.Function1 origin=null
                then: RETURN type=kotlin.Nothing from='private final fun getAndUpdate$atomicfu$ATOMIC_ARRAY$Any (handler$atomicfu: kotlin.concurrent.AtomicArray<kotlin.Any?>, index$atomicfu: kotlin.Int, action$atomicfu: kotlin.Function1<kotlin.Any?, kotlin.Any?>): kotlin.Any? declared in <root>.ArrayLoopTest'
                  GET_VAR 'val tmp_0: T of kotlin.concurrent.AtomicArray declared in <root>.ArrayLoopTest.getAndUpdate$atomicfu$ATOMIC_ARRAY$Any' type=T of kotlin.concurrent.AtomicArray origin=null
    FUN ATOMICFU_GENERATED_FUNCTION name:getAndUpdate$atomicfu$ATOMIC_ARRAY$Boolean visibility:private modality:FINAL returnType:kotlin.Boolean [inline]
      VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.ArrayLoopTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.concurrent.AtomicIntArray
      VALUE_PARAMETER kind:Regular name:index$atomicfu index:2 type:kotlin.Int
      VALUE_PARAMETER kind:Regular name:action$atomicfu index:3 type:kotlin.Function1<kotlin.Boolean, kotlin.Boolean>
      BLOCK_BODY
        WHILE label=null origin=null
          condition: CONST Boolean type=kotlin.Boolean value=true
          body: BLOCK type=kotlin.Unit origin=null
            VAR IR_TEMPORARY_VARIABLE name:tmp_2 type:kotlin.Boolean [val]
              CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                ARG arg0: CALL 'public final fun get (index: kotlin.Int): kotlin.Int declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Int origin=null
                  ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicIntArray declared in <root>.ArrayLoopTest.getAndUpdate$atomicfu$ATOMIC_ARRAY$Boolean' type=kotlin.concurrent.AtomicIntArray origin=null
                  ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ArrayLoopTest.getAndUpdate$atomicfu$ATOMIC_ARRAY$Boolean' type=kotlin.Int origin=null
                ARG arg1: CONST Int type=kotlin.Int value=1
            VAR IR_TEMPORARY_VARIABLE name:tmp_3 type:R of kotlin.Function1 [val]
              CALL 'public abstract fun invoke (p1: P1 of kotlin.Function1): R of kotlin.Function1 declared in kotlin.Function1' type=R of kotlin.Function1 origin=null
                ARG <this>: GET_VAR 'action$atomicfu: kotlin.Function1<kotlin.Boolean, kotlin.Boolean> declared in <root>.ArrayLoopTest.getAndUpdate$atomicfu$ATOMIC_ARRAY$Boolean' type=kotlin.Function1<kotlin.Boolean, kotlin.Boolean> origin=null
                ARG p1: GET_VAR 'val tmp_2: kotlin.Boolean declared in <root>.ArrayLoopTest.getAndUpdate$atomicfu$ATOMIC_ARRAY$Boolean' type=kotlin.Boolean origin=null
            WHEN type=kotlin.Unit origin=null
              BRANCH
                if: CALL 'public final fun compareAndSet (index: kotlin.Int, expectedValue: kotlin.Int, newValue: kotlin.Int): kotlin.Boolean declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Boolean origin=null
                  ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicIntArray declared in <root>.ArrayLoopTest.getAndUpdate$atomicfu$ATOMIC_ARRAY$Boolean' type=kotlin.concurrent.AtomicIntArray origin=null
                  ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ArrayLoopTest.getAndUpdate$atomicfu$ATOMIC_ARRAY$Boolean' type=kotlin.Int origin=null
                  ARG expectedValue: WHEN type=kotlin.Int origin=null
                    BRANCH
                      if: GET_VAR 'val tmp_2: kotlin.Boolean declared in <root>.ArrayLoopTest.getAndUpdate$atomicfu$ATOMIC_ARRAY$Boolean' type=kotlin.Boolean origin=null
                      then: CONST Int type=kotlin.Int value=1
                    BRANCH
                      if: CONST Boolean type=kotlin.Boolean value=true
                      then: CONST Int type=kotlin.Int value=0
                  ARG newValue: WHEN type=kotlin.Int origin=null
                    BRANCH
                      if: GET_VAR 'val tmp_3: R of kotlin.Function1 declared in <root>.ArrayLoopTest.getAndUpdate$atomicfu$ATOMIC_ARRAY$Boolean' type=R of kotlin.Function1 origin=null
                      then: CONST Int type=kotlin.Int value=1
                    BRANCH
                      if: CONST Boolean type=kotlin.Boolean value=true
                      then: CONST Int type=kotlin.Int value=0
                then: RETURN type=kotlin.Nothing from='private final fun getAndUpdate$atomicfu$ATOMIC_ARRAY$Boolean (handler$atomicfu: kotlin.concurrent.AtomicIntArray, index$atomicfu: kotlin.Int, action$atomicfu: kotlin.Function1<kotlin.Boolean, kotlin.Boolean>): kotlin.Boolean declared in <root>.ArrayLoopTest'
                  GET_VAR 'val tmp_2: kotlin.Boolean declared in <root>.ArrayLoopTest.getAndUpdate$atomicfu$ATOMIC_ARRAY$Boolean' type=kotlin.Boolean origin=null
    FUN ATOMICFU_GENERATED_FUNCTION name:getAndUpdate$atomicfu$ATOMIC_ARRAY$Int visibility:private modality:FINAL returnType:kotlin.Int [inline]
      VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.ArrayLoopTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.concurrent.AtomicIntArray
      VALUE_PARAMETER kind:Regular name:index$atomicfu index:2 type:kotlin.Int
      VALUE_PARAMETER kind:Regular name:action$atomicfu index:3 type:kotlin.Function1<kotlin.Int, kotlin.Int>
      BLOCK_BODY
        WHILE label=null origin=null
          condition: CONST Boolean type=kotlin.Boolean value=true
          body: BLOCK type=kotlin.Unit origin=null
            VAR IR_TEMPORARY_VARIABLE name:tmp_4 type:kotlin.Int [val]
              CALL 'public final fun get (index: kotlin.Int): kotlin.Int declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Int origin=null
                ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicIntArray declared in <root>.ArrayLoopTest.getAndUpdate$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.concurrent.AtomicIntArray origin=null
                ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ArrayLoopTest.getAndUpdate$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.Int origin=null
            VAR IR_TEMPORARY_VARIABLE name:tmp_5 type:R of kotlin.Function1 [val]
              CALL 'public abstract fun invoke (p1: P1 of kotlin.Function1): R of kotlin.Function1 declared in kotlin.Function1' type=R of kotlin.Function1 origin=null
                ARG <this>: GET_VAR 'action$atomicfu: kotlin.Function1<kotlin.Int, kotlin.Int> declared in <root>.ArrayLoopTest.getAndUpdate$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.Function1<kotlin.Int, kotlin.Int> origin=null
                ARG p1: GET_VAR 'val tmp_4: kotlin.Int declared in <root>.ArrayLoopTest.getAndUpdate$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.Int origin=null
            WHEN type=kotlin.Unit origin=null
              BRANCH
                if: CALL 'public final fun compareAndSet (index: kotlin.Int, expectedValue: kotlin.Int, newValue: kotlin.Int): kotlin.Boolean declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Boolean origin=null
                  ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicIntArray declared in <root>.ArrayLoopTest.getAndUpdate$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.concurrent.AtomicIntArray origin=null
                  ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ArrayLoopTest.getAndUpdate$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.Int origin=null
                  ARG expectedValue: GET_VAR 'val tmp_4: kotlin.Int declared in <root>.ArrayLoopTest.getAndUpdate$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.Int origin=null
                  ARG newValue: GET_VAR 'val tmp_5: R of kotlin.Function1 declared in <root>.ArrayLoopTest.getAndUpdate$atomicfu$ATOMIC_ARRAY$Int' type=R of kotlin.Function1 origin=null
                then: RETURN type=kotlin.Nothing from='private final fun getAndUpdate$atomicfu$ATOMIC_ARRAY$Int (handler$atomicfu: kotlin.concurrent.AtomicIntArray, index$atomicfu: kotlin.Int, action$atomicfu: kotlin.Function1<kotlin.Int, kotlin.Int>): kotlin.Int declared in <root>.ArrayLoopTest'
                  GET_VAR 'val tmp_4: kotlin.Int declared in <root>.ArrayLoopTest.getAndUpdate$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.Int origin=null
    FUN ATOMICFU_GENERATED_FUNCTION name:getAndUpdate$atomicfu$ATOMIC_ARRAY$Long visibility:private modality:FINAL returnType:kotlin.Long [inline]
      VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.ArrayLoopTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.concurrent.AtomicLongArray
      VALUE_PARAMETER kind:Regular name:index$atomicfu index:2 type:kotlin.Int
      VALUE_PARAMETER kind:Regular name:action$atomicfu index:3 type:kotlin.Function1<kotlin.Long, kotlin.Long>
      BLOCK_BODY
        WHILE label=null origin=null
          condition: CONST Boolean type=kotlin.Boolean value=true
          body: BLOCK type=kotlin.Unit origin=null
            VAR IR_TEMPORARY_VARIABLE name:tmp_6 type:kotlin.Long [val]
              CALL 'public final fun get (index: kotlin.Int): kotlin.Long declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Long origin=null
                ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicLongArray declared in <root>.ArrayLoopTest.getAndUpdate$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.concurrent.AtomicLongArray origin=null
                ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ArrayLoopTest.getAndUpdate$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.Int origin=null
            VAR IR_TEMPORARY_VARIABLE name:tmp_7 type:R of kotlin.Function1 [val]
              CALL 'public abstract fun invoke (p1: P1 of kotlin.Function1): R of kotlin.Function1 declared in kotlin.Function1' type=R of kotlin.Function1 origin=null
                ARG <this>: GET_VAR 'action$atomicfu: kotlin.Function1<kotlin.Long, kotlin.Long> declared in <root>.ArrayLoopTest.getAndUpdate$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.Function1<kotlin.Long, kotlin.Long> origin=null
                ARG p1: GET_VAR 'val tmp_6: kotlin.Long declared in <root>.ArrayLoopTest.getAndUpdate$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.Long origin=null
            WHEN type=kotlin.Unit origin=null
              BRANCH
                if: CALL 'public final fun compareAndSet (index: kotlin.Int, expectedValue: kotlin.Long, newValue: kotlin.Long): kotlin.Boolean declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Boolean origin=null
                  ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicLongArray declared in <root>.ArrayLoopTest.getAndUpdate$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.concurrent.AtomicLongArray origin=null
                  ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ArrayLoopTest.getAndUpdate$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.Int origin=null
                  ARG expectedValue: GET_VAR 'val tmp_6: kotlin.Long declared in <root>.ArrayLoopTest.getAndUpdate$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.Long origin=null
                  ARG newValue: GET_VAR 'val tmp_7: R of kotlin.Function1 declared in <root>.ArrayLoopTest.getAndUpdate$atomicfu$ATOMIC_ARRAY$Long' type=R of kotlin.Function1 origin=null
                then: RETURN type=kotlin.Nothing from='private final fun getAndUpdate$atomicfu$ATOMIC_ARRAY$Long (handler$atomicfu: kotlin.concurrent.AtomicLongArray, index$atomicfu: kotlin.Int, action$atomicfu: kotlin.Function1<kotlin.Long, kotlin.Long>): kotlin.Long declared in <root>.ArrayLoopTest'
                  GET_VAR 'val tmp_6: kotlin.Long declared in <root>.ArrayLoopTest.getAndUpdate$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.Long origin=null
    FUN ATOMICFU_GENERATED_FUNCTION name:loop$atomicfu$ATOMIC_ARRAY$Any visibility:private modality:FINAL returnType:kotlin.Unit [inline]
      VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.ArrayLoopTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.concurrent.AtomicArray<kotlin.Any?>
      VALUE_PARAMETER kind:Regular name:index$atomicfu index:2 type:kotlin.Int
      VALUE_PARAMETER kind:Regular name:action$atomicfu index:3 type:kotlin.Function1<kotlin.Any?, kotlin.Unit>
      BLOCK_BODY
        WHILE label=null origin=null
          condition: CONST Boolean type=kotlin.Boolean value=true
          body: BLOCK type=R of kotlin.Function1 origin=null
            VAR IR_TEMPORARY_VARIABLE name:tmp_8 type:T of kotlin.concurrent.AtomicArray [val]
              CALL 'public final fun get (index: kotlin.Int): T of kotlin.concurrent.AtomicArray declared in kotlin.concurrent.AtomicArray' type=T of kotlin.concurrent.AtomicArray origin=null
                ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicArray<kotlin.Any?> declared in <root>.ArrayLoopTest.loop$atomicfu$ATOMIC_ARRAY$Any' type=kotlin.concurrent.AtomicArray<kotlin.Any?> origin=null
                ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ArrayLoopTest.loop$atomicfu$ATOMIC_ARRAY$Any' type=kotlin.Int origin=null
            CALL 'public abstract fun invoke (p1: P1 of kotlin.Function1): R of kotlin.Function1 declared in kotlin.Function1' type=R of kotlin.Function1 origin=null
              ARG <this>: GET_VAR 'action$atomicfu: kotlin.Function1<kotlin.Any?, kotlin.Unit> declared in <root>.ArrayLoopTest.loop$atomicfu$ATOMIC_ARRAY$Any' type=kotlin.Function1<kotlin.Any?, kotlin.Unit> origin=null
              ARG p1: GET_VAR 'val tmp_8: T of kotlin.concurrent.AtomicArray declared in <root>.ArrayLoopTest.loop$atomicfu$ATOMIC_ARRAY$Any' type=T of kotlin.concurrent.AtomicArray origin=null
    FUN ATOMICFU_GENERATED_FUNCTION name:loop$atomicfu$ATOMIC_ARRAY$Boolean visibility:private modality:FINAL returnType:kotlin.Unit [inline]
      VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.ArrayLoopTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.concurrent.AtomicIntArray
      VALUE_PARAMETER kind:Regular name:index$atomicfu index:2 type:kotlin.Int
      VALUE_PARAMETER kind:Regular name:action$atomicfu index:3 type:kotlin.Function1<kotlin.Boolean, kotlin.Unit>
      BLOCK_BODY
        WHILE label=null origin=null
          condition: CONST Boolean type=kotlin.Boolean value=true
          body: BLOCK type=R of kotlin.Function1 origin=null
            VAR IR_TEMPORARY_VARIABLE name:tmp_9 type:kotlin.Boolean [val]
              CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                ARG arg0: CALL 'public final fun get (index: kotlin.Int): kotlin.Int declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Int origin=null
                  ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicIntArray declared in <root>.ArrayLoopTest.loop$atomicfu$ATOMIC_ARRAY$Boolean' type=kotlin.concurrent.AtomicIntArray origin=null
                  ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ArrayLoopTest.loop$atomicfu$ATOMIC_ARRAY$Boolean' type=kotlin.Int origin=null
                ARG arg1: CONST Int type=kotlin.Int value=1
            CALL 'public abstract fun invoke (p1: P1 of kotlin.Function1): R of kotlin.Function1 declared in kotlin.Function1' type=R of kotlin.Function1 origin=null
              ARG <this>: GET_VAR 'action$atomicfu: kotlin.Function1<kotlin.Boolean, kotlin.Unit> declared in <root>.ArrayLoopTest.loop$atomicfu$ATOMIC_ARRAY$Boolean' type=kotlin.Function1<kotlin.Boolean, kotlin.Unit> origin=null
              ARG p1: GET_VAR 'val tmp_9: kotlin.Boolean declared in <root>.ArrayLoopTest.loop$atomicfu$ATOMIC_ARRAY$Boolean' type=kotlin.Boolean origin=null
    FUN ATOMICFU_GENERATED_FUNCTION name:loop$atomicfu$ATOMIC_ARRAY$Int visibility:private modality:FINAL returnType:kotlin.Unit [inline]
      VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.ArrayLoopTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.concurrent.AtomicIntArray
      VALUE_PARAMETER kind:Regular name:index$atomicfu index:2 type:kotlin.Int
      VALUE_PARAMETER kind:Regular name:action$atomicfu index:3 type:kotlin.Function1<kotlin.Int, kotlin.Unit>
      BLOCK_BODY
        WHILE label=null origin=null
          condition: CONST Boolean type=kotlin.Boolean value=true
          body: BLOCK type=R of kotlin.Function1 origin=null
            VAR IR_TEMPORARY_VARIABLE name:tmp_10 type:kotlin.Int [val]
              CALL 'public final fun get (index: kotlin.Int): kotlin.Int declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Int origin=null
                ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicIntArray declared in <root>.ArrayLoopTest.loop$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.concurrent.AtomicIntArray origin=null
                ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ArrayLoopTest.loop$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.Int origin=null
            CALL 'public abstract fun invoke (p1: P1 of kotlin.Function1): R of kotlin.Function1 declared in kotlin.Function1' type=R of kotlin.Function1 origin=null
              ARG <this>: GET_VAR 'action$atomicfu: kotlin.Function1<kotlin.Int, kotlin.Unit> declared in <root>.ArrayLoopTest.loop$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.Function1<kotlin.Int, kotlin.Unit> origin=null
              ARG p1: GET_VAR 'val tmp_10: kotlin.Int declared in <root>.ArrayLoopTest.loop$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.Int origin=null
    FUN ATOMICFU_GENERATED_FUNCTION name:loop$atomicfu$ATOMIC_ARRAY$Long visibility:private modality:FINAL returnType:kotlin.Unit [inline]
      VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.ArrayLoopTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.concurrent.AtomicLongArray
      VALUE_PARAMETER kind:Regular name:index$atomicfu index:2 type:kotlin.Int
      VALUE_PARAMETER kind:Regular name:action$atomicfu index:3 type:kotlin.Function1<kotlin.Long, kotlin.Unit>
      BLOCK_BODY
        WHILE label=null origin=null
          condition: CONST Boolean type=kotlin.Boolean value=true
          body: BLOCK type=R of kotlin.Function1 origin=null
            VAR IR_TEMPORARY_VARIABLE name:tmp_11 type:kotlin.Long [val]
              CALL 'public final fun get (index: kotlin.Int): kotlin.Long declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Long origin=null
                ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicLongArray declared in <root>.ArrayLoopTest.loop$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.concurrent.AtomicLongArray origin=null
                ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ArrayLoopTest.loop$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.Int origin=null
            CALL 'public abstract fun invoke (p1: P1 of kotlin.Function1): R of kotlin.Function1 declared in kotlin.Function1' type=R of kotlin.Function1 origin=null
              ARG <this>: GET_VAR 'action$atomicfu: kotlin.Function1<kotlin.Long, kotlin.Unit> declared in <root>.ArrayLoopTest.loop$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.Function1<kotlin.Long, kotlin.Unit> origin=null
              ARG p1: GET_VAR 'val tmp_11: kotlin.Long declared in <root>.ArrayLoopTest.loop$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.Long origin=null
    FUN ATOMICFU_GENERATED_FUNCTION name:update$atomicfu$ATOMIC_ARRAY$Any visibility:private modality:FINAL returnType:kotlin.Unit [inline]
      VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.ArrayLoopTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.concurrent.AtomicArray<kotlin.Any?>
      VALUE_PARAMETER kind:Regular name:index$atomicfu index:2 type:kotlin.Int
      VALUE_PARAMETER kind:Regular name:action$atomicfu index:3 type:kotlin.Function1<kotlin.Any?, kotlin.Any?>
      BLOCK_BODY
        WHILE label=null origin=null
          condition: CONST Boolean type=kotlin.Boolean value=true
          body: BLOCK type=kotlin.Unit origin=null
            VAR IR_TEMPORARY_VARIABLE name:tmp_12 type:T of kotlin.concurrent.AtomicArray [val]
              CALL 'public final fun get (index: kotlin.Int): T of kotlin.concurrent.AtomicArray declared in kotlin.concurrent.AtomicArray' type=T of kotlin.concurrent.AtomicArray origin=null
                ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicArray<kotlin.Any?> declared in <root>.ArrayLoopTest.update$atomicfu$ATOMIC_ARRAY$Any' type=kotlin.concurrent.AtomicArray<kotlin.Any?> origin=null
                ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ArrayLoopTest.update$atomicfu$ATOMIC_ARRAY$Any' type=kotlin.Int origin=null
            VAR IR_TEMPORARY_VARIABLE name:tmp_13 type:R of kotlin.Function1 [val]
              CALL 'public abstract fun invoke (p1: P1 of kotlin.Function1): R of kotlin.Function1 declared in kotlin.Function1' type=R of kotlin.Function1 origin=null
                ARG <this>: GET_VAR 'action$atomicfu: kotlin.Function1<kotlin.Any?, kotlin.Any?> declared in <root>.ArrayLoopTest.update$atomicfu$ATOMIC_ARRAY$Any' type=kotlin.Function1<kotlin.Any?, kotlin.Any?> origin=null
                ARG p1: GET_VAR 'val tmp_12: T of kotlin.concurrent.AtomicArray declared in <root>.ArrayLoopTest.update$atomicfu$ATOMIC_ARRAY$Any' type=T of kotlin.concurrent.AtomicArray origin=null
            WHEN type=kotlin.Unit origin=null
              BRANCH
                if: CALL 'public final fun compareAndSet (index: kotlin.Int, expectedValue: T of kotlin.concurrent.AtomicArray, newValue: T of kotlin.concurrent.AtomicArray): kotlin.Boolean declared in kotlin.concurrent.AtomicArray' type=kotlin.Boolean origin=null
                  ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicArray<kotlin.Any?> declared in <root>.ArrayLoopTest.update$atomicfu$ATOMIC_ARRAY$Any' type=kotlin.concurrent.AtomicArray<kotlin.Any?> origin=null
                  ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ArrayLoopTest.update$atomicfu$ATOMIC_ARRAY$Any' type=kotlin.Int origin=null
                  ARG expectedValue: GET_VAR 'val tmp_12: T of kotlin.concurrent.AtomicArray declared in <root>.ArrayLoopTest.update$atomicfu$ATOMIC_ARRAY$Any' type=T of kotlin.concurrent.AtomicArray origin=null
                  ARG newValue: GET_VAR 'val tmp_13: R of kotlin.Function1 declared in <root>.ArrayLoopTest.update$atomicfu$ATOMIC_ARRAY$Any' type=R of kotlin.Function1 origin=null
                then: RETURN type=kotlin.Nothing from='private final fun update$atomicfu$ATOMIC_ARRAY$Any (handler$atomicfu: kotlin.concurrent.AtomicArray<kotlin.Any?>, index$atomicfu: kotlin.Int, action$atomicfu: kotlin.Function1<kotlin.Any?, kotlin.Any?>): kotlin.Unit declared in <root>.ArrayLoopTest'
                  GET_OBJECT 'CLASS IR_EXTERNAL_DECLARATION_STUB OBJECT name:Unit modality:FINAL visibility:public superTypes:[kotlin.Any]' type=kotlin.Unit
    FUN ATOMICFU_GENERATED_FUNCTION name:update$atomicfu$ATOMIC_ARRAY$Boolean visibility:private modality:FINAL returnType:kotlin.Unit [inline]
      VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.ArrayLoopTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.concurrent.AtomicIntArray
      VALUE_PARAMETER kind:Regular name:index$atomicfu index:2 type:kotlin.Int
      VALUE_PARAMETER kind:Regular name:action$atomicfu index:3 type:kotlin.Function1<kotlin.Boolean, kotlin.Boolean>
      BLOCK_BODY
        WHILE label=null origin=null
          condition: CONST Boolean type=kotlin.Boolean value=true
          body: BLOCK type=kotlin.Unit origin=null
            VAR IR_TEMPORARY_VARIABLE name:tmp_14 type:kotlin.Boolean [val]
              CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                ARG arg0: CALL 'public final fun get (index: kotlin.Int): kotlin.Int declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Int origin=null
                  ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicIntArray declared in <root>.ArrayLoopTest.update$atomicfu$ATOMIC_ARRAY$Boolean' type=kotlin.concurrent.AtomicIntArray origin=null
                  ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ArrayLoopTest.update$atomicfu$ATOMIC_ARRAY$Boolean' type=kotlin.Int origin=null
                ARG arg1: CONST Int type=kotlin.Int value=1
            VAR IR_TEMPORARY_VARIABLE name:tmp_15 type:R of kotlin.Function1 [val]
              CALL 'public abstract fun invoke (p1: P1 of kotlin.Function1): R of kotlin.Function1 declared in kotlin.Function1' type=R of kotlin.Function1 origin=null
                ARG <this>: GET_VAR 'action$atomicfu: kotlin.Function1<kotlin.Boolean, kotlin.Boolean> declared in <root>.ArrayLoopTest.update$atomicfu$ATOMIC_ARRAY$Boolean' type=kotlin.Function1<kotlin.Boolean, kotlin.Boolean> origin=null
                ARG p1: GET_VAR 'val tmp_14: kotlin.Boolean declared in <root>.ArrayLoopTest.update$atomicfu$ATOMIC_ARRAY$Boolean' type=kotlin.Boolean origin=null
            WHEN type=kotlin.Unit origin=null
              BRANCH
                if: CALL 'public final fun compareAndSet (index: kotlin.Int, expectedValue: kotlin.Int, newValue: kotlin.Int): kotlin.Boolean declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Boolean origin=null
                  ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicIntArray declared in <root>.ArrayLoopTest.update$atomicfu$ATOMIC_ARRAY$Boolean' type=kotlin.concurrent.AtomicIntArray origin=null
                  ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ArrayLoopTest.update$atomicfu$ATOMIC_ARRAY$Boolean' type=kotlin.Int origin=null
                  ARG expectedValue: WHEN type=kotlin.Int origin=null
                    BRANCH
                      if: GET_VAR 'val tmp_14: kotlin.Boolean declared in <root>.ArrayLoopTest.update$atomicfu$ATOMIC_ARRAY$Boolean' type=kotlin.Boolean origin=null
                      then: CONST Int type=kotlin.Int value=1
                    BRANCH
                      if: CONST Boolean type=kotlin.Boolean value=true
                      then: CONST Int type=kotlin.Int value=0
                  ARG newValue: WHEN type=kotlin.Int origin=null
                    BRANCH
                      if: GET_VAR 'val tmp_15: R of kotlin.Function1 declared in <root>.ArrayLoopTest.update$atomicfu$ATOMIC_ARRAY$Boolean' type=R of kotlin.Function1 origin=null
                      then: CONST Int type=kotlin.Int value=1
                    BRANCH
                      if: CONST Boolean type=kotlin.Boolean value=true
                      then: CONST Int type=kotlin.Int value=0
                then: RETURN type=kotlin.Nothing from='private final fun update$atomicfu$ATOMIC_ARRAY$Boolean (handler$atomicfu: kotlin.concurrent.AtomicIntArray, index$atomicfu: kotlin.Int, action$atomicfu: kotlin.Function1<kotlin.Boolean, kotlin.Boolean>): kotlin.Unit declared in <root>.ArrayLoopTest'
                  GET_OBJECT 'CLASS IR_EXTERNAL_DECLARATION_STUB OBJECT name:Unit modality:FINAL visibility:public superTypes:[kotlin.Any]' type=kotlin.Unit
    FUN ATOMICFU_GENERATED_FUNCTION name:update$atomicfu$ATOMIC_ARRAY$Int visibility:private modality:FINAL returnType:kotlin.Unit [inline]
      VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.ArrayLoopTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.concurrent.AtomicIntArray
      VALUE_PARAMETER kind:Regular name:index$atomicfu index:2 type:kotlin.Int
      VALUE_PARAMETER kind:Regular name:action$atomicfu index:3 type:kotlin.Function1<kotlin.Int, kotlin.Int>
      BLOCK_BODY
        WHILE label=null origin=null
          condition: CONST Boolean type=kotlin.Boolean value=true
          body: BLOCK type=kotlin.Unit origin=null
            VAR IR_TEMPORARY_VARIABLE name:tmp_16 type:kotlin.Int [val]
              CALL 'public final fun get (index: kotlin.Int): kotlin.Int declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Int origin=null
                ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicIntArray declared in <root>.ArrayLoopTest.update$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.concurrent.AtomicIntArray origin=null
                ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ArrayLoopTest.update$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.Int origin=null
            VAR IR_TEMPORARY_VARIABLE name:tmp_17 type:R of kotlin.Function1 [val]
              CALL 'public abstract fun invoke (p1: P1 of kotlin.Function1): R of kotlin.Function1 declared in kotlin.Function1' type=R of kotlin.Function1 origin=null
                ARG <this>: GET_VAR 'action$atomicfu: kotlin.Function1<kotlin.Int, kotlin.Int> declared in <root>.ArrayLoopTest.update$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.Function1<kotlin.Int, kotlin.Int> origin=null
                ARG p1: GET_VAR 'val tmp_16: kotlin.Int declared in <root>.ArrayLoopTest.update$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.Int origin=null
            WHEN type=kotlin.Unit origin=null
              BRANCH
                if: CALL 'public final fun compareAndSet (index: kotlin.Int, expectedValue: kotlin.Int, newValue: kotlin.Int): kotlin.Boolean declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Boolean origin=null
                  ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicIntArray declared in <root>.ArrayLoopTest.update$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.concurrent.AtomicIntArray origin=null
                  ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ArrayLoopTest.update$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.Int origin=null
                  ARG expectedValue: GET_VAR 'val tmp_16: kotlin.Int declared in <root>.ArrayLoopTest.update$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.Int origin=null
                  ARG newValue: GET_VAR 'val tmp_17: R of kotlin.Function1 declared in <root>.ArrayLoopTest.update$atomicfu$ATOMIC_ARRAY$Int' type=R of kotlin.Function1 origin=null
                then: RETURN type=kotlin.Nothing from='private final fun update$atomicfu$ATOMIC_ARRAY$Int (handler$atomicfu: kotlin.concurrent.AtomicIntArray, index$atomicfu: kotlin.Int, action$atomicfu: kotlin.Function1<kotlin.Int, kotlin.Int>): kotlin.Unit declared in <root>.ArrayLoopTest'
                  GET_OBJECT 'CLASS IR_EXTERNAL_DECLARATION_STUB OBJECT name:Unit modality:FINAL visibility:public superTypes:[kotlin.Any]' type=kotlin.Unit
    FUN ATOMICFU_GENERATED_FUNCTION name:update$atomicfu$ATOMIC_ARRAY$Long visibility:private modality:FINAL returnType:kotlin.Unit [inline]
      VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.ArrayLoopTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.concurrent.AtomicLongArray
      VALUE_PARAMETER kind:Regular name:index$atomicfu index:2 type:kotlin.Int
      VALUE_PARAMETER kind:Regular name:action$atomicfu index:3 type:kotlin.Function1<kotlin.Long, kotlin.Long>
      BLOCK_BODY
        WHILE label=null origin=null
          condition: CONST Boolean type=kotlin.Boolean value=true
          body: BLOCK type=kotlin.Unit origin=null
            VAR IR_TEMPORARY_VARIABLE name:tmp_18 type:kotlin.Long [val]
              CALL 'public final fun get (index: kotlin.Int): kotlin.Long declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Long origin=null
                ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicLongArray declared in <root>.ArrayLoopTest.update$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.concurrent.AtomicLongArray origin=null
                ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ArrayLoopTest.update$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.Int origin=null
            VAR IR_TEMPORARY_VARIABLE name:tmp_19 type:R of kotlin.Function1 [val]
              CALL 'public abstract fun invoke (p1: P1 of kotlin.Function1): R of kotlin.Function1 declared in kotlin.Function1' type=R of kotlin.Function1 origin=null
                ARG <this>: GET_VAR 'action$atomicfu: kotlin.Function1<kotlin.Long, kotlin.Long> declared in <root>.ArrayLoopTest.update$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.Function1<kotlin.Long, kotlin.Long> origin=null
                ARG p1: GET_VAR 'val tmp_18: kotlin.Long declared in <root>.ArrayLoopTest.update$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.Long origin=null
            WHEN type=kotlin.Unit origin=null
              BRANCH
                if: CALL 'public final fun compareAndSet (index: kotlin.Int, expectedValue: kotlin.Long, newValue: kotlin.Long): kotlin.Boolean declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Boolean origin=null
                  ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicLongArray declared in <root>.ArrayLoopTest.update$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.concurrent.AtomicLongArray origin=null
                  ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ArrayLoopTest.update$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.Int origin=null
                  ARG expectedValue: GET_VAR 'val tmp_18: kotlin.Long declared in <root>.ArrayLoopTest.update$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.Long origin=null
                  ARG newValue: GET_VAR 'val tmp_19: R of kotlin.Function1 declared in <root>.ArrayLoopTest.update$atomicfu$ATOMIC_ARRAY$Long' type=R of kotlin.Function1 origin=null
                then: RETURN type=kotlin.Nothing from='private final fun update$atomicfu$ATOMIC_ARRAY$Long (handler$atomicfu: kotlin.concurrent.AtomicLongArray, index$atomicfu: kotlin.Int, action$atomicfu: kotlin.Function1<kotlin.Long, kotlin.Long>): kotlin.Unit declared in <root>.ArrayLoopTest'
                  GET_OBJECT 'CLASS IR_EXTERNAL_DECLARATION_STUB OBJECT name:Unit modality:FINAL visibility:public superTypes:[kotlin.Any]' type=kotlin.Unit
    FUN ATOMICFU_GENERATED_FUNCTION name:updateAndGet$atomicfu$ATOMIC_ARRAY$Any visibility:private modality:FINAL returnType:kotlin.Any? [inline]
      VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.ArrayLoopTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.concurrent.AtomicArray<kotlin.Any?>
      VALUE_PARAMETER kind:Regular name:index$atomicfu index:2 type:kotlin.Int
      VALUE_PARAMETER kind:Regular name:action$atomicfu index:3 type:kotlin.Function1<kotlin.Any?, kotlin.Any?>
      BLOCK_BODY
        WHILE label=null origin=null
          condition: CONST Boolean type=kotlin.Boolean value=true
          body: BLOCK type=kotlin.Unit origin=null
            VAR IR_TEMPORARY_VARIABLE name:tmp_20 type:T of kotlin.concurrent.AtomicArray [val]
              CALL 'public final fun get (index: kotlin.Int): T of kotlin.concurrent.AtomicArray declared in kotlin.concurrent.AtomicArray' type=T of kotlin.concurrent.AtomicArray origin=null
                ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicArray<kotlin.Any?> declared in <root>.ArrayLoopTest.updateAndGet$atomicfu$ATOMIC_ARRAY$Any' type=kotlin.concurrent.AtomicArray<kotlin.Any?> origin=null
                ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ArrayLoopTest.updateAndGet$atomicfu$ATOMIC_ARRAY$Any' type=kotlin.Int origin=null
            VAR IR_TEMPORARY_VARIABLE name:tmp_21 type:R of kotlin.Function1 [val]
              CALL 'public abstract fun invoke (p1: P1 of kotlin.Function1): R of kotlin.Function1 declared in kotlin.Function1' type=R of kotlin.Function1 origin=null
                ARG <this>: GET_VAR 'action$atomicfu: kotlin.Function1<kotlin.Any?, kotlin.Any?> declared in <root>.ArrayLoopTest.updateAndGet$atomicfu$ATOMIC_ARRAY$Any' type=kotlin.Function1<kotlin.Any?, kotlin.Any?> origin=null
                ARG p1: GET_VAR 'val tmp_20: T of kotlin.concurrent.AtomicArray declared in <root>.ArrayLoopTest.updateAndGet$atomicfu$ATOMIC_ARRAY$Any' type=T of kotlin.concurrent.AtomicArray origin=null
            WHEN type=kotlin.Unit origin=null
              BRANCH
                if: CALL 'public final fun compareAndSet (index: kotlin.Int, expectedValue: T of kotlin.concurrent.AtomicArray, newValue: T of kotlin.concurrent.AtomicArray): kotlin.Boolean declared in kotlin.concurrent.AtomicArray' type=kotlin.Boolean origin=null
                  ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicArray<kotlin.Any?> declared in <root>.ArrayLoopTest.updateAndGet$atomicfu$ATOMIC_ARRAY$Any' type=kotlin.concurrent.AtomicArray<kotlin.Any?> origin=null
                  ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ArrayLoopTest.updateAndGet$atomicfu$ATOMIC_ARRAY$Any' type=kotlin.Int origin=null
                  ARG expectedValue: GET_VAR 'val tmp_20: T of kotlin.concurrent.AtomicArray declared in <root>.ArrayLoopTest.updateAndGet$atomicfu$ATOMIC_ARRAY$Any' type=T of kotlin.concurrent.AtomicArray origin=null
                  ARG newValue: GET_VAR 'val tmp_21: R of kotlin.Function1 declared in <root>.ArrayLoopTest.updateAndGet$atomicfu$ATOMIC_ARRAY$Any' type=R of kotlin.Function1 origin=null
                then: RETURN type=kotlin.Nothing from='private final fun updateAndGet$atomicfu$ATOMIC_ARRAY$Any (handler$atomicfu: kotlin.concurrent.AtomicArray<kotlin.Any?>, index$atomicfu: kotlin.Int, action$atomicfu: kotlin.Function1<kotlin.Any?, kotlin.Any?>): kotlin.Any? declared in <root>.ArrayLoopTest'
                  GET_VAR 'val tmp_21: R of kotlin.Function1 declared in <root>.ArrayLoopTest.updateAndGet$atomicfu$ATOMIC_ARRAY$Any' type=R of kotlin.Function1 origin=null
    FUN ATOMICFU_GENERATED_FUNCTION name:updateAndGet$atomicfu$ATOMIC_ARRAY$Boolean visibility:private modality:FINAL returnType:kotlin.Boolean [inline]
      VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.ArrayLoopTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.concurrent.AtomicIntArray
      VALUE_PARAMETER kind:Regular name:index$atomicfu index:2 type:kotlin.Int
      VALUE_PARAMETER kind:Regular name:action$atomicfu index:3 type:kotlin.Function1<kotlin.Boolean, kotlin.Boolean>
      BLOCK_BODY
        WHILE label=null origin=null
          condition: CONST Boolean type=kotlin.Boolean value=true
          body: BLOCK type=kotlin.Unit origin=null
            VAR IR_TEMPORARY_VARIABLE name:tmp_22 type:kotlin.Boolean [val]
              CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                ARG arg0: CALL 'public final fun get (index: kotlin.Int): kotlin.Int declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Int origin=null
                  ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicIntArray declared in <root>.ArrayLoopTest.updateAndGet$atomicfu$ATOMIC_ARRAY$Boolean' type=kotlin.concurrent.AtomicIntArray origin=null
                  ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ArrayLoopTest.updateAndGet$atomicfu$ATOMIC_ARRAY$Boolean' type=kotlin.Int origin=null
                ARG arg1: CONST Int type=kotlin.Int value=1
            VAR IR_TEMPORARY_VARIABLE name:tmp_23 type:R of kotlin.Function1 [val]
              CALL 'public abstract fun invoke (p1: P1 of kotlin.Function1): R of kotlin.Function1 declared in kotlin.Function1' type=R of kotlin.Function1 origin=null
                ARG <this>: GET_VAR 'action$atomicfu: kotlin.Function1<kotlin.Boolean, kotlin.Boolean> declared in <root>.ArrayLoopTest.updateAndGet$atomicfu$ATOMIC_ARRAY$Boolean' type=kotlin.Function1<kotlin.Boolean, kotlin.Boolean> origin=null
                ARG p1: GET_VAR 'val tmp_22: kotlin.Boolean declared in <root>.ArrayLoopTest.updateAndGet$atomicfu$ATOMIC_ARRAY$Boolean' type=kotlin.Boolean origin=null
            WHEN type=kotlin.Unit origin=null
              BRANCH
                if: CALL 'public final fun compareAndSet (index: kotlin.Int, expectedValue: kotlin.Int, newValue: kotlin.Int): kotlin.Boolean declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Boolean origin=null
                  ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicIntArray declared in <root>.ArrayLoopTest.updateAndGet$atomicfu$ATOMIC_ARRAY$Boolean' type=kotlin.concurrent.AtomicIntArray origin=null
                  ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ArrayLoopTest.updateAndGet$atomicfu$ATOMIC_ARRAY$Boolean' type=kotlin.Int origin=null
                  ARG expectedValue: WHEN type=kotlin.Int origin=null
                    BRANCH
                      if: GET_VAR 'val tmp_22: kotlin.Boolean declared in <root>.ArrayLoopTest.updateAndGet$atomicfu$ATOMIC_ARRAY$Boolean' type=kotlin.Boolean origin=null
                      then: CONST Int type=kotlin.Int value=1
                    BRANCH
                      if: CONST Boolean type=kotlin.Boolean value=true
                      then: CONST Int type=kotlin.Int value=0
                  ARG newValue: WHEN type=kotlin.Int origin=null
                    BRANCH
                      if: GET_VAR 'val tmp_23: R of kotlin.Function1 declared in <root>.ArrayLoopTest.updateAndGet$atomicfu$ATOMIC_ARRAY$Boolean' type=R of kotlin.Function1 origin=null
                      then: CONST Int type=kotlin.Int value=1
                    BRANCH
                      if: CONST Boolean type=kotlin.Boolean value=true
                      then: CONST Int type=kotlin.Int value=0
                then: RETURN type=kotlin.Nothing from='private final fun updateAndGet$atomicfu$ATOMIC_ARRAY$Boolean (handler$atomicfu: kotlin.concurrent.AtomicIntArray, index$atomicfu: kotlin.Int, action$atomicfu: kotlin.Function1<kotlin.Boolean, kotlin.Boolean>): kotlin.Boolean declared in <root>.ArrayLoopTest'
                  GET_VAR 'val tmp_23: R of kotlin.Function1 declared in <root>.ArrayLoopTest.updateAndGet$atomicfu$ATOMIC_ARRAY$Boolean' type=R of kotlin.Function1 origin=null
    FUN ATOMICFU_GENERATED_FUNCTION name:updateAndGet$atomicfu$ATOMIC_ARRAY$Int visibility:private modality:FINAL returnType:kotlin.Int [inline]
      VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.ArrayLoopTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.concurrent.AtomicIntArray
      VALUE_PARAMETER kind:Regular name:index$atomicfu index:2 type:kotlin.Int
      VALUE_PARAMETER kind:Regular name:action$atomicfu index:3 type:kotlin.Function1<kotlin.Int, kotlin.Int>
      BLOCK_BODY
        WHILE label=null origin=null
          condition: CONST Boolean type=kotlin.Boolean value=true
          body: BLOCK type=kotlin.Unit origin=null
            VAR IR_TEMPORARY_VARIABLE name:tmp_24 type:kotlin.Int [val]
              CALL 'public final fun get (index: kotlin.Int): kotlin.Int declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Int origin=null
                ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicIntArray declared in <root>.ArrayLoopTest.updateAndGet$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.concurrent.AtomicIntArray origin=null
                ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ArrayLoopTest.updateAndGet$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.Int origin=null
            VAR IR_TEMPORARY_VARIABLE name:tmp_25 type:R of kotlin.Function1 [val]
              CALL 'public abstract fun invoke (p1: P1 of kotlin.Function1): R of kotlin.Function1 declared in kotlin.Function1' type=R of kotlin.Function1 origin=null
                ARG <this>: GET_VAR 'action$atomicfu: kotlin.Function1<kotlin.Int, kotlin.Int> declared in <root>.ArrayLoopTest.updateAndGet$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.Function1<kotlin.Int, kotlin.Int> origin=null
                ARG p1: GET_VAR 'val tmp_24: kotlin.Int declared in <root>.ArrayLoopTest.updateAndGet$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.Int origin=null
            WHEN type=kotlin.Unit origin=null
              BRANCH
                if: CALL 'public final fun compareAndSet (index: kotlin.Int, expectedValue: kotlin.Int, newValue: kotlin.Int): kotlin.Boolean declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Boolean origin=null
                  ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicIntArray declared in <root>.ArrayLoopTest.updateAndGet$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.concurrent.AtomicIntArray origin=null
                  ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ArrayLoopTest.updateAndGet$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.Int origin=null
                  ARG expectedValue: GET_VAR 'val tmp_24: kotlin.Int declared in <root>.ArrayLoopTest.updateAndGet$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.Int origin=null
                  ARG newValue: GET_VAR 'val tmp_25: R of kotlin.Function1 declared in <root>.ArrayLoopTest.updateAndGet$atomicfu$ATOMIC_ARRAY$Int' type=R of kotlin.Function1 origin=null
                then: RETURN type=kotlin.Nothing from='private final fun updateAndGet$atomicfu$ATOMIC_ARRAY$Int (handler$atomicfu: kotlin.concurrent.AtomicIntArray, index$atomicfu: kotlin.Int, action$atomicfu: kotlin.Function1<kotlin.Int, kotlin.Int>): kotlin.Int declared in <root>.ArrayLoopTest'
                  GET_VAR 'val tmp_25: R of kotlin.Function1 declared in <root>.ArrayLoopTest.updateAndGet$atomicfu$ATOMIC_ARRAY$Int' type=R of kotlin.Function1 origin=null
    FUN ATOMICFU_GENERATED_FUNCTION name:updateAndGet$atomicfu$ATOMIC_ARRAY$Long visibility:private modality:FINAL returnType:kotlin.Long [inline]
      VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.ArrayLoopTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.concurrent.AtomicLongArray
      VALUE_PARAMETER kind:Regular name:index$atomicfu index:2 type:kotlin.Int
      VALUE_PARAMETER kind:Regular name:action$atomicfu index:3 type:kotlin.Function1<kotlin.Long, kotlin.Long>
      BLOCK_BODY
        WHILE label=null origin=null
          condition: CONST Boolean type=kotlin.Boolean value=true
          body: BLOCK type=kotlin.Unit origin=null
            VAR IR_TEMPORARY_VARIABLE name:tmp_26 type:kotlin.Long [val]
              CALL 'public final fun get (index: kotlin.Int): kotlin.Long declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Long origin=null
                ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicLongArray declared in <root>.ArrayLoopTest.updateAndGet$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.concurrent.AtomicLongArray origin=null
                ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ArrayLoopTest.updateAndGet$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.Int origin=null
            VAR IR_TEMPORARY_VARIABLE name:tmp_27 type:R of kotlin.Function1 [val]
              CALL 'public abstract fun invoke (p1: P1 of kotlin.Function1): R of kotlin.Function1 declared in kotlin.Function1' type=R of kotlin.Function1 origin=null
                ARG <this>: GET_VAR 'action$atomicfu: kotlin.Function1<kotlin.Long, kotlin.Long> declared in <root>.ArrayLoopTest.updateAndGet$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.Function1<kotlin.Long, kotlin.Long> origin=null
                ARG p1: GET_VAR 'val tmp_26: kotlin.Long declared in <root>.ArrayLoopTest.updateAndGet$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.Long origin=null
            WHEN type=kotlin.Unit origin=null
              BRANCH
                if: CALL 'public final fun compareAndSet (index: kotlin.Int, expectedValue: kotlin.Long, newValue: kotlin.Long): kotlin.Boolean declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Boolean origin=null
                  ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicLongArray declared in <root>.ArrayLoopTest.updateAndGet$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.concurrent.AtomicLongArray origin=null
                  ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ArrayLoopTest.updateAndGet$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.Int origin=null
                  ARG expectedValue: GET_VAR 'val tmp_26: kotlin.Long declared in <root>.ArrayLoopTest.updateAndGet$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.Long origin=null
                  ARG newValue: GET_VAR 'val tmp_27: R of kotlin.Function1 declared in <root>.ArrayLoopTest.updateAndGet$atomicfu$ATOMIC_ARRAY$Long' type=R of kotlin.Function1 origin=null
                then: RETURN type=kotlin.Nothing from='private final fun updateAndGet$atomicfu$ATOMIC_ARRAY$Long (handler$atomicfu: kotlin.concurrent.AtomicLongArray, index$atomicfu: kotlin.Int, action$atomicfu: kotlin.Function1<kotlin.Long, kotlin.Long>): kotlin.Long declared in <root>.ArrayLoopTest'
                  GET_VAR 'val tmp_27: R of kotlin.Function1 declared in <root>.ArrayLoopTest.updateAndGet$atomicfu$ATOMIC_ARRAY$Long' type=R of kotlin.Function1 origin=null
    FUN FAKE_OVERRIDE name:equals visibility:public modality:OPEN returnType:kotlin.Boolean [fake_override,operator]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Any
      VALUE_PARAMETER kind:Regular name:other index:1 type:kotlin.Any?
      overridden:
        public open fun equals (other: kotlin.Any?): kotlin.Boolean declared in kotlin.Any
    FUN FAKE_OVERRIDE name:hashCode visibility:public modality:OPEN returnType:kotlin.Int [fake_override]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Any
      overridden:
        public open fun hashCode (): kotlin.Int declared in kotlin.Any
    FUN FAKE_OVERRIDE name:toString visibility:public modality:OPEN returnType:kotlin.String [fake_override]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Any
      overridden:
        public open fun toString (): kotlin.String declared in kotlin.Any
    FUN name:action visibility:private modality:FINAL returnType:<root>.ArrayLoopTest.Box?
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.ArrayLoopTest
      VALUE_PARAMETER kind:Regular name:cur index:1 type:<root>.ArrayLoopTest.Box?
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='private final fun action (cur: <root>.ArrayLoopTest.Box?): <root>.ArrayLoopTest.Box? declared in <root>.ArrayLoopTest'
          BLOCK type=<root>.ArrayLoopTest.Box? origin=SAFE_CALL
            VAR IR_TEMPORARY_VARIABLE name:tmp_28 type:<root>.ArrayLoopTest.Box? [val]
              GET_VAR 'cur: <root>.ArrayLoopTest.Box? declared in <root>.ArrayLoopTest.action' type=<root>.ArrayLoopTest.Box? origin=null
            WHEN type=<root>.ArrayLoopTest.Box? origin=null
              BRANCH
                if: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                  ARG arg0: GET_VAR 'val tmp_28: <root>.ArrayLoopTest.Box? declared in <root>.ArrayLoopTest.action' type=<root>.ArrayLoopTest.Box? origin=null
                  ARG arg1: CONST Null type=kotlin.Nothing? value=null
                then: CONST Null type=kotlin.Nothing? value=null
              BRANCH
                if: CONST Boolean type=kotlin.Boolean value=true
                then: CALL 'public final fun let <T, R> (<this>: T of kotlin.let, block: kotlin.Function1<T of kotlin.let, R of kotlin.let>): R of kotlin.let declared in kotlin' type=<root>.ArrayLoopTest.Box origin=null
                  TYPE_ARG T: <root>.ArrayLoopTest.Box
                  TYPE_ARG R: <root>.ArrayLoopTest.Box
                  ARG <this>: GET_VAR 'val tmp_28: <root>.ArrayLoopTest.Box? declared in <root>.ArrayLoopTest.action' type=<root>.ArrayLoopTest.Box? origin=null
                  ARG block: FUN_EXPR type=kotlin.Function1<<root>.ArrayLoopTest.Box, <root>.ArrayLoopTest.Box> origin=LAMBDA
                    FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:<root>.ArrayLoopTest.Box
                      VALUE_PARAMETER kind:Regular name:it index:0 type:<root>.ArrayLoopTest.Box
                      BLOCK_BODY
                        RETURN type=kotlin.Nothing from='local final fun <anonymous> (it: <root>.ArrayLoopTest.Box): <root>.ArrayLoopTest.Box declared in <root>.ArrayLoopTest.action'
                          CONSTRUCTOR_CALL 'public constructor <init> (n: kotlin.Int) declared in <root>.ArrayLoopTest.Box' type=<root>.ArrayLoopTest.Box origin=null
                            ARG n: CALL 'public final fun times (other: kotlin.Int): kotlin.Int declared in kotlin.Int' type=kotlin.Int origin=MUL
                              ARG <this>: CALL 'public final fun <get-n> (): kotlin.Int declared in <root>.ArrayLoopTest.Box' type=kotlin.Int origin=GET_PROPERTY
                                ARG <this>: GET_VAR 'cur: <root>.ArrayLoopTest.Box? declared in <root>.ArrayLoopTest.action' type=<root>.ArrayLoopTest.Box? origin=null
                              ARG other: CONST Int type=kotlin.Int value=10
    FUN name:atomicBooleanArrLoopTest visibility:public modality:FINAL returnType:kotlin.Boolean
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.ArrayLoopTest
      BLOCK_BODY
        CALL 'public final fun set (index: kotlin.Int, newValue: kotlin.Int): kotlin.Unit declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Unit origin=null
          ARG <this>: CALL 'private final fun <get-boolArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.ArrayLoopTest' type=kotlin.concurrent.AtomicIntArray origin=null
            ARG <this>: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.atomicBooleanArrLoopTest' type=<root>.ArrayLoopTest origin=IMPLICIT_ARGUMENT
          ARG index: CONST Int type=kotlin.Int value=0
          ARG newValue: WHEN type=kotlin.Int origin=null
            BRANCH
              if: CONST Boolean type=kotlin.Boolean value=false
              then: CONST Int type=kotlin.Int value=1
            BRANCH
              if: CONST Boolean type=kotlin.Boolean value=true
              then: CONST Int type=kotlin.Int value=0
        CALL 'private final fun loop$atomicfu$ATOMIC_ARRAY$Boolean (handler$atomicfu: kotlin.concurrent.AtomicIntArray, index$atomicfu: kotlin.Int, action$atomicfu: kotlin.Function1<kotlin.Boolean, kotlin.Unit>): kotlin.Unit declared in <root>.ArrayLoopTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.atomicBooleanArrLoopTest' type=<root>.ArrayLoopTest origin=null
          ARG handler$atomicfu: CALL 'private final fun <get-boolArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.ArrayLoopTest' type=kotlin.concurrent.AtomicIntArray origin=null
            ARG <this>: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.atomicBooleanArrLoopTest' type=<root>.ArrayLoopTest origin=IMPLICIT_ARGUMENT
          ARG index$atomicfu: CONST Int type=kotlin.Int value=0
          ARG action$atomicfu: FUN_EXPR type=kotlin.Function1<kotlin.Boolean, kotlin.Unit> origin=LAMBDA
            FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Unit
              VALUE_PARAMETER kind:Regular name:value index:0 type:kotlin.Boolean
              BLOCK_BODY
                WHEN type=kotlin.Unit origin=IF
                  BRANCH
                    if: WHEN type=kotlin.Boolean origin=ANDAND
                      BRANCH
                        if: CALL 'public final fun not (): kotlin.Boolean declared in kotlin.Boolean' type=kotlin.Boolean origin=null
                          ARG <this>: GET_VAR 'value: kotlin.Boolean declared in <root>.ArrayLoopTest.atomicBooleanArrLoopTest.<anonymous>' type=kotlin.Boolean origin=null
                        then: CALL 'public final fun compareAndSet (index: kotlin.Int, expectedValue: kotlin.Int, newValue: kotlin.Int): kotlin.Boolean declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Boolean origin=null
                          ARG <this>: CALL 'private final fun <get-boolArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.ArrayLoopTest' type=kotlin.concurrent.AtomicIntArray origin=null
                            ARG <this>: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.atomicBooleanArrLoopTest' type=<root>.ArrayLoopTest origin=IMPLICIT_ARGUMENT
                          ARG index: CONST Int type=kotlin.Int value=0
                          ARG expectedValue: WHEN type=kotlin.Int origin=null
                            BRANCH
                              if: GET_VAR 'value: kotlin.Boolean declared in <root>.ArrayLoopTest.atomicBooleanArrLoopTest.<anonymous>' type=kotlin.Boolean origin=null
                              then: CONST Int type=kotlin.Int value=1
                            BRANCH
                              if: CONST Boolean type=kotlin.Boolean value=true
                              then: CONST Int type=kotlin.Int value=0
                          ARG newValue: WHEN type=kotlin.Int origin=null
                            BRANCH
                              if: CONST Boolean type=kotlin.Boolean value=true
                              then: CONST Int type=kotlin.Int value=1
                            BRANCH
                              if: CONST Boolean type=kotlin.Boolean value=true
                              then: CONST Int type=kotlin.Int value=0
                      BRANCH
                        if: CONST Boolean type=kotlin.Boolean value=true
                        then: CONST Boolean type=kotlin.Boolean value=false
                    then: BLOCK type=kotlin.Unit origin=null
                      CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
                        TYPE_ARG T: kotlin.Boolean
                        ARG expected: CONST Boolean type=kotlin.Boolean value=true
                        ARG actual: TYPE_OP type=kotlin.Boolean origin=CAST typeOperand=kotlin.Boolean
                          CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                            ARG arg0: CALL 'public final fun get (index: kotlin.Int): kotlin.Int declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Int origin=null
                              ARG <this>: CALL 'private final fun <get-boolArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.ArrayLoopTest' type=kotlin.concurrent.AtomicIntArray origin=null
                                ARG <this>: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.atomicBooleanArrLoopTest' type=<root>.ArrayLoopTest origin=IMPLICIT_ARGUMENT
                              ARG index: CONST Int type=kotlin.Int value=0
                            ARG arg1: CONST Int type=kotlin.Int value=1
                      RETURN type=kotlin.Nothing from='public final fun atomicBooleanArrLoopTest (): kotlin.Boolean declared in <root>.ArrayLoopTest'
                        TYPE_OP type=kotlin.Boolean origin=CAST typeOperand=kotlin.Boolean
                          CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                            ARG arg0: CALL 'public final fun get (index: kotlin.Int): kotlin.Int declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Int origin=null
                              ARG <this>: CALL 'private final fun <get-boolArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.ArrayLoopTest' type=kotlin.concurrent.AtomicIntArray origin=null
                                ARG <this>: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.atomicBooleanArrLoopTest' type=<root>.ArrayLoopTest origin=IMPLICIT_ARGUMENT
                              ARG index: CONST Int type=kotlin.Int value=0
                            ARG arg1: CONST Int type=kotlin.Int value=1
    FUN name:atomicBooleanArrUpdateTest visibility:public modality:FINAL returnType:kotlin.Unit
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.ArrayLoopTest
      BLOCK_BODY
        CALL 'public final fun assertTrue (actual: kotlin.Boolean, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          ARG actual: CALL 'public final fun atomicBooleanArrLoopTest (): kotlin.Boolean declared in <root>.ArrayLoopTest' type=kotlin.Boolean origin=null
            ARG <this>: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.atomicBooleanArrUpdateTest' type=<root>.ArrayLoopTest origin=IMPLICIT_ARGUMENT
        CALL 'private final fun update$atomicfu$ATOMIC_ARRAY$Boolean (handler$atomicfu: kotlin.concurrent.AtomicIntArray, index$atomicfu: kotlin.Int, action$atomicfu: kotlin.Function1<kotlin.Boolean, kotlin.Boolean>): kotlin.Unit declared in <root>.ArrayLoopTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.atomicBooleanArrUpdateTest' type=<root>.ArrayLoopTest origin=null
          ARG handler$atomicfu: CALL 'private final fun <get-boolArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.ArrayLoopTest' type=kotlin.concurrent.AtomicIntArray origin=null
            ARG <this>: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.atomicBooleanArrUpdateTest' type=<root>.ArrayLoopTest origin=IMPLICIT_ARGUMENT
          ARG index$atomicfu: CONST Int type=kotlin.Int value=5
          ARG action$atomicfu: FUN_EXPR type=kotlin.Function1<kotlin.Boolean, kotlin.Boolean> origin=LAMBDA
            FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Boolean
              VALUE_PARAMETER kind:Regular name:it index:0 type:kotlin.Boolean
              BLOCK_BODY
                RETURN type=kotlin.Nothing from='local final fun <anonymous> (it: kotlin.Boolean): kotlin.Boolean declared in <root>.ArrayLoopTest.atomicBooleanArrUpdateTest'
                  CONST Boolean type=kotlin.Boolean value=true
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Boolean
          ARG expected: CONST Boolean type=kotlin.Boolean value=true
          ARG actual: TYPE_OP type=kotlin.Boolean origin=CAST typeOperand=kotlin.Boolean
            CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
              ARG arg0: CALL 'public final fun get (index: kotlin.Int): kotlin.Int declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Int origin=null
                ARG <this>: CALL 'private final fun <get-boolArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.ArrayLoopTest' type=kotlin.concurrent.AtomicIntArray origin=null
                  ARG <this>: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.atomicBooleanArrUpdateTest' type=<root>.ArrayLoopTest origin=IMPLICIT_ARGUMENT
                ARG index: CONST Int type=kotlin.Int value=5
              ARG arg1: CONST Int type=kotlin.Int value=1
        CALL 'public final fun assertTrue (actual: kotlin.Boolean, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          ARG actual: TYPE_OP type=kotlin.Boolean origin=CAST typeOperand=kotlin.Boolean
            CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
              ARG arg0: CALL 'public final fun get (index: kotlin.Int): kotlin.Int declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Int origin=null
                ARG <this>: CALL 'private final fun <get-boolArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.ArrayLoopTest' type=kotlin.concurrent.AtomicIntArray origin=null
                  ARG <this>: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.atomicBooleanArrUpdateTest' type=<root>.ArrayLoopTest origin=IMPLICIT_ARGUMENT
                ARG index: CONST Int type=kotlin.Int value=5
              ARG arg1: CONST Int type=kotlin.Int value=1
        CALL 'public final fun assertFalse (actual: kotlin.Boolean, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          ARG actual: CALL 'private final fun updateAndGet$atomicfu$ATOMIC_ARRAY$Boolean (handler$atomicfu: kotlin.concurrent.AtomicIntArray, index$atomicfu: kotlin.Int, action$atomicfu: kotlin.Function1<kotlin.Boolean, kotlin.Boolean>): kotlin.Boolean declared in <root>.ArrayLoopTest' type=kotlin.Boolean origin=null
            ARG <this>: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.atomicBooleanArrUpdateTest' type=<root>.ArrayLoopTest origin=null
            ARG handler$atomicfu: CALL 'private final fun <get-boolArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.ArrayLoopTest' type=kotlin.concurrent.AtomicIntArray origin=null
              ARG <this>: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.atomicBooleanArrUpdateTest' type=<root>.ArrayLoopTest origin=IMPLICIT_ARGUMENT
            ARG index$atomicfu: CONST Int type=kotlin.Int value=5
            ARG action$atomicfu: FUN_EXPR type=kotlin.Function1<kotlin.Boolean, kotlin.Boolean> origin=LAMBDA
              FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Boolean
                VALUE_PARAMETER kind:Regular name:it index:0 type:kotlin.Boolean
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='local final fun <anonymous> (it: kotlin.Boolean): kotlin.Boolean declared in <root>.ArrayLoopTest.atomicBooleanArrUpdateTest'
                    CONST Boolean type=kotlin.Boolean value=false
        CALL 'public final fun assertFalse (actual: kotlin.Boolean, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          ARG actual: TYPE_OP type=kotlin.Boolean origin=CAST typeOperand=kotlin.Boolean
            CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
              ARG arg0: CALL 'public final fun get (index: kotlin.Int): kotlin.Int declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Int origin=null
                ARG <this>: CALL 'private final fun <get-boolArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.ArrayLoopTest' type=kotlin.concurrent.AtomicIntArray origin=null
                  ARG <this>: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.atomicBooleanArrUpdateTest' type=<root>.ArrayLoopTest origin=IMPLICIT_ARGUMENT
                ARG index: CONST Int type=kotlin.Int value=5
              ARG arg1: CONST Int type=kotlin.Int value=1
        CALL 'public final fun set (index: kotlin.Int, newValue: kotlin.Int): kotlin.Unit declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Unit origin=null
          ARG <this>: CALL 'private final fun <get-boolArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.ArrayLoopTest' type=kotlin.concurrent.AtomicIntArray origin=null
            ARG <this>: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.atomicBooleanArrUpdateTest' type=<root>.ArrayLoopTest origin=IMPLICIT_ARGUMENT
          ARG index: CONST Int type=kotlin.Int value=5
          ARG newValue: WHEN type=kotlin.Int origin=null
            BRANCH
              if: CONST Boolean type=kotlin.Boolean value=false
              then: CONST Int type=kotlin.Int value=1
            BRANCH
              if: CONST Boolean type=kotlin.Boolean value=true
              then: CONST Int type=kotlin.Int value=0
        CALL 'public final fun assertFalse (actual: kotlin.Boolean, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          ARG actual: CALL 'private final fun getAndUpdate$atomicfu$ATOMIC_ARRAY$Boolean (handler$atomicfu: kotlin.concurrent.AtomicIntArray, index$atomicfu: kotlin.Int, action$atomicfu: kotlin.Function1<kotlin.Boolean, kotlin.Boolean>): kotlin.Boolean declared in <root>.ArrayLoopTest' type=kotlin.Boolean origin=null
            ARG <this>: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.atomicBooleanArrUpdateTest' type=<root>.ArrayLoopTest origin=null
            ARG handler$atomicfu: CALL 'private final fun <get-boolArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.ArrayLoopTest' type=kotlin.concurrent.AtomicIntArray origin=null
              ARG <this>: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.atomicBooleanArrUpdateTest' type=<root>.ArrayLoopTest origin=IMPLICIT_ARGUMENT
            ARG index$atomicfu: CONST Int type=kotlin.Int value=5
            ARG action$atomicfu: FUN_EXPR type=kotlin.Function1<kotlin.Boolean, kotlin.Boolean> origin=LAMBDA
              FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Boolean
                VALUE_PARAMETER kind:Regular name:it index:0 type:kotlin.Boolean
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='local final fun <anonymous> (it: kotlin.Boolean): kotlin.Boolean declared in <root>.ArrayLoopTest.atomicBooleanArrUpdateTest'
                    CONST Boolean type=kotlin.Boolean value=true
        CALL 'public final fun assertTrue (actual: kotlin.Boolean, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          ARG actual: TYPE_OP type=kotlin.Boolean origin=CAST typeOperand=kotlin.Boolean
            CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
              ARG arg0: CALL 'public final fun get (index: kotlin.Int): kotlin.Int declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Int origin=null
                ARG <this>: CALL 'private final fun <get-boolArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.ArrayLoopTest' type=kotlin.concurrent.AtomicIntArray origin=null
                  ARG <this>: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.atomicBooleanArrUpdateTest' type=<root>.ArrayLoopTest origin=IMPLICIT_ARGUMENT
                ARG index: CONST Int type=kotlin.Int value=5
              ARG arg1: CONST Int type=kotlin.Int value=1
        CALL 'public final fun assertTrue (actual: kotlin.Boolean, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          ARG actual: CALL 'private final fun getAndUpdate$atomicfu$ATOMIC_ARRAY$Boolean (handler$atomicfu: kotlin.concurrent.AtomicIntArray, index$atomicfu: kotlin.Int, action$atomicfu: kotlin.Function1<kotlin.Boolean, kotlin.Boolean>): kotlin.Boolean declared in <root>.ArrayLoopTest' type=kotlin.Boolean origin=null
            ARG <this>: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.atomicBooleanArrUpdateTest' type=<root>.ArrayLoopTest origin=null
            ARG handler$atomicfu: CALL 'private final fun <get-boolArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.ArrayLoopTest' type=kotlin.concurrent.AtomicIntArray origin=null
              ARG <this>: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.atomicBooleanArrUpdateTest' type=<root>.ArrayLoopTest origin=IMPLICIT_ARGUMENT
            ARG index$atomicfu: CONST Int type=kotlin.Int value=5
            ARG action$atomicfu: FUN_EXPR type=kotlin.Function1<kotlin.Boolean, kotlin.Boolean> origin=LAMBDA
              FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Boolean
                VALUE_PARAMETER kind:Regular name:cur index:0 type:kotlin.Boolean
                BLOCK_BODY
                  CALL 'public final fun assertTrue (actual: kotlin.Boolean, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
                    ARG actual: GET_VAR 'cur: kotlin.Boolean declared in <root>.ArrayLoopTest.atomicBooleanArrUpdateTest.<anonymous>' type=kotlin.Boolean origin=null
                  RETURN type=kotlin.Nothing from='local final fun <anonymous> (cur: kotlin.Boolean): kotlin.Boolean declared in <root>.ArrayLoopTest.atomicBooleanArrUpdateTest'
                    CONST Boolean type=kotlin.Boolean value=false
        CALL 'public final fun assertFalse (actual: kotlin.Boolean, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          ARG actual: TYPE_OP type=kotlin.Boolean origin=CAST typeOperand=kotlin.Boolean
            CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
              ARG arg0: CALL 'public final fun get (index: kotlin.Int): kotlin.Int declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Int origin=null
                ARG <this>: CALL 'private final fun <get-boolArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.ArrayLoopTest' type=kotlin.concurrent.AtomicIntArray origin=null
                  ARG <this>: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.atomicBooleanArrUpdateTest' type=<root>.ArrayLoopTest origin=IMPLICIT_ARGUMENT
                ARG index: CONST Int type=kotlin.Int value=5
              ARG arg1: CONST Int type=kotlin.Int value=1
    FUN name:atomicIntArrLoopTest visibility:public modality:FINAL returnType:kotlin.Int
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.ArrayLoopTest
      BLOCK_BODY
        CALL 'public final fun set (index: kotlin.Int, newValue: kotlin.Int): kotlin.Unit declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Unit origin=null
          ARG <this>: CALL 'private final fun <get-intArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.ArrayLoopTest' type=kotlin.concurrent.AtomicIntArray origin=null
            ARG <this>: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.atomicIntArrLoopTest' type=<root>.ArrayLoopTest origin=IMPLICIT_ARGUMENT
          ARG index: CONST Int type=kotlin.Int value=0
          ARG newValue: CONST Int type=kotlin.Int value=0
        CALL 'private final fun loop$atomicfu$ATOMIC_ARRAY$Int (handler$atomicfu: kotlin.concurrent.AtomicIntArray, index$atomicfu: kotlin.Int, action$atomicfu: kotlin.Function1<kotlin.Int, kotlin.Unit>): kotlin.Unit declared in <root>.ArrayLoopTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.atomicIntArrLoopTest' type=<root>.ArrayLoopTest origin=null
          ARG handler$atomicfu: CALL 'private final fun <get-intArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.ArrayLoopTest' type=kotlin.concurrent.AtomicIntArray origin=null
            ARG <this>: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.atomicIntArrLoopTest' type=<root>.ArrayLoopTest origin=IMPLICIT_ARGUMENT
          ARG index$atomicfu: CONST Int type=kotlin.Int value=0
          ARG action$atomicfu: FUN_EXPR type=kotlin.Function1<kotlin.Int, kotlin.Unit> origin=LAMBDA
            FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Unit
              VALUE_PARAMETER kind:Regular name:value index:0 type:kotlin.Int
              BLOCK_BODY
                WHEN type=kotlin.Unit origin=IF
                  BRANCH
                    if: CALL 'public final fun compareAndSet (index: kotlin.Int, expectedValue: kotlin.Int, newValue: kotlin.Int): kotlin.Boolean declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Boolean origin=null
                      ARG <this>: CALL 'private final fun <get-intArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.ArrayLoopTest' type=kotlin.concurrent.AtomicIntArray origin=null
                        ARG <this>: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.atomicIntArrLoopTest' type=<root>.ArrayLoopTest origin=IMPLICIT_ARGUMENT
                      ARG index: CONST Int type=kotlin.Int value=0
                      ARG expectedValue: GET_VAR 'value: kotlin.Int declared in <root>.ArrayLoopTest.atomicIntArrLoopTest.<anonymous>' type=kotlin.Int origin=null
                      ARG newValue: CALL 'public final fun plus (other: kotlin.Int): kotlin.Int declared in kotlin.Int' type=kotlin.Int origin=PLUS
                        ARG <this>: GET_VAR 'value: kotlin.Int declared in <root>.ArrayLoopTest.atomicIntArrLoopTest.<anonymous>' type=kotlin.Int origin=null
                        ARG other: CONST Int type=kotlin.Int value=10
                    then: BLOCK type=kotlin.Unit origin=null
                      CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
                        TYPE_ARG T: kotlin.Int
                        ARG expected: CALL 'public final fun plus (other: kotlin.Int): kotlin.Int declared in kotlin.Int' type=kotlin.Int origin=PLUS
                          ARG <this>: GET_VAR 'value: kotlin.Int declared in <root>.ArrayLoopTest.atomicIntArrLoopTest.<anonymous>' type=kotlin.Int origin=null
                          ARG other: CONST Int type=kotlin.Int value=10
                        ARG actual: TYPE_OP type=kotlin.Int origin=CAST typeOperand=kotlin.Int
                          CALL 'public final fun get (index: kotlin.Int): kotlin.Int declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Int origin=null
                            ARG <this>: CALL 'private final fun <get-intArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.ArrayLoopTest' type=kotlin.concurrent.AtomicIntArray origin=null
                              ARG <this>: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.atomicIntArrLoopTest' type=<root>.ArrayLoopTest origin=IMPLICIT_ARGUMENT
                            ARG index: CONST Int type=kotlin.Int value=0
                      RETURN type=kotlin.Nothing from='public final fun atomicIntArrLoopTest (): kotlin.Int declared in <root>.ArrayLoopTest'
                        TYPE_OP type=kotlin.Int origin=CAST typeOperand=kotlin.Int
                          CALL 'public final fun get (index: kotlin.Int): kotlin.Int declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Int origin=null
                            ARG <this>: CALL 'private final fun <get-intArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.ArrayLoopTest' type=kotlin.concurrent.AtomicIntArray origin=null
                              ARG <this>: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.atomicIntArrLoopTest' type=<root>.ArrayLoopTest origin=IMPLICIT_ARGUMENT
                            ARG index: CONST Int type=kotlin.Int value=0
    FUN name:atomicIntArrUpdateTest visibility:public modality:FINAL returnType:kotlin.Unit
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.ArrayLoopTest
      BLOCK_BODY
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Int
          ARG expected: CONST Int type=kotlin.Int value=10
          ARG actual: CALL 'public final fun atomicIntArrLoopTest (): kotlin.Int declared in <root>.ArrayLoopTest' type=kotlin.Int origin=null
            ARG <this>: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.atomicIntArrUpdateTest' type=<root>.ArrayLoopTest origin=IMPLICIT_ARGUMENT
        CALL 'public final fun set (index: kotlin.Int, newValue: kotlin.Int): kotlin.Unit declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Unit origin=null
          ARG <this>: CALL 'private final fun <get-intArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.ArrayLoopTest' type=kotlin.concurrent.AtomicIntArray origin=null
            ARG <this>: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.atomicIntArrUpdateTest' type=<root>.ArrayLoopTest origin=IMPLICIT_ARGUMENT
          ARG index: CONST Int type=kotlin.Int value=5
          ARG newValue: CONST Int type=kotlin.Int value=10
        CALL 'private final fun update$atomicfu$ATOMIC_ARRAY$Int (handler$atomicfu: kotlin.concurrent.AtomicIntArray, index$atomicfu: kotlin.Int, action$atomicfu: kotlin.Function1<kotlin.Int, kotlin.Int>): kotlin.Unit declared in <root>.ArrayLoopTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.atomicIntArrUpdateTest' type=<root>.ArrayLoopTest origin=null
          ARG handler$atomicfu: CALL 'private final fun <get-intArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.ArrayLoopTest' type=kotlin.concurrent.AtomicIntArray origin=null
            ARG <this>: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.atomicIntArrUpdateTest' type=<root>.ArrayLoopTest origin=IMPLICIT_ARGUMENT
          ARG index$atomicfu: CONST Int type=kotlin.Int value=5
          ARG action$atomicfu: FUN_EXPR type=kotlin.Function1<kotlin.Int, kotlin.Int> origin=LAMBDA
            FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Int
              VALUE_PARAMETER kind:Regular name:value index:0 type:kotlin.Int
              BLOCK_BODY
                VAR name:newValue type:kotlin.Int [val]
                  CALL 'public final fun plus (other: kotlin.Int): kotlin.Int declared in kotlin.Int' type=kotlin.Int origin=PLUS
                    ARG <this>: GET_VAR 'value: kotlin.Int declared in <root>.ArrayLoopTest.atomicIntArrUpdateTest.<anonymous>' type=kotlin.Int origin=null
                    ARG other: CONST Int type=kotlin.Int value=1000
                RETURN type=kotlin.Nothing from='local final fun <anonymous> (value: kotlin.Int): kotlin.Int declared in <root>.ArrayLoopTest.atomicIntArrUpdateTest'
                  WHEN type=kotlin.Int origin=IF
                    BRANCH
                      if: CALL 'public final fun greaterOrEqual (arg0: kotlin.Int, arg1: kotlin.Int): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=GTEQ
                        ARG arg0: GET_VAR 'val newValue: kotlin.Int declared in <root>.ArrayLoopTest.atomicIntArrUpdateTest.<anonymous>' type=kotlin.Int origin=null
                        ARG arg1: CONST Int type=kotlin.Int value=0
                      then: CONST Int type=kotlin.Int value=2147483647
                    BRANCH
                      if: CONST Boolean type=kotlin.Boolean value=true
                      then: GET_VAR 'val newValue: kotlin.Int declared in <root>.ArrayLoopTest.atomicIntArrUpdateTest.<anonymous>' type=kotlin.Int origin=null
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Int
          ARG expected: CONST Int type=kotlin.Int value=2147483647
          ARG actual: TYPE_OP type=kotlin.Int origin=CAST typeOperand=kotlin.Int
            CALL 'public final fun get (index: kotlin.Int): kotlin.Int declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Int origin=null
              ARG <this>: CALL 'private final fun <get-intArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.ArrayLoopTest' type=kotlin.concurrent.AtomicIntArray origin=null
                ARG <this>: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.atomicIntArrUpdateTest' type=<root>.ArrayLoopTest origin=IMPLICIT_ARGUMENT
              ARG index: CONST Int type=kotlin.Int value=5
        CALL 'public final fun set (index: kotlin.Int, newValue: kotlin.Int): kotlin.Unit declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Unit origin=null
          ARG <this>: CALL 'private final fun <get-intArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.ArrayLoopTest' type=kotlin.concurrent.AtomicIntArray origin=null
            ARG <this>: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.atomicIntArrUpdateTest' type=<root>.ArrayLoopTest origin=IMPLICIT_ARGUMENT
          ARG index: CONST Int type=kotlin.Int value=6
          ARG newValue: CONST Int type=kotlin.Int value=10
        VAR name:res1 type:kotlin.Int [val]
          CALL 'private final fun updateAndGet$atomicfu$ATOMIC_ARRAY$Int (handler$atomicfu: kotlin.concurrent.AtomicIntArray, index$atomicfu: kotlin.Int, action$atomicfu: kotlin.Function1<kotlin.Int, kotlin.Int>): kotlin.Int declared in <root>.ArrayLoopTest' type=kotlin.Int origin=null
            ARG <this>: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.atomicIntArrUpdateTest' type=<root>.ArrayLoopTest origin=null
            ARG handler$atomicfu: CALL 'private final fun <get-intArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.ArrayLoopTest' type=kotlin.concurrent.AtomicIntArray origin=null
              ARG <this>: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.atomicIntArrUpdateTest' type=<root>.ArrayLoopTest origin=IMPLICIT_ARGUMENT
            ARG index$atomicfu: CONST Int type=kotlin.Int value=6
            ARG action$atomicfu: FUN_EXPR type=kotlin.Function1<kotlin.Int, kotlin.Int> origin=LAMBDA
              FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Int
                VALUE_PARAMETER kind:Regular name:value index:0 type:kotlin.Int
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='local final fun <anonymous> (value: kotlin.Int): kotlin.Int declared in <root>.ArrayLoopTest.atomicIntArrUpdateTest'
                    WHEN type=kotlin.Int origin=IF
                      BRANCH
                        if: CALL 'public final fun greaterOrEqual (arg0: kotlin.Int, arg1: kotlin.Int): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=GTEQ
                          ARG arg0: GET_VAR 'value: kotlin.Int declared in <root>.ArrayLoopTest.atomicIntArrUpdateTest.<anonymous>' type=kotlin.Int origin=null
                          ARG arg1: CONST Int type=kotlin.Int value=0
                        then: CONST Int type=kotlin.Int value=2147483647
                      BRANCH
                        if: CONST Boolean type=kotlin.Boolean value=true
                        then: GET_VAR 'value: kotlin.Int declared in <root>.ArrayLoopTest.atomicIntArrUpdateTest.<anonymous>' type=kotlin.Int origin=null
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Int
          ARG expected: CONST Int type=kotlin.Int value=2147483647
          ARG actual: GET_VAR 'val res1: kotlin.Int declared in <root>.ArrayLoopTest.atomicIntArrUpdateTest' type=kotlin.Int origin=null
        CALL 'public final fun set (index: kotlin.Int, newValue: kotlin.Int): kotlin.Unit declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Unit origin=null
          ARG <this>: CALL 'private final fun <get-intArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.ArrayLoopTest' type=kotlin.concurrent.AtomicIntArray origin=null
            ARG <this>: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.atomicIntArrUpdateTest' type=<root>.ArrayLoopTest origin=IMPLICIT_ARGUMENT
          ARG index: CONST Int type=kotlin.Int value=7
          ARG newValue: CONST Int type=kotlin.Int value=50
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Int
          ARG expected: CONST Int type=kotlin.Int value=50
          ARG actual: CALL 'private final fun getAndUpdate$atomicfu$ATOMIC_ARRAY$Int (handler$atomicfu: kotlin.concurrent.AtomicIntArray, index$atomicfu: kotlin.Int, action$atomicfu: kotlin.Function1<kotlin.Int, kotlin.Int>): kotlin.Int declared in <root>.ArrayLoopTest' type=kotlin.Int origin=null
            ARG <this>: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.atomicIntArrUpdateTest' type=<root>.ArrayLoopTest origin=null
            ARG handler$atomicfu: CALL 'private final fun <get-intArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.ArrayLoopTest' type=kotlin.concurrent.AtomicIntArray origin=null
              ARG <this>: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.atomicIntArrUpdateTest' type=<root>.ArrayLoopTest origin=IMPLICIT_ARGUMENT
            ARG index$atomicfu: CONST Int type=kotlin.Int value=7
            ARG action$atomicfu: FUN_EXPR type=kotlin.Function1<kotlin.Int, kotlin.Int> origin=LAMBDA
              FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Int
                VALUE_PARAMETER kind:Regular name:value index:0 type:kotlin.Int
                BLOCK_BODY
                  CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
                    TYPE_ARG T: kotlin.Int
                    ARG expected: CONST Int type=kotlin.Int value=50
                    ARG actual: GET_VAR 'value: kotlin.Int declared in <root>.ArrayLoopTest.atomicIntArrUpdateTest.<anonymous>' type=kotlin.Int origin=null
                  RETURN type=kotlin.Nothing from='local final fun <anonymous> (value: kotlin.Int): kotlin.Int declared in <root>.ArrayLoopTest.atomicIntArrUpdateTest'
                    WHEN type=kotlin.Int origin=IF
                      BRANCH
                        if: CALL 'public final fun greaterOrEqual (arg0: kotlin.Int, arg1: kotlin.Int): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=GTEQ
                          ARG arg0: GET_VAR 'value: kotlin.Int declared in <root>.ArrayLoopTest.atomicIntArrUpdateTest.<anonymous>' type=kotlin.Int origin=null
                          ARG arg1: CONST Int type=kotlin.Int value=0
                        then: CONST Int type=kotlin.Int value=2147483647
                      BRANCH
                        if: CONST Boolean type=kotlin.Boolean value=true
                        then: GET_VAR 'value: kotlin.Int declared in <root>.ArrayLoopTest.atomicIntArrUpdateTest.<anonymous>' type=kotlin.Int origin=null
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Int
          ARG expected: CONST Int type=kotlin.Int value=2147483647
          ARG actual: TYPE_OP type=kotlin.Int origin=CAST typeOperand=kotlin.Int
            CALL 'public final fun get (index: kotlin.Int): kotlin.Int declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Int origin=null
              ARG <this>: CALL 'private final fun <get-intArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.ArrayLoopTest' type=kotlin.concurrent.AtomicIntArray origin=null
                ARG <this>: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.atomicIntArrUpdateTest' type=<root>.ArrayLoopTest origin=IMPLICIT_ARGUMENT
              ARG index: CONST Int type=kotlin.Int value=7
    FUN name:atomicLongArrLoopTest visibility:public modality:FINAL returnType:kotlin.Long
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.ArrayLoopTest
      BLOCK_BODY
        CALL 'public final fun set (index: kotlin.Int, newValue: kotlin.Long): kotlin.Unit declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Unit origin=null
          ARG <this>: CALL 'private final fun <get-longArr> (): kotlin.concurrent.AtomicLongArray declared in <root>.ArrayLoopTest' type=kotlin.concurrent.AtomicLongArray origin=null
            ARG <this>: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.atomicLongArrLoopTest' type=<root>.ArrayLoopTest origin=IMPLICIT_ARGUMENT
          ARG index: CONST Int type=kotlin.Int value=0
          ARG newValue: CONST Long type=kotlin.Long value=0
        CALL 'private final fun loop$atomicfu$ATOMIC_ARRAY$Long (handler$atomicfu: kotlin.concurrent.AtomicLongArray, index$atomicfu: kotlin.Int, action$atomicfu: kotlin.Function1<kotlin.Long, kotlin.Unit>): kotlin.Unit declared in <root>.ArrayLoopTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.atomicLongArrLoopTest' type=<root>.ArrayLoopTest origin=null
          ARG handler$atomicfu: CALL 'private final fun <get-longArr> (): kotlin.concurrent.AtomicLongArray declared in <root>.ArrayLoopTest' type=kotlin.concurrent.AtomicLongArray origin=null
            ARG <this>: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.atomicLongArrLoopTest' type=<root>.ArrayLoopTest origin=IMPLICIT_ARGUMENT
          ARG index$atomicfu: CONST Int type=kotlin.Int value=0
          ARG action$atomicfu: FUN_EXPR type=kotlin.Function1<kotlin.Long, kotlin.Unit> origin=LAMBDA
            FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Unit
              VALUE_PARAMETER kind:Regular name:value index:0 type:kotlin.Long
              BLOCK_BODY
                WHEN type=kotlin.Unit origin=IF
                  BRANCH
                    if: CALL 'public final fun compareAndSet (index: kotlin.Int, expectedValue: kotlin.Long, newValue: kotlin.Long): kotlin.Boolean declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Boolean origin=null
                      ARG <this>: CALL 'private final fun <get-longArr> (): kotlin.concurrent.AtomicLongArray declared in <root>.ArrayLoopTest' type=kotlin.concurrent.AtomicLongArray origin=null
                        ARG <this>: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.atomicLongArrLoopTest' type=<root>.ArrayLoopTest origin=IMPLICIT_ARGUMENT
                      ARG index: CONST Int type=kotlin.Int value=0
                      ARG expectedValue: GET_VAR 'value: kotlin.Long declared in <root>.ArrayLoopTest.atomicLongArrLoopTest.<anonymous>' type=kotlin.Long origin=null
                      ARG newValue: CALL 'public final fun plus (other: kotlin.Int): kotlin.Long declared in kotlin.Long' type=kotlin.Long origin=PLUS
                        ARG <this>: GET_VAR 'value: kotlin.Long declared in <root>.ArrayLoopTest.atomicLongArrLoopTest.<anonymous>' type=kotlin.Long origin=null
                        ARG other: CONST Int type=kotlin.Int value=10
                    then: BLOCK type=kotlin.Unit origin=null
                      CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
                        TYPE_ARG T: kotlin.Long
                        ARG expected: CALL 'public final fun plus (other: kotlin.Int): kotlin.Long declared in kotlin.Long' type=kotlin.Long origin=PLUS
                          ARG <this>: GET_VAR 'value: kotlin.Long declared in <root>.ArrayLoopTest.atomicLongArrLoopTest.<anonymous>' type=kotlin.Long origin=null
                          ARG other: CONST Int type=kotlin.Int value=10
                        ARG actual: TYPE_OP type=kotlin.Long origin=CAST typeOperand=kotlin.Long
                          CALL 'public final fun get (index: kotlin.Int): kotlin.Long declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Long origin=null
                            ARG <this>: CALL 'private final fun <get-longArr> (): kotlin.concurrent.AtomicLongArray declared in <root>.ArrayLoopTest' type=kotlin.concurrent.AtomicLongArray origin=null
                              ARG <this>: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.atomicLongArrLoopTest' type=<root>.ArrayLoopTest origin=IMPLICIT_ARGUMENT
                            ARG index: CONST Int type=kotlin.Int value=0
                      RETURN type=kotlin.Nothing from='public final fun atomicLongArrLoopTest (): kotlin.Long declared in <root>.ArrayLoopTest'
                        TYPE_OP type=kotlin.Long origin=CAST typeOperand=kotlin.Long
                          CALL 'public final fun get (index: kotlin.Int): kotlin.Long declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Long origin=null
                            ARG <this>: CALL 'private final fun <get-longArr> (): kotlin.concurrent.AtomicLongArray declared in <root>.ArrayLoopTest' type=kotlin.concurrent.AtomicLongArray origin=null
                              ARG <this>: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.atomicLongArrLoopTest' type=<root>.ArrayLoopTest origin=IMPLICIT_ARGUMENT
                            ARG index: CONST Int type=kotlin.Int value=0
    FUN name:atomicLongArrUpdateTest visibility:public modality:FINAL returnType:kotlin.Unit
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.ArrayLoopTest
      BLOCK_BODY
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Long
          ARG expected: CONST Long type=kotlin.Long value=10
          ARG actual: CALL 'public final fun atomicLongArrLoopTest (): kotlin.Long declared in <root>.ArrayLoopTest' type=kotlin.Long origin=null
            ARG <this>: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.atomicLongArrUpdateTest' type=<root>.ArrayLoopTest origin=IMPLICIT_ARGUMENT
        CALL 'public final fun set (index: kotlin.Int, newValue: kotlin.Long): kotlin.Unit declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Unit origin=null
          ARG <this>: CALL 'private final fun <get-longArr> (): kotlin.concurrent.AtomicLongArray declared in <root>.ArrayLoopTest' type=kotlin.concurrent.AtomicLongArray origin=null
            ARG <this>: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.atomicLongArrUpdateTest' type=<root>.ArrayLoopTest origin=IMPLICIT_ARGUMENT
          ARG index: CONST Int type=kotlin.Int value=5
          ARG newValue: CONST Long type=kotlin.Long value=0
        CALL 'private final fun update$atomicfu$ATOMIC_ARRAY$Long (handler$atomicfu: kotlin.concurrent.AtomicLongArray, index$atomicfu: kotlin.Int, action$atomicfu: kotlin.Function1<kotlin.Long, kotlin.Long>): kotlin.Unit declared in <root>.ArrayLoopTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.atomicLongArrUpdateTest' type=<root>.ArrayLoopTest origin=null
          ARG handler$atomicfu: CALL 'private final fun <get-longArr> (): kotlin.concurrent.AtomicLongArray declared in <root>.ArrayLoopTest' type=kotlin.concurrent.AtomicLongArray origin=null
            ARG <this>: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.atomicLongArrUpdateTest' type=<root>.ArrayLoopTest origin=IMPLICIT_ARGUMENT
          ARG index$atomicfu: CONST Int type=kotlin.Int value=5
          ARG action$atomicfu: FUN_EXPR type=kotlin.Function1<kotlin.Long, kotlin.Long> origin=LAMBDA
            FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Long
              VALUE_PARAMETER kind:Regular name:cur index:0 type:kotlin.Long
              BLOCK_BODY
                VAR name:newValue type:kotlin.Long [val]
                  CALL 'public final fun plus (other: kotlin.Int): kotlin.Long declared in kotlin.Long' type=kotlin.Long origin=PLUS
                    ARG <this>: GET_VAR 'cur: kotlin.Long declared in <root>.ArrayLoopTest.atomicLongArrUpdateTest.<anonymous>' type=kotlin.Long origin=null
                    ARG other: CONST Int type=kotlin.Int value=1000
                RETURN type=kotlin.Nothing from='local final fun <anonymous> (cur: kotlin.Long): kotlin.Long declared in <root>.ArrayLoopTest.atomicLongArrUpdateTest'
                  WHEN type=kotlin.Long origin=IF
                    BRANCH
                      if: CALL 'public final fun greaterOrEqual (arg0: kotlin.Long, arg1: kotlin.Long): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=GTEQ
                        ARG arg0: GET_VAR 'val newValue: kotlin.Long declared in <root>.ArrayLoopTest.atomicLongArrUpdateTest.<anonymous>' type=kotlin.Long origin=null
                        ARG arg1: CONST Long type=kotlin.Long value=0
                      then: CONST Long type=kotlin.Long value=9223372036854775807
                    BRANCH
                      if: CONST Boolean type=kotlin.Boolean value=true
                      then: GET_VAR 'val newValue: kotlin.Long declared in <root>.ArrayLoopTest.atomicLongArrUpdateTest.<anonymous>' type=kotlin.Long origin=null
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Long
          ARG expected: CONST Long type=kotlin.Long value=9223372036854775807
          ARG actual: TYPE_OP type=kotlin.Long origin=CAST typeOperand=kotlin.Long
            CALL 'public final fun get (index: kotlin.Int): kotlin.Long declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Long origin=null
              ARG <this>: CALL 'private final fun <get-longArr> (): kotlin.concurrent.AtomicLongArray declared in <root>.ArrayLoopTest' type=kotlin.concurrent.AtomicLongArray origin=null
                ARG <this>: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.atomicLongArrUpdateTest' type=<root>.ArrayLoopTest origin=IMPLICIT_ARGUMENT
              ARG index: CONST Int type=kotlin.Int value=5
        CALL 'public final fun set (index: kotlin.Int, newValue: kotlin.Long): kotlin.Unit declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Unit origin=null
          ARG <this>: CALL 'private final fun <get-longArr> (): kotlin.concurrent.AtomicLongArray declared in <root>.ArrayLoopTest' type=kotlin.concurrent.AtomicLongArray origin=null
            ARG <this>: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.atomicLongArrUpdateTest' type=<root>.ArrayLoopTest origin=IMPLICIT_ARGUMENT
          ARG index: CONST Int type=kotlin.Int value=6
          ARG newValue: CONST Long type=kotlin.Long value=10
        VAR name:res2 type:kotlin.Long [val]
          CALL 'private final fun updateAndGet$atomicfu$ATOMIC_ARRAY$Long (handler$atomicfu: kotlin.concurrent.AtomicLongArray, index$atomicfu: kotlin.Int, action$atomicfu: kotlin.Function1<kotlin.Long, kotlin.Long>): kotlin.Long declared in <root>.ArrayLoopTest' type=kotlin.Long origin=null
            ARG <this>: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.atomicLongArrUpdateTest' type=<root>.ArrayLoopTest origin=null
            ARG handler$atomicfu: CALL 'private final fun <get-longArr> (): kotlin.concurrent.AtomicLongArray declared in <root>.ArrayLoopTest' type=kotlin.concurrent.AtomicLongArray origin=null
              ARG <this>: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.atomicLongArrUpdateTest' type=<root>.ArrayLoopTest origin=IMPLICIT_ARGUMENT
            ARG index$atomicfu: CONST Int type=kotlin.Int value=6
            ARG action$atomicfu: FUN_EXPR type=kotlin.Function1<kotlin.Long, kotlin.Long> origin=LAMBDA
              FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Long
                VALUE_PARAMETER kind:Regular name:cur index:0 type:kotlin.Long
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='local final fun <anonymous> (cur: kotlin.Long): kotlin.Long declared in <root>.ArrayLoopTest.atomicLongArrUpdateTest'
                    WHEN type=kotlin.Long origin=IF
                      BRANCH
                        if: CALL 'public final fun greaterOrEqual (arg0: kotlin.Long, arg1: kotlin.Long): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=GTEQ
                          ARG arg0: GET_VAR 'cur: kotlin.Long declared in <root>.ArrayLoopTest.atomicLongArrUpdateTest.<anonymous>' type=kotlin.Long origin=null
                          ARG arg1: CONST Long type=kotlin.Long value=0
                        then: CONST Long type=kotlin.Long value=9223372036854775807
                      BRANCH
                        if: CONST Boolean type=kotlin.Boolean value=true
                        then: GET_VAR 'cur: kotlin.Long declared in <root>.ArrayLoopTest.atomicLongArrUpdateTest.<anonymous>' type=kotlin.Long origin=null
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Long
          ARG expected: CONST Long type=kotlin.Long value=9223372036854775807
          ARG actual: GET_VAR 'val res2: kotlin.Long declared in <root>.ArrayLoopTest.atomicLongArrUpdateTest' type=kotlin.Long origin=null
        CALL 'public final fun set (index: kotlin.Int, newValue: kotlin.Long): kotlin.Unit declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Unit origin=null
          ARG <this>: CALL 'private final fun <get-longArr> (): kotlin.concurrent.AtomicLongArray declared in <root>.ArrayLoopTest' type=kotlin.concurrent.AtomicLongArray origin=null
            ARG <this>: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.atomicLongArrUpdateTest' type=<root>.ArrayLoopTest origin=IMPLICIT_ARGUMENT
          ARG index: CONST Int type=kotlin.Int value=7
          ARG newValue: CONST Long type=kotlin.Long value=50
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Long
          ARG expected: CONST Long type=kotlin.Long value=50
          ARG actual: CALL 'private final fun getAndUpdate$atomicfu$ATOMIC_ARRAY$Long (handler$atomicfu: kotlin.concurrent.AtomicLongArray, index$atomicfu: kotlin.Int, action$atomicfu: kotlin.Function1<kotlin.Long, kotlin.Long>): kotlin.Long declared in <root>.ArrayLoopTest' type=kotlin.Long origin=null
            ARG <this>: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.atomicLongArrUpdateTest' type=<root>.ArrayLoopTest origin=null
            ARG handler$atomicfu: CALL 'private final fun <get-longArr> (): kotlin.concurrent.AtomicLongArray declared in <root>.ArrayLoopTest' type=kotlin.concurrent.AtomicLongArray origin=null
              ARG <this>: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.atomicLongArrUpdateTest' type=<root>.ArrayLoopTest origin=IMPLICIT_ARGUMENT
            ARG index$atomicfu: CONST Int type=kotlin.Int value=7
            ARG action$atomicfu: FUN_EXPR type=kotlin.Function1<kotlin.Long, kotlin.Long> origin=LAMBDA
              FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Long
                VALUE_PARAMETER kind:Regular name:cur index:0 type:kotlin.Long
                BLOCK_BODY
                  CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
                    TYPE_ARG T: kotlin.Long
                    ARG expected: CONST Long type=kotlin.Long value=50
                    ARG actual: GET_VAR 'cur: kotlin.Long declared in <root>.ArrayLoopTest.atomicLongArrUpdateTest.<anonymous>' type=kotlin.Long origin=null
                  RETURN type=kotlin.Nothing from='local final fun <anonymous> (cur: kotlin.Long): kotlin.Long declared in <root>.ArrayLoopTest.atomicLongArrUpdateTest'
                    WHEN type=kotlin.Long origin=IF
                      BRANCH
                        if: CALL 'public final fun greaterOrEqual (arg0: kotlin.Long, arg1: kotlin.Long): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=GTEQ
                          ARG arg0: GET_VAR 'cur: kotlin.Long declared in <root>.ArrayLoopTest.atomicLongArrUpdateTest.<anonymous>' type=kotlin.Long origin=null
                          ARG arg1: CONST Long type=kotlin.Long value=0
                        then: CONST Long type=kotlin.Long value=9223372036854775807
                      BRANCH
                        if: CONST Boolean type=kotlin.Boolean value=true
                        then: GET_VAR 'cur: kotlin.Long declared in <root>.ArrayLoopTest.atomicLongArrUpdateTest.<anonymous>' type=kotlin.Long origin=null
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Long
          ARG expected: CONST Long type=kotlin.Long value=9223372036854775807
          ARG actual: TYPE_OP type=kotlin.Long origin=CAST typeOperand=kotlin.Long
            CALL 'public final fun get (index: kotlin.Int): kotlin.Long declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Long origin=null
              ARG <this>: CALL 'private final fun <get-longArr> (): kotlin.concurrent.AtomicLongArray declared in <root>.ArrayLoopTest' type=kotlin.concurrent.AtomicLongArray origin=null
                ARG <this>: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.atomicLongArrUpdateTest' type=<root>.ArrayLoopTest origin=IMPLICIT_ARGUMENT
              ARG index: CONST Int type=kotlin.Int value=7
    FUN name:atomicRefArrLoopTest visibility:public modality:FINAL returnType:<root>.ArrayLoopTest.Box?
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.ArrayLoopTest
      BLOCK_BODY
        CALL 'public final fun set (index: kotlin.Int, newValue: T of kotlin.concurrent.AtomicArray): kotlin.Unit declared in kotlin.concurrent.AtomicArray' type=kotlin.Unit origin=null
          ARG <this>: CALL 'private final fun <get-refArr> (): kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> declared in <root>.ArrayLoopTest' type=kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> origin=null
            ARG <this>: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.atomicRefArrLoopTest' type=<root>.ArrayLoopTest origin=IMPLICIT_ARGUMENT
          ARG index: CONST Int type=kotlin.Int value=0
          ARG newValue: CONSTRUCTOR_CALL 'public constructor <init> (n: kotlin.Int) declared in <root>.ArrayLoopTest.Box' type=<root>.ArrayLoopTest.Box origin=null
            ARG n: CONST Int type=kotlin.Int value=888
        CALL 'private final fun loop$atomicfu$ATOMIC_ARRAY$Any (handler$atomicfu: kotlin.concurrent.AtomicArray<kotlin.Any?>, index$atomicfu: kotlin.Int, action$atomicfu: kotlin.Function1<kotlin.Any?, kotlin.Unit>): kotlin.Unit declared in <root>.ArrayLoopTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.atomicRefArrLoopTest' type=<root>.ArrayLoopTest origin=null
          ARG handler$atomicfu: CALL 'private final fun <get-refArr> (): kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> declared in <root>.ArrayLoopTest' type=kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> origin=null
            ARG <this>: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.atomicRefArrLoopTest' type=<root>.ArrayLoopTest origin=IMPLICIT_ARGUMENT
          ARG index$atomicfu: CONST Int type=kotlin.Int value=0
          ARG action$atomicfu: FUN_EXPR type=kotlin.Function1<<root>.ArrayLoopTest.Box?, kotlin.Unit> origin=LAMBDA
            FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Unit
              VALUE_PARAMETER kind:Regular name:value index:0 type:<root>.ArrayLoopTest.Box?
              BLOCK_BODY
                WHEN type=kotlin.Unit origin=IF
                  BRANCH
                    if: CALL 'public final fun compareAndSet (index: kotlin.Int, expectedValue: T of kotlin.concurrent.AtomicArray, newValue: T of kotlin.concurrent.AtomicArray): kotlin.Boolean declared in kotlin.concurrent.AtomicArray' type=kotlin.Boolean origin=null
                      ARG <this>: CALL 'private final fun <get-refArr> (): kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> declared in <root>.ArrayLoopTest' type=kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> origin=null
                        ARG <this>: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.atomicRefArrLoopTest' type=<root>.ArrayLoopTest origin=IMPLICIT_ARGUMENT
                      ARG index: CONST Int type=kotlin.Int value=0
                      ARG expectedValue: GET_VAR 'value: <root>.ArrayLoopTest.Box? declared in <root>.ArrayLoopTest.atomicRefArrLoopTest.<anonymous>' type=<root>.ArrayLoopTest.Box? origin=null
                      ARG newValue: CONSTRUCTOR_CALL 'public constructor <init> (n: kotlin.Int) declared in <root>.ArrayLoopTest.Box' type=<root>.ArrayLoopTest.Box origin=null
                        ARG n: CONST Int type=kotlin.Int value=777
                    then: BLOCK type=kotlin.Unit origin=null
                      CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
                        TYPE_ARG T: kotlin.Int
                        ARG expected: CONST Int type=kotlin.Int value=777
                        ARG actual: CALL 'public final fun <get-n> (): kotlin.Int declared in <root>.ArrayLoopTest.Box' type=kotlin.Int origin=GET_PROPERTY
                          ARG <this>: CALL 'public final fun CHECK_NOT_NULL <T0> (arg0: T0 of kotlin.internal.ir.CHECK_NOT_NULL?): {T0 of kotlin.internal.ir.CHECK_NOT_NULL & Any} declared in kotlin.internal.ir' type=<root>.ArrayLoopTest.Box origin=EXCLEXCL
                            TYPE_ARG T0: <root>.ArrayLoopTest.Box
                            ARG arg0: TYPE_OP type=kotlin.Any? origin=CAST typeOperand=kotlin.Any?
                              CALL 'public final fun get (index: kotlin.Int): T of kotlin.concurrent.AtomicArray declared in kotlin.concurrent.AtomicArray' type=T of kotlin.concurrent.AtomicArray origin=null
                                ARG <this>: CALL 'private final fun <get-refArr> (): kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> declared in <root>.ArrayLoopTest' type=kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> origin=null
                                  ARG <this>: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.atomicRefArrLoopTest' type=<root>.ArrayLoopTest origin=IMPLICIT_ARGUMENT
                                ARG index: CONST Int type=kotlin.Int value=0
                      RETURN type=kotlin.Nothing from='public final fun atomicRefArrLoopTest (): <root>.ArrayLoopTest.Box? declared in <root>.ArrayLoopTest'
                        TYPE_OP type=kotlin.Any? origin=CAST typeOperand=kotlin.Any?
                          CALL 'public final fun get (index: kotlin.Int): T of kotlin.concurrent.AtomicArray declared in kotlin.concurrent.AtomicArray' type=T of kotlin.concurrent.AtomicArray origin=null
                            ARG <this>: CALL 'private final fun <get-refArr> (): kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> declared in <root>.ArrayLoopTest' type=kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> origin=null
                              ARG <this>: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.atomicRefArrLoopTest' type=<root>.ArrayLoopTest origin=IMPLICIT_ARGUMENT
                            ARG index: CONST Int type=kotlin.Int value=0
    FUN name:atomicRefArrUpdateTest visibility:public modality:FINAL returnType:kotlin.Unit
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.ArrayLoopTest
      BLOCK_BODY
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Int?
          ARG expected: CONST Int type=kotlin.Int value=777
          ARG actual: BLOCK type=kotlin.Int? origin=SAFE_CALL
            VAR IR_TEMPORARY_VARIABLE name:tmp_29 type:<root>.ArrayLoopTest.Box? [val]
              CALL 'public final fun atomicRefArrLoopTest (): <root>.ArrayLoopTest.Box? declared in <root>.ArrayLoopTest' type=<root>.ArrayLoopTest.Box? origin=null
                ARG <this>: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.atomicRefArrUpdateTest' type=<root>.ArrayLoopTest origin=IMPLICIT_ARGUMENT
            WHEN type=kotlin.Int? origin=null
              BRANCH
                if: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                  ARG arg0: GET_VAR 'val tmp_29: <root>.ArrayLoopTest.Box? declared in <root>.ArrayLoopTest.atomicRefArrUpdateTest' type=<root>.ArrayLoopTest.Box? origin=null
                  ARG arg1: CONST Null type=kotlin.Nothing? value=null
                then: CONST Null type=kotlin.Nothing? value=null
              BRANCH
                if: CONST Boolean type=kotlin.Boolean value=true
                then: CALL 'public final fun <get-n> (): kotlin.Int declared in <root>.ArrayLoopTest.Box' type=kotlin.Int origin=GET_PROPERTY
                  ARG <this>: GET_VAR 'val tmp_29: <root>.ArrayLoopTest.Box? declared in <root>.ArrayLoopTest.atomicRefArrUpdateTest' type=<root>.ArrayLoopTest.Box? origin=null
        CALL 'public final fun set (index: kotlin.Int, newValue: T of kotlin.concurrent.AtomicArray): kotlin.Unit declared in kotlin.concurrent.AtomicArray' type=kotlin.Unit origin=null
          ARG <this>: CALL 'private final fun <get-refArr> (): kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> declared in <root>.ArrayLoopTest' type=kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> origin=null
            ARG <this>: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.atomicRefArrUpdateTest' type=<root>.ArrayLoopTest origin=IMPLICIT_ARGUMENT
          ARG index: CONST Int type=kotlin.Int value=0
          ARG newValue: CONSTRUCTOR_CALL 'public constructor <init> (n: kotlin.Int) declared in <root>.ArrayLoopTest.Box' type=<root>.ArrayLoopTest.Box origin=null
            ARG n: CONST Int type=kotlin.Int value=5
        CALL 'private final fun update$atomicfu$ATOMIC_ARRAY$Any (handler$atomicfu: kotlin.concurrent.AtomicArray<kotlin.Any?>, index$atomicfu: kotlin.Int, action$atomicfu: kotlin.Function1<kotlin.Any?, kotlin.Any?>): kotlin.Unit declared in <root>.ArrayLoopTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.atomicRefArrUpdateTest' type=<root>.ArrayLoopTest origin=null
          ARG handler$atomicfu: CALL 'private final fun <get-refArr> (): kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> declared in <root>.ArrayLoopTest' type=kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> origin=null
            ARG <this>: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.atomicRefArrUpdateTest' type=<root>.ArrayLoopTest origin=IMPLICIT_ARGUMENT
          ARG index$atomicfu: CONST Int type=kotlin.Int value=0
          ARG action$atomicfu: FUN_EXPR type=kotlin.Function1<<root>.ArrayLoopTest.Box?, <root>.ArrayLoopTest.Box?> origin=LAMBDA
            FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:<root>.ArrayLoopTest.Box?
              VALUE_PARAMETER kind:Regular name:cur index:0 type:<root>.ArrayLoopTest.Box?
              BLOCK_BODY
                RETURN type=kotlin.Nothing from='local final fun <anonymous> (cur: <root>.ArrayLoopTest.Box?): <root>.ArrayLoopTest.Box? declared in <root>.ArrayLoopTest.atomicRefArrUpdateTest'
                  BLOCK type=<root>.ArrayLoopTest.Box? origin=SAFE_CALL
                    VAR IR_TEMPORARY_VARIABLE name:tmp_30 type:<root>.ArrayLoopTest.Box? [val]
                      GET_VAR 'cur: <root>.ArrayLoopTest.Box? declared in <root>.ArrayLoopTest.atomicRefArrUpdateTest.<anonymous>' type=<root>.ArrayLoopTest.Box? origin=null
                    WHEN type=<root>.ArrayLoopTest.Box? origin=null
                      BRANCH
                        if: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                          ARG arg0: GET_VAR 'val tmp_30: <root>.ArrayLoopTest.Box? declared in <root>.ArrayLoopTest.atomicRefArrUpdateTest.<anonymous>' type=<root>.ArrayLoopTest.Box? origin=null
                          ARG arg1: CONST Null type=kotlin.Nothing? value=null
                        then: CONST Null type=kotlin.Nothing? value=null
                      BRANCH
                        if: CONST Boolean type=kotlin.Boolean value=true
                        then: CALL 'public final fun let <T, R> (<this>: T of kotlin.let, block: kotlin.Function1<T of kotlin.let, R of kotlin.let>): R of kotlin.let declared in kotlin' type=<root>.ArrayLoopTest.Box origin=null
                          TYPE_ARG T: <root>.ArrayLoopTest.Box
                          TYPE_ARG R: <root>.ArrayLoopTest.Box
                          ARG <this>: GET_VAR 'val tmp_30: <root>.ArrayLoopTest.Box? declared in <root>.ArrayLoopTest.atomicRefArrUpdateTest.<anonymous>' type=<root>.ArrayLoopTest.Box? origin=null
                          ARG block: FUN_EXPR type=kotlin.Function1<<root>.ArrayLoopTest.Box, <root>.ArrayLoopTest.Box> origin=LAMBDA
                            FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:<root>.ArrayLoopTest.Box
                              VALUE_PARAMETER kind:Regular name:it index:0 type:<root>.ArrayLoopTest.Box
                              BLOCK_BODY
                                RETURN type=kotlin.Nothing from='local final fun <anonymous> (it: <root>.ArrayLoopTest.Box): <root>.ArrayLoopTest.Box declared in <root>.ArrayLoopTest.atomicRefArrUpdateTest.<anonymous>'
                                  CONSTRUCTOR_CALL 'public constructor <init> (n: kotlin.Int) declared in <root>.ArrayLoopTest.Box' type=<root>.ArrayLoopTest.Box origin=null
                                    ARG n: CALL 'public final fun times (other: kotlin.Int): kotlin.Int declared in kotlin.Int' type=kotlin.Int origin=MUL
                                      ARG <this>: CALL 'public final fun <get-n> (): kotlin.Int declared in <root>.ArrayLoopTest.Box' type=kotlin.Int origin=GET_PROPERTY
                                        ARG <this>: GET_VAR 'cur: <root>.ArrayLoopTest.Box? declared in <root>.ArrayLoopTest.atomicRefArrUpdateTest.<anonymous>' type=<root>.ArrayLoopTest.Box? origin=null
                                      ARG other: CONST Int type=kotlin.Int value=10
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Int
          ARG expected: CALL 'public final fun <get-n> (): kotlin.Int declared in <root>.ArrayLoopTest.Box' type=kotlin.Int origin=GET_PROPERTY
            ARG <this>: CALL 'public final fun CHECK_NOT_NULL <T0> (arg0: T0 of kotlin.internal.ir.CHECK_NOT_NULL?): {T0 of kotlin.internal.ir.CHECK_NOT_NULL & Any} declared in kotlin.internal.ir' type=<root>.ArrayLoopTest.Box origin=EXCLEXCL
              TYPE_ARG T0: <root>.ArrayLoopTest.Box
              ARG arg0: TYPE_OP type=kotlin.Any? origin=CAST typeOperand=kotlin.Any?
                CALL 'public final fun get (index: kotlin.Int): T of kotlin.concurrent.AtomicArray declared in kotlin.concurrent.AtomicArray' type=T of kotlin.concurrent.AtomicArray origin=null
                  ARG <this>: CALL 'private final fun <get-refArr> (): kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> declared in <root>.ArrayLoopTest' type=kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> origin=null
                    ARG <this>: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.atomicRefArrUpdateTest' type=<root>.ArrayLoopTest origin=IMPLICIT_ARGUMENT
                  ARG index: CONST Int type=kotlin.Int value=0
          ARG actual: CONST Int type=kotlin.Int value=50
        CALL 'public final fun set (index: kotlin.Int, newValue: T of kotlin.concurrent.AtomicArray): kotlin.Unit declared in kotlin.concurrent.AtomicArray' type=kotlin.Unit origin=null
          ARG <this>: CALL 'private final fun <get-refArr> (): kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> declared in <root>.ArrayLoopTest' type=kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> origin=null
            ARG <this>: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.atomicRefArrUpdateTest' type=<root>.ArrayLoopTest origin=IMPLICIT_ARGUMENT
          ARG index: CONST Int type=kotlin.Int value=0
          ARG newValue: CONSTRUCTOR_CALL 'public constructor <init> (n: kotlin.Int) declared in <root>.ArrayLoopTest.Box' type=<root>.ArrayLoopTest.Box origin=null
            ARG n: CONST Int type=kotlin.Int value=5
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Int
          ARG expected: CALL 'public final fun <get-n> (): kotlin.Int declared in <root>.ArrayLoopTest.Box' type=kotlin.Int origin=GET_PROPERTY
            ARG <this>: CALL 'public final fun CHECK_NOT_NULL <T0> (arg0: T0 of kotlin.internal.ir.CHECK_NOT_NULL?): {T0 of kotlin.internal.ir.CHECK_NOT_NULL & Any} declared in kotlin.internal.ir' type=<root>.ArrayLoopTest.Box origin=EXCLEXCL
              TYPE_ARG T0: <root>.ArrayLoopTest.Box
              ARG arg0: CALL 'private final fun updateAndGet$atomicfu$ATOMIC_ARRAY$Any (handler$atomicfu: kotlin.concurrent.AtomicArray<kotlin.Any?>, index$atomicfu: kotlin.Int, action$atomicfu: kotlin.Function1<kotlin.Any?, kotlin.Any?>): kotlin.Any? declared in <root>.ArrayLoopTest' type=kotlin.Any? origin=null
                ARG <this>: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.atomicRefArrUpdateTest' type=<root>.ArrayLoopTest origin=null
                ARG handler$atomicfu: CALL 'private final fun <get-refArr> (): kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> declared in <root>.ArrayLoopTest' type=kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> origin=null
                  ARG <this>: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.atomicRefArrUpdateTest' type=<root>.ArrayLoopTest origin=IMPLICIT_ARGUMENT
                ARG index$atomicfu: CONST Int type=kotlin.Int value=0
                ARG action$atomicfu: FUN_EXPR type=kotlin.Function1<<root>.ArrayLoopTest.Box?, <root>.ArrayLoopTest.Box?> origin=LAMBDA
                  FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:<root>.ArrayLoopTest.Box?
                    VALUE_PARAMETER kind:Regular name:cur index:0 type:<root>.ArrayLoopTest.Box?
                    BLOCK_BODY
                      RETURN type=kotlin.Nothing from='local final fun <anonymous> (cur: <root>.ArrayLoopTest.Box?): <root>.ArrayLoopTest.Box? declared in <root>.ArrayLoopTest.atomicRefArrUpdateTest'
                        CALL 'private final fun action (cur: <root>.ArrayLoopTest.Box?): <root>.ArrayLoopTest.Box? declared in <root>.ArrayLoopTest' type=<root>.ArrayLoopTest.Box? origin=null
                          ARG <this>: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.atomicRefArrUpdateTest' type=<root>.ArrayLoopTest origin=IMPLICIT_ARGUMENT
                          ARG cur: GET_VAR 'cur: <root>.ArrayLoopTest.Box? declared in <root>.ArrayLoopTest.atomicRefArrUpdateTest.<anonymous>' type=<root>.ArrayLoopTest.Box? origin=null
          ARG actual: CONST Int type=kotlin.Int value=50
        CALL 'public final fun set (index: kotlin.Int, newValue: T of kotlin.concurrent.AtomicArray): kotlin.Unit declared in kotlin.concurrent.AtomicArray' type=kotlin.Unit origin=null
          ARG <this>: CALL 'private final fun <get-refArr> (): kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> declared in <root>.ArrayLoopTest' type=kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> origin=null
            ARG <this>: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.atomicRefArrUpdateTest' type=<root>.ArrayLoopTest origin=IMPLICIT_ARGUMENT
          ARG index: CONST Int type=kotlin.Int value=0
          ARG newValue: CONSTRUCTOR_CALL 'public constructor <init> (n: kotlin.Int) declared in <root>.ArrayLoopTest.Box' type=<root>.ArrayLoopTest.Box origin=null
            ARG n: CONST Int type=kotlin.Int value=5
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Int
          ARG expected: CALL 'public final fun <get-n> (): kotlin.Int declared in <root>.ArrayLoopTest.Box' type=kotlin.Int origin=GET_PROPERTY
            ARG <this>: CALL 'public final fun CHECK_NOT_NULL <T0> (arg0: T0 of kotlin.internal.ir.CHECK_NOT_NULL?): {T0 of kotlin.internal.ir.CHECK_NOT_NULL & Any} declared in kotlin.internal.ir' type=<root>.ArrayLoopTest.Box origin=EXCLEXCL
              TYPE_ARG T0: <root>.ArrayLoopTest.Box
              ARG arg0: CALL 'private final fun getAndUpdate$atomicfu$ATOMIC_ARRAY$Any (handler$atomicfu: kotlin.concurrent.AtomicArray<kotlin.Any?>, index$atomicfu: kotlin.Int, action$atomicfu: kotlin.Function1<kotlin.Any?, kotlin.Any?>): kotlin.Any? declared in <root>.ArrayLoopTest' type=kotlin.Any? origin=null
                ARG <this>: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.atomicRefArrUpdateTest' type=<root>.ArrayLoopTest origin=null
                ARG handler$atomicfu: CALL 'private final fun <get-refArr> (): kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> declared in <root>.ArrayLoopTest' type=kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> origin=null
                  ARG <this>: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.atomicRefArrUpdateTest' type=<root>.ArrayLoopTest origin=IMPLICIT_ARGUMENT
                ARG index$atomicfu: CONST Int type=kotlin.Int value=0
                ARG action$atomicfu: FUN_EXPR type=kotlin.Function1<<root>.ArrayLoopTest.Box?, <root>.ArrayLoopTest.Box?> origin=LAMBDA
                  FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:<root>.ArrayLoopTest.Box?
                    VALUE_PARAMETER kind:Regular name:cur index:0 type:<root>.ArrayLoopTest.Box?
                    BLOCK_BODY
                      RETURN type=kotlin.Nothing from='local final fun <anonymous> (cur: <root>.ArrayLoopTest.Box?): <root>.ArrayLoopTest.Box? declared in <root>.ArrayLoopTest.atomicRefArrUpdateTest'
                        CALL 'private final fun action (cur: <root>.ArrayLoopTest.Box?): <root>.ArrayLoopTest.Box? declared in <root>.ArrayLoopTest' type=<root>.ArrayLoopTest.Box? origin=null
                          ARG <this>: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.atomicRefArrUpdateTest' type=<root>.ArrayLoopTest origin=IMPLICIT_ARGUMENT
                          ARG cur: GET_VAR 'cur: <root>.ArrayLoopTest.Box? declared in <root>.ArrayLoopTest.atomicRefArrUpdateTest.<anonymous>' type=<root>.ArrayLoopTest.Box? origin=null
          ARG actual: CONST Int type=kotlin.Int value=5
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Int
          ARG expected: CALL 'public final fun <get-n> (): kotlin.Int declared in <root>.ArrayLoopTest.Box' type=kotlin.Int origin=GET_PROPERTY
            ARG <this>: CALL 'public final fun CHECK_NOT_NULL <T0> (arg0: T0 of kotlin.internal.ir.CHECK_NOT_NULL?): {T0 of kotlin.internal.ir.CHECK_NOT_NULL & Any} declared in kotlin.internal.ir' type=<root>.ArrayLoopTest.Box origin=EXCLEXCL
              TYPE_ARG T0: <root>.ArrayLoopTest.Box
              ARG arg0: TYPE_OP type=kotlin.Any? origin=CAST typeOperand=kotlin.Any?
                CALL 'public final fun get (index: kotlin.Int): T of kotlin.concurrent.AtomicArray declared in kotlin.concurrent.AtomicArray' type=T of kotlin.concurrent.AtomicArray origin=null
                  ARG <this>: CALL 'private final fun <get-refArr> (): kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> declared in <root>.ArrayLoopTest' type=kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> origin=null
                    ARG <this>: GET_VAR '<this>: <root>.ArrayLoopTest declared in <root>.ArrayLoopTest.atomicRefArrUpdateTest' type=<root>.ArrayLoopTest origin=IMPLICIT_ARGUMENT
                  ARG index: CONST Int type=kotlin.Int value=0
          ARG actual: CONST Int type=kotlin.Int value=50
  FUN name:box visibility:public modality:FINAL returnType:kotlin.String
    BLOCK_BODY
      VAR name:testClass type:<root>.ArrayLoopTest [val]
        CONSTRUCTOR_CALL 'public constructor <init> () declared in <root>.ArrayLoopTest' type=<root>.ArrayLoopTest origin=null
      CALL 'public final fun atomicIntArrUpdateTest (): kotlin.Unit declared in <root>.ArrayLoopTest' type=kotlin.Unit origin=null
        ARG <this>: GET_VAR 'val testClass: <root>.ArrayLoopTest declared in <root>.box' type=<root>.ArrayLoopTest origin=null
      CALL 'public final fun atomicIntArrUpdateTest (): kotlin.Unit declared in <root>.ArrayLoopTest' type=kotlin.Unit origin=null
        ARG <this>: GET_VAR 'val testClass: <root>.ArrayLoopTest declared in <root>.box' type=<root>.ArrayLoopTest origin=null
      CALL 'public final fun atomicBooleanArrUpdateTest (): kotlin.Unit declared in <root>.ArrayLoopTest' type=kotlin.Unit origin=null
        ARG <this>: GET_VAR 'val testClass: <root>.ArrayLoopTest declared in <root>.box' type=<root>.ArrayLoopTest origin=null
      CALL 'public final fun atomicRefArrUpdateTest (): kotlin.Unit declared in <root>.ArrayLoopTest' type=kotlin.Unit origin=null
        ARG <this>: GET_VAR 'val testClass: <root>.ArrayLoopTest declared in <root>.box' type=<root>.ArrayLoopTest origin=null
      RETURN type=kotlin.Nothing from='public final fun box (): kotlin.String declared in <root>'
        CONST String type=kotlin.String value="OK"
