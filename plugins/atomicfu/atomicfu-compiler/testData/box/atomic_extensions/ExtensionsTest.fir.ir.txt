FILE fqName:<root> fileName:/ExtensionsTest.kt
  CLASS CLASS name:ExtensionsTest modality:FINAL visibility:public superTypes:[kotlin.Any]
    thisReceiver: VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> type:<root>.ExtensionsTest
    PROPERTY ATOMICFU_GENERATED_PROPERTY name:a$volatile visibility:private modality:FINAL [var]
      FIELD ATOMICFU_GENERATED_FIELD name:a$volatile type:kotlin.Int visibility:private
        annotations:
          Volatile
        EXPRESSION_BODY
          CONST Int type=kotlin.Int value=0
      FUN ATOMICFU_GENERATED_PROPERTY_ACCESSOR name:<get-a$volatile> visibility:private modality:FINAL returnType:kotlin.Int
        VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.ExtensionsTest
        correspondingProperty: PROPERTY ATOMICFU_GENERATED_PROPERTY name:a$volatile visibility:private modality:FINAL [var]
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='private final fun <get-a$volatile> (): kotlin.Int declared in <root>.ExtensionsTest'
            GET_FIELD 'FIELD ATOMICFU_GENERATED_FIELD name:a$volatile type:kotlin.Int visibility:private declared in <root>.ExtensionsTest' type=kotlin.Int origin=null
              receiver: GET_VAR '<this>: <root>.ExtensionsTest declared in <root>.ExtensionsTest.<get-a$volatile>' type=<root>.ExtensionsTest origin=null
      FUN ATOMICFU_GENERATED_PROPERTY_ACCESSOR name:<set-a$volatile> visibility:private modality:FINAL returnType:kotlin.Unit
        VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.ExtensionsTest
        VALUE_PARAMETER kind:Regular name:value index:1 type:kotlin.Int
        correspondingProperty: PROPERTY ATOMICFU_GENERATED_PROPERTY name:a$volatile visibility:private modality:FINAL [var]
        BLOCK_BODY
          RETURN type=kotlin.Unit from='private final fun <set-a$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.ExtensionsTest'
            SET_FIELD 'FIELD ATOMICFU_GENERATED_FIELD name:a$volatile type:kotlin.Int visibility:private declared in <root>.ExtensionsTest' type=kotlin.Unit origin=null
              receiver: GET_VAR '<this>: <root>.ExtensionsTest declared in <root>.ExtensionsTest.<set-a$volatile>' type=<root>.ExtensionsTest origin=null
              value: GET_VAR 'value: kotlin.Int declared in <root>.ExtensionsTest.<set-a$volatile>' type=kotlin.Int origin=null
    PROPERTY ATOMICFU_GENERATED_PROPERTY name:l$volatile visibility:private modality:FINAL [var]
      FIELD ATOMICFU_GENERATED_FIELD name:l$volatile type:kotlin.Long visibility:private
        annotations:
          Volatile
        EXPRESSION_BODY
          CONST Long type=kotlin.Long value=0
      FUN ATOMICFU_GENERATED_PROPERTY_ACCESSOR name:<get-l$volatile> visibility:private modality:FINAL returnType:kotlin.Long
        VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.ExtensionsTest
        correspondingProperty: PROPERTY ATOMICFU_GENERATED_PROPERTY name:l$volatile visibility:private modality:FINAL [var]
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='private final fun <get-l$volatile> (): kotlin.Long declared in <root>.ExtensionsTest'
            GET_FIELD 'FIELD ATOMICFU_GENERATED_FIELD name:l$volatile type:kotlin.Long visibility:private declared in <root>.ExtensionsTest' type=kotlin.Long origin=null
              receiver: GET_VAR '<this>: <root>.ExtensionsTest declared in <root>.ExtensionsTest.<get-l$volatile>' type=<root>.ExtensionsTest origin=null
      FUN ATOMICFU_GENERATED_PROPERTY_ACCESSOR name:<set-l$volatile> visibility:private modality:FINAL returnType:kotlin.Unit
        VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.ExtensionsTest
        VALUE_PARAMETER kind:Regular name:value index:1 type:kotlin.Long
        correspondingProperty: PROPERTY ATOMICFU_GENERATED_PROPERTY name:l$volatile visibility:private modality:FINAL [var]
        BLOCK_BODY
          RETURN type=kotlin.Unit from='private final fun <set-l$volatile> (value: kotlin.Long): kotlin.Unit declared in <root>.ExtensionsTest'
            SET_FIELD 'FIELD ATOMICFU_GENERATED_FIELD name:l$volatile type:kotlin.Long visibility:private declared in <root>.ExtensionsTest' type=kotlin.Unit origin=null
              receiver: GET_VAR '<this>: <root>.ExtensionsTest declared in <root>.ExtensionsTest.<set-l$volatile>' type=<root>.ExtensionsTest origin=null
              value: GET_VAR 'value: kotlin.Long declared in <root>.ExtensionsTest.<set-l$volatile>' type=kotlin.Long origin=null
    PROPERTY ATOMICFU_GENERATED_PROPERTY name:s$volatile visibility:private modality:FINAL [var]
      FIELD ATOMICFU_GENERATED_FIELD name:s$volatile type:kotlin.Any? visibility:private
        annotations:
          Volatile
        EXPRESSION_BODY
          CONST Null type=kotlin.Nothing? value=null
      FUN ATOMICFU_GENERATED_PROPERTY_ACCESSOR name:<get-s$volatile> visibility:private modality:FINAL returnType:kotlin.Any?
        VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.ExtensionsTest
        correspondingProperty: PROPERTY ATOMICFU_GENERATED_PROPERTY name:s$volatile visibility:private modality:FINAL [var]
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='private final fun <get-s$volatile> (): kotlin.Any? declared in <root>.ExtensionsTest'
            GET_FIELD 'FIELD ATOMICFU_GENERATED_FIELD name:s$volatile type:kotlin.Any? visibility:private declared in <root>.ExtensionsTest' type=kotlin.Any? origin=null
              receiver: GET_VAR '<this>: <root>.ExtensionsTest declared in <root>.ExtensionsTest.<get-s$volatile>' type=<root>.ExtensionsTest origin=null
      FUN ATOMICFU_GENERATED_PROPERTY_ACCESSOR name:<set-s$volatile> visibility:private modality:FINAL returnType:kotlin.Unit
        VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.ExtensionsTest
        VALUE_PARAMETER kind:Regular name:value index:1 type:kotlin.Any?
        correspondingProperty: PROPERTY ATOMICFU_GENERATED_PROPERTY name:s$volatile visibility:private modality:FINAL [var]
        BLOCK_BODY
          RETURN type=kotlin.Unit from='private final fun <set-s$volatile> (value: kotlin.Any?): kotlin.Unit declared in <root>.ExtensionsTest'
            SET_FIELD 'FIELD ATOMICFU_GENERATED_FIELD name:s$volatile type:kotlin.Any? visibility:private declared in <root>.ExtensionsTest' type=kotlin.Unit origin=null
              receiver: GET_VAR '<this>: <root>.ExtensionsTest declared in <root>.ExtensionsTest.<set-s$volatile>' type=<root>.ExtensionsTest origin=null
              value: GET_VAR 'value: kotlin.Any? declared in <root>.ExtensionsTest.<set-s$volatile>' type=kotlin.Any? origin=null
    PROPERTY ATOMICFU_GENERATED_PROPERTY name:b$volatile visibility:private modality:FINAL [var]
      FIELD ATOMICFU_GENERATED_FIELD name:b$volatile type:kotlin.Boolean visibility:private
        annotations:
          Volatile
        EXPRESSION_BODY
          CONST Boolean type=kotlin.Boolean value=true
      FUN ATOMICFU_GENERATED_PROPERTY_ACCESSOR name:<get-b$volatile> visibility:private modality:FINAL returnType:kotlin.Boolean
        VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.ExtensionsTest
        correspondingProperty: PROPERTY ATOMICFU_GENERATED_PROPERTY name:b$volatile visibility:private modality:FINAL [var]
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='private final fun <get-b$volatile> (): kotlin.Boolean declared in <root>.ExtensionsTest'
            GET_FIELD 'FIELD ATOMICFU_GENERATED_FIELD name:b$volatile type:kotlin.Boolean visibility:private declared in <root>.ExtensionsTest' type=kotlin.Boolean origin=null
              receiver: GET_VAR '<this>: <root>.ExtensionsTest declared in <root>.ExtensionsTest.<get-b$volatile>' type=<root>.ExtensionsTest origin=null
      FUN ATOMICFU_GENERATED_PROPERTY_ACCESSOR name:<set-b$volatile> visibility:private modality:FINAL returnType:kotlin.Unit
        VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.ExtensionsTest
        VALUE_PARAMETER kind:Regular name:value index:1 type:kotlin.Boolean
        correspondingProperty: PROPERTY ATOMICFU_GENERATED_PROPERTY name:b$volatile visibility:private modality:FINAL [var]
        BLOCK_BODY
          RETURN type=kotlin.Unit from='private final fun <set-b$volatile> (value: kotlin.Boolean): kotlin.Unit declared in <root>.ExtensionsTest'
            SET_FIELD 'FIELD ATOMICFU_GENERATED_FIELD name:b$volatile type:kotlin.Boolean visibility:private declared in <root>.ExtensionsTest' type=kotlin.Unit origin=null
              receiver: GET_VAR '<this>: <root>.ExtensionsTest declared in <root>.ExtensionsTest.<set-b$volatile>' type=<root>.ExtensionsTest origin=null
              value: GET_VAR 'value: kotlin.Boolean declared in <root>.ExtensionsTest.<set-b$volatile>' type=kotlin.Boolean origin=null
    CONSTRUCTOR visibility:public returnType:<root>.ExtensionsTest [primary]
      BLOCK_BODY
        DELEGATING_CONSTRUCTOR_CALL 'public constructor <init> () declared in kotlin.Any'
        INSTANCE_INITIALIZER_CALL classDescriptor='CLASS CLASS name:ExtensionsTest modality:FINAL visibility:public superTypes:[kotlin.Any]' type=kotlin.Unit
    FUN ATOMICFU_GENERATED_FUNCTION name:booleanExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Boolean visibility:private modality:FINAL returnType:kotlin.Unit [inline]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.ExtensionsTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.concurrent.AtomicIntArray
      VALUE_PARAMETER kind:Regular name:index$atomicfu index:2 type:kotlin.Int
      BLOCK_BODY
        CALL 'public final fun set (index: kotlin.Int, newValue: kotlin.Int): kotlin.Unit declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicIntArray declared in <root>.ExtensionsTest.booleanExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Boolean' type=kotlin.concurrent.AtomicIntArray origin=null
          ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ExtensionsTest.booleanExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Boolean' type=kotlin.Int origin=null
          ARG newValue: WHEN type=kotlin.Int origin=null
            BRANCH
              if: CONST Boolean type=kotlin.Boolean value=false
              then: CONST Int type=kotlin.Int value=1
            BRANCH
              if: CONST Boolean type=kotlin.Boolean value=true
              then: CONST Int type=kotlin.Int value=0
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun not (): kotlin.Boolean declared in kotlin.Boolean' type=kotlin.Boolean origin=null
            ARG <this>: TYPE_OP type=kotlin.Boolean origin=CAST typeOperand=kotlin.Boolean
              CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                ARG arg0: CALL 'public final fun get (index: kotlin.Int): kotlin.Int declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Int origin=null
                  ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicIntArray declared in <root>.ExtensionsTest.booleanExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Boolean' type=kotlin.concurrent.AtomicIntArray origin=null
                  ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ExtensionsTest.booleanExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Boolean' type=kotlin.Int origin=null
                ARG arg1: CONST Int type=kotlin.Int value=1
        CALL 'public final fun set (index: kotlin.Int, newValue: kotlin.Int): kotlin.Unit declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicIntArray declared in <root>.ExtensionsTest.booleanExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Boolean' type=kotlin.concurrent.AtomicIntArray origin=null
          ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ExtensionsTest.booleanExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Boolean' type=kotlin.Int origin=null
          ARG newValue: WHEN type=kotlin.Int origin=null
            BRANCH
              if: CONST Boolean type=kotlin.Boolean value=true
              then: CONST Int type=kotlin.Int value=1
            BRANCH
              if: CONST Boolean type=kotlin.Boolean value=true
              then: CONST Int type=kotlin.Int value=0
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: TYPE_OP type=kotlin.Boolean origin=CAST typeOperand=kotlin.Boolean
            CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
              ARG arg0: CALL 'public final fun get (index: kotlin.Int): kotlin.Int declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Int origin=null
                ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicIntArray declared in <root>.ExtensionsTest.booleanExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Boolean' type=kotlin.concurrent.AtomicIntArray origin=null
                ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ExtensionsTest.booleanExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Boolean' type=kotlin.Int origin=null
              ARG arg1: CONST Int type=kotlin.Int value=1
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: CALL 'public final fun getAndSet (index: kotlin.Int, newValue: kotlin.Int): kotlin.Int declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Int origin=null
              ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicIntArray declared in <root>.ExtensionsTest.booleanExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Boolean' type=kotlin.concurrent.AtomicIntArray origin=null
              ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ExtensionsTest.booleanExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Boolean' type=kotlin.Int origin=null
              ARG newValue: WHEN type=kotlin.Int origin=null
                BRANCH
                  if: CONST Boolean type=kotlin.Boolean value=true
                  then: CONST Int type=kotlin.Int value=1
                BRANCH
                  if: CONST Boolean type=kotlin.Boolean value=true
                  then: CONST Int type=kotlin.Int value=0
            ARG arg1: CONST Int type=kotlin.Int value=1
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun compareAndSet (index: kotlin.Int, expectedValue: kotlin.Int, newValue: kotlin.Int): kotlin.Boolean declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Boolean origin=null
            ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicIntArray declared in <root>.ExtensionsTest.booleanExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Boolean' type=kotlin.concurrent.AtomicIntArray origin=null
            ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ExtensionsTest.booleanExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Boolean' type=kotlin.Int origin=null
            ARG expectedValue: WHEN type=kotlin.Int origin=null
              BRANCH
                if: TYPE_OP type=kotlin.Boolean origin=CAST typeOperand=kotlin.Boolean
                  CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                    ARG arg0: CALL 'public final fun get (index: kotlin.Int): kotlin.Int declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Int origin=null
                      ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicIntArray declared in <root>.ExtensionsTest.booleanExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Boolean' type=kotlin.concurrent.AtomicIntArray origin=null
                      ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ExtensionsTest.booleanExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Boolean' type=kotlin.Int origin=null
                    ARG arg1: CONST Int type=kotlin.Int value=1
                then: CONST Int type=kotlin.Int value=1
              BRANCH
                if: CONST Boolean type=kotlin.Boolean value=true
                then: CONST Int type=kotlin.Int value=0
            ARG newValue: WHEN type=kotlin.Int origin=null
              BRANCH
                if: CONST Boolean type=kotlin.Boolean value=false
                then: CONST Int type=kotlin.Int value=1
              BRANCH
                if: CONST Boolean type=kotlin.Boolean value=true
                then: CONST Int type=kotlin.Int value=0
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun not (): kotlin.Boolean declared in kotlin.Boolean' type=kotlin.Boolean origin=null
            ARG <this>: TYPE_OP type=kotlin.Boolean origin=CAST typeOperand=kotlin.Boolean
              CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                ARG arg0: CALL 'public final fun get (index: kotlin.Int): kotlin.Int declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Int origin=null
                  ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicIntArray declared in <root>.ExtensionsTest.booleanExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Boolean' type=kotlin.concurrent.AtomicIntArray origin=null
                  ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ExtensionsTest.booleanExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Boolean' type=kotlin.Int origin=null
                ARG arg1: CONST Int type=kotlin.Int value=1
    FUN ATOMICFU_GENERATED_FUNCTION name:booleanExtensionArithmetic$atomicfu$NATIVE_PROPERTY_REF$Boolean visibility:private modality:FINAL returnType:kotlin.Unit [inline]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.ExtensionsTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Boolean>> [crossinline]
      BLOCK_BODY
        CALL 'internal final fun atomicSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicSetField>, newValue: T of kotlin.concurrent.atomicSetField): kotlin.Unit declared in kotlin.concurrent' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Boolean
          ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
            ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Boolean>> declared in <root>.ExtensionsTest.booleanExtensionArithmetic$atomicfu$NATIVE_PROPERTY_REF$Boolean' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Boolean>> origin=null
          ARG newValue: CONST Boolean type=kotlin.Boolean value=false
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun not (): kotlin.Boolean declared in kotlin.Boolean' type=kotlin.Boolean origin=null
            ARG <this>: TYPE_OP type=kotlin.Boolean origin=CAST typeOperand=kotlin.Boolean
              CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                TYPE_ARG T: kotlin.Boolean
                ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                  ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Boolean>> declared in <root>.ExtensionsTest.booleanExtensionArithmetic$atomicfu$NATIVE_PROPERTY_REF$Boolean' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Boolean>> origin=null
        CALL 'internal final fun atomicSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicSetField>, newValue: T of kotlin.concurrent.atomicSetField): kotlin.Unit declared in kotlin.concurrent' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Boolean
          ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
            ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Boolean>> declared in <root>.ExtensionsTest.booleanExtensionArithmetic$atomicfu$NATIVE_PROPERTY_REF$Boolean' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Boolean>> origin=null
          ARG newValue: CONST Boolean type=kotlin.Boolean value=true
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: TYPE_OP type=kotlin.Boolean origin=CAST typeOperand=kotlin.Boolean
            CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
              TYPE_ARG T: kotlin.Boolean
              ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Boolean>> declared in <root>.ExtensionsTest.booleanExtensionArithmetic$atomicfu$NATIVE_PROPERTY_REF$Boolean' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Boolean>> origin=null
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'internal final fun getAndSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.getAndSetField>, newValue: T of kotlin.concurrent.getAndSetField): T of kotlin.concurrent.getAndSetField declared in kotlin.concurrent' type=T of kotlin.concurrent.getAndSetField origin=null
            TYPE_ARG T: kotlin.Boolean
            ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
              ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Boolean>> declared in <root>.ExtensionsTest.booleanExtensionArithmetic$atomicfu$NATIVE_PROPERTY_REF$Boolean' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Boolean>> origin=null
            ARG newValue: CONST Boolean type=kotlin.Boolean value=true
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'internal final fun compareAndSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.compareAndSetField>, expectedValue: T of kotlin.concurrent.compareAndSetField, newValue: T of kotlin.concurrent.compareAndSetField): kotlin.Boolean declared in kotlin.concurrent' type=kotlin.Boolean origin=null
            TYPE_ARG T: kotlin.Boolean
            ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
              ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Boolean>> declared in <root>.ExtensionsTest.booleanExtensionArithmetic$atomicfu$NATIVE_PROPERTY_REF$Boolean' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Boolean>> origin=null
            ARG expectedValue: TYPE_OP type=kotlin.Boolean origin=CAST typeOperand=kotlin.Boolean
              CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                TYPE_ARG T: kotlin.Boolean
                ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                  ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Boolean>> declared in <root>.ExtensionsTest.booleanExtensionArithmetic$atomicfu$NATIVE_PROPERTY_REF$Boolean' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Boolean>> origin=null
            ARG newValue: CONST Boolean type=kotlin.Boolean value=false
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun not (): kotlin.Boolean declared in kotlin.Boolean' type=kotlin.Boolean origin=null
            ARG <this>: TYPE_OP type=kotlin.Boolean origin=CAST typeOperand=kotlin.Boolean
              CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                TYPE_ARG T: kotlin.Boolean
                ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                  ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Boolean>> declared in <root>.ExtensionsTest.booleanExtensionArithmetic$atomicfu$NATIVE_PROPERTY_REF$Boolean' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Boolean>> origin=null
    FUN ATOMICFU_GENERATED_FUNCTION name:intExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Int visibility:private modality:FINAL returnType:kotlin.Unit [inline]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.ExtensionsTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.concurrent.AtomicIntArray
      VALUE_PARAMETER kind:Regular name:index$atomicfu index:2 type:kotlin.Int
      BLOCK_BODY
        CALL 'public final fun set (index: kotlin.Int, newValue: kotlin.Int): kotlin.Unit declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicIntArray declared in <root>.ExtensionsTest.intExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.concurrent.AtomicIntArray origin=null
          ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ExtensionsTest.intExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.Int origin=null
          ARG newValue: CONST Int type=kotlin.Int value=0
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: TYPE_OP type=kotlin.Int origin=CAST typeOperand=kotlin.Int
              CALL 'public final fun get (index: kotlin.Int): kotlin.Int declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Int origin=null
                ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicIntArray declared in <root>.ExtensionsTest.intExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.concurrent.AtomicIntArray origin=null
                ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ExtensionsTest.intExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.Int origin=null
            ARG arg1: CONST Int type=kotlin.Int value=0
        VAR name:update type:kotlin.Int [val]
          CONST Int type=kotlin.Int value=3
        CALL 'public final fun set (index: kotlin.Int, newValue: kotlin.Int): kotlin.Unit declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicIntArray declared in <root>.ExtensionsTest.intExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.concurrent.AtomicIntArray origin=null
          ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ExtensionsTest.intExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.Int origin=null
          ARG newValue: GET_VAR 'val update: kotlin.Int declared in <root>.ExtensionsTest.intExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.Int origin=null
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun compareAndSet (index: kotlin.Int, expectedValue: kotlin.Int, newValue: kotlin.Int): kotlin.Boolean declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Boolean origin=null
            ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicIntArray declared in <root>.ExtensionsTest.intExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.concurrent.AtomicIntArray origin=null
            ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ExtensionsTest.intExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.Int origin=null
            ARG expectedValue: GET_VAR 'val update: kotlin.Int declared in <root>.ExtensionsTest.intExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.Int origin=null
            ARG newValue: CONST Int type=kotlin.Int value=8
        CALL 'public final fun set (index: kotlin.Int, newValue: kotlin.Int): kotlin.Unit declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicIntArray declared in <root>.ExtensionsTest.intExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.concurrent.AtomicIntArray origin=null
          ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ExtensionsTest.intExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.Int origin=null
          ARG newValue: CONST Int type=kotlin.Int value=1
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: TYPE_OP type=kotlin.Int origin=CAST typeOperand=kotlin.Int
              CALL 'public final fun get (index: kotlin.Int): kotlin.Int declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Int origin=null
                ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicIntArray declared in <root>.ExtensionsTest.intExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.concurrent.AtomicIntArray origin=null
                ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ExtensionsTest.intExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.Int origin=null
            ARG arg1: CONST Int type=kotlin.Int value=1
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: CALL 'public final fun getAndSet (index: kotlin.Int, newValue: kotlin.Int): kotlin.Int declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Int origin=null
              ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicIntArray declared in <root>.ExtensionsTest.intExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.concurrent.AtomicIntArray origin=null
              ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ExtensionsTest.intExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.Int origin=null
              ARG newValue: CONST Int type=kotlin.Int value=2
            ARG arg1: CONST Int type=kotlin.Int value=1
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: TYPE_OP type=kotlin.Int origin=CAST typeOperand=kotlin.Int
              CALL 'public final fun get (index: kotlin.Int): kotlin.Int declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Int origin=null
                ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicIntArray declared in <root>.ExtensionsTest.intExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.concurrent.AtomicIntArray origin=null
                ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ExtensionsTest.intExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.Int origin=null
            ARG arg1: CONST Int type=kotlin.Int value=2
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: CALL 'public final fun getAndIncrement (index: kotlin.Int): kotlin.Int declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Int origin=null
              ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicIntArray declared in <root>.ExtensionsTest.intExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.concurrent.AtomicIntArray origin=null
              ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ExtensionsTest.intExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.Int origin=null
            ARG arg1: CONST Int type=kotlin.Int value=2
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: TYPE_OP type=kotlin.Int origin=CAST typeOperand=kotlin.Int
              CALL 'public final fun get (index: kotlin.Int): kotlin.Int declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Int origin=null
                ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicIntArray declared in <root>.ExtensionsTest.intExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.concurrent.AtomicIntArray origin=null
                ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ExtensionsTest.intExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.Int origin=null
            ARG arg1: CONST Int type=kotlin.Int value=3
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: CALL 'public final fun getAndDecrement (index: kotlin.Int): kotlin.Int declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Int origin=null
              ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicIntArray declared in <root>.ExtensionsTest.intExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.concurrent.AtomicIntArray origin=null
              ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ExtensionsTest.intExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.Int origin=null
            ARG arg1: CONST Int type=kotlin.Int value=3
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: TYPE_OP type=kotlin.Int origin=CAST typeOperand=kotlin.Int
              CALL 'public final fun get (index: kotlin.Int): kotlin.Int declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Int origin=null
                ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicIntArray declared in <root>.ExtensionsTest.intExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.concurrent.AtomicIntArray origin=null
                ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ExtensionsTest.intExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.Int origin=null
            ARG arg1: CONST Int type=kotlin.Int value=2
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: CALL 'public final fun getAndAdd (index: kotlin.Int, delta: kotlin.Int): kotlin.Int declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Int origin=null
              ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicIntArray declared in <root>.ExtensionsTest.intExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.concurrent.AtomicIntArray origin=null
              ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ExtensionsTest.intExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.Int origin=null
              ARG delta: CONST Int type=kotlin.Int value=2
            ARG arg1: CONST Int type=kotlin.Int value=2
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: TYPE_OP type=kotlin.Int origin=CAST typeOperand=kotlin.Int
              CALL 'public final fun get (index: kotlin.Int): kotlin.Int declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Int origin=null
                ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicIntArray declared in <root>.ExtensionsTest.intExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.concurrent.AtomicIntArray origin=null
                ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ExtensionsTest.intExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.Int origin=null
            ARG arg1: CONST Int type=kotlin.Int value=4
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: CALL 'public final fun addAndGet (index: kotlin.Int, delta: kotlin.Int): kotlin.Int declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Int origin=null
              ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicIntArray declared in <root>.ExtensionsTest.intExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.concurrent.AtomicIntArray origin=null
              ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ExtensionsTest.intExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.Int origin=null
              ARG delta: CONST Int type=kotlin.Int value=3
            ARG arg1: CONST Int type=kotlin.Int value=7
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: TYPE_OP type=kotlin.Int origin=CAST typeOperand=kotlin.Int
              CALL 'public final fun get (index: kotlin.Int): kotlin.Int declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Int origin=null
                ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicIntArray declared in <root>.ExtensionsTest.intExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.concurrent.AtomicIntArray origin=null
                ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ExtensionsTest.intExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.Int origin=null
            ARG arg1: CONST Int type=kotlin.Int value=7
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: CALL 'public final fun incrementAndGet (index: kotlin.Int): kotlin.Int declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Int origin=null
              ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicIntArray declared in <root>.ExtensionsTest.intExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.concurrent.AtomicIntArray origin=null
              ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ExtensionsTest.intExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.Int origin=null
            ARG arg1: CONST Int type=kotlin.Int value=8
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: TYPE_OP type=kotlin.Int origin=CAST typeOperand=kotlin.Int
              CALL 'public final fun get (index: kotlin.Int): kotlin.Int declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Int origin=null
                ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicIntArray declared in <root>.ExtensionsTest.intExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.concurrent.AtomicIntArray origin=null
                ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ExtensionsTest.intExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.Int origin=null
            ARG arg1: CONST Int type=kotlin.Int value=8
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: CALL 'public final fun decrementAndGet (index: kotlin.Int): kotlin.Int declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Int origin=null
              ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicIntArray declared in <root>.ExtensionsTest.intExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.concurrent.AtomicIntArray origin=null
              ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ExtensionsTest.intExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.Int origin=null
            ARG arg1: CONST Int type=kotlin.Int value=7
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: TYPE_OP type=kotlin.Int origin=CAST typeOperand=kotlin.Int
              CALL 'public final fun get (index: kotlin.Int): kotlin.Int declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Int origin=null
                ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicIntArray declared in <root>.ExtensionsTest.intExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.concurrent.AtomicIntArray origin=null
                ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ExtensionsTest.intExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.Int origin=null
            ARG arg1: CONST Int type=kotlin.Int value=7
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun compareAndSet (index: kotlin.Int, expectedValue: kotlin.Int, newValue: kotlin.Int): kotlin.Boolean declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Boolean origin=null
            ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicIntArray declared in <root>.ExtensionsTest.intExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.concurrent.AtomicIntArray origin=null
            ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ExtensionsTest.intExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.Int origin=null
            ARG expectedValue: CONST Int type=kotlin.Int value=7
            ARG newValue: CONST Int type=kotlin.Int value=10
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun compareAndSet (index: kotlin.Int, expectedValue: kotlin.Int, newValue: kotlin.Int): kotlin.Boolean declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Boolean origin=null
            ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicIntArray declared in <root>.ExtensionsTest.intExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.concurrent.AtomicIntArray origin=null
            ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ExtensionsTest.intExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.Int origin=null
            ARG expectedValue: TYPE_OP type=kotlin.Int origin=CAST typeOperand=kotlin.Int
              CALL 'public final fun get (index: kotlin.Int): kotlin.Int declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Int origin=null
                ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicIntArray declared in <root>.ExtensionsTest.intExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.concurrent.AtomicIntArray origin=null
                ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ExtensionsTest.intExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.Int origin=null
            ARG newValue: CONST Int type=kotlin.Int value=55
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: TYPE_OP type=kotlin.Int origin=CAST typeOperand=kotlin.Int
              CALL 'public final fun get (index: kotlin.Int): kotlin.Int declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Int origin=null
                ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicIntArray declared in <root>.ExtensionsTest.intExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.concurrent.AtomicIntArray origin=null
                ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ExtensionsTest.intExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Int' type=kotlin.Int origin=null
            ARG arg1: CONST Int type=kotlin.Int value=55
    FUN ATOMICFU_GENERATED_FUNCTION name:intExtensionArithmetic$atomicfu$NATIVE_PROPERTY_REF$Int visibility:private modality:FINAL returnType:kotlin.Unit [inline]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.ExtensionsTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> [crossinline]
      BLOCK_BODY
        CALL 'internal final fun atomicSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicSetField>, newValue: T of kotlin.concurrent.atomicSetField): kotlin.Unit declared in kotlin.concurrent' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Int
          ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
            ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> declared in <root>.ExtensionsTest.intExtensionArithmetic$atomicfu$NATIVE_PROPERTY_REF$Int' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> origin=null
          ARG newValue: CONST Int type=kotlin.Int value=0
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: TYPE_OP type=kotlin.Int origin=CAST typeOperand=kotlin.Int
              CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                TYPE_ARG T: kotlin.Int
                ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                  ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> declared in <root>.ExtensionsTest.intExtensionArithmetic$atomicfu$NATIVE_PROPERTY_REF$Int' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> origin=null
            ARG arg1: CONST Int type=kotlin.Int value=0
        VAR name:update type:kotlin.Int [val]
          CONST Int type=kotlin.Int value=3
        CALL 'internal final fun atomicSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicSetField>, newValue: T of kotlin.concurrent.atomicSetField): kotlin.Unit declared in kotlin.concurrent' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Int
          ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
            ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> declared in <root>.ExtensionsTest.intExtensionArithmetic$atomicfu$NATIVE_PROPERTY_REF$Int' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> origin=null
          ARG newValue: GET_VAR 'val update: kotlin.Int declared in <root>.ExtensionsTest.intExtensionArithmetic$atomicfu$NATIVE_PROPERTY_REF$Int' type=kotlin.Int origin=null
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'internal final fun compareAndSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.compareAndSetField>, expectedValue: T of kotlin.concurrent.compareAndSetField, newValue: T of kotlin.concurrent.compareAndSetField): kotlin.Boolean declared in kotlin.concurrent' type=kotlin.Boolean origin=null
            TYPE_ARG T: kotlin.Int
            ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
              ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> declared in <root>.ExtensionsTest.intExtensionArithmetic$atomicfu$NATIVE_PROPERTY_REF$Int' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> origin=null
            ARG expectedValue: GET_VAR 'val update: kotlin.Int declared in <root>.ExtensionsTest.intExtensionArithmetic$atomicfu$NATIVE_PROPERTY_REF$Int' type=kotlin.Int origin=null
            ARG newValue: CONST Int type=kotlin.Int value=8
        CALL 'internal final fun atomicSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicSetField>, newValue: T of kotlin.concurrent.atomicSetField): kotlin.Unit declared in kotlin.concurrent' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Int
          ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
            ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> declared in <root>.ExtensionsTest.intExtensionArithmetic$atomicfu$NATIVE_PROPERTY_REF$Int' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> origin=null
          ARG newValue: CONST Int type=kotlin.Int value=1
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: TYPE_OP type=kotlin.Int origin=CAST typeOperand=kotlin.Int
              CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                TYPE_ARG T: kotlin.Int
                ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                  ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> declared in <root>.ExtensionsTest.intExtensionArithmetic$atomicfu$NATIVE_PROPERTY_REF$Int' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> origin=null
            ARG arg1: CONST Int type=kotlin.Int value=1
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: CALL 'internal final fun getAndSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.getAndSetField>, newValue: T of kotlin.concurrent.getAndSetField): T of kotlin.concurrent.getAndSetField declared in kotlin.concurrent' type=T of kotlin.concurrent.getAndSetField origin=null
              TYPE_ARG T: kotlin.Int
              ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> declared in <root>.ExtensionsTest.intExtensionArithmetic$atomicfu$NATIVE_PROPERTY_REF$Int' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> origin=null
              ARG newValue: CONST Int type=kotlin.Int value=2
            ARG arg1: CONST Int type=kotlin.Int value=1
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: TYPE_OP type=kotlin.Int origin=CAST typeOperand=kotlin.Int
              CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                TYPE_ARG T: kotlin.Int
                ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                  ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> declared in <root>.ExtensionsTest.intExtensionArithmetic$atomicfu$NATIVE_PROPERTY_REF$Int' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> origin=null
            ARG arg1: CONST Int type=kotlin.Int value=2
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: CALL 'internal final fun getAndAddField (<this>: kotlin.reflect.KMutableProperty0<kotlin.Int>, delta: kotlin.Int): kotlin.Int declared in kotlin.concurrent' type=kotlin.Int origin=null
              ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> declared in <root>.ExtensionsTest.intExtensionArithmetic$atomicfu$NATIVE_PROPERTY_REF$Int' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> origin=null
              ARG delta: CONST Int type=kotlin.Int value=1
            ARG arg1: CONST Int type=kotlin.Int value=2
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: TYPE_OP type=kotlin.Int origin=CAST typeOperand=kotlin.Int
              CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                TYPE_ARG T: kotlin.Int
                ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                  ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> declared in <root>.ExtensionsTest.intExtensionArithmetic$atomicfu$NATIVE_PROPERTY_REF$Int' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> origin=null
            ARG arg1: CONST Int type=kotlin.Int value=3
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: CALL 'internal final fun getAndAddField (<this>: kotlin.reflect.KMutableProperty0<kotlin.Int>, delta: kotlin.Int): kotlin.Int declared in kotlin.concurrent' type=kotlin.Int origin=null
              ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> declared in <root>.ExtensionsTest.intExtensionArithmetic$atomicfu$NATIVE_PROPERTY_REF$Int' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> origin=null
              ARG delta: CONST Int type=kotlin.Int value=-1
            ARG arg1: CONST Int type=kotlin.Int value=3
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: TYPE_OP type=kotlin.Int origin=CAST typeOperand=kotlin.Int
              CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                TYPE_ARG T: kotlin.Int
                ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                  ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> declared in <root>.ExtensionsTest.intExtensionArithmetic$atomicfu$NATIVE_PROPERTY_REF$Int' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> origin=null
            ARG arg1: CONST Int type=kotlin.Int value=2
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: CALL 'internal final fun getAndAddField (<this>: kotlin.reflect.KMutableProperty0<kotlin.Int>, delta: kotlin.Int): kotlin.Int declared in kotlin.concurrent' type=kotlin.Int origin=null
              ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> declared in <root>.ExtensionsTest.intExtensionArithmetic$atomicfu$NATIVE_PROPERTY_REF$Int' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> origin=null
              ARG delta: CONST Int type=kotlin.Int value=2
            ARG arg1: CONST Int type=kotlin.Int value=2
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: TYPE_OP type=kotlin.Int origin=CAST typeOperand=kotlin.Int
              CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                TYPE_ARG T: kotlin.Int
                ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                  ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> declared in <root>.ExtensionsTest.intExtensionArithmetic$atomicfu$NATIVE_PROPERTY_REF$Int' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> origin=null
            ARG arg1: CONST Int type=kotlin.Int value=4
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: CALL 'public final fun plus (other: kotlin.Int): kotlin.Int declared in kotlin.Int' type=kotlin.Int origin=null
              ARG <this>: CALL 'internal final fun getAndAddField (<this>: kotlin.reflect.KMutableProperty0<kotlin.Int>, delta: kotlin.Int): kotlin.Int declared in kotlin.concurrent' type=kotlin.Int origin=null
                ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                  ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> declared in <root>.ExtensionsTest.intExtensionArithmetic$atomicfu$NATIVE_PROPERTY_REF$Int' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> origin=null
                ARG delta: CONST Int type=kotlin.Int value=3
              ARG other: CONST Int type=kotlin.Int value=3
            ARG arg1: CONST Int type=kotlin.Int value=7
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: TYPE_OP type=kotlin.Int origin=CAST typeOperand=kotlin.Int
              CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                TYPE_ARG T: kotlin.Int
                ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                  ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> declared in <root>.ExtensionsTest.intExtensionArithmetic$atomicfu$NATIVE_PROPERTY_REF$Int' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> origin=null
            ARG arg1: CONST Int type=kotlin.Int value=7
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: CALL 'public final fun plus (other: kotlin.Int): kotlin.Int declared in kotlin.Int' type=kotlin.Int origin=null
              ARG <this>: CALL 'internal final fun getAndAddField (<this>: kotlin.reflect.KMutableProperty0<kotlin.Int>, delta: kotlin.Int): kotlin.Int declared in kotlin.concurrent' type=kotlin.Int origin=null
                ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                  ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> declared in <root>.ExtensionsTest.intExtensionArithmetic$atomicfu$NATIVE_PROPERTY_REF$Int' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> origin=null
                ARG delta: CONST Int type=kotlin.Int value=1
              ARG other: CONST Int type=kotlin.Int value=1
            ARG arg1: CONST Int type=kotlin.Int value=8
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: TYPE_OP type=kotlin.Int origin=CAST typeOperand=kotlin.Int
              CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                TYPE_ARG T: kotlin.Int
                ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                  ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> declared in <root>.ExtensionsTest.intExtensionArithmetic$atomicfu$NATIVE_PROPERTY_REF$Int' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> origin=null
            ARG arg1: CONST Int type=kotlin.Int value=8
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: CALL 'public final fun plus (other: kotlin.Int): kotlin.Int declared in kotlin.Int' type=kotlin.Int origin=null
              ARG <this>: CALL 'internal final fun getAndAddField (<this>: kotlin.reflect.KMutableProperty0<kotlin.Int>, delta: kotlin.Int): kotlin.Int declared in kotlin.concurrent' type=kotlin.Int origin=null
                ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                  ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> declared in <root>.ExtensionsTest.intExtensionArithmetic$atomicfu$NATIVE_PROPERTY_REF$Int' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> origin=null
                ARG delta: CONST Int type=kotlin.Int value=-1
              ARG other: CONST Int type=kotlin.Int value=-1
            ARG arg1: CONST Int type=kotlin.Int value=7
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: TYPE_OP type=kotlin.Int origin=CAST typeOperand=kotlin.Int
              CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                TYPE_ARG T: kotlin.Int
                ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                  ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> declared in <root>.ExtensionsTest.intExtensionArithmetic$atomicfu$NATIVE_PROPERTY_REF$Int' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> origin=null
            ARG arg1: CONST Int type=kotlin.Int value=7
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'internal final fun compareAndSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.compareAndSetField>, expectedValue: T of kotlin.concurrent.compareAndSetField, newValue: T of kotlin.concurrent.compareAndSetField): kotlin.Boolean declared in kotlin.concurrent' type=kotlin.Boolean origin=null
            TYPE_ARG T: kotlin.Int
            ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
              ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> declared in <root>.ExtensionsTest.intExtensionArithmetic$atomicfu$NATIVE_PROPERTY_REF$Int' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> origin=null
            ARG expectedValue: CONST Int type=kotlin.Int value=7
            ARG newValue: CONST Int type=kotlin.Int value=10
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'internal final fun compareAndSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.compareAndSetField>, expectedValue: T of kotlin.concurrent.compareAndSetField, newValue: T of kotlin.concurrent.compareAndSetField): kotlin.Boolean declared in kotlin.concurrent' type=kotlin.Boolean origin=null
            TYPE_ARG T: kotlin.Int
            ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
              ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> declared in <root>.ExtensionsTest.intExtensionArithmetic$atomicfu$NATIVE_PROPERTY_REF$Int' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> origin=null
            ARG expectedValue: TYPE_OP type=kotlin.Int origin=CAST typeOperand=kotlin.Int
              CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                TYPE_ARG T: kotlin.Int
                ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                  ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> declared in <root>.ExtensionsTest.intExtensionArithmetic$atomicfu$NATIVE_PROPERTY_REF$Int' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> origin=null
            ARG newValue: CONST Int type=kotlin.Int value=55
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: TYPE_OP type=kotlin.Int origin=CAST typeOperand=kotlin.Int
              CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                TYPE_ARG T: kotlin.Int
                ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                  ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> declared in <root>.ExtensionsTest.intExtensionArithmetic$atomicfu$NATIVE_PROPERTY_REF$Int' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> origin=null
            ARG arg1: CONST Int type=kotlin.Int value=55
    FUN ATOMICFU_GENERATED_FUNCTION name:longExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Long visibility:private modality:FINAL returnType:kotlin.Unit [inline]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.ExtensionsTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.concurrent.AtomicLongArray
      VALUE_PARAMETER kind:Regular name:index$atomicfu index:2 type:kotlin.Int
      BLOCK_BODY
        CALL 'public final fun set (index: kotlin.Int, newValue: kotlin.Long): kotlin.Unit declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicLongArray declared in <root>.ExtensionsTest.longExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.concurrent.AtomicLongArray origin=null
          ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ExtensionsTest.longExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.Int origin=null
          ARG newValue: CONST Long type=kotlin.Long value=2424920024888888848
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: TYPE_OP type=kotlin.Long origin=CAST typeOperand=kotlin.Long
              CALL 'public final fun get (index: kotlin.Int): kotlin.Long declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Long origin=null
                ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicLongArray declared in <root>.ExtensionsTest.longExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.concurrent.AtomicLongArray origin=null
                ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ExtensionsTest.longExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.Int origin=null
            ARG arg1: CONST Long type=kotlin.Long value=2424920024888888848
        CALL 'public final fun set (index: kotlin.Int, newValue: kotlin.Long): kotlin.Unit declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicLongArray declared in <root>.ExtensionsTest.longExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.concurrent.AtomicLongArray origin=null
          ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ExtensionsTest.longExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.Int origin=null
          ARG newValue: CONST Long type=kotlin.Long value=8424920024888888848
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: TYPE_OP type=kotlin.Long origin=CAST typeOperand=kotlin.Long
              CALL 'public final fun get (index: kotlin.Int): kotlin.Long declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Long origin=null
                ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicLongArray declared in <root>.ExtensionsTest.longExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.concurrent.AtomicLongArray origin=null
                ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ExtensionsTest.longExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.Int origin=null
            ARG arg1: CONST Long type=kotlin.Long value=8424920024888888848
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: CALL 'public final fun getAndSet (index: kotlin.Int, newValue: kotlin.Long): kotlin.Long declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Long origin=null
              ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicLongArray declared in <root>.ExtensionsTest.longExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.concurrent.AtomicLongArray origin=null
              ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ExtensionsTest.longExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.Int origin=null
              ARG newValue: CONST Long type=kotlin.Long value=8924920024888888848
            ARG arg1: CONST Long type=kotlin.Long value=8424920024888888848
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: TYPE_OP type=kotlin.Long origin=CAST typeOperand=kotlin.Long
              CALL 'public final fun get (index: kotlin.Int): kotlin.Long declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Long origin=null
                ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicLongArray declared in <root>.ExtensionsTest.longExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.concurrent.AtomicLongArray origin=null
                ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ExtensionsTest.longExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.Int origin=null
            ARG arg1: CONST Long type=kotlin.Long value=8924920024888888848
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: CALL 'public final fun incrementAndGet (index: kotlin.Int): kotlin.Long declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Long origin=null
              ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicLongArray declared in <root>.ExtensionsTest.longExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.concurrent.AtomicLongArray origin=null
              ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ExtensionsTest.longExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.Int origin=null
            ARG arg1: CONST Long type=kotlin.Long value=8924920024888888849
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: TYPE_OP type=kotlin.Long origin=CAST typeOperand=kotlin.Long
              CALL 'public final fun get (index: kotlin.Int): kotlin.Long declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Long origin=null
                ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicLongArray declared in <root>.ExtensionsTest.longExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.concurrent.AtomicLongArray origin=null
                ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ExtensionsTest.longExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.Int origin=null
            ARG arg1: CONST Long type=kotlin.Long value=8924920024888888849
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: CALL 'public final fun getAndDecrement (index: kotlin.Int): kotlin.Long declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Long origin=null
              ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicLongArray declared in <root>.ExtensionsTest.longExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.concurrent.AtomicLongArray origin=null
              ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ExtensionsTest.longExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.Int origin=null
            ARG arg1: CONST Long type=kotlin.Long value=8924920024888888849
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: TYPE_OP type=kotlin.Long origin=CAST typeOperand=kotlin.Long
              CALL 'public final fun get (index: kotlin.Int): kotlin.Long declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Long origin=null
                ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicLongArray declared in <root>.ExtensionsTest.longExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.concurrent.AtomicLongArray origin=null
                ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ExtensionsTest.longExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.Int origin=null
            ARG arg1: CONST Long type=kotlin.Long value=8924920024888888848
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: CALL 'public final fun getAndAdd (index: kotlin.Int, delta: kotlin.Long): kotlin.Long declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Long origin=null
              ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicLongArray declared in <root>.ExtensionsTest.longExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.concurrent.AtomicLongArray origin=null
              ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ExtensionsTest.longExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.Int origin=null
              ARG delta: CONST Long type=kotlin.Long value=100000000000000000
            ARG arg1: CONST Long type=kotlin.Long value=8924920024888888848
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: TYPE_OP type=kotlin.Long origin=CAST typeOperand=kotlin.Long
              CALL 'public final fun get (index: kotlin.Int): kotlin.Long declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Long origin=null
                ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicLongArray declared in <root>.ExtensionsTest.longExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.concurrent.AtomicLongArray origin=null
                ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ExtensionsTest.longExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.Int origin=null
            ARG arg1: CONST Long type=kotlin.Long value=9024920024888888848
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: CALL 'public final fun addAndGet (index: kotlin.Int, delta: kotlin.Long): kotlin.Long declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Long origin=null
              ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicLongArray declared in <root>.ExtensionsTest.longExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.concurrent.AtomicLongArray origin=null
              ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ExtensionsTest.longExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.Int origin=null
              ARG delta: CONST Long type=kotlin.Long value=-9223372036854775807
            ARG arg1: CONST Long type=kotlin.Long value=-198452011965886959
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: TYPE_OP type=kotlin.Long origin=CAST typeOperand=kotlin.Long
              CALL 'public final fun get (index: kotlin.Int): kotlin.Long declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Long origin=null
                ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicLongArray declared in <root>.ExtensionsTest.longExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.concurrent.AtomicLongArray origin=null
                ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ExtensionsTest.longExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.Int origin=null
            ARG arg1: CONST Long type=kotlin.Long value=-198452011965886959
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: CALL 'public final fun incrementAndGet (index: kotlin.Int): kotlin.Long declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Long origin=null
              ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicLongArray declared in <root>.ExtensionsTest.longExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.concurrent.AtomicLongArray origin=null
              ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ExtensionsTest.longExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.Int origin=null
            ARG arg1: CONST Long type=kotlin.Long value=-198452011965886958
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: TYPE_OP type=kotlin.Long origin=CAST typeOperand=kotlin.Long
              CALL 'public final fun get (index: kotlin.Int): kotlin.Long declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Long origin=null
                ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicLongArray declared in <root>.ExtensionsTest.longExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.concurrent.AtomicLongArray origin=null
                ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ExtensionsTest.longExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.Int origin=null
            ARG arg1: CONST Long type=kotlin.Long value=-198452011965886958
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: CALL 'public final fun decrementAndGet (index: kotlin.Int): kotlin.Long declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Long origin=null
              ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicLongArray declared in <root>.ExtensionsTest.longExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.concurrent.AtomicLongArray origin=null
              ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ExtensionsTest.longExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.Int origin=null
            ARG arg1: CONST Long type=kotlin.Long value=-198452011965886959
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: TYPE_OP type=kotlin.Long origin=CAST typeOperand=kotlin.Long
              CALL 'public final fun get (index: kotlin.Int): kotlin.Long declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Long origin=null
                ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicLongArray declared in <root>.ExtensionsTest.longExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.concurrent.AtomicLongArray origin=null
                ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ExtensionsTest.longExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Long' type=kotlin.Int origin=null
            ARG arg1: CONST Long type=kotlin.Long value=-198452011965886959
    FUN ATOMICFU_GENERATED_FUNCTION name:longExtensionArithmetic$atomicfu$NATIVE_PROPERTY_REF$Long visibility:private modality:FINAL returnType:kotlin.Unit [inline]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.ExtensionsTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> [crossinline]
      BLOCK_BODY
        CALL 'internal final fun atomicSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicSetField>, newValue: T of kotlin.concurrent.atomicSetField): kotlin.Unit declared in kotlin.concurrent' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Long
          ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
            ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> declared in <root>.ExtensionsTest.longExtensionArithmetic$atomicfu$NATIVE_PROPERTY_REF$Long' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> origin=null
          ARG newValue: CONST Long type=kotlin.Long value=2424920024888888848
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: TYPE_OP type=kotlin.Long origin=CAST typeOperand=kotlin.Long
              CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                TYPE_ARG T: kotlin.Long
                ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                  ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> declared in <root>.ExtensionsTest.longExtensionArithmetic$atomicfu$NATIVE_PROPERTY_REF$Long' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> origin=null
            ARG arg1: CONST Long type=kotlin.Long value=2424920024888888848
        CALL 'internal final fun atomicSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicSetField>, newValue: T of kotlin.concurrent.atomicSetField): kotlin.Unit declared in kotlin.concurrent' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Long
          ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
            ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> declared in <root>.ExtensionsTest.longExtensionArithmetic$atomicfu$NATIVE_PROPERTY_REF$Long' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> origin=null
          ARG newValue: CONST Long type=kotlin.Long value=8424920024888888848
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: TYPE_OP type=kotlin.Long origin=CAST typeOperand=kotlin.Long
              CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                TYPE_ARG T: kotlin.Long
                ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                  ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> declared in <root>.ExtensionsTest.longExtensionArithmetic$atomicfu$NATIVE_PROPERTY_REF$Long' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> origin=null
            ARG arg1: CONST Long type=kotlin.Long value=8424920024888888848
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: CALL 'internal final fun getAndSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.getAndSetField>, newValue: T of kotlin.concurrent.getAndSetField): T of kotlin.concurrent.getAndSetField declared in kotlin.concurrent' type=T of kotlin.concurrent.getAndSetField origin=null
              TYPE_ARG T: kotlin.Long
              ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> declared in <root>.ExtensionsTest.longExtensionArithmetic$atomicfu$NATIVE_PROPERTY_REF$Long' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> origin=null
              ARG newValue: CONST Long type=kotlin.Long value=8924920024888888848
            ARG arg1: CONST Long type=kotlin.Long value=8424920024888888848
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: TYPE_OP type=kotlin.Long origin=CAST typeOperand=kotlin.Long
              CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                TYPE_ARG T: kotlin.Long
                ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                  ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> declared in <root>.ExtensionsTest.longExtensionArithmetic$atomicfu$NATIVE_PROPERTY_REF$Long' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> origin=null
            ARG arg1: CONST Long type=kotlin.Long value=8924920024888888848
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: CALL 'public final fun plus (other: kotlin.Long): kotlin.Long declared in kotlin.Long' type=kotlin.Long origin=null
              ARG <this>: CALL 'internal final fun getAndAddField (<this>: kotlin.reflect.KMutableProperty0<kotlin.Long>, delta: kotlin.Long): kotlin.Long declared in kotlin.concurrent' type=kotlin.Long origin=null
                ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                  ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> declared in <root>.ExtensionsTest.longExtensionArithmetic$atomicfu$NATIVE_PROPERTY_REF$Long' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> origin=null
                ARG delta: TYPE_OP type=kotlin.Long origin=IMPLICIT_CAST typeOperand=kotlin.Long
                  CONST Long type=kotlin.Long value=1
              ARG other: CONST Long type=kotlin.Long value=1
            ARG arg1: CONST Long type=kotlin.Long value=8924920024888888849
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: TYPE_OP type=kotlin.Long origin=CAST typeOperand=kotlin.Long
              CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                TYPE_ARG T: kotlin.Long
                ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                  ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> declared in <root>.ExtensionsTest.longExtensionArithmetic$atomicfu$NATIVE_PROPERTY_REF$Long' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> origin=null
            ARG arg1: CONST Long type=kotlin.Long value=8924920024888888849
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: CALL 'internal final fun getAndAddField (<this>: kotlin.reflect.KMutableProperty0<kotlin.Long>, delta: kotlin.Long): kotlin.Long declared in kotlin.concurrent' type=kotlin.Long origin=null
              ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> declared in <root>.ExtensionsTest.longExtensionArithmetic$atomicfu$NATIVE_PROPERTY_REF$Long' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> origin=null
              ARG delta: TYPE_OP type=kotlin.Long origin=IMPLICIT_CAST typeOperand=kotlin.Long
                CONST Long type=kotlin.Long value=-1
            ARG arg1: CONST Long type=kotlin.Long value=8924920024888888849
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: TYPE_OP type=kotlin.Long origin=CAST typeOperand=kotlin.Long
              CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                TYPE_ARG T: kotlin.Long
                ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                  ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> declared in <root>.ExtensionsTest.longExtensionArithmetic$atomicfu$NATIVE_PROPERTY_REF$Long' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> origin=null
            ARG arg1: CONST Long type=kotlin.Long value=8924920024888888848
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: CALL 'internal final fun getAndAddField (<this>: kotlin.reflect.KMutableProperty0<kotlin.Long>, delta: kotlin.Long): kotlin.Long declared in kotlin.concurrent' type=kotlin.Long origin=null
              ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> declared in <root>.ExtensionsTest.longExtensionArithmetic$atomicfu$NATIVE_PROPERTY_REF$Long' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> origin=null
              ARG delta: TYPE_OP type=kotlin.Long origin=IMPLICIT_CAST typeOperand=kotlin.Long
                CONST Long type=kotlin.Long value=100000000000000000
            ARG arg1: CONST Long type=kotlin.Long value=8924920024888888848
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: TYPE_OP type=kotlin.Long origin=CAST typeOperand=kotlin.Long
              CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                TYPE_ARG T: kotlin.Long
                ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                  ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> declared in <root>.ExtensionsTest.longExtensionArithmetic$atomicfu$NATIVE_PROPERTY_REF$Long' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> origin=null
            ARG arg1: CONST Long type=kotlin.Long value=9024920024888888848
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: CALL 'public final fun plus (other: kotlin.Long): kotlin.Long declared in kotlin.Long' type=kotlin.Long origin=null
              ARG <this>: CALL 'internal final fun getAndAddField (<this>: kotlin.reflect.KMutableProperty0<kotlin.Long>, delta: kotlin.Long): kotlin.Long declared in kotlin.concurrent' type=kotlin.Long origin=null
                ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                  ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> declared in <root>.ExtensionsTest.longExtensionArithmetic$atomicfu$NATIVE_PROPERTY_REF$Long' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> origin=null
                ARG delta: TYPE_OP type=kotlin.Long origin=IMPLICIT_CAST typeOperand=kotlin.Long
                  CONST Long type=kotlin.Long value=-9223372036854775807
              ARG other: CONST Long type=kotlin.Long value=-9223372036854775807
            ARG arg1: CONST Long type=kotlin.Long value=-198452011965886959
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: TYPE_OP type=kotlin.Long origin=CAST typeOperand=kotlin.Long
              CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                TYPE_ARG T: kotlin.Long
                ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                  ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> declared in <root>.ExtensionsTest.longExtensionArithmetic$atomicfu$NATIVE_PROPERTY_REF$Long' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> origin=null
            ARG arg1: CONST Long type=kotlin.Long value=-198452011965886959
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: CALL 'public final fun plus (other: kotlin.Long): kotlin.Long declared in kotlin.Long' type=kotlin.Long origin=null
              ARG <this>: CALL 'internal final fun getAndAddField (<this>: kotlin.reflect.KMutableProperty0<kotlin.Long>, delta: kotlin.Long): kotlin.Long declared in kotlin.concurrent' type=kotlin.Long origin=null
                ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                  ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> declared in <root>.ExtensionsTest.longExtensionArithmetic$atomicfu$NATIVE_PROPERTY_REF$Long' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> origin=null
                ARG delta: TYPE_OP type=kotlin.Long origin=IMPLICIT_CAST typeOperand=kotlin.Long
                  CONST Long type=kotlin.Long value=1
              ARG other: CONST Long type=kotlin.Long value=1
            ARG arg1: CONST Long type=kotlin.Long value=-198452011965886958
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: TYPE_OP type=kotlin.Long origin=CAST typeOperand=kotlin.Long
              CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                TYPE_ARG T: kotlin.Long
                ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                  ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> declared in <root>.ExtensionsTest.longExtensionArithmetic$atomicfu$NATIVE_PROPERTY_REF$Long' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> origin=null
            ARG arg1: CONST Long type=kotlin.Long value=-198452011965886958
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: CALL 'public final fun plus (other: kotlin.Long): kotlin.Long declared in kotlin.Long' type=kotlin.Long origin=null
              ARG <this>: CALL 'internal final fun getAndAddField (<this>: kotlin.reflect.KMutableProperty0<kotlin.Long>, delta: kotlin.Long): kotlin.Long declared in kotlin.concurrent' type=kotlin.Long origin=null
                ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                  ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> declared in <root>.ExtensionsTest.longExtensionArithmetic$atomicfu$NATIVE_PROPERTY_REF$Long' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> origin=null
                ARG delta: TYPE_OP type=kotlin.Long origin=IMPLICIT_CAST typeOperand=kotlin.Long
                  CONST Long type=kotlin.Long value=-1
              ARG other: CONST Long type=kotlin.Long value=-1
            ARG arg1: CONST Long type=kotlin.Long value=-198452011965886959
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: TYPE_OP type=kotlin.Long origin=CAST typeOperand=kotlin.Long
              CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                TYPE_ARG T: kotlin.Long
                ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                  ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> declared in <root>.ExtensionsTest.longExtensionArithmetic$atomicfu$NATIVE_PROPERTY_REF$Long' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> origin=null
            ARG arg1: CONST Long type=kotlin.Long value=-198452011965886959
    FUN ATOMICFU_GENERATED_FUNCTION name:refExtension$atomicfu$ATOMIC_ARRAY$Any visibility:private modality:FINAL returnType:kotlin.Unit [inline]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.ExtensionsTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.concurrent.AtomicArray<kotlin.Any?>
      VALUE_PARAMETER kind:Regular name:index$atomicfu index:2 type:kotlin.Int
      BLOCK_BODY
        CALL 'public final fun set (index: kotlin.Int, newValue: T of kotlin.concurrent.AtomicArray): kotlin.Unit declared in kotlin.concurrent.AtomicArray' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicArray<kotlin.Any?> declared in <root>.ExtensionsTest.refExtension$atomicfu$ATOMIC_ARRAY$Any' type=kotlin.concurrent.AtomicArray<kotlin.Any?> origin=null
          ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ExtensionsTest.refExtension$atomicfu$ATOMIC_ARRAY$Any' type=kotlin.Int origin=null
          ARG newValue: CONST String type=kotlin.String value="aaa"
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: TYPE_OP type=kotlin.Any? origin=CAST typeOperand=kotlin.Any?
              CALL 'public final fun get (index: kotlin.Int): T of kotlin.concurrent.AtomicArray declared in kotlin.concurrent.AtomicArray' type=T of kotlin.concurrent.AtomicArray origin=null
                ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicArray<kotlin.Any?> declared in <root>.ExtensionsTest.refExtension$atomicfu$ATOMIC_ARRAY$Any' type=kotlin.concurrent.AtomicArray<kotlin.Any?> origin=null
                ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ExtensionsTest.refExtension$atomicfu$ATOMIC_ARRAY$Any' type=kotlin.Int origin=null
            ARG arg1: CONST String type=kotlin.String value="aaa"
        CALL 'public final fun set (index: kotlin.Int, newValue: T of kotlin.concurrent.AtomicArray): kotlin.Unit declared in kotlin.concurrent.AtomicArray' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicArray<kotlin.Any?> declared in <root>.ExtensionsTest.refExtension$atomicfu$ATOMIC_ARRAY$Any' type=kotlin.concurrent.AtomicArray<kotlin.Any?> origin=null
          ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ExtensionsTest.refExtension$atomicfu$ATOMIC_ARRAY$Any' type=kotlin.Int origin=null
          ARG newValue: CONST String type=kotlin.String value="bb"
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: TYPE_OP type=kotlin.Any? origin=CAST typeOperand=kotlin.Any?
              CALL 'public final fun get (index: kotlin.Int): T of kotlin.concurrent.AtomicArray declared in kotlin.concurrent.AtomicArray' type=T of kotlin.concurrent.AtomicArray origin=null
                ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicArray<kotlin.Any?> declared in <root>.ExtensionsTest.refExtension$atomicfu$ATOMIC_ARRAY$Any' type=kotlin.concurrent.AtomicArray<kotlin.Any?> origin=null
                ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ExtensionsTest.refExtension$atomicfu$ATOMIC_ARRAY$Any' type=kotlin.Int origin=null
            ARG arg1: CONST String type=kotlin.String value="bb"
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: CALL 'public final fun getAndSet (index: kotlin.Int, newValue: T of kotlin.concurrent.AtomicArray): T of kotlin.concurrent.AtomicArray declared in kotlin.concurrent.AtomicArray' type=T of kotlin.concurrent.AtomicArray origin=null
              ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicArray<kotlin.Any?> declared in <root>.ExtensionsTest.refExtension$atomicfu$ATOMIC_ARRAY$Any' type=kotlin.concurrent.AtomicArray<kotlin.Any?> origin=null
              ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ExtensionsTest.refExtension$atomicfu$ATOMIC_ARRAY$Any' type=kotlin.Int origin=null
              ARG newValue: CONST String type=kotlin.String value="ccc"
            ARG arg1: CONST String type=kotlin.String value="bb"
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: TYPE_OP type=kotlin.Any? origin=CAST typeOperand=kotlin.Any?
              CALL 'public final fun get (index: kotlin.Int): T of kotlin.concurrent.AtomicArray declared in kotlin.concurrent.AtomicArray' type=T of kotlin.concurrent.AtomicArray origin=null
                ARG <this>: GET_VAR 'handler$atomicfu: kotlin.concurrent.AtomicArray<kotlin.Any?> declared in <root>.ExtensionsTest.refExtension$atomicfu$ATOMIC_ARRAY$Any' type=kotlin.concurrent.AtomicArray<kotlin.Any?> origin=null
                ARG index: GET_VAR 'index$atomicfu: kotlin.Int declared in <root>.ExtensionsTest.refExtension$atomicfu$ATOMIC_ARRAY$Any' type=kotlin.Int origin=null
            ARG arg1: CONST String type=kotlin.String value="ccc"
    FUN ATOMICFU_GENERATED_FUNCTION name:refExtension$atomicfu$NATIVE_PROPERTY_REF$Any visibility:private modality:FINAL returnType:kotlin.Unit [inline]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.ExtensionsTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Any?>> [crossinline]
      BLOCK_BODY
        CALL 'internal final fun atomicSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicSetField>, newValue: T of kotlin.concurrent.atomicSetField): kotlin.Unit declared in kotlin.concurrent' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Any?
          ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
            ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Any?>> declared in <root>.ExtensionsTest.refExtension$atomicfu$NATIVE_PROPERTY_REF$Any' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Any?>> origin=null
          ARG newValue: CONST String type=kotlin.String value="aaa"
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: TYPE_OP type=kotlin.Any? origin=CAST typeOperand=kotlin.Any?
              CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                TYPE_ARG T: kotlin.Any?
                ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                  ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Any?>> declared in <root>.ExtensionsTest.refExtension$atomicfu$NATIVE_PROPERTY_REF$Any' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Any?>> origin=null
            ARG arg1: CONST String type=kotlin.String value="aaa"
        CALL 'internal final fun atomicSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicSetField>, newValue: T of kotlin.concurrent.atomicSetField): kotlin.Unit declared in kotlin.concurrent' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Any?
          ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
            ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Any?>> declared in <root>.ExtensionsTest.refExtension$atomicfu$NATIVE_PROPERTY_REF$Any' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Any?>> origin=null
          ARG newValue: CONST String type=kotlin.String value="bb"
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: TYPE_OP type=kotlin.Any? origin=CAST typeOperand=kotlin.Any?
              CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                TYPE_ARG T: kotlin.Any?
                ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                  ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Any?>> declared in <root>.ExtensionsTest.refExtension$atomicfu$NATIVE_PROPERTY_REF$Any' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Any?>> origin=null
            ARG arg1: CONST String type=kotlin.String value="bb"
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: CALL 'internal final fun getAndSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.getAndSetField>, newValue: T of kotlin.concurrent.getAndSetField): T of kotlin.concurrent.getAndSetField declared in kotlin.concurrent' type=T of kotlin.concurrent.getAndSetField origin=null
              TYPE_ARG T: kotlin.Any?
              ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Any?>> declared in <root>.ExtensionsTest.refExtension$atomicfu$NATIVE_PROPERTY_REF$Any' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Any?>> origin=null
              ARG newValue: CONST String type=kotlin.String value="ccc"
            ARG arg1: CONST String type=kotlin.String value="bb"
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: TYPE_OP type=kotlin.Any? origin=CAST typeOperand=kotlin.Any?
              CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                TYPE_ARG T: kotlin.Any?
                ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                  ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Any?>> declared in <root>.ExtensionsTest.refExtension$atomicfu$NATIVE_PROPERTY_REF$Any' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Any?>> origin=null
            ARG arg1: CONST String type=kotlin.String value="ccc"
    FUN FAKE_OVERRIDE name:equals visibility:public modality:OPEN returnType:kotlin.Boolean [fake_override,operator]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Any
      VALUE_PARAMETER kind:Regular name:other index:1 type:kotlin.Any?
      overridden:
        public open fun equals (other: kotlin.Any?): kotlin.Boolean declared in kotlin.Any
    FUN FAKE_OVERRIDE name:hashCode visibility:public modality:OPEN returnType:kotlin.Int [fake_override]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Any
      overridden:
        public open fun hashCode (): kotlin.Int declared in kotlin.Any
    FUN FAKE_OVERRIDE name:toString visibility:public modality:OPEN returnType:kotlin.String [fake_override]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Any
      overridden:
        public open fun toString (): kotlin.String declared in kotlin.Any
    FUN name:testExtension visibility:public modality:FINAL returnType:kotlin.Unit
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.ExtensionsTest
      BLOCK_BODY
        CALL 'private final fun intExtensionArithmetic$atomicfu$NATIVE_PROPERTY_REF$Int (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>>): kotlin.Unit declared in <root>.ExtensionsTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.ExtensionsTest declared in <root>.ExtensionsTest.testExtension' type=<root>.ExtensionsTest origin=IMPLICIT_ARGUMENT
          ARG handler$atomicfu: FUN_EXPR type=kotlin.Function0<kotlin.Int> origin=LAMBDA
            FUN ATOMICFU_GENERATED_FUNCTION name:<a$volatile-getter> visibility:local modality:FINAL returnType:kotlin.Int [inline]
              BLOCK_BODY
                RETURN type=kotlin.Nothing from='local final fun <a$volatile-getter> (): kotlin.Int declared in <root>.ExtensionsTest.testExtension'
                  PROPERTY_REFERENCE 'private final a$volatile: kotlin.Int declared in <root>.ExtensionsTest' field='FIELD ATOMICFU_GENERATED_FIELD name:a$volatile type:kotlin.Int visibility:private declared in <root>.ExtensionsTest' getter='private final fun <get-a$volatile> (): kotlin.Int declared in <root>.ExtensionsTest' setter='private final fun <set-a$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.ExtensionsTest' type=kotlin.Int origin=null
                    ARG 1: GET_VAR '<this>: <root>.ExtensionsTest declared in <root>.ExtensionsTest.testExtension' type=<root>.ExtensionsTest origin=IMPLICIT_ARGUMENT
        CALL 'private final fun longExtensionArithmetic$atomicfu$NATIVE_PROPERTY_REF$Long (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>>): kotlin.Unit declared in <root>.ExtensionsTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.ExtensionsTest declared in <root>.ExtensionsTest.testExtension' type=<root>.ExtensionsTest origin=IMPLICIT_ARGUMENT
          ARG handler$atomicfu: FUN_EXPR type=kotlin.Function0<kotlin.Long> origin=LAMBDA
            FUN ATOMICFU_GENERATED_FUNCTION name:<l$volatile-getter> visibility:local modality:FINAL returnType:kotlin.Long [inline]
              BLOCK_BODY
                RETURN type=kotlin.Nothing from='local final fun <l$volatile-getter> (): kotlin.Long declared in <root>.ExtensionsTest.testExtension'
                  PROPERTY_REFERENCE 'private final l$volatile: kotlin.Long declared in <root>.ExtensionsTest' field='FIELD ATOMICFU_GENERATED_FIELD name:l$volatile type:kotlin.Long visibility:private declared in <root>.ExtensionsTest' getter='private final fun <get-l$volatile> (): kotlin.Long declared in <root>.ExtensionsTest' setter='private final fun <set-l$volatile> (value: kotlin.Long): kotlin.Unit declared in <root>.ExtensionsTest' type=kotlin.Long origin=null
                    ARG 1: GET_VAR '<this>: <root>.ExtensionsTest declared in <root>.ExtensionsTest.testExtension' type=<root>.ExtensionsTest origin=IMPLICIT_ARGUMENT
        CALL 'private final fun refExtension$atomicfu$NATIVE_PROPERTY_REF$Any (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Any?>>): kotlin.Unit declared in <root>.ExtensionsTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.ExtensionsTest declared in <root>.ExtensionsTest.testExtension' type=<root>.ExtensionsTest origin=IMPLICIT_ARGUMENT
          ARG handler$atomicfu: FUN_EXPR type=kotlin.Function0<kotlin.Any?> origin=LAMBDA
            FUN ATOMICFU_GENERATED_FUNCTION name:<s$volatile-getter> visibility:local modality:FINAL returnType:kotlin.Any? [inline]
              BLOCK_BODY
                RETURN type=kotlin.Nothing from='local final fun <s$volatile-getter> (): kotlin.Any? declared in <root>.ExtensionsTest.testExtension'
                  PROPERTY_REFERENCE 'private final s$volatile: kotlin.Any? declared in <root>.ExtensionsTest' field='FIELD ATOMICFU_GENERATED_FIELD name:s$volatile type:kotlin.Any? visibility:private declared in <root>.ExtensionsTest' getter='private final fun <get-s$volatile> (): kotlin.Any? declared in <root>.ExtensionsTest' setter='private final fun <set-s$volatile> (value: kotlin.Any?): kotlin.Unit declared in <root>.ExtensionsTest' type=kotlin.Any? origin=null
                    ARG 1: GET_VAR '<this>: <root>.ExtensionsTest declared in <root>.ExtensionsTest.testExtension' type=<root>.ExtensionsTest origin=IMPLICIT_ARGUMENT
        CALL 'private final fun booleanExtensionArithmetic$atomicfu$NATIVE_PROPERTY_REF$Boolean (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Boolean>>): kotlin.Unit declared in <root>.ExtensionsTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.ExtensionsTest declared in <root>.ExtensionsTest.testExtension' type=<root>.ExtensionsTest origin=IMPLICIT_ARGUMENT
          ARG handler$atomicfu: FUN_EXPR type=kotlin.Function0<kotlin.Boolean> origin=LAMBDA
            FUN ATOMICFU_GENERATED_FUNCTION name:<b$volatile-getter> visibility:local modality:FINAL returnType:kotlin.Boolean [inline]
              BLOCK_BODY
                RETURN type=kotlin.Nothing from='local final fun <b$volatile-getter> (): kotlin.Boolean declared in <root>.ExtensionsTest.testExtension'
                  PROPERTY_REFERENCE 'private final b$volatile: kotlin.Boolean declared in <root>.ExtensionsTest' field='FIELD ATOMICFU_GENERATED_FIELD name:b$volatile type:kotlin.Boolean visibility:private declared in <root>.ExtensionsTest' getter='private final fun <get-b$volatile> (): kotlin.Boolean declared in <root>.ExtensionsTest' setter='private final fun <set-b$volatile> (value: kotlin.Boolean): kotlin.Unit declared in <root>.ExtensionsTest' type=kotlin.Boolean origin=null
                    ARG 1: GET_VAR '<this>: <root>.ExtensionsTest declared in <root>.ExtensionsTest.testExtension' type=<root>.ExtensionsTest origin=IMPLICIT_ARGUMENT
    FUN name:testScopedFieldGetters visibility:public modality:FINAL returnType:kotlin.Unit
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.ExtensionsTest
      BLOCK_BODY
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: TYPE_OP type=kotlin.Int origin=CAST typeOperand=kotlin.Int
              CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                TYPE_ARG T: kotlin.Int
                ARG <this>: PROPERTY_REFERENCE 'private final a$volatile: kotlin.Int declared in <root>.ExtensionsTest' field='FIELD ATOMICFU_GENERATED_FIELD name:a$volatile type:kotlin.Int visibility:private declared in <root>.ExtensionsTest' getter='private final fun <get-a$volatile> (): kotlin.Int declared in <root>.ExtensionsTest' setter='private final fun <set-a$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.ExtensionsTest' type=kotlin.Int origin=null
                  ARG 1: GET_VAR '<this>: <root>.ExtensionsTest declared in <root>.ExtensionsTest.testScopedFieldGetters' type=<root>.ExtensionsTest origin=IMPLICIT_ARGUMENT
            ARG arg1: CONST Int type=kotlin.Int value=0
        VAR name:update type:kotlin.Int [val]
          CONST Int type=kotlin.Int value=3
        CALL 'internal final fun atomicSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicSetField>, newValue: T of kotlin.concurrent.atomicSetField): kotlin.Unit declared in kotlin.concurrent' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Int
          ARG <this>: PROPERTY_REFERENCE 'private final a$volatile: kotlin.Int declared in <root>.ExtensionsTest' field='FIELD ATOMICFU_GENERATED_FIELD name:a$volatile type:kotlin.Int visibility:private declared in <root>.ExtensionsTest' getter='private final fun <get-a$volatile> (): kotlin.Int declared in <root>.ExtensionsTest' setter='private final fun <set-a$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.ExtensionsTest' type=kotlin.Int origin=null
            ARG 1: GET_VAR '<this>: <root>.ExtensionsTest declared in <root>.ExtensionsTest.testScopedFieldGetters' type=<root>.ExtensionsTest origin=IMPLICIT_ARGUMENT
          ARG newValue: GET_VAR 'val update: kotlin.Int declared in <root>.ExtensionsTest.testScopedFieldGetters' type=kotlin.Int origin=null
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'internal final fun compareAndSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.compareAndSetField>, expectedValue: T of kotlin.concurrent.compareAndSetField, newValue: T of kotlin.concurrent.compareAndSetField): kotlin.Boolean declared in kotlin.concurrent' type=kotlin.Boolean origin=null
            TYPE_ARG T: kotlin.Int
            ARG <this>: PROPERTY_REFERENCE 'private final a$volatile: kotlin.Int declared in <root>.ExtensionsTest' field='FIELD ATOMICFU_GENERATED_FIELD name:a$volatile type:kotlin.Int visibility:private declared in <root>.ExtensionsTest' getter='private final fun <get-a$volatile> (): kotlin.Int declared in <root>.ExtensionsTest' setter='private final fun <set-a$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.ExtensionsTest' type=kotlin.Int origin=null
              ARG 1: GET_VAR '<this>: <root>.ExtensionsTest declared in <root>.ExtensionsTest.testScopedFieldGetters' type=<root>.ExtensionsTest origin=IMPLICIT_ARGUMENT
            ARG expectedValue: GET_VAR 'val update: kotlin.Int declared in <root>.ExtensionsTest.testScopedFieldGetters' type=kotlin.Int origin=null
            ARG newValue: CONST Int type=kotlin.Int value=8
        CALL 'internal final fun atomicSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicSetField>, newValue: T of kotlin.concurrent.atomicSetField): kotlin.Unit declared in kotlin.concurrent' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Int
          ARG <this>: PROPERTY_REFERENCE 'private final a$volatile: kotlin.Int declared in <root>.ExtensionsTest' field='FIELD ATOMICFU_GENERATED_FIELD name:a$volatile type:kotlin.Int visibility:private declared in <root>.ExtensionsTest' getter='private final fun <get-a$volatile> (): kotlin.Int declared in <root>.ExtensionsTest' setter='private final fun <set-a$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.ExtensionsTest' type=kotlin.Int origin=null
            ARG 1: GET_VAR '<this>: <root>.ExtensionsTest declared in <root>.ExtensionsTest.testScopedFieldGetters' type=<root>.ExtensionsTest origin=IMPLICIT_ARGUMENT
          ARG newValue: CONST Int type=kotlin.Int value=1
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: TYPE_OP type=kotlin.Int origin=CAST typeOperand=kotlin.Int
              CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                TYPE_ARG T: kotlin.Int
                ARG <this>: PROPERTY_REFERENCE 'private final a$volatile: kotlin.Int declared in <root>.ExtensionsTest' field='FIELD ATOMICFU_GENERATED_FIELD name:a$volatile type:kotlin.Int visibility:private declared in <root>.ExtensionsTest' getter='private final fun <get-a$volatile> (): kotlin.Int declared in <root>.ExtensionsTest' setter='private final fun <set-a$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.ExtensionsTest' type=kotlin.Int origin=null
                  ARG 1: GET_VAR '<this>: <root>.ExtensionsTest declared in <root>.ExtensionsTest.testScopedFieldGetters' type=<root>.ExtensionsTest origin=IMPLICIT_ARGUMENT
            ARG arg1: CONST Int type=kotlin.Int value=1
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: CALL 'internal final fun getAndSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.getAndSetField>, newValue: T of kotlin.concurrent.getAndSetField): T of kotlin.concurrent.getAndSetField declared in kotlin.concurrent' type=T of kotlin.concurrent.getAndSetField origin=null
              TYPE_ARG T: kotlin.Int
              ARG <this>: PROPERTY_REFERENCE 'private final a$volatile: kotlin.Int declared in <root>.ExtensionsTest' field='FIELD ATOMICFU_GENERATED_FIELD name:a$volatile type:kotlin.Int visibility:private declared in <root>.ExtensionsTest' getter='private final fun <get-a$volatile> (): kotlin.Int declared in <root>.ExtensionsTest' setter='private final fun <set-a$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.ExtensionsTest' type=kotlin.Int origin=null
                ARG 1: GET_VAR '<this>: <root>.ExtensionsTest declared in <root>.ExtensionsTest.testScopedFieldGetters' type=<root>.ExtensionsTest origin=IMPLICIT_ARGUMENT
              ARG newValue: CONST Int type=kotlin.Int value=2
            ARG arg1: CONST Int type=kotlin.Int value=1
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: TYPE_OP type=kotlin.Int origin=CAST typeOperand=kotlin.Int
              CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                TYPE_ARG T: kotlin.Int
                ARG <this>: PROPERTY_REFERENCE 'private final a$volatile: kotlin.Int declared in <root>.ExtensionsTest' field='FIELD ATOMICFU_GENERATED_FIELD name:a$volatile type:kotlin.Int visibility:private declared in <root>.ExtensionsTest' getter='private final fun <get-a$volatile> (): kotlin.Int declared in <root>.ExtensionsTest' setter='private final fun <set-a$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.ExtensionsTest' type=kotlin.Int origin=null
                  ARG 1: GET_VAR '<this>: <root>.ExtensionsTest declared in <root>.ExtensionsTest.testScopedFieldGetters' type=<root>.ExtensionsTest origin=IMPLICIT_ARGUMENT
            ARG arg1: CONST Int type=kotlin.Int value=2
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: CALL 'internal final fun getAndAddField (<this>: kotlin.reflect.KMutableProperty0<kotlin.Int>, delta: kotlin.Int): kotlin.Int declared in kotlin.concurrent' type=kotlin.Int origin=null
              ARG <this>: PROPERTY_REFERENCE 'private final a$volatile: kotlin.Int declared in <root>.ExtensionsTest' field='FIELD ATOMICFU_GENERATED_FIELD name:a$volatile type:kotlin.Int visibility:private declared in <root>.ExtensionsTest' getter='private final fun <get-a$volatile> (): kotlin.Int declared in <root>.ExtensionsTest' setter='private final fun <set-a$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.ExtensionsTest' type=kotlin.Int origin=null
                ARG 1: GET_VAR '<this>: <root>.ExtensionsTest declared in <root>.ExtensionsTest.testScopedFieldGetters' type=<root>.ExtensionsTest origin=IMPLICIT_ARGUMENT
              ARG delta: CONST Int type=kotlin.Int value=1
            ARG arg1: CONST Int type=kotlin.Int value=2
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: TYPE_OP type=kotlin.Int origin=CAST typeOperand=kotlin.Int
              CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                TYPE_ARG T: kotlin.Int
                ARG <this>: PROPERTY_REFERENCE 'private final a$volatile: kotlin.Int declared in <root>.ExtensionsTest' field='FIELD ATOMICFU_GENERATED_FIELD name:a$volatile type:kotlin.Int visibility:private declared in <root>.ExtensionsTest' getter='private final fun <get-a$volatile> (): kotlin.Int declared in <root>.ExtensionsTest' setter='private final fun <set-a$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.ExtensionsTest' type=kotlin.Int origin=null
                  ARG 1: GET_VAR '<this>: <root>.ExtensionsTest declared in <root>.ExtensionsTest.testScopedFieldGetters' type=<root>.ExtensionsTest origin=IMPLICIT_ARGUMENT
            ARG arg1: CONST Int type=kotlin.Int value=3
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: CALL 'internal final fun getAndAddField (<this>: kotlin.reflect.KMutableProperty0<kotlin.Int>, delta: kotlin.Int): kotlin.Int declared in kotlin.concurrent' type=kotlin.Int origin=null
              ARG <this>: PROPERTY_REFERENCE 'private final a$volatile: kotlin.Int declared in <root>.ExtensionsTest' field='FIELD ATOMICFU_GENERATED_FIELD name:a$volatile type:kotlin.Int visibility:private declared in <root>.ExtensionsTest' getter='private final fun <get-a$volatile> (): kotlin.Int declared in <root>.ExtensionsTest' setter='private final fun <set-a$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.ExtensionsTest' type=kotlin.Int origin=null
                ARG 1: GET_VAR '<this>: <root>.ExtensionsTest declared in <root>.ExtensionsTest.testScopedFieldGetters' type=<root>.ExtensionsTest origin=IMPLICIT_ARGUMENT
              ARG delta: CONST Int type=kotlin.Int value=-1
            ARG arg1: CONST Int type=kotlin.Int value=3
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: TYPE_OP type=kotlin.Int origin=CAST typeOperand=kotlin.Int
              CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                TYPE_ARG T: kotlin.Int
                ARG <this>: PROPERTY_REFERENCE 'private final a$volatile: kotlin.Int declared in <root>.ExtensionsTest' field='FIELD ATOMICFU_GENERATED_FIELD name:a$volatile type:kotlin.Int visibility:private declared in <root>.ExtensionsTest' getter='private final fun <get-a$volatile> (): kotlin.Int declared in <root>.ExtensionsTest' setter='private final fun <set-a$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.ExtensionsTest' type=kotlin.Int origin=null
                  ARG 1: GET_VAR '<this>: <root>.ExtensionsTest declared in <root>.ExtensionsTest.testScopedFieldGetters' type=<root>.ExtensionsTest origin=IMPLICIT_ARGUMENT
            ARG arg1: CONST Int type=kotlin.Int value=2
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: CALL 'internal final fun getAndAddField (<this>: kotlin.reflect.KMutableProperty0<kotlin.Int>, delta: kotlin.Int): kotlin.Int declared in kotlin.concurrent' type=kotlin.Int origin=null
              ARG <this>: PROPERTY_REFERENCE 'private final a$volatile: kotlin.Int declared in <root>.ExtensionsTest' field='FIELD ATOMICFU_GENERATED_FIELD name:a$volatile type:kotlin.Int visibility:private declared in <root>.ExtensionsTest' getter='private final fun <get-a$volatile> (): kotlin.Int declared in <root>.ExtensionsTest' setter='private final fun <set-a$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.ExtensionsTest' type=kotlin.Int origin=null
                ARG 1: GET_VAR '<this>: <root>.ExtensionsTest declared in <root>.ExtensionsTest.testScopedFieldGetters' type=<root>.ExtensionsTest origin=IMPLICIT_ARGUMENT
              ARG delta: CONST Int type=kotlin.Int value=2
            ARG arg1: CONST Int type=kotlin.Int value=2
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: TYPE_OP type=kotlin.Int origin=CAST typeOperand=kotlin.Int
              CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                TYPE_ARG T: kotlin.Int
                ARG <this>: PROPERTY_REFERENCE 'private final a$volatile: kotlin.Int declared in <root>.ExtensionsTest' field='FIELD ATOMICFU_GENERATED_FIELD name:a$volatile type:kotlin.Int visibility:private declared in <root>.ExtensionsTest' getter='private final fun <get-a$volatile> (): kotlin.Int declared in <root>.ExtensionsTest' setter='private final fun <set-a$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.ExtensionsTest' type=kotlin.Int origin=null
                  ARG 1: GET_VAR '<this>: <root>.ExtensionsTest declared in <root>.ExtensionsTest.testScopedFieldGetters' type=<root>.ExtensionsTest origin=IMPLICIT_ARGUMENT
            ARG arg1: CONST Int type=kotlin.Int value=4
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: CALL 'public final fun plus (other: kotlin.Int): kotlin.Int declared in kotlin.Int' type=kotlin.Int origin=null
              ARG <this>: CALL 'internal final fun getAndAddField (<this>: kotlin.reflect.KMutableProperty0<kotlin.Int>, delta: kotlin.Int): kotlin.Int declared in kotlin.concurrent' type=kotlin.Int origin=null
                ARG <this>: PROPERTY_REFERENCE 'private final a$volatile: kotlin.Int declared in <root>.ExtensionsTest' field='FIELD ATOMICFU_GENERATED_FIELD name:a$volatile type:kotlin.Int visibility:private declared in <root>.ExtensionsTest' getter='private final fun <get-a$volatile> (): kotlin.Int declared in <root>.ExtensionsTest' setter='private final fun <set-a$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.ExtensionsTest' type=kotlin.Int origin=null
                  ARG 1: GET_VAR '<this>: <root>.ExtensionsTest declared in <root>.ExtensionsTest.testScopedFieldGetters' type=<root>.ExtensionsTest origin=IMPLICIT_ARGUMENT
                ARG delta: CONST Int type=kotlin.Int value=3
              ARG other: CONST Int type=kotlin.Int value=3
            ARG arg1: CONST Int type=kotlin.Int value=7
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: TYPE_OP type=kotlin.Int origin=CAST typeOperand=kotlin.Int
              CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                TYPE_ARG T: kotlin.Int
                ARG <this>: PROPERTY_REFERENCE 'private final a$volatile: kotlin.Int declared in <root>.ExtensionsTest' field='FIELD ATOMICFU_GENERATED_FIELD name:a$volatile type:kotlin.Int visibility:private declared in <root>.ExtensionsTest' getter='private final fun <get-a$volatile> (): kotlin.Int declared in <root>.ExtensionsTest' setter='private final fun <set-a$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.ExtensionsTest' type=kotlin.Int origin=null
                  ARG 1: GET_VAR '<this>: <root>.ExtensionsTest declared in <root>.ExtensionsTest.testScopedFieldGetters' type=<root>.ExtensionsTest origin=IMPLICIT_ARGUMENT
            ARG arg1: CONST Int type=kotlin.Int value=7
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: CALL 'public final fun plus (other: kotlin.Int): kotlin.Int declared in kotlin.Int' type=kotlin.Int origin=null
              ARG <this>: CALL 'internal final fun getAndAddField (<this>: kotlin.reflect.KMutableProperty0<kotlin.Int>, delta: kotlin.Int): kotlin.Int declared in kotlin.concurrent' type=kotlin.Int origin=null
                ARG <this>: PROPERTY_REFERENCE 'private final a$volatile: kotlin.Int declared in <root>.ExtensionsTest' field='FIELD ATOMICFU_GENERATED_FIELD name:a$volatile type:kotlin.Int visibility:private declared in <root>.ExtensionsTest' getter='private final fun <get-a$volatile> (): kotlin.Int declared in <root>.ExtensionsTest' setter='private final fun <set-a$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.ExtensionsTest' type=kotlin.Int origin=null
                  ARG 1: GET_VAR '<this>: <root>.ExtensionsTest declared in <root>.ExtensionsTest.testScopedFieldGetters' type=<root>.ExtensionsTest origin=IMPLICIT_ARGUMENT
                ARG delta: CONST Int type=kotlin.Int value=1
              ARG other: CONST Int type=kotlin.Int value=1
            ARG arg1: CONST Int type=kotlin.Int value=8
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: TYPE_OP type=kotlin.Int origin=CAST typeOperand=kotlin.Int
              CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                TYPE_ARG T: kotlin.Int
                ARG <this>: PROPERTY_REFERENCE 'private final a$volatile: kotlin.Int declared in <root>.ExtensionsTest' field='FIELD ATOMICFU_GENERATED_FIELD name:a$volatile type:kotlin.Int visibility:private declared in <root>.ExtensionsTest' getter='private final fun <get-a$volatile> (): kotlin.Int declared in <root>.ExtensionsTest' setter='private final fun <set-a$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.ExtensionsTest' type=kotlin.Int origin=null
                  ARG 1: GET_VAR '<this>: <root>.ExtensionsTest declared in <root>.ExtensionsTest.testScopedFieldGetters' type=<root>.ExtensionsTest origin=IMPLICIT_ARGUMENT
            ARG arg1: CONST Int type=kotlin.Int value=8
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: CALL 'public final fun plus (other: kotlin.Int): kotlin.Int declared in kotlin.Int' type=kotlin.Int origin=null
              ARG <this>: CALL 'internal final fun getAndAddField (<this>: kotlin.reflect.KMutableProperty0<kotlin.Int>, delta: kotlin.Int): kotlin.Int declared in kotlin.concurrent' type=kotlin.Int origin=null
                ARG <this>: PROPERTY_REFERENCE 'private final a$volatile: kotlin.Int declared in <root>.ExtensionsTest' field='FIELD ATOMICFU_GENERATED_FIELD name:a$volatile type:kotlin.Int visibility:private declared in <root>.ExtensionsTest' getter='private final fun <get-a$volatile> (): kotlin.Int declared in <root>.ExtensionsTest' setter='private final fun <set-a$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.ExtensionsTest' type=kotlin.Int origin=null
                  ARG 1: GET_VAR '<this>: <root>.ExtensionsTest declared in <root>.ExtensionsTest.testScopedFieldGetters' type=<root>.ExtensionsTest origin=IMPLICIT_ARGUMENT
                ARG delta: CONST Int type=kotlin.Int value=-1
              ARG other: CONST Int type=kotlin.Int value=-1
            ARG arg1: CONST Int type=kotlin.Int value=7
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: TYPE_OP type=kotlin.Int origin=CAST typeOperand=kotlin.Int
              CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                TYPE_ARG T: kotlin.Int
                ARG <this>: PROPERTY_REFERENCE 'private final a$volatile: kotlin.Int declared in <root>.ExtensionsTest' field='FIELD ATOMICFU_GENERATED_FIELD name:a$volatile type:kotlin.Int visibility:private declared in <root>.ExtensionsTest' getter='private final fun <get-a$volatile> (): kotlin.Int declared in <root>.ExtensionsTest' setter='private final fun <set-a$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.ExtensionsTest' type=kotlin.Int origin=null
                  ARG 1: GET_VAR '<this>: <root>.ExtensionsTest declared in <root>.ExtensionsTest.testScopedFieldGetters' type=<root>.ExtensionsTest origin=IMPLICIT_ARGUMENT
            ARG arg1: CONST Int type=kotlin.Int value=7
        CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
          ARG value: CALL 'internal final fun compareAndSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.compareAndSetField>, expectedValue: T of kotlin.concurrent.compareAndSetField, newValue: T of kotlin.concurrent.compareAndSetField): kotlin.Boolean declared in kotlin.concurrent' type=kotlin.Boolean origin=null
            TYPE_ARG T: kotlin.Int
            ARG <this>: PROPERTY_REFERENCE 'private final a$volatile: kotlin.Int declared in <root>.ExtensionsTest' field='FIELD ATOMICFU_GENERATED_FIELD name:a$volatile type:kotlin.Int visibility:private declared in <root>.ExtensionsTest' getter='private final fun <get-a$volatile> (): kotlin.Int declared in <root>.ExtensionsTest' setter='private final fun <set-a$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.ExtensionsTest' type=kotlin.Int origin=null
              ARG 1: GET_VAR '<this>: <root>.ExtensionsTest declared in <root>.ExtensionsTest.testScopedFieldGetters' type=<root>.ExtensionsTest origin=IMPLICIT_ARGUMENT
            ARG expectedValue: CONST Int type=kotlin.Int value=7
            ARG newValue: CONST Int type=kotlin.Int value=10
  FUN name:box visibility:public modality:FINAL returnType:kotlin.String
    BLOCK_BODY
      VAR name:testClass type:<root>.ExtensionsTest [val]
        CONSTRUCTOR_CALL 'public constructor <init> () declared in <root>.ExtensionsTest' type=<root>.ExtensionsTest origin=null
      CALL 'public final fun testScopedFieldGetters (): kotlin.Unit declared in <root>.ExtensionsTest' type=kotlin.Unit origin=null
        ARG <this>: GET_VAR 'val testClass: <root>.ExtensionsTest declared in <root>.box' type=<root>.ExtensionsTest origin=null
      CALL 'public final fun testExtension (): kotlin.Unit declared in <root>.ExtensionsTest' type=kotlin.Unit origin=null
        ARG <this>: GET_VAR 'val testClass: <root>.ExtensionsTest declared in <root>.box' type=<root>.ExtensionsTest origin=null
      RETURN type=kotlin.Nothing from='public final fun box (): kotlin.String declared in <root>'
        CONST String type=kotlin.String value="OK"
