RAW_FIR:
FILE: [ResolvedTo(RAW_FIR)] primaryConstructorParameter.kt
    [ResolvedTo(RAW_FIR)] annotations container
    public? final? [ResolvedTo(RAW_FIR)] class A : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor([ResolvedTo(RAW_FIR)] a: Boolean, [ResolvedTo(RAW_FIR)] param: Int = LAZY_EXPRESSION, [ResolvedTo(RAW_FIR)] c: Long): R|A| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] fun foo(): <implicit> { LAZY_BLOCK }

    }

IMPORTS:
FILE: [ResolvedTo(IMPORTS)] primaryConstructorParameter.kt
    [ResolvedTo(RAW_FIR)] annotations container
    public? final? [ResolvedTo(RAW_FIR)] class A : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor([ResolvedTo(RAW_FIR)] a: Boolean, [ResolvedTo(RAW_FIR)] param: Int = LAZY_EXPRESSION, [ResolvedTo(RAW_FIR)] c: Long): R|A| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] fun foo(): <implicit> { LAZY_BLOCK }

    }

COMPILER_REQUIRED_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] primaryConstructorParameter.kt
    [ResolvedTo(RAW_FIR)] annotations container
    public? final? [ResolvedTo(RAW_FIR)] class A : R|kotlin/Any| {
        public? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] [ContainingClassKey=A] constructor([ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] a: Boolean, [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] param: Int = LAZY_EXPRESSION, [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] c: Long): R|A| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] fun foo(): <implicit> { LAZY_BLOCK }

    }

COMPANION_GENERATION:
FILE: [ResolvedTo(IMPORTS)] primaryConstructorParameter.kt
    [ResolvedTo(RAW_FIR)] annotations container
    public? final? [ResolvedTo(RAW_FIR)] class A : R|kotlin/Any| {
        public? [ResolvedTo(COMPANION_GENERATION)] [ContainingClassKey=A] constructor([ResolvedTo(COMPANION_GENERATION)] a: Boolean, [ResolvedTo(COMPANION_GENERATION)] param: Int = LAZY_EXPRESSION, [ResolvedTo(COMPANION_GENERATION)] c: Long): R|A| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] fun foo(): <implicit> { LAZY_BLOCK }

    }

SUPER_TYPES:
FILE: [ResolvedTo(IMPORTS)] primaryConstructorParameter.kt
    [ResolvedTo(RAW_FIR)] annotations container
    public? final? [ResolvedTo(SUPER_TYPES)] class A : R|kotlin/Any| {
        public? [ResolvedTo(SUPER_TYPES)] [ContainingClassKey=A] constructor([ResolvedTo(SUPER_TYPES)] a: Boolean, [ResolvedTo(SUPER_TYPES)] param: Int = LAZY_EXPRESSION, [ResolvedTo(SUPER_TYPES)] c: Long): R|A| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] fun foo(): <implicit> { LAZY_BLOCK }

    }

TYPES:
FILE: [ResolvedTo(IMPORTS)] primaryConstructorParameter.kt
    [ResolvedTo(RAW_FIR)] annotations container
    public? final? [ResolvedTo(TYPES)] class A : R|kotlin/Any| {
        public? [ResolvedTo(TYPES)] [ContainingClassKey=A] constructor([ResolvedTo(TYPES)] a: R|kotlin/Boolean|, [ResolvedTo(TYPES)] param: R|kotlin/Int| = LAZY_EXPRESSION, [ResolvedTo(TYPES)] c: R|kotlin/Long|): R|A| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] fun foo(): <implicit> { LAZY_BLOCK }

    }

STATUS:
FILE: [ResolvedTo(IMPORTS)] primaryConstructorParameter.kt
    [ResolvedTo(RAW_FIR)] annotations container
    public final [ResolvedTo(STATUS)] class A : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=A] constructor([ResolvedTo(STATUS)] a: R|kotlin/Boolean|, [ResolvedTo(STATUS)] param: R|kotlin/Int| = LAZY_EXPRESSION, [ResolvedTo(STATUS)] c: R|kotlin/Long|): R|A| {
            LAZY_super<R|kotlin/Any|>
        }

        public final [ResolvedTo(STATUS)] fun foo(): <implicit> { LAZY_BLOCK }

    }

EXPECT_ACTUAL_MATCHING:
FILE: [ResolvedTo(IMPORTS)] primaryConstructorParameter.kt
    [ResolvedTo(RAW_FIR)] annotations container
    public final [ResolvedTo(STATUS)] class A : R|kotlin/Any| {
        public [ResolvedTo(EXPECT_ACTUAL_MATCHING)] [ContainingClassKey=A] constructor([ResolvedTo(EXPECT_ACTUAL_MATCHING)] a: R|kotlin/Boolean|, [ResolvedTo(EXPECT_ACTUAL_MATCHING)] param: R|kotlin/Int| = LAZY_EXPRESSION, [ResolvedTo(EXPECT_ACTUAL_MATCHING)] c: R|kotlin/Long|): R|A| {
            LAZY_super<R|kotlin/Any|>
        }

        public final [ResolvedTo(STATUS)] fun foo(): <implicit> { LAZY_BLOCK }

    }

ARGUMENTS_OF_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] primaryConstructorParameter.kt
    [ResolvedTo(RAW_FIR)] annotations container
    public final [ResolvedTo(STATUS)] class A : R|kotlin/Any| {
        public [ResolvedTo(ARGUMENTS_OF_ANNOTATIONS)] [ContainingClassKey=A] constructor([ResolvedTo(ARGUMENTS_OF_ANNOTATIONS)] a: R|kotlin/Boolean|, [ResolvedTo(ARGUMENTS_OF_ANNOTATIONS)] param: R|kotlin/Int| = LAZY_EXPRESSION, [ResolvedTo(ARGUMENTS_OF_ANNOTATIONS)] c: R|kotlin/Long|): R|A| {
            LAZY_super<R|kotlin/Any|>
        }

        public final [ResolvedTo(STATUS)] fun foo(): <implicit> { LAZY_BLOCK }

    }

CONTRACTS:
FILE: [ResolvedTo(IMPORTS)] primaryConstructorParameter.kt
    [ResolvedTo(RAW_FIR)] annotations container
    public final [ResolvedTo(STATUS)] class A : R|kotlin/Any| {
        public [ResolvedTo(CONTRACTS)] [ContainingClassKey=A] constructor([ResolvedTo(CONTRACTS)] a: R|kotlin/Boolean|, [ResolvedTo(CONTRACTS)] param: R|kotlin/Int| = IntegerLiteral(1), [ResolvedTo(CONTRACTS)] c: R|kotlin/Long|): R|A| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(STATUS)] fun foo(): <implicit> { LAZY_BLOCK }

    }

IMPLICIT_TYPES_BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] primaryConstructorParameter.kt
    [ResolvedTo(RAW_FIR)] annotations container
    public final [ResolvedTo(STATUS)] class A : R|kotlin/Any| {
        public [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] [ContainingClassKey=A] constructor([ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] a: R|kotlin/Boolean|, [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] param: R|kotlin/Int| = IntegerLiteral(1), [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] c: R|kotlin/Long|): R|A| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(STATUS)] fun foo(): <implicit> { LAZY_BLOCK }

    }

ANNOTATIONS_ARGUMENTS_MAPPING:
FILE: [ResolvedTo(IMPORTS)] primaryConstructorParameter.kt
    [ResolvedTo(RAW_FIR)] annotations container
    public final [ResolvedTo(STATUS)] class A : R|kotlin/Any| {
        public [ResolvedTo(ANNOTATIONS_ARGUMENTS_MAPPING)] [ContainingClassKey=A] constructor([ResolvedTo(ANNOTATIONS_ARGUMENTS_MAPPING)] a: R|kotlin/Boolean|, [ResolvedTo(ANNOTATIONS_ARGUMENTS_MAPPING)] param: R|kotlin/Int| = IntegerLiteral(1), [ResolvedTo(ANNOTATIONS_ARGUMENTS_MAPPING)] c: R|kotlin/Long|): R|A| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(STATUS)] fun foo(): <implicit> { LAZY_BLOCK }

    }

BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] primaryConstructorParameter.kt
    [ResolvedTo(RAW_FIR)] annotations container
    public final [ResolvedTo(STATUS)] class A : R|kotlin/Any| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=A] constructor([ResolvedTo(BODY_RESOLVE)] a: R|kotlin/Boolean|, [ResolvedTo(BODY_RESOLVE)] param: R|kotlin/Int| = Int(1), [ResolvedTo(BODY_RESOLVE)] c: R|kotlin/Long|): R|A| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(STATUS)] fun foo(): <implicit> { LAZY_BLOCK }

    }

FILE RAW TO BODY:
FILE: [ResolvedTo(IMPORTS)] primaryConstructorParameter.kt
    [ResolvedTo(BODY_RESOLVE)] annotations container
    public final [ResolvedTo(BODY_RESOLVE)] class A : R|kotlin/Any| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=A] constructor([ResolvedTo(BODY_RESOLVE)] a: R|kotlin/Boolean|, [ResolvedTo(BODY_RESOLVE)] param: R|kotlin/Int| = Int(1), [ResolvedTo(BODY_RESOLVE)] c: R|kotlin/Long|): R|A| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(BODY_RESOLVE)] fun foo(): R|kotlin/String| {
            ^foo String(str)
        }

    }
