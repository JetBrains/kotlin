================ Step #1 =================

Cleaning output files:
  out/production/module/A.class
End of files
Compiling files:
  src/A.kt
End of files
Marked as dirty by Kotlin:
  src/B.kt
  src/getA.kt
  src/getB.kt
  src/useA.kt
  src/useB.kt
Exit code: ADDITIONAL_PASS_REQUIRED
------------------------------------------
Cleaning output files:
  out/production/module/B.class
  out/production/module/GetAKt.class
  out/production/module/GetBKt.class
  out/production/module/META-INF/module.kotlin_module
  out/production/module/UseAKt.class
  out/production/module/UseBKt.class
End of files
Compiling files:
  src/B.kt
  src/getA.kt
  src/getB.kt
  src/useA.kt
  src/useB.kt
End of files
Exit code: ABORT
------------------------------------------
COMPILATION FAILED
Cannot access 'A': it is 'private' in file
'public' subclass exposes its 'private' supertype A
'public' function exposes its 'private' return type A
Cannot access 'A': it is 'private' in file
Cannot access 'A': it is 'private' in file
Only safe (?.) or non-null asserted (!!.) calls are allowed on a nullable receiver of type kotlin.Any?
Cannot access 'x': it is 'invisible_fake' in 'B'
Only safe (?.) or non-null asserted (!!.) calls are allowed on a nullable receiver of type kotlin.Any?

================ Step #2 =================

Cleaning output files:
  out/production/module/A.class
End of files
Compiling files:
  src/A.kt
  src/B.kt
  src/getA.kt
  src/getB.kt
  src/useA.kt
  src/useB.kt
End of files
Exit code: ABORT
------------------------------------------
COMPILATION FAILED
Only safe (?.) or non-null asserted (!!.) calls are allowed on a nullable receiver of type kotlin.Any?
Only safe (?.) or non-null asserted (!!.) calls are allowed on a nullable receiver of type kotlin.Any?

================ Step #3 =================

Compiling files:
  src/A.kt
  src/B.kt
  src/getA.kt
  src/getB.kt
  src/useA.kt
  src/useB.kt
End of files
Exit code: OK
------------------------------------------
