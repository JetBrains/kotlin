package

public fun bar(): kotlin.Unit
public fun </*0*/ E : kotlin.Enum<E>> foo(/*0*/ values: kotlin.Array<E>): kotlin.Unit

public final enum class SomeEnum : kotlin.Enum<SomeEnum> {
    enum entry A

    private constructor SomeEnum()
    @kotlin.internal.IntrinsicConstEvaluation public final override /*1*/ /*fake_override*/ val name: kotlin.String
    public final override /*1*/ /*fake_override*/ val ordinal: kotlin.Int
    protected final override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
    public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: SomeEnum): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    protected/*protected and package*/ final override /*1*/ /*fake_override*/ /*isHiddenForResolutionEverywhereBesideSupercalls*/ fun finalize(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ /*isHiddenForResolutionEverywhereBesideSupercalls*/ fun getDeclaringClass(): java.lang.Class<SomeEnum!>!
    public final override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

    // Static members
    public final /*synthesized*/ val entries: kotlin.enums.EnumEntries<SomeEnum>
    public final /*synthesized*/ fun valueOf(/*0*/ value: kotlin.String): SomeEnum
    public final /*synthesized*/ fun values(): kotlin.Array<SomeEnum>
}

