KtFile: lambdaParameterDeclaration.kt
  PACKAGE_DIRECTIVE
    <empty list>
  IMPORT_LIST
    <empty list>
  PsiComment(EOL_COMMENT)('// Issue: KT-31734')
  PsiWhiteSpace('\n\n')
  FUN
    PsiElement(fun)('fun')
    PsiWhiteSpace(' ')
    PsiElement(IDENTIFIER)('foo')
    VALUE_PARAMETER_LIST
      PsiElement(LPAR)('(')
      PsiElement(RPAR)(')')
    PsiWhiteSpace(' ')
    BLOCK
      PsiElement(LBRACE)('{')
      PsiWhiteSpace('\n    ')
      PROPERTY
        PsiElement(val)('val')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('x')
        PsiWhiteSpace(' ')
        PsiElement(EQ)('=')
        PsiWhiteSpace(' ')
        LAMBDA_EXPRESSION
          FUNCTION_LITERAL
            PsiElement(LBRACE)('{')
            PsiWhiteSpace(' ')
            BLOCK
              ANNOTATED_EXPRESSION
                ANNOTATION_ENTRY
                  PsiElement(AT)('@')
                  CONSTRUCTOR_CALLEE
                    TYPE_REFERENCE
                      USER_TYPE
                        REFERENCE_EXPRESSION
                          PsiElement(IDENTIFIER)('Foo')
                  PsiWhiteSpace(' ')
                  VALUE_ARGUMENT_LIST
                    PsiElement(LPAR)('(')
                    VALUE_ARGUMENT
                      REFERENCE_EXPRESSION
                        PsiElement(IDENTIFIER)('foo')
                    PsiElement(COMMA)(',')
                    PsiWhiteSpace(' ')
                    VALUE_ARGUMENT
                      REFERENCE_EXPRESSION
                        PsiElement(IDENTIFIER)('bar')
                    PsiElement(RPAR)(')')
                PsiErrorElement:Expecting an element
                  <empty list>
              PsiWhiteSpace(' ')
              PsiErrorElement:Unexpected tokens (use ';' to separate expressions on the same line)
                PsiElement(ARROW)('->')
            PsiWhiteSpace(' ')
            PsiElement(RBRACE)('}')
      PsiWhiteSpace('\n    ')
      PROPERTY
        PsiElement(val)('val')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('x')
        PsiWhiteSpace(' ')
        PsiElement(EQ)('=')
        PsiWhiteSpace(' ')
        LAMBDA_EXPRESSION
          FUNCTION_LITERAL
            PsiElement(LBRACE)('{')
            PsiWhiteSpace(' ')
            BLOCK
              ANNOTATED_EXPRESSION
                ANNOTATION_ENTRY
                  PsiElement(AT)('@')
                  CONSTRUCTOR_CALLEE
                    TYPE_REFERENCE
                      USER_TYPE
                        REFERENCE_EXPRESSION
                          PsiElement(IDENTIFIER)('Foo')
                  PsiWhiteSpace(' ')
                  VALUE_ARGUMENT_LIST
                    PsiElement(LPAR)('(')
                    VALUE_ARGUMENT
                      REFERENCE_EXPRESSION
                        PsiElement(IDENTIFIER)('foo')
                    PsiErrorElement:Unexpected type specification
                      PsiElement(COLON)(':')
                      PsiWhiteSpace(' ')
                      PsiElement(IDENTIFIER)('kotlin')
                    PsiErrorElement:Expecting ')'
                      PsiElement(DOT)('.')
                REFERENCE_EXPRESSION
                  PsiElement(IDENTIFIER)('Any')
              PsiErrorElement:Unexpected tokens (use ';' to separate expressions on the same line)
                PsiElement(COMMA)(',')
                PsiWhiteSpace(' ')
                PsiElement(IDENTIFIER)('bar')
                PsiElement(RPAR)(')')
                PsiWhiteSpace(' ')
                PsiElement(ARROW)('->')
            PsiWhiteSpace(' ')
            PsiElement(RBRACE)('}')
      PsiWhiteSpace('\n    ')
      PROPERTY
        PsiElement(val)('val')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('x')
        PsiWhiteSpace(' ')
        PsiElement(EQ)('=')
        PsiWhiteSpace(' ')
        LAMBDA_EXPRESSION
          FUNCTION_LITERAL
            PsiElement(LBRACE)('{')
            PsiWhiteSpace(' ')
            BLOCK
              ANNOTATED_EXPRESSION
                ANNOTATION_ENTRY
                  PsiElement(AT)('@')
                  CONSTRUCTOR_CALLEE
                    TYPE_REFERENCE
                      USER_TYPE
                        REFERENCE_EXPRESSION
                          PsiElement(IDENTIFIER)('Foo')
                  PsiWhiteSpace(' ')
                  VALUE_ARGUMENT_LIST
                    PsiElement(LPAR)('(')
                    VALUE_ARGUMENT
                      REFERENCE_EXPRESSION
                        PsiElement(IDENTIFIER)('foo')
                    PsiElement(COMMA)(',')
                    PsiWhiteSpace(' ')
                    VALUE_ARGUMENT
                      REFERENCE_EXPRESSION
                        PsiElement(IDENTIFIER)('bar')
                    PsiErrorElement:Unexpected type specification
                      PsiElement(COLON)(':')
                      PsiWhiteSpace(' ')
                      PsiElement(IDENTIFIER)('Any')
                    PsiElement(RPAR)(')')
                PsiErrorElement:Expecting an element
                  <empty list>
              PsiWhiteSpace(' ')
              PsiErrorElement:Unexpected tokens (use ';' to separate expressions on the same line)
                PsiElement(ARROW)('->')
            PsiWhiteSpace(' ')
            PsiElement(RBRACE)('}')
      PsiWhiteSpace('\n    ')
      PROPERTY
        PsiElement(val)('val')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('x')
        PsiWhiteSpace(' ')
        PsiElement(EQ)('=')
        PsiWhiteSpace(' ')
        LAMBDA_EXPRESSION
          FUNCTION_LITERAL
            PsiElement(LBRACE)('{')
            PsiWhiteSpace(' ')
            BLOCK
              ANNOTATED_EXPRESSION
                ANNOTATION_ENTRY
                  PsiElement(AT)('@')
                  CONSTRUCTOR_CALLEE
                    TYPE_REFERENCE
                      USER_TYPE
                        REFERENCE_EXPRESSION
                          PsiElement(IDENTIFIER)('Foo')
                  PsiWhiteSpace(' ')
                  VALUE_ARGUMENT_LIST
                    PsiElement(LPAR)('(')
                    VALUE_ARGUMENT
                      PARENTHESIZED
                        PsiElement(LPAR)('(')
                        REFERENCE_EXPRESSION
                          PsiElement(IDENTIFIER)('foo')
                        PsiErrorElement:Expecting ')'
                          <empty list>
                    PsiElement(COMMA)(',')
                    PsiWhiteSpace(' ')
                    VALUE_ARGUMENT
                      REFERENCE_EXPRESSION
                        PsiElement(IDENTIFIER)('bar')
                    PsiErrorElement:Unexpected type specification
                      PsiElement(COLON)(':')
                      PsiWhiteSpace(' ')
                      PsiElement(IDENTIFIER)('Any')
                    PsiElement(RPAR)(')')
                PsiErrorElement:Expecting an element
                  <empty list>
              PsiErrorElement:Unexpected tokens (use ';' to separate expressions on the same line)
                PsiElement(RPAR)(')')
                PsiWhiteSpace(' ')
                PsiElement(ARROW)('->')
            PsiWhiteSpace(' ')
            PsiElement(RBRACE)('}')
      PsiWhiteSpace('\n    ')
      PROPERTY
        PsiElement(val)('val')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('x')
        PsiWhiteSpace(' ')
        PsiElement(EQ)('=')
        PsiWhiteSpace(' ')
        LAMBDA_EXPRESSION
          FUNCTION_LITERAL
            PsiElement(LBRACE)('{')
            PsiWhiteSpace(' ')
            BLOCK
              ANNOTATED_EXPRESSION
                ANNOTATION_ENTRY
                  PsiElement(AT)('@')
                  CONSTRUCTOR_CALLEE
                    TYPE_REFERENCE
                      USER_TYPE
                        REFERENCE_EXPRESSION
                          PsiElement(IDENTIFIER)('Foo')
                  PsiWhiteSpace(' ')
                  VALUE_ARGUMENT_LIST
                    PsiElement(LPAR)('(')
                    PsiElement(RPAR)(')')
                PsiErrorElement:Expecting an element
                  <empty list>
              PsiWhiteSpace(' ')
              PsiErrorElement:Unexpected tokens (use ';' to separate expressions on the same line)
                PsiElement(ARROW)('->')
                PsiWhiteSpace(' ')
                PsiElement(IDENTIFIER)('Unit')
            PsiWhiteSpace(' ')
            PsiElement(RBRACE)('}')
      PsiWhiteSpace('\n')
      PsiElement(RBRACE)('}')