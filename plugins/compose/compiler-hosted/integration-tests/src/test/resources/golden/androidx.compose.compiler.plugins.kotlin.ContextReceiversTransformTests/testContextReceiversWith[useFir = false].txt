//
// Source
// ------------------------------------------

import androidx.compose.runtime.Composable



@Composable
fun Test(foo: Foo) {
    with(foo) {
      A()
    }
}

//
// Transformed IR
// ------------------------------------------

@Composable
fun Test(foo: Foo, %composer: Composer?, %changed: Int) {
  %composer = %composer.startRestartGroup(<>)
  sourceInformation(%composer, "C(Test)*<A()>:Test.kt")
  val %dirty = %changed
  if (%changed and 0b1110 == 0) {
    %dirty = %dirty or if (%composer.changed(foo)) 0b0100 else 0b0010
  }
  if (%dirty and 0b1011 != 0b0010 || !%composer.skipping) {
    if (isTraceInProgress()) {
      traceEventStart(<>, %dirty, -1, <>)
    }
    with(foo) {
      A(%this%with, %composer, 0)
    }
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    %composer.skipToGroupEnd()
  }
  %composer.endRestartGroup()?.updateScope { %composer: Composer?, %force: Int ->
    Test(foo, %composer, updateChangedFlags(%changed or 0b0001))
  }
}
