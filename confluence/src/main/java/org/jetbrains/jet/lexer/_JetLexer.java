/* The following code was generated by JFlex 1.4.3 on 3/2/12 2:22 PM */

package org.jetbrains.jet.lexer;

import java.util.*;
import com.intellij.lexer.*;
import com.intellij.psi.*;
import com.intellij.psi.tree.IElementType;

import org.jetbrains.jet.lexer.JetTokens;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 3/2/12 2:22 PM from the specification file
 * <tt>/Users/chirino/sandbox/kotlin/confluence/../compiler/frontend/src/org/jetbrains/jet/lexer/Jet.flex</tt>
 */
class _JetLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int HEREDOC_TEMPLATE = 10;
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;
  public static final int LONG_TEMPLATE_ENTRY = 12;
  public static final int RAW_STRING = 4;
  public static final int HEREDOC = 8;
  public static final int SHORT_TEMPLATE_ENTRY = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\7\1\0\1\3\1\32\22\0\1\3\1\61\1\25"+
    "\1\62\1\10\1\71\1\67\1\23\1\74\1\75\1\13\1\66\1\100"+
    "\1\21\1\17\1\12\1\14\11\1\1\76\1\77\1\31\1\64\1\63"+
    "\1\65\1\11\1\2\1\16\2\2\1\20\1\2\11\4\1\22\3\4"+
    "\1\56\3\4\1\15\2\4\1\72\1\24\1\73\1\0\1\4\1\6"+
    "\1\44\1\50\1\37\1\60\1\42\1\54\1\46\1\34\1\35\1\51"+
    "\1\45\1\53\1\4\1\41\1\40\1\43\1\4\1\47\1\36\1\33"+
    "\1\26\1\57\1\52\1\15\1\55\1\4\1\27\1\70\1\30\54\0"+
    "\1\4\12\0\1\4\4\0\1\4\5\0\27\4\1\0\37\4\1\0"+
    "\u013f\4\31\0\162\4\4\0\14\4\16\0\5\4\11\0\1\4\213\0"+
    "\1\4\13\0\1\4\1\0\3\4\1\0\1\4\1\0\24\4\1\0"+
    "\54\4\1\0\46\4\1\0\5\4\4\0\202\4\10\0\105\4\1\0"+
    "\46\4\2\0\2\4\6\0\20\4\41\0\46\4\2\0\1\4\7\0"+
    "\47\4\110\0\33\4\5\0\3\4\56\0\32\4\5\0\13\4\25\0"+
    "\12\5\4\0\2\4\1\0\143\4\1\0\1\4\17\0\2\4\7\0"+
    "\2\4\12\5\3\4\2\0\1\4\20\0\1\4\1\0\36\4\35\0"+
    "\3\4\60\0\46\4\13\0\1\4\u0152\0\66\4\3\0\1\4\22\0"+
    "\1\4\7\0\12\4\4\0\12\5\25\0\10\4\2\0\2\4\2\0"+
    "\26\4\1\0\7\4\1\0\1\4\3\0\4\4\3\0\1\4\36\0"+
    "\2\4\1\0\3\4\4\0\12\5\2\4\23\0\6\4\4\0\2\4"+
    "\2\0\26\4\1\0\7\4\1\0\2\4\1\0\2\4\1\0\2\4"+
    "\37\0\4\4\1\0\1\4\7\0\12\5\2\0\3\4\20\0\11\4"+
    "\1\0\3\4\1\0\26\4\1\0\7\4\1\0\2\4\1\0\5\4"+
    "\3\0\1\4\22\0\1\4\17\0\2\4\4\0\12\5\25\0\10\4"+
    "\2\0\2\4\2\0\26\4\1\0\7\4\1\0\2\4\1\0\5\4"+
    "\3\0\1\4\36\0\2\4\1\0\3\4\4\0\12\5\1\0\1\4"+
    "\21\0\1\4\1\0\6\4\3\0\3\4\1\0\4\4\3\0\2\4"+
    "\1\0\1\4\1\0\2\4\3\0\2\4\3\0\3\4\3\0\10\4"+
    "\1\0\3\4\55\0\11\5\25\0\10\4\1\0\3\4\1\0\27\4"+
    "\1\0\12\4\1\0\5\4\46\0\2\4\4\0\12\5\25\0\10\4"+
    "\1\0\3\4\1\0\27\4\1\0\12\4\1\0\5\4\3\0\1\4"+
    "\40\0\1\4\1\0\2\4\4\0\12\5\25\0\10\4\1\0\3\4"+
    "\1\0\27\4\1\0\20\4\46\0\2\4\4\0\12\5\25\0\22\4"+
    "\3\0\30\4\1\0\11\4\1\0\1\4\2\0\7\4\72\0\60\4"+
    "\1\0\2\4\14\0\7\4\11\0\12\5\47\0\2\4\1\0\1\4"+
    "\2\0\2\4\1\0\1\4\2\0\1\4\6\0\4\4\1\0\7\4"+
    "\1\0\3\4\1\0\1\4\1\0\1\4\2\0\2\4\1\0\4\4"+
    "\1\0\2\4\11\0\1\4\2\0\5\4\1\0\1\4\11\0\12\5"+
    "\2\0\2\4\42\0\1\4\37\0\12\5\26\0\10\4\1\0\42\4"+
    "\35\0\4\4\164\0\42\4\1\0\5\4\1\0\2\4\25\0\12\5"+
    "\6\0\6\4\112\0\46\4\12\0\51\4\7\0\132\4\5\0\104\4"+
    "\5\0\122\4\6\0\7\4\1\0\77\4\1\0\1\4\1\0\4\4"+
    "\2\0\7\4\1\0\1\4\1\0\4\4\2\0\47\4\1\0\1\4"+
    "\1\0\4\4\2\0\37\4\1\0\1\4\1\0\4\4\2\0\7\4"+
    "\1\0\1\4\1\0\4\4\2\0\7\4\1\0\7\4\1\0\27\4"+
    "\1\0\37\4\1\0\1\4\1\0\4\4\2\0\7\4\1\0\47\4"+
    "\1\0\23\4\16\0\11\5\56\0\125\4\14\0\u026c\4\2\0\10\4"+
    "\12\0\32\4\5\0\113\4\25\0\15\4\1\0\4\4\16\0\22\4"+
    "\16\0\22\4\16\0\15\4\1\0\3\4\17\0\64\4\43\0\1\4"+
    "\4\0\1\4\3\0\12\5\46\0\12\5\6\0\130\4\10\0\51\4"+
    "\127\0\35\4\51\0\12\5\36\4\2\0\5\4\u038b\0\154\4\224\0"+
    "\234\4\4\0\132\4\6\0\26\4\2\0\6\4\2\0\46\4\2\0"+
    "\6\4\2\0\10\4\1\0\1\4\1\0\1\4\1\0\1\4\1\0"+
    "\37\4\2\0\65\4\1\0\7\4\1\0\1\4\3\0\3\4\1\0"+
    "\7\4\3\0\4\4\2\0\6\4\4\0\15\4\5\0\3\4\1\0"+
    "\7\4\164\0\1\4\15\0\1\4\202\0\1\4\4\0\1\4\2\0"+
    "\12\4\1\0\1\4\3\0\5\4\6\0\1\4\1\0\1\4\1\0"+
    "\1\4\1\0\4\4\1\0\3\4\1\0\7\4\3\0\3\4\5\0"+
    "\5\4\u0ebb\0\2\4\52\0\5\4\5\0\2\4\4\0\126\4\6\0"+
    "\3\4\1\0\132\4\1\0\4\4\5\0\50\4\4\0\136\4\21\0"+
    "\30\4\70\0\20\4\u0200\0\u19b6\4\112\0\u51a6\4\132\0\u048d\4\u0773\0"+
    "\u2ba4\4\u215c\0\u012e\4\2\0\73\4\225\0\7\4\14\0\5\4\5\0"+
    "\1\4\1\0\12\4\1\0\15\4\1\0\5\4\1\0\1\4\1\0"+
    "\2\4\1\0\2\4\1\0\154\4\41\0\u016b\4\22\0\100\4\2\0"+
    "\66\4\50\0\14\4\164\0\5\4\1\0\207\4\23\0\12\5\7\0"+
    "\32\4\6\0\32\4\13\0\131\4\3\0\6\4\2\0\6\4\2\0"+
    "\6\4\2\0\3\4\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\1\2\1\3\1\4\2\1\1\5\1\6"+
    "\1\7\1\2\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\20\3\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\2\1\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\35\1\0\1\37\2\35\1\40"+
    "\1\0\1\40\1\41\1\42\1\43\1\44\1\0\1\45"+
    "\1\0\1\46\1\0\1\47\1\0\1\50\1\51\1\52"+
    "\1\53\1\54\1\45\2\2\1\45\1\55\1\56\1\57"+
    "\1\60\2\12\3\0\1\61\3\3\1\62\1\63\1\64"+
    "\7\3\1\65\10\3\1\66\1\0\1\67\1\0\1\70"+
    "\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100"+
    "\1\0\1\101\2\102\2\0\1\40\1\103\1\45\1\3"+
    "\2\0\1\52\1\104\4\0\1\105\1\0\1\106\4\3"+
    "\1\107\10\3\1\110\4\3\1\111\1\112\2\3\1\113"+
    "\1\114\1\115\1\116\1\117\1\120\1\121\2\0\2\40"+
    "\1\46\1\47\1\0\2\104\1\45\4\0\1\122\1\3"+
    "\1\123\1\3\1\124\4\3\1\125\1\126\4\3\1\127"+
    "\1\3\1\130\1\131\1\100\1\0\1\132\1\52\2\0"+
    "\1\133\3\0\1\134\1\135\1\136\1\3\1\137\3\3"+
    "\1\140\1\141\1\142\2\0\1\143\1\0\1\3\1\144"+
    "\1\3\1\145\1\3\1\146\1\147";

  private static int [] zzUnpackAction() {
    int [] result = new int[246];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\303\0\u0104\0\u0145\0\u0186\0\u01c7"+
    "\0\u0208\0\u0249\0\u028a\0\u02cb\0\u030c\0\u034d\0\u038e\0\u03cf"+
    "\0\u0410\0\u0451\0\u0492\0\u04d3\0\u0514\0\u01c7\0\u01c7\0\u0555"+
    "\0\u0596\0\u05d7\0\u0618\0\u0659\0\u069a\0\u06db\0\u071c\0\u075d"+
    "\0\u079e\0\u07df\0\u0820\0\u0861\0\u08a2\0\u08e3\0\u0924\0\u0965"+
    "\0\u09a6\0\u01c7\0\u09e7\0\u0a28\0\u01c7\0\u0a69\0\u0aaa\0\u0aeb"+
    "\0\u0b2c\0\u01c7\0\u01c7\0\u01c7\0\u01c7\0\u01c7\0\u01c7\0\u01c7"+
    "\0\u0b6d\0\u01c7\0\u0bae\0\u0bef\0\u01c7\0\u01c7\0\u0c30\0\u0c71"+
    "\0\u0cb2\0\u0cf3\0\u01c7\0\u01c7\0\u01c7\0\u01c7\0\u0d34\0\u0d75"+
    "\0\u0db6\0\u0df7\0\u0e38\0\u0e79\0\u0eba\0\u01c7\0\u0efb\0\u0f3c"+
    "\0\u01c7\0\u01c7\0\u0f7d\0\u0fbe\0\u0fff\0\u1040\0\u01c7\0\u01c7"+
    "\0\u01c7\0\u01c7\0\u01c7\0\u1081\0\u10c2\0\u1103\0\u1144\0\u01c7"+
    "\0\u1185\0\u11c6\0\u1207\0\u0249\0\u0249\0\u0249\0\u1248\0\u1289"+
    "\0\u12ca\0\u130b\0\u134c\0\u138d\0\u13ce\0\u140f\0\u1450\0\u1491"+
    "\0\u14d2\0\u1513\0\u1554\0\u1595\0\u15d6\0\u1617\0\u0249\0\u1658"+
    "\0\u1699\0\u16da\0\u01c7\0\u01c7\0\u171b\0\u01c7\0\u01c7\0\u01c7"+
    "\0\u01c7\0\u01c7\0\u175c\0\u179d\0\u01c7\0\u01c7\0\u17de\0\u181f"+
    "\0\u1860\0\u18a1\0\u01c7\0\u18e2\0\u01c7\0\u1923\0\u1964\0\u19a5"+
    "\0\u19e6\0\u1a27\0\u1a68\0\u1aa9\0\u1aea\0\u01c7\0\u1b2b\0\u01c7"+
    "\0\u1b6c\0\u1bad\0\u1bee\0\u1c2f\0\u0249\0\u1c70\0\u1cb1\0\u1cf2"+
    "\0\u1d33\0\u1d74\0\u1db5\0\u1df6\0\u1e37\0\u01c7\0\u1e78\0\u1eb9"+
    "\0\u1efa\0\u1f3b\0\u0249\0\u0249\0\u1f7c\0\u1fbd\0\u0249\0\u0249"+
    "\0\u1ffe\0\u1ffe\0\u01c7\0\u01c7\0\u01c7\0\u203f\0\u2080\0\u01c7"+
    "\0\u20c1\0\u01c7\0\u01c7\0\u2102\0\u2143\0\u01c7\0\u2184\0\u18e2"+
    "\0\u21c5\0\u2206\0\u2247\0\u0249\0\u2288\0\u0249\0\u22c9\0\u0249"+
    "\0\u230a\0\u234b\0\u238c\0\u23cd\0\u0249\0\u0249\0\u240e\0\u244f"+
    "\0\u2490\0\u24d1\0\u0249\0\u2512\0\u0249\0\u01c7\0\u01c7\0\u2553"+
    "\0\u0c71\0\u01c7\0\u2594\0\u25d5\0\u01c7\0\u2616\0\u2657\0\u2698"+
    "\0\u0249\0\u0249\0\u0249\0\u26d9\0\u0249\0\u271a\0\u275b\0\u279c"+
    "\0\u0249\0\u0249\0\u0249\0\u27dd\0\u281e\0\u01c7\0\u285f\0\u28a0"+
    "\0\u0249\0\u28e1\0\u0249\0\u2922\0\u0249\0\u0249";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[246];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\1\11\1\12\1\13\1\12\1\10\1\14\1\13"+
    "\1\15\1\16\1\17\1\20\1\21\2\12\1\22\1\12"+
    "\1\23\1\12\1\24\1\10\1\25\1\12\1\26\1\27"+
    "\1\30\1\10\1\31\1\12\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\2\12\1\42\1\43\1\12"+
    "\1\44\1\12\1\45\1\12\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\7\71"+
    "\1\72\1\73\13\71\1\74\1\75\62\71\1\76\1\73"+
    "\13\71\1\76\1\77\53\71\2\0\1\100\1\0\1\100"+
    "\1\0\1\101\6\0\2\100\1\0\1\100\1\0\1\100"+
    "\3\0\1\100\4\0\1\102\25\100\20\0\7\5\1\103"+
    "\71\5\7\6\1\104\71\6\1\10\1\11\1\12\1\13"+
    "\1\12\1\10\1\14\1\13\1\15\1\16\1\17\1\20"+
    "\1\21\2\12\1\22\1\12\1\23\1\12\1\24\1\10"+
    "\1\25\1\12\1\105\1\106\1\30\1\10\1\31\1\12"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\2\12\1\42\1\43\1\12\1\44\1\12\1\45\1\12"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\102\0\1\11\12\0\1\11\2\0"+
    "\1\107\1\110\21\0\1\110\37\0\2\12\1\0\2\12"+
    "\6\0\3\12\1\0\1\12\1\0\1\12\3\0\1\12"+
    "\4\0\26\12\23\0\1\13\3\0\1\13\71\0\6\111"+
    "\2\0\71\111\2\0\1\112\1\0\1\112\1\0\1\113"+
    "\6\0\2\112\1\0\1\112\1\0\1\112\3\0\1\112"+
    "\4\0\26\112\22\0\1\114\1\0\1\114\1\0\1\115"+
    "\2\0\1\116\3\0\2\114\1\0\1\114\1\0\1\114"+
    "\3\0\1\114\4\0\26\114\32\0\1\117\1\120\50\0"+
    "\1\121\100\0\1\122\15\0\1\123\12\0\1\123\1\124"+
    "\1\125\1\107\1\110\21\0\1\110\5\0\1\125\31\0"+
    "\1\126\12\0\1\126\2\0\1\127\102\0\1\130\41\0"+
    "\1\131\1\132\14\0\7\24\1\0\13\24\1\133\1\134"+
    "\54\24\25\0\1\135\104\0\1\136\30\0\1\137\1\0"+
    "\1\140\15\0\2\12\1\0\2\12\6\0\3\12\1\0"+
    "\1\12\1\0\1\12\3\0\1\12\4\0\1\12\1\141"+
    "\12\12\1\142\5\12\1\143\3\12\21\0\2\12\1\0"+
    "\2\12\6\0\3\12\1\0\1\12\1\0\1\12\3\0"+
    "\1\12\4\0\3\12\1\144\2\12\1\145\12\12\1\146"+
    "\4\12\21\0\2\12\1\0\2\12\6\0\3\12\1\0"+
    "\1\12\1\0\1\12\3\0\1\147\4\0\26\12\21\0"+
    "\2\12\1\0\2\12\6\0\3\12\1\0\1\12\1\0"+
    "\1\12\3\0\1\12\4\0\5\12\1\150\12\12\1\151"+
    "\5\12\21\0\2\12\1\0\2\12\6\0\3\12\1\0"+
    "\1\12\1\0\1\12\3\0\1\12\4\0\15\12\1\152"+
    "\10\12\21\0\2\12\1\0\2\12\6\0\3\12\1\0"+
    "\1\12\1\0\1\12\3\0\1\153\4\0\26\12\21\0"+
    "\2\12\1\0\2\12\6\0\3\12\1\0\1\12\1\0"+
    "\1\12\3\0\1\12\4\0\20\12\1\154\5\12\21\0"+
    "\2\12\1\0\2\12\6\0\3\12\1\0\1\12\1\0"+
    "\1\12\3\0\1\12\4\0\11\12\1\155\14\12\21\0"+
    "\2\12\1\0\2\12\6\0\3\12\1\0\1\12\1\0"+
    "\1\12\3\0\1\12\4\0\3\12\1\156\22\12\21\0"+
    "\2\12\1\0\2\12\6\0\3\12\1\0\1\12\1\0"+
    "\1\12\3\0\1\12\4\0\7\12\1\157\16\12\21\0"+
    "\2\12\1\0\2\12\6\0\3\12\1\0\1\12\1\0"+
    "\1\12\3\0\1\12\4\0\14\12\1\160\11\12\21\0"+
    "\2\12\1\0\2\12\6\0\3\12\1\0\1\12\1\0"+
    "\1\12\3\0\1\12\4\0\1\12\1\161\24\12\21\0"+
    "\2\12\1\0\2\12\6\0\3\12\1\0\1\12\1\0"+
    "\1\12\3\0\1\162\4\0\5\12\1\163\3\12\1\164"+
    "\14\12\21\0\2\12\1\0\2\12\6\0\3\12\1\0"+
    "\1\12\1\0\1\12\3\0\1\12\4\0\1\12\1\165"+
    "\24\12\21\0\2\12\1\0\2\12\6\0\3\12\1\0"+
    "\1\12\1\0\1\12\3\0\1\12\4\0\11\12\1\166"+
    "\14\12\21\0\2\12\1\0\2\12\6\0\3\12\1\0"+
    "\1\12\1\0\1\12\3\0\1\12\4\0\5\12\1\167"+
    "\20\12\55\0\1\170\26\0\1\171\76\0\1\172\1\0"+
    "\1\173\77\0\1\174\1\175\100\0\1\176\1\0\1\177"+
    "\101\0\1\200\101\0\1\201\74\0\1\202\14\0\7\71"+
    "\2\0\13\71\2\0\53\71\2\0\1\203\1\0\1\203"+
    "\1\0\1\204\6\0\2\203\1\0\1\203\1\0\1\203"+
    "\3\0\1\203\1\205\3\0\26\203\20\0\7\206\1\0"+
    "\16\206\1\207\52\206\25\0\1\210\54\0\2\100\1\0"+
    "\2\100\6\0\3\100\1\0\1\100\1\0\1\100\3\0"+
    "\1\100\4\0\26\100\20\0\6\211\2\0\71\211\1\0"+
    "\2\100\1\0\2\100\6\0\3\100\1\0\1\100\1\0"+
    "\1\100\3\0\1\100\4\0\1\100\1\212\24\100\21\0"+
    "\1\126\12\0\1\126\2\0\1\213\62\0\1\214\12\0"+
    "\1\214\4\0\1\214\44\0\1\214\12\0\6\111\1\215"+
    "\1\0\71\111\1\0\2\112\1\0\2\112\6\0\3\112"+
    "\1\0\1\112\1\0\1\112\3\0\1\112\4\0\26\112"+
    "\20\0\6\216\2\0\71\216\1\0\2\114\1\0\2\114"+
    "\6\0\3\114\1\0\1\114\1\0\1\114\3\0\1\114"+
    "\4\0\26\114\20\0\6\217\2\0\71\217\7\117\1\0"+
    "\71\117\13\220\1\221\65\220\1\0\1\123\12\0\1\123"+
    "\2\0\1\222\1\110\21\0\1\110\37\0\2\124\11\0"+
    "\1\124\1\0\1\124\1\223\1\124\1\0\1\224\14\0"+
    "\1\124\2\0\1\124\1\224\1\124\3\0\1\124\3\0"+
    "\1\124\3\0\1\124\21\0\1\125\12\0\1\125\2\0"+
    "\1\225\62\0\1\126\12\0\1\126\3\0\1\110\21\0"+
    "\1\110\36\0\7\24\1\0\71\24\25\0\1\226\104\0"+
    "\1\227\100\0\1\230\50\0\2\12\1\0\2\12\6\0"+
    "\3\12\1\0\1\12\1\0\1\12\3\0\1\12\4\0"+
    "\2\12\1\231\11\12\1\232\11\12\21\0\2\12\1\0"+
    "\2\12\6\0\3\12\1\0\1\12\1\0\1\12\3\0"+
    "\1\233\4\0\11\12\1\234\10\12\1\235\3\12\21\0"+
    "\2\12\1\0\2\12\6\0\3\12\1\0\1\12\1\0"+
    "\1\12\3\0\1\12\4\0\10\12\1\236\15\12\21\0"+
    "\2\12\1\0\2\12\6\0\3\12\1\0\1\12\1\0"+
    "\1\12\3\0\1\12\4\0\10\12\1\237\15\12\21\0"+
    "\2\12\1\0\2\12\6\0\3\12\1\0\1\12\1\0"+
    "\1\12\3\0\1\12\4\0\6\12\1\240\17\12\21\0"+
    "\2\12\1\0\2\12\6\0\3\12\1\0\1\12\1\0"+
    "\1\12\3\0\1\12\4\0\11\12\1\241\14\12\21\0"+
    "\2\12\1\0\2\12\6\0\3\12\1\0\1\12\1\0"+
    "\1\12\3\0\1\12\4\0\16\12\1\242\7\12\21\0"+
    "\2\12\1\0\2\12\6\0\3\12\1\0\1\12\1\0"+
    "\1\12\3\0\1\12\4\0\20\12\1\243\5\12\21\0"+
    "\2\12\1\0\2\12\6\0\3\12\1\0\1\12\1\0"+
    "\1\12\3\0\1\12\4\0\3\12\1\244\22\12\21\0"+
    "\2\12\1\0\2\12\6\0\3\12\1\0\1\12\1\0"+
    "\1\12\3\0\1\12\4\0\4\12\1\245\21\12\21\0"+
    "\2\12\1\0\2\12\6\0\3\12\1\0\1\12\1\0"+
    "\1\12\3\0\1\12\4\0\26\12\4\0\1\246\14\0"+
    "\2\12\1\0\2\12\6\0\3\12\1\0\1\12\1\0"+
    "\1\12\3\0\1\12\4\0\1\247\25\12\21\0\2\12"+
    "\1\0\2\12\6\0\3\12\1\0\1\12\1\0\1\12"+
    "\3\0\1\12\4\0\7\12\1\250\16\12\21\0\2\12"+
    "\1\0\2\12\6\0\3\12\1\0\1\12\1\0\1\12"+
    "\3\0\1\12\4\0\2\12\1\251\4\12\1\252\16\12"+
    "\21\0\2\12\1\0\2\12\6\0\3\12\1\0\1\12"+
    "\1\0\1\12\3\0\1\12\4\0\6\12\1\253\17\12"+
    "\21\0\2\12\1\0\2\12\6\0\3\12\1\0\1\12"+
    "\1\0\1\12\3\0\1\12\4\0\14\12\1\254\11\12"+
    "\21\0\2\12\1\0\2\12\6\0\3\12\1\0\1\12"+
    "\1\0\1\12\3\0\1\12\4\0\20\12\1\255\5\12"+
    "\21\0\2\12\1\0\2\12\6\0\3\12\1\0\1\12"+
    "\1\0\1\12\3\0\1\12\4\0\2\12\1\256\23\12"+
    "\21\0\2\12\1\0\2\12\6\0\3\12\1\0\1\12"+
    "\1\0\1\12\3\0\1\12\4\0\14\12\1\257\3\12"+
    "\1\260\5\12\56\0\1\261\2\0\1\262\123\0\1\263"+
    "\77\0\1\264\101\0\1\265\15\0\2\203\1\0\2\203"+
    "\6\0\3\203\1\0\1\203\1\0\1\203\3\0\1\203"+
    "\4\0\26\203\20\0\6\266\2\0\71\266\1\0\2\267"+
    "\11\0\1\267\1\0\1\267\1\0\1\267\16\0\1\267"+
    "\2\0\1\267\1\0\1\267\3\0\1\267\3\0\1\267"+
    "\3\0\1\267\45\0\1\75\53\0\6\211\1\270\1\0"+
    "\71\211\1\0\2\100\1\0\2\100\6\0\3\100\1\0"+
    "\1\100\1\0\1\100\3\0\1\100\4\0\2\100\1\271"+
    "\23\100\21\0\1\214\12\0\1\214\64\0\6\216\1\272"+
    "\1\0\71\216\6\217\1\273\1\0\71\217\13\220\1\274"+
    "\65\220\12\275\1\276\1\221\65\275\1\0\1\126\12\0"+
    "\1\126\65\0\2\277\11\0\1\277\1\0\1\277\1\213"+
    "\1\277\16\0\1\277\2\0\1\277\1\0\1\277\3\0"+
    "\1\277\3\0\1\277\3\0\1\277\21\0\1\214\12\0"+
    "\1\214\4\0\1\300\44\0\1\300\31\0\1\213\63\0"+
    "\1\301\1\0\1\301\1\0\1\302\1\0\1\303\4\0"+
    "\2\301\1\0\1\301\1\0\1\301\3\0\1\301\4\0"+
    "\26\301\21\0\2\12\1\0\2\12\6\0\3\12\1\0"+
    "\1\12\1\0\1\12\3\0\1\12\4\0\3\12\1\304"+
    "\22\12\21\0\2\12\1\0\2\12\6\0\3\12\1\0"+
    "\1\12\1\0\1\12\3\0\1\12\4\0\5\12\1\305"+
    "\20\12\21\0\2\12\1\0\2\12\6\0\3\12\1\0"+
    "\1\12\1\0\1\12\3\0\1\12\4\0\7\12\1\306"+
    "\16\12\21\0\2\12\1\0\2\12\6\0\3\12\1\0"+
    "\1\12\1\0\1\12\3\0\1\12\4\0\2\12\1\307"+
    "\23\12\21\0\2\12\1\0\2\12\6\0\3\12\1\0"+
    "\1\12\1\0\1\12\3\0\1\12\4\0\7\12\1\310"+
    "\16\12\21\0\2\12\1\0\2\12\6\0\3\12\1\0"+
    "\1\12\1\0\1\12\3\0\1\12\4\0\7\12\1\311"+
    "\16\12\21\0\2\12\1\0\2\12\6\0\3\12\1\0"+
    "\1\12\1\0\1\12\3\0\1\12\4\0\1\312\25\12"+
    "\21\0\2\12\1\0\2\12\6\0\3\12\1\0\1\12"+
    "\1\0\1\12\3\0\1\12\4\0\3\12\1\313\22\12"+
    "\21\0\2\12\1\0\2\12\6\0\3\12\1\0\1\12"+
    "\1\0\1\12\3\0\1\12\4\0\7\12\1\314\16\12"+
    "\21\0\2\12\1\0\2\12\6\0\3\12\1\0\1\12"+
    "\1\0\1\12\3\0\1\12\4\0\20\12\1\315\5\12"+
    "\21\0\2\12\1\0\2\12\6\0\3\12\1\0\1\12"+
    "\1\0\1\12\3\0\1\12\4\0\7\12\1\316\16\12"+
    "\21\0\2\12\1\0\2\12\6\0\3\12\1\0\1\12"+
    "\1\0\1\12\3\0\1\12\4\0\12\12\1\317\13\12"+
    "\21\0\2\12\1\0\2\12\6\0\3\12\1\0\1\12"+
    "\1\0\1\12\3\0\1\320\4\0\26\12\21\0\2\12"+
    "\1\0\2\12\6\0\3\12\1\0\1\12\1\0\1\12"+
    "\3\0\1\12\4\0\11\12\1\321\14\12\21\0\2\12"+
    "\1\0\2\12\6\0\3\12\1\0\1\12\1\0\1\12"+
    "\3\0\1\12\4\0\20\12\1\322\5\12\21\0\2\12"+
    "\1\0\2\12\6\0\3\12\1\0\1\12\1\0\1\12"+
    "\3\0\1\12\4\0\6\12\1\323\17\12\21\0\2\12"+
    "\1\0\2\12\6\0\3\12\1\0\1\12\1\0\1\12"+
    "\3\0\1\12\4\0\3\12\1\324\22\12\21\0\2\12"+
    "\1\0\2\12\6\0\3\12\1\0\1\12\1\0\1\12"+
    "\3\0\1\12\4\0\3\12\1\325\22\12\21\0\2\326"+
    "\1\0\2\326\6\0\3\326\1\0\1\326\1\0\1\326"+
    "\3\0\1\326\4\0\26\326\20\0\6\266\1\327\1\0"+
    "\71\266\1\0\2\330\11\0\1\330\1\0\1\330\1\0"+
    "\1\330\16\0\1\330\2\0\1\330\1\0\1\330\3\0"+
    "\1\330\3\0\1\330\3\0\1\330\21\0\2\100\1\0"+
    "\2\100\6\0\3\100\1\0\1\100\1\0\1\100\3\0"+
    "\1\100\4\0\3\100\1\331\22\100\20\0\12\220\1\332"+
    "\1\274\65\220\13\275\1\333\65\275\1\0\2\277\11\0"+
    "\1\277\1\0\1\277\1\0\1\277\1\0\1\224\14\0"+
    "\1\277\2\0\1\277\1\224\1\277\3\0\1\277\3\0"+
    "\1\277\3\0\1\277\21\0\2\301\1\334\2\301\1\0"+
    "\1\335\4\0\3\301\1\0\1\301\1\0\1\301\3\0"+
    "\1\301\3\0\1\334\26\301\20\0\6\336\2\0\71\336"+
    "\2\0\1\337\1\0\1\337\1\0\1\340\6\0\2\337"+
    "\1\0\1\337\1\0\1\337\3\0\1\337\4\0\26\337"+
    "\21\0\2\12\1\0\2\12\6\0\3\12\1\0\1\12"+
    "\1\0\1\12\3\0\1\12\4\0\17\12\1\341\6\12"+
    "\21\0\2\12\1\0\2\12\6\0\3\12\1\0\1\12"+
    "\1\0\1\12\3\0\1\12\4\0\1\342\25\12\21\0"+
    "\2\12\1\0\2\12\6\0\3\12\1\0\1\12\1\0"+
    "\1\12\3\0\1\12\4\0\14\12\1\343\11\12\21\0"+
    "\2\12\1\0\2\12\6\0\3\12\1\0\1\12\1\0"+
    "\1\12\3\0\1\12\4\0\2\12\1\344\23\12\21\0"+
    "\2\12\1\0\2\12\6\0\3\12\1\0\1\12\1\0"+
    "\1\12\3\0\1\12\4\0\3\12\1\345\22\12\21\0"+
    "\2\12\1\0\2\12\6\0\3\12\1\0\1\12\1\0"+
    "\1\12\3\0\1\12\4\0\4\12\1\346\21\12\21\0"+
    "\2\12\1\0\2\12\6\0\3\12\1\0\1\12\1\0"+
    "\1\12\3\0\1\12\4\0\11\12\1\347\14\12\21\0"+
    "\2\12\1\0\2\12\6\0\3\12\1\0\1\12\1\0"+
    "\1\12\3\0\1\12\4\0\14\12\1\350\11\12\21\0"+
    "\2\12\1\0\2\12\6\0\3\12\1\0\1\12\1\0"+
    "\1\12\3\0\1\12\4\0\12\12\1\351\13\12\21\0"+
    "\2\12\1\0\2\12\6\0\3\12\1\0\1\12\1\0"+
    "\1\12\3\0\1\12\4\0\7\12\1\352\16\12\21\0"+
    "\2\12\1\0\2\12\6\0\3\12\1\0\1\12\1\0"+
    "\1\12\3\0\1\12\4\0\7\12\1\353\16\12\21\0"+
    "\2\354\11\0\1\354\1\0\1\354\1\0\1\354\16\0"+
    "\1\354\2\0\1\354\1\0\1\354\3\0\1\354\3\0"+
    "\1\354\3\0\1\354\20\0\12\275\1\276\1\333\65\275"+
    "\3\0\1\334\3\0\1\335\22\0\1\334\46\0\6\336"+
    "\1\334\1\0\71\336\1\0\2\337\1\355\2\337\1\0"+
    "\1\356\4\0\3\337\1\0\1\337\1\0\1\337\3\0"+
    "\1\337\3\0\1\355\26\337\20\0\6\357\2\0\71\357"+
    "\1\0\2\12\1\0\2\12\6\0\3\12\1\0\1\12"+
    "\1\0\1\12\3\0\1\12\4\0\6\12\1\360\17\12"+
    "\21\0\2\12\1\0\2\12\6\0\3\12\1\0\1\12"+
    "\1\0\1\12\3\0\1\12\4\0\1\361\25\12\21\0"+
    "\2\12\1\0\2\12\6\0\3\12\1\0\1\12\1\0"+
    "\1\12\3\0\1\12\4\0\13\12\1\362\12\12\21\0"+
    "\2\12\1\0\2\12\6\0\3\12\1\0\1\12\1\0"+
    "\1\12\3\0\1\12\4\0\6\12\1\363\17\12\21\0"+
    "\2\206\11\0\1\206\1\0\1\206\1\0\1\206\16\0"+
    "\1\206\2\0\1\206\1\0\1\206\3\0\1\206\3\0"+
    "\1\206\3\0\1\206\23\0\1\355\3\0\1\356\22\0"+
    "\1\355\46\0\6\357\1\355\1\0\71\357\1\0\2\12"+
    "\1\0\2\12\6\0\3\12\1\0\1\12\1\0\1\12"+
    "\3\0\1\364\4\0\26\12\21\0\2\12\1\0\2\12"+
    "\6\0\3\12\1\0\1\12\1\0\1\12\3\0\1\12"+
    "\4\0\7\12\1\365\16\12\21\0\2\12\1\0\2\12"+
    "\6\0\3\12\1\0\1\12\1\0\1\12\3\0\1\12"+
    "\4\0\7\12\1\366\16\12\20\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10595];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\1\11\15\1\2\11\22\1\1\11\2\1\1\11"+
    "\4\1\7\11\1\1\1\11\1\1\1\0\2\11\2\1"+
    "\1\0\1\1\4\11\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\11\2\1\2\11\4\1\5\11\1\1"+
    "\3\0\1\11\27\1\1\0\1\1\1\0\2\11\1\1"+
    "\5\11\1\1\1\0\2\11\1\1\2\0\1\1\1\11"+
    "\1\1\1\11\2\0\2\1\4\0\1\11\1\0\1\11"+
    "\15\1\1\11\14\1\3\11\2\0\1\11\1\1\2\11"+
    "\1\0\1\1\1\11\1\1\4\0\22\1\2\11\1\0"+
    "\1\1\1\11\2\0\1\11\3\0\13\1\2\0\1\11"+
    "\1\0\7\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[246];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private static final class State {
        final int lBraceCount;
        final int state;

        public State(int state, int lBraceCount) {
            this.state = state;
            this.lBraceCount = lBraceCount;
        }
    }

    private final Stack<State> states = new Stack<State>();
    private int lBraceCount;
    private String heredoc;

    private void pushState(int state) {
        states.push(new State(yystate(), lBraceCount));
        lBraceCount = 0;
        yybegin(state);
    }

    private void popState() {
        State state = states.pop();
        lBraceCount = state.lBraceCount;
        yybegin(state.state);
    }


  _JetLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _JetLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1328) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++]:zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++]:zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 3: 
          { return JetTokens.IDENTIFIER;
          }
        case 104: break;
        case 11: 
          { pushState(STRING); return JetTokens.OPEN_QUOTE;
          }
        case 105: break;
        case 74: 
          { return JetTokens.FOR_KEYWORD ;
          }
        case 106: break;
        case 101: 
          { return JetTokens.RETURN_KEYWORD ;
          }
        case 107: break;
        case 85: 
          { return JetTokens.NULL_KEYWORD ;
          }
        case 108: break;
        case 36: 
          { if (lBraceCount == 0) {
                                             popState();
                                             return JetTokens.LONG_TEMPLATE_ENTRY_END;
                                           }
                                           lBraceCount--;
                                           return JetTokens.RBRACE;
          }
        case 109: break;
        case 14: 
          { return JetTokens.LT        ;
          }
        case 110: break;
        case 54: 
          { return JetTokens.DO_KEYWORD ;
          }
        case 111: break;
        case 20: 
          { return JetTokens.PLUS      ;
          }
        case 112: break;
        case 59: 
          { return JetTokens.PLUSEQ    ;
          }
        case 113: break;
        case 90: 
          { popState(); return JetTokens.THIS_KEYWORD;
          }
        case 114: break;
        case 28: 
          { return JetTokens.COMMA     ;
          }
        case 115: break;
        case 17: 
          { return JetTokens.GT        ;
          }
        case 116: break;
        case 4: 
          { return JetTokens.WHITE_SPACE;
          }
        case 117: break;
        case 25: 
          { return JetTokens.RPAR      ;
          }
        case 118: break;
        case 57: 
          { return JetTokens.DOUBLE_ARROW;
          }
        case 119: break;
        case 83: 
          { return JetTokens.TRUE_KEYWORD ;
          }
        case 120: break;
        case 70: 
          { return JetTokens.IDE_TEMPLATE_START    ;
          }
        case 121: break;
        case 38: 
          { return JetTokens.FIELD_IDENTIFIER;
          }
        case 122: break;
        case 61: 
          { return JetTokens.ANDAND    ;
          }
        case 123: break;
        case 65: 
          { pushState(LONG_TEMPLATE_ENTRY); return JetTokens.LONG_TEMPLATE_ENTRY_START;
          }
        case 124: break;
        case 68: 
          { return JetTokens.DOC_COMMENT;
          }
        case 125: break;
        case 37: 
          { return JetTokens.FLOAT_LITERAL;
          }
        case 126: break;
        case 41: 
          { return JetTokens.EOL_COMMENT;
          }
        case 127: break;
        case 87: 
          { return JetTokens.WHEN_KEYWORD ;
          }
        case 128: break;
        case 69: 
          { pushState(RAW_STRING); return JetTokens.OPEN_QUOTE;
          }
        case 129: break;
        case 26: 
          { return JetTokens.COLON     ;
          }
        case 130: break;
        case 49: 
          { return JetTokens.LTEQ      ;
          }
        case 131: break;
        case 47: 
          { return JetTokens.ARROW     ;
          }
        case 132: break;
        case 32: 
          { popState(); return JetTokens.IDENTIFIER;
          }
        case 133: break;
        case 22: 
          { return JetTokens.LBRACKET  ;
          }
        case 134: break;
        case 67: 
          { yypushback(2); return JetTokens.INTEGER_LITERAL;
          }
        case 135: break;
        case 10: 
          { return JetTokens.CHARACTER_LITERAL;
          }
        case 136: break;
        case 75: 
          { return JetTokens.VAR_KEYWORD ;
          }
        case 137: break;
        case 56: 
          { return JetTokens.GTEQ      ;
          }
        case 138: break;
        case 2: 
          { return JetTokens.INTEGER_LITERAL;
          }
        case 139: break;
        case 13: 
          { return JetTokens.RBRACE    ;
          }
        case 140: break;
        case 95: 
          { return JetTokens.CLASS_KEYWORD ;
          }
        case 141: break;
        case 15: 
          { return JetTokens.EXCL      ;
          }
        case 142: break;
        case 71: 
          { return JetTokens.TRY_KEYWORD ;
          }
        case 143: break;
        case 55: 
          { return JetTokens.EXCLEQ    ;
          }
        case 144: break;
        case 48: 
          { return JetTokens.MINUSEQ   ;
          }
        case 145: break;
        case 102: 
          { return JetTokens.PACKAGE_KEYWORD ;
          }
        case 146: break;
        case 92: 
          { return JetTokens.THROW_KEYWORD ;
          }
        case 147: break;
        case 94: 
          { return JetTokens.SUPER_KEYWORD ;
          }
        case 148: break;
        case 97: 
          { return JetTokens.WHILE_KEYWORD ;
          }
        case 149: break;
        case 46: 
          { return JetTokens.MINUSMINUS;
          }
        case 150: break;
        case 103: 
          { return JetTokens.CONTINUE_KEYWORD ;
          }
        case 151: break;
        case 78: 
          { return JetTokens.NOT_IN;
          }
        case 152: break;
        case 40: 
          { return JetTokens.ATAT      ;
          }
        case 153: break;
        case 6: 
          { return JetTokens.DIV       ;
          }
        case 154: break;
        case 80: 
          { return JetTokens.IDE_TEMPLATE_END    ;
          }
        case 155: break;
        case 39: 
          { return JetTokens.LABEL_IDENTIFIER;
          }
        case 156: break;
        case 29: 
          { return JetTokens.REGULAR_STRING_PART;
          }
        case 157: break;
        case 19: 
          { return JetTokens.QUEST     ;
          }
        case 158: break;
        case 62: 
          { return JetTokens.OROR      ;
          }
        case 159: break;
        case 21: 
          { return JetTokens.PERC      ;
          }
        case 160: break;
        case 79: 
          { return JetTokens.EXCLEQEQEQ;
          }
        case 161: break;
        case 63: 
          { return JetTokens.PERCEQ    ;
          }
        case 162: break;
        case 45: 
          { return JetTokens.RANGE     ;
          }
        case 163: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 164: break;
        case 64: 
          { pushState(SHORT_TEMPLATE_ENTRY);
                                                        yypushback(yylength() - 1);
                                                        return JetTokens.SHORT_TEMPLATE_ENTRY_START;
          }
        case 165: break;
        case 77: 
          { return JetTokens.NOT_IS;
          }
        case 166: break;
        case 7: 
          { return JetTokens.MUL       ;
          }
        case 167: break;
        case 23: 
          { return JetTokens.RBRACKET  ;
          }
        case 168: break;
        case 60: 
          { return JetTokens.PLUSPLUS  ;
          }
        case 169: break;
        case 82: 
          { return JetTokens.THIS_KEYWORD ;
          }
        case 170: break;
        case 8: 
          { return JetTokens.DOT       ;
          }
        case 171: break;
        case 27: 
          { return JetTokens.SEMICOLON ;
          }
        case 172: break;
        case 52: 
          { return JetTokens.IF_KEYWORD ;
          }
        case 173: break;
        case 66: 
          { return JetTokens.ESCAPE_SEQUENCE;
          }
        case 174: break;
        case 31: 
          { popState(); return JetTokens.CLOSING_QUOTE;
          }
        case 175: break;
        case 18: 
          { return JetTokens.EQ        ;
          }
        case 176: break;
        case 5: 
          { return JetTokens.AT        ;
          }
        case 177: break;
        case 72: 
          { return JetTokens.AS_SAFE;
          }
        case 178: break;
        case 24: 
          { return JetTokens.LPAR      ;
          }
        case 179: break;
        case 9: 
          { return JetTokens.MINUS     ;
          }
        case 180: break;
        case 34: 
          { String text = yytext().toString();
                if (text.startsWith(this.heredoc)) {
                    // Don't consume any of the trailing tokens.
                    yypushback(text.length() - this.heredoc.length());
                    popState();
                    this.heredoc = null;
                    return JetTokens.CLOSING_QUOTE;
                } else {
                    int pos = text.indexOf("${");
                    if( pos == 0 ) {
                        yypushback(text.length() - 2);
                        pushState(LONG_TEMPLATE_ENTRY);
                        return JetTokens.LONG_TEMPLATE_ENTRY_START;
                    } else if( pos > 0 ) {
                        yypushback(text.length() - pos);
                    }
                    return JetTokens.REGULAR_STRING_PART;
                }
          }
        case 181: break;
        case 98: 
          { return JetTokens.FALSE_KEYWORD ;
          }
        case 182: break;
        case 84: 
          { return JetTokens.TYPE_KEYWORD ;
          }
        case 183: break;
        case 73: 
          { return JetTokens.FUN_KEYWORD ;
          }
        case 184: break;
        case 33: 
          { String text = yytext().toString();
                if (text.startsWith(this.heredoc)) {
                    // Don't consume any of the trailing tokens.
                    yypushback(text.length() - this.heredoc.length());
                    yybegin(YYINITIAL);
                    this.heredoc = null;
                    return JetTokens.CLOSING_QUOTE;
                } else {
                    return JetTokens.REGULAR_STRING_PART;
                }
          }
        case 185: break;
        case 50: 
          { return JetTokens.IS_KEYWORD ;
          }
        case 186: break;
        case 30: 
          { popState(); yypushback(1); return JetTokens.DANGLING_NEWLINE;
          }
        case 187: break;
        case 35: 
          { lBraceCount++; return JetTokens.LBRACE;
          }
        case 188: break;
        case 89: 
          { yypushback(3); return JetTokens.EXCL;
          }
        case 189: break;
        case 43: 
          { return JetTokens.DIVEQ     ;
          }
        case 190: break;
        case 86: 
          { return JetTokens.ELSE_KEYWORD ;
          }
        case 191: break;
        case 53: 
          { return JetTokens.AS_KEYWORD ;
          }
        case 192: break;
        case 51: 
          { return JetTokens.IN_KEYWORD ;
          }
        case 193: break;
        case 99: 
          { this.heredoc = yytext().toString().substring(4).trim();
                pushState(HEREDOC_TEMPLATE);
                return JetTokens.OPEN_QUOTE;
          }
        case 194: break;
        case 58: 
          { return JetTokens.EQEQ      ;
          }
        case 195: break;
        case 81: 
          { return JetTokens.EQEQEQ    ;
          }
        case 196: break;
        case 76: 
          { return JetTokens.VAL_KEYWORD ;
          }
        case 197: break;
        case 88: 
          { return JetTokens.CAPITALIZED_THIS_KEYWORD ;
          }
        case 198: break;
        case 44: 
          { return JetTokens.MULTEQ    ;
          }
        case 199: break;
        case 12: 
          { return JetTokens.LBRACE    ;
          }
        case 200: break;
        case 100: 
          { return JetTokens.OBJECT_KEYWORD ;
          }
        case 201: break;
        case 96: 
          { return JetTokens.BREAK_KEYWORD ;
          }
        case 202: break;
        case 42: 
          { return JetTokens.BLOCK_COMMENT;
          }
        case 203: break;
        case 91: 
          { this.heredoc = yytext().toString().substring(3).trim();
                yybegin(HEREDOC);
                return JetTokens.OPEN_QUOTE;
          }
        case 204: break;
        case 93: 
          { return JetTokens.TRAIT_KEYWORD ;
          }
        case 205: break;
        case 16: 
          { return JetTokens.HASH      ;
          }
        case 206: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
