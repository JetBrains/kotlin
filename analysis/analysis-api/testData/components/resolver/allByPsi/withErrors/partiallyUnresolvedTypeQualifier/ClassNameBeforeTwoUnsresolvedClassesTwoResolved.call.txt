KtFile: 'ClassNameBeforeTwoUnsresolvedClassesTwoResolved.kt'
  null

KtPackageDirective(0,0): ''
  null

KtImportList(0,0): ''
  null

KtClass(1,28): 'class Foo {'
  null

KtClassBody(11,28): '{'
  null

KtClass(17,26): 'class Bar'
  null

KtClass(30,74): 'class C {'
  null

KtClassBody(38,74): '{'
  null

KtProperty(44,72): 'val prop: Foo.Bar.Baz.Bazzzz'
  null

KtTypeReference(54,72): 'Foo.Bar.Baz.Bazzzz'
  null

KtUserType(54,72): 'Foo.Bar.Baz.Bazzzz'
  null

KtUserType(54,65): 'Foo.Bar.Baz'
  null

KtUserType(54,61): 'Foo.Bar'
  null

KtUserType(54,57): 'Foo'
  null

KtNameReferenceExpression(54,57): 'Foo'
  null

KtNameReferenceExpression(58,61): 'Bar'
  null

KtNameReferenceExpression(62,65): 'Baz'
  KaErrorCallInfo:
    candidateCalls = []
    diagnostic = ERROR<UNRESOLVED_REFERENCE: Unresolved reference 'Baz'.>

KtNameReferenceExpression(66,72): 'Bazzzz'
  KaErrorCallInfo:
    candidateCalls = []
    diagnostic = ERROR<UNRESOLVED_REFERENCE: Unresolved reference 'Baz'.>

KtNamedFunction(76,131): 'fun testFun() {'
  null

KtParameterList(87,89): '()'
  null

KtBlockExpression(90,131): '{'
  null

KtProperty(96,129): 'val localProp: Foo.Bar.Baz.Bazzzz'
  null

KtTypeReference(111,129): 'Foo.Bar.Baz.Bazzzz'
  null

KtUserType(111,129): 'Foo.Bar.Baz.Bazzzz'
  null

KtUserType(111,122): 'Foo.Bar.Baz'
  null

KtUserType(111,118): 'Foo.Bar'
  null

KtUserType(111,114): 'Foo'
  null

KtNameReferenceExpression(111,114): 'Foo'
  null

KtNameReferenceExpression(115,118): 'Bar'
  null

KtNameReferenceExpression(119,122): 'Baz'
  KaErrorCallInfo:
    candidateCalls = []
    diagnostic = ERROR<UNRESOLVED_REFERENCE: Unresolved reference 'Baz'.>

KtNameReferenceExpression(123,129): 'Bazzzz'
  KaErrorCallInfo:
    candidateCalls = []
    diagnostic = ERROR<UNRESOLVED_REFERENCE: Unresolved reference 'Baz'.>

KtNamedFunction(133,169): 'fun <T> take(action: (T) -> Unit) {}'
  null

KtTypeParameterList(137,140): '<T>'
  null

KtTypeParameter(138,139): 'T'
  null

KtParameterList(145,166): '(action: (T) -> Unit)'
  null

KtParameter(146,165): 'action: (T) -> Unit'
  null

KtTypeReference(154,165): '(T) -> Unit'
  null

KtFunctionType(154,165): '(T) -> Unit'
  null

KtParameterList(154,157): '(T)'
  null

KtParameter(155,156): 'T'
  null

KtTypeReference(155,156): 'T'
  null

KtUserType(155,156): 'T'
  null

KtNameReferenceExpression(155,156): 'T'
  null

KtTypeReference(161,165): 'Unit'
  null

KtUserType(161,165): 'Unit'
  null

KtNameReferenceExpression(161,165): 'Unit'
  null

KtBlockExpression(167,169): '{}'
  null

KtProperty(171,229): 'val prop = take {'
  null

KtCallExpression(182,229): 'take {'
  KaErrorCallInfo:
    candidateCalls = [
      KaSimpleFunctionCall:
        argumentMapping = {
          {
              lambdaParam: Foo.Bar.Baz.Bazzzz ->
          } -> (KaVariableSignature:
            name = action
            receiverType = null
            returnType = kotlin.Function1<ERROR CLASS: Cannot infer argument for type parameter T, kotlin.Unit>
            symbol = action: kotlin.Function1<T, kotlin.Unit>
            contextParameters = []
            callableId = null)
        }
        isImplicitInvoke = false
        partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
          contextArguments = []
          dispatchReceiver = null
          extensionReceiver = null
          signature = KaFunctionSignature:
            receiverType = null
            returnType = kotlin.Unit
            symbol = /take(action: kotlin.Function1<T, kotlin.Unit>): kotlin.Unit
            valueParameters = [
              KaVariableSignature:
                name = action
                receiverType = null
                returnType = kotlin.Function1<ERROR CLASS: Cannot infer argument for type parameter T, kotlin.Unit>
                symbol = action: kotlin.Function1<T, kotlin.Unit>
                contextParameters = []
                callableId = null
            ]
            contextParameters = []
            callableId = /take
        typeArgumentsMapping = {
          T -> (ERROR CLASS: Cannot infer argument for type parameter T)
        }
    ]
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is 'Function1<??? (Unresolved qualified name: Foo.Bar.Baz.Bazzzz), Unit>', but 'Function1<uninferred T (of fun <T> take), Unit>' was expected.>

KtNameReferenceExpression(182,186): 'take'
  KaErrorCallInfo:
    candidateCalls = [
      KaSimpleFunctionCall:
        argumentMapping = {
          {
              lambdaParam: Foo.Bar.Baz.Bazzzz ->
          } -> (KaVariableSignature:
            name = action
            receiverType = null
            returnType = kotlin.Function1<ERROR CLASS: Cannot infer argument for type parameter T, kotlin.Unit>
            symbol = action: kotlin.Function1<T, kotlin.Unit>
            contextParameters = []
            callableId = null)
        }
        isImplicitInvoke = false
        partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
          contextArguments = []
          dispatchReceiver = null
          extensionReceiver = null
          signature = KaFunctionSignature:
            receiverType = null
            returnType = kotlin.Unit
            symbol = /take(action: kotlin.Function1<T, kotlin.Unit>): kotlin.Unit
            valueParameters = [
              KaVariableSignature:
                name = action
                receiverType = null
                returnType = kotlin.Function1<ERROR CLASS: Cannot infer argument for type parameter T, kotlin.Unit>
                symbol = action: kotlin.Function1<T, kotlin.Unit>
                contextParameters = []
                callableId = null
            ]
            contextParameters = []
            callableId = /take
        typeArgumentsMapping = {
          T -> (ERROR CLASS: Cannot infer argument for type parameter T)
        }
    ]
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is 'Function1<??? (Unresolved qualified name: Foo.Bar.Baz.Bazzzz), Unit>', but 'Function1<uninferred T (of fun <T> take), Unit>' was expected.>

KtLambdaArgument(187,229): '{'
  null

KtLambdaExpression(187,229): '{'
  null

KtFunctionLiteral(187,229): '{'
  null

KtParameterList(193,224): 'lambdaParam: Foo.Bar.Baz.Bazzzz'
  null

KtParameter(193,224): 'lambdaParam: Foo.Bar.Baz.Bazzzz'
  null

KtTypeReference(206,224): 'Foo.Bar.Baz.Bazzzz'
  null

KtUserType(206,224): 'Foo.Bar.Baz.Bazzzz'
  null

KtUserType(206,217): 'Foo.Bar.Baz'
  null

KtUserType(206,213): 'Foo.Bar'
  null

KtUserType(206,209): 'Foo'
  null

KtNameReferenceExpression(206,209): 'Foo'
  null

KtNameReferenceExpression(210,213): 'Bar'
  null

KtNameReferenceExpression(214,217): 'Baz'
  KaErrorCallInfo:
    candidateCalls = []
    diagnostic = ERROR<UNRESOLVED_REFERENCE: Unresolved reference 'Bazzzz'.>

KtNameReferenceExpression(218,224): 'Bazzzz'
  KaErrorCallInfo:
    candidateCalls = []
    diagnostic = ERROR<UNRESOLVED_REFERENCE: Unresolved reference 'Bazzzz'.>

KtBlockExpression(228,228): ''
  null