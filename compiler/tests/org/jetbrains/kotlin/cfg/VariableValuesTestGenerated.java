/*
 * Copyright 2010-2015 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.kotlin.cfg;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.JetTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("compiler/testData/variablesValues")
@TestDataPath("$PROJECT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public class VariableValuesTestGenerated extends AbstractVariableValuesTest {
    public void testAllFilesPresentInVariablesValues() throws Exception {
        JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/variablesValues"), Pattern.compile("^(.+)\\.kt$"), true);
    }

    @TestMetadata("ArithmeticOperations.kt")
    public void testArithmeticOperations() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("compiler/testData/variablesValues/ArithmeticOperations.kt");
        doTest(fileName);
    }

    @TestMetadata("Arrays.kt")
    public void testArrays() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("compiler/testData/variablesValues/Arrays.kt");
        doTest(fileName);
    }

    @TestMetadata("Assignments.kt")
    public void testAssignments() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("compiler/testData/variablesValues/Assignments.kt");
        doTest(fileName);
    }

    @TestMetadata("BooleanVariables.kt")
    public void testBooleanVariables() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("compiler/testData/variablesValues/BooleanVariables.kt");
        doTest(fileName);
    }

    @TestMetadata("ComparisonInConditions.kt")
    public void testComparisonInConditions() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("compiler/testData/variablesValues/ComparisonInConditions.kt");
        doTest(fileName);
    }

    @TestMetadata("For.kt")
    public void testFor() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("compiler/testData/variablesValues/For.kt");
        doTest(fileName);
    }

    @TestMetadata("If.kt")
    public void testIf() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("compiler/testData/variablesValues/If.kt");
        doTest(fileName);
    }

    @TestMetadata("VariablesInitialization.kt")
    public void testVariablesInitialization() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("compiler/testData/variablesValues/VariablesInitialization.kt");
        doTest(fileName);
    }
}
