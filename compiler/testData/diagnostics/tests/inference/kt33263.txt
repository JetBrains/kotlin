package

public fun </*0*/ K> convert(/*0*/ bar: Bar<in K>): Bar<K>
public fun take(/*0*/ x: Bar<A>): kotlin.Unit
public fun test(/*0*/ x: kotlin.Any): kotlin.Unit
public fun test_1(/*0*/ foo: Foo<A>): kotlin.Unit
public fun test_2(/*0*/ foo: Foo<A>): kotlin.Unit
public fun </*0*/ T> Foo<in T>.create(): Bar<in T>

public final class A {
    public constructor A()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public final class Bar</*0*/ R> {
    public constructor Bar</*0*/ R>()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public final class Foo</*0*/ U> {
    public constructor Foo</*0*/ U>()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}
