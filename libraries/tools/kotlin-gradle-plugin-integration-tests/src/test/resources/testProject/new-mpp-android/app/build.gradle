apply plugin: 'com.android.application'
apply plugin: 'kotlin-multiplatform'
apply plugin: 'kotlin-android-extensions'

group 'com.example'
version '1.0'

android {
    compileSdkVersion 27
    defaultConfig {
        applicationId "app.example.com.app_sample"
        minSdkVersion 21
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support.constraint:constraint-layout:1.1.2'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    implementation 'org.jetbrains.kotlin:kotlin-stdlib'
}

kotlin {
	sourceSets {
        commonMain {
            dependencies {
                implementation project(':lib')
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-common'
            }
        }
        jvmAppMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib'
            }
        }
        jsAppMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-js'
            }
        }
	}

    targets {
        fromPreset(presets.android, 'androidApp')
        fromPreset(presets.jvm, 'jvmApp')
        fromPreset(presets.js, 'jsApp')
    }
}

// test diagnostic task, not needed by the build
task printCompilerPluginOptions {
    doFirst {
        kotlin.sourceSets.each { sourceSet ->
            def args = sourceSet.languageSettings.compilerPluginArguments
            def cp = sourceSet.languageSettings.compilerPluginClasspath.files
            println sourceSet.name + '=args=>' + args
            println sourceSet.name + '=cp=>' + cp
        }
    }
}