/*
 * Copyright 2010-2017 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.kotlin.jvm.compiler;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("compiler/testData/compileKotlinAgainstJava")
@TestDataPath("$PROJECT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public class CompileKotlinAgainstJavaTestGenerated extends AbstractCompileKotlinAgainstJavaTest {
    @TestMetadata("AbstractClass.kt")
    public void testAbstractClass() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileKotlinAgainstJava/AbstractClass.kt");
        doTest(fileName);
    }

    public void testAllFilesPresentInCompileKotlinAgainstJava() throws Exception {
        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/compileKotlinAgainstJava"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
    }

    @TestMetadata("AnnotationWithArguments.kt")
    public void testAnnotationWithArguments() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileKotlinAgainstJava/AnnotationWithArguments.kt");
        doTest(fileName);
    }

    @TestMetadata("AsteriskInImport.kt")
    public void testAsteriskInImport() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileKotlinAgainstJava/AsteriskInImport.kt");
        doTest(fileName);
    }

    @TestMetadata("CheckKotlinStub.kt")
    public void testCheckKotlinStub() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileKotlinAgainstJava/CheckKotlinStub.kt");
        doTest(fileName);
    }

    @TestMetadata("CheckNotNull.kt")
    public void testCheckNotNull() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileKotlinAgainstJava/CheckNotNull.kt");
        doTest(fileName);
    }

    @TestMetadata("Class.kt")
    public void testClass() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileKotlinAgainstJava/Class.kt");
        doTest(fileName);
    }

    @TestMetadata("ClassWithTypeParameter.kt")
    public void testClassWithTypeParameter() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileKotlinAgainstJava/ClassWithTypeParameter.kt");
        doTest(fileName);
    }

    @TestMetadata("CyclicDependencies.kt")
    public void testCyclicDependencies() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileKotlinAgainstJava/CyclicDependencies.kt");
        doTest(fileName);
    }

    @TestMetadata("DefaultModifier.kt")
    public void testDefaultModifier() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileKotlinAgainstJava/DefaultModifier.kt");
        doTest(fileName);
    }

    @TestMetadata("Enum.kt")
    public void testEnum() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileKotlinAgainstJava/Enum.kt");
        doTest(fileName);
    }

    @TestMetadata("InnerClass.kt")
    public void testInnerClass() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileKotlinAgainstJava/InnerClass.kt");
        doTest(fileName);
    }

    @TestMetadata("Interface.kt")
    public void testInterface() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileKotlinAgainstJava/Interface.kt");
        doTest(fileName);
    }

    @TestMetadata("InterfaceField.kt")
    public void testInterfaceField() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileKotlinAgainstJava/InterfaceField.kt");
        doTest(fileName);
    }

    @TestMetadata("InterfaceMemberClass.kt")
    public void testInterfaceMemberClass() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileKotlinAgainstJava/InterfaceMemberClass.kt");
        doTest(fileName);
    }

    @TestMetadata("ListImpl.kt")
    public void testListImpl() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileKotlinAgainstJava/ListImpl.kt");
        doTest(fileName);
    }

    @TestMetadata("MapExample.kt")
    public void testMapExample() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileKotlinAgainstJava/MapExample.kt");
        doTest(fileName);
    }

    @TestMetadata("Method.kt")
    public void testMethod() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileKotlinAgainstJava/Method.kt");
        doTest(fileName);
    }

    @TestMetadata("MethodWithArgument.kt")
    public void testMethodWithArgument() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileKotlinAgainstJava/MethodWithArgument.kt");
        doTest(fileName);
    }

    @TestMetadata("MethodWithSeveralTypeParameters.kt")
    public void testMethodWithSeveralTypeParameters() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileKotlinAgainstJava/MethodWithSeveralTypeParameters.kt");
        doTest(fileName);
    }

    @TestMetadata("MethodWithTypeParameter.kt")
    public void testMethodWithTypeParameter() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileKotlinAgainstJava/MethodWithTypeParameter.kt");
        doTest(fileName);
    }

    @TestMetadata("MethodWithWildcard.kt")
    public void testMethodWithWildcard() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileKotlinAgainstJava/MethodWithWildcard.kt");
        doTest(fileName);
    }

    @TestMetadata("RawReturnType.kt")
    public void testRawReturnType() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileKotlinAgainstJava/RawReturnType.kt");
        doTest(fileName);
    }

    @TestMetadata("ReturnInnerInner.kt")
    public void testReturnInnerInner() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileKotlinAgainstJava/ReturnInnerInner.kt");
        doTest(fileName);
    }

    @TestMetadata("ReturnNested.kt")
    public void testReturnNested() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileKotlinAgainstJava/ReturnNested.kt");
        doTest(fileName);
    }

    @TestMetadata("ReturnNestedFQ.kt")
    public void testReturnNestedFQ() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileKotlinAgainstJava/ReturnNestedFQ.kt");
        doTest(fileName);
    }

    @TestMetadata("ReturnType.kt")
    public void testReturnType() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileKotlinAgainstJava/ReturnType.kt");
        doTest(fileName);
    }

    @TestMetadata("ReturnTypeResolution.kt")
    public void testReturnTypeResolution() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileKotlinAgainstJava/ReturnTypeResolution.kt");
        doTest(fileName);
    }

    @TestMetadata("SeveralInnerClasses.kt")
    public void testSeveralInnerClasses() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileKotlinAgainstJava/SeveralInnerClasses.kt");
        doTest(fileName);
    }

    @TestMetadata("SimpleAnnotation.kt")
    public void testSimpleAnnotation() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileKotlinAgainstJava/SimpleAnnotation.kt");
        doTest(fileName);
    }

    @TestMetadata("SimpleWildcard.kt")
    public void testSimpleWildcard() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileKotlinAgainstJava/SimpleWildcard.kt");
        doTest(fileName);
    }

    @TestMetadata("Singleton.kt")
    public void testSingleton() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileKotlinAgainstJava/Singleton.kt");
        doTest(fileName);
    }

    @TestMetadata("StaticNestedClass.kt")
    public void testStaticNestedClass() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileKotlinAgainstJava/StaticNestedClass.kt");
        doTest(fileName);
    }

    @TestMetadata("TypeParameter.kt")
    public void testTypeParameter() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileKotlinAgainstJava/TypeParameter.kt");
        doTest(fileName);
    }

    @TestMetadata("Vararg.kt")
    public void testVararg() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/compileKotlinAgainstJava/Vararg.kt");
        doTest(fileName);
    }
}
