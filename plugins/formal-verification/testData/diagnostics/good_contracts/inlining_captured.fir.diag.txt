/inlining_captured.kt:(354,365): info: Generated Viper text for single_call:
method global$fun_single_call$fun_take$fun_take$T_Int$return$T_Int$return$T_Int(local$g: Ref)
  returns (ret$0: Ref)
  requires acc(local$g.special$function_object_call_counter, write)
  ensures acc(local$g.special$function_object_call_counter, write)
  ensures old(local$g.special$function_object_call_counter) <=
    local$g.special$function_object_call_counter
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$intType())
  ensures local$g.special$function_object_call_counter ==
    old(local$g.special$function_object_call_counter) + 1
{
  var ret$1: Ref
  var ret$2: Ref
  var anonymous$0: Ref
  var anonymous$1: Ref
  var anonymous$2: Ref
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(local$g), dom$RuntimeType$functionType())
  anonymous$0 := dom$RuntimeType$intToRef(0)
  special$invoke_function_object(local$g)
  anonymous$2 := anonymous$1
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(anonymous$2), dom$RuntimeType$intType())
  ret$2 := anonymous$2
  goto label$ret$2
  label label$ret$2
  ret$1 := ret$2
  goto label$ret$1
  label label$ret$1
  ret$0 := ret$1
  goto label$ret$0
  label label$ret$0
}

/inlining_captured.kt:(582,593): info: Generated Viper text for double_call:
method global$fun_double_call$fun_take$fun_take$T_Int$return$T_Int$fun_take$T_Int$return$T_Int$return$T_Int(local$f: Ref,
  local$g: Ref)
  returns (ret$0: Ref)
  requires acc(local$f.special$function_object_call_counter, write)
  requires acc(local$g.special$function_object_call_counter, write)
  ensures acc(local$f.special$function_object_call_counter, write)
  ensures acc(local$g.special$function_object_call_counter, write)
  ensures old(local$f.special$function_object_call_counter) <=
    local$f.special$function_object_call_counter
  ensures old(local$g.special$function_object_call_counter) <=
    local$g.special$function_object_call_counter
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$intType())
  ensures local$f.special$function_object_call_counter ==
    old(local$f.special$function_object_call_counter) + 1
  ensures local$g.special$function_object_call_counter ==
    old(local$g.special$function_object_call_counter) + 1
{
  var ret$1: Ref
  var ret$2: Ref
  var anonymous$0: Ref
  var anonymous$1: Ref
  var anonymous$2: Ref
  var anonymous$3: Ref
  var anonymous$4: Ref
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(local$f), dom$RuntimeType$functionType())
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(local$g), dom$RuntimeType$functionType())
  anonymous$0 := dom$RuntimeType$intToRef(0)
  special$invoke_function_object(local$g)
  anonymous$2 := anonymous$1
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(anonymous$2), dom$RuntimeType$intType())
  special$invoke_function_object(local$f)
  anonymous$4 := anonymous$3
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(anonymous$4), dom$RuntimeType$intType())
  ret$2 := anonymous$4
  goto label$ret$2
  label label$ret$2
  ret$1 := ret$2
  goto label$ret$1
  label label$ret$1
  ret$0 := ret$1
  goto label$ret$0
  label label$ret$0
}

/inlining_captured.kt:(872,883): info: Generated Viper text for nested_call:
method global$fun_nested_call$fun_take$fun_take$T_Int$return$T_Int$fun_take$T_Int$return$T_Int$return$T_Int(local$f: Ref,
  local$g: Ref)
  returns (ret$0: Ref)
  requires acc(local$f.special$function_object_call_counter, write)
  requires acc(local$g.special$function_object_call_counter, write)
  ensures acc(local$f.special$function_object_call_counter, write)
  ensures acc(local$g.special$function_object_call_counter, write)
  ensures old(local$f.special$function_object_call_counter) <=
    local$f.special$function_object_call_counter
  ensures old(local$g.special$function_object_call_counter) <=
    local$g.special$function_object_call_counter
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$intType())
  ensures local$f.special$function_object_call_counter ==
    old(local$f.special$function_object_call_counter) + 1
  ensures local$g.special$function_object_call_counter ==
    old(local$g.special$function_object_call_counter) + 1
{
  var ret$1: Ref
  var ret$2: Ref
  var anonymous$0: Ref
  var anonymous$1: Ref
  var anonymous$2: Ref
  var anonymous$3: Ref
  var anonymous$4: Ref
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(local$f), dom$RuntimeType$functionType())
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(local$g), dom$RuntimeType$functionType())
  anonymous$0 := dom$RuntimeType$intToRef(0)
  special$invoke_function_object(local$g)
  anonymous$3 := anonymous$2
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(anonymous$3), dom$RuntimeType$intType())
  special$invoke_function_object(local$f)
  anonymous$4 := anonymous$1
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(anonymous$4), dom$RuntimeType$intType())
  ret$2 := anonymous$4
  goto label$ret$2
  label label$ret$2
  ret$1 := ret$2
  goto label$ret$1
  label label$ret$1
  ret$0 := ret$1
  goto label$ret$0
  label label$ret$0
}

/inlining_captured.kt:(1158,1174): info: Generated Viper text for non_local_return:
method global$fun_non_local_return$fun_take$fun_take$$return$T_Unit$return$T_Int(local$g: Ref)
  returns (ret$0: Ref)
  requires acc(local$g.special$function_object_call_counter, write)
  ensures acc(local$g.special$function_object_call_counter, write)
  ensures old(local$g.special$function_object_call_counter) <=
    local$g.special$function_object_call_counter
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$intType())
  ensures local$g.special$function_object_call_counter ==
    old(local$g.special$function_object_call_counter) + 1
{
  var ret$1: Ref
  var ret$2: Ref
  var anonymous$0: Ref
  var anonymous$1: Ref
  var anonymous$2: Ref
  var anonymous$3: Ref
  var anonymous$4: Ref
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(local$g), dom$RuntimeType$functionType())
  anonymous$0 := dom$RuntimeType$intToRef(0)
  special$invoke_function_object(local$g)
  anonymous$2 := anonymous$1
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(anonymous$2), dom$RuntimeType$unitType())
  ret$2 := dom$RuntimeType$intToRef(1)
  goto label$ret$2
  special$invoke_function_object(local$g)
  anonymous$4 := anonymous$3
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(anonymous$4), dom$RuntimeType$unitType())
  ret$2 := anonymous$0
  goto label$ret$2
  label label$ret$2
  ret$1 := ret$2
  goto label$ret$1
  label label$ret$1
  ret$0 := ret$1
  goto label$ret$0
  label label$ret$0
}
