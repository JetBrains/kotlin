/loop_invariants.kt:(146,168): info: Generated Viper text for dynamicLambdaInvariant:
method global$fun_dynamicLambdaInvariant$fun_take$fun_take$$return$T_Int$return$T_Unit(local$f: Ref)
  returns (ret$0: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$unitType())
{
  var anonymous$0: Ref
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(local$f), dom$RuntimeType$functionType())
  ret$0 := dom$RuntimeType$unitValue()
  label label$continue$0
  anonymous$0 := global$fun_returnsBoolean$fun_take$$return$T_Boolean()
  while (dom$RuntimeType$boolFromRef(anonymous$0))
    invariant dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$unitType())
  {
    var anonymous$1: Ref
    var anonymous$2: Ref
    special$invoke_function_object(local$f)
    anonymous$2 := anonymous$1
    inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(anonymous$2), dom$RuntimeType$intType())
    anonymous$0 := global$fun_returnsBoolean$fun_take$$return$T_Boolean()
  }
  label label$break$0
  label label$ret$0
}

method global$fun_returnsBoolean$fun_take$$return$T_Boolean()
  returns (ret: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret), dom$RuntimeType$boolType())


/loop_invariants.kt:(241,259): info: Generated Viper text for functionAssignment:
method global$fun_functionAssignment$fun_take$fun_take$$return$T_Int$return$T_Unit(local$f: Ref)
  returns (ret$0: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$unitType())
{
  var local0$g: Ref
  var anonymous$0: Ref
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(local$f), dom$RuntimeType$functionType())
  ret$0 := dom$RuntimeType$unitValue()
  local0$g := local$f
  label label$continue$0
  anonymous$0 := global$fun_returnsBoolean$fun_take$$return$T_Boolean()
  while (dom$RuntimeType$boolFromRef(anonymous$0))
    invariant dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$unitType())
  {
    var anonymous$1: Ref
    var anonymous$2: Ref
    special$invoke_function_object(local0$g)
    anonymous$2 := anonymous$1
    inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(anonymous$2), dom$RuntimeType$intType())
    anonymous$0 := global$fun_returnsBoolean$fun_take$$return$T_Boolean()
  }
  label label$break$0
  label label$ret$0
}

method global$fun_returnsBoolean$fun_take$$return$T_Boolean()
  returns (ret: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret), dom$RuntimeType$boolType())


/loop_invariants.kt:(346,375): info: Generated Viper text for conditionalFunctionAssignment:
method global$fun_conditionalFunctionAssignment$fun_take$T_Boolean$fun_take$$return$T_Int$fun_take$$return$T_Int$return$T_Unit(local$b: Ref,
  local$f: Ref, local$h: Ref)
  returns (ret$0: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$unitType())
{
  var local0$g: Ref
  var anonymous$0: Ref
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(local$b), dom$RuntimeType$boolType())
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(local$f), dom$RuntimeType$functionType())
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(local$h), dom$RuntimeType$functionType())
  ret$0 := dom$RuntimeType$unitValue()
  if (dom$RuntimeType$boolFromRef(local$b)) {
    local0$g := local$f
  } else {
    local0$g := local$h}
  label label$continue$0
  anonymous$0 := global$fun_returnsBoolean$fun_take$$return$T_Boolean()
  while (dom$RuntimeType$boolFromRef(anonymous$0))
    invariant dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$unitType())
  {
    var anonymous$1: Ref
    var anonymous$2: Ref
    special$invoke_function_object(local0$g)
    anonymous$2 := anonymous$1
    inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(anonymous$2), dom$RuntimeType$intType())
    anonymous$0 := global$fun_returnsBoolean$fun_take$$return$T_Boolean()
  }
  label label$break$0
  label label$ret$0
}

method global$fun_returnsBoolean$fun_take$$return$T_Boolean()
  returns (ret: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret), dom$RuntimeType$boolType())
