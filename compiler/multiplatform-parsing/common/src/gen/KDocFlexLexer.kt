// Generated by JFlex 1.10.14 http://jflex.de/  (tweaked for IntelliJ platform)
// source: compiler/multiplatform-parsing/common/src/org/jetbrains/kotlin/kmp/lexer/KDoc.flex

@file:Suppress("PackageDirectoryMismatch") // The generated files are located in another directory

package org.jetbrains.kotlin.kmp.lexer

import com.intellij.platform.syntax.SyntaxElementType
import com.intellij.platform.syntax.element.SyntaxTokenTypes
import com.intellij.platform.syntax.util.lexer.FlexLexer
import org.jetbrains.annotations.ApiStatus
import kotlin.jvm.JvmStatic // Not needed on JVM, but needed when compiling other targets

@ApiStatus.Experimental

class KDocFlexLexer : FlexLexer {
companion object {
  /** This character denotes the end of file */
  private const val YYEOF = -1 

  /** initial size of the lookahead buffer */
  private const val ZZ_BUFFERSIZE: Int = 16384

  /** lexical states */
  public const val YYINITIAL: Int = 0
  public const val LINE_BEGINNING: Int = 2
  public const val CONTENTS_BEGINNING: Int = 4
  public const val TAG_BEGINNING: Int = 6
  public const val TAG_TEXT_BEGINNING: Int = 8
  public const val CONTENTS: Int = 10
  public const val CODE_BLOCK: Int = 12
  public const val CODE_BLOCK_LINE_BEGINNING: Int = 14
  public const val CODE_BLOCK_CONTENTS_BEGINNING: Int = 16
  public const val INDENTED_CODE_BLOCK: Int = 18

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  @JvmStatic
  private val ZZ_LEXSTATE: IntArray = intArrayOf(
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  6, 6
  )

  /**
   * Top-level table for translating characters to character classes
   */
  private const val ZZ_CMAP_TOP_PACKED_0: String  =
    "\u0001\u0000\u0001\u0100\u0001\u0200\u0001\u0300\u0001\u0400\u0001\u0500\u0001\u0600\u0001\u0700"+
    "\u0001\u0800\u0001\u0900\u0001\u0a00\u0001\u0b00\u0001\u0c00\u0001\u0d00\u0001\u0e00\u0001\u0f00"+
    "\u0001\u1000\u0001\u0100\u0001\u1100\u0001\u1200\u0001\u1300\u0001\u0100\u0001\u1400\u0001\u1500"+
    "\u0001\u1600\u0001\u1700\u0001\u1800\u0001\u1900\u0001\u1a00\u0001\u1b00\u0001\u0100\u0001\u1c00"+
    "\u0001\u1d00\u0001\u1e00\u000a\u1f00\u0001\u2000\u0001\u2100\u0001\u2200\u0001\u1f00\u0001\u2300"+
    "\u0001\u2400\u0002\u1f00\u0019\u0100\u0001\u1b00\u0056\u0100\u0001\u2500\u0001\u0100\u0001\u2600"+
    "\u0001\u2700\u0001\u2800\u0001\u2900\u0001\u2a00\u0001\u2b00\u002b\u0100\u0001\u2c00\u0008\u2d00"+
    "\u0019\u1f00\u0001\u0100\u0001\u2e00\u0001\u2f00\u0001\u0100\u0001\u3000\u0001\u3100\u0001\u3200"+
    "\u0001\u3300\u0001\u3400\u0001\u3500\u0001\u3600\u0001\u3700\u0001\u3800\u0001\u0100\u0001\u3900"+
    "\u0001\u3a00\u0001\u3b00\u0001\u3c00\u0001\u3d00\u0001\u3e00\u0001\u3f00\u0001\u4000\u0001\u4100"+
    "\u0001\u4200\u0001\u4300\u0001\u4400\u0001\u4500\u0001\u4600\u0001\u4700\u0001\u4800\u0001\u4900"+
    "\u0001\u4a00\u0001\u4b00\u0001\u4c00\u0001\u1f00\u0001\u4d00\u0001\u4e00\u0001\u4f00\u0001\u5000"+
    "\u0003\u0100\u0001\u5100\u0001\u5200\u0001\u5300\u0009\u1f00\u0001\u5400\u0004\u0100\u0001\u5500"+
    "\u000f\u1f00\u0002\u0100\u0001\u5600\u0021\u1f00\u0002\u0100\u0001\u5700\u0001\u5800\u0002\u1f00"+
    "\u0001\u5900\u0001\u5a00\u0017\u0100\u0001\u5b00\u0004\u0100\u0001\u5c00\u0001\u5d00\u0021\u1f00"+
    "\u0001\u5e00\u0001\u0100\u0001\u5f00\u0001\u6000\u0009\u1f00\u0001\u6100\u0017\u1f00\u0001\u6200"+
    "\u0001\u6300\u0001\u6400\u0001\u6500\u0007\u1f00\u0001\u6600\u0001\u6700\u0001\u6800\u0001\u6900"+
    "\u0001\u1f00\u0001\u6a00\u0002\u1f00\u0001\u6b00\u0001\u6c00\u0001\u6d00\u0002\u1f00\u0001\u6e00"+
    "\u0001\u1f00\u0001\u6f00\u0011\u1f00\u00a6\u0100\u0001\u7000\u0010\u0100\u0001\u7100\u0001\u7200"+
    "\u0015\u0100\u0001\u7300\u001c\u0100\u0001\u7400\u000c\u1f00\u0002\u0100\u0001\u7500\u0005\u1f00"+
    "\u0013\u0100\u0001\u7600\u000f\u0100\u0001\u7700\u0ddc\u1f00"

  @JvmStatic
  private fun zzUnpackcmap_top(): IntArray {
    val result: IntArray = IntArray(4352)
    var offset: Int = 0
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result)
    return result
  }

  @JvmStatic
  private fun zzUnpackcmap_top(packed: String , offset: Int, result: IntArray): Int {
    var i: Int = 0       /* index in packed string  */
    var j: Int = offset  /* index in unpacked array */
    val l: Int = packed.length
    while (i < l) {
      var count: Int = packed[i++].code
      var value: Int = packed[i++].code
      do
          result[j++] = value
      while (--count > 0)
    }
    return j
  }

  @JvmStatic
  private val ZZ_CMAP_TOP: IntArray = zzUnpackcmap_top()


  /**
   * Second-level tables for translating characters to character classes
   */
  private const val ZZ_CMAP_BLOCKS_PACKED_0: String  =
    "\u0009\u0000\u0001\u0001\u0001\u0002\u0001\u0003\u0001\u0004\u0001\u0003\u0012\u0000\u0001\u0005"+
    "\u0003\u0000\u0001\u0006\u0003\u0000\u0001\u0007\u0001\u0008\u0001\u0009\u0003\u0000\u0001\u000a"+
    "\u0001\u000b\u000a\u000c\u0006\u0000\u0001\u000d\u001a\u0006\u0001\u000e\u0001\u000f\u0001\u0010"+
    "\u0001\u0000\u0001\u0006\u0001\u0011\u001a\u0006\u0003\u0000\u0001\u0012\u0006\u0000\u0001\u0003"+
    "\u001c\u0000\u0004\u0006\u0004\u0000\u0001\u0006\u000a\u0000\u0001\u0006\u0004\u0000\u0001\u0006"+
    "\u0005\u0000\u0017\u0006\u0001\u0000\u001f\u0006\u0001\u0000\u01ca\u0006\u0004\u0000\u000c\u0006"+
    "\u000e\u0000\u0005\u0006\u0007\u0000\u0001\u0006\u0001\u0000\u0001\u0006\u0081\u0000\u0005\u0006"+
    "\u0001\u0000\u0002\u0006\u0002\u0000\u0004\u0006\u0001\u0000\u0001\u0006\u0006\u0000\u0001\u0006"+
    "\u0001\u0000\u0003\u0006\u0001\u0000\u0001\u0006\u0001\u0000\u0014\u0006\u0001\u0000\u0053\u0006"+
    "\u0001\u0000\u008b\u0006\u0008\u0000\u00a6\u0006\u0001\u0000\u0026\u0006\u0002\u0000\u0001\u0006"+
    "\u0006\u0000\u0029\u0006\u0006\u0000\u0001\u0006\u0040\u0000\u001b\u0006\u0004\u0000\u0004\u0006"+
    "\u0018\u0000\u0001\u0006\u0014\u0000\u002b\u0006\u0023\u0000\u0002\u0006\u0001\u0000\u0063\u0006"+
    "\u0001\u0000\u0001\u0006\u000f\u0000\u0002\u0006\u0007\u0000\u0002\u0006\u000a\u0000\u0003\u0006"+
    "\u0002\u0000\u0001\u0006\u0010\u0000\u0001\u0006\u0001\u0000\u001e\u0006\u001d\u0000\u0059\u0006"+
    "\u000b\u0000\u0001\u0006\u0018\u0000\u0021\u0006\u0009\u0000\u0002\u0006\u0004\u0000\u0001\u0006"+
    "\u0003\u0000\u0018\u0006\u0004\u0000\u0001\u0006\u0009\u0000\u0001\u0006\u0003\u0000\u0001\u0006"+
    "\u0017\u0000\u0019\u0006\u0007\u0000\u000b\u0006\u0005\u0000\u0018\u0006\u0001\u0000\u0006\u0006"+
    "\u0011\u0000\u002a\u0006\u003a\u0000\u0036\u0006\u0003\u0000\u0001\u0006\u0012\u0000\u0001\u0006"+
    "\u0007\u0000\u000a\u0006\u000f\u0000\u0010\u0006\u0004\u0000\u0008\u0006\u0002\u0000\u0002\u0006"+
    "\u0002\u0000\u0016\u0006\u0001\u0000\u0007\u0006\u0001\u0000\u0001\u0006\u0003\u0000\u0004\u0006"+
    "\u0003\u0000\u0001\u0006\u0010\u0000\u0001\u0006\u000d\u0000\u0002\u0006\u0001\u0000\u0003\u0006"+
    "\u000e\u0000\u0004\u0006\u0007\u0000\u0002\u0006\u0008\u0000\u0006\u0006\u0004\u0000\u0002\u0006"+
    "\u0002\u0000\u0016\u0006\u0001\u0000\u0007\u0006\u0001\u0000\u0002\u0006\u0001\u0000\u0002\u0006"+
    "\u0001\u0000\u0002\u0006\u001f\u0000\u0004\u0006\u0001\u0000\u0001\u0006\u0013\u0000\u0003\u0006"+
    "\u0010\u0000\u0009\u0006\u0001\u0000\u0003\u0006\u0001\u0000\u0016\u0006\u0001\u0000\u0007\u0006"+
    "\u0001\u0000\u0002\u0006\u0001\u0000\u0005\u0006\u0003\u0000\u0001\u0006\u0012\u0000\u0001\u0006"+
    "\u000f\u0000\u0002\u0006\u000f\u0000\u0001\u0006\u0007\u0000\u0001\u0006\u000b\u0000\u0008\u0006"+
    "\u0002\u0000\u0002\u0006\u0002\u0000\u0016\u0006\u0001\u0000\u0007\u0006\u0001\u0000\u0002\u0006"+
    "\u0001\u0000\u0005\u0006\u0003\u0000\u0001\u0006\u001e\u0000\u0002\u0006\u0001\u0000\u0003\u0006"+
    "\u000f\u0000\u0001\u0006\u0011\u0000\u0001\u0006\u0001\u0000\u0006\u0006\u0003\u0000\u0003\u0006"+
    "\u0001\u0000\u0004\u0006\u0003\u0000\u0002\u0006\u0001\u0000\u0001\u0006\u0001\u0000\u0002\u0006"+
    "\u0003\u0000\u0002\u0006\u0003\u0000\u0003\u0006\u0003\u0000\u000c\u0006\u0016\u0000\u0001\u0006"+
    "\u0028\u0000\u0001\u0006\u000b\u0000\u0008\u0006\u0001\u0000\u0003\u0006\u0001\u0000\u0017\u0006"+
    "\u0001\u0000\u0010\u0006\u0003\u0000\u0001\u0006\u001a\u0000\u0003\u0006\u0002\u0000\u0001\u0006"+
    "\u0002\u0000\u0002\u0006\u001e\u0000\u0001\u0006\u0004\u0000\u0008\u0006\u0001\u0000\u0003\u0006"+
    "\u0001\u0000\u0017\u0006\u0001\u0000\u000a\u0006\u0001\u0000\u0005\u0006\u0003\u0000\u0001\u0006"+
    "\u001f\u0000\u0002\u0006\u0001\u0000\u0002\u0006\u000f\u0000\u0002\u0006\u0011\u0000\u0009\u0006"+
    "\u0001\u0000\u0003\u0006\u0001\u0000\u0029\u0006\u0002\u0000\u0001\u0006\u0010\u0000\u0001\u0006"+
    "\u0005\u0000\u0003\u0006\u0008\u0000\u0003\u0006\u0018\u0000\u0006\u0006\u0005\u0000\u0012\u0006"+
    "\u0003\u0000\u0018\u0006\u0001\u0000\u0009\u0006\u0001\u0000\u0001\u0006\u0002\u0000\u0007\u0006"+
    "\u003a\u0000\u0030\u0006\u0001\u0000\u0002\u0006\u000b\u0000\u0008\u0006\u003a\u0000\u0002\u0006"+
    "\u0001\u0000\u0001\u0006\u0001\u0000\u0005\u0006\u0001\u0000\u0018\u0006\u0001\u0000\u0001\u0006"+
    "\u0001\u0000\u000a\u0006\u0001\u0000\u0002\u0006\u0009\u0000\u0001\u0006\u0002\u0000\u0005\u0006"+
    "\u0001\u0000\u0001\u0006\u0015\u0000\u0004\u0006\u0020\u0000\u0001\u0006\u003f\u0000\u0008\u0006"+
    "\u0001\u0000\u0024\u0006\u001b\u0000\u0005\u0006\u0073\u0000\u002b\u0006\u0014\u0000\u0001\u0006"+
    "\u0010\u0000\u0006\u0006\u0004\u0000\u0004\u0006\u0003\u0000\u0001\u0006\u0003\u0000\u0002\u0006"+
    "\u0007\u0000\u0003\u0006\u0004\u0000\u000d\u0006\u000c\u0000\u0001\u0006\u0011\u0000\u0026\u0006"+
    "\u0001\u0000\u0001\u0006\u0005\u0000\u0001\u0006\u0002\u0000\u002b\u0006\u0001\u0000\u004d\u0006"+
    "\u0001\u0000\u0004\u0006\u0002\u0000\u0007\u0006\u0001\u0000\u0001\u0006\u0001\u0000\u0004\u0006"+
    "\u0002\u0000\u0029\u0006\u0001\u0000\u0004\u0006\u0002\u0000\u0021\u0006\u0001\u0000\u0004\u0006"+
    "\u0002\u0000\u0007\u0006\u0001\u0000\u0001\u0006\u0001\u0000\u0004\u0006\u0002\u0000\u000f\u0006"+
    "\u0001\u0000\u0039\u0006\u0001\u0000\u0004\u0006\u0002\u0000\u0043\u0006\u0025\u0000\u0010\u0006"+
    "\u0010\u0000\u0056\u0006\u0002\u0000\u0006\u0006\u0003\u0000\u016c\u0006\u0002\u0000\u0011\u0006"+
    "\u0001\u0000\u001a\u0006\u0005\u0000\u004b\u0006\u0003\u0000\u000b\u0006\u0007\u0000\u0012\u0006"+
    "\u000d\u0000\u0013\u0006\u000e\u0000\u0012\u0006\u000e\u0000\u000d\u0006\u0001\u0000\u0003\u0006"+
    "\u000f\u0000\u0034\u0006\u0023\u0000\u0001\u0006\u0003\u0000\u0002\u0006\u0043\u0000\u0059\u0006"+
    "\u0007\u0000\u0005\u0006\u0002\u0000\u0022\u0006\u0001\u0000\u0001\u0006\u0005\u0000\u0046\u0006"+
    "\u000a\u0000\u001f\u0006\u0031\u0000\u001e\u0006\u0002\u0000\u0005\u0006\u000b\u0000\u002c\u0006"+
    "\u0004\u0000\u001a\u0006\u0036\u0000\u0017\u0006\u0009\u0000\u0035\u0006\u0052\u0000\u0001\u0006"+
    "\u005d\u0000\u002f\u0006\u0011\u0000\u0008\u0006\u0036\u0000\u001e\u0006\u000d\u0000\u0002\u0006"+
    "\u000a\u0000\u002c\u0006\u001a\u0000\u0024\u0006\u0029\u0000\u0003\u0006\u000a\u0000\u0024\u0006"+
    "\u0002\u0000\u0009\u0006\u0007\u0000\u002b\u0006\u0002\u0000\u0003\u0006\u0029\u0000\u0004\u0006"+
    "\u0001\u0000\u0006\u0006\u0001\u0000\u0002\u0006\u0003\u0000\u0001\u0006\u0005\u0000\u00c0\u0006"+
    "\u0040\u0000\u0016\u0006\u0002\u0000\u0006\u0006\u0002\u0000\u0026\u0006\u0002\u0000\u0006\u0006"+
    "\u0002\u0000\u0008\u0006\u0001\u0000\u0001\u0006\u0001\u0000\u0001\u0006\u0001\u0000\u0001\u0006"+
    "\u0001\u0000\u001f\u0006\u0002\u0000\u0035\u0006\u0001\u0000\u0007\u0006\u0001\u0000\u0001\u0006"+
    "\u0003\u0000\u0003\u0006\u0001\u0000\u0007\u0006\u0003\u0000\u0004\u0006\u0002\u0000\u0006\u0006"+
    "\u0004\u0000\u000d\u0006\u0005\u0000\u0003\u0006\u0001\u0000\u0007\u0006\u002b\u0000\u0002\u0003"+
    "\u0015\u0000\u0002\u0006\u0013\u0000\u0001\u0006\u001c\u0000\u0001\u0006\u000d\u0000\u0001\u0006"+
    "\u0010\u0000\u000d\u0006\u0003\u0000\u0021\u0006\u0041\u0000\u0001\u0006\u0004\u0000\u0001\u0006"+
    "\u0002\u0000\u000a\u0006\u0001\u0000\u0001\u0006\u0003\u0000\u0005\u0006\u0006\u0000\u0001\u0006"+
    "\u0001\u0000\u0001\u0006\u0001\u0000\u0001\u0006\u0001\u0000\u0004\u0006\u0001\u0000\u000b\u0006"+
    "\u0002\u0000\u0004\u0006\u0005\u0000\u0005\u0006\u0004\u0000\u0001\u0006\u0011\u0000\u0029\u0006"+
    "\u0177\u0000\u00e5\u0006\u0006\u0000\u0004\u0006\u0003\u0000\u0002\u0006\u000c\u0000\u0026\u0006"+
    "\u0001\u0000\u0001\u0006\u0005\u0000\u0001\u0006\u0002\u0000\u0038\u0006\u0007\u0000\u0001\u0006"+
    "\u0010\u0000\u0017\u0006\u0009\u0000\u0007\u0006\u0001\u0000\u0007\u0006\u0001\u0000\u0007\u0006"+
    "\u0001\u0000\u0007\u0006\u0001\u0000\u0007\u0006\u0001\u0000\u0007\u0006\u0001\u0000\u0007\u0006"+
    "\u0001\u0000\u0007\u0006\u0050\u0000\u0001\u0006\u00d5\u0000\u0003\u0006\u0019\u0000\u0009\u0006"+
    "\u0007\u0000\u0005\u0006\u0002\u0000\u0005\u0006\u0004\u0000\u0056\u0006\u0006\u0000\u0003\u0006"+
    "\u0001\u0000\u005a\u0006\u0001\u0000\u0004\u0006\u0005\u0000\u002b\u0006\u0001\u0000\u005e\u0006"+
    "\u0011\u0000\u0020\u0006\u0030\u0000\u009d\u0006\u0043\u0000\u002e\u0006\u0002\u0000\u000d\u0006"+
    "\u0003\u0000\u0010\u0006\u000a\u0000\u0002\u0006\u0014\u0000\u002f\u0006\u0010\u0000\u001f\u0006"+
    "\u0002\u0000\u0050\u0006\u0027\u0000\u0009\u0006\u0002\u0000\u0067\u0006\u0002\u0000\u0040\u0006"+
    "\u0005\u0000\u0002\u0006\u0001\u0000\u0001\u0006\u0001\u0000\u0005\u0006\u0018\u0000\u0010\u0006"+
    "\u0001\u0000\u0003\u0006\u0001\u0000\u0004\u0006\u0001\u0000\u0017\u0006\u0015\u0000\u0001\u0006"+
    "\u0007\u0000\u0034\u0006\u000e\u0000\u0032\u0006\u003e\u0000\u0006\u0006\u0003\u0000\u0001\u0006"+
    "\u0001\u0000\u0002\u0006\u000b\u0000\u001c\u0006\u000a\u0000\u0017\u0006\u0019\u0000\u001d\u0006"+
    "\u0007\u0000\u002f\u0006\u001c\u0000\u0001\u0006\u0010\u0000\u0005\u0006\u0001\u0000\u000a\u0006"+
    "\u000a\u0000\u0005\u0006\u0001\u0000\u0029\u0006\u0017\u0000\u0003\u0006\u0001\u0000\u0008\u0006"+
    "\u0014\u0000\u0017\u0006\u0003\u0000\u0001\u0006\u0003\u0000\u0032\u0006\u0001\u0000\u0001\u0006"+
    "\u0003\u0000\u0002\u0006\u0002\u0000\u0005\u0006\u0002\u0000\u0001\u0006\u0001\u0000\u0001\u0006"+
    "\u0018\u0000\u0003\u0006\u0002\u0000\u000b\u0006\u0007\u0000\u0003\u0006\u000c\u0000\u0006\u0006"+
    "\u0002\u0000\u0006\u0006\u0002\u0000\u0006\u0006\u0009\u0000\u0007\u0006\u0001\u0000\u0007\u0006"+
    "\u0001\u0000\u002b\u0006\u0001\u0000\u000e\u0006\u0006\u0000\u0073\u0006\u001d\u0000\u00a4\u0006"+
    "\u000c\u0000\u0017\u0006\u0004\u0000\u0031\u0006\u0004\u0000\u0100\u0003\u006e\u0006\u0002\u0000"+
    "\u006a\u0006\u0026\u0000\u0007\u0006\u000c\u0000\u0005\u0006\u0005\u0000\u0001\u0006\u0001\u0000"+
    "\u000a\u0006\u0001\u0000\u000d\u0006\u0001\u0000\u0005\u0006\u0001\u0000\u0001\u0006\u0001\u0000"+
    "\u0002\u0006\u0001\u0000\u0002\u0006\u0001\u0000\u006c\u0006\u0021\u0000\u006b\u0006\u0012\u0000"+
    "\u0040\u0006\u0002\u0000\u0036\u0006\u0028\u0000\u000d\u0006\u0036\u0000\u0002\u0006\u0018\u0000"+
    "\u0003\u0006\u0019\u0000\u0001\u0006\u0006\u0000\u0005\u0006\u0001\u0000\u0087\u0006\u0007\u0000"+
    "\u0001\u0006\u001c\u0000\u001a\u0006\u0004\u0000\u0001\u0006\u0001\u0000\u001a\u0006\u000b\u0000"+
    "\u0059\u0006\u0003\u0000\u0006\u0006\u0002\u0000\u0006\u0006\u0002\u0000\u0006\u0006\u0002\u0000"+
    "\u0003\u0006\u0003\u0000\u0002\u0006\u0003\u0000\u0002\u0006\u0019\u0000\u000c\u0006\u0001\u0000"+
    "\u001a\u0006\u0001\u0000\u0013\u0006\u0001\u0000\u0002\u0006\u0001\u0000\u000f\u0006\u0002\u0000"+
    "\u000e\u0006\u0022\u0000\u007b\u0006\u0045\u0000\u0035\u0006\u010b\u0000\u001d\u0006\u0003\u0000"+
    "\u0031\u0006\u002f\u0000\u0020\u0006\u000d\u0000\u001e\u0006\u0005\u0000\u0026\u0006\u000a\u0000"+
    "\u001e\u0006\u0002\u0000\u0024\u0006\u0004\u0000\u0008\u0006\u0001\u0000\u0005\u0006\u002a\u0000"+
    "\u009e\u0006\u0012\u0000\u0024\u0006\u0004\u0000\u0024\u0006\u0004\u0000\u0028\u0006\u0008\u0000"+
    "\u0034\u0006\u000c\u0000\u000b\u0006\u0001\u0000\u000f\u0006\u0001\u0000\u0007\u0006\u0001\u0000"+
    "\u0002\u0006\u0001\u0000\u000b\u0006\u0001\u0000\u000f\u0006\u0001\u0000\u0007\u0006\u0001\u0000"+
    "\u0002\u0006\u0043\u0000\u0037\u0006\u0009\u0000\u0016\u0006\u000a\u0000\u0008\u0006\u0018\u0000"+
    "\u0006\u0006\u0001\u0000\u002a\u0006\u0001\u0000\u0009\u0006\u0045\u0000\u0006\u0006\u0002\u0000"+
    "\u0001\u0006\u0001\u0000\u002c\u0006\u0001\u0000\u0002\u0006\u0003\u0000\u0001\u0006\u0002\u0000"+
    "\u0017\u0006\u000a\u0000\u0017\u0006\u0009\u0000\u001f\u0006\u0041\u0000\u0013\u0006\u0001\u0000"+
    "\u0002\u0006\u000a\u0000\u0016\u0006\u000a\u0000\u001a\u0006\u0046\u0000\u0038\u0006\u0006\u0000"+
    "\u0002\u0006\u0040\u0000\u0001\u0006\u000f\u0000\u0004\u0006\u0001\u0000\u0003\u0006\u0001\u0000"+
    "\u001d\u0006\u002a\u0000\u001d\u0006\u0003\u0000\u001d\u0006\u0023\u0000\u0008\u0006\u0001\u0000"+
    "\u001c\u0006\u001b\u0000\u0036\u0006\u000a\u0000\u0016\u0006\u000a\u0000\u0013\u0006\u000d\u0000"+
    "\u0012\u0006\u006e\u0000\u0049\u0006\u0037\u0000\u0033\u0006\u000d\u0000\u0033\u0006\u000d\u0000"+
    "\u0024\u0006\u015c\u0000\u002a\u0006\u0006\u0000\u0002\u0006\u004e\u0000\u001d\u0006\u000a\u0000"+
    "\u0001\u0006\u0008\u0000\u0016\u0006\u002a\u0000\u0012\u0006\u002e\u0000\u0015\u0006\u001b\u0000"+
    "\u0017\u0006\u000c\u0000\u0035\u0006\u0039\u0000\u0002\u0006\u0002\u0000\u0001\u0006\u000d\u0000"+
    "\u002d\u0006\u0020\u0000\u0019\u0006\u001a\u0000\u0024\u0006\u001d\u0000\u0001\u0006\u0002\u0000"+
    "\u0001\u0006\u0008\u0000\u0023\u0006\u0003\u0000\u0001\u0006\u000c\u0000\u0030\u0006\u000e\u0000"+
    "\u0004\u0006\u0015\u0000\u0001\u0006\u0001\u0000\u0001\u0006\u0023\u0000\u0012\u0006\u0001\u0000"+
    "\u0019\u0006\u0013\u0000\u0002\u0006\u003f\u0000\u0007\u0006\u0001\u0000\u0001\u0006\u0001\u0000"+
    "\u0004\u0006\u0001\u0000\u000f\u0006\u0001\u0000\u000a\u0006\u0007\u0000\u002f\u0006\u0026\u0000"+
    "\u0008\u0006\u0002\u0000\u0002\u0006\u0002\u0000\u0016\u0006\u0001\u0000\u0007\u0006\u0001\u0000"+
    "\u0002\u0006\u0001\u0000\u0005\u0006\u0003\u0000\u0001\u0006\u0012\u0000\u0001\u0006\u000c\u0000"+
    "\u0005\u0006\u009e\u0000\u0035\u0006\u0012\u0000\u0004\u0006\u0014\u0000\u0003\u0006\u001e\u0000"+
    "\u0030\u0006\u0014\u0000\u0002\u0006\u0001\u0000\u0001\u0006\u00b8\u0000\u002f\u0006\u0029\u0000"+
    "\u0004\u0006\u0024\u0000\u0030\u0006\u0014\u0000\u0001\u0006\u003b\u0000\u002b\u0006\u000d\u0000"+
    "\u0001\u0006\u0047\u0000\u001b\u0006\u0025\u0000\u0007\u0006\u00b9\u0000\u002c\u0006\u0074\u0000"+
    "\u0040\u0006\u001f\u0000\u0008\u0006\u0002\u0000\u0001\u0006\u0002\u0000\u0008\u0006\u0001\u0000"+
    "\u0002\u0006\u0001\u0000\u0018\u0006\u000f\u0000\u0001\u0006\u0001\u0000\u0001\u0006\u005e\u0000"+
    "\u0008\u0006\u0002\u0000\u0027\u0006\u0010\u0000\u0001\u0006\u0001\u0000\u0001\u0006\u001c\u0000"+
    "\u0001\u0006\u000a\u0000\u0028\u0006\u0007\u0000\u0001\u0006\u0015\u0000\u0001\u0006\u000b\u0000"+
    "\u002e\u0006\u0013\u0000\u0001\u0006\u0012\u0000\u0049\u0006\u0007\u0000\u0009\u0006\u0001\u0000"+
    "\u0025\u0006\u0011\u0000\u0001\u0006\u0031\u0000\u001e\u0006\u0070\u0000\u0007\u0006\u0001\u0000"+
    "\u0002\u0006\u0001\u0000\u0026\u0006\u0015\u0000\u0001\u0006\u0019\u0000\u0006\u0006\u0001\u0000"+
    "\u0002\u0006\u0001\u0000\u0020\u0006\u000e\u0000\u0001\u0006\u0147\u0000\u0013\u0006\u000f\u0000"+
    "\u0001\u0006\u0001\u0000\u000d\u0006\u0001\u0000\u0022\u0006\u007c\u0000\u0001\u0006\u002c\u0000"+
    "\u0004\u0006\u001f\u0000\u009a\u0006\u0066\u0000\u006f\u0006\u0011\u0000\u00c4\u0006\u014c\u0000"+
    "\u0061\u0006\u000f\u0000\u0030\u0006\u0011\u0000\u0006\u0006\u00b9\u0000\u0047\u0006\u00b9\u0000"+
    "\u0039\u0006\u0007\u0000\u001f\u0006\u0011\u0000\u004f\u0006\u0011\u0000\u001e\u0006\u0012\u0000"+
    "\u0030\u0006\u0010\u0000\u0004\u0006\u001f\u0000\u0015\u0006\u0005\u0000\u0013\u0006\u00b0\u0000"+
    "\u0040\u0006\u0080\u0000\u004b\u0006\u0005\u0000\u0001\u0006\u0042\u0000\u000d\u0006\u0040\u0000"+
    "\u0002\u0006\u0001\u0000\u0001\u0006\u001c\u0000\u00f8\u0006\u0008\u0000\u00d6\u0006\u002a\u0000"+
    "\u0009\u0006\u01e7\u0000\u0004\u0006\u0001\u0000\u0007\u0006\u0001\u0000\u0002\u0006\u0001\u0000"+
    "\u0023\u0006\u000f\u0000\u0001\u0006\u001d\u0000\u0003\u0006\u0002\u0000\u0001\u0006\u000e\u0000"+
    "\u0004\u0006\u0008\u0000\u018c\u0006\u0004\u0000\u006b\u0006\u0005\u0000\u000d\u0006\u0003\u0000"+
    "\u0009\u0006\u0007\u0000\u000a\u0006\u0066\u0000\u0055\u0006\u0001\u0000\u0047\u0006\u0001\u0000"+
    "\u0002\u0006\u0002\u0000\u0001\u0006\u0002\u0000\u0002\u0006\u0002\u0000\u0004\u0006\u0001\u0000"+
    "\u000c\u0006\u0001\u0000\u0001\u0006\u0001\u0000\u0007\u0006\u0001\u0000\u0041\u0006\u0001\u0000"+
    "\u0004\u0006\u0002\u0000\u0008\u0006\u0001\u0000\u0007\u0006\u0001\u0000\u001c\u0006\u0001\u0000"+
    "\u0004\u0006\u0001\u0000\u0005\u0006\u0001\u0000\u0001\u0006\u0003\u0000\u0007\u0006\u0001\u0000"+
    "\u0154\u0006\u0002\u0000\u0019\u0006\u0001\u0000\u0019\u0006\u0001\u0000\u001f\u0006\u0001\u0000"+
    "\u0019\u0006\u0001\u0000\u001f\u0006\u0001\u0000\u0019\u0006\u0001\u0000\u001f\u0006\u0001\u0000"+
    "\u0019\u0006\u0001\u0000\u001f\u0006\u0001\u0000\u0019\u0006\u0001\u0000\u0008\u0006\u0034\u0000"+
    "\u001f\u0006\u0006\u0000\u0006\u0006\u0105\u0000\u003e\u0006\u0092\u0000\u002d\u0006\u000a\u0000"+
    "\u0007\u0006\u0010\u0000\u0001\u0006\u0141\u0000\u001e\u0006\u0012\u0000\u002c\u0006\u0013\u0000"+
    "\u0001\u0006\u00d0\u0000\u001c\u0006\u00f4\u0000\u0007\u0006\u0001\u0000\u0004\u0006\u0001\u0000"+
    "\u0002\u0006\u0001\u0000\u000f\u0006\u0001\u0000\u00c5\u0006\u003b\u0000\u0044\u0006\u0007\u0000"+
    "\u0001\u0006\u0164\u0000\u0001\u0006\u004f\u0000\u0004\u0006\u0001\u0000\u001b\u0006\u0001\u0000"+
    "\u0002\u0006\u0001\u0000\u0001\u0006\u0002\u0000\u0001\u0006\u0001\u0000\u000a\u0006\u0001\u0000"+
    "\u0004\u0006\u0001\u0000\u0001\u0006\u0001\u0000\u0001\u0006\u0006\u0000\u0001\u0006\u0004\u0000"+
    "\u0001\u0006\u0001\u0000\u0001\u0006\u0001\u0000\u0001\u0006\u0001\u0000\u0003\u0006\u0001\u0000"+
    "\u0002\u0006\u0001\u0000\u0001\u0006\u0002\u0000\u0001\u0006\u0001\u0000\u0001\u0006\u0001\u0000"+
    "\u0001\u0006\u0001\u0000\u0001\u0006\u0001\u0000\u0001\u0006\u0001\u0000\u0002\u0006\u0001\u0000"+
    "\u0001\u0006\u0002\u0000\u0004\u0006\u0001\u0000\u0007\u0006\u0001\u0000\u0004\u0006\u0001\u0000"+
    "\u0004\u0006\u0001\u0000\u0001\u0006\u0001\u0000\u000a\u0006\u0001\u0000\u0011\u0006\u0005\u0000"+
    "\u0003\u0006\u0001\u0000\u0005\u0006\u0001\u0000\u0011\u0006\u0044\u0000\u00e0\u0006\u0020\u0000"+
    "\u003a\u0006\u0006\u0000\u00de\u0006\u0002\u0000\u0182\u0006\u000e\u0000\u0131\u0006\u001f\u0000"+
    "\u001e\u0006\u00e2\u0000\u004b\u0006\u0005\u0000\u0160\u0006\u0050\u0000"

  @JvmStatic
  private fun zzUnpackcmap_blocks(): IntArray {
    val result: IntArray = IntArray(30720)
    var offset: Int = 0
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result)
    return result
  }

  @JvmStatic
  private fun zzUnpackcmap_blocks(packed: String , offset: Int, result: IntArray): Int {
    var i: Int = 0       /* index in packed string  */
    var j: Int = offset  /* index in unpacked array */
    val l: Int = packed.length
    while (i < l) {
      var count: Int = packed[i++].code
      var value: Int = packed[i++].code
      do
          result[j++] = value
      while (--count > 0)
    }
    return j
  }

  @JvmStatic
  private val ZZ_CMAP_BLOCKS: IntArray = zzUnpackcmap_blocks()

  /**
   * Translates DFA states to action switch labels.
   */
  private const val ZZ_ACTION_PACKED_0: String  =
    "\u0009\u0000\u0003\u0001\u0001\u0002\u0001\u0003\u0002\u0004\u0001\u0005\u0001\u0006\u0001\u0007"+
    "\u0006\u0002\u0001\u0008\u0001\u0009\u0003\u0002\u0001\u000a\u0001\u000b\u0001\u000a\u0001\u000c"+
    "\u0002\u000a\u0001\u0000\u0001\u000d\u0001\u0000\u0001\u0004\u0002\u0000\u0001\u000e\u0002\u0000"+
    "\u0001\u000f\u0001\u0009\u0007\u0000\u0001\u0010\u0001\u0004\u0003\u0000\u0001\u0011\u0002\u0000"+
    "\u0001\u0009\u0001\u0000\u0001\u0009\u0001\u0000\u0001\u0012\u0002\u0000\u0001\u0003\u0001\u0013"+
    "\u0003\u0000\u0001\u0014"

  @JvmStatic
  private fun zzUnpackAction(): IntArray {
    val result: IntArray = IntArray(75)
    var offset: Int = 0
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result)
    return result
  }

  @JvmStatic
  private fun zzUnpackAction(packed: String , offset: Int, result: IntArray): Int {
    var i: Int = 0       /* index in packed string  */
    var j: Int = offset  /* index in unpacked array */
    val l: Int = packed.length
    while (i < l) {
      var count: Int = packed[i++].code
      var value: Int = packed[i++].code
      do
          result[j++] = value
      while (--count > 0)
    }
    return j
  }

  @JvmStatic
  private val ZZ_ACTION: IntArray = zzUnpackAction()


  /**
   * Translates a state to a row index in the transition table
   */
  private const val ZZ_ROWMAP_PACKED_0: String  =
    "\u0000\u0000\u0000\u0013\u0000\u0026\u0000\u0039\u0000\u004c\u0000\u005f\u0000\u0072\u0000\u0085"+
    "\u0000\u0098\u0000\u00ab\u0000\u00be\u0000\u00d1\u0000\u00ab\u0000\u00e4\u0000\u00f7\u0000\u010a"+
    "\u0000\u00ab\u0000\u00ab\u0000\u011d\u0000\u0130\u0000\u0143\u0000\u0156\u0000\u0169\u0000\u00be"+
    "\u0000\u017c\u0000\u018f\u0000\u01a2\u0000\u01b5\u0000\u01c8\u0000\u01db\u0000\u00ab\u0000\u01ee"+
    "\u0000\u00be\u0000\u0201\u0000\u0214\u0000\u0227\u0000\u00be\u0000\u00ab\u0000\u023a\u0000\u024d"+
    "\u0000\u0260\u0000\u0273\u0000\u00ab\u0000\u0286\u0000\u0299\u0000\u02ac\u0000\u02bf\u0000\u02d2"+
    "\u0000\u02e5\u0000\u02f8\u0000\u030b\u0000\u031e\u0000\u0331\u0000\u0344\u0000\u00ab\u0000\u0357"+
    "\u0000\u036a\u0000\u037d\u0000\u0390\u0000\u03a3\u0000\u01c8\u0000\u03b6\u0000\u00ab\u0000\u03c9"+
    "\u0000\u03dc\u0000\u03ef\u0000\u00ab\u0000\u0402\u0000\u0415\u0000\u0357\u0000\u00ab\u0000\u0428"+
    "\u0000\u043b\u0000\u044e\u0000\u0461"

  @JvmStatic
  private fun zzUnpackRowMap(): IntArray {
    val result: IntArray = IntArray(75)
    var offset: Int = 0
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result)
    return result
  }

  @JvmStatic
  private fun zzUnpackRowMap(packed: String, offset: Int, result: IntArray): Int {
    var i: Int = 0  /* index in packed string  */
    var j: Int = offset  /* index in unpacked array */
    val l: Int = packed.length - 1
    while (i < l) {
      val high: Int = packed[i++].code shl 16
      result[j++] = high or packed[i++].code
    }
    return j
  }

  @JvmStatic
  private val ZZ_ROWMAP: IntArray = zzUnpackRowMap()

  /**
   * The transition table of the DFA
   */
  private const val ZZ_TRANS_PACKED_0: String  =
    "\u0009\u000a\u0001\u000b\u0001\u000a\u0001\u000c\u0007\u000a\u0001\u000d\u0001\u000e\u0001\u000f"+
    "\u0001\u000d\u0001\u000f\u0001\u0010\u0001\u000d\u0001\u0011\u0001\u0012\u0001\u0013\u0004\u000d"+
    "\u0001\u0014\u0001\u0015\u0001\u000d\u0001\u0016\u0001\u0017\u0001\u000d\u0001\u000e\u0001\u000f"+
    "\u0001\u000d\u0001\u000f\u0001\u0010\u0001\u000d\u0001\u0011\u0001\u0012\u0001\u0018\u0003\u000d"+
    "\u0001\u0019\u0001\u0014\u0001\u0015\u0001\u000d\u0001\u0016\u0001\u0017\u0001\u000d\u0002\u001a"+
    "\u0001\u000d\u0002\u001a\u0001\u001b\u0002\u000d\u0001\u0018\u0004\u000d\u0001\u001c\u0002\u000d"+
    "\u0001\u001d\u0002\u000d\u0002\u001a\u0001\u000d\u0002\u001a\u0003\u000d\u0001\u0018\u0004\u000d"+
    "\u0001\u001e\u0005\u000d\u0001\u000e\u0001\u000f\u0001\u000d\u0001\u000f\u0001\u0010\u0001\u000d"+
    "\u0001\u0011\u0001\u0012\u0001\u0018\u0004\u000d\u0001\u0014\u0001\u0015\u0001\u000d\u0001\u0016"+
    "\u0001\u0017\u0001\u001f\u0002\u0020\u0001\u001f\u0002\u0020\u0003\u001f\u0001\u0021\u000a\u001f"+
    "\u0002\u0020\u0001\u001f\u0002\u0020\u0003\u001f\u0001\u0022\u0007\u001f\u0001\u0023\u0001\u0024"+
    "\u0001\u001f\u0002\u0020\u0001\u001f\u0002\u0020\u0003\u001f\u0001\u0021\u0007\u001f\u0001\u0023"+
    "\u0001\u0024\u001c\u0000\u0001\u0025\u0001\u0000\u0001\u0026\u0010\u0000\u0001\u0027\u000a\u0000"+
    "\u0001\u000e\u0001\u000f\u0001\u0000\u0002\u000f\u000e\u0000\u0002\u000f\u0001\u0000\u0002\u000f"+
    "\u000e\u0000\u0002\u000f\u0001\u0000\u0001\u000f\u0001\u0028\u0016\u0000\u0001\u0013\u0001\u0000"+
    "\u0001\u0026\u000d\u0000\u0001\u0029\u000a\u0000\u0001\u002a\u000f\u0000\u0001\u002b\u0001\u0000"+
    "\u0001\u002b\u0013\u0000\u0001\u002c\u0013\u0000\u0001\u002d\u0006\u0000\u0001\u002e\u000d\u0000"+
    "\u0002\u001a\u0001\u0000\u0002\u001a\u0013\u0000\u0001\u001b\u0003\u0000\u0001\u002f\u0001\u0000"+
    "\u0001\u001b\u000c\u0000\u0001\u0030\u000a\u0000\u0001\u0031\u0001\u0000\u0002\u0032\u0001\u0000"+
    "\u000e\u0032\u0001\u0000\u0001\u0032\u0006\u0000\u0001\u0033\u000a\u0000\u0001\u0034\u0002\u0000"+
    "\u0002\u0020\u0001\u0000\u0002\u0020\u0016\u0000\u0001\u0022\u0001\u0000\u0001\u0026\u0018\u0000"+
    "\u0001\u0035\u0013\u0000\u0001\u0036\u0009\u0000\u0001\u0037\u000a\u0000\u0002\u000f\u0001\u0000"+
    "\u0001\u000f\u0001\u0038\u0013\u0000\u0001\u0029\u0003\u0000\u0001\u0039\u0001\u0000\u0001\u0029"+
    "\u0003\u0000\u0001\u003a\u0002\u0000\u0002\u003b\u0001\u0000\u000e\u003b\u0001\u0000\u0001\u003b"+
    "\u0011\u0000\u0001\u003c\u0013\u0000\u0001\u003c\u0006\u0000\u0001\u002e\u0005\u0000\u0001\u002e"+
    "\u000c\u0000\u0001\u001b\u0003\u0000\u0001\u002f\u0006\u0000\u0001\u003d\u0007\u0000\u0001\u0030"+
    "\u0003\u0000\u0001\u003e\u0001\u0000\u0001\u0030\u0003\u0000\u0001\u003f\u0002\u0000\u0002\u0040"+
    "\u0001\u0000\u000e\u0040\u0001\u0000\u0001\u0040\u0002\u0032\u0001\u0000\u000e\u0032\u0001\u0041"+
    "\u0001\u0032\u0006\u0000\u0001\u0033\u0003\u0000\u0001\u0042\u0001\u0000\u0001\u0033\u0003\u0000"+
    "\u0001\u0043\u0002\u0000\u0002\u0044\u0001\u0000\u000e\u0044\u0001\u0000\u0001\u0044\u0011\u0000"+
    "\u0001\u0045\u0013\u0000\u0001\u0045\u0001\u0000\u0002\u000f\u0001\u0000\u0001\u000f\u0001\u0046"+
    "\u0013\u0000\u0001\u0029\u0003\u0000\u0001\u0039\u0005\u0000\u0001\u003a\u0001\u002a\u0001\u0000"+
    "\u0007\u0047\u0001\u0000\u0006\u0047\u0001\u0000\u0004\u0047\u0002\u003b\u0001\u0000\u000e\u003b"+
    "\u0001\u0048\u0001\u003b\u0002\u003c\u0003\u0000\u000e\u003c\u0006\u0000\u0001\u0030\u0003\u0000"+
    "\u0001\u003e\u0005\u0000\u0001\u003f\u0001\u0031\u0001\u0000\u0002\u0040\u0001\u0000\u000e\u0040"+
    "\u0001\u0049\u0001\u0040\u000a\u0000\u0001\u002f\u000e\u0000\u0001\u0033\u0003\u0000\u0001\u0042"+
    "\u0005\u0000\u0001\u0043\u0001\u0034\u0001\u0000\u0002\u0044\u0001\u0000\u000e\u0044\u0001\u004a"+
    "\u0001\u0044\u0001\u0000\u0001\u0045\u0001\u004b\u0001\u0000\u0002\u0045\u0017\u0000\u0001\u0039"+
    "\u0005\u0000\u0001\u003a\u000c\u0000\u0001\u003e\u0005\u0000\u0001\u003f\u000c\u0000\u0001\u0042"+
    "\u0005\u0000\u0001\u0043\u0003\u0000\u0001\u004b\u0002\u0000\u0002\u004b\u000d\u0000"

  @JvmStatic
  private fun zzUnpacktrans(): IntArray {
    val result: IntArray = IntArray(1140)
    var offset: Int = 0
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result)
    return result
  }

  @JvmStatic
  private fun zzUnpacktrans(packed: String , offset: Int, result: IntArray): Int {
    var i: Int = 0       /* index in packed string  */
    var j: Int = offset  /* index in unpacked array */
    val l: Int = packed.length
    while (i < l) {
      var count: Int = packed[i++].code
      var value: Int = packed[i++].code
      value--
      do
          result[j++] = value
      while (--count > 0)
    }
    return j
  }

  @JvmStatic
  private val ZZ_TRANS: IntArray = zzUnpacktrans()


  /* error codes */
  private const val ZZ_UNKNOWN_ERROR = 0
  private const val ZZ_NO_MATCH = 1
  private const val ZZ_PUSHBACK_2BIG = 2

  /* error messages for the codes above */
  @JvmStatic
  val ZZ_ERROR_MSG = arrayOf(
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  )

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private const val ZZ_ATTRIBUTE_PACKED_0: String  =
    "\u0009\u0000\u0001\u0009\u0002\u0001\u0001\u0009\u0003\u0001\u0002\u0009\u000c\u0001\u0001\u0009"+
    "\u0005\u0001\u0001\u0000\u0001\u0009\u0001\u0000\u0001\u0001\u0002\u0000\u0001\u0009\u0002\u0000"+
    "\u0002\u0001\u0007\u0000\u0001\u0009\u0001\u0001\u0003\u0000\u0001\u0001\u0002\u0000\u0001\u0009"+
    "\u0001\u0000\u0001\u0001\u0001\u0000\u0001\u0009\u0002\u0000\u0001\u0001\u0001\u0009\u0003\u0000"+
    "\u0001\u0001"

  @JvmStatic
  private fun zzUnpackAttribute(): IntArray {
    val result: IntArray = IntArray(75)
    var offset: Int = 0
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result)
    return result
  }

  @JvmStatic
  private fun zzUnpackAttribute(packed: String , offset: Int, result: IntArray): Int {
    var i: Int = 0       /* index in packed string  */
    var j: Int = offset  /* index in unpacked array */
    val l: Int = packed.length
    while (i < l) {
      var count: Int = packed[i++].code
      var value: Int = packed[i++].code
      do
          result[j++] = value
      while (--count > 0)
    }
    return j
  }

  @JvmStatic
  private val ZZ_ATTRIBUTE: IntArray = zzUnpackAttribute()

}
  /** the current state of the DFA */
  private var zzState = 0

  /** the current lexical state */
  private var zzLexicalState = YYINITIAL

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private var zzBuffer: CharSequence = "" 

  /** the textposition at the last accepting state */
  private var zzMarkedPos = 0

  /** the current text position in the buffer */
  private var zzCurrentPos = 0

  /** startRead marks the beginning of the yytext() string in the buffer */
  private var zzStartRead = 0

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private var zzEndRead = 0

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private var zzAtEOF = false

  /** Number of newlines encountered up to the start of the matched text. */
  @Suppress("unused")
  private var yyline: Int = 0

  /** Number of characters from the last newline up to the start of the matched text. */
  @Suppress("unused")
  protected var yycolumn: Int = 0

  /** Number of characters up to the start of the matched text. */
  @Suppress("unused")
  private var yychar: Long = 0

  /** Whether the scanner is currently at the beginning of a line. */
  @Suppress("unused")
  private var zzAtBOL: Boolean = false

  /** Whether the user-EOF-code has already been executed. */
  @Suppress("unused")
  private var zzEOFDone: Boolean = false

  /* user code: */
  private val isLastToken: Boolean
    get() = zzMarkedPos == zzBuffer.length

  private fun yytextContainLineBreaks(): Boolean {
    for (i in zzStartRead until zzMarkedPos) {
        if (zzBuffer[i].let { it == '\n' || it == '\r' }) return true
    }

    return false
  }



  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private fun zzMaxBufferLen(): Int {
    return Int.MAX_VALUE
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private fun zzCanGrow(): Boolean {
    return true
  }


  override fun getTokenStart(): Int {
    return zzStartRead
  }

  override fun getTokenEnd(): Int {
    return getTokenStart() + yylength()
  }

  override fun reset(buffer: CharSequence, start: Int, end: Int, initialState: Int) {
    zzBuffer = buffer
    zzCurrentPos = start
    zzMarkedPos = start
    zzStartRead = start
    zzAtEOF  = false
    zzAtBOL = true
    zzEndRead = end
    yybegin(initialState)
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   */
  private fun zzRefill(): Boolean {
    return true
  }


  /**
   * Returns the current lexical state.
   */
  override fun yystate(): Int {
    return zzLexicalState
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  override fun yybegin(newState: Int) {
    zzLexicalState = newState
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  fun yytext(): CharSequence {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos)
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  fun yycharat(position: Int): Char {
    return zzBuffer[zzStartRead + position] 
  }


  /**
   * Returns the length of the matched text region.
   */
  fun yylength(): Int {
    return zzMarkedPos - zzStartRead 
  }

  /**
   * Implementation of the `codePointAt` method of `java.lang.Character` for CharSequences
   *
   * @param index the index of the character for which to retrieve the code point.
   * @return the Unicode code point at the specified index.
   * @throws IndexOutOfBoundsException if the index is outside the bounds of the character sequence.
   */
  fun CharSequence.codePoint(index: Int): Int {
      val high = this[index]
      if (high.isHighSurrogate() && index + 1 < length) {
          val low = this[index + 1]
          if (low.isLowSurrogate()) {
              val codePoint: String = "$high$low"
              return codePoint.codePointAt(0)
          }
      }
      return high.code
  }

  /** Returns the character (Unicode code point) at the specified index. */
  internal fun String.codePointAt(index: Int): Int {
      val high = this[index]
      if (high.isHighSurrogate() && index + 1 < this.length) {
          val low = this[index + 1]
          if (low.isLowSurrogate()) {
              return Char.toCodePoint(high, low)
          }
      }
      return high.code
  }
  
  internal fun CharSequence.offsetByCodePoints(index: Int, codePointOffset: Int): Int {
    val length = this.length
    if (index < 0 || index > length) throw IndexOutOfBoundsException()

    var x = index
    if (codePointOffset >= 0) {
      var i: Int = 0
      
      while (x < length && i < codePointOffset) {
        if (this[x++].isHighSurrogate() && x < length && this[x].isLowSurrogate()) x++
        i++
      }
      
      if (i < codePointOffset) throw IndexOutOfBoundsException()
      
    } else {
      var i: Int = codePointOffset
      
      while (x > 0 && i < 0) {
        if (this[--x].isLowSurrogate() && x > 0 && this[x - 1].isHighSurrogate()) x--
        i++
      }
      
      if (i < 0) {
        throw IndexOutOfBoundsException()
      }
    }
    
    return x
  }

  internal fun Char.Companion.toCodePoint(high: Char, low: Char): Int =
      (((high - MIN_HIGH_SURROGATE) shl 10) or (low - MIN_LOW_SURROGATE)) + 0x10000

  private fun charCount(codePoint: Int): Int = if (codePoint < 0x10000) 1 else 2


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public fun yypushback(number: Int)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG)

    zzMarkedPos -= number
  }


  private fun zzScanError(errorCode: Int) {
    val message = try {
      ZZ_ERROR_MSG[errorCode]
    } catch (e: IndexOutOfBoundsException) {
      ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR]
    }

    throw Error(message)
  }
  /**
   * Translates raw input code points to DFA table row
   */
  private fun zzCMap(input: Int): Int {
    val offset: Int = input and 255
    return if(offset == input) ZZ_CMAP_BLOCKS[offset] else ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input shr 8] or offset]
  }

  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   */
  override fun advance(): SyntaxElementType?
  {
    var zzInput: Int = 0 
    var zzAction: Int = 0 

    val zzTransL: IntArray = ZZ_TRANS
    val zzRowMapL: IntArray = ZZ_ROWMAP
    val zzAttrL: IntArray = ZZ_ATTRIBUTE

    while (true) {
      // cached fields:
      var zzCurrentPosL = 0
      var zzMarkedPosL: Int = zzMarkedPos 
      var zzEndReadL: Int = zzEndRead 
      var zzBufferL: CharSequence = zzBuffer 

      zzAction = -1

      zzCurrentPosL = zzMarkedPosL
      zzCurrentPos = zzMarkedPosL
      zzStartRead = zzMarkedPosL

      zzState = ZZ_LEXSTATE[zzLexicalState]

      // set up zzAction for empty match case:
      var zzAttributes: Int = zzAttrL[zzState]
      if ( (zzAttributes and 1) == 1 ) {
        zzAction = zzState
      }


      zzForAction@ while (true) {
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = zzBufferL.codePoint(zzCurrentPosL)
            zzCurrentPosL += charCount(zzInput)
          }
          else if (zzAtEOF) {
            zzInput = YYEOF
            break@zzForAction
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL
            zzMarkedPos   = zzMarkedPosL
            val eof: Boolean = zzRefill()
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos
            zzMarkedPosL   = zzMarkedPos
            zzBufferL      = zzBuffer
            zzEndReadL     = zzEndRead
            if (eof) {
              zzInput = YYEOF
              break@zzForAction
            }
            else {
              zzInput = zzBufferL.codePoint(zzCurrentPosL)
              zzCurrentPosL += charCount(zzInput)
            }
          }
          val zzNext: Int = zzTransL[zzRowMapL[zzState] + zzCMap(zzInput)]
          if (zzNext == -1) break@zzForAction
          zzState = zzNext

          zzAttributes = zzAttrL[zzState]
          if ( (zzAttributes and 1) == 1 ) {
            zzAction = zzState
            zzMarkedPosL = zzCurrentPosL
            if ( (zzAttributes and 8) == 8 ) break@zzForAction
          }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true
        return null
      }
      else {
        when (if (zzAction < 0) zzAction else ZZ_ACTION[zzAction]) {
          1 -> {
            return SyntaxTokenTypes.BAD_CHARACTER
            }
          // fall through
          21 -> break
          2 -> {
            yybegin(CONTENTS)
            return KDocTokens.TEXT
            }
          // fall through
          22 -> break
          3 -> {
            if(yystate() == CONTENTS_BEGINNING) {
                yybegin(INDENTED_CODE_BLOCK)
                return KDocTokens.CODE_BLOCK_TEXT
            }
            }
          // fall through
          23 -> break
          4 -> {
            return if (yytextContainLineBreaks()) {
                yybegin(LINE_BEGINNING)
                SyntaxTokenTypes.WHITE_SPACE
            }  else {
                yybegin(if (yystate() == CONTENTS_BEGINNING) CONTENTS_BEGINNING else CONTENTS)
                KDocTokens.TEXT  // internal white space
            }
            }
          // fall through
          24 -> break
          5 -> {
            yybegin(CONTENTS)
            return KDocTokens.KDOC_LPAR
            }
          // fall through
          25 -> break
          6 -> {
            yybegin(CONTENTS)
            return KDocTokens.KDOC_RPAR
            }
          // fall through
          26 -> break
          7 -> {
            yybegin(CONTENTS_BEGINNING)
            return KDocTokens.LEADING_ASTERISK
            }
          // fall through
          27 -> break
          8 -> {
            if (yytextContainLineBreaks()) {
                yybegin(LINE_BEGINNING)
            }
            return SyntaxTokenTypes.WHITE_SPACE
            }
          // fall through
          28 -> break
          9 -> {
            yybegin(TAG_TEXT_BEGINNING)
            return KDocTokens.MARKDOWN_LINK
            }
          // fall through
          29 -> break
          10 -> {
            yybegin(if (yystate() == INDENTED_CODE_BLOCK) INDENTED_CODE_BLOCK else CODE_BLOCK)
            return KDocTokens.CODE_BLOCK_TEXT
            }
          // fall through
          30 -> break
          11 -> {
            if (yytextContainLineBreaks()) {
                yybegin(if (yystate() == INDENTED_CODE_BLOCK) LINE_BEGINNING else CODE_BLOCK_LINE_BEGINNING)
                return SyntaxTokenTypes.WHITE_SPACE
            }
            return KDocTokens.CODE_BLOCK_TEXT
            }
          // fall through
          31 -> break
          12 -> {
            yybegin(CODE_BLOCK_CONTENTS_BEGINNING)
            return KDocTokens.LEADING_ASTERISK
            }
          // fall through
          32 -> break
          13 -> {
            return if (isLastToken) KDocTokens.END else KDocTokens.TEXT
            }
          // fall through
          33 -> break
          14 -> {
            yybegin(CONTENTS)
            return KDocTokens.MARKDOWN_ESCAPED_CHAR
            }
          // fall through
          34 -> break
          15 -> {
            val tag = KDocKnownTag.findByTagName(zzBuffer.subSequence(zzStartRead, zzMarkedPos))
            yybegin(if (tag != null && tag.isReferenceRequired) TAG_BEGINNING else TAG_TEXT_BEGINNING)
            return KDocTokens.TAG_NAME
            }
          // fall through
          35 -> break
          16 -> {
            yybegin(CONTENTS_BEGINNING)
            return KDocTokens.START
            }
          // fall through
          36 -> break
          17 -> {
            yybegin(CODE_BLOCK_LINE_BEGINNING)
            return KDocTokens.TEXT
            }
          // fall through
          37 -> break
          18 -> {
            yybegin(CONTENTS)
            return KDocTokens.MARKDOWN_LINK
            }
          // fall through
          38 -> break
          19 -> {
            // lookahead expression with fixed lookahead length
            zzMarkedPos = zzBufferL.offsetByCodePoints(zzMarkedPos, -1)
            yybegin(CONTENTS)
            return KDocTokens.MARKDOWN_LINK
            }
          // fall through
          39 -> break
          20 -> {
            // lookahead expression with fixed base length
            zzMarkedPos = zzBufferL.offsetByCodePoints(zzStartRead, 3)
            // Code fence end
            yybegin(CONTENTS)
            return KDocTokens.TEXT
            }
          // fall through
          40 -> break
          else ->
            zzScanError(ZZ_NO_MATCH)
        }
      }
    }
    return null
  }


}
