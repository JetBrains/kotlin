RAW_FIR:
FILE: [ResolvedTo(RAW_FIR)] hierarchyWithOverrideAndNestedClass3.kt
    public final? [ResolvedTo(RAW_FIR)] interface Foo1 : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] fun bar(): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] val str: String
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo1] get(): String

        public final? [ResolvedTo(RAW_FIR)] class ClassFromInterface : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ClassFromInterface] constructor(): R|Foo1.ClassFromInterface| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }
    public final? [ResolvedTo(RAW_FIR)] interface Foo2 : Foo1 {
        public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo2] get(): Boolean

    }
    public final? [ResolvedTo(RAW_FIR)] interface Foo3 : Foo1 {
        public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo3] get(): Boolean

    }
    public abstract [ResolvedTo(RAW_FIR)] class OuterClass : Foo1 {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=OuterClass] constructor(): R|OuterClass| {
            LAZY_super<<implicit>>
        }

        public final? [ResolvedTo(RAW_FIR)] class SimpleNestedClass : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=SimpleNestedClass] constructor(): R|OuterClass.SimpleNestedClass| {
                LAZY_super<R|kotlin/Any|>
            }

            public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

            private final? [ResolvedTo(RAW_FIR)] val myProp: <implicit> = LAZY_EXPRESSION
                private [ResolvedTo(RAW_FIR)] [ContainingClassKey=SimpleNestedClass] get(): <implicit>

        }

        public abstract [ResolvedTo(RAW_FIR)] class NestedClass : Foo2 {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedClass] constructor(): R|OuterClass.NestedClass| {
                LAZY_super<<implicit>>
            }

            public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

        }

        public abstract [ResolvedTo(RAW_FIR)] class AnotherNestedClass : NestedClass {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=AnotherNestedClass] constructor(): R|OuterClass.AnotherNestedClass| {
                LAZY_super<NestedClass>
            }

            public? open? override [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit| { LAZY_BLOCK }

        }

    }

IMPORTS:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverrideAndNestedClass3.kt
    public final? [ResolvedTo(RAW_FIR)] interface Foo1 : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] fun bar(): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] val str: String
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo1] get(): String

        public final? [ResolvedTo(RAW_FIR)] class ClassFromInterface : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ClassFromInterface] constructor(): R|Foo1.ClassFromInterface| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }
    public final? [ResolvedTo(RAW_FIR)] interface Foo2 : Foo1 {
        public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo2] get(): Boolean

    }
    public final? [ResolvedTo(RAW_FIR)] interface Foo3 : Foo1 {
        public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo3] get(): Boolean

    }
    public abstract [ResolvedTo(RAW_FIR)] class OuterClass : Foo1 {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=OuterClass] constructor(): R|OuterClass| {
            LAZY_super<<implicit>>
        }

        public final? [ResolvedTo(RAW_FIR)] class SimpleNestedClass : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=SimpleNestedClass] constructor(): R|OuterClass.SimpleNestedClass| {
                LAZY_super<R|kotlin/Any|>
            }

            public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

            private final? [ResolvedTo(RAW_FIR)] val myProp: <implicit> = LAZY_EXPRESSION
                private [ResolvedTo(RAW_FIR)] [ContainingClassKey=SimpleNestedClass] get(): <implicit>

        }

        public abstract [ResolvedTo(RAW_FIR)] class NestedClass : Foo2 {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedClass] constructor(): R|OuterClass.NestedClass| {
                LAZY_super<<implicit>>
            }

            public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

        }

        public abstract [ResolvedTo(RAW_FIR)] class AnotherNestedClass : NestedClass {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=AnotherNestedClass] constructor(): R|OuterClass.AnotherNestedClass| {
                LAZY_super<NestedClass>
            }

            public? open? override [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit| { LAZY_BLOCK }

        }

    }

COMPILER_REQUIRED_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverrideAndNestedClass3.kt
    public final? [ResolvedTo(RAW_FIR)] interface Foo1 : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] fun bar(): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] val str: String
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo1] get(): String

        public final? [ResolvedTo(RAW_FIR)] class ClassFromInterface : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ClassFromInterface] constructor(): R|Foo1.ClassFromInterface| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }
    public final? [ResolvedTo(RAW_FIR)] interface Foo2 : Foo1 {
        public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo2] get(): Boolean

    }
    public final? [ResolvedTo(RAW_FIR)] interface Foo3 : Foo1 {
        public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo3] get(): Boolean

    }
    public abstract [ResolvedTo(RAW_FIR)] class OuterClass : Foo1 {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=OuterClass] constructor(): R|OuterClass| {
            LAZY_super<<implicit>>
        }

        public final? [ResolvedTo(RAW_FIR)] class SimpleNestedClass : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=SimpleNestedClass] constructor(): R|OuterClass.SimpleNestedClass| {
                LAZY_super<R|kotlin/Any|>
            }

            public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

            private final? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] val myProp: <implicit> = LAZY_EXPRESSION
                private [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] [ContainingClassKey=SimpleNestedClass] get(): <implicit>

        }

        public abstract [ResolvedTo(RAW_FIR)] class NestedClass : Foo2 {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedClass] constructor(): R|OuterClass.NestedClass| {
                LAZY_super<<implicit>>
            }

            public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

        }

        public abstract [ResolvedTo(RAW_FIR)] class AnotherNestedClass : NestedClass {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=AnotherNestedClass] constructor(): R|OuterClass.AnotherNestedClass| {
                LAZY_super<NestedClass>
            }

            public? open? override [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit| { LAZY_BLOCK }

        }

    }

COMPANION_GENERATION:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverrideAndNestedClass3.kt
    public final? [ResolvedTo(RAW_FIR)] interface Foo1 : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] fun bar(): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] val str: String
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo1] get(): String

        public final? [ResolvedTo(RAW_FIR)] class ClassFromInterface : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ClassFromInterface] constructor(): R|Foo1.ClassFromInterface| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }
    public final? [ResolvedTo(RAW_FIR)] interface Foo2 : Foo1 {
        public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo2] get(): Boolean

    }
    public final? [ResolvedTo(RAW_FIR)] interface Foo3 : Foo1 {
        public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo3] get(): Boolean

    }
    public abstract [ResolvedTo(RAW_FIR)] class OuterClass : Foo1 {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=OuterClass] constructor(): R|OuterClass| {
            LAZY_super<<implicit>>
        }

        public final? [ResolvedTo(RAW_FIR)] class SimpleNestedClass : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=SimpleNestedClass] constructor(): R|OuterClass.SimpleNestedClass| {
                LAZY_super<R|kotlin/Any|>
            }

            public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

            private final? [ResolvedTo(COMPANION_GENERATION)] val myProp: <implicit> = LAZY_EXPRESSION
                private [ResolvedTo(COMPANION_GENERATION)] [ContainingClassKey=SimpleNestedClass] get(): <implicit>

        }

        public abstract [ResolvedTo(RAW_FIR)] class NestedClass : Foo2 {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedClass] constructor(): R|OuterClass.NestedClass| {
                LAZY_super<<implicit>>
            }

            public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

        }

        public abstract [ResolvedTo(RAW_FIR)] class AnotherNestedClass : NestedClass {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=AnotherNestedClass] constructor(): R|OuterClass.AnotherNestedClass| {
                LAZY_super<NestedClass>
            }

            public? open? override [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit| { LAZY_BLOCK }

        }

    }

SUPER_TYPES:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverrideAndNestedClass3.kt
    public final? [ResolvedTo(SUPER_TYPES)] interface Foo1 : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] fun bar(): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] val str: String
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo1] get(): String

        public final? [ResolvedTo(RAW_FIR)] class ClassFromInterface : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ClassFromInterface] constructor(): R|Foo1.ClassFromInterface| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }
    public final? [ResolvedTo(RAW_FIR)] interface Foo2 : Foo1 {
        public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo2] get(): Boolean

    }
    public final? [ResolvedTo(RAW_FIR)] interface Foo3 : Foo1 {
        public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo3] get(): Boolean

    }
    public abstract [ResolvedTo(SUPER_TYPES)] class OuterClass : R|Foo1| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=OuterClass] constructor(): R|OuterClass| {
            LAZY_super<<implicit>>
        }

        public final? [ResolvedTo(SUPER_TYPES)] class SimpleNestedClass : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=SimpleNestedClass] constructor(): R|OuterClass.SimpleNestedClass| {
                LAZY_super<R|kotlin/Any|>
            }

            public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

            private final? [ResolvedTo(SUPER_TYPES)] val myProp: <implicit> = LAZY_EXPRESSION
                private [ResolvedTo(SUPER_TYPES)] [ContainingClassKey=SimpleNestedClass] get(): <implicit>

        }

        public abstract [ResolvedTo(RAW_FIR)] class NestedClass : Foo2 {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedClass] constructor(): R|OuterClass.NestedClass| {
                LAZY_super<<implicit>>
            }

            public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

        }

        public abstract [ResolvedTo(RAW_FIR)] class AnotherNestedClass : NestedClass {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=AnotherNestedClass] constructor(): R|OuterClass.AnotherNestedClass| {
                LAZY_super<NestedClass>
            }

            public? open? override [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit| { LAZY_BLOCK }

        }

    }

TYPES:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverrideAndNestedClass3.kt
    public final? [ResolvedTo(SUPER_TYPES)] interface Foo1 : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] fun bar(): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] val str: String
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo1] get(): String

        public final? [ResolvedTo(RAW_FIR)] class ClassFromInterface : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ClassFromInterface] constructor(): R|Foo1.ClassFromInterface| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }
    public final? [ResolvedTo(RAW_FIR)] interface Foo2 : Foo1 {
        public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo2] get(): Boolean

    }
    public final? [ResolvedTo(RAW_FIR)] interface Foo3 : Foo1 {
        public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo3] get(): Boolean

    }
    public abstract [ResolvedTo(TYPES)] class OuterClass : R|Foo1| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=OuterClass] constructor(): R|OuterClass| {
            LAZY_super<<implicit>>
        }

        public final? [ResolvedTo(TYPES)] class SimpleNestedClass : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=SimpleNestedClass] constructor(): R|OuterClass.SimpleNestedClass| {
                LAZY_super<R|kotlin/Any|>
            }

            public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

            private final? [ResolvedTo(TYPES)] val myProp: <implicit> = LAZY_EXPRESSION
                private [ResolvedTo(TYPES)] [ContainingClassKey=SimpleNestedClass] get(): <implicit>

        }

        public abstract [ResolvedTo(RAW_FIR)] class NestedClass : Foo2 {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedClass] constructor(): R|OuterClass.NestedClass| {
                LAZY_super<<implicit>>
            }

            public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

        }

        public abstract [ResolvedTo(RAW_FIR)] class AnotherNestedClass : NestedClass {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=AnotherNestedClass] constructor(): R|OuterClass.AnotherNestedClass| {
                LAZY_super<NestedClass>
            }

            public? open? override [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit| { LAZY_BLOCK }

        }

    }

STATUS:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverrideAndNestedClass3.kt
    public abstract [ResolvedTo(STATUS)] interface Foo1 : R|kotlin/Any| {
        public abstract [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit|

        public abstract [ResolvedTo(STATUS)] fun bar(): R|kotlin/Unit|

        public abstract [ResolvedTo(STATUS)] val str: R|kotlin/String|
            public [ResolvedTo(STATUS)] [ContainingClassKey=Foo1] get(): R|kotlin/String|

        public final? [ResolvedTo(RAW_FIR)] class ClassFromInterface : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ClassFromInterface] constructor(): R|Foo1.ClassFromInterface| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }
    public final? [ResolvedTo(RAW_FIR)] interface Foo2 : Foo1 {
        public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo2] get(): Boolean

    }
    public final? [ResolvedTo(RAW_FIR)] interface Foo3 : Foo1 {
        public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo3] get(): Boolean

    }
    public abstract [ResolvedTo(STATUS)] class OuterClass : R|Foo1| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=OuterClass] constructor(): R|OuterClass| {
            LAZY_super<<implicit>>
        }

        public final [ResolvedTo(STATUS)] class SimpleNestedClass : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=SimpleNestedClass] constructor(): R|OuterClass.SimpleNestedClass| {
                LAZY_super<R|kotlin/Any|>
            }

            public final [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

            private final [ResolvedTo(STATUS)] val myProp: <implicit> = LAZY_EXPRESSION
                private [ResolvedTo(STATUS)] [ContainingClassKey=SimpleNestedClass] get(): <implicit>

        }

        public abstract [ResolvedTo(RAW_FIR)] class NestedClass : Foo2 {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedClass] constructor(): R|OuterClass.NestedClass| {
                LAZY_super<<implicit>>
            }

            public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

        }

        public abstract [ResolvedTo(RAW_FIR)] class AnotherNestedClass : NestedClass {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=AnotherNestedClass] constructor(): R|OuterClass.AnotherNestedClass| {
                LAZY_super<NestedClass>
            }

            public? open? override [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit| { LAZY_BLOCK }

        }

    }

EXPECT_ACTUAL_MATCHING:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverrideAndNestedClass3.kt
    public abstract [ResolvedTo(STATUS)] interface Foo1 : R|kotlin/Any| {
        public abstract [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit|

        public abstract [ResolvedTo(STATUS)] fun bar(): R|kotlin/Unit|

        public abstract [ResolvedTo(STATUS)] val str: R|kotlin/String|
            public [ResolvedTo(STATUS)] [ContainingClassKey=Foo1] get(): R|kotlin/String|

        public final? [ResolvedTo(RAW_FIR)] class ClassFromInterface : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ClassFromInterface] constructor(): R|Foo1.ClassFromInterface| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }
    public final? [ResolvedTo(RAW_FIR)] interface Foo2 : Foo1 {
        public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo2] get(): Boolean

    }
    public final? [ResolvedTo(RAW_FIR)] interface Foo3 : Foo1 {
        public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo3] get(): Boolean

    }
    public abstract [ResolvedTo(STATUS)] class OuterClass : R|Foo1| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=OuterClass] constructor(): R|OuterClass| {
            LAZY_super<<implicit>>
        }

        public final [ResolvedTo(STATUS)] class SimpleNestedClass : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=SimpleNestedClass] constructor(): R|OuterClass.SimpleNestedClass| {
                LAZY_super<R|kotlin/Any|>
            }

            public final [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

            private final [ResolvedTo(EXPECT_ACTUAL_MATCHING)] val myProp: <implicit> = LAZY_EXPRESSION
                private [ResolvedTo(EXPECT_ACTUAL_MATCHING)] [ContainingClassKey=SimpleNestedClass] get(): <implicit>

        }

        public abstract [ResolvedTo(RAW_FIR)] class NestedClass : Foo2 {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedClass] constructor(): R|OuterClass.NestedClass| {
                LAZY_super<<implicit>>
            }

            public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

        }

        public abstract [ResolvedTo(RAW_FIR)] class AnotherNestedClass : NestedClass {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=AnotherNestedClass] constructor(): R|OuterClass.AnotherNestedClass| {
                LAZY_super<NestedClass>
            }

            public? open? override [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit| { LAZY_BLOCK }

        }

    }

CONTRACTS:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverrideAndNestedClass3.kt
    public abstract [ResolvedTo(STATUS)] interface Foo1 : R|kotlin/Any| {
        public abstract [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit|

        public abstract [ResolvedTo(STATUS)] fun bar(): R|kotlin/Unit|

        public abstract [ResolvedTo(STATUS)] val str: R|kotlin/String|
            public [ResolvedTo(STATUS)] [ContainingClassKey=Foo1] get(): R|kotlin/String|

        public final? [ResolvedTo(RAW_FIR)] class ClassFromInterface : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ClassFromInterface] constructor(): R|Foo1.ClassFromInterface| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }
    public final? [ResolvedTo(RAW_FIR)] interface Foo2 : Foo1 {
        public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo2] get(): Boolean

    }
    public final? [ResolvedTo(RAW_FIR)] interface Foo3 : Foo1 {
        public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo3] get(): Boolean

    }
    public abstract [ResolvedTo(STATUS)] class OuterClass : R|Foo1| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=OuterClass] constructor(): R|OuterClass| {
            LAZY_super<<implicit>>
        }

        public final [ResolvedTo(STATUS)] class SimpleNestedClass : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=SimpleNestedClass] constructor(): R|OuterClass.SimpleNestedClass| {
                LAZY_super<R|kotlin/Any|>
            }

            public final [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

            private final [ResolvedTo(CONTRACTS)] val myProp: <implicit> = IntegerLiteral(1)
                private [ResolvedTo(CONTRACTS)] [ContainingClassKey=SimpleNestedClass] get(): <implicit>

        }

        public abstract [ResolvedTo(RAW_FIR)] class NestedClass : Foo2 {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedClass] constructor(): R|OuterClass.NestedClass| {
                LAZY_super<<implicit>>
            }

            public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

        }

        public abstract [ResolvedTo(RAW_FIR)] class AnotherNestedClass : NestedClass {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=AnotherNestedClass] constructor(): R|OuterClass.AnotherNestedClass| {
                LAZY_super<NestedClass>
            }

            public? open? override [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit| { LAZY_BLOCK }

        }

    }

IMPLICIT_TYPES_BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverrideAndNestedClass3.kt
    public abstract [ResolvedTo(STATUS)] interface Foo1 : R|kotlin/Any| {
        public abstract [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit|

        public abstract [ResolvedTo(STATUS)] fun bar(): R|kotlin/Unit|

        public abstract [ResolvedTo(STATUS)] val str: R|kotlin/String|
            public [ResolvedTo(STATUS)] [ContainingClassKey=Foo1] get(): R|kotlin/String|

        public final? [ResolvedTo(RAW_FIR)] class ClassFromInterface : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ClassFromInterface] constructor(): R|Foo1.ClassFromInterface| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }
    public final? [ResolvedTo(RAW_FIR)] interface Foo2 : Foo1 {
        public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo2] get(): Boolean

    }
    public final? [ResolvedTo(RAW_FIR)] interface Foo3 : Foo1 {
        public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo3] get(): Boolean

    }
    public abstract [ResolvedTo(STATUS)] class OuterClass : R|Foo1| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=OuterClass] constructor(): R|OuterClass| {
            LAZY_super<<implicit>>
        }

        public final [ResolvedTo(STATUS)] class SimpleNestedClass : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=SimpleNestedClass] constructor(): R|OuterClass.SimpleNestedClass| {
                LAZY_super<R|kotlin/Any|>
            }

            public final [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

            private final [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] val myProp: R|kotlin/Int| = Int(1)
                private [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] [ContainingClassKey=SimpleNestedClass] get(): R|kotlin/Int|

        }

        public abstract [ResolvedTo(RAW_FIR)] class NestedClass : Foo2 {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedClass] constructor(): R|OuterClass.NestedClass| {
                LAZY_super<<implicit>>
            }

            public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

        }

        public abstract [ResolvedTo(RAW_FIR)] class AnotherNestedClass : NestedClass {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=AnotherNestedClass] constructor(): R|OuterClass.AnotherNestedClass| {
                LAZY_super<NestedClass>
            }

            public? open? override [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit| { LAZY_BLOCK }

        }

    }

CONSTANT_EVALUATION:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverrideAndNestedClass3.kt
    public abstract [ResolvedTo(STATUS)] interface Foo1 : R|kotlin/Any| {
        public abstract [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit|

        public abstract [ResolvedTo(STATUS)] fun bar(): R|kotlin/Unit|

        public abstract [ResolvedTo(STATUS)] val str: R|kotlin/String|
            public [ResolvedTo(STATUS)] [ContainingClassKey=Foo1] get(): R|kotlin/String|

        public final? [ResolvedTo(RAW_FIR)] class ClassFromInterface : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ClassFromInterface] constructor(): R|Foo1.ClassFromInterface| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }
    public final? [ResolvedTo(RAW_FIR)] interface Foo2 : Foo1 {
        public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo2] get(): Boolean

    }
    public final? [ResolvedTo(RAW_FIR)] interface Foo3 : Foo1 {
        public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo3] get(): Boolean

    }
    public abstract [ResolvedTo(STATUS)] class OuterClass : R|Foo1| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=OuterClass] constructor(): R|OuterClass| {
            LAZY_super<<implicit>>
        }

        public final [ResolvedTo(STATUS)] class SimpleNestedClass : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=SimpleNestedClass] constructor(): R|OuterClass.SimpleNestedClass| {
                LAZY_super<R|kotlin/Any|>
            }

            public final [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

            private final [ResolvedTo(CONSTANT_EVALUATION)] val myProp: R|kotlin/Int| = Int(1)
                private [ResolvedTo(CONSTANT_EVALUATION)] [ContainingClassKey=SimpleNestedClass] get(): R|kotlin/Int|

        }

        public abstract [ResolvedTo(RAW_FIR)] class NestedClass : Foo2 {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedClass] constructor(): R|OuterClass.NestedClass| {
                LAZY_super<<implicit>>
            }

            public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

        }

        public abstract [ResolvedTo(RAW_FIR)] class AnotherNestedClass : NestedClass {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=AnotherNestedClass] constructor(): R|OuterClass.AnotherNestedClass| {
                LAZY_super<NestedClass>
            }

            public? open? override [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit| { LAZY_BLOCK }

        }

    }

ANNOTATION_ARGUMENTS:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverrideAndNestedClass3.kt
    public abstract [ResolvedTo(STATUS)] interface Foo1 : R|kotlin/Any| {
        public abstract [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit|

        public abstract [ResolvedTo(STATUS)] fun bar(): R|kotlin/Unit|

        public abstract [ResolvedTo(STATUS)] val str: R|kotlin/String|
            public [ResolvedTo(STATUS)] [ContainingClassKey=Foo1] get(): R|kotlin/String|

        public final? [ResolvedTo(RAW_FIR)] class ClassFromInterface : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ClassFromInterface] constructor(): R|Foo1.ClassFromInterface| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }
    public final? [ResolvedTo(RAW_FIR)] interface Foo2 : Foo1 {
        public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo2] get(): Boolean

    }
    public final? [ResolvedTo(RAW_FIR)] interface Foo3 : Foo1 {
        public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo3] get(): Boolean

    }
    public abstract [ResolvedTo(STATUS)] class OuterClass : R|Foo1| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=OuterClass] constructor(): R|OuterClass| {
            LAZY_super<<implicit>>
        }

        public final [ResolvedTo(STATUS)] class SimpleNestedClass : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=SimpleNestedClass] constructor(): R|OuterClass.SimpleNestedClass| {
                LAZY_super<R|kotlin/Any|>
            }

            public final [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

            private final [ResolvedTo(ANNOTATION_ARGUMENTS)] val myProp: R|kotlin/Int| = Int(1)
                private [ResolvedTo(ANNOTATION_ARGUMENTS)] [ContainingClassKey=SimpleNestedClass] get(): R|kotlin/Int|

        }

        public abstract [ResolvedTo(RAW_FIR)] class NestedClass : Foo2 {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedClass] constructor(): R|OuterClass.NestedClass| {
                LAZY_super<<implicit>>
            }

            public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

        }

        public abstract [ResolvedTo(RAW_FIR)] class AnotherNestedClass : NestedClass {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=AnotherNestedClass] constructor(): R|OuterClass.AnotherNestedClass| {
                LAZY_super<NestedClass>
            }

            public? open? override [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit| { LAZY_BLOCK }

        }

    }

BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverrideAndNestedClass3.kt
    public abstract [ResolvedTo(STATUS)] interface Foo1 : R|kotlin/Any| {
        public abstract [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit|

        public abstract [ResolvedTo(STATUS)] fun bar(): R|kotlin/Unit|

        public abstract [ResolvedTo(STATUS)] val str: R|kotlin/String|
            public [ResolvedTo(STATUS)] [ContainingClassKey=Foo1] get(): R|kotlin/String|

        public final? [ResolvedTo(RAW_FIR)] class ClassFromInterface : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ClassFromInterface] constructor(): R|Foo1.ClassFromInterface| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }
    public final? [ResolvedTo(RAW_FIR)] interface Foo2 : Foo1 {
        public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo2] get(): Boolean

    }
    public final? [ResolvedTo(RAW_FIR)] interface Foo3 : Foo1 {
        public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo3] get(): Boolean

    }
    public abstract [ResolvedTo(STATUS)] class OuterClass : R|Foo1| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=OuterClass] constructor(): R|OuterClass| {
            LAZY_super<<implicit>>
        }

        public final [ResolvedTo(STATUS)] class SimpleNestedClass : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=SimpleNestedClass] constructor(): R|OuterClass.SimpleNestedClass| {
                LAZY_super<R|kotlin/Any|>
            }

            public final [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

            private final [ResolvedTo(BODY_RESOLVE)] val myProp: R|kotlin/Int| = Int(1)
                private [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=SimpleNestedClass] get(): R|kotlin/Int|

        }

        public abstract [ResolvedTo(RAW_FIR)] class NestedClass : Foo2 {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedClass] constructor(): R|OuterClass.NestedClass| {
                LAZY_super<<implicit>>
            }

            public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

        }

        public abstract [ResolvedTo(RAW_FIR)] class AnotherNestedClass : NestedClass {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=AnotherNestedClass] constructor(): R|OuterClass.AnotherNestedClass| {
                LAZY_super<NestedClass>
            }

            public? open? override [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit| { LAZY_BLOCK }

        }

    }

FILE RAW TO BODY:
FILE: [ResolvedTo(BODY_RESOLVE)] hierarchyWithOverrideAndNestedClass3.kt
    public abstract [ResolvedTo(BODY_RESOLVE)] interface Foo1 : R|kotlin/Any| {
        public abstract [ResolvedTo(BODY_RESOLVE)] fun foo(): R|kotlin/Unit|

        public abstract [ResolvedTo(BODY_RESOLVE)] fun bar(): R|kotlin/Unit|

        public abstract [ResolvedTo(BODY_RESOLVE)] val str: R|kotlin/String|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Foo1] get(): R|kotlin/String|

        public final [ResolvedTo(BODY_RESOLVE)] class ClassFromInterface : R|kotlin/Any| {
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=ClassFromInterface] constructor(): R|Foo1.ClassFromInterface| {
                super<R|kotlin/Any|>()
            }

        }

    }
    public abstract [ResolvedTo(BODY_RESOLVE)] interface Foo2 : R|Foo1| {
        public abstract [ResolvedTo(BODY_RESOLVE)] fun foo([ResolvedTo(BODY_RESOLVE)] i: R|kotlin/Int|): R|kotlin/Unit|

        public abstract [ResolvedTo(BODY_RESOLVE)] fun bar([ResolvedTo(BODY_RESOLVE)] s: R|kotlin/String|): R|kotlin/Unit|

        public abstract [ResolvedTo(BODY_RESOLVE)] val isBoo: R|kotlin/Boolean|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Foo2] get(): R|kotlin/Boolean|

    }
    public abstract [ResolvedTo(BODY_RESOLVE)] interface Foo3 : R|Foo1| {
        public abstract [ResolvedTo(BODY_RESOLVE)] fun foo([ResolvedTo(BODY_RESOLVE)] i: R|kotlin/Int|): R|kotlin/Unit|

        public abstract [ResolvedTo(BODY_RESOLVE)] fun bar([ResolvedTo(BODY_RESOLVE)] s: R|kotlin/String|): R|kotlin/Unit|

        public abstract [ResolvedTo(BODY_RESOLVE)] val isBoo: R|kotlin/Boolean|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Foo3] get(): R|kotlin/Boolean|

    }
    public abstract [ResolvedTo(BODY_RESOLVE)] class OuterClass : R|Foo1| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=OuterClass] constructor(): R|OuterClass| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(BODY_RESOLVE)] class SimpleNestedClass : R|kotlin/Any| {
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=SimpleNestedClass] constructor(): R|OuterClass.SimpleNestedClass| {
                super<R|kotlin/Any|>()
            }

            public final [ResolvedTo(BODY_RESOLVE)] fun foo(): R|kotlin/Unit| {
            }

            private final [ResolvedTo(BODY_RESOLVE)] val myProp: R|kotlin/Int| = Int(1)
                private [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=SimpleNestedClass] get(): R|kotlin/Int|

        }

        public abstract [ResolvedTo(BODY_RESOLVE)] class NestedClass : R|Foo2| {
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=NestedClass] constructor(): R|OuterClass.NestedClass| {
                super<R|kotlin/Any|>()
            }

            public open override [ResolvedTo(BODY_RESOLVE)] fun foo(): R|kotlin/Unit| {
            }

        }

        public abstract [ResolvedTo(BODY_RESOLVE)] class AnotherNestedClass : R|OuterClass.NestedClass| {
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=AnotherNestedClass] constructor(): R|OuterClass.AnotherNestedClass| {
                super<R|OuterClass.NestedClass|>()
            }

            public open override [ResolvedTo(BODY_RESOLVE)] fun bar([ResolvedTo(BODY_RESOLVE)] s: R|kotlin/String|): R|kotlin/Unit| {
            }

        }

    }
