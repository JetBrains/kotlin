FILE: [ResolvedTo(ANNOTATION_ARGUMENTS)] annotation.kt
    @R|kotlin/annotation/Target|[Types](allowedTargets = vararg(Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.CLASS|, Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.PROPERTY|, Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.LOCAL_VARIABLE|, Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.VALUE_PARAMETER|, Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.CONSTRUCTOR|, Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.FUNCTION|, Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.TYPE|)) public final [ResolvedTo(BODY_RESOLVE)] annotation class base : R|kotlin/Annotation| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=base] constructor(): R|base| {
            super<R|kotlin/Any|>()
        }

    }
    @R|base|[Types]() public final [ResolvedTo(ANNOTATION_ARGUMENTS)] class correct : R|kotlin/Any| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=correct] constructor([ResolvedTo(BODY_RESOLVE)] [CorrespondingProperty=/correct.x] @R|base|[Types]() x: R|kotlin/Int|): R|correct| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(BODY_RESOLVE)] [IsFromPrimaryConstructor=true] val x: R|kotlin/Int| = R|<local>/x|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=correct] get(): R|kotlin/Int|

        @R|base|[Types]() public [ResolvedTo(ANNOTATION_ARGUMENTS)] [ContainingClassKey=correct] constructor(): R|correct| {
            LAZY_this<R|correct|>
        }

        [ResolvedTo(ANNOTATION_ARGUMENTS)] @R|base|[Types]() init { LAZY_BLOCK }

    }
    @R|base|[Types]() public final [ResolvedTo(BODY_RESOLVE)] enum class My : R|kotlin/Enum<My>| {
        private [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=My] constructor(): R|My| {
            super<R|kotlin/Enum<My>|>()
        }

        @R|base|[Types]() public final static [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=My] enum entry FIRST: R|My| = object : R|My| {
            private [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
                super<R|My|>()
            }

        }

        @R|base|[Types]() public final static [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=My] enum entry SECOND: R|My| = object : R|My| {
            private [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
                super<R|My|>()
            }

        }

        public final static [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=My] fun values(): R|kotlin/Array<My>| {
        }

        public final static [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=My] fun valueOf([ResolvedTo(BODY_RESOLVE)] value: R|kotlin/String|): R|My| {
        }

        public final static [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=My] val entries: R|kotlin/enums/EnumEntries<My>|
            public [ResolvedTo(BODY_RESOLVE)] get(): R|kotlin/enums/EnumEntries<My>|

    }
    @R|base|[Types]() public final [ResolvedTo(ANNOTATION_ARGUMENTS)] fun foo([ResolvedTo(ANNOTATION_ARGUMENTS)] @R|base|[Types]() y: R|@R|base|()  kotlin/Int|): R|@R|base|()  kotlin/Int| { LAZY_BLOCK }
    @R|base|[Types]() public final [ResolvedTo(CONTRACTS)] val z: <implicit> = LAZY_EXPRESSION
        public [ResolvedTo(CONTRACTS)] get(): <implicit>
    @R|base|[Types]() public final [ResolvedTo(ANNOTATION_ARGUMENTS)] val x: R|kotlin/collections/Map<@R|base|()  kotlin/Int, kotlin/collections/List<@R|base|()  kotlin/Int>>| = LAZY_EXPRESSION
        public [ResolvedTo(ANNOTATION_ARGUMENTS)] get(): R|kotlin/collections/Map<@R|base|()  kotlin/Int, kotlin/collections/List<@R|base|()  kotlin/Int>>|
    @R|kotlin/annotation/Target|[Types](allowedTargets = vararg(Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.CLASS|, Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.PROPERTY|, Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.LOCAL_VARIABLE|, Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.VALUE_PARAMETER|, Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.CONSTRUCTOR|, Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.FUNCTION|, Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.TYPE|)) @R|base|[Types]() public final [ResolvedTo(BODY_RESOLVE)] annotation class derived : R|base|, R|kotlin/Annotation| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=derived] constructor([ResolvedTo(BODY_RESOLVE)] [CorrespondingProperty=/derived.x] x: R|kotlin/Int|): R|derived| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(BODY_RESOLVE)] [IsFromPrimaryConstructor=true] val x: R|kotlin/Int| = R|<local>/x|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=derived] get(): R|kotlin/Int|

    }
    @R|derived|[Types](x = Int(1)) public final [ResolvedTo(ANNOTATION_ARGUMENTS)] class correctDerived : R|kotlin/Any| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=correctDerived] constructor([ResolvedTo(BODY_RESOLVE)] [CorrespondingProperty=/correctDerived.x] @R|derived|[Types](x = Int(1)) x: R|@R|derived|(x = Int(1))  kotlin/Int|): R|correctDerived| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(BODY_RESOLVE)] [IsFromPrimaryConstructor=true] val x: R|@R|derived|(x = Int(1))  kotlin/Int| = R|<local>/x|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=correctDerived] get(): R|@R|derived|(x = Int(1))  kotlin/Int|

        @R|base|[Types]() public [ResolvedTo(ANNOTATION_ARGUMENTS)] [ContainingClassKey=correctDerived] constructor(): R|correctDerived| {
            LAZY_this<R|correctDerived|>
        }

    }
    @R|derived|[Types](x = Int(1)) public final [ResolvedTo(BODY_RESOLVE)] enum class MyDerived : R|kotlin/Enum<MyDerived>| {
        private [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=MyDerived] constructor(): R|MyDerived| {
            super<R|kotlin/Enum<MyDerived>|>()
        }

        @R|derived|[Types](x = Int(1)) public final static [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=MyDerived] enum entry FIRST: R|MyDerived| = object : R|MyDerived| {
            private [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
                super<R|MyDerived|>()
            }

        }

        @R|derived|[Types](x = Int(1)) public final static [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=MyDerived] enum entry SECOND: R|MyDerived| = object : R|MyDerived| {
            private [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
                super<R|MyDerived|>()
            }

        }

        public final static [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=MyDerived] fun values(): R|kotlin/Array<MyDerived>| {
        }

        public final static [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=MyDerived] fun valueOf([ResolvedTo(BODY_RESOLVE)] value: R|kotlin/String|): R|MyDerived| {
        }

        public final static [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=MyDerived] val entries: R|kotlin/enums/EnumEntries<MyDerived>|
            public [ResolvedTo(BODY_RESOLVE)] get(): R|kotlin/enums/EnumEntries<MyDerived>|

    }
    @R|derived|[Types](x = Int(1)) public final [ResolvedTo(ANNOTATION_ARGUMENTS)] fun fooDerived([ResolvedTo(ANNOTATION_ARGUMENTS)] @R|derived|[Types](x = Int(1)) y: R|@R|derived|(x = Int(1))  kotlin/Int|): R|@R|derived|(x = Int(1))  kotlin/Int| { LAZY_BLOCK }
    @R|derived|[Types](LAZY_EXPRESSION) public final [ResolvedTo(CONTRACTS)] val zDerived: <implicit> = LAZY_EXPRESSION
        public [ResolvedTo(CONTRACTS)] get(): <implicit>
    @R|derived|[Types](x = Int(1)) public final [ResolvedTo(ANNOTATION_ARGUMENTS)] val xDerived: R|kotlin/collections/Map<@R|derived|(x = Int(1))  kotlin/Int, kotlin/collections/List<@R|derived|(x = Int(1))  kotlin/Int>>| = LAZY_EXPRESSION
        public [ResolvedTo(ANNOTATION_ARGUMENTS)] get(): R|kotlin/collections/Map<@R|derived|(x = Int(1))  kotlin/Int, kotlin/collections/List<@R|derived|(x = Int(1))  kotlin/Int>>|