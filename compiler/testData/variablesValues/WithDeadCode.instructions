== alwaysTrueIf ==
fun alwaysTrueIf() {
    var a = 5
    if (a > 2) {
        a = 2
    }
    42
}
---------------------
L0:
  1 <START>                                        in: INTS{}       BOOLS{}       ARRS{}          out: INTS{}       BOOLS{}       ARRS{}
  2 mark({ var a = 5 if (a > 2) { a = 2 } 42 })    in: INTS{}       BOOLS{}       ARRS{}          out: INTS{}       BOOLS{}       ARRS{}
    v(var a = 5)                                   in: INTS{}       BOOLS{}       ARRS{}          out: INTS{a:-}    BOOLS{}       ARRS{}
    r(5) -> <v0>                                   in: INTS{a:-}    BOOLS{}       ARRS{}          out: INTS{a:-}    BOOLS{}       ARRS{}
    w(a|<v0>)                                      in: INTS{a:-}    BOOLS{}       ARRS{}          out: INTS{a:[5]}  BOOLS{}       ARRS{}
    mark(if (a > 2) { a = 2 })                     in: INTS{a:[5]}  BOOLS{}       ARRS{}          out: INTS{a:[5]}  BOOLS{}       ARRS{}
    r(a) -> <v1>                                   in: INTS{a:[5]}  BOOLS{}       ARRS{}          out: INTS{a:[5]}  BOOLS{}       ARRS{}
    r(2) -> <v2>                                   in: INTS{a:[5]}  BOOLS{}       ARRS{}          out: INTS{a:[5]}  BOOLS{}       ARRS{}
    mark(a > 2)                                    in: INTS{a:[5]}  BOOLS{}       ARRS{}          out: INTS{a:[5]}  BOOLS{}       ARRS{}
    call(a > 2, compareTo|<v1>, <v2>) -> <v3>      in: INTS{a:[5]}  BOOLS{}       ARRS{}          out: INTS{a:[5]}  BOOLS{}       ARRS{}
    jf(L2|<v3>)                                    in: INTS{a:[5]}  BOOLS{}       ARRS{}          out: INTS{a:[5]}  BOOLS{}       ARRS{}
  3 mark({ a = 2 })                                in: INTS{a:[5]}  BOOLS{}       ARRS{}          out: INTS{a:[5]}  BOOLS{}       ARRS{}
    r(2) -> <v4>                                   in: INTS{a:[5]}  BOOLS{}       ARRS{}          out: INTS{a:[5]}  BOOLS{}       ARRS{}
    w(a|<v4>)                                      in: INTS{a:[5]}  BOOLS{}       ARRS{}          out: INTS{a:[2]}  BOOLS{}       ARRS{}
  2 jmp(L3)                                        in: INTS{a:[2]}  BOOLS{}       ARRS{}          out: INTS{a:[2]}  BOOLS{}       ARRS{}
L2 [else branch]:
    read (Unit)                                    in: INTS{#dead#} BOOLS{#dead#} ARRS{#dead#}    out: INTS{#dead#} BOOLS{#dead#} ARRS{#dead#}
L3 ['if' expression result]:
    merge(if (a > 2) { a = 2 }|!<v5>) -> <v6>      in: INTS{a:[2]}  BOOLS{}       ARRS{}          out: INTS{a:[2]}  BOOLS{}       ARRS{}
    r(42) -> <v7>                                  in: INTS{a:[2]}  BOOLS{}       ARRS{}          out: INTS{a:[2]}  BOOLS{}       ARRS{}
L1:
  1 <END>                                          in: INTS{}       BOOLS{}       ARRS{}          out: INTS{}       BOOLS{}       ARRS{}
error:
    <ERROR>                                        in: INTS{}       BOOLS{}       ARRS{}          out: INTS{}       BOOLS{}       ARRS{}
sink:
    <SINK>                                         in: INTS{}       BOOLS{}       ARRS{}          out: INTS{}       BOOLS{}       ARRS{}
=====================
== alwaysFalseIf ==
fun alwaysFalseIf() {
    var a = 1
    if (a < 0) {
        a = 10000
    }
    42
}
---------------------
L0:
  1 <START>                                            in: INTS{}       BOOLS{}       ARRS{}          out: INTS{}       BOOLS{}       ARRS{}
  2 mark({ var a = 1 if (a < 0) { a = 10000 } 42 })    in: INTS{}       BOOLS{}       ARRS{}          out: INTS{}       BOOLS{}       ARRS{}
    v(var a = 1)                                       in: INTS{}       BOOLS{}       ARRS{}          out: INTS{a:-}    BOOLS{}       ARRS{}
    r(1) -> <v0>                                       in: INTS{a:-}    BOOLS{}       ARRS{}          out: INTS{a:-}    BOOLS{}       ARRS{}
    w(a|<v0>)                                          in: INTS{a:-}    BOOLS{}       ARRS{}          out: INTS{a:[1]}  BOOLS{}       ARRS{}
    mark(if (a < 0) { a = 10000 })                     in: INTS{a:[1]}  BOOLS{}       ARRS{}          out: INTS{a:[1]}  BOOLS{}       ARRS{}
    r(a) -> <v1>                                       in: INTS{a:[1]}  BOOLS{}       ARRS{}          out: INTS{a:[1]}  BOOLS{}       ARRS{}
    r(0) -> <v2>                                       in: INTS{a:[1]}  BOOLS{}       ARRS{}          out: INTS{a:[1]}  BOOLS{}       ARRS{}
    mark(a < 0)                                        in: INTS{a:[1]}  BOOLS{}       ARRS{}          out: INTS{a:[1]}  BOOLS{}       ARRS{}
    call(a < 0, compareTo|<v1>, <v2>) -> <v3>          in: INTS{a:[1]}  BOOLS{}       ARRS{}          out: INTS{a:[1]}  BOOLS{}       ARRS{}
    jf(L2|<v3>)                                        in: INTS{a:[1]}  BOOLS{}       ARRS{}          out: INTS{a:[1]}  BOOLS{}       ARRS{}
  3 mark({ a = 10000 })                                in: INTS{#dead#} BOOLS{#dead#} ARRS{#dead#}    out: INTS{#dead#} BOOLS{#dead#} ARRS{#dead#}
    r(10000) -> <v4>                                   in: INTS{#dead#} BOOLS{#dead#} ARRS{#dead#}    out: INTS{#dead#} BOOLS{#dead#} ARRS{#dead#}
    w(a|<v4>)                                          in: INTS{#dead#} BOOLS{#dead#} ARRS{#dead#}    out: INTS{#dead#} BOOLS{#dead#} ARRS{#dead#}
  2 jmp(L3)                                            in: INTS{#dead#} BOOLS{#dead#} ARRS{#dead#}    out: INTS{#dead#} BOOLS{#dead#} ARRS{#dead#}
L2 [else branch]:
    read (Unit)                                        in: INTS{a:[1]}  BOOLS{}       ARRS{}          out: INTS{a:[1]}  BOOLS{}       ARRS{}
L3 ['if' expression result]:
    merge(if (a < 0) { a = 10000 }|!<v5>) -> <v6>      in: INTS{a:[1]}  BOOLS{}       ARRS{}          out: INTS{a:[1]}  BOOLS{}       ARRS{}
    r(42) -> <v7>                                      in: INTS{a:[1]}  BOOLS{}       ARRS{}          out: INTS{a:[1]}  BOOLS{}       ARRS{}
L1:
  1 <END>                                              in: INTS{}       BOOLS{}       ARRS{}          out: INTS{}       BOOLS{}       ARRS{}
error:
    <ERROR>                                            in: INTS{}       BOOLS{}       ARRS{}          out: INTS{}       BOOLS{}       ARRS{}
sink:
    <SINK>                                             in: INTS{}       BOOLS{}       ARRS{}          out: INTS{}       BOOLS{}       ARRS{}
=====================
== alwaysTrueIfWithElse ==
fun alwaysTrueIfWithElse() {
    var a = 5
    if (a > 2) {
        a = 2
    }
    else {
        a = 5
    }
    42
}
---------------------
L0:
  1 <START>                                                            in: INTS{}       BOOLS{}       ARRS{}          out: INTS{}       BOOLS{}       ARRS{}
  2 mark({ var a = 5 if (a > 2) { a = 2 } else { a = 5 } 42 })         in: INTS{}       BOOLS{}       ARRS{}          out: INTS{}       BOOLS{}       ARRS{}
    v(var a = 5)                                                       in: INTS{}       BOOLS{}       ARRS{}          out: INTS{a:-}    BOOLS{}       ARRS{}
    r(5) -> <v0>                                                       in: INTS{a:-}    BOOLS{}       ARRS{}          out: INTS{a:-}    BOOLS{}       ARRS{}
    w(a|<v0>)                                                          in: INTS{a:-}    BOOLS{}       ARRS{}          out: INTS{a:[5]}  BOOLS{}       ARRS{}
    mark(if (a > 2) { a = 2 } else { a = 5 })                          in: INTS{a:[5]}  BOOLS{}       ARRS{}          out: INTS{a:[5]}  BOOLS{}       ARRS{}
    r(a) -> <v1>                                                       in: INTS{a:[5]}  BOOLS{}       ARRS{}          out: INTS{a:[5]}  BOOLS{}       ARRS{}
    r(2) -> <v2>                                                       in: INTS{a:[5]}  BOOLS{}       ARRS{}          out: INTS{a:[5]}  BOOLS{}       ARRS{}
    mark(a > 2)                                                        in: INTS{a:[5]}  BOOLS{}       ARRS{}          out: INTS{a:[5]}  BOOLS{}       ARRS{}
    call(a > 2, compareTo|<v1>, <v2>) -> <v3>                          in: INTS{a:[5]}  BOOLS{}       ARRS{}          out: INTS{a:[5]}  BOOLS{}       ARRS{}
    jf(L2|<v3>)                                                        in: INTS{a:[5]}  BOOLS{}       ARRS{}          out: INTS{a:[5]}  BOOLS{}       ARRS{}
  3 mark({ a = 2 })                                                    in: INTS{a:[5]}  BOOLS{}       ARRS{}          out: INTS{a:[5]}  BOOLS{}       ARRS{}
    r(2) -> <v4>                                                       in: INTS{a:[5]}  BOOLS{}       ARRS{}          out: INTS{a:[5]}  BOOLS{}       ARRS{}
    w(a|<v4>)                                                          in: INTS{a:[5]}  BOOLS{}       ARRS{}          out: INTS{a:[2]}  BOOLS{}       ARRS{}
  2 jmp(L3)                                                            in: INTS{a:[2]}  BOOLS{}       ARRS{}          out: INTS{a:[2]}  BOOLS{}       ARRS{}
L2 [else branch]:
  3 mark({ a = 5 })                                                    in: INTS{#dead#} BOOLS{#dead#} ARRS{#dead#}    out: INTS{#dead#} BOOLS{#dead#} ARRS{#dead#}
    r(5) -> <v6>                                                       in: INTS{#dead#} BOOLS{#dead#} ARRS{#dead#}    out: INTS{#dead#} BOOLS{#dead#} ARRS{#dead#}
    w(a|<v6>)                                                          in: INTS{#dead#} BOOLS{#dead#} ARRS{#dead#}    out: INTS{#dead#} BOOLS{#dead#} ARRS{#dead#}
L3 ['if' expression result]:
  2 merge(if (a > 2) { a = 2 } else { a = 5 }|!<v5>, !<v7>) -> <v8>    in: INTS{a:[2]}  BOOLS{}       ARRS{}          out: INTS{a:[2]}  BOOLS{}       ARRS{}
    r(42) -> <v9>                                                      in: INTS{a:[2]}  BOOLS{}       ARRS{}          out: INTS{a:[2]}  BOOLS{}       ARRS{}
L1:
  1 <END>                                                              in: INTS{}       BOOLS{}       ARRS{}          out: INTS{}       BOOLS{}       ARRS{}
error:
    <ERROR>                                                            in: INTS{}       BOOLS{}       ARRS{}          out: INTS{}       BOOLS{}       ARRS{}
sink:
    <SINK>                                                             in: INTS{}       BOOLS{}       ARRS{}          out: INTS{}       BOOLS{}       ARRS{}
=====================
== andWithDeadCode ==
fun andWithDeadCode() {
    val lst = arrayListOf(1, 2, 3)
    lst.size() > 3 && lst[3] > 0
    42
}
---------------------
L0:
  1 <START>                                                                     in: INTS{}       BOOLS{}       ARRS{}           out: INTS{}       BOOLS{}       ARRS{}
  2 mark({ val lst = arrayListOf(1, 2, 3) lst.size() > 3 && lst[3] > 0 42 })    in: INTS{}       BOOLS{}       ARRS{}           out: INTS{}       BOOLS{}       ARRS{}
    v(val lst = arrayListOf(1, 2, 3))                                           in: INTS{}       BOOLS{}       ARRS{}           out: INTS{}       BOOLS{}       ARRS{lst:-}
    r(1) -> <v0>                                                                in: INTS{}       BOOLS{}       ARRS{lst:-}      out: INTS{}       BOOLS{}       ARRS{lst:-}
    r(2) -> <v1>                                                                in: INTS{}       BOOLS{}       ARRS{lst:-}      out: INTS{}       BOOLS{}       ARRS{lst:-}
    r(3) -> <v2>                                                                in: INTS{}       BOOLS{}       ARRS{lst:-}      out: INTS{}       BOOLS{}       ARRS{lst:-}
    mark(arrayListOf(1, 2, 3))                                                  in: INTS{}       BOOLS{}       ARRS{lst:-}      out: INTS{}       BOOLS{}       ARRS{lst:-}
    call(arrayListOf(1, 2, 3), arrayListOf|<v0>, <v1>, <v2>) -> <v3>            in: INTS{}       BOOLS{}       ARRS{lst:-}      out: INTS{}       BOOLS{}       ARRS{lst:-}
    w(lst|<v3>)                                                                 in: INTS{}       BOOLS{}       ARRS{lst:-}      out: INTS{}       BOOLS{}       ARRS{lst:[3]}
    mark(lst.size())                                                            in: INTS{}       BOOLS{}       ARRS{lst:[3]}    out: INTS{}       BOOLS{}       ARRS{lst:[3]}
    r(lst) -> <v4>                                                              in: INTS{}       BOOLS{}       ARRS{lst:[3]}    out: INTS{}       BOOLS{}       ARRS{lst:[3]}
    mark(size())                                                                in: INTS{}       BOOLS{}       ARRS{lst:[3]}    out: INTS{}       BOOLS{}       ARRS{lst:[3]}
    call(size(), size|<v4>) -> <v5>                                             in: INTS{}       BOOLS{}       ARRS{lst:[3]}    out: INTS{}       BOOLS{}       ARRS{lst:[3]}
    r(3) -> <v6>                                                                in: INTS{}       BOOLS{}       ARRS{lst:[3]}    out: INTS{}       BOOLS{}       ARRS{lst:[3]}
    mark(lst.size() > 3)                                                        in: INTS{}       BOOLS{}       ARRS{lst:[3]}    out: INTS{}       BOOLS{}       ARRS{lst:[3]}
    call(lst.size() > 3, compareTo|<v5>, <v6>) -> <v7>                          in: INTS{}       BOOLS{}       ARRS{lst:[3]}    out: INTS{}       BOOLS{}       ARRS{lst:[3]}
    jf(L2|<v7>)                                                                 in: INTS{}       BOOLS{}       ARRS{lst:[3]}    out: INTS{}       BOOLS{}       ARRS{lst:[3]}
    mark(lst[3])                                                                in: INTS{#dead#} BOOLS{#dead#} ARRS{#dead#}     out: INTS{#dead#} BOOLS{#dead#} ARRS{#dead#}
    r(lst) -> <v8>                                                              in: INTS{#dead#} BOOLS{#dead#} ARRS{#dead#}     out: INTS{#dead#} BOOLS{#dead#} ARRS{#dead#}
    r(3) -> <v9>                                                                in: INTS{#dead#} BOOLS{#dead#} ARRS{#dead#}     out: INTS{#dead#} BOOLS{#dead#} ARRS{#dead#}
    mark(lst[3])                                                                in: INTS{#dead#} BOOLS{#dead#} ARRS{#dead#}     out: INTS{#dead#} BOOLS{#dead#} ARRS{#dead#}
    call(lst[3], get|<v8>, <v9>) -> <v10>                                       in: INTS{#dead#} BOOLS{#dead#} ARRS{#dead#}     out: INTS{#dead#} BOOLS{#dead#} ARRS{#dead#}
    r(0) -> <v11>                                                               in: INTS{#dead#} BOOLS{#dead#} ARRS{#dead#}     out: INTS{#dead#} BOOLS{#dead#} ARRS{#dead#}
    mark(lst[3] > 0)                                                            in: INTS{#dead#} BOOLS{#dead#} ARRS{#dead#}     out: INTS{#dead#} BOOLS{#dead#} ARRS{#dead#}
    call(lst[3] > 0, compareTo|<v10>, <v11>) -> <v12>                           in: INTS{#dead#} BOOLS{#dead#} ARRS{#dead#}     out: INTS{#dead#} BOOLS{#dead#} ARRS{#dead#}
L2 [result of boolean operation]:
    magic[AND](lst.size() > 3 && lst[3] > 0|<v7>, <v12>) -> <v13>               in: INTS{}       BOOLS{}       ARRS{lst:[3]}    out: INTS{}       BOOLS{}       ARRS{lst:[3]}
    r(42) -> <v14>                                                              in: INTS{}       BOOLS{}       ARRS{lst:[3]}    out: INTS{}       BOOLS{}       ARRS{lst:[3]}
L1:
  1 <END>                                                                       in: INTS{}       BOOLS{}       ARRS{}           out: INTS{}       BOOLS{}       ARRS{}
error:
    <ERROR>                                                                     in: INTS{}       BOOLS{}       ARRS{}           out: INTS{}       BOOLS{}       ARRS{}
sink:
    <SINK>                                                                      in: INTS{}       BOOLS{}       ARRS{}           out: INTS{}       BOOLS{}       ARRS{}
=====================
== whileWithDeadCode ==
fun whileWithDeadCode() {
    var a = 2
    while (false) {
        42
    }
    while (a < 0) {
        ++a
    }
    a = 2
    while (a > 0) {
        while (a < 0) {
            ++a
        }
    }
    a = 2
    while (++a <= 2) {
        ++a
    }
    42
}
---------------------
L0:
  1 <START>                                                                                                                                           in: INTS{}       BOOLS{}       ARRS{}          out: INTS{}       BOOLS{}       ARRS{}
  2 mark({ var a = 2 while (false) { 42 } while (a < 0) { ++a } a = 2 while (a > 0) { while (a < 0) { ++a } } a = 2 while (++a <= 2) { ++a } 42 })    in: INTS{}       BOOLS{}       ARRS{}          out: INTS{}       BOOLS{}       ARRS{}
    v(var a = 2)                                                                                                                                      in: INTS{}       BOOLS{}       ARRS{}          out: INTS{a:-}    BOOLS{}       ARRS{}
    r(2) -> <v0>                                                                                                                                      in: INTS{a:-}    BOOLS{}       ARRS{}          out: INTS{a:-}    BOOLS{}       ARRS{}
    w(a|<v0>)                                                                                                                                         in: INTS{a:-}    BOOLS{}       ARRS{}          out: INTS{a:[2]}  BOOLS{}       ARRS{}
L2 [loop entry point]:
L6 [condition entry point]:
    r(false) -> <v1>                                                                                                                                  in: INTS{a:[2]}  BOOLS{}       ARRS{}          out: INTS{a:[2]}  BOOLS{}       ARRS{}
    mark(while (false) { 42 })                                                                                                                        in: INTS{a:[2]}  BOOLS{}       ARRS{}          out: INTS{a:[2]}  BOOLS{}       ARRS{}
    jf(L3|<v1>)                                                                                                                                       in: INTS{a:[2]}  BOOLS{}       ARRS{}          out: INTS{a:[2]}  BOOLS{}       ARRS{}
L4 [body entry point]:
  3 mark({ 42 })                                                                                                                                      in: INTS{#dead#} BOOLS{#dead#} ARRS{#dead#}    out: INTS{#dead#} BOOLS{#dead#} ARRS{#dead#}
    r(42) -> <v2>                                                                                                                                     in: INTS{#dead#} BOOLS{#dead#} ARRS{#dead#}    out: INTS{#dead#} BOOLS{#dead#} ARRS{#dead#}
  2 jmp(L2)                                                                                                                                           in: INTS{#dead#} BOOLS{#dead#} ARRS{#dead#}    out: INTS{#dead#} BOOLS{#dead#} ARRS{#dead#}
L3 [loop exit point]:
L5 [body exit point]:
    read (Unit)                                                                                                                                       in: INTS{a:[2]}  BOOLS{}       ARRS{}          out: INTS{a:[2]}  BOOLS{}       ARRS{}
L7 [loop entry point]:
L11 [condition entry point]:
    r(a) -> <v3>                                                                                                                                      in: INTS{a:[2]}  BOOLS{}       ARRS{}          out: INTS{a:?}    BOOLS{}       ARRS{}
    r(0) -> <v4>                                                                                                                                      in: INTS{a:?}    BOOLS{}       ARRS{}          out: INTS{a:?}    BOOLS{}       ARRS{}
    mark(a < 0)                                                                                                                                       in: INTS{a:?}    BOOLS{}       ARRS{}          out: INTS{a:?}    BOOLS{}       ARRS{}
    call(a < 0, compareTo|<v3>, <v4>) -> <v5>                                                                                                         in: INTS{a:?}    BOOLS{}       ARRS{}          out: INTS{a:?}    BOOLS{}       ARRS{}
    mark(while (a < 0) { ++a })                                                                                                                       in: INTS{a:?}    BOOLS{}       ARRS{}          out: INTS{a:?}    BOOLS{}       ARRS{}
    jf(L8|<v5>)                                                                                                                                       in: INTS{a:?}    BOOLS{}       ARRS{}          out: INTS{a:?}    BOOLS{}       ARRS{}
L9 [body entry point]:
  3 mark({ ++a })                                                                                                                                     in: INTS{a:?}    BOOLS{}       ARRS{}          out: INTS{a:?}    BOOLS{}       ARRS{}
    r(a) -> <v6>                                                                                                                                      in: INTS{a:?}    BOOLS{}       ARRS{}          out: INTS{a:?}    BOOLS{}       ARRS{}
    mark(++a)                                                                                                                                         in: INTS{a:?}    BOOLS{}       ARRS{}          out: INTS{a:?}    BOOLS{}       ARRS{}
    call(++a, inc|<v6>) -> <v7>                                                                                                                       in: INTS{a:?}    BOOLS{}       ARRS{}          out: INTS{a:?}    BOOLS{}       ARRS{}
    w(a|<v7>)                                                                                                                                         in: INTS{a:?}    BOOLS{}       ARRS{}          out: INTS{a:?}    BOOLS{}       ARRS{}
  2 jmp(L7)                                                                                                                                           in: INTS{a:?}    BOOLS{}       ARRS{}          out: INTS{a:?}    BOOLS{}       ARRS{}
L8 [loop exit point]:
L10 [body exit point]:
    read (Unit)                                                                                                                                       in: INTS{a:?}    BOOLS{}       ARRS{}          out: INTS{a:?}    BOOLS{}       ARRS{}
    r(2) -> <v8>                                                                                                                                      in: INTS{a:?}    BOOLS{}       ARRS{}          out: INTS{a:?}    BOOLS{}       ARRS{}
    w(a|<v8>)                                                                                                                                         in: INTS{a:?}    BOOLS{}       ARRS{}          out: INTS{a:[2]}  BOOLS{}       ARRS{}
L12 [loop entry point]:
L16 [condition entry point]:
    r(a) -> <v9>                                                                                                                                      in: INTS{a:[2]}  BOOLS{}       ARRS{}          out: INTS{a:[2]}  BOOLS{}       ARRS{}
    r(0) -> <v10>                                                                                                                                     in: INTS{a:[2]}  BOOLS{}       ARRS{}          out: INTS{a:[2]}  BOOLS{}       ARRS{}
    mark(a > 0)                                                                                                                                       in: INTS{a:[2]}  BOOLS{}       ARRS{}          out: INTS{a:[2]}  BOOLS{}       ARRS{}
    call(a > 0, compareTo|<v9>, <v10>) -> <v11>                                                                                                       in: INTS{a:[2]}  BOOLS{}       ARRS{}          out: INTS{a:[2]}  BOOLS{}       ARRS{}
    mark(while (a > 0) { while (a < 0) { ++a } })                                                                                                     in: INTS{a:[2]}  BOOLS{}       ARRS{}          out: INTS{a:[2]}  BOOLS{}       ARRS{}
    jf(L13|<v11>)                                                                                                                                     in: INTS{a:[2]}  BOOLS{}       ARRS{}          out: INTS{a:[2]}  BOOLS{}       ARRS{}
L14 [body entry point]:
  3 mark({ while (a < 0) { ++a } })                                                                                                                   in: INTS{a:[2]}  BOOLS{}       ARRS{}          out: INTS{a:[2]}  BOOLS{}       ARRS{}
L17 [loop entry point]:
L21 [condition entry point]:
    r(a) -> <v12>                                                                                                                                     in: INTS{a:[2]}  BOOLS{}       ARRS{}          out: INTS{a:?}    BOOLS{}       ARRS{}
    r(0) -> <v13>                                                                                                                                     in: INTS{a:?}    BOOLS{}       ARRS{}          out: INTS{a:?}    BOOLS{}       ARRS{}
    mark(a < 0)                                                                                                                                       in: INTS{a:?}    BOOLS{}       ARRS{}          out: INTS{a:?}    BOOLS{}       ARRS{}
    call(a < 0, compareTo|<v12>, <v13>) -> <v14>                                                                                                      in: INTS{a:?}    BOOLS{}       ARRS{}          out: INTS{a:?}    BOOLS{}       ARRS{}
    mark(while (a < 0) { ++a })                                                                                                                       in: INTS{a:?}    BOOLS{}       ARRS{}          out: INTS{a:?}    BOOLS{}       ARRS{}
    jf(L18|<v14>)                                                                                                                                     in: INTS{a:?}    BOOLS{}       ARRS{}          out: INTS{a:?}    BOOLS{}       ARRS{}
L19 [body entry point]:
  4 mark({ ++a })                                                                                                                                     in: INTS{a:?}    BOOLS{}       ARRS{}          out: INTS{a:?}    BOOLS{}       ARRS{}
    r(a) -> <v15>                                                                                                                                     in: INTS{a:?}    BOOLS{}       ARRS{}          out: INTS{a:?}    BOOLS{}       ARRS{}
    mark(++a)                                                                                                                                         in: INTS{a:?}    BOOLS{}       ARRS{}          out: INTS{a:?}    BOOLS{}       ARRS{}
    call(++a, inc|<v15>) -> <v16>                                                                                                                     in: INTS{a:?}    BOOLS{}       ARRS{}          out: INTS{a:?}    BOOLS{}       ARRS{}
    w(a|<v16>)                                                                                                                                        in: INTS{a:?}    BOOLS{}       ARRS{}          out: INTS{a:?}    BOOLS{}       ARRS{}
  3 jmp(L17)                                                                                                                                          in: INTS{a:?}    BOOLS{}       ARRS{}          out: INTS{a:?}    BOOLS{}       ARRS{}
L18 [loop exit point]:
L20 [body exit point]:
    read (Unit)                                                                                                                                       in: INTS{a:?}    BOOLS{}       ARRS{}          out: INTS{a:?}    BOOLS{}       ARRS{}
  2 jmp(L12)                                                                                                                                          in: INTS{a:?}    BOOLS{}       ARRS{}          out: INTS{a:?}    BOOLS{}       ARRS{}
L13 [loop exit point]:
L15 [body exit point]:
    read (Unit)                                                                                                                                       in: INTS{a:[2]}  BOOLS{}       ARRS{}          out: INTS{a:[2]}  BOOLS{}       ARRS{}
    r(2) -> <v18>                                                                                                                                     in: INTS{a:[2]}  BOOLS{}       ARRS{}          out: INTS{a:[2]}  BOOLS{}       ARRS{}
    w(a|<v18>)                                                                                                                                        in: INTS{a:[2]}  BOOLS{}       ARRS{}          out: INTS{a:[2]}  BOOLS{}       ARRS{}
L22 [loop entry point]:
L26 [condition entry point]:
    r(a) -> <v19>                                                                                                                                     in: INTS{a:[2]}  BOOLS{}       ARRS{}          out: INTS{a:?}    BOOLS{}       ARRS{}
    mark(++a)                                                                                                                                         in: INTS{a:?}    BOOLS{}       ARRS{}          out: INTS{a:?}    BOOLS{}       ARRS{}
    call(++a, inc|<v19>) -> <v20>                                                                                                                     in: INTS{a:?}    BOOLS{}       ARRS{}          out: INTS{a:?}    BOOLS{}       ARRS{}
    w(a|<v20>)                                                                                                                                        in: INTS{a:?}    BOOLS{}       ARRS{}          out: INTS{a:?}    BOOLS{}       ARRS{}
    r(2) -> <v21>                                                                                                                                     in: INTS{a:?}    BOOLS{}       ARRS{}          out: INTS{a:?}    BOOLS{}       ARRS{}
    mark(++a <= 2)                                                                                                                                    in: INTS{a:?}    BOOLS{}       ARRS{}          out: INTS{a:?}    BOOLS{}       ARRS{}
    call(++a <= 2, compareTo|<v20>, <v21>) -> <v22>                                                                                                   in: INTS{a:?}    BOOLS{}       ARRS{}          out: INTS{a:?}    BOOLS{}       ARRS{}
    mark(while (++a <= 2) { ++a })                                                                                                                    in: INTS{a:?}    BOOLS{}       ARRS{}          out: INTS{a:?}    BOOLS{}       ARRS{}
    jf(L23|<v22>)                                                                                                                                     in: INTS{a:?}    BOOLS{}       ARRS{}          out: INTS{a:?}    BOOLS{}       ARRS{}
L24 [body entry point]:
  3 mark({ ++a })                                                                                                                                     in: INTS{a:?}    BOOLS{}       ARRS{}          out: INTS{a:?}    BOOLS{}       ARRS{}
    r(a) -> <v23>                                                                                                                                     in: INTS{a:?}    BOOLS{}       ARRS{}          out: INTS{a:?}    BOOLS{}       ARRS{}
    mark(++a)                                                                                                                                         in: INTS{a:?}    BOOLS{}       ARRS{}          out: INTS{a:?}    BOOLS{}       ARRS{}
    call(++a, inc|<v23>) -> <v24>                                                                                                                     in: INTS{a:?}    BOOLS{}       ARRS{}          out: INTS{a:?}    BOOLS{}       ARRS{}
    w(a|<v24>)                                                                                                                                        in: INTS{a:?}    BOOLS{}       ARRS{}          out: INTS{a:?}    BOOLS{}       ARRS{}
  2 jmp(L22)                                                                                                                                          in: INTS{a:?}    BOOLS{}       ARRS{}          out: INTS{a:?}    BOOLS{}       ARRS{}
L23 [loop exit point]:
L25 [body exit point]:
    read (Unit)                                                                                                                                       in: INTS{a:?}    BOOLS{}       ARRS{}          out: INTS{a:?}    BOOLS{}       ARRS{}
    r(42) -> <v25>                                                                                                                                    in: INTS{a:?}    BOOLS{}       ARRS{}          out: INTS{a:?}    BOOLS{}       ARRS{}
L1:
  1 <END>                                                                                                                                             in: INTS{}       BOOLS{}       ARRS{}          out: INTS{}       BOOLS{}       ARRS{}
error:
    <ERROR>                                                                                                                                           in: INTS{}       BOOLS{}       ARRS{}          out: INTS{}       BOOLS{}       ARRS{}
sink:
    <SINK>                                                                                                                                            in: INTS{}       BOOLS{}       ARRS{}          out: INTS{}       BOOLS{}       ARRS{}
=====================
== andSequenceWithDeadCode ==
fun andSequenceWithDeadCode() {
    false && true && true && 1 > 0
}
---------------------
L0:
  1 <START>                                                          in: INTS{}       BOOLS{}       ARRS{}          out: INTS{}       BOOLS{}       ARRS{}
  2 mark({ false && true && true && 1 > 0 })                         in: INTS{}       BOOLS{}       ARRS{}          out: INTS{}       BOOLS{}       ARRS{}
    r(false) -> <v0>                                                 in: INTS{}       BOOLS{}       ARRS{}          out: INTS{}       BOOLS{}       ARRS{}
    jf(L4|<v0>)                                                      in: INTS{}       BOOLS{}       ARRS{}          out: INTS{}       BOOLS{}       ARRS{}
    r(true) -> <v1>                                                  in: INTS{#dead#} BOOLS{#dead#} ARRS{#dead#}    out: INTS{#dead#} BOOLS{#dead#} ARRS{#dead#}
L4 [result of boolean operation]:
    magic[AND](false && true|<v0>, <v1>) -> <v2>                     in: INTS{}       BOOLS{}       ARRS{}          out: INTS{}       BOOLS{}       ARRS{}
    jf(L3|<v2>)                                                      in: INTS{}       BOOLS{}       ARRS{}          out: INTS{}       BOOLS{}       ARRS{}
    r(true) -> <v3>                                                  in: INTS{#dead#} BOOLS{#dead#} ARRS{#dead#}    out: INTS{#dead#} BOOLS{#dead#} ARRS{#dead#}
L3 [result of boolean operation]:
    magic[AND](false && true && true|<v2>, <v3>) -> <v4>             in: INTS{}       BOOLS{}       ARRS{}          out: INTS{}       BOOLS{}       ARRS{}
    jf(L2|<v4>)                                                      in: INTS{}       BOOLS{}       ARRS{}          out: INTS{}       BOOLS{}       ARRS{}
    r(1) -> <v5>                                                     in: INTS{#dead#} BOOLS{#dead#} ARRS{#dead#}    out: INTS{#dead#} BOOLS{#dead#} ARRS{#dead#}
    r(0) -> <v6>                                                     in: INTS{#dead#} BOOLS{#dead#} ARRS{#dead#}    out: INTS{#dead#} BOOLS{#dead#} ARRS{#dead#}
    mark(1 > 0)                                                      in: INTS{#dead#} BOOLS{#dead#} ARRS{#dead#}    out: INTS{#dead#} BOOLS{#dead#} ARRS{#dead#}
    call(1 > 0, compareTo|<v5>, <v6>) -> <v7>                        in: INTS{#dead#} BOOLS{#dead#} ARRS{#dead#}    out: INTS{#dead#} BOOLS{#dead#} ARRS{#dead#}
L2 [result of boolean operation]:
    magic[AND](false && true && true && 1 > 0|<v4>, <v7>) -> <v8>    in: INTS{}       BOOLS{}       ARRS{}          out: INTS{}       BOOLS{}       ARRS{}
L1:
  1 <END>                                                            in: INTS{}       BOOLS{}       ARRS{}          out: INTS{}       BOOLS{}       ARRS{}
error:
    <ERROR>                                                          in: INTS{}       BOOLS{}       ARRS{}          out: INTS{}       BOOLS{}       ARRS{}
sink:
    <SINK>                                                           in: INTS{}       BOOLS{}       ARRS{}          out: INTS{}       BOOLS{}       ARRS{}
=====================
== orSequenceWithDeadCode ==
fun orSequenceWithDeadCode() {
    true || false || true || 1 > 100
}
---------------------
L0:
  1 <START>                                                           in: INTS{}       BOOLS{}       ARRS{}          out: INTS{}       BOOLS{}       ARRS{}
  2 mark({ true || false || true || 1 > 100 })                        in: INTS{}       BOOLS{}       ARRS{}          out: INTS{}       BOOLS{}       ARRS{}
    r(true) -> <v0>                                                   in: INTS{}       BOOLS{}       ARRS{}          out: INTS{}       BOOLS{}       ARRS{}
    jt(L4|<v0>)                                                       in: INTS{}       BOOLS{}       ARRS{}          out: INTS{}       BOOLS{}       ARRS{}
    r(false) -> <v1>                                                  in: INTS{#dead#} BOOLS{#dead#} ARRS{#dead#}    out: INTS{#dead#} BOOLS{#dead#} ARRS{#dead#}
L4 [result of boolean operation]:
    magic[OR](true || false|<v0>, <v1>) -> <v2>                       in: INTS{}       BOOLS{}       ARRS{}          out: INTS{}       BOOLS{}       ARRS{}
    jt(L3|<v2>)                                                       in: INTS{}       BOOLS{}       ARRS{}          out: INTS{}       BOOLS{}       ARRS{}
    r(true) -> <v3>                                                   in: INTS{#dead#} BOOLS{#dead#} ARRS{#dead#}    out: INTS{#dead#} BOOLS{#dead#} ARRS{#dead#}
L3 [result of boolean operation]:
    magic[OR](true || false || true|<v2>, <v3>) -> <v4>               in: INTS{}       BOOLS{}       ARRS{}          out: INTS{}       BOOLS{}       ARRS{}
    jt(L2|<v4>)                                                       in: INTS{}       BOOLS{}       ARRS{}          out: INTS{}       BOOLS{}       ARRS{}
    r(1) -> <v5>                                                      in: INTS{#dead#} BOOLS{#dead#} ARRS{#dead#}    out: INTS{#dead#} BOOLS{#dead#} ARRS{#dead#}
    r(100) -> <v6>                                                    in: INTS{#dead#} BOOLS{#dead#} ARRS{#dead#}    out: INTS{#dead#} BOOLS{#dead#} ARRS{#dead#}
    mark(1 > 100)                                                     in: INTS{#dead#} BOOLS{#dead#} ARRS{#dead#}    out: INTS{#dead#} BOOLS{#dead#} ARRS{#dead#}
    call(1 > 100, compareTo|<v5>, <v6>) -> <v7>                       in: INTS{#dead#} BOOLS{#dead#} ARRS{#dead#}    out: INTS{#dead#} BOOLS{#dead#} ARRS{#dead#}
L2 [result of boolean operation]:
    magic[OR](true || false || true || 1 > 100|<v4>, <v7>) -> <v8>    in: INTS{}       BOOLS{}       ARRS{}          out: INTS{}       BOOLS{}       ARRS{}
L1:
  1 <END>                                                             in: INTS{}       BOOLS{}       ARRS{}          out: INTS{}       BOOLS{}       ARRS{}
error:
    <ERROR>                                                           in: INTS{}       BOOLS{}       ARRS{}          out: INTS{}       BOOLS{}       ARRS{}
sink:
    <SINK>                                                            in: INTS{}       BOOLS{}       ARRS{}          out: INTS{}       BOOLS{}       ARRS{}
=====================
== booleanOperatorsSequenceWithDeadCode ==
fun booleanOperatorsSequenceWithDeadCode() {
    false && true || true && true || true || false
}
---------------------
L0:
  1 <START>                                                                          in: INTS{}       BOOLS{}       ARRS{}          out: INTS{}       BOOLS{}       ARRS{}
  2 mark({ false && true || true && true || true || false })                         in: INTS{}       BOOLS{}       ARRS{}          out: INTS{}       BOOLS{}       ARRS{}
    r(false) -> <v0>                                                                 in: INTS{}       BOOLS{}       ARRS{}          out: INTS{}       BOOLS{}       ARRS{}
    jf(L5|<v0>)                                                                      in: INTS{}       BOOLS{}       ARRS{}          out: INTS{}       BOOLS{}       ARRS{}
    r(true) -> <v1>                                                                  in: INTS{#dead#} BOOLS{#dead#} ARRS{#dead#}    out: INTS{#dead#} BOOLS{#dead#} ARRS{#dead#}
L5 [result of boolean operation]:
    magic[AND](false && true|<v0>, <v1>) -> <v2>                                     in: INTS{}       BOOLS{}       ARRS{}          out: INTS{}       BOOLS{}       ARRS{}
    jt(L4|<v2>)                                                                      in: INTS{}       BOOLS{}       ARRS{}          out: INTS{}       BOOLS{}       ARRS{}
    r(true) -> <v3>                                                                  in: INTS{}       BOOLS{}       ARRS{}          out: INTS{}       BOOLS{}       ARRS{}
    jf(L6|<v3>)                                                                      in: INTS{}       BOOLS{}       ARRS{}          out: INTS{}       BOOLS{}       ARRS{}
    r(true) -> <v4>                                                                  in: INTS{}       BOOLS{}       ARRS{}          out: INTS{}       BOOLS{}       ARRS{}
L6 [result of boolean operation]:
    magic[AND](true && true|<v3>, <v4>) -> <v5>                                      in: INTS{}       BOOLS{}       ARRS{}          out: INTS{}       BOOLS{}       ARRS{}
L4 [result of boolean operation]:
    magic[OR](false && true || true && true|<v2>, <v5>) -> <v6>                      in: INTS{}       BOOLS{}       ARRS{}          out: INTS{}       BOOLS{}       ARRS{}
    jt(L3|<v6>)                                                                      in: INTS{}       BOOLS{}       ARRS{}          out: INTS{}       BOOLS{}       ARRS{}
    r(true) -> <v7>                                                                  in: INTS{#dead#} BOOLS{#dead#} ARRS{#dead#}    out: INTS{#dead#} BOOLS{#dead#} ARRS{#dead#}
L3 [result of boolean operation]:
    magic[OR](false && true || true && true || true|<v6>, <v7>) -> <v8>              in: INTS{}       BOOLS{}       ARRS{}          out: INTS{}       BOOLS{}       ARRS{}
    jt(L2|<v8>)                                                                      in: INTS{}       BOOLS{}       ARRS{}          out: INTS{}       BOOLS{}       ARRS{}
    r(false) -> <v9>                                                                 in: INTS{#dead#} BOOLS{#dead#} ARRS{#dead#}    out: INTS{#dead#} BOOLS{#dead#} ARRS{#dead#}
L2 [result of boolean operation]:
    magic[OR](false && true || true && true || true || false|<v8>, <v9>) -> <v10>    in: INTS{}       BOOLS{}       ARRS{}          out: INTS{}       BOOLS{}       ARRS{}
L1:
  1 <END>                                                                            in: INTS{}       BOOLS{}       ARRS{}          out: INTS{}       BOOLS{}       ARRS{}
error:
    <ERROR>                                                                          in: INTS{}       BOOLS{}       ARRS{}          out: INTS{}       BOOLS{}       ARRS{}
sink:
    <SINK>                                                                           in: INTS{}       BOOLS{}       ARRS{}          out: INTS{}       BOOLS{}       ARRS{}
=====================