KtFile: IsAndSubsequentExpressions.kt
  PACKAGE_DIRECTIVE
    <empty list>
  IMPORT_LIST
    <empty list>
  PsiComment(EOL_COMMENT)('// COMPILATION_ERRORS')
  PsiWhiteSpace('\n')
  PsiComment(EOL_COMMENT)('// It's found during working on binary expression optimizing KT-77993')
  PsiWhiteSpace('\n\n')
  FUN
    PsiElement(fun)('fun')
    PsiWhiteSpace(' ')
    PsiElement(IDENTIFIER)('testLowerPriority')
    VALUE_PARAMETER_LIST
      PsiElement(LPAR)('(')
      PsiElement(RPAR)(')')
    PsiWhiteSpace(' ')
    BLOCK
      PsiElement(LBRACE)('{')
      PsiWhiteSpace('\n    ')
      PROPERTY
        PsiElement(val)('val')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('y')
        PsiWhiteSpace(' ')
        PsiElement(EQ)('=')
        PsiWhiteSpace(' ')
        BINARY_EXPRESSION
          IS_EXPRESSION
            REFERENCE_EXPRESSION
              PsiElement(IDENTIFIER)('x')
            PsiWhiteSpace(' ')
            OPERATION_REFERENCE
              PsiElement(is)('is')
            PsiWhiteSpace(' ')
            TYPE_REFERENCE
              USER_TYPE
                REFERENCE_EXPRESSION
                  PsiElement(IDENTIFIER)('Int')
          PsiWhiteSpace(' ')
          OPERATION_REFERENCE
            PsiElement(LTEQ)('<=')
          PsiWhiteSpace(' ')
          BOOLEAN_CONSTANT
            PsiElement(true)('true')
        PsiWhiteSpace(' ')
        PsiComment(EOL_COMMENT)('// Correct syntax: `<=` (COMPARISON) priority is lower than `is`')
      PsiWhiteSpace('\n')
      PsiElement(RBRACE)('}')
  PsiWhiteSpace('\n\n')
  FUN
    PsiElement(fun)('fun')
    PsiWhiteSpace(' ')
    PsiElement(IDENTIFIER)('testEqualPriority')
    VALUE_PARAMETER_LIST
      PsiElement(LPAR)('(')
      PsiElement(RPAR)(')')
    PsiWhiteSpace(' ')
    BLOCK
      PsiElement(LBRACE)('{')
      PsiWhiteSpace('\n    ')
      PROPERTY
        PsiElement(val)('val')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('z')
        PsiWhiteSpace(' ')
        PsiElement(EQ)('=')
        PsiWhiteSpace(' ')
        IS_EXPRESSION
          IS_EXPRESSION
            REFERENCE_EXPRESSION
              PsiElement(IDENTIFIER)('x')
            PsiWhiteSpace(' ')
            OPERATION_REFERENCE
              PsiElement(is)('is')
            PsiWhiteSpace(' ')
            TYPE_REFERENCE
              USER_TYPE
                REFERENCE_EXPRESSION
                  PsiElement(IDENTIFIER)('Int')
          PsiWhiteSpace(' ')
          OPERATION_REFERENCE
            PsiElement(is)('is')
          PsiWhiteSpace(' ')
          TYPE_REFERENCE
            USER_TYPE
              REFERENCE_EXPRESSION
                PsiElement(IDENTIFIER)('Boolean')
        PsiWhiteSpace(' ')
        PsiComment(EOL_COMMENT)('// Correct syntax: `is` priority equals `is`')
      PsiWhiteSpace('\n')
      PsiElement(RBRACE)('}')
  PsiWhiteSpace('\n\n')
  FUN
    PsiElement(fun)('fun')
    PsiWhiteSpace(' ')
    PsiElement(IDENTIFIER)('testHigherPriority')
    VALUE_PARAMETER_LIST
      PsiElement(LPAR)('(')
      PsiElement(RPAR)(')')
    PsiWhiteSpace(' ')
    BLOCK
      PsiElement(LBRACE)('{')
      PsiWhiteSpace('\n    ')
      PROPERTY
        PsiElement(val)('val')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('w')
        PsiWhiteSpace(' ')
        PsiElement(EQ)('=')
        PsiWhiteSpace(' ')
        IS_EXPRESSION
          REFERENCE_EXPRESSION
            PsiElement(IDENTIFIER)('x')
          PsiWhiteSpace(' ')
          OPERATION_REFERENCE
            PsiElement(is)('is')
          PsiWhiteSpace(' ')
          TYPE_REFERENCE
            USER_TYPE
              REFERENCE_EXPRESSION
                PsiElement(IDENTIFIER)('Int')
      PsiWhiteSpace(' ')
      PsiErrorElement:Unexpected tokens (use ';' to separate expressions on the same line)
        PsiElement(RANGE)('..')
        PsiWhiteSpace(' ')
        PsiElement(true)('true')
      PsiWhiteSpace(' ')
      PsiComment(EOL_COMMENT)('// Incorrect syntax: `..` (RANGE) priority is higher than `is`')
      PsiWhiteSpace('\n')
      PsiElement(RBRACE)('}')