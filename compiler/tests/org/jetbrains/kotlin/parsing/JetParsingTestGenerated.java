/*
 * Copyright 2010-2015 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.kotlin.parsing;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.InnerTestClasses;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.JetTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@InnerTestClasses({JetParsingTestGenerated.Psi.class, JetParsingTestGenerated.Expression.class, JetParsingTestGenerated.Block.class})
@RunWith(JUnit3RunnerWithInners.class)
public class JetParsingTestGenerated extends AbstractJetParsingTest {
    @TestMetadata("compiler/testData/psi")
    @TestDataPath("$PROJECT_ROOT")
    @InnerTestClasses({Psi.Annotation.class, Psi.Examples.class, Psi.FunctionReceivers.class, Psi.GreatSyntacticShift.class, Psi.Kdoc.class, Psi.PlatformTypesRecovery.class, Psi.PropertyDelegate.class, Psi.Recovery.class, Psi.Script.class, Psi.StringTemplates.class})
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Psi extends AbstractJetParsingTest {
        @TestMetadata("AbsentInnerType.kt")
        public void testAbsentInnerType() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/AbsentInnerType.kt");
            doParsingTest(fileName);
        }

        public void testAllFilesPresentInPsi() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/psi"), Pattern.compile("^(.*)\\.kts?$"), true);
        }

        @TestMetadata("AnonymousInitializer.kt")
        public void testAnonymousInitializer() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/AnonymousInitializer.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("AssertNotNull.kt")
        public void testAssertNotNull() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/AssertNotNull.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("BabySteps.kt")
        public void testBabySteps() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/BabySteps.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("BabySteps_ERR.kt")
        public void testBabySteps_ERR() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/BabySteps_ERR.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("BackslashInString.kt")
        public void testBackslashInString() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/BackslashInString.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("BlockCommentAtBeginningOfFile1.kt")
        public void testBlockCommentAtBeginningOfFile1() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/BlockCommentAtBeginningOfFile1.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("BlockCommentAtBeginningOfFile2.kt")
        public void testBlockCommentAtBeginningOfFile2() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/BlockCommentAtBeginningOfFile2.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("BlockCommentAtBeginningOfFile3.kt")
        public void testBlockCommentAtBeginningOfFile3() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/BlockCommentAtBeginningOfFile3.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("BlockCommentAtBeginningOfFile4.kt")
        public void testBlockCommentAtBeginningOfFile4() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/BlockCommentAtBeginningOfFile4.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("ByClauses.kt")
        public void testByClauses() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/ByClauses.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("CallWithManyClosures.kt")
        public void testCallWithManyClosures() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/CallWithManyClosures.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("CallsInWhen.kt")
        public void testCallsInWhen() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/CallsInWhen.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("CommentsBinding.kt")
        public void testCommentsBinding() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/CommentsBinding.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("Constructors.kt")
        public void testConstructors() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/Constructors.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("ControlStructures.kt")
        public void testControlStructures() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/ControlStructures.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("DocCommentAfterFileAnnotations.kt")
        public void testDocCommentAfterFileAnnotations() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/DocCommentAfterFileAnnotations.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("DocCommentForFirstDeclaration.kt")
        public void testDocCommentForFirstDeclaration() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/DocCommentForFirstDeclaration.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("DocCommentOnPackageDirectiveLine.kt")
        public void testDocCommentOnPackageDirectiveLine() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/DocCommentOnPackageDirectiveLine.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("DocCommentsBinding.kt")
        public void testDocCommentsBinding() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/DocCommentsBinding.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("DoubleColon.kt")
        public void testDoubleColon() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/DoubleColon.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("DynamicReceiver.kt")
        public void testDynamicReceiver() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/DynamicReceiver.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("DynamicSoftKeyword.kt")
        public void testDynamicSoftKeyword() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/DynamicSoftKeyword.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("DynamicTypes.kt")
        public void testDynamicTypes() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/DynamicTypes.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("EOLsInComments.kt")
        public void testEOLsInComments() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/EOLsInComments.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("EOLsOnRollback.kt")
        public void testEOLsOnRollback() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/EOLsOnRollback.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("EmptyFile.kt")
        public void testEmptyFile() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/EmptyFile.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("Enums.kt")
        public void testEnums() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/Enums.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("Expressions_ERR.kt")
        public void testExpressions_ERR() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/Expressions_ERR.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("ExtensionsWithQNReceiver.kt")
        public void testExtensionsWithQNReceiver() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/ExtensionsWithQNReceiver.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("FileStart_ERR.kt")
        public void testFileStart_ERR() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/FileStart_ERR.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("FloatingPointLiteral.kt")
        public void testFloatingPointLiteral() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/FloatingPointLiteral.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("ForWithMultiDecl.kt")
        public void testForWithMultiDecl() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/ForWithMultiDecl.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("FunctionCalls.kt")
        public void testFunctionCalls() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/FunctionCalls.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("FunctionLiterals.kt")
        public void testFunctionLiterals() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/FunctionLiterals.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("FunctionLiterals_ERR.kt")
        public void testFunctionLiterals_ERR() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/FunctionLiterals_ERR.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("FunctionNoParameterList.kt")
        public void testFunctionNoParameterList() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/FunctionNoParameterList.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("FunctionTypes.kt")
        public void testFunctionTypes() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/FunctionTypes.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("FunctionTypes_ERR.kt")
        public void testFunctionTypes_ERR() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/FunctionTypes_ERR.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("Functions.kt")
        public void testFunctions() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/Functions.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("Functions_ERR.kt")
        public void testFunctions_ERR() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/Functions_ERR.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("HangOnLonelyModifier.kt")
        public void testHangOnLonelyModifier() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/HangOnLonelyModifier.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("IfWithPropery.kt")
        public void testIfWithPropery() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/IfWithPropery.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("ImportSoftKW.kt")
        public void testImportSoftKW() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/ImportSoftKW.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("Imports.kt")
        public void testImports() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/Imports.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("Imports_ERR.kt")
        public void testImports_ERR() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/Imports_ERR.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("Inner.kt")
        public void testInner() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/Inner.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("IntegerLiteral.kt")
        public void testIntegerLiteral() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/IntegerLiteral.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("Labels.kt")
        public void testLabels() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/Labels.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("LineCommentAfterFileAnnotations.kt")
        public void testLineCommentAfterFileAnnotations() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/LineCommentAfterFileAnnotations.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("LineCommentForFirstDeclaration.kt")
        public void testLineCommentForFirstDeclaration() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/LineCommentForFirstDeclaration.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("LocalDeclarations.kt")
        public void testLocalDeclarations() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/LocalDeclarations.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("LongPackageName.kt")
        public void testLongPackageName() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/LongPackageName.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("ModifierAsSelector.kt")
        public void testModifierAsSelector() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/ModifierAsSelector.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("MultiVariableDeclarations.kt")
        public void testMultiVariableDeclarations() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/MultiVariableDeclarations.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("NestedComments.kt")
        public void testNestedComments() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/NestedComments.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("NewLinesValidOperations.kt")
        public void testNewLinesValidOperations() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/NewLinesValidOperations.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("NewlinesInParentheses.kt")
        public void testNewlinesInParentheses() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/NewlinesInParentheses.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("NotIsAndNotIn.kt")
        public void testNotIsAndNotIn() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/NotIsAndNotIn.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("ObjectLiteralAsStatement.kt")
        public void testObjectLiteralAsStatement() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/ObjectLiteralAsStatement.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("PackageBlockFirst.kt")
        public void testPackageBlockFirst() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/PackageBlockFirst.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("PackageModifiers.kt")
        public void testPackageModifiers() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/PackageModifiers.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("ParameterNameMising.kt")
        public void testParameterNameMising() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/ParameterNameMising.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("Precedence.kt")
        public void testPrecedence() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/Precedence.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("PrimaryConstructorModifiers_ERR.kt")
        public void testPrimaryConstructorModifiers_ERR() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/PrimaryConstructorModifiers_ERR.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("Properties.kt")
        public void testProperties() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/Properties.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("PropertiesFollowedByInitializers.kt")
        public void testPropertiesFollowedByInitializers() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/PropertiesFollowedByInitializers.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("Properties_ERR.kt")
        public void testProperties_ERR() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/Properties_ERR.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("QuotedIdentifiers.kt")
        public void testQuotedIdentifiers() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/QuotedIdentifiers.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("RootPackage.kt")
        public void testRootPackage() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/RootPackage.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("SemicolonAfterIf.kt")
        public void testSemicolonAfterIf() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/SemicolonAfterIf.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("SimpleClassMembers.kt")
        public void testSimpleClassMembers() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/SimpleClassMembers.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("SimpleClassMembers_ERR.kt")
        public void testSimpleClassMembers_ERR() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/SimpleClassMembers_ERR.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("SimpleExpressions.kt")
        public void testSimpleExpressions() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/SimpleExpressions.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("SimpleModifiers.kt")
        public void testSimpleModifiers() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/SimpleModifiers.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("SoftKeywords.kt")
        public void testSoftKeywords() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/SoftKeywords.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("SoftKeywordsInTypeArguments.kt")
        public void testSoftKeywordsInTypeArguments() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/SoftKeywordsInTypeArguments.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("StringTemplates.kt")
        public void testStringTemplates() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/StringTemplates.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("Super.kt")
        public void testSuper() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/Super.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("ThisType.kt")
        public void testThisType() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/ThisType.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("TryRecovery.kt")
        public void testTryRecovery() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/TryRecovery.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("TypeConstraints.kt")
        public void testTypeConstraints() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/TypeConstraints.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("TypeDef.kt")
        public void testTypeDef() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/TypeDef.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("TypeDef_ERR.kt")
        public void testTypeDef_ERR() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/TypeDef_ERR.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("TypeExpressionAmbiguities_ERR.kt")
        public void testTypeExpressionAmbiguities_ERR() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/TypeExpressionAmbiguities_ERR.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("TypeParametersBeforeName.kt")
        public void testTypeParametersBeforeName() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/TypeParametersBeforeName.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("When.kt")
        public void testWhen() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/When.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("When_ERR.kt")
        public void testWhen_ERR() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/When_ERR.kt");
            doParsingTest(fileName);
        }

        @TestMetadata("compiler/testData/psi/annotation")
        @TestDataPath("$PROJECT_ROOT")
        @InnerTestClasses({Annotation.OnFile.class})
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Annotation extends AbstractJetParsingTest {
            public void testAllFilesPresentInAnnotation() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/psi/annotation"), Pattern.compile("^(.*)\\.kts?$"), true);
            }

            @TestMetadata("AnnotatedExpressions.kt")
            public void testAnnotatedExpressions() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/annotation/AnnotatedExpressions.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("Annotations.kt")
            public void testAnnotations() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/annotation/Annotations.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("AnnotationsOnPatterns.kt")
            public void testAnnotationsOnPatterns() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/annotation/AnnotationsOnPatterns.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("Annotations_ERR.kt")
            public void testAnnotations_ERR() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/annotation/Annotations_ERR.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("ShortAnnotations.kt")
            public void testShortAnnotations() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/annotation/ShortAnnotations.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("TypeAnnotations.kt")
            public void testTypeAnnotations() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/annotation/TypeAnnotations.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("compiler/testData/psi/annotation/onFile")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class OnFile extends AbstractJetParsingTest {
                public void testAllFilesPresentInOnFile() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/psi/annotation/onFile"), Pattern.compile("^(.*)\\.kts?$"), true);
                }

                @TestMetadata("fileAnnotationInWrongPlace.kt")
                public void testFileAnnotationInWrongPlace() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/annotation/onFile/fileAnnotationInWrongPlace.kt");
                    doParsingTest(fileName);
                }

                @TestMetadata("manyAnnotationBlocks.kt")
                public void testManyAnnotationBlocks() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/annotation/onFile/manyAnnotationBlocks.kt");
                    doParsingTest(fileName);
                }

                @TestMetadata("manyInOneAnnotationBlock.kt")
                public void testManyInOneAnnotationBlock() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/annotation/onFile/manyInOneAnnotationBlock.kt");
                    doParsingTest(fileName);
                }

                @TestMetadata("nonFIleAnnotationBeforePackage.kt")
                public void testNonFIleAnnotationBeforePackage() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/annotation/onFile/nonFIleAnnotationBeforePackage.kt");
                    doParsingTest(fileName);
                }

                @TestMetadata("single.kt")
                public void testSingle() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/annotation/onFile/single.kt");
                    doParsingTest(fileName);
                }

                @TestMetadata("withoutFileAnnotationAndPackageDeclaration.kt")
                public void testWithoutFileAnnotationAndPackageDeclaration() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/annotation/onFile/withoutFileAnnotationAndPackageDeclaration.kt");
                    doParsingTest(fileName);
                }

                @TestMetadata("withoutPackage.kt")
                public void testWithoutPackage() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/annotation/onFile/withoutPackage.kt");
                    doParsingTest(fileName);
                }

                @TestMetadata("withoutPackageWithSimpleAnnotation.kt")
                public void testWithoutPackageWithSimpleAnnotation() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/annotation/onFile/withoutPackageWithSimpleAnnotation.kt");
                    doParsingTest(fileName);
                }
            }
        }

        @TestMetadata("compiler/testData/psi/examples")
        @TestDataPath("$PROJECT_ROOT")
        @InnerTestClasses({Examples.Array.class, Examples.Collections.class, Examples.Io.class, Examples.Map.class, Examples.Priorityqueues.class, Examples.Util.class})
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Examples extends AbstractJetParsingTest {
            public void testAllFilesPresentInExamples() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/psi/examples"), Pattern.compile("^(.*)\\.kts?$"), true);
            }

            @TestMetadata("AnonymousObjects.kt")
            public void testAnonymousObjects() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/examples/AnonymousObjects.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("BinaryTree.kt")
            public void testBinaryTree() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/examples/BinaryTree.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("BitArith.kt")
            public void testBitArith() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/examples/BitArith.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("Builder.kt")
            public void testBuilder() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/examples/Builder.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("Color.kt")
            public void testColor() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/examples/Color.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("FunctionsAndTypes.kt")
            public void testFunctionsAndTypes() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/examples/FunctionsAndTypes.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("Graph.kt")
            public void testGraph() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/examples/Graph.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("IPushPop.kt")
            public void testIPushPop() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/examples/IPushPop.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("LINQ.kt")
            public void testLINQ() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/examples/LINQ.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("PolymorphicClassObjects.kt")
            public void testPolymorphicClassObjects() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/examples/PolymorphicClassObjects.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("Queue.kt")
            public void testQueue() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/examples/Queue.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("Stack.kt")
            public void testStack() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/examples/Stack.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("UnionFind.kt")
            public void testUnionFind() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/examples/UnionFind.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("UpdateOperation.kt")
            public void testUpdateOperation() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/examples/UpdateOperation.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("With.kt")
            public void testWith() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/examples/With.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("compiler/testData/psi/examples/array")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Array extends AbstractJetParsingTest {
                public void testAllFilesPresentInArray() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/psi/examples/array"), Pattern.compile("^(.*)\\.kts?$"), true);
                }

                @TestMetadata("MutableArray.kt")
                public void testMutableArray() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/examples/array/MutableArray.kt");
                    doParsingTest(fileName);
                }
            }

            @TestMetadata("compiler/testData/psi/examples/collections")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Collections extends AbstractJetParsingTest {
                public void testAllFilesPresentInCollections() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/psi/examples/collections"), Pattern.compile("^(.*)\\.kts?$"), true);
                }

                @TestMetadata("ArrayList.kt")
                public void testArrayList() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/examples/collections/ArrayList.kt");
                    doParsingTest(fileName);
                }

                @TestMetadata("HashMap.kt")
                public void testHashMap() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/examples/collections/HashMap.kt");
                    doParsingTest(fileName);
                }

                @TestMetadata("IIterable.kt")
                public void testIIterable() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/examples/collections/IIterable.kt");
                    doParsingTest(fileName);
                }

                @TestMetadata("IIterator.kt")
                public void testIIterator() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/examples/collections/IIterator.kt");
                    doParsingTest(fileName);
                }

                @TestMetadata("IList.kt")
                public void testIList() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/examples/collections/IList.kt");
                    doParsingTest(fileName);
                }

                @TestMetadata("IMutableIterable.kt")
                public void testIMutableIterable() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/examples/collections/IMutableIterable.kt");
                    doParsingTest(fileName);
                }

                @TestMetadata("IMutableIterator.kt")
                public void testIMutableIterator() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/examples/collections/IMutableIterator.kt");
                    doParsingTest(fileName);
                }

                @TestMetadata("IMutableList.kt")
                public void testIMutableList() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/examples/collections/IMutableList.kt");
                    doParsingTest(fileName);
                }

                @TestMetadata("IMutableSet.kt")
                public void testIMutableSet() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/examples/collections/IMutableSet.kt");
                    doParsingTest(fileName);
                }

                @TestMetadata("ISet.kt")
                public void testISet() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/examples/collections/ISet.kt");
                    doParsingTest(fileName);
                }

                @TestMetadata("ISized.kt")
                public void testISized() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/examples/collections/ISized.kt");
                    doParsingTest(fileName);
                }

                @TestMetadata("LinkedList.kt")
                public void testLinkedList() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/examples/collections/LinkedList.kt");
                    doParsingTest(fileName);
                }
            }

            @TestMetadata("compiler/testData/psi/examples/io")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Io extends AbstractJetParsingTest {
                public void testAllFilesPresentInIo() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/psi/examples/io"), Pattern.compile("^(.*)\\.kts?$"), true);
                }

                @TestMetadata("IOSamples.kt")
                public void testIOSamples() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/examples/io/IOSamples.kt");
                    doParsingTest(fileName);
                }
            }

            @TestMetadata("compiler/testData/psi/examples/map")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Map extends AbstractJetParsingTest {
                public void testAllFilesPresentInMap() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/psi/examples/map"), Pattern.compile("^(.*)\\.kts?$"), true);
                }

                @TestMetadata("IMap.kt")
                public void testIMap() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/examples/map/IMap.kt");
                    doParsingTest(fileName);
                }
            }

            @TestMetadata("compiler/testData/psi/examples/priorityqueues")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Priorityqueues extends AbstractJetParsingTest {
                public void testAllFilesPresentInPriorityqueues() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/psi/examples/priorityqueues"), Pattern.compile("^(.*)\\.kts?$"), true);
                }

                @TestMetadata("BinaryHeap.kt")
                public void testBinaryHeap() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/examples/priorityqueues/BinaryHeap.kt");
                    doParsingTest(fileName);
                }

                @TestMetadata("IPriorityQueue.kt")
                public void testIPriorityQueue() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/examples/priorityqueues/IPriorityQueue.kt");
                    doParsingTest(fileName);
                }

                @TestMetadata("PriorityQueueAsPushPop.kt")
                public void testPriorityQueueAsPushPop() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/examples/priorityqueues/PriorityQueueAsPushPop.kt");
                    doParsingTest(fileName);
                }
            }

            @TestMetadata("compiler/testData/psi/examples/util")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Util extends AbstractJetParsingTest {
                public void testAllFilesPresentInUtil() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/psi/examples/util"), Pattern.compile("^(.*)\\.kts?$"), true);
                }

                @TestMetadata("Comparison.kt")
                public void testComparison() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/examples/util/Comparison.kt");
                    doParsingTest(fileName);
                }

                @TestMetadata("IComparable.kt")
                public void testIComparable() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/examples/util/IComparable.kt");
                    doParsingTest(fileName);
                }
            }
        }

        @TestMetadata("compiler/testData/psi/functionReceivers")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class FunctionReceivers extends AbstractJetParsingTest {
            public void testAllFilesPresentInFunctionReceivers() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/psi/functionReceivers"), Pattern.compile("^(.*)\\.kts?$"), true);
            }

            @TestMetadata("FunctionTypesWithFunctionReceivers.kt")
            public void testFunctionTypesWithFunctionReceivers() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/functionReceivers/FunctionTypesWithFunctionReceivers.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("FunctionsWithFunctionReceivers.kt")
            public void testFunctionsWithFunctionReceivers() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/functionReceivers/FunctionsWithFunctionReceivers.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("FunctionsWithFunctionReceiversAnnotations.kt")
            public void testFunctionsWithFunctionReceiversAnnotations() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/functionReceivers/FunctionsWithFunctionReceiversAnnotations.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("FunctionsWithFunctionReceiversRecovery.kt")
            public void testFunctionsWithFunctionReceiversRecovery() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/functionReceivers/FunctionsWithFunctionReceiversRecovery.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("PropertiesWithFunctionReceivers.kt")
            public void testPropertiesWithFunctionReceivers() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/functionReceivers/PropertiesWithFunctionReceivers.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("PropertiesWithFunctionReceiversAnnotations.kt")
            public void testPropertiesWithFunctionReceiversAnnotations() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/functionReceivers/PropertiesWithFunctionReceiversAnnotations.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("PropertiesWithFunctionReceiversRecovery.kt")
            public void testPropertiesWithFunctionReceiversRecovery() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/functionReceivers/PropertiesWithFunctionReceiversRecovery.kt");
                doParsingTest(fileName);
            }
        }

        @TestMetadata("compiler/testData/psi/greatSyntacticShift")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class GreatSyntacticShift extends AbstractJetParsingTest {
            public void testAllFilesPresentInGreatSyntacticShift() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/psi/greatSyntacticShift"), Pattern.compile("^(.*)\\.kts?$"), true);
            }

            @TestMetadata("functionLiterals.kt")
            public void testFunctionLiterals() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/greatSyntacticShift/functionLiterals.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("functionTypes.kt")
            public void testFunctionTypes() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/greatSyntacticShift/functionTypes.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("FunctionTypesAsArguments.kt")
            public void testFunctionTypesAsArguments() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/greatSyntacticShift/FunctionTypesAsArguments.kt");
                doParsingTest(fileName);
            }
        }

        @TestMetadata("compiler/testData/psi/kdoc")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Kdoc extends AbstractJetParsingTest {
            public void testAllFilesPresentInKdoc() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/psi/kdoc"), Pattern.compile("^(.*)\\.kts?$"), true);
            }

            @TestMetadata("AtTags.kt")
            public void testAtTags() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/kdoc/AtTags.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("DocCommentAtBeginningOfFile1.kt")
            public void testDocCommentAtBeginningOfFile1() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/kdoc/DocCommentAtBeginningOfFile1.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("DocCommentAtBeginningOfFile2.kt")
            public void testDocCommentAtBeginningOfFile2() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/kdoc/DocCommentAtBeginningOfFile2.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("DocCommentAtBeginningOfFile3.kt")
            public void testDocCommentAtBeginningOfFile3() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/kdoc/DocCommentAtBeginningOfFile3.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("DocCommentAtBeginningOfFile4.kt")
            public void testDocCommentAtBeginningOfFile4() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/kdoc/DocCommentAtBeginningOfFile4.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("EndOnLeadingAsterisks.kt")
            public void testEndOnLeadingAsterisks() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/kdoc/EndOnLeadingAsterisks.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("EndRightAfterText.kt")
            public void testEndRightAfterText() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/kdoc/EndRightAfterText.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("Incomplete.kt")
            public void testIncomplete() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/kdoc/Incomplete.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("Markdown.kt")
            public void testMarkdown() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/kdoc/Markdown.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("MarkdownQualifiedName.kt")
            public void testMarkdownQualifiedName() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/kdoc/MarkdownQualifiedName.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("ParamTag.kt")
            public void testParamTag() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/kdoc/ParamTag.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("ParamTagAtStart.kt")
            public void testParamTagAtStart() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/kdoc/ParamTagAtStart.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("ReturnWithBrackets.kt")
            public void testReturnWithBrackets() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/kdoc/ReturnWithBrackets.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("Sections.kt")
            public void testSections() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/kdoc/Sections.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("Simple.kt")
            public void testSimple() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/kdoc/Simple.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("TextRightAfterLeadAsterisks.kt")
            public void testTextRightAfterLeadAsterisks() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/kdoc/TextRightAfterLeadAsterisks.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("TwoTags.kt")
            public void testTwoTags() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/kdoc/TwoTags.kt");
                doParsingTest(fileName);
            }
        }

        @TestMetadata("compiler/testData/psi/platformTypesRecovery")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class PlatformTypesRecovery extends AbstractJetParsingTest {
            public void testAllFilesPresentInPlatformTypesRecovery() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/psi/platformTypesRecovery"), Pattern.compile("^(.*)\\.kts?$"), true);
            }

            @TestMetadata("Array.kt")
            public void testArray() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/platformTypesRecovery/Array.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("BeforeDot.kt")
            public void testBeforeDot() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/platformTypesRecovery/BeforeDot.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("Collections.kt")
            public void testCollections() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/platformTypesRecovery/Collections.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("FunctionsNotPlatform.kt")
            public void testFunctionsNotPlatform() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/platformTypesRecovery/FunctionsNotPlatform.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("MapEntry.kt")
            public void testMapEntry() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/platformTypesRecovery/MapEntry.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("ParenthesizedNotPlatform.kt")
            public void testParenthesizedNotPlatform() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/platformTypesRecovery/ParenthesizedNotPlatform.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("Qualified.kt")
            public void testQualified() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/platformTypesRecovery/Qualified.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("QualifiedCollections.kt")
            public void testQualifiedCollections() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/platformTypesRecovery/QualifiedCollections.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("Simple.kt")
            public void testSimple() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/platformTypesRecovery/Simple.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("WrongWordInParentheses.kt")
            public void testWrongWordInParentheses() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/platformTypesRecovery/WrongWordInParentheses.kt");
                doParsingTest(fileName);
            }
        }

        @TestMetadata("compiler/testData/psi/propertyDelegate")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class PropertyDelegate extends AbstractJetParsingTest {
            public void testAllFilesPresentInPropertyDelegate() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/psi/propertyDelegate"), Pattern.compile("^(.*)\\.kts?$"), true);
            }

            @TestMetadata("BracketsInDelegate.kt")
            public void testBracketsInDelegate() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/propertyDelegate/BracketsInDelegate.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("DelegateAndInitializer.kt")
            public void testDelegateAndInitializer() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/propertyDelegate/DelegateAndInitializer.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("GetterInSameLine.kt")
            public void testGetterInSameLine() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/propertyDelegate/GetterInSameLine.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("LocalProperty.kt")
            public void testLocalProperty() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/propertyDelegate/LocalProperty.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("OnlyBy.kt")
            public void testOnlyBy() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/propertyDelegate/OnlyBy.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("PropertyInClass.kt")
            public void testPropertyInClass() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/propertyDelegate/PropertyInClass.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("PropertyWithGetter.kt")
            public void testPropertyWithGetter() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/propertyDelegate/PropertyWithGetter.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("PropertyWithInitializer.kt")
            public void testPropertyWithInitializer() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/propertyDelegate/PropertyWithInitializer.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("PropertyWithoutTypeRef.kt")
            public void testPropertyWithoutTypeRef() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/propertyDelegate/PropertyWithoutTypeRef.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("TopLevelProperty.kt")
            public void testTopLevelProperty() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/propertyDelegate/TopLevelProperty.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("TwoProperties.kt")
            public void testTwoProperties() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/propertyDelegate/TwoProperties.kt");
                doParsingTest(fileName);
            }
        }

        @TestMetadata("compiler/testData/psi/recovery")
        @TestDataPath("$PROJECT_ROOT")
        @InnerTestClasses({Recovery.Objects.class})
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Recovery extends AbstractJetParsingTest {
            @TestMetadata("AbsentLeftHandSide.kt")
            public void testAbsentLeftHandSide() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/recovery/AbsentLeftHandSide.kt");
                doParsingTest(fileName);
            }

            public void testAllFilesPresentInRecovery() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/psi/recovery"), Pattern.compile("^(.*)\\.kts?$"), true);
            }

            @TestMetadata("DoWhileWithEmptyCondition.kt")
            public void testDoWhileWithEmptyCondition() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/recovery/DoWhileWithEmptyCondition.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("DoWhileWithoutLPar.kt")
            public void testDoWhileWithoutLPar() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/recovery/DoWhileWithoutLPar.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("EnumEntryInitList.kt")
            public void testEnumEntryInitList() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/recovery/EnumEntryInitList.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("ForEmptyParentheses.kt")
            public void testForEmptyParentheses() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/recovery/ForEmptyParentheses.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("ForEmptyWithoutBody.kt")
            public void testForEmptyWithoutBody() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/recovery/ForEmptyWithoutBody.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("ForNoBodyBeforeRBrace.kt")
            public void testForNoBodyBeforeRBrace() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/recovery/ForNoBodyBeforeRBrace.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("ForRecovery.kt")
            public void testForRecovery() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/recovery/ForRecovery.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("ForWithOnlyOneLParInEOF.kt")
            public void testForWithOnlyOneLParInEOF() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/recovery/ForWithOnlyOneLParInEOF.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("ForWithoutBodyInEOF.kt")
            public void testForWithoutBodyInEOF() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/recovery/ForWithoutBodyInEOF.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("ForWithoutLPar.kt")
            public void testForWithoutLPar() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/recovery/ForWithoutLPar.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("ForWithoutLParInEOF.kt")
            public void testForWithoutLParInEOF() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/recovery/ForWithoutLParInEOF.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("ForWithoutParamButWithRange.kt")
            public void testForWithoutParamButWithRange() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/recovery/ForWithoutParamButWithRange.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("ForWithoutRange.kt")
            public void testForWithoutRange() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/recovery/ForWithoutRange.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("IfWithEmptyCondition.kt")
            public void testIfWithEmptyCondition() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/recovery/IfWithEmptyCondition.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("IfWithoutLPar.kt")
            public void testIfWithoutLPar() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/recovery/IfWithoutLPar.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("ImportRecovery.kt")
            public void testImportRecovery() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/recovery/ImportRecovery.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("InvalidCharInSingleLineLambda.kt")
            public void testInvalidCharInSingleLineLambda() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/recovery/InvalidCharInSingleLineLambda.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("kt2172.kt")
            public void testKt2172() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/recovery/kt2172.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("kt5102.kt")
            public void testKt5102() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/recovery/kt5102.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("MissingCommaInConstructorValueParameterList.kt")
            public void testMissingCommaInConstructorValueParameterList() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/recovery/MissingCommaInConstructorValueParameterList.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("MissingCommaInValueArgumentList.kt")
            public void testMissingCommaInValueArgumentList() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/recovery/MissingCommaInValueArgumentList.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("MissingCommaInValueParameterList.kt")
            public void testMissingCommaInValueParameterList() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/recovery/MissingCommaInValueParameterList.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("MissingCommaInValueParameterListWithValOrVar.kt")
            public void testMissingCommaInValueParameterListWithValOrVar() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/recovery/MissingCommaInValueParameterListWithValOrVar.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("NoArrowInWhen.kt")
            public void testNoArrowInWhen() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/recovery/NoArrowInWhen.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("PackageNewLineRecovery.kt")
            public void testPackageNewLineRecovery() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/recovery/PackageNewLineRecovery.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("PackageRecovery.kt")
            public void testPackageRecovery() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/recovery/PackageRecovery.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("SameLineStatementRecovery.kt")
            public void testSameLineStatementRecovery() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/recovery/SameLineStatementRecovery.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("ValueParameterNoTypeRecovery.kt")
            public void testValueParameterNoTypeRecovery() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/recovery/ValueParameterNoTypeRecovery.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("WhenWithoutBraces.kt")
            public void testWhenWithoutBraces() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/recovery/WhenWithoutBraces.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("WhileWithEmptyCondition.kt")
            public void testWhileWithEmptyCondition() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/recovery/WhileWithEmptyCondition.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("WhileWithoutLPar.kt")
            public void testWhileWithoutLPar() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/recovery/WhileWithoutLPar.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("WithWithoutInAndMultideclaration.kt")
            public void testWithWithoutInAndMultideclaration() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/recovery/WithWithoutInAndMultideclaration.kt");
                doParsingTest(fileName);
            }

            @TestMetadata("compiler/testData/psi/recovery/objects")
            @TestDataPath("$PROJECT_ROOT")
            @InnerTestClasses({Objects.Declarations.class, Objects.Expressions.class})
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Objects extends AbstractJetParsingTest {
                public void testAllFilesPresentInObjects() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/psi/recovery/objects"), Pattern.compile("^(.*)\\.kts?$"), true);
                }

                @TestMetadata("compiler/testData/psi/recovery/objects/declarations")
                @TestDataPath("$PROJECT_ROOT")
                @RunWith(JUnit3RunnerWithInners.class)
                public static class Declarations extends AbstractJetParsingTest {
                    public void testAllFilesPresentInDeclarations() throws Exception {
                        JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/psi/recovery/objects/declarations"), Pattern.compile("^(.*)\\.kts?$"), true);
                    }

                    @TestMetadata("ConstructorModifiers.kt")
                    public void testConstructorModifiers() throws Exception {
                        String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/recovery/objects/declarations/ConstructorModifiers.kt");
                        doParsingTest(fileName);
                    }

                    @TestMetadata("EmptyParentheses.kt")
                    public void testEmptyParentheses() throws Exception {
                        String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/recovery/objects/declarations/EmptyParentheses.kt");
                        doParsingTest(fileName);
                    }

                    @TestMetadata("Everything.kt")
                    public void testEverything() throws Exception {
                        String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/recovery/objects/declarations/Everything.kt");
                        doParsingTest(fileName);
                    }

                    @TestMetadata("FollowedByModifiers.kt")
                    public void testFollowedByModifiers() throws Exception {
                        String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/recovery/objects/declarations/FollowedByModifiers.kt");
                        doParsingTest(fileName);
                    }

                    @TestMetadata("ParametersInParentheses.kt")
                    public void testParametersInParentheses() throws Exception {
                        String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/recovery/objects/declarations/ParametersInParentheses.kt");
                        doParsingTest(fileName);
                    }

                    @TestMetadata("TypeParametersAndParentheses.kt")
                    public void testTypeParametersAndParentheses() throws Exception {
                        String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/recovery/objects/declarations/TypeParametersAndParentheses.kt");
                        doParsingTest(fileName);
                    }

                    @TestMetadata("TypeParameterss.kt")
                    public void testTypeParameterss() throws Exception {
                        String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/recovery/objects/declarations/TypeParameterss.kt");
                        doParsingTest(fileName);
                    }

                    @TestMetadata("Where.kt")
                    public void testWhere() throws Exception {
                        String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/recovery/objects/declarations/Where.kt");
                        doParsingTest(fileName);
                    }
                }

                @TestMetadata("compiler/testData/psi/recovery/objects/expressions")
                @TestDataPath("$PROJECT_ROOT")
                @RunWith(JUnit3RunnerWithInners.class)
                public static class Expressions extends AbstractJetParsingTest {
                    public void testAllFilesPresentInExpressions() throws Exception {
                        JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/psi/recovery/objects/expressions"), Pattern.compile("^(.*)\\.kts?$"), true);
                    }

                    @TestMetadata("ConstructorModifiers.kt")
                    public void testConstructorModifiers() throws Exception {
                        String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/recovery/objects/expressions/ConstructorModifiers.kt");
                        doParsingTest(fileName);
                    }

                    @TestMetadata("ConstructorModifiersAndName.kt")
                    public void testConstructorModifiersAndName() throws Exception {
                        String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/recovery/objects/expressions/ConstructorModifiersAndName.kt");
                        doParsingTest(fileName);
                    }

                    @TestMetadata("EmptyParentheses.kt")
                    public void testEmptyParentheses() throws Exception {
                        String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/recovery/objects/expressions/EmptyParentheses.kt");
                        doParsingTest(fileName);
                    }

                    @TestMetadata("Everything.kt")
                    public void testEverything() throws Exception {
                        String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/recovery/objects/expressions/Everything.kt");
                        doParsingTest(fileName);
                    }

                    @TestMetadata("InFunction.kt")
                    public void testInFunction() throws Exception {
                        String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/recovery/objects/expressions/InFunction.kt");
                        doParsingTest(fileName);
                    }

                    @TestMetadata("ParametersInParentheses.kt")
                    public void testParametersInParentheses() throws Exception {
                        String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/recovery/objects/expressions/ParametersInParentheses.kt");
                        doParsingTest(fileName);
                    }

                    @TestMetadata("TypeParametersAndParentheses.kt")
                    public void testTypeParametersAndParentheses() throws Exception {
                        String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/recovery/objects/expressions/TypeParametersAndParentheses.kt");
                        doParsingTest(fileName);
                    }

                    @TestMetadata("TypeParameterss.kt")
                    public void testTypeParameterss() throws Exception {
                        String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/recovery/objects/expressions/TypeParameterss.kt");
                        doParsingTest(fileName);
                    }

                    @TestMetadata("Where.kt")
                    public void testWhere() throws Exception {
                        String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/recovery/objects/expressions/Where.kt");
                        doParsingTest(fileName);
                    }
                }
            }
        }

        @TestMetadata("compiler/testData/psi/script")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Script extends AbstractJetParsingTest {
            public void testAllFilesPresentInScript() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/psi/script"), Pattern.compile("^(.*)\\.kts?$"), true);
            }

            @TestMetadata("ComplexScript.kts")
            public void testComplexScript() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/script/ComplexScript.kts");
                doParsingTest(fileName);
            }

            @TestMetadata("Import.kts")
            public void testImport() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/script/Import.kts");
                doParsingTest(fileName);
            }

            @TestMetadata("manyAnnotationsOnFile.kts")
            public void testManyAnnotationsOnFile() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/script/manyAnnotationsOnFile.kts");
                doParsingTest(fileName);
            }

            @TestMetadata("Shebang.kts")
            public void testShebang() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/script/Shebang.kts");
                doParsingTest(fileName);
            }

            @TestMetadata("ShebangIncorrect.kts")
            public void testShebangIncorrect() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/script/ShebangIncorrect.kts");
                doParsingTest(fileName);
            }

            @TestMetadata("SimpleScript.kts")
            public void testSimpleScript() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/script/SimpleScript.kts");
                doParsingTest(fileName);
            }

            @TestMetadata("unexpectedSymbol.kts")
            public void testUnexpectedSymbol() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/script/unexpectedSymbol.kts");
                doParsingTest(fileName);
            }
        }

        @TestMetadata("compiler/testData/psi/stringTemplates")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class StringTemplates extends AbstractJetParsingTest {
            public void testAllFilesPresentInStringTemplates() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/psi/stringTemplates"), Pattern.compile("^(.*)\\.kts?$"), true);
            }

            @TestMetadata("RawStringsWithManyQuotes.kt")
            public void testRawStringsWithManyQuotes() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/psi/stringTemplates/RawStringsWithManyQuotes.kt");
                doParsingTest(fileName);
            }
        }
    }

    @TestMetadata("compiler/testData/parseCodeFragment/expression")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Expression extends AbstractJetParsingTest {
        public void testAllFilesPresentInExpression() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/parseCodeFragment/expression"), Pattern.compile("^(.+)\\.kt$"), true);
        }

        @TestMetadata("error.kt")
        public void testError() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/parseCodeFragment/expression/error.kt");
            doExpressionCodeFragmentParsingTest(fileName);
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/parseCodeFragment/expression/simple.kt");
            doExpressionCodeFragmentParsingTest(fileName);
        }
    }

    @TestMetadata("compiler/testData/parseCodeFragment/block")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Block extends AbstractJetParsingTest {
        public void testAllFilesPresentInBlock() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/parseCodeFragment/block"), Pattern.compile("^(.+)\\.kt$"), true);
        }

        @TestMetadata("expressionOnTopLevel.kt")
        public void testExpressionOnTopLevel() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/parseCodeFragment/block/expressionOnTopLevel.kt");
            doBlockCodeFragmentParsingTest(fileName);
        }

        @TestMetadata("imports.kt")
        public void testImports() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/parseCodeFragment/block/imports.kt");
            doBlockCodeFragmentParsingTest(fileName);
        }

        @TestMetadata("localFun.kt")
        public void testLocalFun() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/parseCodeFragment/block/localFun.kt");
            doBlockCodeFragmentParsingTest(fileName);
        }

        @TestMetadata("oneLine.kt")
        public void testOneLine() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/parseCodeFragment/block/oneLine.kt");
            doBlockCodeFragmentParsingTest(fileName);
        }

        @TestMetadata("oneStatement.kt")
        public void testOneStatement() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/parseCodeFragment/block/oneStatement.kt");
            doBlockCodeFragmentParsingTest(fileName);
        }

        @TestMetadata("packageAndImport.kt")
        public void testPackageAndImport() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/parseCodeFragment/block/packageAndImport.kt");
            doBlockCodeFragmentParsingTest(fileName);
        }

        @TestMetadata("packageDirective.kt")
        public void testPackageDirective() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/parseCodeFragment/block/packageDirective.kt");
            doBlockCodeFragmentParsingTest(fileName);
        }

        @TestMetadata("severalExpressions.kt")
        public void testSeveralExpressions() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/parseCodeFragment/block/severalExpressions.kt");
            doBlockCodeFragmentParsingTest(fileName);
        }

        @TestMetadata("severalStatements.kt")
        public void testSeveralStatements() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/parseCodeFragment/block/severalStatements.kt");
            doBlockCodeFragmentParsingTest(fileName);
        }

        @TestMetadata("unexpectedSymbol.kt")
        public void testUnexpectedSymbol() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/parseCodeFragment/block/unexpectedSymbol.kt");
            doBlockCodeFragmentParsingTest(fileName);
        }
    }
}
