package test

public trait SubclassOfCollection</*0*/ E> : jet.MutableCollection<E> {
    public abstract override /*1*/ /*fake_override*/ fun add(/*0*/ e: E): jet.Boolean
    public abstract override /*1*/ /*fake_override*/ fun addAll(/*0*/ c: jet.Collection<E>): jet.Boolean
    public abstract override /*1*/ /*fake_override*/ fun clear(): jet.Unit
    public abstract override /*1*/ /*fake_override*/ fun contains(/*0*/ o: jet.Any?): jet.Boolean
    public abstract override /*1*/ /*fake_override*/ fun containsAll(/*0*/ c: jet.Collection<jet.Any?>): jet.Boolean
    public abstract override /*1*/ /*fake_override*/ fun isEmpty(): jet.Boolean
    public abstract override /*1*/ fun iterator(): jet.MutableIterator<E>
    public abstract override /*1*/ /*fake_override*/ fun remove(/*0*/ o: jet.Any?): jet.Boolean
    public abstract override /*1*/ /*fake_override*/ fun removeAll(/*0*/ c: jet.Collection<jet.Any?>): jet.Boolean
    public abstract override /*1*/ /*fake_override*/ fun retainAll(/*0*/ c: jet.Collection<jet.Any?>): jet.Boolean
    public abstract override /*1*/ /*fake_override*/ fun size(): jet.Int
    public abstract override /*1*/ /*fake_override*/ fun toArray(): jet.Array<jet.Any?>
    public abstract override /*1*/ /*fake_override*/ fun </*0*/ T> toArray(/*0*/ a: jet.Array<out T>): jet.Array<T>
}
