//
// Source
// ------------------------------------------

import androidx.compose.runtime.Composable
import androidx.compose.runtime.NonRestartableComposable
import androidx.compose.runtime.ReadOnlyComposable


val foo = @Composable { x: Int, y: Foo ->
    A(x)
    B(y)
}

//
// Transformed IR
// ------------------------------------------

val foo: Function4<Int, Foo, Composer, Int, Unit> = ComposableSingletons%TestKt.lambda-1
internal object ComposableSingletons%TestKt {
  val lambda-1: Function4<Int, Foo, Composer, Int, Unit> = composableLambdaInstance(<>, false) { x: Int, y: Foo, %composer: Composer?, %changed: Int ->
    sourceInformation(%composer, "C<A(x)>,<B(y)>:Test.kt")
    val %dirty = %changed
    if (%changed and 0b0110 == 0) {
      %dirty = %dirty or if (%composer.changed(x)) 0b0100 else 0b0010
    }
    if (%changed and 0b00110000 == 0) {
      %dirty = %dirty or if (%composer.changed(y)) 0b00100000 else 0b00010000
    }
    if (%dirty and 0b10010011 != 0b10010010 || !%composer.skipping) {
      if (isTraceInProgress()) {
        traceEventStart(<>, %dirty, -1, <>)
      }
      A(x, %composer, 0b1110 and %dirty)
      B(y, %composer, 0b1110 and %dirty shr 0b0011)
      if (isTraceInProgress()) {
        traceEventEnd()
      }
    } else {
      %composer.skipToGroupEnd()
    }
  }
}
