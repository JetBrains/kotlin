// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: compiler/ir/serialization.common/src/KotlinIr.proto
// Protobuf Java Version: 4.29.3

package org.jetbrains.kotlin.backend.common.serialization.proto;

/**
 * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.MemberAccessCommon}
 */
public  final class MemberAccessCommon extends
    org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
        MemberAccessCommon, MemberAccessCommon.Builder> implements
    // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.common.serialization.proto.MemberAccessCommon)
    MemberAccessCommonOrBuilder {
  private MemberAccessCommon() {
    argument_ = emptyProtobufList();
    regularArgument_ = emptyProtobufList();
    typeArgument_ = emptyIntList();
  }
  private int bitField0_;
  public static final int ARGUMENT_FIELD_NUMBER = 6;
  private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression> argument_;
  /**
   * <pre>
   * Value argument serialization scheme after 2.2.0
   * </pre>
   *
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression argument = 6;</code>
   */
  @java.lang.Override
  public java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression> getArgumentList() {
    return argument_;
  }
  /**
   * <pre>
   * Value argument serialization scheme after 2.2.0
   * </pre>
   *
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression argument = 6;</code>
   */
  public java.util.List<? extends org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpressionOrBuilder> 
      getArgumentOrBuilderList() {
    return argument_;
  }
  /**
   * <pre>
   * Value argument serialization scheme after 2.2.0
   * </pre>
   *
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression argument = 6;</code>
   */
  @java.lang.Override
  public int getArgumentCount() {
    return argument_.size();
  }
  /**
   * <pre>
   * Value argument serialization scheme after 2.2.0
   * </pre>
   *
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression argument = 6;</code>
   */
  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression getArgument(int index) {
    return argument_.get(index);
  }
  /**
   * <pre>
   * Value argument serialization scheme after 2.2.0
   * </pre>
   *
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression argument = 6;</code>
   */
  public org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpressionOrBuilder getArgumentOrBuilder(
      int index) {
    return argument_.get(index);
  }
  private void ensureArgumentIsMutable() {
    org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression> tmp = argument_;
    if (!tmp.isModifiable()) {
      argument_ =
          org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
     }
  }

  /**
   * <pre>
   * Value argument serialization scheme after 2.2.0
   * </pre>
   *
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression argument = 6;</code>
   */
  @java.lang.SuppressWarnings("ReturnValueIgnored")
  private void setArgument(
      int index, org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression value) {
    value.getClass();  // minimal bytecode null check
    ensureArgumentIsMutable();
    argument_.set(index, value);
  }
  /**
   * <pre>
   * Value argument serialization scheme after 2.2.0
   * </pre>
   *
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression argument = 6;</code>
   */
  @java.lang.SuppressWarnings("ReturnValueIgnored")
  private void addArgument(org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression value) {
    value.getClass();  // minimal bytecode null check
    ensureArgumentIsMutable();
    argument_.add(value);
  }
  /**
   * <pre>
   * Value argument serialization scheme after 2.2.0
   * </pre>
   *
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression argument = 6;</code>
   */
  @java.lang.SuppressWarnings("ReturnValueIgnored")
  private void addArgument(
      int index, org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression value) {
    value.getClass();  // minimal bytecode null check
    ensureArgumentIsMutable();
    argument_.add(index, value);
  }
  /**
   * <pre>
   * Value argument serialization scheme after 2.2.0
   * </pre>
   *
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression argument = 6;</code>
   */
  private void addAllArgument(
      java.lang.Iterable<? extends org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression> values) {
    ensureArgumentIsMutable();
    org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
        values, argument_);
  }
  /**
   * <pre>
   * Value argument serialization scheme after 2.2.0
   * </pre>
   *
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression argument = 6;</code>
   */
  private void clearArgument() {
    argument_ = emptyProtobufList();
  }
  /**
   * <pre>
   * Value argument serialization scheme after 2.2.0
   * </pre>
   *
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression argument = 6;</code>
   */
  private void removeArgument(int index) {
    ensureArgumentIsMutable();
    argument_.remove(index);
  }

  public static final int DISPATCH_RECEIVER_FIELD_NUMBER = 1;
  private org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression dispatchReceiver_;
  /**
   * <pre>
   * Value argument serialization scheme before 2.2.0
   * </pre>
   *
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression dispatch_receiver = 1;</code>
   */
  @java.lang.Override
  public boolean hasDispatchReceiver() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * Value argument serialization scheme before 2.2.0
   * </pre>
   *
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression dispatch_receiver = 1;</code>
   */
  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression getDispatchReceiver() {
    return dispatchReceiver_ == null ? org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.getDefaultInstance() : dispatchReceiver_;
  }
  /**
   * <pre>
   * Value argument serialization scheme before 2.2.0
   * </pre>
   *
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression dispatch_receiver = 1;</code>
   */
  @java.lang.SuppressWarnings("ReturnValueIgnored")
  private void setDispatchReceiver(org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression value) {
    value.getClass();  // minimal bytecode null check
    dispatchReceiver_ = value;
    bitField0_ |= 0x00000001;
    }
  /**
   * <pre>
   * Value argument serialization scheme before 2.2.0
   * </pre>
   *
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression dispatch_receiver = 1;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
  private void mergeDispatchReceiver(org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression value) {
    value.getClass();  // minimal bytecode null check
    if (dispatchReceiver_ != null &&
        dispatchReceiver_ != org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.getDefaultInstance()) {
      dispatchReceiver_ =
        org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.newBuilder(dispatchReceiver_).mergeFrom(value).buildPartial();
    } else {
      dispatchReceiver_ = value;
    }
    bitField0_ |= 0x00000001;
  }
  /**
   * <pre>
   * Value argument serialization scheme before 2.2.0
   * </pre>
   *
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression dispatch_receiver = 1;</code>
   */
  private void clearDispatchReceiver() {  dispatchReceiver_ = null;
    bitField0_ = (bitField0_ & ~0x00000001);
  }

  public static final int EXTENSION_RECEIVER_FIELD_NUMBER = 2;
  private org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression extensionReceiver_;
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression extension_receiver = 2;</code>
   */
  @java.lang.Override
  public boolean hasExtensionReceiver() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression extension_receiver = 2;</code>
   */
  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression getExtensionReceiver() {
    return extensionReceiver_ == null ? org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.getDefaultInstance() : extensionReceiver_;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression extension_receiver = 2;</code>
   */
  @java.lang.SuppressWarnings("ReturnValueIgnored")
  private void setExtensionReceiver(org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression value) {
    value.getClass();  // minimal bytecode null check
    extensionReceiver_ = value;
    bitField0_ |= 0x00000002;
    }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression extension_receiver = 2;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
  private void mergeExtensionReceiver(org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression value) {
    value.getClass();  // minimal bytecode null check
    if (extensionReceiver_ != null &&
        extensionReceiver_ != org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.getDefaultInstance()) {
      extensionReceiver_ =
        org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.newBuilder(extensionReceiver_).mergeFrom(value).buildPartial();
    } else {
      extensionReceiver_ = value;
    }
    bitField0_ |= 0x00000002;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression extension_receiver = 2;</code>
   */
  private void clearExtensionReceiver() {  extensionReceiver_ = null;
    bitField0_ = (bitField0_ & ~0x00000002);
  }

  public static final int REGULAR_ARGUMENT_FIELD_NUMBER = 3;
  private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression> regularArgument_;
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression regular_argument = 3;</code>
   */
  @java.lang.Override
  public java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression> getRegularArgumentList() {
    return regularArgument_;
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression regular_argument = 3;</code>
   */
  public java.util.List<? extends org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpressionOrBuilder> 
      getRegularArgumentOrBuilderList() {
    return regularArgument_;
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression regular_argument = 3;</code>
   */
  @java.lang.Override
  public int getRegularArgumentCount() {
    return regularArgument_.size();
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression regular_argument = 3;</code>
   */
  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression getRegularArgument(int index) {
    return regularArgument_.get(index);
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression regular_argument = 3;</code>
   */
  public org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpressionOrBuilder getRegularArgumentOrBuilder(
      int index) {
    return regularArgument_.get(index);
  }
  private void ensureRegularArgumentIsMutable() {
    org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression> tmp = regularArgument_;
    if (!tmp.isModifiable()) {
      regularArgument_ =
          org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
     }
  }

  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression regular_argument = 3;</code>
   */
  @java.lang.SuppressWarnings("ReturnValueIgnored")
  private void setRegularArgument(
      int index, org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression value) {
    value.getClass();  // minimal bytecode null check
    ensureRegularArgumentIsMutable();
    regularArgument_.set(index, value);
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression regular_argument = 3;</code>
   */
  @java.lang.SuppressWarnings("ReturnValueIgnored")
  private void addRegularArgument(org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression value) {
    value.getClass();  // minimal bytecode null check
    ensureRegularArgumentIsMutable();
    regularArgument_.add(value);
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression regular_argument = 3;</code>
   */
  @java.lang.SuppressWarnings("ReturnValueIgnored")
  private void addRegularArgument(
      int index, org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression value) {
    value.getClass();  // minimal bytecode null check
    ensureRegularArgumentIsMutable();
    regularArgument_.add(index, value);
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression regular_argument = 3;</code>
   */
  private void addAllRegularArgument(
      java.lang.Iterable<? extends org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression> values) {
    ensureRegularArgumentIsMutable();
    org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
        values, regularArgument_);
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression regular_argument = 3;</code>
   */
  private void clearRegularArgument() {
    regularArgument_ = emptyProtobufList();
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression regular_argument = 3;</code>
   */
  private void removeRegularArgument(int index) {
    ensureRegularArgumentIsMutable();
    regularArgument_.remove(index);
  }

  public static final int TYPE_ARGUMENT_FIELD_NUMBER = 4;
  private org.jetbrains.kotlin.protobuf.Internal.IntList typeArgument_;
  /**
   * <code>repeated int32 type_argument = 4;</code>
   * @return A list containing the typeArgument.
   */
  @java.lang.Override
  public java.util.List<java.lang.Integer>
      getTypeArgumentList() {
    return typeArgument_;
  }
  /**
   * <code>repeated int32 type_argument = 4;</code>
   * @return The count of typeArgument.
   */
  @java.lang.Override
  public int getTypeArgumentCount() {
    return typeArgument_.size();
  }
  /**
   * <code>repeated int32 type_argument = 4;</code>
   * @param index The index of the element to return.
   * @return The typeArgument at the given index.
   */
  @java.lang.Override
  public int getTypeArgument(int index) {
    return typeArgument_.getInt(index);
  }
  private int typeArgumentMemoizedSerializedSize = -1;
  private void ensureTypeArgumentIsMutable() {
    org.jetbrains.kotlin.protobuf.Internal.IntList tmp = typeArgument_;
    if (!tmp.isModifiable()) {
      typeArgument_ =
          org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
     }
  }
  /**
   * <code>repeated int32 type_argument = 4;</code>
   * @param index The index to set the value at.
   * @param value The typeArgument to set.
   */
  private void setTypeArgument(
      int index, int value) {
    ensureTypeArgumentIsMutable();
    typeArgument_.setInt(index, value);
  }
  /**
   * <code>repeated int32 type_argument = 4;</code>
   * @param value The typeArgument to add.
   */
  private void addTypeArgument(int value) {
    ensureTypeArgumentIsMutable();
    typeArgument_.addInt(value);
  }
  /**
   * <code>repeated int32 type_argument = 4;</code>
   * @param values The typeArgument to add.
   */
  private void addAllTypeArgument(
      java.lang.Iterable<? extends java.lang.Integer> values) {
    ensureTypeArgumentIsMutable();
    org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
        values, typeArgument_);
  }
  /**
   * <code>repeated int32 type_argument = 4;</code>
   */
  private void clearTypeArgument() {
    typeArgument_ = emptyIntList();
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.MemberAccessCommon parseFrom(
      java.nio.ByteBuffer data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.MemberAccessCommon parseFrom(
      java.nio.ByteBuffer data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.MemberAccessCommon parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.MemberAccessCommon parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.MemberAccessCommon parseFrom(byte[] data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.MemberAccessCommon parseFrom(
      byte[] data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.MemberAccessCommon parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.MemberAccessCommon parseFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.MemberAccessCommon parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.MemberAccessCommon parseDelimitedFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.MemberAccessCommon parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.MemberAccessCommon parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(org.jetbrains.kotlin.backend.common.serialization.proto.MemberAccessCommon prototype) {
    return DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.MemberAccessCommon}
   */
  public static final class Builder extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
        org.jetbrains.kotlin.backend.common.serialization.proto.MemberAccessCommon, Builder> implements
      // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.common.serialization.proto.MemberAccessCommon)
      org.jetbrains.kotlin.backend.common.serialization.proto.MemberAccessCommonOrBuilder {
    // Construct using org.jetbrains.kotlin.backend.common.serialization.proto.MemberAccessCommon.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * Value argument serialization scheme after 2.2.0
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression argument = 6;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression> getArgumentList() {
      return java.util.Collections.unmodifiableList(
          instance.getArgumentList());
    }
    /**
     * <pre>
     * Value argument serialization scheme after 2.2.0
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression argument = 6;</code>
     */
    @java.lang.Override
    public int getArgumentCount() {
      return instance.getArgumentCount();
    }/**
     * <pre>
     * Value argument serialization scheme after 2.2.0
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression argument = 6;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression getArgument(int index) {
      return instance.getArgument(index);
    }
    /**
     * <pre>
     * Value argument serialization scheme after 2.2.0
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression argument = 6;</code>
     */
    public Builder setArgument(
        int index, org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression value) {
      copyOnWrite();
      instance.setArgument(index, value);
      return this;
    }
    /**
     * <pre>
     * Value argument serialization scheme after 2.2.0
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression argument = 6;</code>
     */
    public Builder setArgument(
        int index, org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression.Builder builderForValue) {
      copyOnWrite();
      instance.setArgument(index,
          builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * Value argument serialization scheme after 2.2.0
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression argument = 6;</code>
     */
    public Builder addArgument(org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression value) {
      copyOnWrite();
      instance.addArgument(value);
      return this;
    }
    /**
     * <pre>
     * Value argument serialization scheme after 2.2.0
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression argument = 6;</code>
     */
    public Builder addArgument(
        int index, org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression value) {
      copyOnWrite();
      instance.addArgument(index, value);
      return this;
    }
    /**
     * <pre>
     * Value argument serialization scheme after 2.2.0
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression argument = 6;</code>
     */
    public Builder addArgument(
        org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression.Builder builderForValue) {
      copyOnWrite();
      instance.addArgument(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * Value argument serialization scheme after 2.2.0
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression argument = 6;</code>
     */
    public Builder addArgument(
        int index, org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression.Builder builderForValue) {
      copyOnWrite();
      instance.addArgument(index,
          builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * Value argument serialization scheme after 2.2.0
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression argument = 6;</code>
     */
    public Builder addAllArgument(
        java.lang.Iterable<? extends org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression> values) {
      copyOnWrite();
      instance.addAllArgument(values);
      return this;
    }
    /**
     * <pre>
     * Value argument serialization scheme after 2.2.0
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression argument = 6;</code>
     */
    public Builder clearArgument() {
      copyOnWrite();
      instance.clearArgument();
      return this;
    }
    /**
     * <pre>
     * Value argument serialization scheme after 2.2.0
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression argument = 6;</code>
     */
    public Builder removeArgument(int index) {
      copyOnWrite();
      instance.removeArgument(index);
      return this;
    }

    /**
     * <pre>
     * Value argument serialization scheme before 2.2.0
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression dispatch_receiver = 1;</code>
     */
    @java.lang.Override
    public boolean hasDispatchReceiver() {
      return instance.hasDispatchReceiver();
    }
    /**
     * <pre>
     * Value argument serialization scheme before 2.2.0
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression dispatch_receiver = 1;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression getDispatchReceiver() {
      return instance.getDispatchReceiver();
    }
    /**
     * <pre>
     * Value argument serialization scheme before 2.2.0
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression dispatch_receiver = 1;</code>
     */
    public Builder setDispatchReceiver(org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression value) {
      copyOnWrite();
      instance.setDispatchReceiver(value);
      return this;
      }
    /**
     * <pre>
     * Value argument serialization scheme before 2.2.0
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression dispatch_receiver = 1;</code>
     */
    public Builder setDispatchReceiver(
        org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.Builder builderForValue) {
      copyOnWrite();
      instance.setDispatchReceiver(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * Value argument serialization scheme before 2.2.0
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression dispatch_receiver = 1;</code>
     */
    public Builder mergeDispatchReceiver(org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression value) {
      copyOnWrite();
      instance.mergeDispatchReceiver(value);
      return this;
    }
    /**
     * <pre>
     * Value argument serialization scheme before 2.2.0
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression dispatch_receiver = 1;</code>
     */
    public Builder clearDispatchReceiver() {  copyOnWrite();
      instance.clearDispatchReceiver();
      return this;
    }

    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression extension_receiver = 2;</code>
     */
    @java.lang.Override
    public boolean hasExtensionReceiver() {
      return instance.hasExtensionReceiver();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression extension_receiver = 2;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression getExtensionReceiver() {
      return instance.getExtensionReceiver();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression extension_receiver = 2;</code>
     */
    public Builder setExtensionReceiver(org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression value) {
      copyOnWrite();
      instance.setExtensionReceiver(value);
      return this;
      }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression extension_receiver = 2;</code>
     */
    public Builder setExtensionReceiver(
        org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.Builder builderForValue) {
      copyOnWrite();
      instance.setExtensionReceiver(builderForValue.build());
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression extension_receiver = 2;</code>
     */
    public Builder mergeExtensionReceiver(org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression value) {
      copyOnWrite();
      instance.mergeExtensionReceiver(value);
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression extension_receiver = 2;</code>
     */
    public Builder clearExtensionReceiver() {  copyOnWrite();
      instance.clearExtensionReceiver();
      return this;
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression regular_argument = 3;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression> getRegularArgumentList() {
      return java.util.Collections.unmodifiableList(
          instance.getRegularArgumentList());
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression regular_argument = 3;</code>
     */
    @java.lang.Override
    public int getRegularArgumentCount() {
      return instance.getRegularArgumentCount();
    }/**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression regular_argument = 3;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression getRegularArgument(int index) {
      return instance.getRegularArgument(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression regular_argument = 3;</code>
     */
    public Builder setRegularArgument(
        int index, org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression value) {
      copyOnWrite();
      instance.setRegularArgument(index, value);
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression regular_argument = 3;</code>
     */
    public Builder setRegularArgument(
        int index, org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression.Builder builderForValue) {
      copyOnWrite();
      instance.setRegularArgument(index,
          builderForValue.build());
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression regular_argument = 3;</code>
     */
    public Builder addRegularArgument(org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression value) {
      copyOnWrite();
      instance.addRegularArgument(value);
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression regular_argument = 3;</code>
     */
    public Builder addRegularArgument(
        int index, org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression value) {
      copyOnWrite();
      instance.addRegularArgument(index, value);
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression regular_argument = 3;</code>
     */
    public Builder addRegularArgument(
        org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression.Builder builderForValue) {
      copyOnWrite();
      instance.addRegularArgument(builderForValue.build());
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression regular_argument = 3;</code>
     */
    public Builder addRegularArgument(
        int index, org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression.Builder builderForValue) {
      copyOnWrite();
      instance.addRegularArgument(index,
          builderForValue.build());
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression regular_argument = 3;</code>
     */
    public Builder addAllRegularArgument(
        java.lang.Iterable<? extends org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression> values) {
      copyOnWrite();
      instance.addAllRegularArgument(values);
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression regular_argument = 3;</code>
     */
    public Builder clearRegularArgument() {
      copyOnWrite();
      instance.clearRegularArgument();
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression regular_argument = 3;</code>
     */
    public Builder removeRegularArgument(int index) {
      copyOnWrite();
      instance.removeRegularArgument(index);
      return this;
    }

    /**
     * <code>repeated int32 type_argument = 4;</code>
     * @return A list containing the typeArgument.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getTypeArgumentList() {
      return java.util.Collections.unmodifiableList(
          instance.getTypeArgumentList());
    }
    /**
     * <code>repeated int32 type_argument = 4;</code>
     * @return The count of typeArgument.
     */
    @java.lang.Override
    public int getTypeArgumentCount() {
      return instance.getTypeArgumentCount();
    }
    /**
     * <code>repeated int32 type_argument = 4;</code>
     * @param index The index of the element to return.
     * @return The typeArgument at the given index.
     */
    @java.lang.Override
    public int getTypeArgument(int index) {
      return instance.getTypeArgument(index);
    }
    /**
     * <code>repeated int32 type_argument = 4;</code>
     * @param value The typeArgument to set.
     * @return This builder for chaining.
     */
    public Builder setTypeArgument(
        int index, int value) {
      copyOnWrite();
      instance.setTypeArgument(index, value);
      return this;
    }
    /**
     * <code>repeated int32 type_argument = 4;</code>
     * @param value The typeArgument to add.
     * @return This builder for chaining.
     */
    public Builder addTypeArgument(int value) {
      copyOnWrite();
      instance.addTypeArgument(value);
      return this;
    }
    /**
     * <code>repeated int32 type_argument = 4;</code>
     * @param values The typeArgument to add.
     * @return This builder for chaining.
     */
    public Builder addAllTypeArgument(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      copyOnWrite();
      instance.addAllTypeArgument(values);
      return this;
    }
    /**
     * <code>repeated int32 type_argument = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearTypeArgument() {
      copyOnWrite();
      instance.clearTypeArgument();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.common.serialization.proto.MemberAccessCommon)
  }
  private byte memoizedIsInitialized = 2;
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.jetbrains.kotlin.backend.common.serialization.proto.MemberAccessCommon();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "bitField0_",
            "dispatchReceiver_",
            "extensionReceiver_",
            "regularArgument_",
            org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression.class,
            "typeArgument_",
            "argument_",
            org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression.class,
          };
          java.lang.String info =
              "\u0004\u0005\u0000\u0001\u0001\u0006\u0005\u0000\u0003\u0004\u0001\u1409\u0000\u0002" +
              "\u1409\u0001\u0003\u041b\u0004\'\u0006\u041b";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.backend.common.serialization.proto.MemberAccessCommon> parser = PARSER;
        if (parser == null) {
          synchronized (org.jetbrains.kotlin.backend.common.serialization.proto.MemberAccessCommon.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<org.jetbrains.kotlin.backend.common.serialization.proto.MemberAccessCommon>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return memoizedIsInitialized;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.common.serialization.proto.MemberAccessCommon)
  private static final org.jetbrains.kotlin.backend.common.serialization.proto.MemberAccessCommon DEFAULT_INSTANCE;
  static {
    MemberAccessCommon defaultInstance = new MemberAccessCommon();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
      MemberAccessCommon.class, defaultInstance);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.MemberAccessCommon getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile org.jetbrains.kotlin.protobuf.Parser<MemberAccessCommon> PARSER;

  public static org.jetbrains.kotlin.protobuf.Parser<MemberAccessCommon> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}
