// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: compiler/ir/serialization.common/src/KotlinIr.proto
// Protobuf Java Version: 4.29.3

package org.jetbrains.kotlin.backend.common.serialization.proto;

/**
 * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature}
 */
public final class IdSignature extends
    org.jetbrains.kotlin.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature)
    IdSignatureOrBuilder {
private static final long serialVersionUID = 0L;
  static {
    org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 29,
      /* patch= */ 3,
      /* suffix= */ "",
      IdSignature.class.getName());
  }
  // Use IdSignature.newBuilder() to construct.
  private IdSignature(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
  }
  private IdSignature() {
  }

  public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return org.jetbrains.kotlin.backend.common.serialization.proto.KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_IdSignature_descriptor;
  }

  @java.lang.Override
  protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.jetbrains.kotlin.backend.common.serialization.proto.KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_IdSignature_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature.class, org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature.Builder.class);
  }

  private int idSigCase_ = 0;
  @SuppressWarnings("serial")
  private java.lang.Object idSig_;
  public enum IdSigCase
      implements org.jetbrains.kotlin.protobuf.Internal.EnumLite,
          org.jetbrains.kotlin.protobuf.AbstractMessage.InternalOneOfEnum {
    PUBLIC_SIG(1),
    PRIVATE_SIG(2),
    ACCESSOR_SIG(3),
    SCOPED_LOCAL_SIG(4),
    COMPOSITE_SIG(5),
    LOCAL_SIG(6),
    FILE_SIG(7),
    IDSIG_NOT_SET(0);
    private final int value;
    private IdSigCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static IdSigCase valueOf(int value) {
      return forNumber(value);
    }

    public static IdSigCase forNumber(int value) {
      switch (value) {
        case 1: return PUBLIC_SIG;
        case 2: return PRIVATE_SIG;
        case 3: return ACCESSOR_SIG;
        case 4: return SCOPED_LOCAL_SIG;
        case 5: return COMPOSITE_SIG;
        case 6: return LOCAL_SIG;
        case 7: return FILE_SIG;
        case 0: return IDSIG_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public IdSigCase
  getIdSigCase() {
    return IdSigCase.forNumber(
        idSigCase_);
  }

  public static final int PUBLIC_SIG_FIELD_NUMBER = 1;
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature public_sig = 1;</code>
   * @return Whether the publicSig field is set.
   */
  @java.lang.Override
  public boolean hasPublicSig() {
    return idSigCase_ == 1;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature public_sig = 1;</code>
   * @return The publicSig.
   */
  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature getPublicSig() {
    if (idSigCase_ == 1) {
       return (org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature) idSig_;
    }
    return org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature.getDefaultInstance();
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature public_sig = 1;</code>
   */
  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignatureOrBuilder getPublicSigOrBuilder() {
    if (idSigCase_ == 1) {
       return (org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature) idSig_;
    }
    return org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature.getDefaultInstance();
  }

  public static final int PRIVATE_SIG_FIELD_NUMBER = 2;
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.FileLocalIdSignature private_sig = 2;</code>
   * @return Whether the privateSig field is set.
   */
  @java.lang.Override
  public boolean hasPrivateSig() {
    return idSigCase_ == 2;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.FileLocalIdSignature private_sig = 2;</code>
   * @return The privateSig.
   */
  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.FileLocalIdSignature getPrivateSig() {
    if (idSigCase_ == 2) {
       return (org.jetbrains.kotlin.backend.common.serialization.proto.FileLocalIdSignature) idSig_;
    }
    return org.jetbrains.kotlin.backend.common.serialization.proto.FileLocalIdSignature.getDefaultInstance();
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.FileLocalIdSignature private_sig = 2;</code>
   */
  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.FileLocalIdSignatureOrBuilder getPrivateSigOrBuilder() {
    if (idSigCase_ == 2) {
       return (org.jetbrains.kotlin.backend.common.serialization.proto.FileLocalIdSignature) idSig_;
    }
    return org.jetbrains.kotlin.backend.common.serialization.proto.FileLocalIdSignature.getDefaultInstance();
  }

  public static final int ACCESSOR_SIG_FIELD_NUMBER = 3;
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature accessor_sig = 3;</code>
   * @return Whether the accessorSig field is set.
   */
  @java.lang.Override
  public boolean hasAccessorSig() {
    return idSigCase_ == 3;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature accessor_sig = 3;</code>
   * @return The accessorSig.
   */
  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature getAccessorSig() {
    if (idSigCase_ == 3) {
       return (org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature) idSig_;
    }
    return org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature.getDefaultInstance();
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature accessor_sig = 3;</code>
   */
  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignatureOrBuilder getAccessorSigOrBuilder() {
    if (idSigCase_ == 3) {
       return (org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature) idSig_;
    }
    return org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature.getDefaultInstance();
  }

  public static final int SCOPED_LOCAL_SIG_FIELD_NUMBER = 4;
  /**
   * <code>int32 scoped_local_sig = 4;</code>
   * @return Whether the scopedLocalSig field is set.
   */
  @java.lang.Override
  public boolean hasScopedLocalSig() {
    return idSigCase_ == 4;
  }
  /**
   * <code>int32 scoped_local_sig = 4;</code>
   * @return The scopedLocalSig.
   */
  @java.lang.Override
  public int getScopedLocalSig() {
    if (idSigCase_ == 4) {
      return (java.lang.Integer) idSig_;
    }
    return 0;
  }

  public static final int COMPOSITE_SIG_FIELD_NUMBER = 5;
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.CompositeSignature composite_sig = 5;</code>
   * @return Whether the compositeSig field is set.
   */
  @java.lang.Override
  public boolean hasCompositeSig() {
    return idSigCase_ == 5;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.CompositeSignature composite_sig = 5;</code>
   * @return The compositeSig.
   */
  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.CompositeSignature getCompositeSig() {
    if (idSigCase_ == 5) {
       return (org.jetbrains.kotlin.backend.common.serialization.proto.CompositeSignature) idSig_;
    }
    return org.jetbrains.kotlin.backend.common.serialization.proto.CompositeSignature.getDefaultInstance();
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.CompositeSignature composite_sig = 5;</code>
   */
  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.CompositeSignatureOrBuilder getCompositeSigOrBuilder() {
    if (idSigCase_ == 5) {
       return (org.jetbrains.kotlin.backend.common.serialization.proto.CompositeSignature) idSig_;
    }
    return org.jetbrains.kotlin.backend.common.serialization.proto.CompositeSignature.getDefaultInstance();
  }

  public static final int LOCAL_SIG_FIELD_NUMBER = 6;
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature local_sig = 6;</code>
   * @return Whether the localSig field is set.
   */
  @java.lang.Override
  public boolean hasLocalSig() {
    return idSigCase_ == 6;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature local_sig = 6;</code>
   * @return The localSig.
   */
  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature getLocalSig() {
    if (idSigCase_ == 6) {
       return (org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature) idSig_;
    }
    return org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature.getDefaultInstance();
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature local_sig = 6;</code>
   */
  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignatureOrBuilder getLocalSigOrBuilder() {
    if (idSigCase_ == 6) {
       return (org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature) idSig_;
    }
    return org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature.getDefaultInstance();
  }

  public static final int FILE_SIG_FIELD_NUMBER = 7;
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature file_sig = 7;</code>
   * @return Whether the fileSig field is set.
   */
  @java.lang.Override
  public boolean hasFileSig() {
    return idSigCase_ == 7;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature file_sig = 7;</code>
   * @return The fileSig.
   */
  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature getFileSig() {
    if (idSigCase_ == 7) {
       return (org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature) idSig_;
    }
    return org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature.getDefaultInstance();
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature file_sig = 7;</code>
   */
  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.FileSignatureOrBuilder getFileSigOrBuilder() {
    if (idSigCase_ == 7) {
       return (org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature) idSig_;
    }
    return org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature.getDefaultInstance();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    if (hasPrivateSig()) {
      if (!getPrivateSig().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
    }
    if (hasAccessorSig()) {
      if (!getAccessorSig().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
    }
    if (hasCompositeSig()) {
      if (!getCompositeSig().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
    }
    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (idSigCase_ == 1) {
      output.writeMessage(1, (org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature) idSig_);
    }
    if (idSigCase_ == 2) {
      output.writeMessage(2, (org.jetbrains.kotlin.backend.common.serialization.proto.FileLocalIdSignature) idSig_);
    }
    if (idSigCase_ == 3) {
      output.writeMessage(3, (org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature) idSig_);
    }
    if (idSigCase_ == 4) {
      output.writeInt32(
          4, (int)((java.lang.Integer) idSig_));
    }
    if (idSigCase_ == 5) {
      output.writeMessage(5, (org.jetbrains.kotlin.backend.common.serialization.proto.CompositeSignature) idSig_);
    }
    if (idSigCase_ == 6) {
      output.writeMessage(6, (org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature) idSig_);
    }
    if (idSigCase_ == 7) {
      output.writeMessage(7, (org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature) idSig_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (idSigCase_ == 1) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeMessageSize(1, (org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature) idSig_);
    }
    if (idSigCase_ == 2) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeMessageSize(2, (org.jetbrains.kotlin.backend.common.serialization.proto.FileLocalIdSignature) idSig_);
    }
    if (idSigCase_ == 3) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeMessageSize(3, (org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature) idSig_);
    }
    if (idSigCase_ == 4) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeInt32Size(
            4, (int)((java.lang.Integer) idSig_));
    }
    if (idSigCase_ == 5) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeMessageSize(5, (org.jetbrains.kotlin.backend.common.serialization.proto.CompositeSignature) idSig_);
    }
    if (idSigCase_ == 6) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeMessageSize(6, (org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature) idSig_);
    }
    if (idSigCase_ == 7) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeMessageSize(7, (org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature) idSig_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature)) {
      return super.equals(obj);
    }
    org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature other = (org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature) obj;

    if (!getIdSigCase().equals(other.getIdSigCase())) return false;
    switch (idSigCase_) {
      case 1:
        if (!getPublicSig()
            .equals(other.getPublicSig())) return false;
        break;
      case 2:
        if (!getPrivateSig()
            .equals(other.getPrivateSig())) return false;
        break;
      case 3:
        if (!getAccessorSig()
            .equals(other.getAccessorSig())) return false;
        break;
      case 4:
        if (getScopedLocalSig()
            != other.getScopedLocalSig()) return false;
        break;
      case 5:
        if (!getCompositeSig()
            .equals(other.getCompositeSig())) return false;
        break;
      case 6:
        if (!getLocalSig()
            .equals(other.getLocalSig())) return false;
        break;
      case 7:
        if (!getFileSig()
            .equals(other.getFileSig())) return false;
        break;
      case 0:
      default:
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    switch (idSigCase_) {
      case 1:
        hash = (37 * hash) + PUBLIC_SIG_FIELD_NUMBER;
        hash = (53 * hash) + getPublicSig().hashCode();
        break;
      case 2:
        hash = (37 * hash) + PRIVATE_SIG_FIELD_NUMBER;
        hash = (53 * hash) + getPrivateSig().hashCode();
        break;
      case 3:
        hash = (37 * hash) + ACCESSOR_SIG_FIELD_NUMBER;
        hash = (53 * hash) + getAccessorSig().hashCode();
        break;
      case 4:
        hash = (37 * hash) + SCOPED_LOCAL_SIG_FIELD_NUMBER;
        hash = (53 * hash) + getScopedLocalSig();
        break;
      case 5:
        hash = (37 * hash) + COMPOSITE_SIG_FIELD_NUMBER;
        hash = (53 * hash) + getCompositeSig().hashCode();
        break;
      case 6:
        hash = (37 * hash) + LOCAL_SIG_FIELD_NUMBER;
        hash = (53 * hash) + getLocalSig().hashCode();
        break;
      case 7:
        hash = (37 * hash) + FILE_SIG_FIELD_NUMBER;
        hash = (53 * hash) + getFileSig().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature parseFrom(
      java.nio.ByteBuffer data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature parseFrom(
      java.nio.ByteBuffer data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature parseFrom(byte[] data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature parseFrom(
      byte[] data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature parseFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature parseDelimitedFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature}
   */
  public static final class Builder extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature)
      org.jetbrains.kotlin.backend.common.serialization.proto.IdSignatureOrBuilder {
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.backend.common.serialization.proto.KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_IdSignature_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.backend.common.serialization.proto.KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_IdSignature_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature.class, org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature.Builder.class);
    }

    // Construct using org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature.newBuilder()
    private Builder() {

    }

    private Builder(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      if (publicSigBuilder_ != null) {
        publicSigBuilder_.clear();
      }
      if (privateSigBuilder_ != null) {
        privateSigBuilder_.clear();
      }
      if (accessorSigBuilder_ != null) {
        accessorSigBuilder_.clear();
      }
      if (compositeSigBuilder_ != null) {
        compositeSigBuilder_.clear();
      }
      if (localSigBuilder_ != null) {
        localSigBuilder_.clear();
      }
      if (fileSigBuilder_ != null) {
        fileSigBuilder_.clear();
      }
      idSigCase_ = 0;
      idSig_ = null;
      return this;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return org.jetbrains.kotlin.backend.common.serialization.proto.KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_IdSignature_descriptor;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature getDefaultInstanceForType() {
      return org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature.getDefaultInstance();
    }

    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature build() {
      org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature buildPartial() {
      org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature result = new org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      buildPartialOneofs(result);
      onBuilt();
      return result;
    }

    private void buildPartial0(org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature result) {
      int from_bitField0_ = bitField0_;
    }

    private void buildPartialOneofs(org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature result) {
      result.idSigCase_ = idSigCase_;
      result.idSig_ = this.idSig_;
      if (idSigCase_ == 1 &&
          publicSigBuilder_ != null) {
        result.idSig_ = publicSigBuilder_.build();
      }
      if (idSigCase_ == 2 &&
          privateSigBuilder_ != null) {
        result.idSig_ = privateSigBuilder_.build();
      }
      if (idSigCase_ == 3 &&
          accessorSigBuilder_ != null) {
        result.idSig_ = accessorSigBuilder_.build();
      }
      if (idSigCase_ == 5 &&
          compositeSigBuilder_ != null) {
        result.idSig_ = compositeSigBuilder_.build();
      }
      if (idSigCase_ == 6 &&
          localSigBuilder_ != null) {
        result.idSig_ = localSigBuilder_.build();
      }
      if (idSigCase_ == 7 &&
          fileSigBuilder_ != null) {
        result.idSig_ = fileSigBuilder_.build();
      }
    }

    @java.lang.Override
    public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
      if (other instanceof org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature) {
        return mergeFrom((org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature other) {
      if (other == org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature.getDefaultInstance()) return this;
      switch (other.getIdSigCase()) {
        case PUBLIC_SIG: {
          mergePublicSig(other.getPublicSig());
          break;
        }
        case PRIVATE_SIG: {
          mergePrivateSig(other.getPrivateSig());
          break;
        }
        case ACCESSOR_SIG: {
          mergeAccessorSig(other.getAccessorSig());
          break;
        }
        case SCOPED_LOCAL_SIG: {
          setScopedLocalSig(other.getScopedLocalSig());
          break;
        }
        case COMPOSITE_SIG: {
          mergeCompositeSig(other.getCompositeSig());
          break;
        }
        case LOCAL_SIG: {
          mergeLocalSig(other.getLocalSig());
          break;
        }
        case FILE_SIG: {
          mergeFileSig(other.getFileSig());
          break;
        }
        case IDSIG_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      if (hasPrivateSig()) {
        if (!getPrivateSig().isInitialized()) {
          return false;
        }
      }
      if (hasAccessorSig()) {
        if (!getAccessorSig().isInitialized()) {
          return false;
        }
      }
      if (hasCompositeSig()) {
        if (!getCompositeSig().isInitialized()) {
          return false;
        }
      }
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getPublicSigFieldBuilder().getBuilder(),
                  extensionRegistry);
              idSigCase_ = 1;
              break;
            } // case 10
            case 18: {
              input.readMessage(
                  getPrivateSigFieldBuilder().getBuilder(),
                  extensionRegistry);
              idSigCase_ = 2;
              break;
            } // case 18
            case 26: {
              input.readMessage(
                  getAccessorSigFieldBuilder().getBuilder(),
                  extensionRegistry);
              idSigCase_ = 3;
              break;
            } // case 26
            case 32: {
              idSig_ = input.readInt32();
              idSigCase_ = 4;
              break;
            } // case 32
            case 42: {
              input.readMessage(
                  getCompositeSigFieldBuilder().getBuilder(),
                  extensionRegistry);
              idSigCase_ = 5;
              break;
            } // case 42
            case 50: {
              input.readMessage(
                  getLocalSigFieldBuilder().getBuilder(),
                  extensionRegistry);
              idSigCase_ = 6;
              break;
            } // case 50
            case 58: {
              input.readMessage(
                  getFileSigFieldBuilder().getBuilder(),
                  extensionRegistry);
              idSigCase_ = 7;
              break;
            } // case 58
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int idSigCase_ = 0;
    private java.lang.Object idSig_;
    public IdSigCase
        getIdSigCase() {
      return IdSigCase.forNumber(
          idSigCase_);
    }

    public Builder clearIdSig() {
      idSigCase_ = 0;
      idSig_ = null;
      onChanged();
      return this;
    }

    private int bitField0_;

    private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
        org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature, org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature.Builder, org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignatureOrBuilder> publicSigBuilder_;
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature public_sig = 1;</code>
     * @return Whether the publicSig field is set.
     */
    @java.lang.Override
    public boolean hasPublicSig() {
      return idSigCase_ == 1;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature public_sig = 1;</code>
     * @return The publicSig.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature getPublicSig() {
      if (publicSigBuilder_ == null) {
        if (idSigCase_ == 1) {
          return (org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature) idSig_;
        }
        return org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature.getDefaultInstance();
      } else {
        if (idSigCase_ == 1) {
          return publicSigBuilder_.getMessage();
        }
        return org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature.getDefaultInstance();
      }
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature public_sig = 1;</code>
     */
    public Builder setPublicSig(org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature value) {
      if (publicSigBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        idSig_ = value;
        onChanged();
      } else {
        publicSigBuilder_.setMessage(value);
      }
      idSigCase_ = 1;
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature public_sig = 1;</code>
     */
    public Builder setPublicSig(
        org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature.Builder builderForValue) {
      if (publicSigBuilder_ == null) {
        idSig_ = builderForValue.build();
        onChanged();
      } else {
        publicSigBuilder_.setMessage(builderForValue.build());
      }
      idSigCase_ = 1;
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature public_sig = 1;</code>
     */
    public Builder mergePublicSig(org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature value) {
      if (publicSigBuilder_ == null) {
        if (idSigCase_ == 1 &&
            idSig_ != org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature.getDefaultInstance()) {
          idSig_ = org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature.newBuilder((org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature) idSig_)
              .mergeFrom(value).buildPartial();
        } else {
          idSig_ = value;
        }
        onChanged();
      } else {
        if (idSigCase_ == 1) {
          publicSigBuilder_.mergeFrom(value);
        } else {
          publicSigBuilder_.setMessage(value);
        }
      }
      idSigCase_ = 1;
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature public_sig = 1;</code>
     */
    public Builder clearPublicSig() {
      if (publicSigBuilder_ == null) {
        if (idSigCase_ == 1) {
          idSigCase_ = 0;
          idSig_ = null;
          onChanged();
        }
      } else {
        if (idSigCase_ == 1) {
          idSigCase_ = 0;
          idSig_ = null;
        }
        publicSigBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature public_sig = 1;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature.Builder getPublicSigBuilder() {
      return getPublicSigFieldBuilder().getBuilder();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature public_sig = 1;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignatureOrBuilder getPublicSigOrBuilder() {
      if ((idSigCase_ == 1) && (publicSigBuilder_ != null)) {
        return publicSigBuilder_.getMessageOrBuilder();
      } else {
        if (idSigCase_ == 1) {
          return (org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature) idSig_;
        }
        return org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature.getDefaultInstance();
      }
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature public_sig = 1;</code>
     */
    private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
        org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature, org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature.Builder, org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignatureOrBuilder> 
        getPublicSigFieldBuilder() {
      if (publicSigBuilder_ == null) {
        if (!(idSigCase_ == 1)) {
          idSig_ = org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature.getDefaultInstance();
        }
        publicSigBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
            org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature, org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature.Builder, org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignatureOrBuilder>(
                (org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature) idSig_,
                getParentForChildren(),
                isClean());
        idSig_ = null;
      }
      idSigCase_ = 1;
      onChanged();
      return publicSigBuilder_;
    }

    private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
        org.jetbrains.kotlin.backend.common.serialization.proto.FileLocalIdSignature, org.jetbrains.kotlin.backend.common.serialization.proto.FileLocalIdSignature.Builder, org.jetbrains.kotlin.backend.common.serialization.proto.FileLocalIdSignatureOrBuilder> privateSigBuilder_;
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.FileLocalIdSignature private_sig = 2;</code>
     * @return Whether the privateSig field is set.
     */
    @java.lang.Override
    public boolean hasPrivateSig() {
      return idSigCase_ == 2;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.FileLocalIdSignature private_sig = 2;</code>
     * @return The privateSig.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.FileLocalIdSignature getPrivateSig() {
      if (privateSigBuilder_ == null) {
        if (idSigCase_ == 2) {
          return (org.jetbrains.kotlin.backend.common.serialization.proto.FileLocalIdSignature) idSig_;
        }
        return org.jetbrains.kotlin.backend.common.serialization.proto.FileLocalIdSignature.getDefaultInstance();
      } else {
        if (idSigCase_ == 2) {
          return privateSigBuilder_.getMessage();
        }
        return org.jetbrains.kotlin.backend.common.serialization.proto.FileLocalIdSignature.getDefaultInstance();
      }
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.FileLocalIdSignature private_sig = 2;</code>
     */
    public Builder setPrivateSig(org.jetbrains.kotlin.backend.common.serialization.proto.FileLocalIdSignature value) {
      if (privateSigBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        idSig_ = value;
        onChanged();
      } else {
        privateSigBuilder_.setMessage(value);
      }
      idSigCase_ = 2;
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.FileLocalIdSignature private_sig = 2;</code>
     */
    public Builder setPrivateSig(
        org.jetbrains.kotlin.backend.common.serialization.proto.FileLocalIdSignature.Builder builderForValue) {
      if (privateSigBuilder_ == null) {
        idSig_ = builderForValue.build();
        onChanged();
      } else {
        privateSigBuilder_.setMessage(builderForValue.build());
      }
      idSigCase_ = 2;
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.FileLocalIdSignature private_sig = 2;</code>
     */
    public Builder mergePrivateSig(org.jetbrains.kotlin.backend.common.serialization.proto.FileLocalIdSignature value) {
      if (privateSigBuilder_ == null) {
        if (idSigCase_ == 2 &&
            idSig_ != org.jetbrains.kotlin.backend.common.serialization.proto.FileLocalIdSignature.getDefaultInstance()) {
          idSig_ = org.jetbrains.kotlin.backend.common.serialization.proto.FileLocalIdSignature.newBuilder((org.jetbrains.kotlin.backend.common.serialization.proto.FileLocalIdSignature) idSig_)
              .mergeFrom(value).buildPartial();
        } else {
          idSig_ = value;
        }
        onChanged();
      } else {
        if (idSigCase_ == 2) {
          privateSigBuilder_.mergeFrom(value);
        } else {
          privateSigBuilder_.setMessage(value);
        }
      }
      idSigCase_ = 2;
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.FileLocalIdSignature private_sig = 2;</code>
     */
    public Builder clearPrivateSig() {
      if (privateSigBuilder_ == null) {
        if (idSigCase_ == 2) {
          idSigCase_ = 0;
          idSig_ = null;
          onChanged();
        }
      } else {
        if (idSigCase_ == 2) {
          idSigCase_ = 0;
          idSig_ = null;
        }
        privateSigBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.FileLocalIdSignature private_sig = 2;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.FileLocalIdSignature.Builder getPrivateSigBuilder() {
      return getPrivateSigFieldBuilder().getBuilder();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.FileLocalIdSignature private_sig = 2;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.FileLocalIdSignatureOrBuilder getPrivateSigOrBuilder() {
      if ((idSigCase_ == 2) && (privateSigBuilder_ != null)) {
        return privateSigBuilder_.getMessageOrBuilder();
      } else {
        if (idSigCase_ == 2) {
          return (org.jetbrains.kotlin.backend.common.serialization.proto.FileLocalIdSignature) idSig_;
        }
        return org.jetbrains.kotlin.backend.common.serialization.proto.FileLocalIdSignature.getDefaultInstance();
      }
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.FileLocalIdSignature private_sig = 2;</code>
     */
    private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
        org.jetbrains.kotlin.backend.common.serialization.proto.FileLocalIdSignature, org.jetbrains.kotlin.backend.common.serialization.proto.FileLocalIdSignature.Builder, org.jetbrains.kotlin.backend.common.serialization.proto.FileLocalIdSignatureOrBuilder> 
        getPrivateSigFieldBuilder() {
      if (privateSigBuilder_ == null) {
        if (!(idSigCase_ == 2)) {
          idSig_ = org.jetbrains.kotlin.backend.common.serialization.proto.FileLocalIdSignature.getDefaultInstance();
        }
        privateSigBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
            org.jetbrains.kotlin.backend.common.serialization.proto.FileLocalIdSignature, org.jetbrains.kotlin.backend.common.serialization.proto.FileLocalIdSignature.Builder, org.jetbrains.kotlin.backend.common.serialization.proto.FileLocalIdSignatureOrBuilder>(
                (org.jetbrains.kotlin.backend.common.serialization.proto.FileLocalIdSignature) idSig_,
                getParentForChildren(),
                isClean());
        idSig_ = null;
      }
      idSigCase_ = 2;
      onChanged();
      return privateSigBuilder_;
    }

    private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
        org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature, org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature.Builder, org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignatureOrBuilder> accessorSigBuilder_;
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature accessor_sig = 3;</code>
     * @return Whether the accessorSig field is set.
     */
    @java.lang.Override
    public boolean hasAccessorSig() {
      return idSigCase_ == 3;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature accessor_sig = 3;</code>
     * @return The accessorSig.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature getAccessorSig() {
      if (accessorSigBuilder_ == null) {
        if (idSigCase_ == 3) {
          return (org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature) idSig_;
        }
        return org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature.getDefaultInstance();
      } else {
        if (idSigCase_ == 3) {
          return accessorSigBuilder_.getMessage();
        }
        return org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature.getDefaultInstance();
      }
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature accessor_sig = 3;</code>
     */
    public Builder setAccessorSig(org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature value) {
      if (accessorSigBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        idSig_ = value;
        onChanged();
      } else {
        accessorSigBuilder_.setMessage(value);
      }
      idSigCase_ = 3;
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature accessor_sig = 3;</code>
     */
    public Builder setAccessorSig(
        org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature.Builder builderForValue) {
      if (accessorSigBuilder_ == null) {
        idSig_ = builderForValue.build();
        onChanged();
      } else {
        accessorSigBuilder_.setMessage(builderForValue.build());
      }
      idSigCase_ = 3;
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature accessor_sig = 3;</code>
     */
    public Builder mergeAccessorSig(org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature value) {
      if (accessorSigBuilder_ == null) {
        if (idSigCase_ == 3 &&
            idSig_ != org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature.getDefaultInstance()) {
          idSig_ = org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature.newBuilder((org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature) idSig_)
              .mergeFrom(value).buildPartial();
        } else {
          idSig_ = value;
        }
        onChanged();
      } else {
        if (idSigCase_ == 3) {
          accessorSigBuilder_.mergeFrom(value);
        } else {
          accessorSigBuilder_.setMessage(value);
        }
      }
      idSigCase_ = 3;
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature accessor_sig = 3;</code>
     */
    public Builder clearAccessorSig() {
      if (accessorSigBuilder_ == null) {
        if (idSigCase_ == 3) {
          idSigCase_ = 0;
          idSig_ = null;
          onChanged();
        }
      } else {
        if (idSigCase_ == 3) {
          idSigCase_ = 0;
          idSig_ = null;
        }
        accessorSigBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature accessor_sig = 3;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature.Builder getAccessorSigBuilder() {
      return getAccessorSigFieldBuilder().getBuilder();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature accessor_sig = 3;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignatureOrBuilder getAccessorSigOrBuilder() {
      if ((idSigCase_ == 3) && (accessorSigBuilder_ != null)) {
        return accessorSigBuilder_.getMessageOrBuilder();
      } else {
        if (idSigCase_ == 3) {
          return (org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature) idSig_;
        }
        return org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature.getDefaultInstance();
      }
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature accessor_sig = 3;</code>
     */
    private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
        org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature, org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature.Builder, org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignatureOrBuilder> 
        getAccessorSigFieldBuilder() {
      if (accessorSigBuilder_ == null) {
        if (!(idSigCase_ == 3)) {
          idSig_ = org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature.getDefaultInstance();
        }
        accessorSigBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
            org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature, org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature.Builder, org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignatureOrBuilder>(
                (org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature) idSig_,
                getParentForChildren(),
                isClean());
        idSig_ = null;
      }
      idSigCase_ = 3;
      onChanged();
      return accessorSigBuilder_;
    }

    /**
     * <code>int32 scoped_local_sig = 4;</code>
     * @return Whether the scopedLocalSig field is set.
     */
    public boolean hasScopedLocalSig() {
      return idSigCase_ == 4;
    }
    /**
     * <code>int32 scoped_local_sig = 4;</code>
     * @return The scopedLocalSig.
     */
    public int getScopedLocalSig() {
      if (idSigCase_ == 4) {
        return (java.lang.Integer) idSig_;
      }
      return 0;
    }
    /**
     * <code>int32 scoped_local_sig = 4;</code>
     * @param value The scopedLocalSig to set.
     * @return This builder for chaining.
     */
    public Builder setScopedLocalSig(int value) {

      idSigCase_ = 4;
      idSig_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 scoped_local_sig = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearScopedLocalSig() {
      if (idSigCase_ == 4) {
        idSigCase_ = 0;
        idSig_ = null;
        onChanged();
      }
      return this;
    }

    private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
        org.jetbrains.kotlin.backend.common.serialization.proto.CompositeSignature, org.jetbrains.kotlin.backend.common.serialization.proto.CompositeSignature.Builder, org.jetbrains.kotlin.backend.common.serialization.proto.CompositeSignatureOrBuilder> compositeSigBuilder_;
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.CompositeSignature composite_sig = 5;</code>
     * @return Whether the compositeSig field is set.
     */
    @java.lang.Override
    public boolean hasCompositeSig() {
      return idSigCase_ == 5;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.CompositeSignature composite_sig = 5;</code>
     * @return The compositeSig.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.CompositeSignature getCompositeSig() {
      if (compositeSigBuilder_ == null) {
        if (idSigCase_ == 5) {
          return (org.jetbrains.kotlin.backend.common.serialization.proto.CompositeSignature) idSig_;
        }
        return org.jetbrains.kotlin.backend.common.serialization.proto.CompositeSignature.getDefaultInstance();
      } else {
        if (idSigCase_ == 5) {
          return compositeSigBuilder_.getMessage();
        }
        return org.jetbrains.kotlin.backend.common.serialization.proto.CompositeSignature.getDefaultInstance();
      }
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.CompositeSignature composite_sig = 5;</code>
     */
    public Builder setCompositeSig(org.jetbrains.kotlin.backend.common.serialization.proto.CompositeSignature value) {
      if (compositeSigBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        idSig_ = value;
        onChanged();
      } else {
        compositeSigBuilder_.setMessage(value);
      }
      idSigCase_ = 5;
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.CompositeSignature composite_sig = 5;</code>
     */
    public Builder setCompositeSig(
        org.jetbrains.kotlin.backend.common.serialization.proto.CompositeSignature.Builder builderForValue) {
      if (compositeSigBuilder_ == null) {
        idSig_ = builderForValue.build();
        onChanged();
      } else {
        compositeSigBuilder_.setMessage(builderForValue.build());
      }
      idSigCase_ = 5;
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.CompositeSignature composite_sig = 5;</code>
     */
    public Builder mergeCompositeSig(org.jetbrains.kotlin.backend.common.serialization.proto.CompositeSignature value) {
      if (compositeSigBuilder_ == null) {
        if (idSigCase_ == 5 &&
            idSig_ != org.jetbrains.kotlin.backend.common.serialization.proto.CompositeSignature.getDefaultInstance()) {
          idSig_ = org.jetbrains.kotlin.backend.common.serialization.proto.CompositeSignature.newBuilder((org.jetbrains.kotlin.backend.common.serialization.proto.CompositeSignature) idSig_)
              .mergeFrom(value).buildPartial();
        } else {
          idSig_ = value;
        }
        onChanged();
      } else {
        if (idSigCase_ == 5) {
          compositeSigBuilder_.mergeFrom(value);
        } else {
          compositeSigBuilder_.setMessage(value);
        }
      }
      idSigCase_ = 5;
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.CompositeSignature composite_sig = 5;</code>
     */
    public Builder clearCompositeSig() {
      if (compositeSigBuilder_ == null) {
        if (idSigCase_ == 5) {
          idSigCase_ = 0;
          idSig_ = null;
          onChanged();
        }
      } else {
        if (idSigCase_ == 5) {
          idSigCase_ = 0;
          idSig_ = null;
        }
        compositeSigBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.CompositeSignature composite_sig = 5;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.CompositeSignature.Builder getCompositeSigBuilder() {
      return getCompositeSigFieldBuilder().getBuilder();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.CompositeSignature composite_sig = 5;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.CompositeSignatureOrBuilder getCompositeSigOrBuilder() {
      if ((idSigCase_ == 5) && (compositeSigBuilder_ != null)) {
        return compositeSigBuilder_.getMessageOrBuilder();
      } else {
        if (idSigCase_ == 5) {
          return (org.jetbrains.kotlin.backend.common.serialization.proto.CompositeSignature) idSig_;
        }
        return org.jetbrains.kotlin.backend.common.serialization.proto.CompositeSignature.getDefaultInstance();
      }
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.CompositeSignature composite_sig = 5;</code>
     */
    private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
        org.jetbrains.kotlin.backend.common.serialization.proto.CompositeSignature, org.jetbrains.kotlin.backend.common.serialization.proto.CompositeSignature.Builder, org.jetbrains.kotlin.backend.common.serialization.proto.CompositeSignatureOrBuilder> 
        getCompositeSigFieldBuilder() {
      if (compositeSigBuilder_ == null) {
        if (!(idSigCase_ == 5)) {
          idSig_ = org.jetbrains.kotlin.backend.common.serialization.proto.CompositeSignature.getDefaultInstance();
        }
        compositeSigBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
            org.jetbrains.kotlin.backend.common.serialization.proto.CompositeSignature, org.jetbrains.kotlin.backend.common.serialization.proto.CompositeSignature.Builder, org.jetbrains.kotlin.backend.common.serialization.proto.CompositeSignatureOrBuilder>(
                (org.jetbrains.kotlin.backend.common.serialization.proto.CompositeSignature) idSig_,
                getParentForChildren(),
                isClean());
        idSig_ = null;
      }
      idSigCase_ = 5;
      onChanged();
      return compositeSigBuilder_;
    }

    private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
        org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature, org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature.Builder, org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignatureOrBuilder> localSigBuilder_;
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature local_sig = 6;</code>
     * @return Whether the localSig field is set.
     */
    @java.lang.Override
    public boolean hasLocalSig() {
      return idSigCase_ == 6;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature local_sig = 6;</code>
     * @return The localSig.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature getLocalSig() {
      if (localSigBuilder_ == null) {
        if (idSigCase_ == 6) {
          return (org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature) idSig_;
        }
        return org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature.getDefaultInstance();
      } else {
        if (idSigCase_ == 6) {
          return localSigBuilder_.getMessage();
        }
        return org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature.getDefaultInstance();
      }
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature local_sig = 6;</code>
     */
    public Builder setLocalSig(org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature value) {
      if (localSigBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        idSig_ = value;
        onChanged();
      } else {
        localSigBuilder_.setMessage(value);
      }
      idSigCase_ = 6;
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature local_sig = 6;</code>
     */
    public Builder setLocalSig(
        org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature.Builder builderForValue) {
      if (localSigBuilder_ == null) {
        idSig_ = builderForValue.build();
        onChanged();
      } else {
        localSigBuilder_.setMessage(builderForValue.build());
      }
      idSigCase_ = 6;
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature local_sig = 6;</code>
     */
    public Builder mergeLocalSig(org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature value) {
      if (localSigBuilder_ == null) {
        if (idSigCase_ == 6 &&
            idSig_ != org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature.getDefaultInstance()) {
          idSig_ = org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature.newBuilder((org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature) idSig_)
              .mergeFrom(value).buildPartial();
        } else {
          idSig_ = value;
        }
        onChanged();
      } else {
        if (idSigCase_ == 6) {
          localSigBuilder_.mergeFrom(value);
        } else {
          localSigBuilder_.setMessage(value);
        }
      }
      idSigCase_ = 6;
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature local_sig = 6;</code>
     */
    public Builder clearLocalSig() {
      if (localSigBuilder_ == null) {
        if (idSigCase_ == 6) {
          idSigCase_ = 0;
          idSig_ = null;
          onChanged();
        }
      } else {
        if (idSigCase_ == 6) {
          idSigCase_ = 0;
          idSig_ = null;
        }
        localSigBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature local_sig = 6;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature.Builder getLocalSigBuilder() {
      return getLocalSigFieldBuilder().getBuilder();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature local_sig = 6;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignatureOrBuilder getLocalSigOrBuilder() {
      if ((idSigCase_ == 6) && (localSigBuilder_ != null)) {
        return localSigBuilder_.getMessageOrBuilder();
      } else {
        if (idSigCase_ == 6) {
          return (org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature) idSig_;
        }
        return org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature.getDefaultInstance();
      }
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature local_sig = 6;</code>
     */
    private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
        org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature, org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature.Builder, org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignatureOrBuilder> 
        getLocalSigFieldBuilder() {
      if (localSigBuilder_ == null) {
        if (!(idSigCase_ == 6)) {
          idSig_ = org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature.getDefaultInstance();
        }
        localSigBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
            org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature, org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature.Builder, org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignatureOrBuilder>(
                (org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature) idSig_,
                getParentForChildren(),
                isClean());
        idSig_ = null;
      }
      idSigCase_ = 6;
      onChanged();
      return localSigBuilder_;
    }

    private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
        org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature, org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature.Builder, org.jetbrains.kotlin.backend.common.serialization.proto.FileSignatureOrBuilder> fileSigBuilder_;
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature file_sig = 7;</code>
     * @return Whether the fileSig field is set.
     */
    @java.lang.Override
    public boolean hasFileSig() {
      return idSigCase_ == 7;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature file_sig = 7;</code>
     * @return The fileSig.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature getFileSig() {
      if (fileSigBuilder_ == null) {
        if (idSigCase_ == 7) {
          return (org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature) idSig_;
        }
        return org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature.getDefaultInstance();
      } else {
        if (idSigCase_ == 7) {
          return fileSigBuilder_.getMessage();
        }
        return org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature.getDefaultInstance();
      }
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature file_sig = 7;</code>
     */
    public Builder setFileSig(org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature value) {
      if (fileSigBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        idSig_ = value;
        onChanged();
      } else {
        fileSigBuilder_.setMessage(value);
      }
      idSigCase_ = 7;
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature file_sig = 7;</code>
     */
    public Builder setFileSig(
        org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature.Builder builderForValue) {
      if (fileSigBuilder_ == null) {
        idSig_ = builderForValue.build();
        onChanged();
      } else {
        fileSigBuilder_.setMessage(builderForValue.build());
      }
      idSigCase_ = 7;
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature file_sig = 7;</code>
     */
    public Builder mergeFileSig(org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature value) {
      if (fileSigBuilder_ == null) {
        if (idSigCase_ == 7 &&
            idSig_ != org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature.getDefaultInstance()) {
          idSig_ = org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature.newBuilder((org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature) idSig_)
              .mergeFrom(value).buildPartial();
        } else {
          idSig_ = value;
        }
        onChanged();
      } else {
        if (idSigCase_ == 7) {
          fileSigBuilder_.mergeFrom(value);
        } else {
          fileSigBuilder_.setMessage(value);
        }
      }
      idSigCase_ = 7;
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature file_sig = 7;</code>
     */
    public Builder clearFileSig() {
      if (fileSigBuilder_ == null) {
        if (idSigCase_ == 7) {
          idSigCase_ = 0;
          idSig_ = null;
          onChanged();
        }
      } else {
        if (idSigCase_ == 7) {
          idSigCase_ = 0;
          idSig_ = null;
        }
        fileSigBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature file_sig = 7;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature.Builder getFileSigBuilder() {
      return getFileSigFieldBuilder().getBuilder();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature file_sig = 7;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.FileSignatureOrBuilder getFileSigOrBuilder() {
      if ((idSigCase_ == 7) && (fileSigBuilder_ != null)) {
        return fileSigBuilder_.getMessageOrBuilder();
      } else {
        if (idSigCase_ == 7) {
          return (org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature) idSig_;
        }
        return org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature.getDefaultInstance();
      }
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature file_sig = 7;</code>
     */
    private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
        org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature, org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature.Builder, org.jetbrains.kotlin.backend.common.serialization.proto.FileSignatureOrBuilder> 
        getFileSigFieldBuilder() {
      if (fileSigBuilder_ == null) {
        if (!(idSigCase_ == 7)) {
          idSig_ = org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature.getDefaultInstance();
        }
        fileSigBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
            org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature, org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature.Builder, org.jetbrains.kotlin.backend.common.serialization.proto.FileSignatureOrBuilder>(
                (org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature) idSig_,
                getParentForChildren(),
                isClean());
        idSig_ = null;
      }
      idSigCase_ = 7;
      onChanged();
      return fileSigBuilder_;
    }

    // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature)
  }

  // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature)
  private static final org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature();
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final org.jetbrains.kotlin.protobuf.Parser<IdSignature>
      PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<IdSignature>() {
    @java.lang.Override
    public IdSignature parsePartialFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static org.jetbrains.kotlin.protobuf.Parser<IdSignature> parser() {
    return PARSER;
  }

  @java.lang.Override
  public org.jetbrains.kotlin.protobuf.Parser<IdSignature> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}
