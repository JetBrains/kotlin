package

public /*synthesized*/ fun </*0*/ E : kotlin.Any!> EventListener(/*0*/ function: (e: E!) -> kotlin.Unit): EventListener<E>
public fun main(): kotlin.Unit

public open class A {
    public constructor A()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open fun foo(/*0*/ l: EventListener<*>!): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

    // Static members
    public final /*synthesized*/ fun bar(/*0*/ l: ((e: kotlin.Any!) -> kotlin.Unit)!): kotlin.Unit
    public open fun bar(/*0*/ l: EventListener<*>!): kotlin.Unit
    public final /*synthesized*/ fun baz(/*0*/ l: ((e: kotlin.CharSequence!) -> kotlin.Unit)!): kotlin.Unit
    public open fun baz(/*0*/ l: EventListener<out kotlin.CharSequence!>!): kotlin.Unit
}

public interface EventListener</*0*/ E : kotlin.Any!> {
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public abstract fun handle(/*0*/ e: E!): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}
