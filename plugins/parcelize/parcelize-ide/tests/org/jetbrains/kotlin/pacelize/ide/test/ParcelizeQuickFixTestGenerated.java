/*
 * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.pacelize.ide.test;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("plugins/parcelize/parcelize-ide/testData/quickfix")
@TestDataPath("$PROJECT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public class ParcelizeQuickFixTestGenerated extends AbstractParcelizeQuickFixTest {
    private void runTest(String testDataFilePath) throws Exception {
        KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
    }

    public void testAllFilesPresentInQuickfix() throws Exception {
        KotlinTestUtils.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("plugins/parcelize/parcelize-ide/testData/quickfix"), Pattern.compile("^([\\w\\-_]+)\\.kt$"), null, true);
    }

    @TestMetadata("plugins/parcelize/parcelize-ide/testData/quickfix/addPrimaryConstructor")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class AddPrimaryConstructor extends AbstractParcelizeQuickFixTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        public void testAllFilesPresentInAddPrimaryConstructor() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("plugins/parcelize/parcelize-ide/testData/quickfix/addPrimaryConstructor"), Pattern.compile("^([\\w\\-_]+)\\.kt$"), null, true);
        }

        @TestMetadata("constructorWithDelegate.kt")
        public void testConstructorWithDelegate() throws Exception {
            runTest("plugins/parcelize/parcelize-ide/testData/quickfix/addPrimaryConstructor/constructorWithDelegate.kt");
        }

        @TestMetadata("noQuickFix.kt")
        public void testNoQuickFix() throws Exception {
            runTest("plugins/parcelize/parcelize-ide/testData/quickfix/addPrimaryConstructor/noQuickFix.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("plugins/parcelize/parcelize-ide/testData/quickfix/addPrimaryConstructor/simple.kt");
        }
    }

    @TestMetadata("plugins/parcelize/parcelize-ide/testData/quickfix/cantBeInnerClass")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class CantBeInnerClass extends AbstractParcelizeQuickFixTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        public void testAllFilesPresentInCantBeInnerClass() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("plugins/parcelize/parcelize-ide/testData/quickfix/cantBeInnerClass"), Pattern.compile("^([\\w\\-_]+)\\.kt$"), null, true);
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("plugins/parcelize/parcelize-ide/testData/quickfix/cantBeInnerClass/simple.kt");
        }
    }

    @TestMetadata("plugins/parcelize/parcelize-ide/testData/quickfix/classShouldBeAnnotated")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ClassShouldBeAnnotated extends AbstractParcelizeQuickFixTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        public void testAllFilesPresentInClassShouldBeAnnotated() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("plugins/parcelize/parcelize-ide/testData/quickfix/classShouldBeAnnotated"), Pattern.compile("^([\\w\\-_]+)\\.kt$"), null, true);
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("plugins/parcelize/parcelize-ide/testData/quickfix/classShouldBeAnnotated/simple.kt");
        }
    }

    @TestMetadata("plugins/parcelize/parcelize-ide/testData/quickfix/deleteIncompatible")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class DeleteIncompatible extends AbstractParcelizeQuickFixTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        public void testAllFilesPresentInDeleteIncompatible() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("plugins/parcelize/parcelize-ide/testData/quickfix/deleteIncompatible"), Pattern.compile("^([\\w\\-_]+)\\.kt$"), null, true);
        }

        @TestMetadata("creatorField.kt")
        public void testCreatorField() throws Exception {
            runTest("plugins/parcelize/parcelize-ide/testData/quickfix/deleteIncompatible/creatorField.kt");
        }

        @TestMetadata("writeToParcel.kt")
        public void testWriteToParcel() throws Exception {
            runTest("plugins/parcelize/parcelize-ide/testData/quickfix/deleteIncompatible/writeToParcel.kt");
        }
    }

    @TestMetadata("plugins/parcelize/parcelize-ide/testData/quickfix/migrations")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Migrations extends AbstractParcelizeQuickFixTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        public void testAllFilesPresentInMigrations() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("plugins/parcelize/parcelize-ide/testData/quickfix/migrations"), Pattern.compile("^([\\w\\-_]+)\\.kt$"), null, true);
        }

        @TestMetadata("basic.kt")
        public void testBasic() throws Exception {
            runTest("plugins/parcelize/parcelize-ide/testData/quickfix/migrations/basic.kt");
        }

        @TestMetadata("complexCase1.kt")
        public void testComplexCase1() throws Exception {
            runTest("plugins/parcelize/parcelize-ide/testData/quickfix/migrations/complexCase1.kt");
        }

        @TestMetadata("customDescribeContents.kt")
        public void testCustomDescribeContents() throws Exception {
            runTest("plugins/parcelize/parcelize-ide/testData/quickfix/migrations/customDescribeContents.kt");
        }

        @TestMetadata("fromCreatorObject.kt")
        public void testFromCreatorObject() throws Exception {
            runTest("plugins/parcelize/parcelize-ide/testData/quickfix/migrations/fromCreatorObject.kt");
        }

        @TestMetadata("innerClassFactory.kt")
        public void testInnerClassFactory() throws Exception {
            runTest("plugins/parcelize/parcelize-ide/testData/quickfix/migrations/innerClassFactory.kt");
        }

        @TestMetadata("jvmField.kt")
        public void testJvmField() throws Exception {
            runTest("plugins/parcelize/parcelize-ide/testData/quickfix/migrations/jvmField.kt");
        }

        @TestMetadata("withoutDescribeContents.kt")
        public void testWithoutDescribeContents() throws Exception {
            runTest("plugins/parcelize/parcelize-ide/testData/quickfix/migrations/withoutDescribeContents.kt");
        }
    }

    @TestMetadata("plugins/parcelize/parcelize-ide/testData/quickfix/noParcelableSupertype")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class NoParcelableSupertype extends AbstractParcelizeQuickFixTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        public void testAllFilesPresentInNoParcelableSupertype() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("plugins/parcelize/parcelize-ide/testData/quickfix/noParcelableSupertype"), Pattern.compile("^([\\w\\-_]+)\\.kt$"), null, true);
        }

        @TestMetadata("alreadyHasSupertype.kt")
        public void testAlreadyHasSupertype() throws Exception {
            runTest("plugins/parcelize/parcelize-ide/testData/quickfix/noParcelableSupertype/alreadyHasSupertype.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("plugins/parcelize/parcelize-ide/testData/quickfix/noParcelableSupertype/simple.kt");
        }
    }

    @TestMetadata("plugins/parcelize/parcelize-ide/testData/quickfix/propertyWontBeSerialized")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class PropertyWontBeSerialized extends AbstractParcelizeQuickFixTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        public void testAllFilesPresentInPropertyWontBeSerialized() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("plugins/parcelize/parcelize-ide/testData/quickfix/propertyWontBeSerialized"), Pattern.compile("^([\\w\\-_]+)\\.kt$"), null, true);
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("plugins/parcelize/parcelize-ide/testData/quickfix/propertyWontBeSerialized/simple.kt");
        }
    }

    @TestMetadata("plugins/parcelize/parcelize-ide/testData/quickfix/removeDuplicatingTypeParcelerAnnotation")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class RemoveDuplicatingTypeParcelerAnnotation extends AbstractParcelizeQuickFixTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        public void testAllFilesPresentInRemoveDuplicatingTypeParcelerAnnotation() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("plugins/parcelize/parcelize-ide/testData/quickfix/removeDuplicatingTypeParcelerAnnotation"), Pattern.compile("^([\\w\\-_]+)\\.kt$"), null, true);
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("plugins/parcelize/parcelize-ide/testData/quickfix/removeDuplicatingTypeParcelerAnnotation/simple.kt");
        }
    }
}
