FILE fqName:<root> fileName:/chainOfSafeCalls.kt
  CLASS CLASS name:C modality:FINAL visibility:public superTypes:[kotlin.Any]
    thisReceiver: VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> type:<root>.C
    CONSTRUCTOR visibility:public returnType:<root>.C [primary]
      BLOCK_BODY
        DELEGATING_CONSTRUCTOR_CALL 'public constructor <init> () declared in kotlin.Any'
        INSTANCE_INITIALIZER_CALL classDescriptor='CLASS CLASS name:C modality:FINAL visibility:public superTypes:[kotlin.Any]' type=kotlin.Unit
    FUN FAKE_OVERRIDE name:equals visibility:public modality:OPEN returnType:kotlin.Boolean [fake_override,operator]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Any
      VALUE_PARAMETER kind:Regular name:other index:1 type:kotlin.Any?
      overridden:
        public open fun equals (other: kotlin.Any?): kotlin.Boolean declared in kotlin.Any
    FUN FAKE_OVERRIDE name:hashCode visibility:public modality:OPEN returnType:kotlin.Int [fake_override]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Any
      overridden:
        public open fun hashCode (): kotlin.Int declared in kotlin.Any
    FUN FAKE_OVERRIDE name:toString visibility:public modality:OPEN returnType:kotlin.String [fake_override]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Any
      overridden:
        public open fun toString (): kotlin.String declared in kotlin.Any
    FUN name:bar visibility:public modality:FINAL returnType:<root>.C?
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.C
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='public final fun bar (): <root>.C? declared in <root>.C'
          GET_VAR '<this>: <root>.C declared in <root>.C.bar' type=<root>.C origin=null
    FUN name:foo visibility:public modality:FINAL returnType:<root>.C
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.C
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='public final fun foo (): <root>.C declared in <root>.C'
          GET_VAR '<this>: <root>.C declared in <root>.C.foo' type=<root>.C origin=null
  FUN name:test visibility:public modality:FINAL returnType:<root>.C?
    VALUE_PARAMETER kind:Regular name:nc index:0 type:<root>.C?
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='public final fun test (nc: <root>.C?): <root>.C? declared in <root>'
        BLOCK type=<root>.C? origin=SAFE_CALL
          VAR IR_TEMPORARY_VARIABLE name:tmp_0 type:<root>.C? [val]
            BLOCK type=<root>.C? origin=SAFE_CALL
              VAR IR_TEMPORARY_VARIABLE name:tmp_1 type:<root>.C? [val]
                BLOCK type=<root>.C? origin=SAFE_CALL
                  VAR IR_TEMPORARY_VARIABLE name:tmp_2 type:<root>.C? [val]
                    BLOCK type=<root>.C? origin=SAFE_CALL
                      VAR IR_TEMPORARY_VARIABLE name:tmp_3 type:<root>.C? [val]
                        GET_VAR 'nc: <root>.C? declared in <root>.test' type=<root>.C? origin=null
                      WHEN type=<root>.C? origin=null
                        BRANCH
                          if: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                            ARG arg0: GET_VAR 'val tmp_3: <root>.C? declared in <root>.test' type=<root>.C? origin=null
                            ARG arg1: CONST Null type=kotlin.Nothing? value=null
                          then: CONST Null type=kotlin.Nothing? value=null
                        BRANCH
                          if: CONST Boolean type=kotlin.Boolean value=true
                          then: CALL 'public final fun foo (): <root>.C declared in <root>.C' type=<root>.C origin=null
                            ARG <this>: GET_VAR 'val tmp_3: <root>.C? declared in <root>.test' type=<root>.C? origin=null
                  WHEN type=<root>.C? origin=null
                    BRANCH
                      if: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                        ARG arg0: GET_VAR 'val tmp_2: <root>.C? declared in <root>.test' type=<root>.C? origin=null
                        ARG arg1: CONST Null type=kotlin.Nothing? value=null
                      then: CONST Null type=kotlin.Nothing? value=null
                    BRANCH
                      if: CONST Boolean type=kotlin.Boolean value=true
                      then: CALL 'public final fun bar (): <root>.C? declared in <root>.C' type=<root>.C? origin=null
                        ARG <this>: GET_VAR 'val tmp_2: <root>.C? declared in <root>.test' type=<root>.C? origin=null
              WHEN type=<root>.C? origin=null
                BRANCH
                  if: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                    ARG arg0: GET_VAR 'val tmp_1: <root>.C? declared in <root>.test' type=<root>.C? origin=null
                    ARG arg1: CONST Null type=kotlin.Nothing? value=null
                  then: CONST Null type=kotlin.Nothing? value=null
                BRANCH
                  if: CONST Boolean type=kotlin.Boolean value=true
                  then: CALL 'public final fun foo (): <root>.C declared in <root>.C' type=<root>.C origin=null
                    ARG <this>: GET_VAR 'val tmp_1: <root>.C? declared in <root>.test' type=<root>.C? origin=null
          WHEN type=<root>.C? origin=null
            BRANCH
              if: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                ARG arg0: GET_VAR 'val tmp_0: <root>.C? declared in <root>.test' type=<root>.C? origin=null
                ARG arg1: CONST Null type=kotlin.Nothing? value=null
              then: CONST Null type=kotlin.Nothing? value=null
            BRANCH
              if: CONST Boolean type=kotlin.Boolean value=true
              then: CALL 'public final fun foo (): <root>.C declared in <root>.C' type=<root>.C origin=null
                ARG <this>: GET_VAR 'val tmp_0: <root>.C? declared in <root>.test' type=<root>.C? origin=null
