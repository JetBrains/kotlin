/*
 * Copyright 2010-2014 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.jet.plugin.intentions;

import junit.framework.Assert;
import junit.framework.Test;
import junit.framework.TestSuite;

import java.io.File;
import java.util.regex.Pattern;
import org.jetbrains.jet.JetTestUtils;
import org.jetbrains.jet.test.InnerTestClasses;
import org.jetbrains.jet.test.TestMetadata;

import org.jetbrains.jet.plugin.intentions.AbstractCodeTransformationTest;

/** This class is generated by {@link org.jetbrains.jet.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@InnerTestClasses({CodeTransformationTestGenerated.IfToAssignment.class, CodeTransformationTestGenerated.IfToReturn.class, CodeTransformationTestGenerated.IfToReturnAsymmetrically.class, CodeTransformationTestGenerated.WhenToAssignment.class, CodeTransformationTestGenerated.WhenToReturn.class, CodeTransformationTestGenerated.AssignmentToIf.class, CodeTransformationTestGenerated.AssignmentToWhen.class, CodeTransformationTestGenerated.PropertyToIf.class, CodeTransformationTestGenerated.PropertyToWhen.class, CodeTransformationTestGenerated.ReturnToIf.class, CodeTransformationTestGenerated.ReturnToWhen.class, CodeTransformationTestGenerated.IfToWhen.class, CodeTransformationTestGenerated.WhenToIf.class, CodeTransformationTestGenerated.Flatten.class, CodeTransformationTestGenerated.Merge.class, CodeTransformationTestGenerated.IntroduceSubject.class, CodeTransformationTestGenerated.EliminateSubject.class, CodeTransformationTestGenerated.Split.class, CodeTransformationTestGenerated.Join.class, CodeTransformationTestGenerated.ConvertMemberToExtension.class, CodeTransformationTestGenerated.ReconstructedType.class, CodeTransformationTestGenerated.RemoveUnnecessaryParentheses.class, CodeTransformationTestGenerated.ReplaceWithDotQualifiedMethodCall.class, CodeTransformationTestGenerated.ReplaceWithInfixFunctionCall.class, CodeTransformationTestGenerated.RemoveCurlyBracesFromTemplate.class, CodeTransformationTestGenerated.MoveLambdaInsideParentheses.class, CodeTransformationTestGenerated.MoveLambdaOutsideParentheses.class})
public class CodeTransformationTestGenerated extends AbstractCodeTransformationTest {
    @TestMetadata("idea/testData/intentions/branched/folding/ifToAssignment")
    public static class IfToAssignment extends AbstractCodeTransformationTest {
        public void testAllFilesPresentInIfToAssignment() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/branched/folding/ifToAssignment"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("innerIfTransformed.kt")
        public void testInnerIfTransformed() throws Exception {
            doTestFoldIfToAssignment("idea/testData/intentions/branched/folding/ifToAssignment/innerIfTransformed.kt");
        }
        
        @TestMetadata("simpleIf.kt")
        public void testSimpleIf() throws Exception {
            doTestFoldIfToAssignment("idea/testData/intentions/branched/folding/ifToAssignment/simpleIf.kt");
        }
        
        @TestMetadata("simpleIfWithAugmentedAssignment.kt")
        public void testSimpleIfWithAugmentedAssignment() throws Exception {
            doTestFoldIfToAssignment("idea/testData/intentions/branched/folding/ifToAssignment/simpleIfWithAugmentedAssignment.kt");
        }
        
        @TestMetadata("simpleIfWithBlocks.kt")
        public void testSimpleIfWithBlocks() throws Exception {
            doTestFoldIfToAssignment("idea/testData/intentions/branched/folding/ifToAssignment/simpleIfWithBlocks.kt");
        }
        
        @TestMetadata("simpleIfWithShadowedVar.kt")
        public void testSimpleIfWithShadowedVar() throws Exception {
            doTestFoldIfToAssignment("idea/testData/intentions/branched/folding/ifToAssignment/simpleIfWithShadowedVar.kt");
        }
        
        @TestMetadata("simpleIfWithUnmatchedAssignmentOps.kt")
        public void testSimpleIfWithUnmatchedAssignmentOps() throws Exception {
            doTestFoldIfToAssignment("idea/testData/intentions/branched/folding/ifToAssignment/simpleIfWithUnmatchedAssignmentOps.kt");
        }
        
        @TestMetadata("simpleIfWithUnmatchedAssignments.kt")
        public void testSimpleIfWithUnmatchedAssignments() throws Exception {
            doTestFoldIfToAssignment("idea/testData/intentions/branched/folding/ifToAssignment/simpleIfWithUnmatchedAssignments.kt");
        }
        
        @TestMetadata("simpleIfWithoutElse.kt")
        public void testSimpleIfWithoutElse() throws Exception {
            doTestFoldIfToAssignment("idea/testData/intentions/branched/folding/ifToAssignment/simpleIfWithoutElse.kt");
        }
        
        @TestMetadata("simpleIfWithoutTerminatingAssignment.kt")
        public void testSimpleIfWithoutTerminatingAssignment() throws Exception {
            doTestFoldIfToAssignment("idea/testData/intentions/branched/folding/ifToAssignment/simpleIfWithoutTerminatingAssignment.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/branched/folding/ifToReturn")
    public static class IfToReturn extends AbstractCodeTransformationTest {
        public void testAllFilesPresentInIfToReturn() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/branched/folding/ifToReturn"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("innerIfTransformed.kt")
        public void testInnerIfTransformed() throws Exception {
            doTestFoldIfToReturn("idea/testData/intentions/branched/folding/ifToReturn/innerIfTransformed.kt");
        }
        
        @TestMetadata("simpleIf.kt")
        public void testSimpleIf() throws Exception {
            doTestFoldIfToReturn("idea/testData/intentions/branched/folding/ifToReturn/simpleIf.kt");
        }
        
        @TestMetadata("simpleIfWithBlocks.kt")
        public void testSimpleIfWithBlocks() throws Exception {
            doTestFoldIfToReturn("idea/testData/intentions/branched/folding/ifToReturn/simpleIfWithBlocks.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/branched/folding/ifToReturnAsymmetrically")
    public static class IfToReturnAsymmetrically extends AbstractCodeTransformationTest {
        public void testAllFilesPresentInIfToReturnAsymmetrically() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/branched/folding/ifToReturnAsymmetrically"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("simpleIf.kt")
        public void testSimpleIf() throws Exception {
            doTestFoldIfToReturnAsymmetrically("idea/testData/intentions/branched/folding/ifToReturnAsymmetrically/simpleIf.kt");
        }
        
        @TestMetadata("simpleIfWithBlocks.kt")
        public void testSimpleIfWithBlocks() throws Exception {
            doTestFoldIfToReturnAsymmetrically("idea/testData/intentions/branched/folding/ifToReturnAsymmetrically/simpleIfWithBlocks.kt");
        }
        
        @TestMetadata("simpleIfWithComments.kt")
        public void testSimpleIfWithComments() throws Exception {
            doTestFoldIfToReturnAsymmetrically("idea/testData/intentions/branched/folding/ifToReturnAsymmetrically/simpleIfWithComments.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/branched/folding/whenToAssignment")
    public static class WhenToAssignment extends AbstractCodeTransformationTest {
        public void testAllFilesPresentInWhenToAssignment() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/branched/folding/whenToAssignment"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("innerWhenTransformed.kt")
        public void testInnerWhenTransformed() throws Exception {
            doTestFoldWhenToAssignment("idea/testData/intentions/branched/folding/whenToAssignment/innerWhenTransformed.kt");
        }
        
        @TestMetadata("simpleWhen.kt")
        public void testSimpleWhen() throws Exception {
            doTestFoldWhenToAssignment("idea/testData/intentions/branched/folding/whenToAssignment/simpleWhen.kt");
        }
        
        @TestMetadata("simpleWhenWithBlocks.kt")
        public void testSimpleWhenWithBlocks() throws Exception {
            doTestFoldWhenToAssignment("idea/testData/intentions/branched/folding/whenToAssignment/simpleWhenWithBlocks.kt");
        }
        
        @TestMetadata("simpleWhenWithShadowedVar.kt")
        public void testSimpleWhenWithShadowedVar() throws Exception {
            doTestFoldWhenToAssignment("idea/testData/intentions/branched/folding/whenToAssignment/simpleWhenWithShadowedVar.kt");
        }
        
        @TestMetadata("simpleWhenWithUnmatchedAssignments.kt")
        public void testSimpleWhenWithUnmatchedAssignments() throws Exception {
            doTestFoldWhenToAssignment("idea/testData/intentions/branched/folding/whenToAssignment/simpleWhenWithUnmatchedAssignments.kt");
        }
        
        @TestMetadata("simpleWhenWithoutTerminatingAssignment.kt")
        public void testSimpleWhenWithoutTerminatingAssignment() throws Exception {
            doTestFoldWhenToAssignment("idea/testData/intentions/branched/folding/whenToAssignment/simpleWhenWithoutTerminatingAssignment.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/branched/folding/whenToReturn")
    public static class WhenToReturn extends AbstractCodeTransformationTest {
        public void testAllFilesPresentInWhenToReturn() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/branched/folding/whenToReturn"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("innerWhenTransformed.kt")
        public void testInnerWhenTransformed() throws Exception {
            doTestFoldWhenToReturn("idea/testData/intentions/branched/folding/whenToReturn/innerWhenTransformed.kt");
        }
        
        @TestMetadata("simpleWhen.kt")
        public void testSimpleWhen() throws Exception {
            doTestFoldWhenToReturn("idea/testData/intentions/branched/folding/whenToReturn/simpleWhen.kt");
        }
        
        @TestMetadata("simpleWhenWithBlocks.kt")
        public void testSimpleWhenWithBlocks() throws Exception {
            doTestFoldWhenToReturn("idea/testData/intentions/branched/folding/whenToReturn/simpleWhenWithBlocks.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/branched/unfolding/assignmentToIf")
    public static class AssignmentToIf extends AbstractCodeTransformationTest {
        public void testAllFilesPresentInAssignmentToIf() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/branched/unfolding/assignmentToIf"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("innerIfTransformed.kt")
        public void testInnerIfTransformed() throws Exception {
            doTestUnfoldAssignmentToIf("idea/testData/intentions/branched/unfolding/assignmentToIf/innerIfTransformed.kt");
        }
        
        @TestMetadata("nestedIfs.kt")
        public void testNestedIfs() throws Exception {
            doTestUnfoldAssignmentToIf("idea/testData/intentions/branched/unfolding/assignmentToIf/nestedIfs.kt");
        }
        
        @TestMetadata("simpleIf.kt")
        public void testSimpleIf() throws Exception {
            doTestUnfoldAssignmentToIf("idea/testData/intentions/branched/unfolding/assignmentToIf/simpleIf.kt");
        }
        
        @TestMetadata("simpleIfWithAugmentedAssignment.kt")
        public void testSimpleIfWithAugmentedAssignment() throws Exception {
            doTestUnfoldAssignmentToIf("idea/testData/intentions/branched/unfolding/assignmentToIf/simpleIfWithAugmentedAssignment.kt");
        }
        
        @TestMetadata("simpleIfWithBlocks.kt")
        public void testSimpleIfWithBlocks() throws Exception {
            doTestUnfoldAssignmentToIf("idea/testData/intentions/branched/unfolding/assignmentToIf/simpleIfWithBlocks.kt");
        }
        
        @TestMetadata("simpleIfWithComplexAssignmentLHS.kt")
        public void testSimpleIfWithComplexAssignmentLHS() throws Exception {
            doTestUnfoldAssignmentToIf("idea/testData/intentions/branched/unfolding/assignmentToIf/simpleIfWithComplexAssignmentLHS.kt");
        }
        
        @TestMetadata("simpleIfWithoutAssignment.kt")
        public void testSimpleIfWithoutAssignment() throws Exception {
            doTestUnfoldAssignmentToIf("idea/testData/intentions/branched/unfolding/assignmentToIf/simpleIfWithoutAssignment.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/branched/unfolding/assignmentToWhen")
    public static class AssignmentToWhen extends AbstractCodeTransformationTest {
        public void testAllFilesPresentInAssignmentToWhen() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/branched/unfolding/assignmentToWhen"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("innerWhenTransformed.kt")
        public void testInnerWhenTransformed() throws Exception {
            doTestUnfoldAssignmentToWhen("idea/testData/intentions/branched/unfolding/assignmentToWhen/innerWhenTransformed.kt");
        }
        
        @TestMetadata("simpleWhen.kt")
        public void testSimpleWhen() throws Exception {
            doTestUnfoldAssignmentToWhen("idea/testData/intentions/branched/unfolding/assignmentToWhen/simpleWhen.kt");
        }
        
        @TestMetadata("simpleWhenWithBlocks.kt")
        public void testSimpleWhenWithBlocks() throws Exception {
            doTestUnfoldAssignmentToWhen("idea/testData/intentions/branched/unfolding/assignmentToWhen/simpleWhenWithBlocks.kt");
        }
        
        @TestMetadata("simpleWhenWithComplexAssignmentLHS.kt")
        public void testSimpleWhenWithComplexAssignmentLHS() throws Exception {
            doTestUnfoldAssignmentToWhen("idea/testData/intentions/branched/unfolding/assignmentToWhen/simpleWhenWithComplexAssignmentLHS.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/branched/unfolding/propertyToIf")
    public static class PropertyToIf extends AbstractCodeTransformationTest {
        public void testAllFilesPresentInPropertyToIf() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/branched/unfolding/propertyToIf"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("nestedIfs.kt")
        public void testNestedIfs() throws Exception {
            doTestUnfoldPropertyToIf("idea/testData/intentions/branched/unfolding/propertyToIf/nestedIfs.kt");
        }
        
        @TestMetadata("nestedIfs2.kt")
        public void testNestedIfs2() throws Exception {
            doTestUnfoldPropertyToIf("idea/testData/intentions/branched/unfolding/propertyToIf/nestedIfs2.kt");
        }
        
        @TestMetadata("nonLocalProperty.kt")
        public void testNonLocalProperty() throws Exception {
            doTestUnfoldPropertyToIf("idea/testData/intentions/branched/unfolding/propertyToIf/nonLocalProperty.kt");
        }
        
        @TestMetadata("nonLocalProperty2.kt")
        public void testNonLocalProperty2() throws Exception {
            doTestUnfoldPropertyToIf("idea/testData/intentions/branched/unfolding/propertyToIf/nonLocalProperty2.kt");
        }
        
        @TestMetadata("simpleIf.kt")
        public void testSimpleIf() throws Exception {
            doTestUnfoldPropertyToIf("idea/testData/intentions/branched/unfolding/propertyToIf/simpleIf.kt");
        }
        
        @TestMetadata("simpleIf2.kt")
        public void testSimpleIf2() throws Exception {
            doTestUnfoldPropertyToIf("idea/testData/intentions/branched/unfolding/propertyToIf/simpleIf2.kt");
        }
        
        @TestMetadata("simpleIfWithBlocks.kt")
        public void testSimpleIfWithBlocks() throws Exception {
            doTestUnfoldPropertyToIf("idea/testData/intentions/branched/unfolding/propertyToIf/simpleIfWithBlocks.kt");
        }
        
        @TestMetadata("simpleIfWithBlocks2.kt")
        public void testSimpleIfWithBlocks2() throws Exception {
            doTestUnfoldPropertyToIf("idea/testData/intentions/branched/unfolding/propertyToIf/simpleIfWithBlocks2.kt");
        }
        
        @TestMetadata("simpleIfWithType.kt")
        public void testSimpleIfWithType() throws Exception {
            doTestUnfoldPropertyToIf("idea/testData/intentions/branched/unfolding/propertyToIf/simpleIfWithType.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/branched/unfolding/propertyToWhen")
    public static class PropertyToWhen extends AbstractCodeTransformationTest {
        public void testAllFilesPresentInPropertyToWhen() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/branched/unfolding/propertyToWhen"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("nonLocalProperty.kt")
        public void testNonLocalProperty() throws Exception {
            doTestUnfoldPropertyToWhen("idea/testData/intentions/branched/unfolding/propertyToWhen/nonLocalProperty.kt");
        }
        
        @TestMetadata("nonLocalProperty2.kt")
        public void testNonLocalProperty2() throws Exception {
            doTestUnfoldPropertyToWhen("idea/testData/intentions/branched/unfolding/propertyToWhen/nonLocalProperty2.kt");
        }
        
        @TestMetadata("simpleWhen.kt")
        public void testSimpleWhen() throws Exception {
            doTestUnfoldPropertyToWhen("idea/testData/intentions/branched/unfolding/propertyToWhen/simpleWhen.kt");
        }
        
        @TestMetadata("simpleWhen2.kt")
        public void testSimpleWhen2() throws Exception {
            doTestUnfoldPropertyToWhen("idea/testData/intentions/branched/unfolding/propertyToWhen/simpleWhen2.kt");
        }
        
        @TestMetadata("simpleWhenWithBlocks.kt")
        public void testSimpleWhenWithBlocks() throws Exception {
            doTestUnfoldPropertyToWhen("idea/testData/intentions/branched/unfolding/propertyToWhen/simpleWhenWithBlocks.kt");
        }
        
        @TestMetadata("simpleWhenWithBlocks2.kt")
        public void testSimpleWhenWithBlocks2() throws Exception {
            doTestUnfoldPropertyToWhen("idea/testData/intentions/branched/unfolding/propertyToWhen/simpleWhenWithBlocks2.kt");
        }
        
        @TestMetadata("simpleWhenWithType.kt")
        public void testSimpleWhenWithType() throws Exception {
            doTestUnfoldPropertyToWhen("idea/testData/intentions/branched/unfolding/propertyToWhen/simpleWhenWithType.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/branched/unfolding/returnToIf")
    public static class ReturnToIf extends AbstractCodeTransformationTest {
        public void testAllFilesPresentInReturnToIf() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/branched/unfolding/returnToIf"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("innerIfTransformed.kt")
        public void testInnerIfTransformed() throws Exception {
            doTestUnfoldReturnToIf("idea/testData/intentions/branched/unfolding/returnToIf/innerIfTransformed.kt");
        }
        
        @TestMetadata("simpleIf.kt")
        public void testSimpleIf() throws Exception {
            doTestUnfoldReturnToIf("idea/testData/intentions/branched/unfolding/returnToIf/simpleIf.kt");
        }
        
        @TestMetadata("simpleIfWithBlocks.kt")
        public void testSimpleIfWithBlocks() throws Exception {
            doTestUnfoldReturnToIf("idea/testData/intentions/branched/unfolding/returnToIf/simpleIfWithBlocks.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/branched/unfolding/returnToWhen")
    public static class ReturnToWhen extends AbstractCodeTransformationTest {
        public void testAllFilesPresentInReturnToWhen() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/branched/unfolding/returnToWhen"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("innerWhenTransformed.kt")
        public void testInnerWhenTransformed() throws Exception {
            doTestUnfoldReturnToWhen("idea/testData/intentions/branched/unfolding/returnToWhen/innerWhenTransformed.kt");
        }
        
        @TestMetadata("simpleWhen.kt")
        public void testSimpleWhen() throws Exception {
            doTestUnfoldReturnToWhen("idea/testData/intentions/branched/unfolding/returnToWhen/simpleWhen.kt");
        }
        
        @TestMetadata("simpleWhenWithBlocks.kt")
        public void testSimpleWhenWithBlocks() throws Exception {
            doTestUnfoldReturnToWhen("idea/testData/intentions/branched/unfolding/returnToWhen/simpleWhenWithBlocks.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/branched/ifWhen/ifToWhen")
    public static class IfToWhen extends AbstractCodeTransformationTest {
        public void testAllFilesPresentInIfToWhen() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/branched/ifWhen/ifToWhen"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("ifWithEqualityTests.kt")
        public void testIfWithEqualityTests() throws Exception {
            doTestIfToWhen("idea/testData/intentions/branched/ifWhen/ifToWhen/ifWithEqualityTests.kt");
        }
        
        @TestMetadata("ifWithIs.kt")
        public void testIfWithIs() throws Exception {
            doTestIfToWhen("idea/testData/intentions/branched/ifWhen/ifToWhen/ifWithIs.kt");
        }
        
        @TestMetadata("ifWithMultiConditions.kt")
        public void testIfWithMultiConditions() throws Exception {
            doTestIfToWhen("idea/testData/intentions/branched/ifWhen/ifToWhen/ifWithMultiConditions.kt");
        }
        
        @TestMetadata("ifWithNegativeIs.kt")
        public void testIfWithNegativeIs() throws Exception {
            doTestIfToWhen("idea/testData/intentions/branched/ifWhen/ifToWhen/ifWithNegativeIs.kt");
        }
        
        @TestMetadata("ifWithNegativeRangeTests.kt")
        public void testIfWithNegativeRangeTests() throws Exception {
            doTestIfToWhen("idea/testData/intentions/branched/ifWhen/ifToWhen/ifWithNegativeRangeTests.kt");
        }
        
        @TestMetadata("ifWithRangeTests.kt")
        public void testIfWithRangeTests() throws Exception {
            doTestIfToWhen("idea/testData/intentions/branched/ifWhen/ifToWhen/ifWithRangeTests.kt");
        }
        
        @TestMetadata("ifWithRangeTestsAndMultiConditions.kt")
        public void testIfWithRangeTestsAndMultiConditions() throws Exception {
            doTestIfToWhen("idea/testData/intentions/branched/ifWhen/ifToWhen/ifWithRangeTestsAndMultiConditions.kt");
        }
        
        @TestMetadata("ifWithRangeTestsAndUnparenthesizedMultiConditions.kt")
        public void testIfWithRangeTestsAndUnparenthesizedMultiConditions() throws Exception {
            doTestIfToWhen("idea/testData/intentions/branched/ifWhen/ifToWhen/ifWithRangeTestsAndUnparenthesizedMultiConditions.kt");
        }
        
        @TestMetadata("ifWithoutElse.kt")
        public void testIfWithoutElse() throws Exception {
            doTestIfToWhen("idea/testData/intentions/branched/ifWhen/ifToWhen/ifWithoutElse.kt");
        }
        
        @TestMetadata("whenWithMultipleConditionTypes.kt")
        public void testWhenWithMultipleConditionTypes() throws Exception {
            doTestIfToWhen("idea/testData/intentions/branched/ifWhen/ifToWhen/whenWithMultipleConditionTypes.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/branched/ifWhen/whenToIf")
    public static class WhenToIf extends AbstractCodeTransformationTest {
        public void testAllFilesPresentInWhenToIf() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/branched/ifWhen/whenToIf"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("whenWithEqualityTests.kt")
        public void testWhenWithEqualityTests() throws Exception {
            doTestWhenToIf("idea/testData/intentions/branched/ifWhen/whenToIf/whenWithEqualityTests.kt");
        }
        
        @TestMetadata("whenWithMultiConditions.kt")
        public void testWhenWithMultiConditions() throws Exception {
            doTestWhenToIf("idea/testData/intentions/branched/ifWhen/whenToIf/whenWithMultiConditions.kt");
        }
        
        @TestMetadata("whenWithMultipleConditionTypes.kt")
        public void testWhenWithMultipleConditionTypes() throws Exception {
            doTestWhenToIf("idea/testData/intentions/branched/ifWhen/whenToIf/whenWithMultipleConditionTypes.kt");
        }
        
        @TestMetadata("whenWithNegativePatterns.kt")
        public void testWhenWithNegativePatterns() throws Exception {
            doTestWhenToIf("idea/testData/intentions/branched/ifWhen/whenToIf/whenWithNegativePatterns.kt");
        }
        
        @TestMetadata("whenWithNegativeRangeTests.kt")
        public void testWhenWithNegativeRangeTests() throws Exception {
            doTestWhenToIf("idea/testData/intentions/branched/ifWhen/whenToIf/whenWithNegativeRangeTests.kt");
        }
        
        @TestMetadata("whenWithPatterns.kt")
        public void testWhenWithPatterns() throws Exception {
            doTestWhenToIf("idea/testData/intentions/branched/ifWhen/whenToIf/whenWithPatterns.kt");
        }
        
        @TestMetadata("whenWithRangeTests.kt")
        public void testWhenWithRangeTests() throws Exception {
            doTestWhenToIf("idea/testData/intentions/branched/ifWhen/whenToIf/whenWithRangeTests.kt");
        }
        
        @TestMetadata("whenWithRangeTestsAndMultiConditions.kt")
        public void testWhenWithRangeTestsAndMultiConditions() throws Exception {
            doTestWhenToIf("idea/testData/intentions/branched/ifWhen/whenToIf/whenWithRangeTestsAndMultiConditions.kt");
        }
        
        @TestMetadata("whenWithoutElse.kt")
        public void testWhenWithoutElse() throws Exception {
            doTestWhenToIf("idea/testData/intentions/branched/ifWhen/whenToIf/whenWithoutElse.kt");
        }
        
        @TestMetadata("whenWithoutSubject.kt")
        public void testWhenWithoutSubject() throws Exception {
            doTestWhenToIf("idea/testData/intentions/branched/ifWhen/whenToIf/whenWithoutSubject.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/branched/when/flatten")
    public static class Flatten extends AbstractCodeTransformationTest {
        public void testAllFilesPresentInFlatten() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/branched/when/flatten"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("flattenWithSubject.kt")
        public void testFlattenWithSubject() throws Exception {
            doTestFlattenWhen("idea/testData/intentions/branched/when/flatten/flattenWithSubject.kt");
        }
        
        @TestMetadata("flattenWithUnmatchedSubjects.kt")
        public void testFlattenWithUnmatchedSubjects() throws Exception {
            doTestFlattenWhen("idea/testData/intentions/branched/when/flatten/flattenWithUnmatchedSubjects.kt");
        }
        
        @TestMetadata("flattenWithoutSubject.kt")
        public void testFlattenWithoutSubject() throws Exception {
            doTestFlattenWhen("idea/testData/intentions/branched/when/flatten/flattenWithoutSubject.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/branched/when/merge")
    public static class Merge extends AbstractCodeTransformationTest {
        public void testAllFilesPresentInMerge() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/branched/when/merge"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("mergeBlockWithBlock.kt")
        public void testMergeBlockWithBlock() throws Exception {
            doTestMergeWhen("idea/testData/intentions/branched/when/merge/mergeBlockWithBlock.kt");
        }
        
        @TestMetadata("mergeBlockWithSingle.kt")
        public void testMergeBlockWithSingle() throws Exception {
            doTestMergeWhen("idea/testData/intentions/branched/when/merge/mergeBlockWithSingle.kt");
        }
        
        @TestMetadata("mergeWithConflictingDeclarations.kt")
        public void testMergeWithConflictingDeclarations() throws Exception {
            doTestMergeWhen("idea/testData/intentions/branched/when/merge/mergeWithConflictingDeclarations.kt");
        }
        
        @TestMetadata("mergeWithDeclarations.kt")
        public void testMergeWithDeclarations() throws Exception {
            doTestMergeWhen("idea/testData/intentions/branched/when/merge/mergeWithDeclarations.kt");
        }
        
        @TestMetadata("mergeWithReturnAfter.kt")
        public void testMergeWithReturnAfter() throws Exception {
            doTestMergeWhen("idea/testData/intentions/branched/when/merge/mergeWithReturnAfter.kt");
        }
        
        @TestMetadata("mergeWithReturnBefore.kt")
        public void testMergeWithReturnBefore() throws Exception {
            doTestMergeWhen("idea/testData/intentions/branched/when/merge/mergeWithReturnBefore.kt");
        }
        
        @TestMetadata("mergeWithSubject.kt")
        public void testMergeWithSubject() throws Exception {
            doTestMergeWhen("idea/testData/intentions/branched/when/merge/mergeWithSubject.kt");
        }
        
        @TestMetadata("mergeWithUnmatchedConditions1.kt")
        public void testMergeWithUnmatchedConditions1() throws Exception {
            doTestMergeWhen("idea/testData/intentions/branched/when/merge/mergeWithUnmatchedConditions1.kt");
        }
        
        @TestMetadata("mergeWithUnmatchedConditions2.kt")
        public void testMergeWithUnmatchedConditions2() throws Exception {
            doTestMergeWhen("idea/testData/intentions/branched/when/merge/mergeWithUnmatchedConditions2.kt");
        }
        
        @TestMetadata("mergeWithUnmatchedConditions3.kt")
        public void testMergeWithUnmatchedConditions3() throws Exception {
            doTestMergeWhen("idea/testData/intentions/branched/when/merge/mergeWithUnmatchedConditions3.kt");
        }
        
        @TestMetadata("mergeWithUnmatchedConditions4.kt")
        public void testMergeWithUnmatchedConditions4() throws Exception {
            doTestMergeWhen("idea/testData/intentions/branched/when/merge/mergeWithUnmatchedConditions4.kt");
        }
        
        @TestMetadata("mergeWithUnmatchedConditions5.kt")
        public void testMergeWithUnmatchedConditions5() throws Exception {
            doTestMergeWhen("idea/testData/intentions/branched/when/merge/mergeWithUnmatchedConditions5.kt");
        }
        
        @TestMetadata("mergeWithUnmatchedConditions6.kt")
        public void testMergeWithUnmatchedConditions6() throws Exception {
            doTestMergeWhen("idea/testData/intentions/branched/when/merge/mergeWithUnmatchedConditions6.kt");
        }
        
        @TestMetadata("mergeWithUnmatchedConditions7.kt")
        public void testMergeWithUnmatchedConditions7() throws Exception {
            doTestMergeWhen("idea/testData/intentions/branched/when/merge/mergeWithUnmatchedConditions7.kt");
        }
        
        @TestMetadata("mergeWithUnmatchedSubjects1.kt")
        public void testMergeWithUnmatchedSubjects1() throws Exception {
            doTestMergeWhen("idea/testData/intentions/branched/when/merge/mergeWithUnmatchedSubjects1.kt");
        }
        
        @TestMetadata("mergeWithUnmatchedSubjects2.kt")
        public void testMergeWithUnmatchedSubjects2() throws Exception {
            doTestMergeWhen("idea/testData/intentions/branched/when/merge/mergeWithUnmatchedSubjects2.kt");
        }
        
        @TestMetadata("mergeWithoutSubject.kt")
        public void testMergeWithoutSubject() throws Exception {
            doTestMergeWhen("idea/testData/intentions/branched/when/merge/mergeWithoutSubject.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/branched/when/introduceSubject")
    public static class IntroduceSubject extends AbstractCodeTransformationTest {
        public void testAllFilesPresentInIntroduceSubject() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/branched/when/introduceSubject"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("whenWithEqualityTests.kt")
        public void testWhenWithEqualityTests() throws Exception {
            doTestIntroduceWhenSubject("idea/testData/intentions/branched/when/introduceSubject/whenWithEqualityTests.kt");
        }
        
        @TestMetadata("whenWithMultipleConditionTypes.kt")
        public void testWhenWithMultipleConditionTypes() throws Exception {
            doTestIntroduceWhenSubject("idea/testData/intentions/branched/when/introduceSubject/whenWithMultipleConditionTypes.kt");
        }
        
        @TestMetadata("whenWithNegativePatterns.kt")
        public void testWhenWithNegativePatterns() throws Exception {
            doTestIntroduceWhenSubject("idea/testData/intentions/branched/when/introduceSubject/whenWithNegativePatterns.kt");
        }
        
        @TestMetadata("whenWithNegativeRangeTests.kt")
        public void testWhenWithNegativeRangeTests() throws Exception {
            doTestIntroduceWhenSubject("idea/testData/intentions/branched/when/introduceSubject/whenWithNegativeRangeTests.kt");
        }
        
        @TestMetadata("whenWithNondivisibleConditions.kt")
        public void testWhenWithNondivisibleConditions() throws Exception {
            doTestIntroduceWhenSubject("idea/testData/intentions/branched/when/introduceSubject/whenWithNondivisibleConditions.kt");
        }
        
        @TestMetadata("whenWithPatterns.kt")
        public void testWhenWithPatterns() throws Exception {
            doTestIntroduceWhenSubject("idea/testData/intentions/branched/when/introduceSubject/whenWithPatterns.kt");
        }
        
        @TestMetadata("whenWithRangeTests.kt")
        public void testWhenWithRangeTests() throws Exception {
            doTestIntroduceWhenSubject("idea/testData/intentions/branched/when/introduceSubject/whenWithRangeTests.kt");
        }
        
        @TestMetadata("whenWithRangeTestsAndMultiConditions.kt")
        public void testWhenWithRangeTestsAndMultiConditions() throws Exception {
            doTestIntroduceWhenSubject("idea/testData/intentions/branched/when/introduceSubject/whenWithRangeTestsAndMultiConditions.kt");
        }
        
        @TestMetadata("whenWithSubject.kt")
        public void testWhenWithSubject() throws Exception {
            doTestIntroduceWhenSubject("idea/testData/intentions/branched/when/introduceSubject/whenWithSubject.kt");
        }
        
        @TestMetadata("whenWithSwappedEqualityTests.kt")
        public void testWhenWithSwappedEqualityTests() throws Exception {
            doTestIntroduceWhenSubject("idea/testData/intentions/branched/when/introduceSubject/whenWithSwappedEqualityTests.kt");
        }
        
        @TestMetadata("whenWithUnmatchedCandidateSubjects.kt")
        public void testWhenWithUnmatchedCandidateSubjects() throws Exception {
            doTestIntroduceWhenSubject("idea/testData/intentions/branched/when/introduceSubject/whenWithUnmatchedCandidateSubjects.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/branched/when/eliminateSubject")
    public static class EliminateSubject extends AbstractCodeTransformationTest {
        public void testAllFilesPresentInEliminateSubject() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/branched/when/eliminateSubject"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("whenWithEqualityTests.kt")
        public void testWhenWithEqualityTests() throws Exception {
            doTestEliminateWhenSubject("idea/testData/intentions/branched/when/eliminateSubject/whenWithEqualityTests.kt");
        }
        
        @TestMetadata("whenWithMultipleConditionTypes.kt")
        public void testWhenWithMultipleConditionTypes() throws Exception {
            doTestEliminateWhenSubject("idea/testData/intentions/branched/when/eliminateSubject/whenWithMultipleConditionTypes.kt");
        }
        
        @TestMetadata("whenWithNegativePatterns.kt")
        public void testWhenWithNegativePatterns() throws Exception {
            doTestEliminateWhenSubject("idea/testData/intentions/branched/when/eliminateSubject/whenWithNegativePatterns.kt");
        }
        
        @TestMetadata("whenWithNegativeRangeTests.kt")
        public void testWhenWithNegativeRangeTests() throws Exception {
            doTestEliminateWhenSubject("idea/testData/intentions/branched/when/eliminateSubject/whenWithNegativeRangeTests.kt");
        }
        
        @TestMetadata("whenWithPatterns.kt")
        public void testWhenWithPatterns() throws Exception {
            doTestEliminateWhenSubject("idea/testData/intentions/branched/when/eliminateSubject/whenWithPatterns.kt");
        }
        
        @TestMetadata("whenWithRangeTests.kt")
        public void testWhenWithRangeTests() throws Exception {
            doTestEliminateWhenSubject("idea/testData/intentions/branched/when/eliminateSubject/whenWithRangeTests.kt");
        }
        
        @TestMetadata("whenWithRangeTestsAndMultiConditions.kt")
        public void testWhenWithRangeTestsAndMultiConditions() throws Exception {
            doTestEliminateWhenSubject("idea/testData/intentions/branched/when/eliminateSubject/whenWithRangeTestsAndMultiConditions.kt");
        }
        
        @TestMetadata("whenWithoutSubject.kt")
        public void testWhenWithoutSubject() throws Exception {
            doTestEliminateWhenSubject("idea/testData/intentions/branched/when/eliminateSubject/whenWithoutSubject.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/declarations/split")
    public static class Split extends AbstractCodeTransformationTest {
        public void testAllFilesPresentInSplit() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/declarations/split"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("longInit.kt")
        public void testLongInit() throws Exception {
            doTestSplitProperty("idea/testData/intentions/declarations/split/longInit.kt");
        }
        
        @TestMetadata("longInit2.kt")
        public void testLongInit2() throws Exception {
            doTestSplitProperty("idea/testData/intentions/declarations/split/longInit2.kt");
        }
        
        @TestMetadata("noInitializer.kt")
        public void testNoInitializer() throws Exception {
            doTestSplitProperty("idea/testData/intentions/declarations/split/noInitializer.kt");
        }
        
        @TestMetadata("noInitializer2.kt")
        public void testNoInitializer2() throws Exception {
            doTestSplitProperty("idea/testData/intentions/declarations/split/noInitializer2.kt");
        }
        
        @TestMetadata("nonLocalProperty.kt")
        public void testNonLocalProperty() throws Exception {
            doTestSplitProperty("idea/testData/intentions/declarations/split/nonLocalProperty.kt");
        }
        
        @TestMetadata("nonLocalProperty2.kt")
        public void testNonLocalProperty2() throws Exception {
            doTestSplitProperty("idea/testData/intentions/declarations/split/nonLocalProperty2.kt");
        }
        
        @TestMetadata("simpleInit.kt")
        public void testSimpleInit() throws Exception {
            doTestSplitProperty("idea/testData/intentions/declarations/split/simpleInit.kt");
        }
        
        @TestMetadata("simpleInit2.kt")
        public void testSimpleInit2() throws Exception {
            doTestSplitProperty("idea/testData/intentions/declarations/split/simpleInit2.kt");
        }
        
        @TestMetadata("simpleInitWithErrorType.kt")
        public void testSimpleInitWithErrorType() throws Exception {
            doTestSplitProperty("idea/testData/intentions/declarations/split/simpleInitWithErrorType.kt");
        }
        
        @TestMetadata("simpleInitWithErrorType2.kt")
        public void testSimpleInitWithErrorType2() throws Exception {
            doTestSplitProperty("idea/testData/intentions/declarations/split/simpleInitWithErrorType2.kt");
        }
        
        @TestMetadata("simpleInitWithType.kt")
        public void testSimpleInitWithType() throws Exception {
            doTestSplitProperty("idea/testData/intentions/declarations/split/simpleInitWithType.kt");
        }
        
        @TestMetadata("simpleInitWithType2.kt")
        public void testSimpleInitWithType2() throws Exception {
            doTestSplitProperty("idea/testData/intentions/declarations/split/simpleInitWithType2.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/declarations/join")
    public static class Join extends AbstractCodeTransformationTest {
        public void testAllFilesPresentInJoin() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/declarations/join"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("longInit.kt")
        public void testLongInit() throws Exception {
            doTestJoinProperty("idea/testData/intentions/declarations/join/longInit.kt");
        }
        
        @TestMetadata("longInit2.kt")
        public void testLongInit2() throws Exception {
            doTestJoinProperty("idea/testData/intentions/declarations/join/longInit2.kt");
        }
        
        @TestMetadata("simpleInit.kt")
        public void testSimpleInit() throws Exception {
            doTestJoinProperty("idea/testData/intentions/declarations/join/simpleInit.kt");
        }
        
        @TestMetadata("simpleInit2.kt")
        public void testSimpleInit2() throws Exception {
            doTestJoinProperty("idea/testData/intentions/declarations/join/simpleInit2.kt");
        }
        
        @TestMetadata("simpleInitWithBackticks.kt")
        public void testSimpleInitWithBackticks() throws Exception {
            doTestJoinProperty("idea/testData/intentions/declarations/join/simpleInitWithBackticks.kt");
        }
        
        @TestMetadata("simpleInitWithBackticks2.kt")
        public void testSimpleInitWithBackticks2() throws Exception {
            doTestJoinProperty("idea/testData/intentions/declarations/join/simpleInitWithBackticks2.kt");
        }
        
        @TestMetadata("simpleInitWithBackticks3.kt")
        public void testSimpleInitWithBackticks3() throws Exception {
            doTestJoinProperty("idea/testData/intentions/declarations/join/simpleInitWithBackticks3.kt");
        }
        
        @TestMetadata("simpleInitWithComments.kt")
        public void testSimpleInitWithComments() throws Exception {
            doTestJoinProperty("idea/testData/intentions/declarations/join/simpleInitWithComments.kt");
        }
        
        @TestMetadata("simpleInitWithComments2.kt")
        public void testSimpleInitWithComments2() throws Exception {
            doTestJoinProperty("idea/testData/intentions/declarations/join/simpleInitWithComments2.kt");
        }
        
        @TestMetadata("simpleInitWithSemicolons.kt")
        public void testSimpleInitWithSemicolons() throws Exception {
            doTestJoinProperty("idea/testData/intentions/declarations/join/simpleInitWithSemicolons.kt");
        }
        
        @TestMetadata("simpleInitWithSemicolons2.kt")
        public void testSimpleInitWithSemicolons2() throws Exception {
            doTestJoinProperty("idea/testData/intentions/declarations/join/simpleInitWithSemicolons2.kt");
        }
        
        @TestMetadata("simpleInitWithSemicolons3.kt")
        public void testSimpleInitWithSemicolons3() throws Exception {
            doTestJoinProperty("idea/testData/intentions/declarations/join/simpleInitWithSemicolons3.kt");
        }
        
        @TestMetadata("simpleInitWithType.kt")
        public void testSimpleInitWithType() throws Exception {
            doTestJoinProperty("idea/testData/intentions/declarations/join/simpleInitWithType.kt");
        }
        
        @TestMetadata("simpleInitWithType2.kt")
        public void testSimpleInitWithType2() throws Exception {
            doTestJoinProperty("idea/testData/intentions/declarations/join/simpleInitWithType2.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/declarations/convertMemberToExtension")
    public static class ConvertMemberToExtension extends AbstractCodeTransformationTest {
        @TestMetadata("abstract.kt")
        public void testAbstract() throws Exception {
            doTestConvertMemberToExtension("idea/testData/intentions/declarations/convertMemberToExtension/abstract.kt");
        }
        
        @TestMetadata("abstractProperty.kt")
        public void testAbstractProperty() throws Exception {
            doTestConvertMemberToExtension("idea/testData/intentions/declarations/convertMemberToExtension/abstractProperty.kt");
        }
        
        public void testAllFilesPresentInConvertMemberToExtension() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/declarations/convertMemberToExtension"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("explicitUnit.kt")
        public void testExplicitUnit() throws Exception {
            doTestConvertMemberToExtension("idea/testData/intentions/declarations/convertMemberToExtension/explicitUnit.kt");
        }
        
        @TestMetadata("extension.kt")
        public void testExtension() throws Exception {
            doTestConvertMemberToExtension("idea/testData/intentions/declarations/convertMemberToExtension/extension.kt");
        }
        
        @TestMetadata("funcitonNoName.kt")
        public void testFuncitonNoName() throws Exception {
            doTestConvertMemberToExtension("idea/testData/intentions/declarations/convertMemberToExtension/funcitonNoName.kt");
        }
        
        @TestMetadata("functionType.kt")
        public void testFunctionType() throws Exception {
            doTestConvertMemberToExtension("idea/testData/intentions/declarations/convertMemberToExtension/functionType.kt");
        }
        
        @TestMetadata("genericClass.kt")
        public void testGenericClass() throws Exception {
            doTestConvertMemberToExtension("idea/testData/intentions/declarations/convertMemberToExtension/genericClass.kt");
        }
        
        @TestMetadata("genericFun.kt")
        public void testGenericFun() throws Exception {
            doTestConvertMemberToExtension("idea/testData/intentions/declarations/convertMemberToExtension/genericFun.kt");
        }
        
        @TestMetadata("genericFunInGenericClass.kt")
        public void testGenericFunInGenericClass() throws Exception {
            doTestConvertMemberToExtension("idea/testData/intentions/declarations/convertMemberToExtension/genericFunInGenericClass.kt");
        }
        
        @TestMetadata("genericFunInGenericClassWithUpperBounds.kt")
        public void testGenericFunInGenericClassWithUpperBounds() throws Exception {
            doTestConvertMemberToExtension("idea/testData/intentions/declarations/convertMemberToExtension/genericFunInGenericClassWithUpperBounds.kt");
        }
        
        @TestMetadata("genericFunParamAfterName.kt")
        public void testGenericFunParamAfterName() throws Exception {
            doTestConvertMemberToExtension("idea/testData/intentions/declarations/convertMemberToExtension/genericFunParamAfterName.kt");
        }
        
        @TestMetadata("genericProperty.kt")
        public void testGenericProperty() throws Exception {
            doTestConvertMemberToExtension("idea/testData/intentions/declarations/convertMemberToExtension/genericProperty.kt");
        }
        
        @TestMetadata("inFunctionBody.kt")
        public void testInFunctionBody() throws Exception {
            doTestConvertMemberToExtension("idea/testData/intentions/declarations/convertMemberToExtension/inFunctionBody.kt");
        }
        
        @TestMetadata("inObject.kt")
        public void testInObject() throws Exception {
            doTestConvertMemberToExtension("idea/testData/intentions/declarations/convertMemberToExtension/inObject.kt");
        }
        
        @TestMetadata("internal.kt")
        public void testInternal() throws Exception {
            doTestConvertMemberToExtension("idea/testData/intentions/declarations/convertMemberToExtension/internal.kt");
        }
        
        @TestMetadata("localFunction.kt")
        public void testLocalFunction() throws Exception {
            doTestConvertMemberToExtension("idea/testData/intentions/declarations/convertMemberToExtension/localFunction.kt");
        }
        
        @TestMetadata("nonBlockBodyNoType.kt")
        public void testNonBlockBodyNoType() throws Exception {
            doTestConvertMemberToExtension("idea/testData/intentions/declarations/convertMemberToExtension/nonBlockBodyNoType.kt");
        }
        
        @TestMetadata("nonBlockBodyWithType.kt")
        public void testNonBlockBodyWithType() throws Exception {
            doTestConvertMemberToExtension("idea/testData/intentions/declarations/convertMemberToExtension/nonBlockBodyWithType.kt");
        }
        
        @TestMetadata("outsideFunction.kt")
        public void testOutsideFunction() throws Exception {
            doTestConvertMemberToExtension("idea/testData/intentions/declarations/convertMemberToExtension/outsideFunction.kt");
        }
        
        @TestMetadata("private.kt")
        public void testPrivate() throws Exception {
            doTestConvertMemberToExtension("idea/testData/intentions/declarations/convertMemberToExtension/private.kt");
        }
        
        @TestMetadata("protected.kt")
        public void testProtected() throws Exception {
            doTestConvertMemberToExtension("idea/testData/intentions/declarations/convertMemberToExtension/protected.kt");
        }
        
        @TestMetadata("public.kt")
        public void testPublic() throws Exception {
            doTestConvertMemberToExtension("idea/testData/intentions/declarations/convertMemberToExtension/public.kt");
        }
        
        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            doTestConvertMemberToExtension("idea/testData/intentions/declarations/convertMemberToExtension/simple.kt");
        }
        
        @TestMetadata("topLevelFunction.kt")
        public void testTopLevelFunction() throws Exception {
            doTestConvertMemberToExtension("idea/testData/intentions/declarations/convertMemberToExtension/topLevelFunction.kt");
        }
        
        @TestMetadata("typeFqName.kt")
        public void testTypeFqName() throws Exception {
            doTestConvertMemberToExtension("idea/testData/intentions/declarations/convertMemberToExtension/typeFqName.kt");
        }
        
        @TestMetadata("unknownType.kt")
        public void testUnknownType() throws Exception {
            doTestConvertMemberToExtension("idea/testData/intentions/declarations/convertMemberToExtension/unknownType.kt");
        }
        
        @TestMetadata("valWithDefaultGetter.kt")
        public void testValWithDefaultGetter() throws Exception {
            doTestConvertMemberToExtension("idea/testData/intentions/declarations/convertMemberToExtension/valWithDefaultGetter.kt");
        }
        
        @TestMetadata("valWithGetter.kt")
        public void testValWithGetter() throws Exception {
            doTestConvertMemberToExtension("idea/testData/intentions/declarations/convertMemberToExtension/valWithGetter.kt");
        }
        
        @TestMetadata("valWithGetterBlockBody.kt")
        public void testValWithGetterBlockBody() throws Exception {
            doTestConvertMemberToExtension("idea/testData/intentions/declarations/convertMemberToExtension/valWithGetterBlockBody.kt");
        }
        
        @TestMetadata("varWithDefaultGetterAndSetter.kt")
        public void testVarWithDefaultGetterAndSetter() throws Exception {
            doTestConvertMemberToExtension("idea/testData/intentions/declarations/convertMemberToExtension/varWithDefaultGetterAndSetter.kt");
        }
        
        @TestMetadata("varWithDefaultSetter.kt")
        public void testVarWithDefaultSetter() throws Exception {
            doTestConvertMemberToExtension("idea/testData/intentions/declarations/convertMemberToExtension/varWithDefaultSetter.kt");
        }
        
        @TestMetadata("varWithGetter.kt")
        public void testVarWithGetter() throws Exception {
            doTestConvertMemberToExtension("idea/testData/intentions/declarations/convertMemberToExtension/varWithGetter.kt");
        }
        
        @TestMetadata("varWithGetterAndSetter.kt")
        public void testVarWithGetterAndSetter() throws Exception {
            doTestConvertMemberToExtension("idea/testData/intentions/declarations/convertMemberToExtension/varWithGetterAndSetter.kt");
        }
        
        @TestMetadata("varWithSetter.kt")
        public void testVarWithSetter() throws Exception {
            doTestConvertMemberToExtension("idea/testData/intentions/declarations/convertMemberToExtension/varWithSetter.kt");
        }
        
        @TestMetadata("withType.kt")
        public void testWithType() throws Exception {
            doTestConvertMemberToExtension("idea/testData/intentions/declarations/convertMemberToExtension/withType.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/reconstructedType")
    public static class ReconstructedType extends AbstractCodeTransformationTest {
        public void testAllFilesPresentInReconstructedType() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/reconstructedType"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("completeGenericType.kt")
        public void testCompleteGenericType() throws Exception {
            doTestReconstructType("idea/testData/intentions/reconstructedType/completeGenericType.kt");
        }
        
        @TestMetadata("completeType.kt")
        public void testCompleteType() throws Exception {
            doTestReconstructType("idea/testData/intentions/reconstructedType/completeType.kt");
        }
        
        @TestMetadata("errorType.kt")
        public void testErrorType() throws Exception {
            doTestReconstructType("idea/testData/intentions/reconstructedType/errorType.kt");
        }
        
        @TestMetadata("reconstructableType.kt")
        public void testReconstructableType() throws Exception {
            doTestReconstructType("idea/testData/intentions/reconstructedType/reconstructableType.kt");
        }
        
        @TestMetadata("typeInDeclaration.kt")
        public void testTypeInDeclaration() throws Exception {
            doTestReconstructType("idea/testData/intentions/reconstructedType/typeInDeclaration.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/removeUnnecessaryParentheses")
    public static class RemoveUnnecessaryParentheses extends AbstractCodeTransformationTest {
        public void testAllFilesPresentInRemoveUnnecessaryParentheses() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/removeUnnecessaryParentheses"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("necessaryParentheses1.kt")
        public void testNecessaryParentheses1() throws Exception {
            doTestRemoveUnnecessaryParentheses("idea/testData/intentions/removeUnnecessaryParentheses/necessaryParentheses1.kt");
        }
        
        @TestMetadata("necessaryParentheses2.kt")
        public void testNecessaryParentheses2() throws Exception {
            doTestRemoveUnnecessaryParentheses("idea/testData/intentions/removeUnnecessaryParentheses/necessaryParentheses2.kt");
        }
        
        @TestMetadata("necessaryParentheses3.kt")
        public void testNecessaryParentheses3() throws Exception {
            doTestRemoveUnnecessaryParentheses("idea/testData/intentions/removeUnnecessaryParentheses/necessaryParentheses3.kt");
        }
        
        @TestMetadata("necessaryParentheses4.kt")
        public void testNecessaryParentheses4() throws Exception {
            doTestRemoveUnnecessaryParentheses("idea/testData/intentions/removeUnnecessaryParentheses/necessaryParentheses4.kt");
        }
        
        @TestMetadata("necessaryParentheses5.kt")
        public void testNecessaryParentheses5() throws Exception {
            doTestRemoveUnnecessaryParentheses("idea/testData/intentions/removeUnnecessaryParentheses/necessaryParentheses5.kt");
        }
        
        @TestMetadata("unnecessaryParentheses1.kt")
        public void testUnnecessaryParentheses1() throws Exception {
            doTestRemoveUnnecessaryParentheses("idea/testData/intentions/removeUnnecessaryParentheses/unnecessaryParentheses1.kt");
        }
        
        @TestMetadata("unnecessaryParentheses2.kt")
        public void testUnnecessaryParentheses2() throws Exception {
            doTestRemoveUnnecessaryParentheses("idea/testData/intentions/removeUnnecessaryParentheses/unnecessaryParentheses2.kt");
        }
        
        @TestMetadata("unnecessaryParentheses3.kt")
        public void testUnnecessaryParentheses3() throws Exception {
            doTestRemoveUnnecessaryParentheses("idea/testData/intentions/removeUnnecessaryParentheses/unnecessaryParentheses3.kt");
        }
        
        @TestMetadata("unnecessaryParentheses4.kt")
        public void testUnnecessaryParentheses4() throws Exception {
            doTestRemoveUnnecessaryParentheses("idea/testData/intentions/removeUnnecessaryParentheses/unnecessaryParentheses4.kt");
        }
        
        @TestMetadata("unnecessaryParentheses5.kt")
        public void testUnnecessaryParentheses5() throws Exception {
            doTestRemoveUnnecessaryParentheses("idea/testData/intentions/removeUnnecessaryParentheses/unnecessaryParentheses5.kt");
        }
        
        @TestMetadata("unnecessaryParentheses6.kt")
        public void testUnnecessaryParentheses6() throws Exception {
            doTestRemoveUnnecessaryParentheses("idea/testData/intentions/removeUnnecessaryParentheses/unnecessaryParentheses6.kt");
        }
        
        @TestMetadata("unnecessaryParentheses7.kt")
        public void testUnnecessaryParentheses7() throws Exception {
            doTestRemoveUnnecessaryParentheses("idea/testData/intentions/removeUnnecessaryParentheses/unnecessaryParentheses7.kt");
        }
        
        @TestMetadata("unnecessaryParentheses8.kt")
        public void testUnnecessaryParentheses8() throws Exception {
            doTestRemoveUnnecessaryParentheses("idea/testData/intentions/removeUnnecessaryParentheses/unnecessaryParentheses8.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/replaceWithDotQualifiedMethodCall")
    public static class ReplaceWithDotQualifiedMethodCall extends AbstractCodeTransformationTest {
        public void testAllFilesPresentInReplaceWithDotQualifiedMethodCall() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/replaceWithDotQualifiedMethodCall"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("functionCallAfterInfixCall.kt")
        public void testFunctionCallAfterInfixCall() throws Exception {
            doTestReplaceWithDotQualifiedMethodCall("idea/testData/intentions/replaceWithDotQualifiedMethodCall/functionCallAfterInfixCall.kt");
        }
        
        @TestMetadata("functionLiteralArgument.kt")
        public void testFunctionLiteralArgument() throws Exception {
            doTestReplaceWithDotQualifiedMethodCall("idea/testData/intentions/replaceWithDotQualifiedMethodCall/functionLiteralArgument.kt");
        }
        
        @TestMetadata("nonApplicableBinaryOperation.kt")
        public void testNonApplicableBinaryOperation() throws Exception {
            doTestReplaceWithDotQualifiedMethodCall("idea/testData/intentions/replaceWithDotQualifiedMethodCall/nonApplicableBinaryOperation.kt");
        }
        
        @TestMetadata("nullAssertedCall.kt")
        public void testNullAssertedCall() throws Exception {
            doTestReplaceWithDotQualifiedMethodCall("idea/testData/intentions/replaceWithDotQualifiedMethodCall/nullAssertedCall.kt");
        }
        
        @TestMetadata("parenthesesAroundRightHandArgument.kt")
        public void testParenthesesAroundRightHandArgument() throws Exception {
            doTestReplaceWithDotQualifiedMethodCall("idea/testData/intentions/replaceWithDotQualifiedMethodCall/parenthesesAroundRightHandArgument.kt");
        }
        
        @TestMetadata("simpleInfixFunctionCall.kt")
        public void testSimpleInfixFunctionCall() throws Exception {
            doTestReplaceWithDotQualifiedMethodCall("idea/testData/intentions/replaceWithDotQualifiedMethodCall/simpleInfixFunctionCall.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/replaceWithInfixFunctionCall")
    public static class ReplaceWithInfixFunctionCall extends AbstractCodeTransformationTest {
        public void testAllFilesPresentInReplaceWithInfixFunctionCall() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/replaceWithInfixFunctionCall"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("binaryExpressionArgument.kt")
        public void testBinaryExpressionArgument() throws Exception {
            doTestReplaceWithInfixFunctionCall("idea/testData/intentions/replaceWithInfixFunctionCall/binaryExpressionArgument.kt");
        }
        
        @TestMetadata("doubleFunctionCall.kt")
        public void testDoubleFunctionCall() throws Exception {
            doTestReplaceWithInfixFunctionCall("idea/testData/intentions/replaceWithInfixFunctionCall/doubleFunctionCall.kt");
        }
        
        @TestMetadata("doubleFunctionCallWithoutParentheses.kt")
        public void testDoubleFunctionCallWithoutParentheses() throws Exception {
            doTestReplaceWithInfixFunctionCall("idea/testData/intentions/replaceWithInfixFunctionCall/doubleFunctionCallWithoutParentheses.kt");
        }
        
        @TestMetadata("firstParameterLabeled.kt")
        public void testFirstParameterLabeled() throws Exception {
            doTestReplaceWithInfixFunctionCall("idea/testData/intentions/replaceWithInfixFunctionCall/firstParameterLabeled.kt");
        }
        
        @TestMetadata("functionLiteralArgument.kt")
        public void testFunctionLiteralArgument() throws Exception {
            doTestReplaceWithInfixFunctionCall("idea/testData/intentions/replaceWithInfixFunctionCall/functionLiteralArgument.kt");
        }
        
        @TestMetadata("functionSafeCall.kt")
        public void testFunctionSafeCall() throws Exception {
            doTestReplaceWithInfixFunctionCall("idea/testData/intentions/replaceWithInfixFunctionCall/functionSafeCall.kt");
        }
        
        @TestMetadata("multipleArguments.kt")
        public void testMultipleArguments() throws Exception {
            doTestReplaceWithInfixFunctionCall("idea/testData/intentions/replaceWithInfixFunctionCall/multipleArguments.kt");
        }
        
        @TestMetadata("namedArgument.kt")
        public void testNamedArgument() throws Exception {
            doTestReplaceWithInfixFunctionCall("idea/testData/intentions/replaceWithInfixFunctionCall/namedArgument.kt");
        }
        
        @TestMetadata("nullAssertedReceiver.kt")
        public void testNullAssertedReceiver() throws Exception {
            doTestReplaceWithInfixFunctionCall("idea/testData/intentions/replaceWithInfixFunctionCall/nullAssertedReceiver.kt");
        }
        
        @TestMetadata("propertyAccess.kt")
        public void testPropertyAccess() throws Exception {
            doTestReplaceWithInfixFunctionCall("idea/testData/intentions/replaceWithInfixFunctionCall/propertyAccess.kt");
        }
        
        @TestMetadata("secondParameterLabeled.kt")
        public void testSecondParameterLabeled() throws Exception {
            doTestReplaceWithInfixFunctionCall("idea/testData/intentions/replaceWithInfixFunctionCall/secondParameterLabeled.kt");
        }
        
        @TestMetadata("simpleArgumentAndFunctionLiteralArgument.kt")
        public void testSimpleArgumentAndFunctionLiteralArgument() throws Exception {
            doTestReplaceWithInfixFunctionCall("idea/testData/intentions/replaceWithInfixFunctionCall/simpleArgumentAndFunctionLiteralArgument.kt");
        }
        
        @TestMetadata("simpleMethodCall.kt")
        public void testSimpleMethodCall() throws Exception {
            doTestReplaceWithInfixFunctionCall("idea/testData/intentions/replaceWithInfixFunctionCall/simpleMethodCall.kt");
        }
        
        @TestMetadata("zeroArguments.kt")
        public void testZeroArguments() throws Exception {
            doTestReplaceWithInfixFunctionCall("idea/testData/intentions/replaceWithInfixFunctionCall/zeroArguments.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/removeCurlyBracesFromTemplate")
    public static class RemoveCurlyBracesFromTemplate extends AbstractCodeTransformationTest {
        public void testAllFilesPresentInRemoveCurlyBracesFromTemplate() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/removeCurlyBracesFromTemplate"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("necessaryBrackets1.kt")
        public void testNecessaryBrackets1() throws Exception {
            doTestRemoveCurlyFromTemplate("idea/testData/intentions/removeCurlyBracesFromTemplate/necessaryBrackets1.kt");
        }
        
        @TestMetadata("necessaryBrackets2.kt")
        public void testNecessaryBrackets2() throws Exception {
            doTestRemoveCurlyFromTemplate("idea/testData/intentions/removeCurlyBracesFromTemplate/necessaryBrackets2.kt");
        }
        
        @TestMetadata("necessaryBrackets3.kt")
        public void testNecessaryBrackets3() throws Exception {
            doTestRemoveCurlyFromTemplate("idea/testData/intentions/removeCurlyBracesFromTemplate/necessaryBrackets3.kt");
        }
        
        @TestMetadata("necessaryBrackets4.kt")
        public void testNecessaryBrackets4() throws Exception {
            doTestRemoveCurlyFromTemplate("idea/testData/intentions/removeCurlyBracesFromTemplate/necessaryBrackets4.kt");
        }
        
        @TestMetadata("necessaryBrackets5.kt")
        public void testNecessaryBrackets5() throws Exception {
            doTestRemoveCurlyFromTemplate("idea/testData/intentions/removeCurlyBracesFromTemplate/necessaryBrackets5.kt");
        }
        
        @TestMetadata("unnecessaryBrackets1.kt")
        public void testUnnecessaryBrackets1() throws Exception {
            doTestRemoveCurlyFromTemplate("idea/testData/intentions/removeCurlyBracesFromTemplate/unnecessaryBrackets1.kt");
        }
        
        @TestMetadata("unnecessaryBrackets2.kt")
        public void testUnnecessaryBrackets2() throws Exception {
            doTestRemoveCurlyFromTemplate("idea/testData/intentions/removeCurlyBracesFromTemplate/unnecessaryBrackets2.kt");
        }
        
        @TestMetadata("unnecessaryBrackets3.kt")
        public void testUnnecessaryBrackets3() throws Exception {
            doTestRemoveCurlyFromTemplate("idea/testData/intentions/removeCurlyBracesFromTemplate/unnecessaryBrackets3.kt");
        }
        
        @TestMetadata("unnecessaryBrackets4.kt")
        public void testUnnecessaryBrackets4() throws Exception {
            doTestRemoveCurlyFromTemplate("idea/testData/intentions/removeCurlyBracesFromTemplate/unnecessaryBrackets4.kt");
        }
        
        @TestMetadata("unnecessaryBrackets5.kt")
        public void testUnnecessaryBrackets5() throws Exception {
            doTestRemoveCurlyFromTemplate("idea/testData/intentions/removeCurlyBracesFromTemplate/unnecessaryBrackets5.kt");
        }
        
        @TestMetadata("unnecessaryBrackets6.kt")
        public void testUnnecessaryBrackets6() throws Exception {
            doTestRemoveCurlyFromTemplate("idea/testData/intentions/removeCurlyBracesFromTemplate/unnecessaryBrackets6.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/moveLambdaInsideParentheses")
    public static class MoveLambdaInsideParentheses extends AbstractCodeTransformationTest {
        public void testAllFilesPresentInMoveLambdaInsideParentheses() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/moveLambdaInsideParentheses"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("inapplicable1.kt")
        public void testInapplicable1() throws Exception {
            doTestMoveLambdaInsideParentheses("idea/testData/intentions/moveLambdaInsideParentheses/inapplicable1.kt");
        }
        
        @TestMetadata("inapplicable2.kt")
        public void testInapplicable2() throws Exception {
            doTestMoveLambdaInsideParentheses("idea/testData/intentions/moveLambdaInsideParentheses/inapplicable2.kt");
        }
        
        @TestMetadata("moveLambda1.kt")
        public void testMoveLambda1() throws Exception {
            doTestMoveLambdaInsideParentheses("idea/testData/intentions/moveLambdaInsideParentheses/moveLambda1.kt");
        }
        
        @TestMetadata("moveLambda2.kt")
        public void testMoveLambda2() throws Exception {
            doTestMoveLambdaInsideParentheses("idea/testData/intentions/moveLambdaInsideParentheses/moveLambda2.kt");
        }
        
        @TestMetadata("moveLambda3.kt")
        public void testMoveLambda3() throws Exception {
            doTestMoveLambdaInsideParentheses("idea/testData/intentions/moveLambdaInsideParentheses/moveLambda3.kt");
        }
        
        @TestMetadata("moveLambda4.kt")
        public void testMoveLambda4() throws Exception {
            doTestMoveLambdaInsideParentheses("idea/testData/intentions/moveLambdaInsideParentheses/moveLambda4.kt");
        }
        
        @TestMetadata("moveLambda5.kt")
        public void testMoveLambda5() throws Exception {
            doTestMoveLambdaInsideParentheses("idea/testData/intentions/moveLambdaInsideParentheses/moveLambda5.kt");
        }
        
        @TestMetadata("moveLambda6.kt")
        public void testMoveLambda6() throws Exception {
            doTestMoveLambdaInsideParentheses("idea/testData/intentions/moveLambdaInsideParentheses/moveLambda6.kt");
        }
        
        @TestMetadata("moveLambda7.kt")
        public void testMoveLambda7() throws Exception {
            doTestMoveLambdaInsideParentheses("idea/testData/intentions/moveLambdaInsideParentheses/moveLambda7.kt");
        }
        
        @TestMetadata("moveLambda8.kt")
        public void testMoveLambda8() throws Exception {
            doTestMoveLambdaInsideParentheses("idea/testData/intentions/moveLambdaInsideParentheses/moveLambda8.kt");
        }
        
        @TestMetadata("moveLambda9.kt")
        public void testMoveLambda9() throws Exception {
            doTestMoveLambdaInsideParentheses("idea/testData/intentions/moveLambdaInsideParentheses/moveLambda9.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/moveLambdaOutsideParentheses")
    public static class MoveLambdaOutsideParentheses extends AbstractCodeTransformationTest {
        public void testAllFilesPresentInMoveLambdaOutsideParentheses() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/moveLambdaOutsideParentheses"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("inapplicable1.kt")
        public void testInapplicable1() throws Exception {
            doTestMoveLambdaOutsideParentheses("idea/testData/intentions/moveLambdaOutsideParentheses/inapplicable1.kt");
        }
        
        @TestMetadata("inapplicable2.kt")
        public void testInapplicable2() throws Exception {
            doTestMoveLambdaOutsideParentheses("idea/testData/intentions/moveLambdaOutsideParentheses/inapplicable2.kt");
        }
        
        @TestMetadata("inapplicable3.kt")
        public void testInapplicable3() throws Exception {
            doTestMoveLambdaOutsideParentheses("idea/testData/intentions/moveLambdaOutsideParentheses/inapplicable3.kt");
        }
        
        @TestMetadata("moveLambda1.kt")
        public void testMoveLambda1() throws Exception {
            doTestMoveLambdaOutsideParentheses("idea/testData/intentions/moveLambdaOutsideParentheses/moveLambda1.kt");
        }
        
        @TestMetadata("moveLambda2.kt")
        public void testMoveLambda2() throws Exception {
            doTestMoveLambdaOutsideParentheses("idea/testData/intentions/moveLambdaOutsideParentheses/moveLambda2.kt");
        }
        
        @TestMetadata("moveLambda3.kt")
        public void testMoveLambda3() throws Exception {
            doTestMoveLambdaOutsideParentheses("idea/testData/intentions/moveLambdaOutsideParentheses/moveLambda3.kt");
        }
        
        @TestMetadata("moveLambda4.kt")
        public void testMoveLambda4() throws Exception {
            doTestMoveLambdaOutsideParentheses("idea/testData/intentions/moveLambdaOutsideParentheses/moveLambda4.kt");
        }
        
        @TestMetadata("moveLambda7.kt")
        public void testMoveLambda7() throws Exception {
            doTestMoveLambdaOutsideParentheses("idea/testData/intentions/moveLambdaOutsideParentheses/moveLambda7.kt");
        }
        
        @TestMetadata("moveLambda8.kt")
        public void testMoveLambda8() throws Exception {
            doTestMoveLambdaOutsideParentheses("idea/testData/intentions/moveLambdaOutsideParentheses/moveLambda8.kt");
        }
        
    }
    
    public static Test suite() {
        TestSuite suite = new TestSuite("CodeTransformationTestGenerated");
        suite.addTestSuite(IfToAssignment.class);
        suite.addTestSuite(IfToReturn.class);
        suite.addTestSuite(IfToReturnAsymmetrically.class);
        suite.addTestSuite(WhenToAssignment.class);
        suite.addTestSuite(WhenToReturn.class);
        suite.addTestSuite(AssignmentToIf.class);
        suite.addTestSuite(AssignmentToWhen.class);
        suite.addTestSuite(PropertyToIf.class);
        suite.addTestSuite(PropertyToWhen.class);
        suite.addTestSuite(ReturnToIf.class);
        suite.addTestSuite(ReturnToWhen.class);
        suite.addTestSuite(IfToWhen.class);
        suite.addTestSuite(WhenToIf.class);
        suite.addTestSuite(Flatten.class);
        suite.addTestSuite(Merge.class);
        suite.addTestSuite(IntroduceSubject.class);
        suite.addTestSuite(EliminateSubject.class);
        suite.addTestSuite(Split.class);
        suite.addTestSuite(Join.class);
        suite.addTestSuite(ConvertMemberToExtension.class);
        suite.addTestSuite(ReconstructedType.class);
        suite.addTestSuite(RemoveUnnecessaryParentheses.class);
        suite.addTestSuite(ReplaceWithDotQualifiedMethodCall.class);
        suite.addTestSuite(ReplaceWithInfixFunctionCall.class);
        suite.addTestSuite(RemoveCurlyBracesFromTemplate.class);
        suite.addTestSuite(MoveLambdaInsideParentheses.class);
        suite.addTestSuite(MoveLambdaOutsideParentheses.class);
        return suite;
    }
}
