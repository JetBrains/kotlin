FILE: fullConstructionAnalysis1.kt
    public abstract class A : R|kotlin/Any| {
        public constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

        public final val y: R|kotlin/Int| = this@R|/A|.R|/A.foo|().R|kotlin/Any.hashCode|()
            public get(): R|kotlin/Int|

        public abstract fun foo(): R|kotlin/String|

    }
    public final class ErrorImpl : R|A| {
        public constructor(): R|ErrorImpl| {
            super<R|A|>()
        }

        public final val x: R|kotlin/String| = String(Hello)
            public get(): R|kotlin/String|

        public final override fun foo(): R|kotlin/String| {
            ^foo this@R|/ErrorImpl|.R|/ErrorImpl.x|
        }

    }
    public final class CorrectImpl : R|A| {
        public constructor(): R|CorrectImpl| {
            super<R|A|>()
        }

        public final val x: R|kotlin/String| = String(Hello)
            public get(): R|kotlin/String|

        public final override fun foo(): R|kotlin/String| {
            ^foo String(World)
        }

    }
    public open class C : R|kotlin/Any| {
        public constructor(v: R|kotlin/String|): R|C| {
            super<R|kotlin/Any|>()
        }

        public open val v: R|kotlin/String| = R|<local>/v|
            public get(): R|kotlin/String|

        public final val present: R|kotlin/Boolean| = !=(this@R|/C|.R|/C.v|, Null(null))
            public get(): R|kotlin/Boolean|

    }
    public final class D : R|A| {
        public constructor(v: R|kotlin/String|): R|D| {
            super<R|A|>(R|<local>/v|)
        }

        public final override val v: R|kotlin/String| = R|<local>/v|
            public get(): R|kotlin/String|

    }
    public open class Base : R|kotlin/Any| {
        public constructor(): R|Base| {
            super<R|kotlin/Any|>()
        }

        init {
            this@R|/Base|.R|/Base.f|()
        }

        public open fun f(): R|kotlin/Unit| {
        }

    }
    public final class Derived : R|Base| {
        public constructor(): R|Derived| {
            super<R|Base|>()
        }

        public final val s: R|kotlin/String| = String(Hello)
            public get(): R|kotlin/String|

        public final override fun f(): R|kotlin/Unit| {
            this@R|/Derived|.R|/Derived.s|.R|kotlin/Any.hashCode|()
        }

    }
    public open class A : R|kotlin/Any| {
        public constructor(): R|A| {
            super<R|kotlin/Any|>()
            this@R|/A|.R|/A.runLater|(this@R|/A|::R|/A.foo|)
        }

        public open fun foo(): R|kotlin/Unit| {
        }

        private final fun runLater(f: R|() -> kotlin/Unit|): R|kotlin/Unit| {
        }

    }
    public final class B : R|A| {
        public constructor(): R|B| {
            super<R|A|>()
        }

        public final val b: R|kotlin/String| = String(Hello)
            public get(): R|kotlin/String|

        public final override fun foo(): R|kotlin/Unit| {
            this@R|/B|.R|/B.b|.R|kotlin/Any.hashCode|()
        }

    }
