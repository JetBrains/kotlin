package

public fun bar(): kotlin.Array<E>
public fun baz(): E
public fun foo(): E

public final enum class E : kotlin.Enum<E> {
    enum entry ENTRY

    private constructor E()
    public final override /*1*/ /*fake_override*/ val name: kotlin.String
    public final override /*1*/ /*fake_override*/ val ordinal: kotlin.Int
    protected final override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
    public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: E): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    protected/*protected and package*/ final override /*1*/ /*fake_override*/ /*isHiddenForResolutionEverywhereBesideSupercalls*/ fun finalize(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ /*isHiddenForResolutionEverywhereBesideSupercalls*/ fun getDeclaringClass(): java.lang.Class<E!>!
    public final override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final fun oof(): E
    public final fun rab(): kotlin.Array<E>
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    public final fun zab(): E

    public companion object Companion {
        private constructor Companion()
        public final val valuez: kotlin.Array<E>
        public final fun bar(): kotlin.Array<E>
        public final fun baz(): E
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public final fun foo(): E
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }

    // Static members
    public final /*synthesized*/ fun valueOf(/*0*/ value: kotlin.String): E
    public final /*synthesized*/ fun values(): kotlin.Array<E>
}
