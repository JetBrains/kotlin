Class/object property type 9 var nextServer: Server? = new Server()
Companion object 10 val name = Server.NAME
Companion object 44 fun Client.bar(s: Server = Server.NAME) {
Companion object 8 class Client(name: String = Server.NAME): Srv() {
Function return types 20 fun getNextServer(): Server? {
Function return types 52 fun Any.asServer(): Server? {
Local variable declaration 16 val server: Server = s
Parameter type 15 fun foo(s: Srv) {
Parameter type 44 fun Client.bar(s: Server = Server.NAME) {
Super type qualifier 25 super<Server>.work()
Supertype 29 companion object: Server() {
Supertype 34 object ClientObject: Server() {
Supertype 8 class Client(name: String = Server.NAME): Srv() {
Target type of 'is' operation 54 is Server -> println("Server!")
Target type of 'is' operation 56 return if (this is Server) this as Server else this as? Server
Type parameter 38 class Servers: Iterator<Server> {
Type parameter 42 fun Iterator<Server>.f(p: Iterator<Server>): Iterator<Server> = this
Type parameter 42 fun Iterator<Server>.f(p: Iterator<Server>): Iterator<Server> = this
Type parameter 42 fun Iterator<Server>.f(p: Iterator<Server>): Iterator<Server> = this
Usage in cast target type 56 return if (this is Server) this as Server else this as? Server
Usage in cast target type 56 return if (this is Server) this as Server else this as? Server
Usage in comments 13 * [Srv] parameter
Usage in import 5 import server.Server as Srv
Usage in import 6 import server.Server