KtFile: 'ClassNameBeforeTwoUnsresolvedClassesWithDot.kt'
  null

KtPackageDirective(0,0): ''
  null

KtImportList(0,0): ''
  null

KtClass(1,10): 'class Foo'
  null

KtClass(12,50): 'class C {'
  null

KtClassBody(20,50): '{'
  null

KtProperty(26,48): 'val prop: Foo.Bar.Baz.'
  null

KtTypeReference(36,48): 'Foo.Bar.Baz.'
  null

KtUserType(36,48): 'Foo.Bar.Baz.'
  null

KtUserType(36,47): 'Foo.Bar.Baz'
  null

KtUserType(36,43): 'Foo.Bar'
  null

KtUserType(36,39): 'Foo'
  null

KtNameReferenceExpression(36,39): 'Foo'
  null

KtNameReferenceExpression(40,43): 'Bar'
  KaErrorCallInfo:
    candidateCalls = []
    diagnostic = ERROR<UNRESOLVED_REFERENCE: Unresolved reference 'Bar'.>

KtNameReferenceExpression(44,47): 'Baz'
  KaErrorCallInfo:
    candidateCalls = []
    diagnostic = ERROR<UNRESOLVED_REFERENCE: Unresolved reference 'Bar'.>

KtNamedFunction(52,101): 'fun testFun() {'
  null

KtParameterList(63,65): '()'
  null

KtBlockExpression(66,101): '{'
  null

KtProperty(72,99): 'val localProp: Foo.Bar.Baz.'
  null

KtTypeReference(87,99): 'Foo.Bar.Baz.'
  null

KtUserType(87,99): 'Foo.Bar.Baz.'
  null

KtUserType(87,98): 'Foo.Bar.Baz'
  null

KtUserType(87,94): 'Foo.Bar'
  null

KtUserType(87,90): 'Foo'
  null

KtNameReferenceExpression(87,90): 'Foo'
  null

KtNameReferenceExpression(91,94): 'Bar'
  KaErrorCallInfo:
    candidateCalls = []
    diagnostic = ERROR<UNRESOLVED_REFERENCE: Unresolved reference 'Bar'.>

KtNameReferenceExpression(95,98): 'Baz'
  KaErrorCallInfo:
    candidateCalls = []
    diagnostic = ERROR<UNRESOLVED_REFERENCE: Unresolved reference 'Bar'.>

KtNamedFunction(103,139): 'fun <T> take(action: (T) -> Unit) {}'
  null

KtTypeParameterList(107,110): '<T>'
  null

KtTypeParameter(108,109): 'T'
  null

KtParameterList(115,136): '(action: (T) -> Unit)'
  null

KtParameter(116,135): 'action: (T) -> Unit'
  null

KtTypeReference(124,135): '(T) -> Unit'
  null

KtFunctionType(124,135): '(T) -> Unit'
  null

KtParameterList(124,127): '(T)'
  null

KtParameter(125,126): 'T'
  null

KtTypeReference(125,126): 'T'
  null

KtUserType(125,126): 'T'
  null

KtNameReferenceExpression(125,126): 'T'
  null

KtTypeReference(131,135): 'Unit'
  null

KtUserType(131,135): 'Unit'
  null

KtNameReferenceExpression(131,135): 'Unit'
  null

KtBlockExpression(137,139): '{}'
  null

KtProperty(141,193): 'val prop = take {'
  null

KtCallExpression(152,193): 'take {'
  KaErrorCallInfo:
    candidateCalls = [
      KaSimpleFunctionCall:
        argumentMapping = {
          {
              lambdaParam: Foo.Bar.Baz. ->
          } -> (KaVariableSignature:
            name = action
            receiverType = null
            returnType = (ERROR CLASS: Cannot infer argument for type parameter T) -> kotlin.Unit
            symbol = action: (T) -> kotlin.Unit
            contextParameters = []
            callableId = null)
        }
        isImplicitInvoke = false
        partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
          contextArguments = []
          dispatchReceiver = null
          extensionReceiver = null
          signature = KaFunctionSignature:
            receiverType = null
            returnType = kotlin.Unit
            symbol = /take(action: (T) -> kotlin.Unit): kotlin.Unit
            valueParameters = [
              KaVariableSignature:
                name = action
                receiverType = null
                returnType = (ERROR CLASS: Cannot infer argument for type parameter T) -> kotlin.Unit
                symbol = action: (T) -> kotlin.Unit
                contextParameters = []
                callableId = null
            ]
            contextParameters = []
            callableId = /take
        typeArgumentsMapping = {
          T -> (ERROR CLASS: Cannot infer argument for type parameter T)
        }
    ]
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is '(??? (Incomplete user type)) -> Unit', but '(uninferred T (of fun <T> take)) -> Unit' was expected.>

KtNameReferenceExpression(152,156): 'take'
  KaErrorCallInfo:
    candidateCalls = [
      KaSimpleFunctionCall:
        argumentMapping = {
          {
              lambdaParam: Foo.Bar.Baz. ->
          } -> (KaVariableSignature:
            name = action
            receiverType = null
            returnType = (ERROR CLASS: Cannot infer argument for type parameter T) -> kotlin.Unit
            symbol = action: (T) -> kotlin.Unit
            contextParameters = []
            callableId = null)
        }
        isImplicitInvoke = false
        partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
          contextArguments = []
          dispatchReceiver = null
          extensionReceiver = null
          signature = KaFunctionSignature:
            receiverType = null
            returnType = kotlin.Unit
            symbol = /take(action: (T) -> kotlin.Unit): kotlin.Unit
            valueParameters = [
              KaVariableSignature:
                name = action
                receiverType = null
                returnType = (ERROR CLASS: Cannot infer argument for type parameter T) -> kotlin.Unit
                symbol = action: (T) -> kotlin.Unit
                contextParameters = []
                callableId = null
            ]
            contextParameters = []
            callableId = /take
        typeArgumentsMapping = {
          T -> (ERROR CLASS: Cannot infer argument for type parameter T)
        }
    ]
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is '(??? (Incomplete user type)) -> Unit', but '(uninferred T (of fun <T> take)) -> Unit' was expected.>

KtLambdaArgument(157,193): '{'
  null

KtLambdaExpression(157,193): '{'
  null

KtFunctionLiteral(157,193): '{'
  null

KtParameterList(163,188): 'lambdaParam: Foo.Bar.Baz.'
  null

KtParameter(163,188): 'lambdaParam: Foo.Bar.Baz.'
  null

KtTypeReference(176,188): 'Foo.Bar.Baz.'
  null

KtUserType(176,188): 'Foo.Bar.Baz.'
  null

KtUserType(176,187): 'Foo.Bar.Baz'
  null

KtUserType(176,183): 'Foo.Bar'
  null

KtUserType(176,179): 'Foo'
  null

KtNameReferenceExpression(176,179): 'Foo'
  null

KtNameReferenceExpression(180,183): 'Bar'
  KaErrorCallInfo:
    candidateCalls = []
    diagnostic = ERROR<UNRESOLVED_REFERENCE: Unresolved reference 'Bar'.>

KtNameReferenceExpression(184,187): 'Baz'
  KaErrorCallInfo:
    candidateCalls = []
    diagnostic = ERROR<UNRESOLVED_REFERENCE: Unresolved reference 'Bar'.>

KtBlockExpression(192,192): ''
  null