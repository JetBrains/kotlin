A.class:
  // IntelliJ API Decompiler stub source generated from a class file
  // Implementation of methods is not available

  package test

  @kotlin.annotation.Target public final annotation class A public constructor() : kotlin.Annotation {
  }

Continuation.class:
  // IntelliJ API Decompiler stub source generated from a class file
  // Implementation of methods is not available

  package test

  public final class Continuation<T> public constructor() {
  }

P.class:
  // IntelliJ API Decompiler stub source generated from a class file
  // Implementation of methods is not available

  package test

  public interface P {
  }

RS.class:
  // IntelliJ API Decompiler stub source generated from a class file
  // Implementation of methods is not available

  package test

  public interface RS {
  }

SuspendLambda.class:
  // IntelliJ API Decompiler stub source generated from a class file
  // Implementation of methods is not available

  package test

  public final class SuspendLambda public constructor() {
      public final var nullableSuspend: (suspend (test.P) -> kotlin.Unit)? /* compiled code */ /* hasBackingField: true */

      public final var nullableSuspendWithReceiver: (suspend test.RS.(test.P) -> kotlin.Unit)? /* compiled code */ /* hasBackingField: true */

      public final var nullableSuspendWithNullableParameter: (suspend (test.P?) -> kotlin.Unit)? /* compiled code */ /* hasBackingField: true */

      public final var nullableSuspendWithNullableReceiver: (suspend test.RS?.(test.P) -> kotlin.Unit)? /* compiled code */ /* hasBackingField: true */

      public final var nullableSuspendWithAnnotation: (@test.A suspend (test.P) -> kotlin.Unit)? /* compiled code */ /* hasBackingField: true */

      public final fun <T> (suspend () -> T).createCoroutine1(completion: test.Continuation<T>): kotlin.Unit { /* compiled code */ }

      public final fun <R, T> (suspend R.() -> T).createCoroutine2(receiver: R, completion: test.Continuation<T>): kotlin.Unit { /* compiled code */ }

      public final fun <R, T> (@receiver:test.A suspend R.() -> T).createCoroutineAnother(): kotlin.Unit { /* compiled code */ }

      public final fun <T> testCoroutine(f: suspend (kotlin.Int) -> T?): kotlin.Unit { /* compiled code */ }

      public final fun <T> testCoroutineWithAnnotation(f: suspend (kotlin.Int) -> @test.A T?): kotlin.Unit { /* compiled code */ }

      public final fun override(p: kotlin.String, b: suspend (test.P) -> kotlin.Unit): kotlin.Nothing? { /* compiled code */ }

      public final fun override(b: suspend (test.P) -> kotlin.Unit): kotlin.Nothing? { /* compiled code */ }

      public final fun annotatedReturnSuspend(): @test.A suspend (test.P) -> kotlin.Unit { /* compiled code */ }

      public final fun returnSuspend(): suspend (test.P) -> kotlin.Unit { /* compiled code */ }
  }

