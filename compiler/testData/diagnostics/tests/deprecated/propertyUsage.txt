package

public fun fn(): kotlin.Unit
public fun literals(): kotlin.Unit
public fun PropertyHolder.extFunction(): kotlin.Unit

public final class Delegate {
    public constructor Delegate()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    @kotlin.Deprecated(message = "text") public final operator fun getValue(/*0*/ instance: kotlin.Any, /*1*/ property: kotlin.reflect.KProperty<*>): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    @kotlin.Deprecated(message = "text") public final operator fun setValue(/*0*/ instance: kotlin.Any, /*1*/ property: kotlin.reflect.KProperty<*>, /*2*/ value: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public final class PropertyHolder {
    public constructor PropertyHolder()
    @kotlin.Deprecated(message = "text") public final var name: kotlin.String
    @get:kotlin.Deprecated(message = "val-getter") public final val test1: kotlin.String = ""
    @get:kotlin.Deprecated(message = "var-getter") @set:kotlin.Deprecated(message = "var-setter") public final var test2: kotlin.String
    @get:kotlin.Deprecated(message = "var-getter") public final var test3: kotlin.String
    @set:kotlin.Deprecated(message = "var-setter") public final var test4: kotlin.String
    public final val valDelegate: kotlin.Int
    public final var varDelegate: kotlin.Int
    @kotlin.Deprecated(message = "text") public final val x: kotlin.Int = 1
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}
