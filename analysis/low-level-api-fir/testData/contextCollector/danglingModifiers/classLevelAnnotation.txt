Tower Data Context:
    Element 0
        Scope: FirDefaultStarImportingScope
    Element 1
        Scope: FirExplicitStarImportingScope
    Element 2
        Scope: FirDefaultSimpleImportingScope
    Element 3
        Scope: FirDefaultSimpleImportingScope
    Element 4
        Scope: FirPackageMemberScope
    Element 5
        Scope: FirExplicitSimpleImportingScope
    Element 6
        Implicit receiver:
            FirRegularClassSymbol public final companion object Companion : R|kotlin/Any|
                Type: foo.MyClass.Companion
    Element 7
        Scope: FirNestedClassifierScopeImpl
            Classifiers:
                FirRegularClassSymbol public final companion object Companion : R|kotlin/Any|
                FirRegularClassSymbol public final annotation class NestedAnnotation : R|kotlin/Annotation|
    Element 8
        Implicit receiver:
            FirRegularClassSymbol public final class MyClass : R|kotlin/Any|
                Type: foo.MyClass

FILE: [ResolvedTo(IMPORTS)] classLevelAnnotation.kt
    public? final? const [ResolvedTo(RAW_FIR)] val CONSTANT: <implicit> = LAZY_EXPRESSION
        public? [ResolvedTo(RAW_FIR)] get(): <implicit>
    public final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] constructor([ResolvedTo(RAW_FIR)] s: String): R|foo/Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] val s: String = R|<local>/s|
            public? [ResolvedTo(RAW_FIR)] get(): String

    }
    public final [ResolvedTo(ANNOTATION_ARGUMENTS)] class MyClass : R|kotlin/Any| {
        public [ResolvedTo(BODY_RESOLVE)] constructor(): R|foo/MyClass| {
            super<R|kotlin/Any|>()
        }

        public final companion [ResolvedTo(ANNOTATION_ARGUMENTS)] object Companion : R|kotlin/Any| {
            private [ResolvedTo(BODY_RESOLVE)] constructor(): R|foo/MyClass.Companion| {
                super<R|kotlin/Any|>()
            }

            public final const [ResolvedTo(BODY_RESOLVE)] val NESTED_CONSTANT: R|kotlin/Int| = Int(0)
                public [ResolvedTo(BODY_RESOLVE)] get(): R|kotlin/Int|

        }

        public final [ResolvedTo(ANNOTATION_ARGUMENTS)] annotation class NestedAnnotation : R|kotlin/Annotation| {
            public [ResolvedTo(BODY_RESOLVE)] constructor([ResolvedTo(BODY_RESOLVE)] i: R|kotlin/Int|): R|foo/MyClass.NestedAnnotation| {
                super<R|kotlin/Any|>()
            }

            public final [ResolvedTo(BODY_RESOLVE)] val i: R|kotlin/Int| = R|<local>/i|
                public [ResolvedTo(BODY_RESOLVE)] get(): R|kotlin/Int|

        }

        [ResolvedTo(RAW_FIR)] @Anno[Unresolved](LAZY_EXPRESSION) @NestedAnnotation[Unresolved](LAZY_EXPRESSION) <DANGLING MODIFIER: Top level declaration expected>
    }