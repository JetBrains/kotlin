//
// Source
// ------------------------------------------

import androidx.compose.runtime.*

@Composable
private fun Test(param: String?) {
    Test(
        if (param == null) {
           remember { "" }
        } else {
            null
        },
    )
}

//
// Transformed IR
// ------------------------------------------

@Composable
private fun Test(param: String?, %composer: Composer?, %changed: Int) {
  %composer = %composer.startRestartGroup(<>)
  sourceInformation(%composer, "C(Test)<Test(>:Test.kt")
  val %dirty = %changed
  if (%changed and 0b0110 == 0) {
    %dirty = %dirty or if (%composer.changed(param)) 0b0100 else 0b0010
  }
  if (%dirty and 0b0011 != 0b0010 || !%composer.skipping) {
    if (isTraceInProgress()) {
      traceEventStart(<>, %dirty, -1, <>)
    }
    Test(if (param == null) {
      %composer.startReplaceGroup(<>)
      sourceInformation(%composer, "<rememb...>")
      val tmp1_group = <block>{
        sourceInformationMarkerStart(%composer, <>, "CC(remember):Test.kt#9igjgp")
        val tmp0_group = %composer.cache(false) {
          ""
        }
        sourceInformationMarkerEnd(%composer)
        tmp0_group
      }
      %composer.endReplaceGroup()
      tmp1_group
    } else {
      %composer.startReplaceGroup(<>)
      %composer.endReplaceGroup()
      null
    }, %composer, 0)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    %composer.skipToGroupEnd()
  }
  %composer.endRestartGroup()?.updateScope { %composer: Composer?, %force: Int ->
    Test(param, %composer, updateChangedFlags(%changed or 0b0001))
  }
}
