/returns_booleans.kt:(121,133): info: Generated Viper text for returns_true:
method global$fun_returns_true$fun_take$$return$T_Boolean()
  returns (ret: Bool)
  ensures true
  ensures ret == true
{
  ret := true
  goto label$ret
  label label$ret
}

/returns_booleans.kt:(268,281): info: Generated Viper text for returns_false:
method global$fun_returns_false$fun_take$$return$T_Boolean()
  returns (ret: Bool)
  ensures true
  ensures ret == false
{
  ret := false
  goto label$ret
  label label$ret
}

/returns_booleans.kt:(418,435): info: Generated Viper text for conditional_basic:
method global$fun_conditional_basic$fun_take$T_Boolean$return$T_Boolean(local$b: Bool)
  returns (ret: Bool)
  ensures ret == true ==> true
  ensures ret == false ==> local$b
{
  ret := true
  goto label$ret
  label label$ret
}

/returns_booleans.kt:(612,636): info: Generated Viper text for binary_logic_expressions:
method global$fun_binary_logic_expressions$fun_take$T_Boolean$T_Boolean$return$T_Boolean(local$a: Bool,
  local$b: Bool)
  returns (ret: Bool)
  ensures ret == false ==> local$b && false
  ensures ret == true ==> (true || local$a) && (local$b || true)
{
  ret := true
  goto label$ret
  label label$ret
}

/returns_booleans.kt:(855,866): info: Generated Viper text for logical_not:
method global$fun_logical_not$fun_take$T_Boolean$return$T_Boolean(local$b: Bool)
  returns (ret: Bool)
  ensures ret == true ==> !local$b && local$b
  ensures ret == false ==> local$b || !local$b
{
  ret := false
  goto label$ret
  label label$ret
}

/returns_booleans.kt:(1052,1075): info: Generated Viper text for call_fun_with_contracts:
method global$fun_call_fun_with_contracts$fun_take$T_Boolean$return$T_Boolean(local$b: Bool)
  returns (ret: Bool)
  ensures ret == true
{
  var local1$a: Bool
  var anonymous$1: Bool
  anonymous$1 := global$fun_binary_logic_expressions$fun_take$T_Boolean$T_Boolean$return$T_Boolean(local$b,
    local$b)
  local1$a := anonymous$1
  ret := local1$a
  goto label$ret
  label label$ret
}

method global$fun_binary_logic_expressions$fun_take$T_Boolean$T_Boolean$return$T_Boolean(local$a: Bool,
  local$b: Bool)
  returns (ret: Bool)
  ensures ret == false ==> local$b && false
  ensures ret == true ==> (true || local$a) && (local$b || true)


/returns_booleans.kt:(1268,1281): info: Generated Viper text for isNullOrEmpty:
method global$fun_isNullOrEmpty$fun_take$NT_class_pkg$kotlin$collections$global$class_Collection$return$T_Boolean(this: dom$Nullable[Ref])
  returns (ret: Bool)
  ensures ret == false ==> this != (dom$Nullable$null(): dom$Nullable[Ref])
{
  var anonymous$1: Bool
  inhale dom$Type$isSubtype((dom$TypeOf$typeOf(this): dom$Type), dom$Type$special$Nullable(dom$Type$pkg$kotlin$collections$global$class_Collection()))
  if (this == (dom$Nullable$null(): dom$Nullable[Ref]) &&
  (dom$Nullable$null(): dom$Nullable[dom$Unit]) ==
  (dom$Nullable$null(): dom$Nullable[dom$Unit]) ||
  this != (dom$Nullable$null(): dom$Nullable[Ref]) &&
  (dom$Nullable$null(): dom$Nullable[dom$Unit]) !=
  (dom$Nullable$null(): dom$Nullable[dom$Unit]) &&
  (dom$Casting$cast(this, dom$Type$pkg$kotlin$collections$global$class_Collection()): Ref) ==
  (dom$Casting$cast((dom$Nullable$null(): dom$Nullable[dom$Unit]), dom$Type$pkg$kotlin$collections$global$class_Collection()): Ref)) {
    anonymous$1 := true
  } else {
    var anonymous$2: Bool
    anonymous$2 := pkg$kotlin$collections$class_scope_pkg$kotlin$collections$global$class_Collection$fun_isEmpty$fun_take$T_class_pkg$kotlin$collections$global$class_Collection$return$T_Boolean((dom$Casting$cast(this,
      dom$Type$pkg$kotlin$collections$global$class_Collection()): Ref))
    anonymous$1 := anonymous$2
  }
  ret := anonymous$1
  goto label$ret
  label label$ret
}

method pkg$kotlin$collections$class_scope_pkg$kotlin$collections$global$class_Collection$fun_isEmpty$fun_take$T_class_pkg$kotlin$collections$global$class_Collection$return$T_Boolean(this: Ref)
  returns (ret: Bool)
