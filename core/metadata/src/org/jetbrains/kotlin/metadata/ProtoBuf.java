// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: core/metadata/src/metadata.proto
// Protobuf Java Version: 4.29.3

package org.jetbrains.kotlin.metadata;

public final class ProtoBuf {
  private ProtoBuf() {}
  static {
    org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 29,
      /* patch= */ 3,
      /* suffix= */ "",
      ProtoBuf.class.getName());
  }
  public static void registerAllExtensions(
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      org.jetbrains.kotlin.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (org.jetbrains.kotlin.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * Protobuf enum {@code org.jetbrains.kotlin.metadata.Modality}
   */
  public enum Modality
      implements org.jetbrains.kotlin.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 2 bits
     * </pre>
     *
     * <code>FINAL = 0;</code>
     */
    FINAL(0),
    /**
     * <code>OPEN = 1;</code>
     */
    OPEN(1),
    /**
     * <code>ABSTRACT = 2;</code>
     */
    ABSTRACT(2),
    /**
     * <code>SEALED = 3;</code>
     */
    SEALED(3),
    ;

    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        Modality.class.getName());
    }
    /**
     * <pre>
     * 2 bits
     * </pre>
     *
     * <code>FINAL = 0;</code>
     */
    public static final int FINAL_VALUE = 0;
    /**
     * <code>OPEN = 1;</code>
     */
    public static final int OPEN_VALUE = 1;
    /**
     * <code>ABSTRACT = 2;</code>
     */
    public static final int ABSTRACT_VALUE = 2;
    /**
     * <code>SEALED = 3;</code>
     */
    public static final int SEALED_VALUE = 3;


    public final int getNumber() {
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static Modality valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static Modality forNumber(int value) {
      switch (value) {
        case 0: return FINAL;
        case 1: return OPEN;
        case 2: return ABSTRACT;
        case 3: return SEALED;
        default: return null;
      }
    }

    public static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Modality>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<
        Modality> internalValueMap =
          new org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Modality>() {
            public Modality findValueByNumber(int number) {
              return Modality.forNumber(number);
            }
          };

    public final org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return org.jetbrains.kotlin.metadata.ProtoBuf.getDescriptor().getEnumTypes().get(0);
    }

    private static final Modality[] VALUES = values();

    public static Modality valueOf(
        org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private Modality(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:org.jetbrains.kotlin.metadata.Modality)
  }

  /**
   * Protobuf enum {@code org.jetbrains.kotlin.metadata.Visibility}
   */
  public enum Visibility
      implements org.jetbrains.kotlin.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 3 bits
     * </pre>
     *
     * <code>INTERNAL = 0;</code>
     */
    INTERNAL(0),
    /**
     * <code>PRIVATE = 1;</code>
     */
    PRIVATE(1),
    /**
     * <code>PROTECTED = 2;</code>
     */
    PROTECTED(2),
    /**
     * <code>PUBLIC = 3;</code>
     */
    PUBLIC(3),
    /**
     * <code>PRIVATE_TO_THIS = 4;</code>
     */
    PRIVATE_TO_THIS(4),
    /**
     * <code>LOCAL = 5;</code>
     */
    LOCAL(5),
    ;

    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        Visibility.class.getName());
    }
    /**
     * <pre>
     * 3 bits
     * </pre>
     *
     * <code>INTERNAL = 0;</code>
     */
    public static final int INTERNAL_VALUE = 0;
    /**
     * <code>PRIVATE = 1;</code>
     */
    public static final int PRIVATE_VALUE = 1;
    /**
     * <code>PROTECTED = 2;</code>
     */
    public static final int PROTECTED_VALUE = 2;
    /**
     * <code>PUBLIC = 3;</code>
     */
    public static final int PUBLIC_VALUE = 3;
    /**
     * <code>PRIVATE_TO_THIS = 4;</code>
     */
    public static final int PRIVATE_TO_THIS_VALUE = 4;
    /**
     * <code>LOCAL = 5;</code>
     */
    public static final int LOCAL_VALUE = 5;


    public final int getNumber() {
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static Visibility valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static Visibility forNumber(int value) {
      switch (value) {
        case 0: return INTERNAL;
        case 1: return PRIVATE;
        case 2: return PROTECTED;
        case 3: return PUBLIC;
        case 4: return PRIVATE_TO_THIS;
        case 5: return LOCAL;
        default: return null;
      }
    }

    public static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Visibility>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<
        Visibility> internalValueMap =
          new org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Visibility>() {
            public Visibility findValueByNumber(int number) {
              return Visibility.forNumber(number);
            }
          };

    public final org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return org.jetbrains.kotlin.metadata.ProtoBuf.getDescriptor().getEnumTypes().get(1);
    }

    private static final Visibility[] VALUES = values();

    public static Visibility valueOf(
        org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private Visibility(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:org.jetbrains.kotlin.metadata.Visibility)
  }

  /**
   * Protobuf enum {@code org.jetbrains.kotlin.metadata.MemberKind}
   */
  public enum MemberKind
      implements org.jetbrains.kotlin.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 2 bits
     * </pre>
     *
     * <code>DECLARATION = 0;</code>
     */
    DECLARATION(0),
    /**
     * <code>FAKE_OVERRIDE = 1;</code>
     */
    FAKE_OVERRIDE(1),
    /**
     * <code>DELEGATION = 2;</code>
     */
    DELEGATION(2),
    /**
     * <code>SYNTHESIZED = 3;</code>
     */
    SYNTHESIZED(3),
    ;

    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        MemberKind.class.getName());
    }
    /**
     * <pre>
     * 2 bits
     * </pre>
     *
     * <code>DECLARATION = 0;</code>
     */
    public static final int DECLARATION_VALUE = 0;
    /**
     * <code>FAKE_OVERRIDE = 1;</code>
     */
    public static final int FAKE_OVERRIDE_VALUE = 1;
    /**
     * <code>DELEGATION = 2;</code>
     */
    public static final int DELEGATION_VALUE = 2;
    /**
     * <code>SYNTHESIZED = 3;</code>
     */
    public static final int SYNTHESIZED_VALUE = 3;


    public final int getNumber() {
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static MemberKind valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static MemberKind forNumber(int value) {
      switch (value) {
        case 0: return DECLARATION;
        case 1: return FAKE_OVERRIDE;
        case 2: return DELEGATION;
        case 3: return SYNTHESIZED;
        default: return null;
      }
    }

    public static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<MemberKind>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<
        MemberKind> internalValueMap =
          new org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<MemberKind>() {
            public MemberKind findValueByNumber(int number) {
              return MemberKind.forNumber(number);
            }
          };

    public final org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return org.jetbrains.kotlin.metadata.ProtoBuf.getDescriptor().getEnumTypes().get(2);
    }

    private static final MemberKind[] VALUES = values();

    public static MemberKind valueOf(
        org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private MemberKind(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:org.jetbrains.kotlin.metadata.MemberKind)
  }

  public interface StringTableOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.StringTable)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>repeated string string = 1;</code>
     * @return A list containing the string.
     */
    java.util.List<java.lang.String>
        getStringList();
    /**
     * <code>repeated string string = 1;</code>
     * @return The count of string.
     */
    int getStringCount();
    /**
     * <code>repeated string string = 1;</code>
     * @param index The index of the element to return.
     * @return The string at the given index.
     */
    java.lang.String getString(int index);
    /**
     * <code>repeated string string = 1;</code>
     * @param index The index of the value to return.
     * @return The bytes of the string at the given index.
     */
    org.jetbrains.kotlin.protobuf.ByteString
        getStringBytes(int index);
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.metadata.StringTable}
   */
  public static final class StringTable extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.StringTable)
      StringTableOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        StringTable.class.getName());
    }
    // Use StringTable.newBuilder() to construct.
    private StringTable(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private StringTable() {
      string_ =
          org.jetbrains.kotlin.protobuf.LazyStringArrayList.emptyList();
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_StringTable_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_StringTable_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.metadata.ProtoBuf.StringTable.class, org.jetbrains.kotlin.metadata.ProtoBuf.StringTable.Builder.class);
    }

    public static final int STRING_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private org.jetbrains.kotlin.protobuf.LazyStringArrayList string_ =
        org.jetbrains.kotlin.protobuf.LazyStringArrayList.emptyList();
    /**
     * <code>repeated string string = 1;</code>
     * @return A list containing the string.
     */
    public org.jetbrains.kotlin.protobuf.ProtocolStringList
        getStringList() {
      return string_;
    }
    /**
     * <code>repeated string string = 1;</code>
     * @return The count of string.
     */
    public int getStringCount() {
      return string_.size();
    }
    /**
     * <code>repeated string string = 1;</code>
     * @param index The index of the element to return.
     * @return The string at the given index.
     */
    public java.lang.String getString(int index) {
      return string_.get(index);
    }
    /**
     * <code>repeated string string = 1;</code>
     * @param index The index of the value to return.
     * @return The bytes of the string at the given index.
     */
    public org.jetbrains.kotlin.protobuf.ByteString
        getStringBytes(int index) {
      return string_.getByteString(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < string_.size(); i++) {
        org.jetbrains.kotlin.protobuf.GeneratedMessage.writeString(output, 1, string_.getRaw(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < string_.size(); i++) {
          dataSize += computeStringSizeNoTag(string_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getStringList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.metadata.ProtoBuf.StringTable)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.metadata.ProtoBuf.StringTable other = (org.jetbrains.kotlin.metadata.ProtoBuf.StringTable) obj;

      if (!getStringList()
          .equals(other.getStringList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getStringCount() > 0) {
        hash = (37 * hash) + STRING_FIELD_NUMBER;
        hash = (53 * hash) + getStringList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.StringTable parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.StringTable parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.StringTable parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.StringTable parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.StringTable parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.StringTable parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.StringTable parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.StringTable parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.StringTable parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.StringTable parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.StringTable parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.StringTable parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.metadata.ProtoBuf.StringTable prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.StringTable}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.StringTable)
        org.jetbrains.kotlin.metadata.ProtoBuf.StringTableOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_StringTable_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_StringTable_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.metadata.ProtoBuf.StringTable.class, org.jetbrains.kotlin.metadata.ProtoBuf.StringTable.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.metadata.ProtoBuf.StringTable.newBuilder()
      private Builder() {

      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        string_ =
            org.jetbrains.kotlin.protobuf.LazyStringArrayList.emptyList();
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_StringTable_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.StringTable getDefaultInstanceForType() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.StringTable.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.StringTable build() {
        org.jetbrains.kotlin.metadata.ProtoBuf.StringTable result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.StringTable buildPartial() {
        org.jetbrains.kotlin.metadata.ProtoBuf.StringTable result = new org.jetbrains.kotlin.metadata.ProtoBuf.StringTable(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.jetbrains.kotlin.metadata.ProtoBuf.StringTable result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          string_.makeImmutable();
          result.string_ = string_;
        }
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.metadata.ProtoBuf.StringTable) {
          return mergeFrom((org.jetbrains.kotlin.metadata.ProtoBuf.StringTable)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.metadata.ProtoBuf.StringTable other) {
        if (other == org.jetbrains.kotlin.metadata.ProtoBuf.StringTable.getDefaultInstance()) return this;
        if (!other.string_.isEmpty()) {
          if (string_.isEmpty()) {
            string_ = other.string_;
            bitField0_ |= 0x00000001;
          } else {
            ensureStringIsMutable();
            string_.addAll(other.string_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                org.jetbrains.kotlin.protobuf.ByteString bs = input.readBytes();
                ensureStringIsMutable();
                string_.add(bs);
                break;
              } // case 10
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private org.jetbrains.kotlin.protobuf.LazyStringArrayList string_ =
          org.jetbrains.kotlin.protobuf.LazyStringArrayList.emptyList();
      private void ensureStringIsMutable() {
        if (!string_.isModifiable()) {
          string_ = new org.jetbrains.kotlin.protobuf.LazyStringArrayList(string_);
        }
        bitField0_ |= 0x00000001;
      }
      /**
       * <code>repeated string string = 1;</code>
       * @return A list containing the string.
       */
      public org.jetbrains.kotlin.protobuf.ProtocolStringList
          getStringList() {
        string_.makeImmutable();
        return string_;
      }
      /**
       * <code>repeated string string = 1;</code>
       * @return The count of string.
       */
      public int getStringCount() {
        return string_.size();
      }
      /**
       * <code>repeated string string = 1;</code>
       * @param index The index of the element to return.
       * @return The string at the given index.
       */
      public java.lang.String getString(int index) {
        return string_.get(index);
      }
      /**
       * <code>repeated string string = 1;</code>
       * @param index The index of the value to return.
       * @return The bytes of the string at the given index.
       */
      public org.jetbrains.kotlin.protobuf.ByteString
          getStringBytes(int index) {
        return string_.getByteString(index);
      }
      /**
       * <code>repeated string string = 1;</code>
       * @param index The index to set the value at.
       * @param value The string to set.
       * @return This builder for chaining.
       */
      public Builder setString(
          int index, java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureStringIsMutable();
        string_.set(index, value);
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>repeated string string = 1;</code>
       * @param value The string to add.
       * @return This builder for chaining.
       */
      public Builder addString(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureStringIsMutable();
        string_.add(value);
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>repeated string string = 1;</code>
       * @param values The string to add.
       * @return This builder for chaining.
       */
      public Builder addAllString(
          java.lang.Iterable<java.lang.String> values) {
        ensureStringIsMutable();
        org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
            values, string_);
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>repeated string string = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearString() {
        string_ =
          org.jetbrains.kotlin.protobuf.LazyStringArrayList.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);;
        onChanged();
        return this;
      }
      /**
       * <code>repeated string string = 1;</code>
       * @param value The bytes of the string to add.
       * @return This builder for chaining.
       */
      public Builder addStringBytes(
          org.jetbrains.kotlin.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        ensureStringIsMutable();
        string_.add(value);
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.StringTable)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.StringTable)
    private static final org.jetbrains.kotlin.metadata.ProtoBuf.StringTable DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.metadata.ProtoBuf.StringTable();
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.StringTable getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<StringTable>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<StringTable>() {
      @java.lang.Override
      public StringTable parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<StringTable> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<StringTable> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.StringTable getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface QualifiedNameTableOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.QualifiedNameTable)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName> 
        getQualifiedNameList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName getQualifiedName(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
     */
    int getQualifiedNameCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedNameOrBuilder> 
        getQualifiedNameOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedNameOrBuilder getQualifiedNameOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.metadata.QualifiedNameTable}
   */
  public static final class QualifiedNameTable extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.QualifiedNameTable)
      QualifiedNameTableOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        QualifiedNameTable.class.getName());
    }
    // Use QualifiedNameTable.newBuilder() to construct.
    private QualifiedNameTable(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private QualifiedNameTable() {
      qualifiedName_ = java.util.Collections.emptyList();
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_QualifiedNameTable_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_QualifiedNameTable_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.class, org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.Builder.class);
    }

    public interface QualifiedNameOrBuilder extends
        // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName)
        org.jetbrains.kotlin.protobuf.MessageOrBuilder {

      /**
       * <code>int32 parent_qualified_name = 1 [default = -1];</code>
       * @return Whether the parentQualifiedName field is set.
       */
      boolean hasParentQualifiedName();
      /**
       * <code>int32 parent_qualified_name = 1 [default = -1];</code>
       * @return The parentQualifiedName.
       */
      int getParentQualifiedName();

      /**
       * <pre>
       * id in the StringTable
       * </pre>
       *
       * <code>int32 short_name = 2 [features = { ... }</code>
       * @return Whether the shortName field is set.
       */
      boolean hasShortName();
      /**
       * <pre>
       * id in the StringTable
       * </pre>
       *
       * <code>int32 short_name = 2 [features = { ... }</code>
       * @return The shortName.
       */
      int getShortName();

      /**
       * <code>.org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName.Kind kind = 3 [default = PACKAGE];</code>
       * @return Whether the kind field is set.
       */
      boolean hasKind();
      /**
       * <code>.org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName.Kind kind = 3 [default = PACKAGE];</code>
       * @return The kind.
       */
      org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName.Kind getKind();
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName}
     */
    public static final class QualifiedName extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage implements
        // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName)
        QualifiedNameOrBuilder {
    private static final long serialVersionUID = 0L;
      static {
        org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
          org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
          /* major= */ 4,
          /* minor= */ 29,
          /* patch= */ 3,
          /* suffix= */ "",
          QualifiedName.class.getName());
      }
      // Use QualifiedName.newBuilder() to construct.
      private QualifiedName(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
      }
      private QualifiedName() {
        parentQualifiedName_ = -1;
        kind_ = 1;
      }

      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_QualifiedNameTable_QualifiedName_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_QualifiedNameTable_QualifiedName_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName.class, org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName.Builder.class);
      }

      /**
       * Protobuf enum {@code org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName.Kind}
       */
      public enum Kind
          implements org.jetbrains.kotlin.protobuf.ProtocolMessageEnum {
        /**
         * <code>CLASS = 0;</code>
         */
        CLASS(0),
        /**
         * <code>PACKAGE = 1;</code>
         */
        PACKAGE(1),
        /**
         * <code>LOCAL = 2;</code>
         */
        LOCAL(2),
        ;

        static {
          org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
            org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
            /* major= */ 4,
            /* minor= */ 29,
            /* patch= */ 3,
            /* suffix= */ "",
            Kind.class.getName());
        }
        /**
         * <code>CLASS = 0;</code>
         */
        public static final int CLASS_VALUE = 0;
        /**
         * <code>PACKAGE = 1;</code>
         */
        public static final int PACKAGE_VALUE = 1;
        /**
         * <code>LOCAL = 2;</code>
         */
        public static final int LOCAL_VALUE = 2;


        public final int getNumber() {
          return value;
        }

        /**
         * @param value The numeric wire value of the corresponding enum entry.
         * @return The enum associated with the given numeric wire value.
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @java.lang.Deprecated
        public static Kind valueOf(int value) {
          return forNumber(value);
        }

        /**
         * @param value The numeric wire value of the corresponding enum entry.
         * @return The enum associated with the given numeric wire value.
         */
        public static Kind forNumber(int value) {
          switch (value) {
            case 0: return CLASS;
            case 1: return PACKAGE;
            case 2: return LOCAL;
            default: return null;
          }
        }

        public static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Kind>
            internalGetValueMap() {
          return internalValueMap;
        }
        private static final org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<
            Kind> internalValueMap =
              new org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Kind>() {
                public Kind findValueByNumber(int number) {
                  return Kind.forNumber(number);
                }
              };

        public final org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor
            getValueDescriptor() {
          return getDescriptor().getValues().get(ordinal());
        }
        public final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
            getDescriptorForType() {
          return getDescriptor();
        }
        public static final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
            getDescriptor() {
          return org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName.getDescriptor().getEnumTypes().get(0);
        }

        private static final Kind[] VALUES = values();

        public static Kind valueOf(
            org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor desc) {
          if (desc.getType() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "EnumValueDescriptor is not for this type.");
          }
          return VALUES[desc.getIndex()];
        }

        private final int value;

        private Kind(int value) {
          this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName.Kind)
      }

      private int bitField0_;
      public static final int PARENT_QUALIFIED_NAME_FIELD_NUMBER = 1;
      private int parentQualifiedName_ = -1;
      /**
       * <code>int32 parent_qualified_name = 1 [default = -1];</code>
       * @return Whether the parentQualifiedName field is set.
       */
      @java.lang.Override
      public boolean hasParentQualifiedName() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>int32 parent_qualified_name = 1 [default = -1];</code>
       * @return The parentQualifiedName.
       */
      @java.lang.Override
      public int getParentQualifiedName() {
        return parentQualifiedName_;
      }

      public static final int SHORT_NAME_FIELD_NUMBER = 2;
      private int shortName_ = 0;
      /**
       * <pre>
       * id in the StringTable
       * </pre>
       *
       * <code>int32 short_name = 2 [features = { ... }</code>
       * @return Whether the shortName field is set.
       */
      @java.lang.Override
      public boolean hasShortName() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * id in the StringTable
       * </pre>
       *
       * <code>int32 short_name = 2 [features = { ... }</code>
       * @return The shortName.
       */
      @java.lang.Override
      public int getShortName() {
        return shortName_;
      }

      public static final int KIND_FIELD_NUMBER = 3;
      private int kind_ = 1;
      /**
       * <code>.org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName.Kind kind = 3 [default = PACKAGE];</code>
       * @return Whether the kind field is set.
       */
      @java.lang.Override public boolean hasKind() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName.Kind kind = 3 [default = PACKAGE];</code>
       * @return The kind.
       */
      @java.lang.Override public org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName.Kind getKind() {
        org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName.Kind result = org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName.Kind.forNumber(kind_);
        return result == null ? org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName.Kind.PACKAGE : result;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        if (!hasShortName()) {
          memoizedIsInitialized = 0;
          return false;
        }
        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) != 0)) {
          output.writeInt32(1, parentQualifiedName_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          output.writeInt32(2, shortName_);
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          output.writeEnum(3, kind_);
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) != 0)) {
          size += org.jetbrains.kotlin.protobuf.CodedOutputStream
            .computeInt32Size(1, parentQualifiedName_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          size += org.jetbrains.kotlin.protobuf.CodedOutputStream
            .computeInt32Size(2, shortName_);
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          size += org.jetbrains.kotlin.protobuf.CodedOutputStream
            .computeEnumSize(3, kind_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName)) {
          return super.equals(obj);
        }
        org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName other = (org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName) obj;

        if (hasParentQualifiedName() != other.hasParentQualifiedName()) return false;
        if (hasParentQualifiedName()) {
          if (getParentQualifiedName()
              != other.getParentQualifiedName()) return false;
        }
        if (hasShortName() != other.hasShortName()) return false;
        if (hasShortName()) {
          if (getShortName()
              != other.getShortName()) return false;
        }
        if (hasKind() != other.hasKind()) return false;
        if (hasKind()) {
          if (kind_ != other.kind_) return false;
        }
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasParentQualifiedName()) {
          hash = (37 * hash) + PARENT_QUALIFIED_NAME_FIELD_NUMBER;
          hash = (53 * hash) + getParentQualifiedName();
        }
        if (hasShortName()) {
          hash = (37 * hash) + SHORT_NAME_FIELD_NUMBER;
          hash = (53 * hash) + getShortName();
        }
        if (hasKind()) {
          hash = (37 * hash) + KIND_FIELD_NUMBER;
          hash = (53 * hash) + kind_;
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName parseFrom(
          java.nio.ByteBuffer data)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName parseFrom(
          java.nio.ByteBuffer data,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName parseFrom(
          org.jetbrains.kotlin.protobuf.ByteString data)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName parseFrom(
          org.jetbrains.kotlin.protobuf.ByteString data,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName parseFrom(byte[] data)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName parseFrom(
          byte[] data,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return org.jetbrains.kotlin.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input);
      }
      public static org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName parseFrom(
          java.io.InputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return org.jetbrains.kotlin.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return org.jetbrains.kotlin.protobuf.GeneratedMessage
            .parseDelimitedWithIOException(PARSER, input);
      }

      public static org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName parseDelimitedFrom(
          java.io.InputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return org.jetbrains.kotlin.protobuf.GeneratedMessage
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName parseFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return org.jetbrains.kotlin.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input);
      }
      public static org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName parseFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return org.jetbrains.kotlin.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName}
       */
      public static final class Builder extends
          org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName)
          org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedNameOrBuilder {
        public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_QualifiedNameTable_QualifiedName_descriptor;
        }

        @java.lang.Override
        protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_QualifiedNameTable_QualifiedName_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName.class, org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName.Builder.class);
        }

        // Construct using org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName.newBuilder()
        private Builder() {

        }

        private Builder(
            org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          bitField0_ = 0;
          parentQualifiedName_ = -1;
          shortName_ = 0;
          kind_ = 1;
          return this;
        }

        @java.lang.Override
        public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_QualifiedNameTable_QualifiedName_descriptor;
        }

        @java.lang.Override
        public org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName getDefaultInstanceForType() {
          return org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName.getDefaultInstance();
        }

        @java.lang.Override
        public org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName build() {
          org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName buildPartial() {
          org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName result = new org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName(this);
          if (bitField0_ != 0) { buildPartial0(result); }
          onBuilt();
          return result;
        }

        private void buildPartial0(org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName result) {
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) != 0)) {
            result.parentQualifiedName_ = parentQualifiedName_;
            to_bitField0_ |= 0x00000001;
          }
          if (((from_bitField0_ & 0x00000002) != 0)) {
            result.shortName_ = shortName_;
            to_bitField0_ |= 0x00000002;
          }
          if (((from_bitField0_ & 0x00000004) != 0)) {
            result.kind_ = kind_;
            to_bitField0_ |= 0x00000004;
          }
          result.bitField0_ |= to_bitField0_;
        }

        @java.lang.Override
        public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
          if (other instanceof org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName) {
            return mergeFrom((org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName other) {
          if (other == org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName.getDefaultInstance()) return this;
          if (other.hasParentQualifiedName()) {
            setParentQualifiedName(other.getParentQualifiedName());
          }
          if (other.hasShortName()) {
            setShortName(other.getShortName());
          }
          if (other.hasKind()) {
            setKind(other.getKind());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          if (!hasShortName()) {
            return false;
          }
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            org.jetbrains.kotlin.protobuf.CodedInputStream input,
            org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 8: {
                  parentQualifiedName_ = input.readInt32();
                  bitField0_ |= 0x00000001;
                  break;
                } // case 8
                case 16: {
                  shortName_ = input.readInt32();
                  bitField0_ |= 0x00000002;
                  break;
                } // case 16
                case 24: {
                  int tmpRaw = input.readEnum();
                  org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName.Kind tmpValue =
                      org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName.Kind.forNumber(tmpRaw);
                  if (tmpValue == null) {
                    mergeUnknownVarintField(3, tmpRaw);
                  } else {
                    kind_ = tmpRaw;
                    bitField0_ |= 0x00000004;
                  }
                  break;
                } // case 24
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }
        private int bitField0_;

        private int parentQualifiedName_ = -1;
        /**
         * <code>int32 parent_qualified_name = 1 [default = -1];</code>
         * @return Whether the parentQualifiedName field is set.
         */
        @java.lang.Override
        public boolean hasParentQualifiedName() {
          return ((bitField0_ & 0x00000001) != 0);
        }
        /**
         * <code>int32 parent_qualified_name = 1 [default = -1];</code>
         * @return The parentQualifiedName.
         */
        @java.lang.Override
        public int getParentQualifiedName() {
          return parentQualifiedName_;
        }
        /**
         * <code>int32 parent_qualified_name = 1 [default = -1];</code>
         * @param value The parentQualifiedName to set.
         * @return This builder for chaining.
         */
        public Builder setParentQualifiedName(int value) {

          parentQualifiedName_ = value;
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }
        /**
         * <code>int32 parent_qualified_name = 1 [default = -1];</code>
         * @return This builder for chaining.
         */
        public Builder clearParentQualifiedName() {
          bitField0_ = (bitField0_ & ~0x00000001);
          parentQualifiedName_ = -1;
          onChanged();
          return this;
        }

        private int shortName_ ;
        /**
         * <pre>
         * id in the StringTable
         * </pre>
         *
         * <code>int32 short_name = 2 [features = { ... }</code>
         * @return Whether the shortName field is set.
         */
        @java.lang.Override
        public boolean hasShortName() {
          return ((bitField0_ & 0x00000002) != 0);
        }
        /**
         * <pre>
         * id in the StringTable
         * </pre>
         *
         * <code>int32 short_name = 2 [features = { ... }</code>
         * @return The shortName.
         */
        @java.lang.Override
        public int getShortName() {
          return shortName_;
        }
        /**
         * <pre>
         * id in the StringTable
         * </pre>
         *
         * <code>int32 short_name = 2 [features = { ... }</code>
         * @param value The shortName to set.
         * @return This builder for chaining.
         */
        public Builder setShortName(int value) {

          shortName_ = value;
          bitField0_ |= 0x00000002;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * id in the StringTable
         * </pre>
         *
         * <code>int32 short_name = 2 [features = { ... }</code>
         * @return This builder for chaining.
         */
        public Builder clearShortName() {
          bitField0_ = (bitField0_ & ~0x00000002);
          shortName_ = 0;
          onChanged();
          return this;
        }

        private int kind_ = 1;
        /**
         * <code>.org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName.Kind kind = 3 [default = PACKAGE];</code>
         * @return Whether the kind field is set.
         */
        @java.lang.Override public boolean hasKind() {
          return ((bitField0_ & 0x00000004) != 0);
        }
        /**
         * <code>.org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName.Kind kind = 3 [default = PACKAGE];</code>
         * @return The kind.
         */
        @java.lang.Override
        public org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName.Kind getKind() {
          org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName.Kind result = org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName.Kind.forNumber(kind_);
          return result == null ? org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName.Kind.PACKAGE : result;
        }
        /**
         * <code>.org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName.Kind kind = 3 [default = PACKAGE];</code>
         * @param value The kind to set.
         * @return This builder for chaining.
         */
        public Builder setKind(org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName.Kind value) {
          if (value == null) {
            throw new NullPointerException();
          }
          bitField0_ |= 0x00000004;
          kind_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <code>.org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName.Kind kind = 3 [default = PACKAGE];</code>
         * @return This builder for chaining.
         */
        public Builder clearKind() {
          bitField0_ = (bitField0_ & ~0x00000004);
          kind_ = 1;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName)
      }

      // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName)
      private static final org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName();
      }

      public static org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final org.jetbrains.kotlin.protobuf.Parser<QualifiedName>
          PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<QualifiedName>() {
        @java.lang.Override
        public QualifiedName parsePartialFrom(
            org.jetbrains.kotlin.protobuf.CodedInputStream input,
            org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
            throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static org.jetbrains.kotlin.protobuf.Parser<QualifiedName> parser() {
        return PARSER;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Parser<QualifiedName> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public static final int QUALIFIED_NAME_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName> qualifiedName_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName> getQualifiedNameList() {
      return qualifiedName_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedNameOrBuilder> 
        getQualifiedNameOrBuilderList() {
      return qualifiedName_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
     */
    @java.lang.Override
    public int getQualifiedNameCount() {
      return qualifiedName_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName getQualifiedName(int index) {
      return qualifiedName_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedNameOrBuilder getQualifiedNameOrBuilder(
        int index) {
      return qualifiedName_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getQualifiedNameCount(); i++) {
        if (!getQualifiedName(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < qualifiedName_.size(); i++) {
        output.writeMessage(1, qualifiedName_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < qualifiedName_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, qualifiedName_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable other = (org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable) obj;

      if (!getQualifiedNameList()
          .equals(other.getQualifiedNameList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getQualifiedNameCount() > 0) {
        hash = (37 * hash) + QUALIFIED_NAME_FIELD_NUMBER;
        hash = (53 * hash) + getQualifiedNameList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.QualifiedNameTable}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.QualifiedNameTable)
        org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTableOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_QualifiedNameTable_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_QualifiedNameTable_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.class, org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.newBuilder()
      private Builder() {

      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        if (qualifiedNameBuilder_ == null) {
          qualifiedName_ = java.util.Collections.emptyList();
        } else {
          qualifiedName_ = null;
          qualifiedNameBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_QualifiedNameTable_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable getDefaultInstanceForType() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable build() {
        org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable buildPartial() {
        org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable result = new org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable result) {
        if (qualifiedNameBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            qualifiedName_ = java.util.Collections.unmodifiableList(qualifiedName_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.qualifiedName_ = qualifiedName_;
        } else {
          result.qualifiedName_ = qualifiedNameBuilder_.build();
        }
      }

      private void buildPartial0(org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable result) {
        int from_bitField0_ = bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable) {
          return mergeFrom((org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable other) {
        if (other == org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.getDefaultInstance()) return this;
        if (qualifiedNameBuilder_ == null) {
          if (!other.qualifiedName_.isEmpty()) {
            if (qualifiedName_.isEmpty()) {
              qualifiedName_ = other.qualifiedName_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureQualifiedNameIsMutable();
              qualifiedName_.addAll(other.qualifiedName_);
            }
            onChanged();
          }
        } else {
          if (!other.qualifiedName_.isEmpty()) {
            if (qualifiedNameBuilder_.isEmpty()) {
              qualifiedNameBuilder_.dispose();
              qualifiedNameBuilder_ = null;
              qualifiedName_ = other.qualifiedName_;
              bitField0_ = (bitField0_ & ~0x00000001);
              qualifiedNameBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getQualifiedNameFieldBuilder() : null;
            } else {
              qualifiedNameBuilder_.addAllMessages(other.qualifiedName_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        for (int i = 0; i < getQualifiedNameCount(); i++) {
          if (!getQualifiedName(i).isInitialized()) {
            return false;
          }
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName m =
                    input.readMessage(
                        org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName.parser(),
                        extensionRegistry);
                if (qualifiedNameBuilder_ == null) {
                  ensureQualifiedNameIsMutable();
                  qualifiedName_.add(m);
                } else {
                  qualifiedNameBuilder_.addMessage(m);
                }
                break;
              } // case 10
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName> qualifiedName_ =
        java.util.Collections.emptyList();
      private void ensureQualifiedNameIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          qualifiedName_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName>(qualifiedName_);
          bitField0_ |= 0x00000001;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName, org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedNameOrBuilder> qualifiedNameBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName> getQualifiedNameList() {
        if (qualifiedNameBuilder_ == null) {
          return java.util.Collections.unmodifiableList(qualifiedName_);
        } else {
          return qualifiedNameBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
       */
      public int getQualifiedNameCount() {
        if (qualifiedNameBuilder_ == null) {
          return qualifiedName_.size();
        } else {
          return qualifiedNameBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName getQualifiedName(int index) {
        if (qualifiedNameBuilder_ == null) {
          return qualifiedName_.get(index);
        } else {
          return qualifiedNameBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
       */
      public Builder setQualifiedName(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName value) {
        if (qualifiedNameBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureQualifiedNameIsMutable();
          qualifiedName_.set(index, value);
          onChanged();
        } else {
          qualifiedNameBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
       */
      public Builder setQualifiedName(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName.Builder builderForValue) {
        if (qualifiedNameBuilder_ == null) {
          ensureQualifiedNameIsMutable();
          qualifiedName_.set(index, builderForValue.build());
          onChanged();
        } else {
          qualifiedNameBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
       */
      public Builder addQualifiedName(org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName value) {
        if (qualifiedNameBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureQualifiedNameIsMutable();
          qualifiedName_.add(value);
          onChanged();
        } else {
          qualifiedNameBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
       */
      public Builder addQualifiedName(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName value) {
        if (qualifiedNameBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureQualifiedNameIsMutable();
          qualifiedName_.add(index, value);
          onChanged();
        } else {
          qualifiedNameBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
       */
      public Builder addQualifiedName(
          org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName.Builder builderForValue) {
        if (qualifiedNameBuilder_ == null) {
          ensureQualifiedNameIsMutable();
          qualifiedName_.add(builderForValue.build());
          onChanged();
        } else {
          qualifiedNameBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
       */
      public Builder addQualifiedName(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName.Builder builderForValue) {
        if (qualifiedNameBuilder_ == null) {
          ensureQualifiedNameIsMutable();
          qualifiedName_.add(index, builderForValue.build());
          onChanged();
        } else {
          qualifiedNameBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
       */
      public Builder addAllQualifiedName(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName> values) {
        if (qualifiedNameBuilder_ == null) {
          ensureQualifiedNameIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, qualifiedName_);
          onChanged();
        } else {
          qualifiedNameBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
       */
      public Builder clearQualifiedName() {
        if (qualifiedNameBuilder_ == null) {
          qualifiedName_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          qualifiedNameBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
       */
      public Builder removeQualifiedName(int index) {
        if (qualifiedNameBuilder_ == null) {
          ensureQualifiedNameIsMutable();
          qualifiedName_.remove(index);
          onChanged();
        } else {
          qualifiedNameBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName.Builder getQualifiedNameBuilder(
          int index) {
        return getQualifiedNameFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedNameOrBuilder getQualifiedNameOrBuilder(
          int index) {
        if (qualifiedNameBuilder_ == null) {
          return qualifiedName_.get(index);  } else {
          return qualifiedNameBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedNameOrBuilder> 
           getQualifiedNameOrBuilderList() {
        if (qualifiedNameBuilder_ != null) {
          return qualifiedNameBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(qualifiedName_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName.Builder addQualifiedNameBuilder() {
        return getQualifiedNameFieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName.Builder addQualifiedNameBuilder(
          int index) {
        return getQualifiedNameFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName.Builder> 
           getQualifiedNameBuilderList() {
        return getQualifiedNameFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName, org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedNameOrBuilder> 
          getQualifiedNameFieldBuilder() {
        if (qualifiedNameBuilder_ == null) {
          qualifiedNameBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName, org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedNameOrBuilder>(
                  qualifiedName_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          qualifiedName_ = null;
        }
        return qualifiedNameBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.QualifiedNameTable)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.QualifiedNameTable)
    private static final org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable();
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<QualifiedNameTable>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<QualifiedNameTable>() {
      @java.lang.Override
      public QualifiedNameTable parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<QualifiedNameTable> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<QualifiedNameTable> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface AnnotationOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.Annotation)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>int32 id = 1 [features = { ... }</code>
     * @return Whether the id field is set.
     */
    boolean hasId();
    /**
     * <code>int32 id = 1 [features = { ... }</code>
     * @return The id.
     */
    int getId();

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument> 
        getArgumentList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument getArgument(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
     */
    int getArgumentCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.ArgumentOrBuilder> 
        getArgumentOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.ArgumentOrBuilder getArgumentOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.metadata.Annotation}
   */
  public static final class Annotation extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.Annotation)
      AnnotationOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        Annotation.class.getName());
    }
    // Use Annotation.newBuilder() to construct.
    private Annotation(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Annotation() {
      argument_ = java.util.Collections.emptyList();
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Annotation_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Annotation_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.class, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder.class);
    }

    public interface ArgumentOrBuilder extends
        // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.Annotation.Argument)
        org.jetbrains.kotlin.protobuf.MessageOrBuilder {

      /**
       * <code>int32 name_id = 1 [features = { ... }</code>
       * @return Whether the nameId field is set.
       */
      boolean hasNameId();
      /**
       * <code>int32 name_id = 1 [features = { ... }</code>
       * @return The nameId.
       */
      int getNameId();

      /**
       * <code>.org.jetbrains.kotlin.metadata.Annotation.Argument.Value value = 2 [features = { ... }</code>
       * @return Whether the value field is set.
       */
      boolean hasValue();
      /**
       * <code>.org.jetbrains.kotlin.metadata.Annotation.Argument.Value value = 2 [features = { ... }</code>
       * @return The value.
       */
      org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value getValue();
      /**
       * <code>.org.jetbrains.kotlin.metadata.Annotation.Argument.Value value = 2 [features = { ... }</code>
       */
      org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.ValueOrBuilder getValueOrBuilder();
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.Annotation.Argument}
     */
    public static final class Argument extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage implements
        // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.Annotation.Argument)
        ArgumentOrBuilder {
    private static final long serialVersionUID = 0L;
      static {
        org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
          org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
          /* major= */ 4,
          /* minor= */ 29,
          /* patch= */ 3,
          /* suffix= */ "",
          Argument.class.getName());
      }
      // Use Argument.newBuilder() to construct.
      private Argument(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
      }
      private Argument() {
      }

      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Annotation_Argument_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Annotation_Argument_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.class, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Builder.class);
      }

      public interface ValueOrBuilder extends
          // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.Annotation.Argument.Value)
          org.jetbrains.kotlin.protobuf.MessageOrBuilder {

        /**
         * <pre>
         * Note: a *Value* has a Type, not an Argument! This is done for future language features which may involve using arrays
         * of elements of different types. Such entries are allowed in the constant pool of JVM class files.
         * However, to save space, this field is optional: in case of homogeneous arrays, only the type of the first element is required
         * </pre>
         *
         * <code>.org.jetbrains.kotlin.metadata.Annotation.Argument.Value.Type type = 1;</code>
         * @return Whether the type field is set.
         */
        boolean hasType();
        /**
         * <pre>
         * Note: a *Value* has a Type, not an Argument! This is done for future language features which may involve using arrays
         * of elements of different types. Such entries are allowed in the constant pool of JVM class files.
         * However, to save space, this field is optional: in case of homogeneous arrays, only the type of the first element is required
         * </pre>
         *
         * <code>.org.jetbrains.kotlin.metadata.Annotation.Argument.Value.Type type = 1;</code>
         * @return The type.
         */
        org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value.Type getType();

        /**
         * <code>sint64 int_value = 2;</code>
         * @return Whether the intValue field is set.
         */
        boolean hasIntValue();
        /**
         * <code>sint64 int_value = 2;</code>
         * @return The intValue.
         */
        long getIntValue();

        /**
         * <code>float float_value = 3;</code>
         * @return Whether the floatValue field is set.
         */
        boolean hasFloatValue();
        /**
         * <code>float float_value = 3;</code>
         * @return The floatValue.
         */
        float getFloatValue();

        /**
         * <code>double double_value = 4;</code>
         * @return Whether the doubleValue field is set.
         */
        boolean hasDoubleValue();
        /**
         * <code>double double_value = 4;</code>
         * @return The doubleValue.
         */
        double getDoubleValue();

        /**
         * <code>int32 string_value = 5 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
         * @return Whether the stringValue field is set.
         */
        boolean hasStringValue();
        /**
         * <code>int32 string_value = 5 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
         * @return The stringValue.
         */
        int getStringValue();

        /**
         * <pre>
         * If type = CLASS, FQ name of the referenced class; if type = ENUM, FQ name of the enum class
         * </pre>
         *
         * <code>int32 class_id = 6 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
         * @return Whether the classId field is set.
         */
        boolean hasClassId();
        /**
         * <pre>
         * If type = CLASS, FQ name of the referenced class; if type = ENUM, FQ name of the enum class
         * </pre>
         *
         * <code>int32 class_id = 6 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
         * @return The classId.
         */
        int getClassId();

        /**
         * <code>int32 enum_value_id = 7 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
         * @return Whether the enumValueId field is set.
         */
        boolean hasEnumValueId();
        /**
         * <code>int32 enum_value_id = 7 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
         * @return The enumValueId.
         */
        int getEnumValueId();

        /**
         * <code>.org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
         * @return Whether the annotation field is set.
         */
        boolean hasAnnotation();
        /**
         * <code>.org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
         * @return The annotation.
         */
        org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getAnnotation();
        /**
         * <code>.org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
         */
        org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder getAnnotationOrBuilder();

        /**
         * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
         */
        java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value> 
            getArrayElementList();
        /**
         * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
         */
        org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value getArrayElement(int index);
        /**
         * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
         */
        int getArrayElementCount();
        /**
         * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
         */
        java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.ValueOrBuilder> 
            getArrayElementOrBuilderList();
        /**
         * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
         */
        org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.ValueOrBuilder getArrayElementOrBuilder(
            int index);

        /**
         * <pre>
         * If type = CLASS, the number of dimensions of the array of the class specified in class_id.
         * E.g. if class_id = kotlin/String, this annotation argument value denotes:
         * - String::class, if array_dimension_count = 0
         * - Array&lt;String&gt;::class, if array_dimension_count = 1
         * - Array&lt;Array&lt;String&gt;&gt;::class, if array_dimension_count = 2
         * - etc.
         * Since it's very difficult to represent Kotlin-specific type aspects (nullability, type projections) of array arguments
         * in class literals on JVM, we don't bother to do represent this in our format as well.
         * So, for example, values `Array&lt;Array&lt;in B?&gt;&gt;::class` and `Array&lt;out Array&lt;B&gt;&gt;?&gt;::class` will be represented exactly the same here.
         * </pre>
         *
         * <code>int32 array_dimension_count = 11 [default = 0];</code>
         * @return Whether the arrayDimensionCount field is set.
         */
        boolean hasArrayDimensionCount();
        /**
         * <pre>
         * If type = CLASS, the number of dimensions of the array of the class specified in class_id.
         * E.g. if class_id = kotlin/String, this annotation argument value denotes:
         * - String::class, if array_dimension_count = 0
         * - Array&lt;String&gt;::class, if array_dimension_count = 1
         * - Array&lt;Array&lt;String&gt;&gt;::class, if array_dimension_count = 2
         * - etc.
         * Since it's very difficult to represent Kotlin-specific type aspects (nullability, type projections) of array arguments
         * in class literals on JVM, we don't bother to do represent this in our format as well.
         * So, for example, values `Array&lt;Array&lt;in B?&gt;&gt;::class` and `Array&lt;out Array&lt;B&gt;&gt;?&gt;::class` will be represented exactly the same here.
         * </pre>
         *
         * <code>int32 array_dimension_count = 11 [default = 0];</code>
         * @return The arrayDimensionCount.
         */
        int getArrayDimensionCount();

        /**
         * <pre>
         *
         * isUnsigned
         * </pre>
         *
         * <code>int32 flags = 10 [default = 0];</code>
         * @return Whether the flags field is set.
         */
        boolean hasFlags();
        /**
         * <pre>
         *
         * isUnsigned
         * </pre>
         *
         * <code>int32 flags = 10 [default = 0];</code>
         * @return The flags.
         */
        int getFlags();
      }
      /**
       * Protobuf type {@code org.jetbrains.kotlin.metadata.Annotation.Argument.Value}
       */
      public static final class Value extends
          org.jetbrains.kotlin.protobuf.GeneratedMessage implements
          // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.Annotation.Argument.Value)
          ValueOrBuilder {
      private static final long serialVersionUID = 0L;
        static {
          org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
            org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
            /* major= */ 4,
            /* minor= */ 29,
            /* patch= */ 3,
            /* suffix= */ "",
            Value.class.getName());
        }
        // Use Value.newBuilder() to construct.
        private Value(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
          super(builder);
        }
        private Value() {
          type_ = 0;
          arrayElement_ = java.util.Collections.emptyList();
        }

        public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Annotation_Argument_Value_descriptor;
        }

        @java.lang.Override
        protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Annotation_Argument_Value_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value.class, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value.Builder.class);
        }

        /**
         * Protobuf enum {@code org.jetbrains.kotlin.metadata.Annotation.Argument.Value.Type}
         */
        public enum Type
            implements org.jetbrains.kotlin.protobuf.ProtocolMessageEnum {
          /**
           * <code>BYTE = 0;</code>
           */
          BYTE(0),
          /**
           * <code>CHAR = 1;</code>
           */
          CHAR(1),
          /**
           * <code>SHORT = 2;</code>
           */
          SHORT(2),
          /**
           * <code>INT = 3;</code>
           */
          INT(3),
          /**
           * <code>LONG = 4;</code>
           */
          LONG(4),
          /**
           * <code>FLOAT = 5;</code>
           */
          FLOAT(5),
          /**
           * <code>DOUBLE = 6;</code>
           */
          DOUBLE(6),
          /**
           * <code>BOOLEAN = 7;</code>
           */
          BOOLEAN(7),
          /**
           * <code>STRING = 8;</code>
           */
          STRING(8),
          /**
           * <code>CLASS = 9;</code>
           */
          CLASS(9),
          /**
           * <code>ENUM = 10;</code>
           */
          ENUM(10),
          /**
           * <code>ANNOTATION = 11;</code>
           */
          ANNOTATION(11),
          /**
           * <code>ARRAY = 12;</code>
           */
          ARRAY(12),
          ;

          static {
            org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
              org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
              /* major= */ 4,
              /* minor= */ 29,
              /* patch= */ 3,
              /* suffix= */ "",
              Type.class.getName());
          }
          /**
           * <code>BYTE = 0;</code>
           */
          public static final int BYTE_VALUE = 0;
          /**
           * <code>CHAR = 1;</code>
           */
          public static final int CHAR_VALUE = 1;
          /**
           * <code>SHORT = 2;</code>
           */
          public static final int SHORT_VALUE = 2;
          /**
           * <code>INT = 3;</code>
           */
          public static final int INT_VALUE = 3;
          /**
           * <code>LONG = 4;</code>
           */
          public static final int LONG_VALUE = 4;
          /**
           * <code>FLOAT = 5;</code>
           */
          public static final int FLOAT_VALUE = 5;
          /**
           * <code>DOUBLE = 6;</code>
           */
          public static final int DOUBLE_VALUE = 6;
          /**
           * <code>BOOLEAN = 7;</code>
           */
          public static final int BOOLEAN_VALUE = 7;
          /**
           * <code>STRING = 8;</code>
           */
          public static final int STRING_VALUE = 8;
          /**
           * <code>CLASS = 9;</code>
           */
          public static final int CLASS_VALUE = 9;
          /**
           * <code>ENUM = 10;</code>
           */
          public static final int ENUM_VALUE = 10;
          /**
           * <code>ANNOTATION = 11;</code>
           */
          public static final int ANNOTATION_VALUE = 11;
          /**
           * <code>ARRAY = 12;</code>
           */
          public static final int ARRAY_VALUE = 12;


          public final int getNumber() {
            return value;
          }

          /**
           * @param value The numeric wire value of the corresponding enum entry.
           * @return The enum associated with the given numeric wire value.
           * @deprecated Use {@link #forNumber(int)} instead.
           */
          @java.lang.Deprecated
          public static Type valueOf(int value) {
            return forNumber(value);
          }

          /**
           * @param value The numeric wire value of the corresponding enum entry.
           * @return The enum associated with the given numeric wire value.
           */
          public static Type forNumber(int value) {
            switch (value) {
              case 0: return BYTE;
              case 1: return CHAR;
              case 2: return SHORT;
              case 3: return INT;
              case 4: return LONG;
              case 5: return FLOAT;
              case 6: return DOUBLE;
              case 7: return BOOLEAN;
              case 8: return STRING;
              case 9: return CLASS;
              case 10: return ENUM;
              case 11: return ANNOTATION;
              case 12: return ARRAY;
              default: return null;
            }
          }

          public static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Type>
              internalGetValueMap() {
            return internalValueMap;
          }
          private static final org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<
              Type> internalValueMap =
                new org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Type>() {
                  public Type findValueByNumber(int number) {
                    return Type.forNumber(number);
                  }
                };

          public final org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor
              getValueDescriptor() {
            return getDescriptor().getValues().get(ordinal());
          }
          public final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
              getDescriptorForType() {
            return getDescriptor();
          }
          public static final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
              getDescriptor() {
            return org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value.getDescriptor().getEnumTypes().get(0);
          }

          private static final Type[] VALUES = values();

          public static Type valueOf(
              org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor desc) {
            if (desc.getType() != getDescriptor()) {
              throw new java.lang.IllegalArgumentException(
                "EnumValueDescriptor is not for this type.");
            }
            return VALUES[desc.getIndex()];
          }

          private final int value;

          private Type(int value) {
            this.value = value;
          }

          // @@protoc_insertion_point(enum_scope:org.jetbrains.kotlin.metadata.Annotation.Argument.Value.Type)
        }

        private int bitField0_;
        public static final int TYPE_FIELD_NUMBER = 1;
        private int type_ = 0;
        /**
         * <pre>
         * Note: a *Value* has a Type, not an Argument! This is done for future language features which may involve using arrays
         * of elements of different types. Such entries are allowed in the constant pool of JVM class files.
         * However, to save space, this field is optional: in case of homogeneous arrays, only the type of the first element is required
         * </pre>
         *
         * <code>.org.jetbrains.kotlin.metadata.Annotation.Argument.Value.Type type = 1;</code>
         * @return Whether the type field is set.
         */
        @java.lang.Override public boolean hasType() {
          return ((bitField0_ & 0x00000001) != 0);
        }
        /**
         * <pre>
         * Note: a *Value* has a Type, not an Argument! This is done for future language features which may involve using arrays
         * of elements of different types. Such entries are allowed in the constant pool of JVM class files.
         * However, to save space, this field is optional: in case of homogeneous arrays, only the type of the first element is required
         * </pre>
         *
         * <code>.org.jetbrains.kotlin.metadata.Annotation.Argument.Value.Type type = 1;</code>
         * @return The type.
         */
        @java.lang.Override public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value.Type getType() {
          org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value.Type result = org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value.Type.forNumber(type_);
          return result == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value.Type.BYTE : result;
        }

        public static final int INT_VALUE_FIELD_NUMBER = 2;
        private long intValue_ = 0L;
        /**
         * <code>sint64 int_value = 2;</code>
         * @return Whether the intValue field is set.
         */
        @java.lang.Override
        public boolean hasIntValue() {
          return ((bitField0_ & 0x00000002) != 0);
        }
        /**
         * <code>sint64 int_value = 2;</code>
         * @return The intValue.
         */
        @java.lang.Override
        public long getIntValue() {
          return intValue_;
        }

        public static final int FLOAT_VALUE_FIELD_NUMBER = 3;
        private float floatValue_ = 0F;
        /**
         * <code>float float_value = 3;</code>
         * @return Whether the floatValue field is set.
         */
        @java.lang.Override
        public boolean hasFloatValue() {
          return ((bitField0_ & 0x00000004) != 0);
        }
        /**
         * <code>float float_value = 3;</code>
         * @return The floatValue.
         */
        @java.lang.Override
        public float getFloatValue() {
          return floatValue_;
        }

        public static final int DOUBLE_VALUE_FIELD_NUMBER = 4;
        private double doubleValue_ = 0D;
        /**
         * <code>double double_value = 4;</code>
         * @return Whether the doubleValue field is set.
         */
        @java.lang.Override
        public boolean hasDoubleValue() {
          return ((bitField0_ & 0x00000008) != 0);
        }
        /**
         * <code>double double_value = 4;</code>
         * @return The doubleValue.
         */
        @java.lang.Override
        public double getDoubleValue() {
          return doubleValue_;
        }

        public static final int STRING_VALUE_FIELD_NUMBER = 5;
        private int stringValue_ = 0;
        /**
         * <code>int32 string_value = 5 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
         * @return Whether the stringValue field is set.
         */
        @java.lang.Override
        public boolean hasStringValue() {
          return ((bitField0_ & 0x00000010) != 0);
        }
        /**
         * <code>int32 string_value = 5 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
         * @return The stringValue.
         */
        @java.lang.Override
        public int getStringValue() {
          return stringValue_;
        }

        public static final int CLASS_ID_FIELD_NUMBER = 6;
        private int classId_ = 0;
        /**
         * <pre>
         * If type = CLASS, FQ name of the referenced class; if type = ENUM, FQ name of the enum class
         * </pre>
         *
         * <code>int32 class_id = 6 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
         * @return Whether the classId field is set.
         */
        @java.lang.Override
        public boolean hasClassId() {
          return ((bitField0_ & 0x00000020) != 0);
        }
        /**
         * <pre>
         * If type = CLASS, FQ name of the referenced class; if type = ENUM, FQ name of the enum class
         * </pre>
         *
         * <code>int32 class_id = 6 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
         * @return The classId.
         */
        @java.lang.Override
        public int getClassId() {
          return classId_;
        }

        public static final int ENUM_VALUE_ID_FIELD_NUMBER = 7;
        private int enumValueId_ = 0;
        /**
         * <code>int32 enum_value_id = 7 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
         * @return Whether the enumValueId field is set.
         */
        @java.lang.Override
        public boolean hasEnumValueId() {
          return ((bitField0_ & 0x00000040) != 0);
        }
        /**
         * <code>int32 enum_value_id = 7 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
         * @return The enumValueId.
         */
        @java.lang.Override
        public int getEnumValueId() {
          return enumValueId_;
        }

        public static final int ANNOTATION_FIELD_NUMBER = 8;
        private org.jetbrains.kotlin.metadata.ProtoBuf.Annotation annotation_;
        /**
         * <code>.org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
         * @return Whether the annotation field is set.
         */
        @java.lang.Override
        public boolean hasAnnotation() {
          return ((bitField0_ & 0x00000080) != 0);
        }
        /**
         * <code>.org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
         * @return The annotation.
         */
        @java.lang.Override
        public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getAnnotation() {
          return annotation_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.getDefaultInstance() : annotation_;
        }
        /**
         * <code>.org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
         */
        @java.lang.Override
        public org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder getAnnotationOrBuilder() {
          return annotation_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.getDefaultInstance() : annotation_;
        }

        public static final int ARRAY_ELEMENT_FIELD_NUMBER = 9;
        @SuppressWarnings("serial")
        private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value> arrayElement_;
        /**
         * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
         */
        @java.lang.Override
        public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value> getArrayElementList() {
          return arrayElement_;
        }
        /**
         * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
         */
        @java.lang.Override
        public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.ValueOrBuilder> 
            getArrayElementOrBuilderList() {
          return arrayElement_;
        }
        /**
         * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
         */
        @java.lang.Override
        public int getArrayElementCount() {
          return arrayElement_.size();
        }
        /**
         * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
         */
        @java.lang.Override
        public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value getArrayElement(int index) {
          return arrayElement_.get(index);
        }
        /**
         * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
         */
        @java.lang.Override
        public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.ValueOrBuilder getArrayElementOrBuilder(
            int index) {
          return arrayElement_.get(index);
        }

        public static final int ARRAY_DIMENSION_COUNT_FIELD_NUMBER = 11;
        private int arrayDimensionCount_ = 0;
        /**
         * <pre>
         * If type = CLASS, the number of dimensions of the array of the class specified in class_id.
         * E.g. if class_id = kotlin/String, this annotation argument value denotes:
         * - String::class, if array_dimension_count = 0
         * - Array&lt;String&gt;::class, if array_dimension_count = 1
         * - Array&lt;Array&lt;String&gt;&gt;::class, if array_dimension_count = 2
         * - etc.
         * Since it's very difficult to represent Kotlin-specific type aspects (nullability, type projections) of array arguments
         * in class literals on JVM, we don't bother to do represent this in our format as well.
         * So, for example, values `Array&lt;Array&lt;in B?&gt;&gt;::class` and `Array&lt;out Array&lt;B&gt;&gt;?&gt;::class` will be represented exactly the same here.
         * </pre>
         *
         * <code>int32 array_dimension_count = 11 [default = 0];</code>
         * @return Whether the arrayDimensionCount field is set.
         */
        @java.lang.Override
        public boolean hasArrayDimensionCount() {
          return ((bitField0_ & 0x00000100) != 0);
        }
        /**
         * <pre>
         * If type = CLASS, the number of dimensions of the array of the class specified in class_id.
         * E.g. if class_id = kotlin/String, this annotation argument value denotes:
         * - String::class, if array_dimension_count = 0
         * - Array&lt;String&gt;::class, if array_dimension_count = 1
         * - Array&lt;Array&lt;String&gt;&gt;::class, if array_dimension_count = 2
         * - etc.
         * Since it's very difficult to represent Kotlin-specific type aspects (nullability, type projections) of array arguments
         * in class literals on JVM, we don't bother to do represent this in our format as well.
         * So, for example, values `Array&lt;Array&lt;in B?&gt;&gt;::class` and `Array&lt;out Array&lt;B&gt;&gt;?&gt;::class` will be represented exactly the same here.
         * </pre>
         *
         * <code>int32 array_dimension_count = 11 [default = 0];</code>
         * @return The arrayDimensionCount.
         */
        @java.lang.Override
        public int getArrayDimensionCount() {
          return arrayDimensionCount_;
        }

        public static final int FLAGS_FIELD_NUMBER = 10;
        private int flags_ = 0;
        /**
         * <pre>
         *
         * isUnsigned
         * </pre>
         *
         * <code>int32 flags = 10 [default = 0];</code>
         * @return Whether the flags field is set.
         */
        @java.lang.Override
        public boolean hasFlags() {
          return ((bitField0_ & 0x00000200) != 0);
        }
        /**
         * <pre>
         *
         * isUnsigned
         * </pre>
         *
         * <code>int32 flags = 10 [default = 0];</code>
         * @return The flags.
         */
        @java.lang.Override
        public int getFlags() {
          return flags_;
        }

        private byte memoizedIsInitialized = -1;
        @java.lang.Override
        public final boolean isInitialized() {
          byte isInitialized = memoizedIsInitialized;
          if (isInitialized == 1) return true;
          if (isInitialized == 0) return false;

          if (hasAnnotation()) {
            if (!getAnnotation().isInitialized()) {
              memoizedIsInitialized = 0;
              return false;
            }
          }
          for (int i = 0; i < getArrayElementCount(); i++) {
            if (!getArrayElement(i).isInitialized()) {
              memoizedIsInitialized = 0;
              return false;
            }
          }
          memoizedIsInitialized = 1;
          return true;
        }

        @java.lang.Override
        public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                            throws java.io.IOException {
          if (((bitField0_ & 0x00000001) != 0)) {
            output.writeEnum(1, type_);
          }
          if (((bitField0_ & 0x00000002) != 0)) {
            output.writeSInt64(2, intValue_);
          }
          if (((bitField0_ & 0x00000004) != 0)) {
            output.writeFloat(3, floatValue_);
          }
          if (((bitField0_ & 0x00000008) != 0)) {
            output.writeDouble(4, doubleValue_);
          }
          if (((bitField0_ & 0x00000010) != 0)) {
            output.writeInt32(5, stringValue_);
          }
          if (((bitField0_ & 0x00000020) != 0)) {
            output.writeInt32(6, classId_);
          }
          if (((bitField0_ & 0x00000040) != 0)) {
            output.writeInt32(7, enumValueId_);
          }
          if (((bitField0_ & 0x00000080) != 0)) {
            output.writeMessage(8, getAnnotation());
          }
          for (int i = 0; i < arrayElement_.size(); i++) {
            output.writeMessage(9, arrayElement_.get(i));
          }
          if (((bitField0_ & 0x00000200) != 0)) {
            output.writeInt32(10, flags_);
          }
          if (((bitField0_ & 0x00000100) != 0)) {
            output.writeInt32(11, arrayDimensionCount_);
          }
          getUnknownFields().writeTo(output);
        }

        @java.lang.Override
        public int getSerializedSize() {
          int size = memoizedSize;
          if (size != -1) return size;

          size = 0;
          if (((bitField0_ & 0x00000001) != 0)) {
            size += org.jetbrains.kotlin.protobuf.CodedOutputStream
              .computeEnumSize(1, type_);
          }
          if (((bitField0_ & 0x00000002) != 0)) {
            size += org.jetbrains.kotlin.protobuf.CodedOutputStream
              .computeSInt64Size(2, intValue_);
          }
          if (((bitField0_ & 0x00000004) != 0)) {
            size += org.jetbrains.kotlin.protobuf.CodedOutputStream
              .computeFloatSize(3, floatValue_);
          }
          if (((bitField0_ & 0x00000008) != 0)) {
            size += org.jetbrains.kotlin.protobuf.CodedOutputStream
              .computeDoubleSize(4, doubleValue_);
          }
          if (((bitField0_ & 0x00000010) != 0)) {
            size += org.jetbrains.kotlin.protobuf.CodedOutputStream
              .computeInt32Size(5, stringValue_);
          }
          if (((bitField0_ & 0x00000020) != 0)) {
            size += org.jetbrains.kotlin.protobuf.CodedOutputStream
              .computeInt32Size(6, classId_);
          }
          if (((bitField0_ & 0x00000040) != 0)) {
            size += org.jetbrains.kotlin.protobuf.CodedOutputStream
              .computeInt32Size(7, enumValueId_);
          }
          if (((bitField0_ & 0x00000080) != 0)) {
            size += org.jetbrains.kotlin.protobuf.CodedOutputStream
              .computeMessageSize(8, getAnnotation());
          }
          for (int i = 0; i < arrayElement_.size(); i++) {
            size += org.jetbrains.kotlin.protobuf.CodedOutputStream
              .computeMessageSize(9, arrayElement_.get(i));
          }
          if (((bitField0_ & 0x00000200) != 0)) {
            size += org.jetbrains.kotlin.protobuf.CodedOutputStream
              .computeInt32Size(10, flags_);
          }
          if (((bitField0_ & 0x00000100) != 0)) {
            size += org.jetbrains.kotlin.protobuf.CodedOutputStream
              .computeInt32Size(11, arrayDimensionCount_);
          }
          size += getUnknownFields().getSerializedSize();
          memoizedSize = size;
          return size;
        }

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
          if (obj == this) {
           return true;
          }
          if (!(obj instanceof org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value)) {
            return super.equals(obj);
          }
          org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value other = (org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value) obj;

          if (hasType() != other.hasType()) return false;
          if (hasType()) {
            if (type_ != other.type_) return false;
          }
          if (hasIntValue() != other.hasIntValue()) return false;
          if (hasIntValue()) {
            if (getIntValue()
                != other.getIntValue()) return false;
          }
          if (hasFloatValue() != other.hasFloatValue()) return false;
          if (hasFloatValue()) {
            if (java.lang.Float.floatToIntBits(getFloatValue())
                != java.lang.Float.floatToIntBits(
                    other.getFloatValue())) return false;
          }
          if (hasDoubleValue() != other.hasDoubleValue()) return false;
          if (hasDoubleValue()) {
            if (java.lang.Double.doubleToLongBits(getDoubleValue())
                != java.lang.Double.doubleToLongBits(
                    other.getDoubleValue())) return false;
          }
          if (hasStringValue() != other.hasStringValue()) return false;
          if (hasStringValue()) {
            if (getStringValue()
                != other.getStringValue()) return false;
          }
          if (hasClassId() != other.hasClassId()) return false;
          if (hasClassId()) {
            if (getClassId()
                != other.getClassId()) return false;
          }
          if (hasEnumValueId() != other.hasEnumValueId()) return false;
          if (hasEnumValueId()) {
            if (getEnumValueId()
                != other.getEnumValueId()) return false;
          }
          if (hasAnnotation() != other.hasAnnotation()) return false;
          if (hasAnnotation()) {
            if (!getAnnotation()
                .equals(other.getAnnotation())) return false;
          }
          if (!getArrayElementList()
              .equals(other.getArrayElementList())) return false;
          if (hasArrayDimensionCount() != other.hasArrayDimensionCount()) return false;
          if (hasArrayDimensionCount()) {
            if (getArrayDimensionCount()
                != other.getArrayDimensionCount()) return false;
          }
          if (hasFlags() != other.hasFlags()) return false;
          if (hasFlags()) {
            if (getFlags()
                != other.getFlags()) return false;
          }
          if (!getUnknownFields().equals(other.getUnknownFields())) return false;
          return true;
        }

        @java.lang.Override
        public int hashCode() {
          if (memoizedHashCode != 0) {
            return memoizedHashCode;
          }
          int hash = 41;
          hash = (19 * hash) + getDescriptor().hashCode();
          if (hasType()) {
            hash = (37 * hash) + TYPE_FIELD_NUMBER;
            hash = (53 * hash) + type_;
          }
          if (hasIntValue()) {
            hash = (37 * hash) + INT_VALUE_FIELD_NUMBER;
            hash = (53 * hash) + org.jetbrains.kotlin.protobuf.Internal.hashLong(
                getIntValue());
          }
          if (hasFloatValue()) {
            hash = (37 * hash) + FLOAT_VALUE_FIELD_NUMBER;
            hash = (53 * hash) + java.lang.Float.floatToIntBits(
                getFloatValue());
          }
          if (hasDoubleValue()) {
            hash = (37 * hash) + DOUBLE_VALUE_FIELD_NUMBER;
            hash = (53 * hash) + org.jetbrains.kotlin.protobuf.Internal.hashLong(
                java.lang.Double.doubleToLongBits(getDoubleValue()));
          }
          if (hasStringValue()) {
            hash = (37 * hash) + STRING_VALUE_FIELD_NUMBER;
            hash = (53 * hash) + getStringValue();
          }
          if (hasClassId()) {
            hash = (37 * hash) + CLASS_ID_FIELD_NUMBER;
            hash = (53 * hash) + getClassId();
          }
          if (hasEnumValueId()) {
            hash = (37 * hash) + ENUM_VALUE_ID_FIELD_NUMBER;
            hash = (53 * hash) + getEnumValueId();
          }
          if (hasAnnotation()) {
            hash = (37 * hash) + ANNOTATION_FIELD_NUMBER;
            hash = (53 * hash) + getAnnotation().hashCode();
          }
          if (getArrayElementCount() > 0) {
            hash = (37 * hash) + ARRAY_ELEMENT_FIELD_NUMBER;
            hash = (53 * hash) + getArrayElementList().hashCode();
          }
          if (hasArrayDimensionCount()) {
            hash = (37 * hash) + ARRAY_DIMENSION_COUNT_FIELD_NUMBER;
            hash = (53 * hash) + getArrayDimensionCount();
          }
          if (hasFlags()) {
            hash = (37 * hash) + FLAGS_FIELD_NUMBER;
            hash = (53 * hash) + getFlags();
          }
          hash = (29 * hash) + getUnknownFields().hashCode();
          memoizedHashCode = hash;
          return hash;
        }

        public static org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value parseFrom(
            java.nio.ByteBuffer data)
            throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value parseFrom(
            java.nio.ByteBuffer data,
            org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
            throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value parseFrom(
            org.jetbrains.kotlin.protobuf.ByteString data)
            throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value parseFrom(
            org.jetbrains.kotlin.protobuf.ByteString data,
            org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
            throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value parseFrom(byte[] data)
            throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value parseFrom(
            byte[] data,
            org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
            throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value parseFrom(java.io.InputStream input)
            throws java.io.IOException {
          return org.jetbrains.kotlin.protobuf.GeneratedMessage
              .parseWithIOException(PARSER, input);
        }
        public static org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value parseFrom(
            java.io.InputStream input,
            org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return org.jetbrains.kotlin.protobuf.GeneratedMessage
              .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
          return org.jetbrains.kotlin.protobuf.GeneratedMessage
              .parseDelimitedWithIOException(PARSER, input);
        }

        public static org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value parseDelimitedFrom(
            java.io.InputStream input,
            org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return org.jetbrains.kotlin.protobuf.GeneratedMessage
              .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }
        public static org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value parseFrom(
            org.jetbrains.kotlin.protobuf.CodedInputStream input)
            throws java.io.IOException {
          return org.jetbrains.kotlin.protobuf.GeneratedMessage
              .parseWithIOException(PARSER, input);
        }
        public static org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value parseFrom(
            org.jetbrains.kotlin.protobuf.CodedInputStream input,
            org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return org.jetbrains.kotlin.protobuf.GeneratedMessage
              .parseWithIOException(PARSER, input, extensionRegistry);
        }

        @java.lang.Override
        public Builder newBuilderForType() { return newBuilder(); }
        public static Builder newBuilder() {
          return DEFAULT_INSTANCE.toBuilder();
        }
        public static Builder newBuilder(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value prototype) {
          return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }
        @java.lang.Override
        public Builder toBuilder() {
          return this == DEFAULT_INSTANCE
              ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
            org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
          Builder builder = new Builder(parent);
          return builder;
        }
        /**
         * Protobuf type {@code org.jetbrains.kotlin.metadata.Annotation.Argument.Value}
         */
        public static final class Builder extends
            org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
            // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.Annotation.Argument.Value)
            org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.ValueOrBuilder {
          public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
              getDescriptor() {
            return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Annotation_Argument_Value_descriptor;
          }

          @java.lang.Override
          protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
              internalGetFieldAccessorTable() {
            return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Annotation_Argument_Value_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                    org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value.class, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value.Builder.class);
          }

          // Construct using org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value.newBuilder()
          private Builder() {
            maybeForceBuilderInitialization();
          }

          private Builder(
              org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
            super(parent);
            maybeForceBuilderInitialization();
          }
          private void maybeForceBuilderInitialization() {
            if (org.jetbrains.kotlin.protobuf.GeneratedMessage
                    .alwaysUseFieldBuilders) {
              getAnnotationFieldBuilder();
              getArrayElementFieldBuilder();
            }
          }
          @java.lang.Override
          public Builder clear() {
            super.clear();
            bitField0_ = 0;
            type_ = 0;
            intValue_ = 0L;
            floatValue_ = 0F;
            doubleValue_ = 0D;
            stringValue_ = 0;
            classId_ = 0;
            enumValueId_ = 0;
            annotation_ = null;
            if (annotationBuilder_ != null) {
              annotationBuilder_.dispose();
              annotationBuilder_ = null;
            }
            if (arrayElementBuilder_ == null) {
              arrayElement_ = java.util.Collections.emptyList();
            } else {
              arrayElement_ = null;
              arrayElementBuilder_.clear();
            }
            bitField0_ = (bitField0_ & ~0x00000100);
            arrayDimensionCount_ = 0;
            flags_ = 0;
            return this;
          }

          @java.lang.Override
          public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
              getDescriptorForType() {
            return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Annotation_Argument_Value_descriptor;
          }

          @java.lang.Override
          public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value getDefaultInstanceForType() {
            return org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value.getDefaultInstance();
          }

          @java.lang.Override
          public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value build() {
            org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value result = buildPartial();
            if (!result.isInitialized()) {
              throw newUninitializedMessageException(result);
            }
            return result;
          }

          @java.lang.Override
          public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value buildPartial() {
            org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value result = new org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value(this);
            buildPartialRepeatedFields(result);
            if (bitField0_ != 0) { buildPartial0(result); }
            onBuilt();
            return result;
          }

          private void buildPartialRepeatedFields(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value result) {
            if (arrayElementBuilder_ == null) {
              if (((bitField0_ & 0x00000100) != 0)) {
                arrayElement_ = java.util.Collections.unmodifiableList(arrayElement_);
                bitField0_ = (bitField0_ & ~0x00000100);
              }
              result.arrayElement_ = arrayElement_;
            } else {
              result.arrayElement_ = arrayElementBuilder_.build();
            }
          }

          private void buildPartial0(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value result) {
            int from_bitField0_ = bitField0_;
            int to_bitField0_ = 0;
            if (((from_bitField0_ & 0x00000001) != 0)) {
              result.type_ = type_;
              to_bitField0_ |= 0x00000001;
            }
            if (((from_bitField0_ & 0x00000002) != 0)) {
              result.intValue_ = intValue_;
              to_bitField0_ |= 0x00000002;
            }
            if (((from_bitField0_ & 0x00000004) != 0)) {
              result.floatValue_ = floatValue_;
              to_bitField0_ |= 0x00000004;
            }
            if (((from_bitField0_ & 0x00000008) != 0)) {
              result.doubleValue_ = doubleValue_;
              to_bitField0_ |= 0x00000008;
            }
            if (((from_bitField0_ & 0x00000010) != 0)) {
              result.stringValue_ = stringValue_;
              to_bitField0_ |= 0x00000010;
            }
            if (((from_bitField0_ & 0x00000020) != 0)) {
              result.classId_ = classId_;
              to_bitField0_ |= 0x00000020;
            }
            if (((from_bitField0_ & 0x00000040) != 0)) {
              result.enumValueId_ = enumValueId_;
              to_bitField0_ |= 0x00000040;
            }
            if (((from_bitField0_ & 0x00000080) != 0)) {
              result.annotation_ = annotationBuilder_ == null
                  ? annotation_
                  : annotationBuilder_.build();
              to_bitField0_ |= 0x00000080;
            }
            if (((from_bitField0_ & 0x00000200) != 0)) {
              result.arrayDimensionCount_ = arrayDimensionCount_;
              to_bitField0_ |= 0x00000100;
            }
            if (((from_bitField0_ & 0x00000400) != 0)) {
              result.flags_ = flags_;
              to_bitField0_ |= 0x00000200;
            }
            result.bitField0_ |= to_bitField0_;
          }

          @java.lang.Override
          public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
            if (other instanceof org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value) {
              return mergeFrom((org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value)other);
            } else {
              super.mergeFrom(other);
              return this;
            }
          }

          public Builder mergeFrom(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value other) {
            if (other == org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value.getDefaultInstance()) return this;
            if (other.hasType()) {
              setType(other.getType());
            }
            if (other.hasIntValue()) {
              setIntValue(other.getIntValue());
            }
            if (other.hasFloatValue()) {
              setFloatValue(other.getFloatValue());
            }
            if (other.hasDoubleValue()) {
              setDoubleValue(other.getDoubleValue());
            }
            if (other.hasStringValue()) {
              setStringValue(other.getStringValue());
            }
            if (other.hasClassId()) {
              setClassId(other.getClassId());
            }
            if (other.hasEnumValueId()) {
              setEnumValueId(other.getEnumValueId());
            }
            if (other.hasAnnotation()) {
              mergeAnnotation(other.getAnnotation());
            }
            if (arrayElementBuilder_ == null) {
              if (!other.arrayElement_.isEmpty()) {
                if (arrayElement_.isEmpty()) {
                  arrayElement_ = other.arrayElement_;
                  bitField0_ = (bitField0_ & ~0x00000100);
                } else {
                  ensureArrayElementIsMutable();
                  arrayElement_.addAll(other.arrayElement_);
                }
                onChanged();
              }
            } else {
              if (!other.arrayElement_.isEmpty()) {
                if (arrayElementBuilder_.isEmpty()) {
                  arrayElementBuilder_.dispose();
                  arrayElementBuilder_ = null;
                  arrayElement_ = other.arrayElement_;
                  bitField0_ = (bitField0_ & ~0x00000100);
                  arrayElementBuilder_ = 
                    org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                       getArrayElementFieldBuilder() : null;
                } else {
                  arrayElementBuilder_.addAllMessages(other.arrayElement_);
                }
              }
            }
            if (other.hasArrayDimensionCount()) {
              setArrayDimensionCount(other.getArrayDimensionCount());
            }
            if (other.hasFlags()) {
              setFlags(other.getFlags());
            }
            this.mergeUnknownFields(other.getUnknownFields());
            onChanged();
            return this;
          }

          @java.lang.Override
          public final boolean isInitialized() {
            if (hasAnnotation()) {
              if (!getAnnotation().isInitialized()) {
                return false;
              }
            }
            for (int i = 0; i < getArrayElementCount(); i++) {
              if (!getArrayElement(i).isInitialized()) {
                return false;
              }
            }
            return true;
          }

          @java.lang.Override
          public Builder mergeFrom(
              org.jetbrains.kotlin.protobuf.CodedInputStream input,
              org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
            if (extensionRegistry == null) {
              throw new java.lang.NullPointerException();
            }
            try {
              boolean done = false;
              while (!done) {
                int tag = input.readTag();
                switch (tag) {
                  case 0:
                    done = true;
                    break;
                  case 8: {
                    int tmpRaw = input.readEnum();
                    org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value.Type tmpValue =
                        org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value.Type.forNumber(tmpRaw);
                    if (tmpValue == null) {
                      mergeUnknownVarintField(1, tmpRaw);
                    } else {
                      type_ = tmpRaw;
                      bitField0_ |= 0x00000001;
                    }
                    break;
                  } // case 8
                  case 16: {
                    intValue_ = input.readSInt64();
                    bitField0_ |= 0x00000002;
                    break;
                  } // case 16
                  case 29: {
                    floatValue_ = input.readFloat();
                    bitField0_ |= 0x00000004;
                    break;
                  } // case 29
                  case 33: {
                    doubleValue_ = input.readDouble();
                    bitField0_ |= 0x00000008;
                    break;
                  } // case 33
                  case 40: {
                    stringValue_ = input.readInt32();
                    bitField0_ |= 0x00000010;
                    break;
                  } // case 40
                  case 48: {
                    classId_ = input.readInt32();
                    bitField0_ |= 0x00000020;
                    break;
                  } // case 48
                  case 56: {
                    enumValueId_ = input.readInt32();
                    bitField0_ |= 0x00000040;
                    break;
                  } // case 56
                  case 66: {
                    input.readMessage(
                        getAnnotationFieldBuilder().getBuilder(),
                        extensionRegistry);
                    bitField0_ |= 0x00000080;
                    break;
                  } // case 66
                  case 74: {
                    org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value m =
                        input.readMessage(
                            org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value.parser(),
                            extensionRegistry);
                    if (arrayElementBuilder_ == null) {
                      ensureArrayElementIsMutable();
                      arrayElement_.add(m);
                    } else {
                      arrayElementBuilder_.addMessage(m);
                    }
                    break;
                  } // case 74
                  case 80: {
                    flags_ = input.readInt32();
                    bitField0_ |= 0x00000400;
                    break;
                  } // case 80
                  case 88: {
                    arrayDimensionCount_ = input.readInt32();
                    bitField0_ |= 0x00000200;
                    break;
                  } // case 88
                  default: {
                    if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                      done = true; // was an endgroup tag
                    }
                    break;
                  } // default:
                } // switch (tag)
              } // while (!done)
            } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
              throw e.unwrapIOException();
            } finally {
              onChanged();
            } // finally
            return this;
          }
          private int bitField0_;

          private int type_ = 0;
          /**
           * <pre>
           * Note: a *Value* has a Type, not an Argument! This is done for future language features which may involve using arrays
           * of elements of different types. Such entries are allowed in the constant pool of JVM class files.
           * However, to save space, this field is optional: in case of homogeneous arrays, only the type of the first element is required
           * </pre>
           *
           * <code>.org.jetbrains.kotlin.metadata.Annotation.Argument.Value.Type type = 1;</code>
           * @return Whether the type field is set.
           */
          @java.lang.Override public boolean hasType() {
            return ((bitField0_ & 0x00000001) != 0);
          }
          /**
           * <pre>
           * Note: a *Value* has a Type, not an Argument! This is done for future language features which may involve using arrays
           * of elements of different types. Such entries are allowed in the constant pool of JVM class files.
           * However, to save space, this field is optional: in case of homogeneous arrays, only the type of the first element is required
           * </pre>
           *
           * <code>.org.jetbrains.kotlin.metadata.Annotation.Argument.Value.Type type = 1;</code>
           * @return The type.
           */
          @java.lang.Override
          public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value.Type getType() {
            org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value.Type result = org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value.Type.forNumber(type_);
            return result == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value.Type.BYTE : result;
          }
          /**
           * <pre>
           * Note: a *Value* has a Type, not an Argument! This is done for future language features which may involve using arrays
           * of elements of different types. Such entries are allowed in the constant pool of JVM class files.
           * However, to save space, this field is optional: in case of homogeneous arrays, only the type of the first element is required
           * </pre>
           *
           * <code>.org.jetbrains.kotlin.metadata.Annotation.Argument.Value.Type type = 1;</code>
           * @param value The type to set.
           * @return This builder for chaining.
           */
          public Builder setType(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value.Type value) {
            if (value == null) {
              throw new NullPointerException();
            }
            bitField0_ |= 0x00000001;
            type_ = value.getNumber();
            onChanged();
            return this;
          }
          /**
           * <pre>
           * Note: a *Value* has a Type, not an Argument! This is done for future language features which may involve using arrays
           * of elements of different types. Such entries are allowed in the constant pool of JVM class files.
           * However, to save space, this field is optional: in case of homogeneous arrays, only the type of the first element is required
           * </pre>
           *
           * <code>.org.jetbrains.kotlin.metadata.Annotation.Argument.Value.Type type = 1;</code>
           * @return This builder for chaining.
           */
          public Builder clearType() {
            bitField0_ = (bitField0_ & ~0x00000001);
            type_ = 0;
            onChanged();
            return this;
          }

          private long intValue_ ;
          /**
           * <code>sint64 int_value = 2;</code>
           * @return Whether the intValue field is set.
           */
          @java.lang.Override
          public boolean hasIntValue() {
            return ((bitField0_ & 0x00000002) != 0);
          }
          /**
           * <code>sint64 int_value = 2;</code>
           * @return The intValue.
           */
          @java.lang.Override
          public long getIntValue() {
            return intValue_;
          }
          /**
           * <code>sint64 int_value = 2;</code>
           * @param value The intValue to set.
           * @return This builder for chaining.
           */
          public Builder setIntValue(long value) {

            intValue_ = value;
            bitField0_ |= 0x00000002;
            onChanged();
            return this;
          }
          /**
           * <code>sint64 int_value = 2;</code>
           * @return This builder for chaining.
           */
          public Builder clearIntValue() {
            bitField0_ = (bitField0_ & ~0x00000002);
            intValue_ = 0L;
            onChanged();
            return this;
          }

          private float floatValue_ ;
          /**
           * <code>float float_value = 3;</code>
           * @return Whether the floatValue field is set.
           */
          @java.lang.Override
          public boolean hasFloatValue() {
            return ((bitField0_ & 0x00000004) != 0);
          }
          /**
           * <code>float float_value = 3;</code>
           * @return The floatValue.
           */
          @java.lang.Override
          public float getFloatValue() {
            return floatValue_;
          }
          /**
           * <code>float float_value = 3;</code>
           * @param value The floatValue to set.
           * @return This builder for chaining.
           */
          public Builder setFloatValue(float value) {

            floatValue_ = value;
            bitField0_ |= 0x00000004;
            onChanged();
            return this;
          }
          /**
           * <code>float float_value = 3;</code>
           * @return This builder for chaining.
           */
          public Builder clearFloatValue() {
            bitField0_ = (bitField0_ & ~0x00000004);
            floatValue_ = 0F;
            onChanged();
            return this;
          }

          private double doubleValue_ ;
          /**
           * <code>double double_value = 4;</code>
           * @return Whether the doubleValue field is set.
           */
          @java.lang.Override
          public boolean hasDoubleValue() {
            return ((bitField0_ & 0x00000008) != 0);
          }
          /**
           * <code>double double_value = 4;</code>
           * @return The doubleValue.
           */
          @java.lang.Override
          public double getDoubleValue() {
            return doubleValue_;
          }
          /**
           * <code>double double_value = 4;</code>
           * @param value The doubleValue to set.
           * @return This builder for chaining.
           */
          public Builder setDoubleValue(double value) {

            doubleValue_ = value;
            bitField0_ |= 0x00000008;
            onChanged();
            return this;
          }
          /**
           * <code>double double_value = 4;</code>
           * @return This builder for chaining.
           */
          public Builder clearDoubleValue() {
            bitField0_ = (bitField0_ & ~0x00000008);
            doubleValue_ = 0D;
            onChanged();
            return this;
          }

          private int stringValue_ ;
          /**
           * <code>int32 string_value = 5 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
           * @return Whether the stringValue field is set.
           */
          @java.lang.Override
          public boolean hasStringValue() {
            return ((bitField0_ & 0x00000010) != 0);
          }
          /**
           * <code>int32 string_value = 5 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
           * @return The stringValue.
           */
          @java.lang.Override
          public int getStringValue() {
            return stringValue_;
          }
          /**
           * <code>int32 string_value = 5 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
           * @param value The stringValue to set.
           * @return This builder for chaining.
           */
          public Builder setStringValue(int value) {

            stringValue_ = value;
            bitField0_ |= 0x00000010;
            onChanged();
            return this;
          }
          /**
           * <code>int32 string_value = 5 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
           * @return This builder for chaining.
           */
          public Builder clearStringValue() {
            bitField0_ = (bitField0_ & ~0x00000010);
            stringValue_ = 0;
            onChanged();
            return this;
          }

          private int classId_ ;
          /**
           * <pre>
           * If type = CLASS, FQ name of the referenced class; if type = ENUM, FQ name of the enum class
           * </pre>
           *
           * <code>int32 class_id = 6 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
           * @return Whether the classId field is set.
           */
          @java.lang.Override
          public boolean hasClassId() {
            return ((bitField0_ & 0x00000020) != 0);
          }
          /**
           * <pre>
           * If type = CLASS, FQ name of the referenced class; if type = ENUM, FQ name of the enum class
           * </pre>
           *
           * <code>int32 class_id = 6 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
           * @return The classId.
           */
          @java.lang.Override
          public int getClassId() {
            return classId_;
          }
          /**
           * <pre>
           * If type = CLASS, FQ name of the referenced class; if type = ENUM, FQ name of the enum class
           * </pre>
           *
           * <code>int32 class_id = 6 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
           * @param value The classId to set.
           * @return This builder for chaining.
           */
          public Builder setClassId(int value) {

            classId_ = value;
            bitField0_ |= 0x00000020;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * If type = CLASS, FQ name of the referenced class; if type = ENUM, FQ name of the enum class
           * </pre>
           *
           * <code>int32 class_id = 6 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
           * @return This builder for chaining.
           */
          public Builder clearClassId() {
            bitField0_ = (bitField0_ & ~0x00000020);
            classId_ = 0;
            onChanged();
            return this;
          }

          private int enumValueId_ ;
          /**
           * <code>int32 enum_value_id = 7 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
           * @return Whether the enumValueId field is set.
           */
          @java.lang.Override
          public boolean hasEnumValueId() {
            return ((bitField0_ & 0x00000040) != 0);
          }
          /**
           * <code>int32 enum_value_id = 7 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
           * @return The enumValueId.
           */
          @java.lang.Override
          public int getEnumValueId() {
            return enumValueId_;
          }
          /**
           * <code>int32 enum_value_id = 7 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
           * @param value The enumValueId to set.
           * @return This builder for chaining.
           */
          public Builder setEnumValueId(int value) {

            enumValueId_ = value;
            bitField0_ |= 0x00000040;
            onChanged();
            return this;
          }
          /**
           * <code>int32 enum_value_id = 7 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
           * @return This builder for chaining.
           */
          public Builder clearEnumValueId() {
            bitField0_ = (bitField0_ & ~0x00000040);
            enumValueId_ = 0;
            onChanged();
            return this;
          }

          private org.jetbrains.kotlin.metadata.ProtoBuf.Annotation annotation_;
          private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.metadata.ProtoBuf.Annotation, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> annotationBuilder_;
          /**
           * <code>.org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
           * @return Whether the annotation field is set.
           */
          public boolean hasAnnotation() {
            return ((bitField0_ & 0x00000080) != 0);
          }
          /**
           * <code>.org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
           * @return The annotation.
           */
          public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getAnnotation() {
            if (annotationBuilder_ == null) {
              return annotation_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.getDefaultInstance() : annotation_;
            } else {
              return annotationBuilder_.getMessage();
            }
          }
          /**
           * <code>.org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
           */
          public Builder setAnnotation(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
            if (annotationBuilder_ == null) {
              if (value == null) {
                throw new NullPointerException();
              }
              annotation_ = value;
            } else {
              annotationBuilder_.setMessage(value);
            }
            bitField0_ |= 0x00000080;
            onChanged();
            return this;
          }
          /**
           * <code>.org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
           */
          public Builder setAnnotation(
              org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
            if (annotationBuilder_ == null) {
              annotation_ = builderForValue.build();
            } else {
              annotationBuilder_.setMessage(builderForValue.build());
            }
            bitField0_ |= 0x00000080;
            onChanged();
            return this;
          }
          /**
           * <code>.org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
           */
          public Builder mergeAnnotation(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
            if (annotationBuilder_ == null) {
              if (((bitField0_ & 0x00000080) != 0) &&
                annotation_ != null &&
                annotation_ != org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.getDefaultInstance()) {
                getAnnotationBuilder().mergeFrom(value);
              } else {
                annotation_ = value;
              }
            } else {
              annotationBuilder_.mergeFrom(value);
            }
            if (annotation_ != null) {
              bitField0_ |= 0x00000080;
              onChanged();
            }
            return this;
          }
          /**
           * <code>.org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
           */
          public Builder clearAnnotation() {
            bitField0_ = (bitField0_ & ~0x00000080);
            annotation_ = null;
            if (annotationBuilder_ != null) {
              annotationBuilder_.dispose();
              annotationBuilder_ = null;
            }
            onChanged();
            return this;
          }
          /**
           * <code>.org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
           */
          public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder getAnnotationBuilder() {
            bitField0_ |= 0x00000080;
            onChanged();
            return getAnnotationFieldBuilder().getBuilder();
          }
          /**
           * <code>.org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
           */
          public org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder getAnnotationOrBuilder() {
            if (annotationBuilder_ != null) {
              return annotationBuilder_.getMessageOrBuilder();
            } else {
              return annotation_ == null ?
                  org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.getDefaultInstance() : annotation_;
            }
          }
          /**
           * <code>.org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
           */
          private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.metadata.ProtoBuf.Annotation, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> 
              getAnnotationFieldBuilder() {
            if (annotationBuilder_ == null) {
              annotationBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
                  org.jetbrains.kotlin.metadata.ProtoBuf.Annotation, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder>(
                      getAnnotation(),
                      getParentForChildren(),
                      isClean());
              annotation_ = null;
            }
            return annotationBuilder_;
          }

          private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value> arrayElement_ =
            java.util.Collections.emptyList();
          private void ensureArrayElementIsMutable() {
            if (!((bitField0_ & 0x00000100) != 0)) {
              arrayElement_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value>(arrayElement_);
              bitField0_ |= 0x00000100;
             }
          }

          private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.ValueOrBuilder> arrayElementBuilder_;

          /**
           * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
           */
          public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value> getArrayElementList() {
            if (arrayElementBuilder_ == null) {
              return java.util.Collections.unmodifiableList(arrayElement_);
            } else {
              return arrayElementBuilder_.getMessageList();
            }
          }
          /**
           * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
           */
          public int getArrayElementCount() {
            if (arrayElementBuilder_ == null) {
              return arrayElement_.size();
            } else {
              return arrayElementBuilder_.getCount();
            }
          }
          /**
           * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
           */
          public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value getArrayElement(int index) {
            if (arrayElementBuilder_ == null) {
              return arrayElement_.get(index);
            } else {
              return arrayElementBuilder_.getMessage(index);
            }
          }
          /**
           * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
           */
          public Builder setArrayElement(
              int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value value) {
            if (arrayElementBuilder_ == null) {
              if (value == null) {
                throw new NullPointerException();
              }
              ensureArrayElementIsMutable();
              arrayElement_.set(index, value);
              onChanged();
            } else {
              arrayElementBuilder_.setMessage(index, value);
            }
            return this;
          }
          /**
           * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
           */
          public Builder setArrayElement(
              int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value.Builder builderForValue) {
            if (arrayElementBuilder_ == null) {
              ensureArrayElementIsMutable();
              arrayElement_.set(index, builderForValue.build());
              onChanged();
            } else {
              arrayElementBuilder_.setMessage(index, builderForValue.build());
            }
            return this;
          }
          /**
           * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
           */
          public Builder addArrayElement(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value value) {
            if (arrayElementBuilder_ == null) {
              if (value == null) {
                throw new NullPointerException();
              }
              ensureArrayElementIsMutable();
              arrayElement_.add(value);
              onChanged();
            } else {
              arrayElementBuilder_.addMessage(value);
            }
            return this;
          }
          /**
           * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
           */
          public Builder addArrayElement(
              int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value value) {
            if (arrayElementBuilder_ == null) {
              if (value == null) {
                throw new NullPointerException();
              }
              ensureArrayElementIsMutable();
              arrayElement_.add(index, value);
              onChanged();
            } else {
              arrayElementBuilder_.addMessage(index, value);
            }
            return this;
          }
          /**
           * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
           */
          public Builder addArrayElement(
              org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value.Builder builderForValue) {
            if (arrayElementBuilder_ == null) {
              ensureArrayElementIsMutable();
              arrayElement_.add(builderForValue.build());
              onChanged();
            } else {
              arrayElementBuilder_.addMessage(builderForValue.build());
            }
            return this;
          }
          /**
           * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
           */
          public Builder addArrayElement(
              int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value.Builder builderForValue) {
            if (arrayElementBuilder_ == null) {
              ensureArrayElementIsMutable();
              arrayElement_.add(index, builderForValue.build());
              onChanged();
            } else {
              arrayElementBuilder_.addMessage(index, builderForValue.build());
            }
            return this;
          }
          /**
           * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
           */
          public Builder addAllArrayElement(
              java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value> values) {
            if (arrayElementBuilder_ == null) {
              ensureArrayElementIsMutable();
              org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
                  values, arrayElement_);
              onChanged();
            } else {
              arrayElementBuilder_.addAllMessages(values);
            }
            return this;
          }
          /**
           * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
           */
          public Builder clearArrayElement() {
            if (arrayElementBuilder_ == null) {
              arrayElement_ = java.util.Collections.emptyList();
              bitField0_ = (bitField0_ & ~0x00000100);
              onChanged();
            } else {
              arrayElementBuilder_.clear();
            }
            return this;
          }
          /**
           * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
           */
          public Builder removeArrayElement(int index) {
            if (arrayElementBuilder_ == null) {
              ensureArrayElementIsMutable();
              arrayElement_.remove(index);
              onChanged();
            } else {
              arrayElementBuilder_.remove(index);
            }
            return this;
          }
          /**
           * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
           */
          public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value.Builder getArrayElementBuilder(
              int index) {
            return getArrayElementFieldBuilder().getBuilder(index);
          }
          /**
           * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
           */
          public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.ValueOrBuilder getArrayElementOrBuilder(
              int index) {
            if (arrayElementBuilder_ == null) {
              return arrayElement_.get(index);  } else {
              return arrayElementBuilder_.getMessageOrBuilder(index);
            }
          }
          /**
           * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
           */
          public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.ValueOrBuilder> 
               getArrayElementOrBuilderList() {
            if (arrayElementBuilder_ != null) {
              return arrayElementBuilder_.getMessageOrBuilderList();
            } else {
              return java.util.Collections.unmodifiableList(arrayElement_);
            }
          }
          /**
           * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
           */
          public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value.Builder addArrayElementBuilder() {
            return getArrayElementFieldBuilder().addBuilder(
                org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value.getDefaultInstance());
          }
          /**
           * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
           */
          public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value.Builder addArrayElementBuilder(
              int index) {
            return getArrayElementFieldBuilder().addBuilder(
                index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value.getDefaultInstance());
          }
          /**
           * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
           */
          public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value.Builder> 
               getArrayElementBuilderList() {
            return getArrayElementFieldBuilder().getBuilderList();
          }
          private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.ValueOrBuilder> 
              getArrayElementFieldBuilder() {
            if (arrayElementBuilder_ == null) {
              arrayElementBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
                  org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.ValueOrBuilder>(
                      arrayElement_,
                      ((bitField0_ & 0x00000100) != 0),
                      getParentForChildren(),
                      isClean());
              arrayElement_ = null;
            }
            return arrayElementBuilder_;
          }

          private int arrayDimensionCount_ ;
          /**
           * <pre>
           * If type = CLASS, the number of dimensions of the array of the class specified in class_id.
           * E.g. if class_id = kotlin/String, this annotation argument value denotes:
           * - String::class, if array_dimension_count = 0
           * - Array&lt;String&gt;::class, if array_dimension_count = 1
           * - Array&lt;Array&lt;String&gt;&gt;::class, if array_dimension_count = 2
           * - etc.
           * Since it's very difficult to represent Kotlin-specific type aspects (nullability, type projections) of array arguments
           * in class literals on JVM, we don't bother to do represent this in our format as well.
           * So, for example, values `Array&lt;Array&lt;in B?&gt;&gt;::class` and `Array&lt;out Array&lt;B&gt;&gt;?&gt;::class` will be represented exactly the same here.
           * </pre>
           *
           * <code>int32 array_dimension_count = 11 [default = 0];</code>
           * @return Whether the arrayDimensionCount field is set.
           */
          @java.lang.Override
          public boolean hasArrayDimensionCount() {
            return ((bitField0_ & 0x00000200) != 0);
          }
          /**
           * <pre>
           * If type = CLASS, the number of dimensions of the array of the class specified in class_id.
           * E.g. if class_id = kotlin/String, this annotation argument value denotes:
           * - String::class, if array_dimension_count = 0
           * - Array&lt;String&gt;::class, if array_dimension_count = 1
           * - Array&lt;Array&lt;String&gt;&gt;::class, if array_dimension_count = 2
           * - etc.
           * Since it's very difficult to represent Kotlin-specific type aspects (nullability, type projections) of array arguments
           * in class literals on JVM, we don't bother to do represent this in our format as well.
           * So, for example, values `Array&lt;Array&lt;in B?&gt;&gt;::class` and `Array&lt;out Array&lt;B&gt;&gt;?&gt;::class` will be represented exactly the same here.
           * </pre>
           *
           * <code>int32 array_dimension_count = 11 [default = 0];</code>
           * @return The arrayDimensionCount.
           */
          @java.lang.Override
          public int getArrayDimensionCount() {
            return arrayDimensionCount_;
          }
          /**
           * <pre>
           * If type = CLASS, the number of dimensions of the array of the class specified in class_id.
           * E.g. if class_id = kotlin/String, this annotation argument value denotes:
           * - String::class, if array_dimension_count = 0
           * - Array&lt;String&gt;::class, if array_dimension_count = 1
           * - Array&lt;Array&lt;String&gt;&gt;::class, if array_dimension_count = 2
           * - etc.
           * Since it's very difficult to represent Kotlin-specific type aspects (nullability, type projections) of array arguments
           * in class literals on JVM, we don't bother to do represent this in our format as well.
           * So, for example, values `Array&lt;Array&lt;in B?&gt;&gt;::class` and `Array&lt;out Array&lt;B&gt;&gt;?&gt;::class` will be represented exactly the same here.
           * </pre>
           *
           * <code>int32 array_dimension_count = 11 [default = 0];</code>
           * @param value The arrayDimensionCount to set.
           * @return This builder for chaining.
           */
          public Builder setArrayDimensionCount(int value) {

            arrayDimensionCount_ = value;
            bitField0_ |= 0x00000200;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * If type = CLASS, the number of dimensions of the array of the class specified in class_id.
           * E.g. if class_id = kotlin/String, this annotation argument value denotes:
           * - String::class, if array_dimension_count = 0
           * - Array&lt;String&gt;::class, if array_dimension_count = 1
           * - Array&lt;Array&lt;String&gt;&gt;::class, if array_dimension_count = 2
           * - etc.
           * Since it's very difficult to represent Kotlin-specific type aspects (nullability, type projections) of array arguments
           * in class literals on JVM, we don't bother to do represent this in our format as well.
           * So, for example, values `Array&lt;Array&lt;in B?&gt;&gt;::class` and `Array&lt;out Array&lt;B&gt;&gt;?&gt;::class` will be represented exactly the same here.
           * </pre>
           *
           * <code>int32 array_dimension_count = 11 [default = 0];</code>
           * @return This builder for chaining.
           */
          public Builder clearArrayDimensionCount() {
            bitField0_ = (bitField0_ & ~0x00000200);
            arrayDimensionCount_ = 0;
            onChanged();
            return this;
          }

          private int flags_ ;
          /**
           * <pre>
           *
           * isUnsigned
           * </pre>
           *
           * <code>int32 flags = 10 [default = 0];</code>
           * @return Whether the flags field is set.
           */
          @java.lang.Override
          public boolean hasFlags() {
            return ((bitField0_ & 0x00000400) != 0);
          }
          /**
           * <pre>
           *
           * isUnsigned
           * </pre>
           *
           * <code>int32 flags = 10 [default = 0];</code>
           * @return The flags.
           */
          @java.lang.Override
          public int getFlags() {
            return flags_;
          }
          /**
           * <pre>
           *
           * isUnsigned
           * </pre>
           *
           * <code>int32 flags = 10 [default = 0];</code>
           * @param value The flags to set.
           * @return This builder for chaining.
           */
          public Builder setFlags(int value) {

            flags_ = value;
            bitField0_ |= 0x00000400;
            onChanged();
            return this;
          }
          /**
           * <pre>
           *
           * isUnsigned
           * </pre>
           *
           * <code>int32 flags = 10 [default = 0];</code>
           * @return This builder for chaining.
           */
          public Builder clearFlags() {
            bitField0_ = (bitField0_ & ~0x00000400);
            flags_ = 0;
            onChanged();
            return this;
          }

          // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.Annotation.Argument.Value)
        }

        // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.Annotation.Argument.Value)
        private static final org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value DEFAULT_INSTANCE;
        static {
          DEFAULT_INSTANCE = new org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value();
        }

        public static org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value getDefaultInstance() {
          return DEFAULT_INSTANCE;
        }

        private static final org.jetbrains.kotlin.protobuf.Parser<Value>
            PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<Value>() {
          @java.lang.Override
          public Value parsePartialFrom(
              org.jetbrains.kotlin.protobuf.CodedInputStream input,
              org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
              throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
            Builder builder = newBuilder();
            try {
              builder.mergeFrom(input, extensionRegistry);
            } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
              throw e.setUnfinishedMessage(builder.buildPartial());
            } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
              throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
            } catch (java.io.IOException e) {
              throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
                  .setUnfinishedMessage(builder.buildPartial());
            }
            return builder.buildPartial();
          }
        };

        public static org.jetbrains.kotlin.protobuf.Parser<Value> parser() {
          return PARSER;
        }

        @java.lang.Override
        public org.jetbrains.kotlin.protobuf.Parser<Value> getParserForType() {
          return PARSER;
        }

        @java.lang.Override
        public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value getDefaultInstanceForType() {
          return DEFAULT_INSTANCE;
        }

      }

      private int bitField0_;
      public static final int NAME_ID_FIELD_NUMBER = 1;
      private int nameId_ = 0;
      /**
       * <code>int32 name_id = 1 [features = { ... }</code>
       * @return Whether the nameId field is set.
       */
      @java.lang.Override
      public boolean hasNameId() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>int32 name_id = 1 [features = { ... }</code>
       * @return The nameId.
       */
      @java.lang.Override
      public int getNameId() {
        return nameId_;
      }

      public static final int VALUE_FIELD_NUMBER = 2;
      private org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value value_;
      /**
       * <code>.org.jetbrains.kotlin.metadata.Annotation.Argument.Value value = 2 [features = { ... }</code>
       * @return Whether the value field is set.
       */
      @java.lang.Override
      public boolean hasValue() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Annotation.Argument.Value value = 2 [features = { ... }</code>
       * @return The value.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value getValue() {
        return value_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value.getDefaultInstance() : value_;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Annotation.Argument.Value value = 2 [features = { ... }</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.ValueOrBuilder getValueOrBuilder() {
        return value_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value.getDefaultInstance() : value_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        if (!hasNameId()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!hasValue()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!getValue().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) != 0)) {
          output.writeInt32(1, nameId_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          output.writeMessage(2, getValue());
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) != 0)) {
          size += org.jetbrains.kotlin.protobuf.CodedOutputStream
            .computeInt32Size(1, nameId_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          size += org.jetbrains.kotlin.protobuf.CodedOutputStream
            .computeMessageSize(2, getValue());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument)) {
          return super.equals(obj);
        }
        org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument other = (org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument) obj;

        if (hasNameId() != other.hasNameId()) return false;
        if (hasNameId()) {
          if (getNameId()
              != other.getNameId()) return false;
        }
        if (hasValue() != other.hasValue()) return false;
        if (hasValue()) {
          if (!getValue()
              .equals(other.getValue())) return false;
        }
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasNameId()) {
          hash = (37 * hash) + NAME_ID_FIELD_NUMBER;
          hash = (53 * hash) + getNameId();
        }
        if (hasValue()) {
          hash = (37 * hash) + VALUE_FIELD_NUMBER;
          hash = (53 * hash) + getValue().hashCode();
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument parseFrom(
          java.nio.ByteBuffer data)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument parseFrom(
          java.nio.ByteBuffer data,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument parseFrom(
          org.jetbrains.kotlin.protobuf.ByteString data)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument parseFrom(
          org.jetbrains.kotlin.protobuf.ByteString data,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument parseFrom(byte[] data)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument parseFrom(
          byte[] data,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return org.jetbrains.kotlin.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input);
      }
      public static org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument parseFrom(
          java.io.InputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return org.jetbrains.kotlin.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return org.jetbrains.kotlin.protobuf.GeneratedMessage
            .parseDelimitedWithIOException(PARSER, input);
      }

      public static org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument parseDelimitedFrom(
          java.io.InputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return org.jetbrains.kotlin.protobuf.GeneratedMessage
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument parseFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return org.jetbrains.kotlin.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input);
      }
      public static org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument parseFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return org.jetbrains.kotlin.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code org.jetbrains.kotlin.metadata.Annotation.Argument}
       */
      public static final class Builder extends
          org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.Annotation.Argument)
          org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.ArgumentOrBuilder {
        public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Annotation_Argument_descriptor;
        }

        @java.lang.Override
        protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Annotation_Argument_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.class, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Builder.class);
        }

        // Construct using org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (org.jetbrains.kotlin.protobuf.GeneratedMessage
                  .alwaysUseFieldBuilders) {
            getValueFieldBuilder();
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          bitField0_ = 0;
          nameId_ = 0;
          value_ = null;
          if (valueBuilder_ != null) {
            valueBuilder_.dispose();
            valueBuilder_ = null;
          }
          return this;
        }

        @java.lang.Override
        public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Annotation_Argument_descriptor;
        }

        @java.lang.Override
        public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument getDefaultInstanceForType() {
          return org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.getDefaultInstance();
        }

        @java.lang.Override
        public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument build() {
          org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument buildPartial() {
          org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument result = new org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument(this);
          if (bitField0_ != 0) { buildPartial0(result); }
          onBuilt();
          return result;
        }

        private void buildPartial0(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument result) {
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) != 0)) {
            result.nameId_ = nameId_;
            to_bitField0_ |= 0x00000001;
          }
          if (((from_bitField0_ & 0x00000002) != 0)) {
            result.value_ = valueBuilder_ == null
                ? value_
                : valueBuilder_.build();
            to_bitField0_ |= 0x00000002;
          }
          result.bitField0_ |= to_bitField0_;
        }

        @java.lang.Override
        public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
          if (other instanceof org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument) {
            return mergeFrom((org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument other) {
          if (other == org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.getDefaultInstance()) return this;
          if (other.hasNameId()) {
            setNameId(other.getNameId());
          }
          if (other.hasValue()) {
            mergeValue(other.getValue());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          if (!hasNameId()) {
            return false;
          }
          if (!hasValue()) {
            return false;
          }
          if (!getValue().isInitialized()) {
            return false;
          }
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            org.jetbrains.kotlin.protobuf.CodedInputStream input,
            org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 8: {
                  nameId_ = input.readInt32();
                  bitField0_ |= 0x00000001;
                  break;
                } // case 8
                case 18: {
                  input.readMessage(
                      getValueFieldBuilder().getBuilder(),
                      extensionRegistry);
                  bitField0_ |= 0x00000002;
                  break;
                } // case 18
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }
        private int bitField0_;

        private int nameId_ ;
        /**
         * <code>int32 name_id = 1 [features = { ... }</code>
         * @return Whether the nameId field is set.
         */
        @java.lang.Override
        public boolean hasNameId() {
          return ((bitField0_ & 0x00000001) != 0);
        }
        /**
         * <code>int32 name_id = 1 [features = { ... }</code>
         * @return The nameId.
         */
        @java.lang.Override
        public int getNameId() {
          return nameId_;
        }
        /**
         * <code>int32 name_id = 1 [features = { ... }</code>
         * @param value The nameId to set.
         * @return This builder for chaining.
         */
        public Builder setNameId(int value) {

          nameId_ = value;
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }
        /**
         * <code>int32 name_id = 1 [features = { ... }</code>
         * @return This builder for chaining.
         */
        public Builder clearNameId() {
          bitField0_ = (bitField0_ & ~0x00000001);
          nameId_ = 0;
          onChanged();
          return this;
        }

        private org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value value_;
        private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
            org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.ValueOrBuilder> valueBuilder_;
        /**
         * <code>.org.jetbrains.kotlin.metadata.Annotation.Argument.Value value = 2 [features = { ... }</code>
         * @return Whether the value field is set.
         */
        public boolean hasValue() {
          return ((bitField0_ & 0x00000002) != 0);
        }
        /**
         * <code>.org.jetbrains.kotlin.metadata.Annotation.Argument.Value value = 2 [features = { ... }</code>
         * @return The value.
         */
        public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value getValue() {
          if (valueBuilder_ == null) {
            return value_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value.getDefaultInstance() : value_;
          } else {
            return valueBuilder_.getMessage();
          }
        }
        /**
         * <code>.org.jetbrains.kotlin.metadata.Annotation.Argument.Value value = 2 [features = { ... }</code>
         */
        public Builder setValue(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value value) {
          if (valueBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            value_ = value;
          } else {
            valueBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000002;
          onChanged();
          return this;
        }
        /**
         * <code>.org.jetbrains.kotlin.metadata.Annotation.Argument.Value value = 2 [features = { ... }</code>
         */
        public Builder setValue(
            org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value.Builder builderForValue) {
          if (valueBuilder_ == null) {
            value_ = builderForValue.build();
          } else {
            valueBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000002;
          onChanged();
          return this;
        }
        /**
         * <code>.org.jetbrains.kotlin.metadata.Annotation.Argument.Value value = 2 [features = { ... }</code>
         */
        public Builder mergeValue(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value value) {
          if (valueBuilder_ == null) {
            if (((bitField0_ & 0x00000002) != 0) &&
              value_ != null &&
              value_ != org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value.getDefaultInstance()) {
              getValueBuilder().mergeFrom(value);
            } else {
              value_ = value;
            }
          } else {
            valueBuilder_.mergeFrom(value);
          }
          if (value_ != null) {
            bitField0_ |= 0x00000002;
            onChanged();
          }
          return this;
        }
        /**
         * <code>.org.jetbrains.kotlin.metadata.Annotation.Argument.Value value = 2 [features = { ... }</code>
         */
        public Builder clearValue() {
          bitField0_ = (bitField0_ & ~0x00000002);
          value_ = null;
          if (valueBuilder_ != null) {
            valueBuilder_.dispose();
            valueBuilder_ = null;
          }
          onChanged();
          return this;
        }
        /**
         * <code>.org.jetbrains.kotlin.metadata.Annotation.Argument.Value value = 2 [features = { ... }</code>
         */
        public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value.Builder getValueBuilder() {
          bitField0_ |= 0x00000002;
          onChanged();
          return getValueFieldBuilder().getBuilder();
        }
        /**
         * <code>.org.jetbrains.kotlin.metadata.Annotation.Argument.Value value = 2 [features = { ... }</code>
         */
        public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.ValueOrBuilder getValueOrBuilder() {
          if (valueBuilder_ != null) {
            return valueBuilder_.getMessageOrBuilder();
          } else {
            return value_ == null ?
                org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value.getDefaultInstance() : value_;
          }
        }
        /**
         * <code>.org.jetbrains.kotlin.metadata.Annotation.Argument.Value value = 2 [features = { ... }</code>
         */
        private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
            org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.ValueOrBuilder> 
            getValueFieldBuilder() {
          if (valueBuilder_ == null) {
            valueBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
                org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.ValueOrBuilder>(
                    getValue(),
                    getParentForChildren(),
                    isClean());
            value_ = null;
          }
          return valueBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.Annotation.Argument)
      }

      // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.Annotation.Argument)
      private static final org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument();
      }

      public static org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final org.jetbrains.kotlin.protobuf.Parser<Argument>
          PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<Argument>() {
        @java.lang.Override
        public Argument parsePartialFrom(
            org.jetbrains.kotlin.protobuf.CodedInputStream input,
            org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
            throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static org.jetbrains.kotlin.protobuf.Parser<Argument> parser() {
        return PARSER;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Parser<Argument> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int bitField0_;
    public static final int ID_FIELD_NUMBER = 1;
    private int id_ = 0;
    /**
     * <code>int32 id = 1 [features = { ... }</code>
     * @return Whether the id field is set.
     */
    @java.lang.Override
    public boolean hasId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>int32 id = 1 [features = { ... }</code>
     * @return The id.
     */
    @java.lang.Override
    public int getId() {
      return id_;
    }

    public static final int ARGUMENT_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument> argument_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument> getArgumentList() {
      return argument_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.ArgumentOrBuilder> 
        getArgumentOrBuilderList() {
      return argument_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
     */
    @java.lang.Override
    public int getArgumentCount() {
      return argument_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument getArgument(int index) {
      return argument_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.ArgumentOrBuilder getArgumentOrBuilder(
        int index) {
      return argument_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getArgumentCount(); i++) {
        if (!getArgument(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeInt32(1, id_);
      }
      for (int i = 0; i < argument_.size(); i++) {
        output.writeMessage(2, argument_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(1, id_);
      }
      for (int i = 0; i < argument_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, argument_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.metadata.ProtoBuf.Annotation)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.metadata.ProtoBuf.Annotation other = (org.jetbrains.kotlin.metadata.ProtoBuf.Annotation) obj;

      if (hasId() != other.hasId()) return false;
      if (hasId()) {
        if (getId()
            != other.getId()) return false;
      }
      if (!getArgumentList()
          .equals(other.getArgumentList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasId()) {
        hash = (37 * hash) + ID_FIELD_NUMBER;
        hash = (53 * hash) + getId();
      }
      if (getArgumentCount() > 0) {
        hash = (37 * hash) + ARGUMENT_FIELD_NUMBER;
        hash = (53 * hash) + getArgumentList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Annotation parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Annotation parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Annotation parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Annotation parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Annotation parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Annotation parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Annotation parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Annotation parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Annotation parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Annotation parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Annotation parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Annotation parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.Annotation}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.Annotation)
        org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Annotation_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Annotation_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.class, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.newBuilder()
      private Builder() {

      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        id_ = 0;
        if (argumentBuilder_ == null) {
          argument_ = java.util.Collections.emptyList();
        } else {
          argument_ = null;
          argumentBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Annotation_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getDefaultInstanceForType() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation build() {
        org.jetbrains.kotlin.metadata.ProtoBuf.Annotation result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation buildPartial() {
        org.jetbrains.kotlin.metadata.ProtoBuf.Annotation result = new org.jetbrains.kotlin.metadata.ProtoBuf.Annotation(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation result) {
        if (argumentBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            argument_ = java.util.Collections.unmodifiableList(argument_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.argument_ = argument_;
        } else {
          result.argument_ = argumentBuilder_.build();
        }
      }

      private void buildPartial0(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.id_ = id_;
          to_bitField0_ |= 0x00000001;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.metadata.ProtoBuf.Annotation) {
          return mergeFrom((org.jetbrains.kotlin.metadata.ProtoBuf.Annotation)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation other) {
        if (other == org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.getDefaultInstance()) return this;
        if (other.hasId()) {
          setId(other.getId());
        }
        if (argumentBuilder_ == null) {
          if (!other.argument_.isEmpty()) {
            if (argument_.isEmpty()) {
              argument_ = other.argument_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureArgumentIsMutable();
              argument_.addAll(other.argument_);
            }
            onChanged();
          }
        } else {
          if (!other.argument_.isEmpty()) {
            if (argumentBuilder_.isEmpty()) {
              argumentBuilder_.dispose();
              argumentBuilder_ = null;
              argument_ = other.argument_;
              bitField0_ = (bitField0_ & ~0x00000002);
              argumentBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getArgumentFieldBuilder() : null;
            } else {
              argumentBuilder_.addAllMessages(other.argument_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasId()) {
          return false;
        }
        for (int i = 0; i < getArgumentCount(); i++) {
          if (!getArgument(i).isInitialized()) {
            return false;
          }
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                id_ = input.readInt32();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 18: {
                org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument m =
                    input.readMessage(
                        org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.parser(),
                        extensionRegistry);
                if (argumentBuilder_ == null) {
                  ensureArgumentIsMutable();
                  argument_.add(m);
                } else {
                  argumentBuilder_.addMessage(m);
                }
                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int id_ ;
      /**
       * <code>int32 id = 1 [features = { ... }</code>
       * @return Whether the id field is set.
       */
      @java.lang.Override
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>int32 id = 1 [features = { ... }</code>
       * @return The id.
       */
      @java.lang.Override
      public int getId() {
        return id_;
      }
      /**
       * <code>int32 id = 1 [features = { ... }</code>
       * @param value The id to set.
       * @return This builder for chaining.
       */
      public Builder setId(int value) {

        id_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>int32 id = 1 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        id_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument> argument_ =
        java.util.Collections.emptyList();
      private void ensureArgumentIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          argument_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument>(argument_);
          bitField0_ |= 0x00000002;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.ArgumentOrBuilder> argumentBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument> getArgumentList() {
        if (argumentBuilder_ == null) {
          return java.util.Collections.unmodifiableList(argument_);
        } else {
          return argumentBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
       */
      public int getArgumentCount() {
        if (argumentBuilder_ == null) {
          return argument_.size();
        } else {
          return argumentBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument getArgument(int index) {
        if (argumentBuilder_ == null) {
          return argument_.get(index);
        } else {
          return argumentBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
       */
      public Builder setArgument(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument value) {
        if (argumentBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArgumentIsMutable();
          argument_.set(index, value);
          onChanged();
        } else {
          argumentBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
       */
      public Builder setArgument(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Builder builderForValue) {
        if (argumentBuilder_ == null) {
          ensureArgumentIsMutable();
          argument_.set(index, builderForValue.build());
          onChanged();
        } else {
          argumentBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
       */
      public Builder addArgument(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument value) {
        if (argumentBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArgumentIsMutable();
          argument_.add(value);
          onChanged();
        } else {
          argumentBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
       */
      public Builder addArgument(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument value) {
        if (argumentBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArgumentIsMutable();
          argument_.add(index, value);
          onChanged();
        } else {
          argumentBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
       */
      public Builder addArgument(
          org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Builder builderForValue) {
        if (argumentBuilder_ == null) {
          ensureArgumentIsMutable();
          argument_.add(builderForValue.build());
          onChanged();
        } else {
          argumentBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
       */
      public Builder addArgument(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Builder builderForValue) {
        if (argumentBuilder_ == null) {
          ensureArgumentIsMutable();
          argument_.add(index, builderForValue.build());
          onChanged();
        } else {
          argumentBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
       */
      public Builder addAllArgument(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument> values) {
        if (argumentBuilder_ == null) {
          ensureArgumentIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, argument_);
          onChanged();
        } else {
          argumentBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
       */
      public Builder clearArgument() {
        if (argumentBuilder_ == null) {
          argument_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          argumentBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
       */
      public Builder removeArgument(int index) {
        if (argumentBuilder_ == null) {
          ensureArgumentIsMutable();
          argument_.remove(index);
          onChanged();
        } else {
          argumentBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Builder getArgumentBuilder(
          int index) {
        return getArgumentFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.ArgumentOrBuilder getArgumentOrBuilder(
          int index) {
        if (argumentBuilder_ == null) {
          return argument_.get(index);  } else {
          return argumentBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.ArgumentOrBuilder> 
           getArgumentOrBuilderList() {
        if (argumentBuilder_ != null) {
          return argumentBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(argument_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Builder addArgumentBuilder() {
        return getArgumentFieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Builder addArgumentBuilder(
          int index) {
        return getArgumentFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Builder> 
           getArgumentBuilderList() {
        return getArgumentFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.ArgumentOrBuilder> 
          getArgumentFieldBuilder() {
        if (argumentBuilder_ == null) {
          argumentBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.ArgumentOrBuilder>(
                  argument_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          argument_ = null;
        }
        return argumentBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.Annotation)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.Annotation)
    private static final org.jetbrains.kotlin.metadata.ProtoBuf.Annotation DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.metadata.ProtoBuf.Annotation();
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<Annotation>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<Annotation>() {
      @java.lang.Override
      public Annotation parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<Annotation> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<Annotation> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface TypeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.Type)
      org.jetbrains.kotlin.protobuf.GeneratedMessage.
          ExtendableMessageOrBuilder<Type> {

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument> 
        getArgumentList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument getArgument(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
     */
    int getArgumentCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Type.ArgumentOrBuilder> 
        getArgumentOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Type.ArgumentOrBuilder getArgumentOrBuilder(
        int index);

    /**
     * <code>bool nullable = 3 [default = false];</code>
     * @return Whether the nullable field is set.
     */
    boolean hasNullable();
    /**
     * <code>bool nullable = 3 [default = false];</code>
     * @return The nullable.
     */
    boolean getNullable();

    /**
     * <pre>
     * If this field is set, the type is flexible.
     * All the other fields and extensions represent its lower bound, and flexible_upper_bound must be set and represents its upper bound.
     * </pre>
     *
     * <code>int32 flexible_type_capabilities_id = 4 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
     * @return Whether the flexibleTypeCapabilitiesId field is set.
     */
    boolean hasFlexibleTypeCapabilitiesId();
    /**
     * <pre>
     * If this field is set, the type is flexible.
     * All the other fields and extensions represent its lower bound, and flexible_upper_bound must be set and represents its upper bound.
     * </pre>
     *
     * <code>int32 flexible_type_capabilities_id = 4 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
     * @return The flexibleTypeCapabilitiesId.
     */
    int getFlexibleTypeCapabilitiesId();

    /**
     * <code>.org.jetbrains.kotlin.metadata.Type flexible_upper_bound = 5;</code>
     * @return Whether the flexibleUpperBound field is set.
     */
    boolean hasFlexibleUpperBound();
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type flexible_upper_bound = 5;</code>
     * @return The flexibleUpperBound.
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Type getFlexibleUpperBound();
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type flexible_upper_bound = 5;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder getFlexibleUpperBoundOrBuilder();

    /**
     * <code>int32 flexible_upper_bound_id = 8 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return Whether the flexibleUpperBoundId field is set.
     */
    boolean hasFlexibleUpperBoundId();
    /**
     * <code>int32 flexible_upper_bound_id = 8 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return The flexibleUpperBoundId.
     */
    int getFlexibleUpperBoundId();

    /**
     * <code>int32 class_name = 6 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
     * @return Whether the className field is set.
     */
    boolean hasClassName();
    /**
     * <code>int32 class_name = 6 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
     * @return The className.
     */
    int getClassName();

    /**
     * <pre>
     * id of the type parameter
     * </pre>
     *
     * <code>int32 type_parameter = 7;</code>
     * @return Whether the typeParameter field is set.
     */
    boolean hasTypeParameter();
    /**
     * <pre>
     * id of the type parameter
     * </pre>
     *
     * <code>int32 type_parameter = 7;</code>
     * @return The typeParameter.
     */
    int getTypeParameter();

    /**
     * <pre>
     * Name of the type parameter in the immediate owner
     * </pre>
     *
     * <code>int32 type_parameter_name = 9 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
     * @return Whether the typeParameterName field is set.
     */
    boolean hasTypeParameterName();
    /**
     * <pre>
     * Name of the type parameter in the immediate owner
     * </pre>
     *
     * <code>int32 type_parameter_name = 9 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
     * @return The typeParameterName.
     */
    int getTypeParameterName();

    /**
     * <pre>
     * Note that this may be present only for abbreviated_type
     * Top level types are always fully expanded
     * </pre>
     *
     * <code>int32 type_alias_name = 12 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
     * @return Whether the typeAliasName field is set.
     */
    boolean hasTypeAliasName();
    /**
     * <pre>
     * Note that this may be present only for abbreviated_type
     * Top level types are always fully expanded
     * </pre>
     *
     * <code>int32 type_alias_name = 12 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
     * @return The typeAliasName.
     */
    int getTypeAliasName();

    /**
     * <pre>
     * Outer type may be present only if class_name or type_alias_name is present
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.metadata.Type outer_type = 10;</code>
     * @return Whether the outerType field is set.
     */
    boolean hasOuterType();
    /**
     * <pre>
     * Outer type may be present only if class_name or type_alias_name is present
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.metadata.Type outer_type = 10;</code>
     * @return The outerType.
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Type getOuterType();
    /**
     * <pre>
     * Outer type may be present only if class_name or type_alias_name is present
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.metadata.Type outer_type = 10;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder getOuterTypeOrBuilder();

    /**
     * <code>int32 outer_type_id = 11 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return Whether the outerTypeId field is set.
     */
    boolean hasOuterTypeId();
    /**
     * <code>int32 outer_type_id = 11 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return The outerTypeId.
     */
    int getOuterTypeId();

    /**
     * <code>.org.jetbrains.kotlin.metadata.Type abbreviated_type = 13;</code>
     * @return Whether the abbreviatedType field is set.
     */
    boolean hasAbbreviatedType();
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type abbreviated_type = 13;</code>
     * @return The abbreviatedType.
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Type getAbbreviatedType();
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type abbreviated_type = 13;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder getAbbreviatedTypeOrBuilder();

    /**
     * <code>int32 abbreviated_type_id = 14 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return Whether the abbreviatedTypeId field is set.
     */
    boolean hasAbbreviatedTypeId();
    /**
     * <code>int32 abbreviated_type_id = 14 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return The abbreviatedTypeId.
     */
    int getAbbreviatedTypeId();

    /**
     * <pre>
     *
     * suspend
     * definitelyNonNull
     * </pre>
     *
     * <code>int32 flags = 1;</code>
     * @return Whether the flags field is set.
     */
    boolean hasFlags();
    /**
     * <pre>
     *
     * suspend
     * definitelyNonNull
     * </pre>
     *
     * <code>int32 flags = 1;</code>
     * @return The flags.
     */
    int getFlags();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.metadata.Type}
   */
  public static final class Type extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage.ExtendableMessage<
        Type> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.Type)
      TypeOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        Type.class.getName());
    }
    // Use Type.newBuilder() to construct.
    private Type(org.jetbrains.kotlin.protobuf.GeneratedMessage.ExtendableBuilder<org.jetbrains.kotlin.metadata.ProtoBuf.Type, ?> builder) {
      super(builder);
    }
    private Type() {
      argument_ = java.util.Collections.emptyList();
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Type_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Type_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.metadata.ProtoBuf.Type.class, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder.class);
    }

    public interface ArgumentOrBuilder extends
        // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.Type.Argument)
        org.jetbrains.kotlin.protobuf.MessageOrBuilder {

      /**
       * <code>.org.jetbrains.kotlin.metadata.Type.Argument.Projection projection = 1 [default = INV];</code>
       * @return Whether the projection field is set.
       */
      boolean hasProjection();
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type.Argument.Projection projection = 1 [default = INV];</code>
       * @return The projection.
       */
      org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument.Projection getProjection();

      /**
       * <pre>
       * When projection is STAR, no type is written, otherwise type must be specified
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.Type type = 2;</code>
       * @return Whether the type field is set.
       */
      boolean hasType();
      /**
       * <pre>
       * When projection is STAR, no type is written, otherwise type must be specified
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.Type type = 2;</code>
       * @return The type.
       */
      org.jetbrains.kotlin.metadata.ProtoBuf.Type getType();
      /**
       * <pre>
       * When projection is STAR, no type is written, otherwise type must be specified
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.Type type = 2;</code>
       */
      org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder getTypeOrBuilder();

      /**
       * <code>int32 type_id = 3 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return Whether the typeId field is set.
       */
      boolean hasTypeId();
      /**
       * <code>int32 type_id = 3 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return The typeId.
       */
      int getTypeId();
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.Type.Argument}
     */
    public static final class Argument extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage implements
        // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.Type.Argument)
        ArgumentOrBuilder {
    private static final long serialVersionUID = 0L;
      static {
        org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
          org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
          /* major= */ 4,
          /* minor= */ 29,
          /* patch= */ 3,
          /* suffix= */ "",
          Argument.class.getName());
      }
      // Use Argument.newBuilder() to construct.
      private Argument(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
      }
      private Argument() {
        projection_ = 2;
      }

      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Type_Argument_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Type_Argument_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument.class, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument.Builder.class);
      }

      /**
       * Protobuf enum {@code org.jetbrains.kotlin.metadata.Type.Argument.Projection}
       */
      public enum Projection
          implements org.jetbrains.kotlin.protobuf.ProtocolMessageEnum {
        /**
         * <code>IN = 0;</code>
         */
        IN(0),
        /**
         * <code>OUT = 1;</code>
         */
        OUT(1),
        /**
         * <code>INV = 2;</code>
         */
        INV(2),
        /**
         * <code>STAR = 3;</code>
         */
        STAR(3),
        ;

        static {
          org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
            org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
            /* major= */ 4,
            /* minor= */ 29,
            /* patch= */ 3,
            /* suffix= */ "",
            Projection.class.getName());
        }
        /**
         * <code>IN = 0;</code>
         */
        public static final int IN_VALUE = 0;
        /**
         * <code>OUT = 1;</code>
         */
        public static final int OUT_VALUE = 1;
        /**
         * <code>INV = 2;</code>
         */
        public static final int INV_VALUE = 2;
        /**
         * <code>STAR = 3;</code>
         */
        public static final int STAR_VALUE = 3;


        public final int getNumber() {
          return value;
        }

        /**
         * @param value The numeric wire value of the corresponding enum entry.
         * @return The enum associated with the given numeric wire value.
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @java.lang.Deprecated
        public static Projection valueOf(int value) {
          return forNumber(value);
        }

        /**
         * @param value The numeric wire value of the corresponding enum entry.
         * @return The enum associated with the given numeric wire value.
         */
        public static Projection forNumber(int value) {
          switch (value) {
            case 0: return IN;
            case 1: return OUT;
            case 2: return INV;
            case 3: return STAR;
            default: return null;
          }
        }

        public static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Projection>
            internalGetValueMap() {
          return internalValueMap;
        }
        private static final org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<
            Projection> internalValueMap =
              new org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Projection>() {
                public Projection findValueByNumber(int number) {
                  return Projection.forNumber(number);
                }
              };

        public final org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor
            getValueDescriptor() {
          return getDescriptor().getValues().get(ordinal());
        }
        public final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
            getDescriptorForType() {
          return getDescriptor();
        }
        public static final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
            getDescriptor() {
          return org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument.getDescriptor().getEnumTypes().get(0);
        }

        private static final Projection[] VALUES = values();

        public static Projection valueOf(
            org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor desc) {
          if (desc.getType() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "EnumValueDescriptor is not for this type.");
          }
          return VALUES[desc.getIndex()];
        }

        private final int value;

        private Projection(int value) {
          this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:org.jetbrains.kotlin.metadata.Type.Argument.Projection)
      }

      private int bitField0_;
      public static final int PROJECTION_FIELD_NUMBER = 1;
      private int projection_ = 2;
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type.Argument.Projection projection = 1 [default = INV];</code>
       * @return Whether the projection field is set.
       */
      @java.lang.Override public boolean hasProjection() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type.Argument.Projection projection = 1 [default = INV];</code>
       * @return The projection.
       */
      @java.lang.Override public org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument.Projection getProjection() {
        org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument.Projection result = org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument.Projection.forNumber(projection_);
        return result == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument.Projection.INV : result;
      }

      public static final int TYPE_FIELD_NUMBER = 2;
      private org.jetbrains.kotlin.metadata.ProtoBuf.Type type_;
      /**
       * <pre>
       * When projection is STAR, no type is written, otherwise type must be specified
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.Type type = 2;</code>
       * @return Whether the type field is set.
       */
      @java.lang.Override
      public boolean hasType() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * When projection is STAR, no type is written, otherwise type must be specified
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.Type type = 2;</code>
       * @return The type.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type getType() {
        return type_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance() : type_;
      }
      /**
       * <pre>
       * When projection is STAR, no type is written, otherwise type must be specified
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.Type type = 2;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder getTypeOrBuilder() {
        return type_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance() : type_;
      }

      public static final int TYPE_ID_FIELD_NUMBER = 3;
      private int typeId_ = 0;
      /**
       * <code>int32 type_id = 3 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return Whether the typeId field is set.
       */
      @java.lang.Override
      public boolean hasTypeId() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>int32 type_id = 3 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return The typeId.
       */
      @java.lang.Override
      public int getTypeId() {
        return typeId_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        if (hasType()) {
          if (!getType().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) != 0)) {
          output.writeEnum(1, projection_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          output.writeMessage(2, getType());
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          output.writeInt32(3, typeId_);
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) != 0)) {
          size += org.jetbrains.kotlin.protobuf.CodedOutputStream
            .computeEnumSize(1, projection_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          size += org.jetbrains.kotlin.protobuf.CodedOutputStream
            .computeMessageSize(2, getType());
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          size += org.jetbrains.kotlin.protobuf.CodedOutputStream
            .computeInt32Size(3, typeId_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument)) {
          return super.equals(obj);
        }
        org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument other = (org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument) obj;

        if (hasProjection() != other.hasProjection()) return false;
        if (hasProjection()) {
          if (projection_ != other.projection_) return false;
        }
        if (hasType() != other.hasType()) return false;
        if (hasType()) {
          if (!getType()
              .equals(other.getType())) return false;
        }
        if (hasTypeId() != other.hasTypeId()) return false;
        if (hasTypeId()) {
          if (getTypeId()
              != other.getTypeId()) return false;
        }
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasProjection()) {
          hash = (37 * hash) + PROJECTION_FIELD_NUMBER;
          hash = (53 * hash) + projection_;
        }
        if (hasType()) {
          hash = (37 * hash) + TYPE_FIELD_NUMBER;
          hash = (53 * hash) + getType().hashCode();
        }
        if (hasTypeId()) {
          hash = (37 * hash) + TYPE_ID_FIELD_NUMBER;
          hash = (53 * hash) + getTypeId();
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument parseFrom(
          java.nio.ByteBuffer data)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument parseFrom(
          java.nio.ByteBuffer data,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument parseFrom(
          org.jetbrains.kotlin.protobuf.ByteString data)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument parseFrom(
          org.jetbrains.kotlin.protobuf.ByteString data,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument parseFrom(byte[] data)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument parseFrom(
          byte[] data,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return org.jetbrains.kotlin.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input);
      }
      public static org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument parseFrom(
          java.io.InputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return org.jetbrains.kotlin.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return org.jetbrains.kotlin.protobuf.GeneratedMessage
            .parseDelimitedWithIOException(PARSER, input);
      }

      public static org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument parseDelimitedFrom(
          java.io.InputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return org.jetbrains.kotlin.protobuf.GeneratedMessage
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument parseFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return org.jetbrains.kotlin.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input);
      }
      public static org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument parseFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return org.jetbrains.kotlin.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code org.jetbrains.kotlin.metadata.Type.Argument}
       */
      public static final class Builder extends
          org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.Type.Argument)
          org.jetbrains.kotlin.metadata.ProtoBuf.Type.ArgumentOrBuilder {
        public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Type_Argument_descriptor;
        }

        @java.lang.Override
        protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Type_Argument_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument.class, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument.Builder.class);
        }

        // Construct using org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (org.jetbrains.kotlin.protobuf.GeneratedMessage
                  .alwaysUseFieldBuilders) {
            getTypeFieldBuilder();
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          bitField0_ = 0;
          projection_ = 2;
          type_ = null;
          if (typeBuilder_ != null) {
            typeBuilder_.dispose();
            typeBuilder_ = null;
          }
          typeId_ = 0;
          return this;
        }

        @java.lang.Override
        public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Type_Argument_descriptor;
        }

        @java.lang.Override
        public org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument getDefaultInstanceForType() {
          return org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument.getDefaultInstance();
        }

        @java.lang.Override
        public org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument build() {
          org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument buildPartial() {
          org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument result = new org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument(this);
          if (bitField0_ != 0) { buildPartial0(result); }
          onBuilt();
          return result;
        }

        private void buildPartial0(org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument result) {
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) != 0)) {
            result.projection_ = projection_;
            to_bitField0_ |= 0x00000001;
          }
          if (((from_bitField0_ & 0x00000002) != 0)) {
            result.type_ = typeBuilder_ == null
                ? type_
                : typeBuilder_.build();
            to_bitField0_ |= 0x00000002;
          }
          if (((from_bitField0_ & 0x00000004) != 0)) {
            result.typeId_ = typeId_;
            to_bitField0_ |= 0x00000004;
          }
          result.bitField0_ |= to_bitField0_;
        }

        @java.lang.Override
        public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
          if (other instanceof org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument) {
            return mergeFrom((org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument other) {
          if (other == org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument.getDefaultInstance()) return this;
          if (other.hasProjection()) {
            setProjection(other.getProjection());
          }
          if (other.hasType()) {
            mergeType(other.getType());
          }
          if (other.hasTypeId()) {
            setTypeId(other.getTypeId());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          if (hasType()) {
            if (!getType().isInitialized()) {
              return false;
            }
          }
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            org.jetbrains.kotlin.protobuf.CodedInputStream input,
            org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 8: {
                  int tmpRaw = input.readEnum();
                  org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument.Projection tmpValue =
                      org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument.Projection.forNumber(tmpRaw);
                  if (tmpValue == null) {
                    mergeUnknownVarintField(1, tmpRaw);
                  } else {
                    projection_ = tmpRaw;
                    bitField0_ |= 0x00000001;
                  }
                  break;
                } // case 8
                case 18: {
                  input.readMessage(
                      getTypeFieldBuilder().getBuilder(),
                      extensionRegistry);
                  bitField0_ |= 0x00000002;
                  break;
                } // case 18
                case 24: {
                  typeId_ = input.readInt32();
                  bitField0_ |= 0x00000004;
                  break;
                } // case 24
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }
        private int bitField0_;

        private int projection_ = 2;
        /**
         * <code>.org.jetbrains.kotlin.metadata.Type.Argument.Projection projection = 1 [default = INV];</code>
         * @return Whether the projection field is set.
         */
        @java.lang.Override public boolean hasProjection() {
          return ((bitField0_ & 0x00000001) != 0);
        }
        /**
         * <code>.org.jetbrains.kotlin.metadata.Type.Argument.Projection projection = 1 [default = INV];</code>
         * @return The projection.
         */
        @java.lang.Override
        public org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument.Projection getProjection() {
          org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument.Projection result = org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument.Projection.forNumber(projection_);
          return result == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument.Projection.INV : result;
        }
        /**
         * <code>.org.jetbrains.kotlin.metadata.Type.Argument.Projection projection = 1 [default = INV];</code>
         * @param value The projection to set.
         * @return This builder for chaining.
         */
        public Builder setProjection(org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument.Projection value) {
          if (value == null) {
            throw new NullPointerException();
          }
          bitField0_ |= 0x00000001;
          projection_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <code>.org.jetbrains.kotlin.metadata.Type.Argument.Projection projection = 1 [default = INV];</code>
         * @return This builder for chaining.
         */
        public Builder clearProjection() {
          bitField0_ = (bitField0_ & ~0x00000001);
          projection_ = 2;
          onChanged();
          return this;
        }

        private org.jetbrains.kotlin.metadata.ProtoBuf.Type type_;
        private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
            org.jetbrains.kotlin.metadata.ProtoBuf.Type, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder> typeBuilder_;
        /**
         * <pre>
         * When projection is STAR, no type is written, otherwise type must be specified
         * </pre>
         *
         * <code>.org.jetbrains.kotlin.metadata.Type type = 2;</code>
         * @return Whether the type field is set.
         */
        public boolean hasType() {
          return ((bitField0_ & 0x00000002) != 0);
        }
        /**
         * <pre>
         * When projection is STAR, no type is written, otherwise type must be specified
         * </pre>
         *
         * <code>.org.jetbrains.kotlin.metadata.Type type = 2;</code>
         * @return The type.
         */
        public org.jetbrains.kotlin.metadata.ProtoBuf.Type getType() {
          if (typeBuilder_ == null) {
            return type_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance() : type_;
          } else {
            return typeBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * When projection is STAR, no type is written, otherwise type must be specified
         * </pre>
         *
         * <code>.org.jetbrains.kotlin.metadata.Type type = 2;</code>
         */
        public Builder setType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
          if (typeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            type_ = value;
          } else {
            typeBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000002;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * When projection is STAR, no type is written, otherwise type must be specified
         * </pre>
         *
         * <code>.org.jetbrains.kotlin.metadata.Type type = 2;</code>
         */
        public Builder setType(
            org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder builderForValue) {
          if (typeBuilder_ == null) {
            type_ = builderForValue.build();
          } else {
            typeBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000002;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * When projection is STAR, no type is written, otherwise type must be specified
         * </pre>
         *
         * <code>.org.jetbrains.kotlin.metadata.Type type = 2;</code>
         */
        public Builder mergeType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
          if (typeBuilder_ == null) {
            if (((bitField0_ & 0x00000002) != 0) &&
              type_ != null &&
              type_ != org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance()) {
              getTypeBuilder().mergeFrom(value);
            } else {
              type_ = value;
            }
          } else {
            typeBuilder_.mergeFrom(value);
          }
          if (type_ != null) {
            bitField0_ |= 0x00000002;
            onChanged();
          }
          return this;
        }
        /**
         * <pre>
         * When projection is STAR, no type is written, otherwise type must be specified
         * </pre>
         *
         * <code>.org.jetbrains.kotlin.metadata.Type type = 2;</code>
         */
        public Builder clearType() {
          bitField0_ = (bitField0_ & ~0x00000002);
          type_ = null;
          if (typeBuilder_ != null) {
            typeBuilder_.dispose();
            typeBuilder_ = null;
          }
          onChanged();
          return this;
        }
        /**
         * <pre>
         * When projection is STAR, no type is written, otherwise type must be specified
         * </pre>
         *
         * <code>.org.jetbrains.kotlin.metadata.Type type = 2;</code>
         */
        public org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder getTypeBuilder() {
          bitField0_ |= 0x00000002;
          onChanged();
          return getTypeFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * When projection is STAR, no type is written, otherwise type must be specified
         * </pre>
         *
         * <code>.org.jetbrains.kotlin.metadata.Type type = 2;</code>
         */
        public org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder getTypeOrBuilder() {
          if (typeBuilder_ != null) {
            return typeBuilder_.getMessageOrBuilder();
          } else {
            return type_ == null ?
                org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance() : type_;
          }
        }
        /**
         * <pre>
         * When projection is STAR, no type is written, otherwise type must be specified
         * </pre>
         *
         * <code>.org.jetbrains.kotlin.metadata.Type type = 2;</code>
         */
        private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
            org.jetbrains.kotlin.metadata.ProtoBuf.Type, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder> 
            getTypeFieldBuilder() {
          if (typeBuilder_ == null) {
            typeBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
                org.jetbrains.kotlin.metadata.ProtoBuf.Type, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder>(
                    getType(),
                    getParentForChildren(),
                    isClean());
            type_ = null;
          }
          return typeBuilder_;
        }

        private int typeId_ ;
        /**
         * <code>int32 type_id = 3 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
         * @return Whether the typeId field is set.
         */
        @java.lang.Override
        public boolean hasTypeId() {
          return ((bitField0_ & 0x00000004) != 0);
        }
        /**
         * <code>int32 type_id = 3 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
         * @return The typeId.
         */
        @java.lang.Override
        public int getTypeId() {
          return typeId_;
        }
        /**
         * <code>int32 type_id = 3 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
         * @param value The typeId to set.
         * @return This builder for chaining.
         */
        public Builder setTypeId(int value) {

          typeId_ = value;
          bitField0_ |= 0x00000004;
          onChanged();
          return this;
        }
        /**
         * <code>int32 type_id = 3 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
         * @return This builder for chaining.
         */
        public Builder clearTypeId() {
          bitField0_ = (bitField0_ & ~0x00000004);
          typeId_ = 0;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.Type.Argument)
      }

      // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.Type.Argument)
      private static final org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument();
      }

      public static org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final org.jetbrains.kotlin.protobuf.Parser<Argument>
          PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<Argument>() {
        @java.lang.Override
        public Argument parsePartialFrom(
            org.jetbrains.kotlin.protobuf.CodedInputStream input,
            org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
            throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static org.jetbrains.kotlin.protobuf.Parser<Argument> parser() {
        return PARSER;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Parser<Argument> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int bitField0_;
    public static final int ARGUMENT_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument> argument_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument> getArgumentList() {
      return argument_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Type.ArgumentOrBuilder> 
        getArgumentOrBuilderList() {
      return argument_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
     */
    @java.lang.Override
    public int getArgumentCount() {
      return argument_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument getArgument(int index) {
      return argument_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Type.ArgumentOrBuilder getArgumentOrBuilder(
        int index) {
      return argument_.get(index);
    }

    public static final int NULLABLE_FIELD_NUMBER = 3;
    private boolean nullable_ = false;
    /**
     * <code>bool nullable = 3 [default = false];</code>
     * @return Whether the nullable field is set.
     */
    @java.lang.Override
    public boolean hasNullable() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>bool nullable = 3 [default = false];</code>
     * @return The nullable.
     */
    @java.lang.Override
    public boolean getNullable() {
      return nullable_;
    }

    public static final int FLEXIBLE_TYPE_CAPABILITIES_ID_FIELD_NUMBER = 4;
    private int flexibleTypeCapabilitiesId_ = 0;
    /**
     * <pre>
     * If this field is set, the type is flexible.
     * All the other fields and extensions represent its lower bound, and flexible_upper_bound must be set and represents its upper bound.
     * </pre>
     *
     * <code>int32 flexible_type_capabilities_id = 4 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
     * @return Whether the flexibleTypeCapabilitiesId field is set.
     */
    @java.lang.Override
    public boolean hasFlexibleTypeCapabilitiesId() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * If this field is set, the type is flexible.
     * All the other fields and extensions represent its lower bound, and flexible_upper_bound must be set and represents its upper bound.
     * </pre>
     *
     * <code>int32 flexible_type_capabilities_id = 4 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
     * @return The flexibleTypeCapabilitiesId.
     */
    @java.lang.Override
    public int getFlexibleTypeCapabilitiesId() {
      return flexibleTypeCapabilitiesId_;
    }

    public static final int FLEXIBLE_UPPER_BOUND_FIELD_NUMBER = 5;
    private org.jetbrains.kotlin.metadata.ProtoBuf.Type flexibleUpperBound_;
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type flexible_upper_bound = 5;</code>
     * @return Whether the flexibleUpperBound field is set.
     */
    @java.lang.Override
    public boolean hasFlexibleUpperBound() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type flexible_upper_bound = 5;</code>
     * @return The flexibleUpperBound.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Type getFlexibleUpperBound() {
      return flexibleUpperBound_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance() : flexibleUpperBound_;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type flexible_upper_bound = 5;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder getFlexibleUpperBoundOrBuilder() {
      return flexibleUpperBound_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance() : flexibleUpperBound_;
    }

    public static final int FLEXIBLE_UPPER_BOUND_ID_FIELD_NUMBER = 8;
    private int flexibleUpperBoundId_ = 0;
    /**
     * <code>int32 flexible_upper_bound_id = 8 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return Whether the flexibleUpperBoundId field is set.
     */
    @java.lang.Override
    public boolean hasFlexibleUpperBoundId() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <code>int32 flexible_upper_bound_id = 8 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return The flexibleUpperBoundId.
     */
    @java.lang.Override
    public int getFlexibleUpperBoundId() {
      return flexibleUpperBoundId_;
    }

    public static final int CLASS_NAME_FIELD_NUMBER = 6;
    private int className_ = 0;
    /**
     * <code>int32 class_name = 6 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
     * @return Whether the className field is set.
     */
    @java.lang.Override
    public boolean hasClassName() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <code>int32 class_name = 6 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
     * @return The className.
     */
    @java.lang.Override
    public int getClassName() {
      return className_;
    }

    public static final int TYPE_PARAMETER_FIELD_NUMBER = 7;
    private int typeParameter_ = 0;
    /**
     * <pre>
     * id of the type parameter
     * </pre>
     *
     * <code>int32 type_parameter = 7;</code>
     * @return Whether the typeParameter field is set.
     */
    @java.lang.Override
    public boolean hasTypeParameter() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <pre>
     * id of the type parameter
     * </pre>
     *
     * <code>int32 type_parameter = 7;</code>
     * @return The typeParameter.
     */
    @java.lang.Override
    public int getTypeParameter() {
      return typeParameter_;
    }

    public static final int TYPE_PARAMETER_NAME_FIELD_NUMBER = 9;
    private int typeParameterName_ = 0;
    /**
     * <pre>
     * Name of the type parameter in the immediate owner
     * </pre>
     *
     * <code>int32 type_parameter_name = 9 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
     * @return Whether the typeParameterName field is set.
     */
    @java.lang.Override
    public boolean hasTypeParameterName() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <pre>
     * Name of the type parameter in the immediate owner
     * </pre>
     *
     * <code>int32 type_parameter_name = 9 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
     * @return The typeParameterName.
     */
    @java.lang.Override
    public int getTypeParameterName() {
      return typeParameterName_;
    }

    public static final int TYPE_ALIAS_NAME_FIELD_NUMBER = 12;
    private int typeAliasName_ = 0;
    /**
     * <pre>
     * Note that this may be present only for abbreviated_type
     * Top level types are always fully expanded
     * </pre>
     *
     * <code>int32 type_alias_name = 12 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
     * @return Whether the typeAliasName field is set.
     */
    @java.lang.Override
    public boolean hasTypeAliasName() {
      return ((bitField0_ & 0x00000080) != 0);
    }
    /**
     * <pre>
     * Note that this may be present only for abbreviated_type
     * Top level types are always fully expanded
     * </pre>
     *
     * <code>int32 type_alias_name = 12 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
     * @return The typeAliasName.
     */
    @java.lang.Override
    public int getTypeAliasName() {
      return typeAliasName_;
    }

    public static final int OUTER_TYPE_FIELD_NUMBER = 10;
    private org.jetbrains.kotlin.metadata.ProtoBuf.Type outerType_;
    /**
     * <pre>
     * Outer type may be present only if class_name or type_alias_name is present
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.metadata.Type outer_type = 10;</code>
     * @return Whether the outerType field is set.
     */
    @java.lang.Override
    public boolean hasOuterType() {
      return ((bitField0_ & 0x00000100) != 0);
    }
    /**
     * <pre>
     * Outer type may be present only if class_name or type_alias_name is present
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.metadata.Type outer_type = 10;</code>
     * @return The outerType.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Type getOuterType() {
      return outerType_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance() : outerType_;
    }
    /**
     * <pre>
     * Outer type may be present only if class_name or type_alias_name is present
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.metadata.Type outer_type = 10;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder getOuterTypeOrBuilder() {
      return outerType_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance() : outerType_;
    }

    public static final int OUTER_TYPE_ID_FIELD_NUMBER = 11;
    private int outerTypeId_ = 0;
    /**
     * <code>int32 outer_type_id = 11 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return Whether the outerTypeId field is set.
     */
    @java.lang.Override
    public boolean hasOuterTypeId() {
      return ((bitField0_ & 0x00000200) != 0);
    }
    /**
     * <code>int32 outer_type_id = 11 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return The outerTypeId.
     */
    @java.lang.Override
    public int getOuterTypeId() {
      return outerTypeId_;
    }

    public static final int ABBREVIATED_TYPE_FIELD_NUMBER = 13;
    private org.jetbrains.kotlin.metadata.ProtoBuf.Type abbreviatedType_;
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type abbreviated_type = 13;</code>
     * @return Whether the abbreviatedType field is set.
     */
    @java.lang.Override
    public boolean hasAbbreviatedType() {
      return ((bitField0_ & 0x00000400) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type abbreviated_type = 13;</code>
     * @return The abbreviatedType.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Type getAbbreviatedType() {
      return abbreviatedType_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance() : abbreviatedType_;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type abbreviated_type = 13;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder getAbbreviatedTypeOrBuilder() {
      return abbreviatedType_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance() : abbreviatedType_;
    }

    public static final int ABBREVIATED_TYPE_ID_FIELD_NUMBER = 14;
    private int abbreviatedTypeId_ = 0;
    /**
     * <code>int32 abbreviated_type_id = 14 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return Whether the abbreviatedTypeId field is set.
     */
    @java.lang.Override
    public boolean hasAbbreviatedTypeId() {
      return ((bitField0_ & 0x00000800) != 0);
    }
    /**
     * <code>int32 abbreviated_type_id = 14 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return The abbreviatedTypeId.
     */
    @java.lang.Override
    public int getAbbreviatedTypeId() {
      return abbreviatedTypeId_;
    }

    public static final int FLAGS_FIELD_NUMBER = 1;
    private int flags_ = 0;
    /**
     * <pre>
     *
     * suspend
     * definitelyNonNull
     * </pre>
     *
     * <code>int32 flags = 1;</code>
     * @return Whether the flags field is set.
     */
    @java.lang.Override
    public boolean hasFlags() {
      return ((bitField0_ & 0x00001000) != 0);
    }
    /**
     * <pre>
     *
     * suspend
     * definitelyNonNull
     * </pre>
     *
     * <code>int32 flags = 1;</code>
     * @return The flags.
     */
    @java.lang.Override
    public int getFlags() {
      return flags_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getArgumentCount(); i++) {
        if (!getArgument(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasFlexibleUpperBound()) {
        if (!getFlexibleUpperBound().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasOuterType()) {
        if (!getOuterType().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasAbbreviatedType()) {
        if (!getAbbreviatedType().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (!extensionsAreInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      org.jetbrains.kotlin.protobuf.GeneratedMessage
        .ExtendableMessage.ExtensionSerializer
          extensionWriter = newExtensionSerializer();
      if (((bitField0_ & 0x00001000) != 0)) {
        output.writeInt32(1, flags_);
      }
      for (int i = 0; i < argument_.size(); i++) {
        output.writeMessage(2, argument_.get(i));
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeBool(3, nullable_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeInt32(4, flexibleTypeCapabilitiesId_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeMessage(5, getFlexibleUpperBound());
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        output.writeInt32(6, className_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        output.writeInt32(7, typeParameter_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeInt32(8, flexibleUpperBoundId_);
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        output.writeInt32(9, typeParameterName_);
      }
      if (((bitField0_ & 0x00000100) != 0)) {
        output.writeMessage(10, getOuterType());
      }
      if (((bitField0_ & 0x00000200) != 0)) {
        output.writeInt32(11, outerTypeId_);
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        output.writeInt32(12, typeAliasName_);
      }
      if (((bitField0_ & 0x00000400) != 0)) {
        output.writeMessage(13, getAbbreviatedType());
      }
      if (((bitField0_ & 0x00000800) != 0)) {
        output.writeInt32(14, abbreviatedTypeId_);
      }
      extensionWriter.writeUntil(200, output);
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00001000) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(1, flags_);
      }
      for (int i = 0; i < argument_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, argument_.get(i));
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBoolSize(3, nullable_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(4, flexibleTypeCapabilitiesId_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(5, getFlexibleUpperBound());
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(6, className_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(7, typeParameter_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(8, flexibleUpperBoundId_);
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(9, typeParameterName_);
      }
      if (((bitField0_ & 0x00000100) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(10, getOuterType());
      }
      if (((bitField0_ & 0x00000200) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(11, outerTypeId_);
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(12, typeAliasName_);
      }
      if (((bitField0_ & 0x00000400) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(13, getAbbreviatedType());
      }
      if (((bitField0_ & 0x00000800) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(14, abbreviatedTypeId_);
      }
      size += extensionsSerializedSize();
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.metadata.ProtoBuf.Type)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.metadata.ProtoBuf.Type other = (org.jetbrains.kotlin.metadata.ProtoBuf.Type) obj;

      if (!getArgumentList()
          .equals(other.getArgumentList())) return false;
      if (hasNullable() != other.hasNullable()) return false;
      if (hasNullable()) {
        if (getNullable()
            != other.getNullable()) return false;
      }
      if (hasFlexibleTypeCapabilitiesId() != other.hasFlexibleTypeCapabilitiesId()) return false;
      if (hasFlexibleTypeCapabilitiesId()) {
        if (getFlexibleTypeCapabilitiesId()
            != other.getFlexibleTypeCapabilitiesId()) return false;
      }
      if (hasFlexibleUpperBound() != other.hasFlexibleUpperBound()) return false;
      if (hasFlexibleUpperBound()) {
        if (!getFlexibleUpperBound()
            .equals(other.getFlexibleUpperBound())) return false;
      }
      if (hasFlexibleUpperBoundId() != other.hasFlexibleUpperBoundId()) return false;
      if (hasFlexibleUpperBoundId()) {
        if (getFlexibleUpperBoundId()
            != other.getFlexibleUpperBoundId()) return false;
      }
      if (hasClassName() != other.hasClassName()) return false;
      if (hasClassName()) {
        if (getClassName()
            != other.getClassName()) return false;
      }
      if (hasTypeParameter() != other.hasTypeParameter()) return false;
      if (hasTypeParameter()) {
        if (getTypeParameter()
            != other.getTypeParameter()) return false;
      }
      if (hasTypeParameterName() != other.hasTypeParameterName()) return false;
      if (hasTypeParameterName()) {
        if (getTypeParameterName()
            != other.getTypeParameterName()) return false;
      }
      if (hasTypeAliasName() != other.hasTypeAliasName()) return false;
      if (hasTypeAliasName()) {
        if (getTypeAliasName()
            != other.getTypeAliasName()) return false;
      }
      if (hasOuterType() != other.hasOuterType()) return false;
      if (hasOuterType()) {
        if (!getOuterType()
            .equals(other.getOuterType())) return false;
      }
      if (hasOuterTypeId() != other.hasOuterTypeId()) return false;
      if (hasOuterTypeId()) {
        if (getOuterTypeId()
            != other.getOuterTypeId()) return false;
      }
      if (hasAbbreviatedType() != other.hasAbbreviatedType()) return false;
      if (hasAbbreviatedType()) {
        if (!getAbbreviatedType()
            .equals(other.getAbbreviatedType())) return false;
      }
      if (hasAbbreviatedTypeId() != other.hasAbbreviatedTypeId()) return false;
      if (hasAbbreviatedTypeId()) {
        if (getAbbreviatedTypeId()
            != other.getAbbreviatedTypeId()) return false;
      }
      if (hasFlags() != other.hasFlags()) return false;
      if (hasFlags()) {
        if (getFlags()
            != other.getFlags()) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      if (!getExtensionFields().equals(other.getExtensionFields()))
        return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getArgumentCount() > 0) {
        hash = (37 * hash) + ARGUMENT_FIELD_NUMBER;
        hash = (53 * hash) + getArgumentList().hashCode();
      }
      if (hasNullable()) {
        hash = (37 * hash) + NULLABLE_FIELD_NUMBER;
        hash = (53 * hash) + org.jetbrains.kotlin.protobuf.Internal.hashBoolean(
            getNullable());
      }
      if (hasFlexibleTypeCapabilitiesId()) {
        hash = (37 * hash) + FLEXIBLE_TYPE_CAPABILITIES_ID_FIELD_NUMBER;
        hash = (53 * hash) + getFlexibleTypeCapabilitiesId();
      }
      if (hasFlexibleUpperBound()) {
        hash = (37 * hash) + FLEXIBLE_UPPER_BOUND_FIELD_NUMBER;
        hash = (53 * hash) + getFlexibleUpperBound().hashCode();
      }
      if (hasFlexibleUpperBoundId()) {
        hash = (37 * hash) + FLEXIBLE_UPPER_BOUND_ID_FIELD_NUMBER;
        hash = (53 * hash) + getFlexibleUpperBoundId();
      }
      if (hasClassName()) {
        hash = (37 * hash) + CLASS_NAME_FIELD_NUMBER;
        hash = (53 * hash) + getClassName();
      }
      if (hasTypeParameter()) {
        hash = (37 * hash) + TYPE_PARAMETER_FIELD_NUMBER;
        hash = (53 * hash) + getTypeParameter();
      }
      if (hasTypeParameterName()) {
        hash = (37 * hash) + TYPE_PARAMETER_NAME_FIELD_NUMBER;
        hash = (53 * hash) + getTypeParameterName();
      }
      if (hasTypeAliasName()) {
        hash = (37 * hash) + TYPE_ALIAS_NAME_FIELD_NUMBER;
        hash = (53 * hash) + getTypeAliasName();
      }
      if (hasOuterType()) {
        hash = (37 * hash) + OUTER_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + getOuterType().hashCode();
      }
      if (hasOuterTypeId()) {
        hash = (37 * hash) + OUTER_TYPE_ID_FIELD_NUMBER;
        hash = (53 * hash) + getOuterTypeId();
      }
      if (hasAbbreviatedType()) {
        hash = (37 * hash) + ABBREVIATED_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + getAbbreviatedType().hashCode();
      }
      if (hasAbbreviatedTypeId()) {
        hash = (37 * hash) + ABBREVIATED_TYPE_ID_FIELD_NUMBER;
        hash = (53 * hash) + getAbbreviatedTypeId();
      }
      if (hasFlags()) {
        hash = (37 * hash) + FLAGS_FIELD_NUMBER;
        hash = (53 * hash) + getFlags();
      }
      hash = hashFields(hash, getExtensionFields());
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Type parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Type parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Type parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Type parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Type parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Type parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Type parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Type parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Type parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Type parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Type parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Type parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.metadata.ProtoBuf.Type prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.Type}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.ExtendableBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Type, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.Type)
        org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Type_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Type_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.metadata.ProtoBuf.Type.class, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.metadata.ProtoBuf.Type.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getArgumentFieldBuilder();
          getFlexibleUpperBoundFieldBuilder();
          getOuterTypeFieldBuilder();
          getAbbreviatedTypeFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        if (argumentBuilder_ == null) {
          argument_ = java.util.Collections.emptyList();
        } else {
          argument_ = null;
          argumentBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        nullable_ = false;
        flexibleTypeCapabilitiesId_ = 0;
        flexibleUpperBound_ = null;
        if (flexibleUpperBoundBuilder_ != null) {
          flexibleUpperBoundBuilder_.dispose();
          flexibleUpperBoundBuilder_ = null;
        }
        flexibleUpperBoundId_ = 0;
        className_ = 0;
        typeParameter_ = 0;
        typeParameterName_ = 0;
        typeAliasName_ = 0;
        outerType_ = null;
        if (outerTypeBuilder_ != null) {
          outerTypeBuilder_.dispose();
          outerTypeBuilder_ = null;
        }
        outerTypeId_ = 0;
        abbreviatedType_ = null;
        if (abbreviatedTypeBuilder_ != null) {
          abbreviatedTypeBuilder_.dispose();
          abbreviatedTypeBuilder_ = null;
        }
        abbreviatedTypeId_ = 0;
        flags_ = 0;
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Type_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type getDefaultInstanceForType() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type build() {
        org.jetbrains.kotlin.metadata.ProtoBuf.Type result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type buildPartial() {
        org.jetbrains.kotlin.metadata.ProtoBuf.Type result = new org.jetbrains.kotlin.metadata.ProtoBuf.Type(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(org.jetbrains.kotlin.metadata.ProtoBuf.Type result) {
        if (argumentBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            argument_ = java.util.Collections.unmodifiableList(argument_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.argument_ = argument_;
        } else {
          result.argument_ = argumentBuilder_.build();
        }
      }

      private void buildPartial0(org.jetbrains.kotlin.metadata.ProtoBuf.Type result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.nullable_ = nullable_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.flexibleTypeCapabilitiesId_ = flexibleTypeCapabilitiesId_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.flexibleUpperBound_ = flexibleUpperBoundBuilder_ == null
              ? flexibleUpperBound_
              : flexibleUpperBoundBuilder_.build();
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.flexibleUpperBoundId_ = flexibleUpperBoundId_;
          to_bitField0_ |= 0x00000008;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.className_ = className_;
          to_bitField0_ |= 0x00000010;
        }
        if (((from_bitField0_ & 0x00000040) != 0)) {
          result.typeParameter_ = typeParameter_;
          to_bitField0_ |= 0x00000020;
        }
        if (((from_bitField0_ & 0x00000080) != 0)) {
          result.typeParameterName_ = typeParameterName_;
          to_bitField0_ |= 0x00000040;
        }
        if (((from_bitField0_ & 0x00000100) != 0)) {
          result.typeAliasName_ = typeAliasName_;
          to_bitField0_ |= 0x00000080;
        }
        if (((from_bitField0_ & 0x00000200) != 0)) {
          result.outerType_ = outerTypeBuilder_ == null
              ? outerType_
              : outerTypeBuilder_.build();
          to_bitField0_ |= 0x00000100;
        }
        if (((from_bitField0_ & 0x00000400) != 0)) {
          result.outerTypeId_ = outerTypeId_;
          to_bitField0_ |= 0x00000200;
        }
        if (((from_bitField0_ & 0x00000800) != 0)) {
          result.abbreviatedType_ = abbreviatedTypeBuilder_ == null
              ? abbreviatedType_
              : abbreviatedTypeBuilder_.build();
          to_bitField0_ |= 0x00000400;
        }
        if (((from_bitField0_ & 0x00001000) != 0)) {
          result.abbreviatedTypeId_ = abbreviatedTypeId_;
          to_bitField0_ |= 0x00000800;
        }
        if (((from_bitField0_ & 0x00002000) != 0)) {
          result.flags_ = flags_;
          to_bitField0_ |= 0x00001000;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.metadata.ProtoBuf.Type) {
          return mergeFrom((org.jetbrains.kotlin.metadata.ProtoBuf.Type)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.metadata.ProtoBuf.Type other) {
        if (other == org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance()) return this;
        if (argumentBuilder_ == null) {
          if (!other.argument_.isEmpty()) {
            if (argument_.isEmpty()) {
              argument_ = other.argument_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureArgumentIsMutable();
              argument_.addAll(other.argument_);
            }
            onChanged();
          }
        } else {
          if (!other.argument_.isEmpty()) {
            if (argumentBuilder_.isEmpty()) {
              argumentBuilder_.dispose();
              argumentBuilder_ = null;
              argument_ = other.argument_;
              bitField0_ = (bitField0_ & ~0x00000001);
              argumentBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getArgumentFieldBuilder() : null;
            } else {
              argumentBuilder_.addAllMessages(other.argument_);
            }
          }
        }
        if (other.hasNullable()) {
          setNullable(other.getNullable());
        }
        if (other.hasFlexibleTypeCapabilitiesId()) {
          setFlexibleTypeCapabilitiesId(other.getFlexibleTypeCapabilitiesId());
        }
        if (other.hasFlexibleUpperBound()) {
          mergeFlexibleUpperBound(other.getFlexibleUpperBound());
        }
        if (other.hasFlexibleUpperBoundId()) {
          setFlexibleUpperBoundId(other.getFlexibleUpperBoundId());
        }
        if (other.hasClassName()) {
          setClassName(other.getClassName());
        }
        if (other.hasTypeParameter()) {
          setTypeParameter(other.getTypeParameter());
        }
        if (other.hasTypeParameterName()) {
          setTypeParameterName(other.getTypeParameterName());
        }
        if (other.hasTypeAliasName()) {
          setTypeAliasName(other.getTypeAliasName());
        }
        if (other.hasOuterType()) {
          mergeOuterType(other.getOuterType());
        }
        if (other.hasOuterTypeId()) {
          setOuterTypeId(other.getOuterTypeId());
        }
        if (other.hasAbbreviatedType()) {
          mergeAbbreviatedType(other.getAbbreviatedType());
        }
        if (other.hasAbbreviatedTypeId()) {
          setAbbreviatedTypeId(other.getAbbreviatedTypeId());
        }
        if (other.hasFlags()) {
          setFlags(other.getFlags());
        }
        this.mergeExtensionFields(other);
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        for (int i = 0; i < getArgumentCount(); i++) {
          if (!getArgument(i).isInitialized()) {
            return false;
          }
        }
        if (hasFlexibleUpperBound()) {
          if (!getFlexibleUpperBound().isInitialized()) {
            return false;
          }
        }
        if (hasOuterType()) {
          if (!getOuterType().isInitialized()) {
            return false;
          }
        }
        if (hasAbbreviatedType()) {
          if (!getAbbreviatedType().isInitialized()) {
            return false;
          }
        }
        if (!extensionsAreInitialized()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                flags_ = input.readInt32();
                bitField0_ |= 0x00002000;
                break;
              } // case 8
              case 18: {
                org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument m =
                    input.readMessage(
                        org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument.parser(),
                        extensionRegistry);
                if (argumentBuilder_ == null) {
                  ensureArgumentIsMutable();
                  argument_.add(m);
                } else {
                  argumentBuilder_.addMessage(m);
                }
                break;
              } // case 18
              case 24: {
                nullable_ = input.readBool();
                bitField0_ |= 0x00000002;
                break;
              } // case 24
              case 32: {
                flexibleTypeCapabilitiesId_ = input.readInt32();
                bitField0_ |= 0x00000004;
                break;
              } // case 32
              case 42: {
                input.readMessage(
                    getFlexibleUpperBoundFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000008;
                break;
              } // case 42
              case 48: {
                className_ = input.readInt32();
                bitField0_ |= 0x00000020;
                break;
              } // case 48
              case 56: {
                typeParameter_ = input.readInt32();
                bitField0_ |= 0x00000040;
                break;
              } // case 56
              case 64: {
                flexibleUpperBoundId_ = input.readInt32();
                bitField0_ |= 0x00000010;
                break;
              } // case 64
              case 72: {
                typeParameterName_ = input.readInt32();
                bitField0_ |= 0x00000080;
                break;
              } // case 72
              case 82: {
                input.readMessage(
                    getOuterTypeFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000200;
                break;
              } // case 82
              case 88: {
                outerTypeId_ = input.readInt32();
                bitField0_ |= 0x00000400;
                break;
              } // case 88
              case 96: {
                typeAliasName_ = input.readInt32();
                bitField0_ |= 0x00000100;
                break;
              } // case 96
              case 106: {
                input.readMessage(
                    getAbbreviatedTypeFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000800;
                break;
              } // case 106
              case 112: {
                abbreviatedTypeId_ = input.readInt32();
                bitField0_ |= 0x00001000;
                break;
              } // case 112
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument> argument_ =
        java.util.Collections.emptyList();
      private void ensureArgumentIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          argument_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument>(argument_);
          bitField0_ |= 0x00000001;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.Type.ArgumentOrBuilder> argumentBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument> getArgumentList() {
        if (argumentBuilder_ == null) {
          return java.util.Collections.unmodifiableList(argument_);
        } else {
          return argumentBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
       */
      public int getArgumentCount() {
        if (argumentBuilder_ == null) {
          return argument_.size();
        } else {
          return argumentBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument getArgument(int index) {
        if (argumentBuilder_ == null) {
          return argument_.get(index);
        } else {
          return argumentBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
       */
      public Builder setArgument(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument value) {
        if (argumentBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArgumentIsMutable();
          argument_.set(index, value);
          onChanged();
        } else {
          argumentBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
       */
      public Builder setArgument(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument.Builder builderForValue) {
        if (argumentBuilder_ == null) {
          ensureArgumentIsMutable();
          argument_.set(index, builderForValue.build());
          onChanged();
        } else {
          argumentBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
       */
      public Builder addArgument(org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument value) {
        if (argumentBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArgumentIsMutable();
          argument_.add(value);
          onChanged();
        } else {
          argumentBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
       */
      public Builder addArgument(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument value) {
        if (argumentBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArgumentIsMutable();
          argument_.add(index, value);
          onChanged();
        } else {
          argumentBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
       */
      public Builder addArgument(
          org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument.Builder builderForValue) {
        if (argumentBuilder_ == null) {
          ensureArgumentIsMutable();
          argument_.add(builderForValue.build());
          onChanged();
        } else {
          argumentBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
       */
      public Builder addArgument(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument.Builder builderForValue) {
        if (argumentBuilder_ == null) {
          ensureArgumentIsMutable();
          argument_.add(index, builderForValue.build());
          onChanged();
        } else {
          argumentBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
       */
      public Builder addAllArgument(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument> values) {
        if (argumentBuilder_ == null) {
          ensureArgumentIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, argument_);
          onChanged();
        } else {
          argumentBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
       */
      public Builder clearArgument() {
        if (argumentBuilder_ == null) {
          argument_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          argumentBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
       */
      public Builder removeArgument(int index) {
        if (argumentBuilder_ == null) {
          ensureArgumentIsMutable();
          argument_.remove(index);
          onChanged();
        } else {
          argumentBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument.Builder getArgumentBuilder(
          int index) {
        return getArgumentFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type.ArgumentOrBuilder getArgumentOrBuilder(
          int index) {
        if (argumentBuilder_ == null) {
          return argument_.get(index);  } else {
          return argumentBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Type.ArgumentOrBuilder> 
           getArgumentOrBuilderList() {
        if (argumentBuilder_ != null) {
          return argumentBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(argument_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument.Builder addArgumentBuilder() {
        return getArgumentFieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument.Builder addArgumentBuilder(
          int index) {
        return getArgumentFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument.Builder> 
           getArgumentBuilderList() {
        return getArgumentFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.Type.ArgumentOrBuilder> 
          getArgumentFieldBuilder() {
        if (argumentBuilder_ == null) {
          argumentBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.Type.ArgumentOrBuilder>(
                  argument_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          argument_ = null;
        }
        return argumentBuilder_;
      }

      private boolean nullable_ ;
      /**
       * <code>bool nullable = 3 [default = false];</code>
       * @return Whether the nullable field is set.
       */
      @java.lang.Override
      public boolean hasNullable() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>bool nullable = 3 [default = false];</code>
       * @return The nullable.
       */
      @java.lang.Override
      public boolean getNullable() {
        return nullable_;
      }
      /**
       * <code>bool nullable = 3 [default = false];</code>
       * @param value The nullable to set.
       * @return This builder for chaining.
       */
      public Builder setNullable(boolean value) {

        nullable_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>bool nullable = 3 [default = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearNullable() {
        bitField0_ = (bitField0_ & ~0x00000002);
        nullable_ = false;
        onChanged();
        return this;
      }

      private int flexibleTypeCapabilitiesId_ ;
      /**
       * <pre>
       * If this field is set, the type is flexible.
       * All the other fields and extensions represent its lower bound, and flexible_upper_bound must be set and represents its upper bound.
       * </pre>
       *
       * <code>int32 flexible_type_capabilities_id = 4 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
       * @return Whether the flexibleTypeCapabilitiesId field is set.
       */
      @java.lang.Override
      public boolean hasFlexibleTypeCapabilitiesId() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * If this field is set, the type is flexible.
       * All the other fields and extensions represent its lower bound, and flexible_upper_bound must be set and represents its upper bound.
       * </pre>
       *
       * <code>int32 flexible_type_capabilities_id = 4 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
       * @return The flexibleTypeCapabilitiesId.
       */
      @java.lang.Override
      public int getFlexibleTypeCapabilitiesId() {
        return flexibleTypeCapabilitiesId_;
      }
      /**
       * <pre>
       * If this field is set, the type is flexible.
       * All the other fields and extensions represent its lower bound, and flexible_upper_bound must be set and represents its upper bound.
       * </pre>
       *
       * <code>int32 flexible_type_capabilities_id = 4 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
       * @param value The flexibleTypeCapabilitiesId to set.
       * @return This builder for chaining.
       */
      public Builder setFlexibleTypeCapabilitiesId(int value) {

        flexibleTypeCapabilitiesId_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If this field is set, the type is flexible.
       * All the other fields and extensions represent its lower bound, and flexible_upper_bound must be set and represents its upper bound.
       * </pre>
       *
       * <code>int32 flexible_type_capabilities_id = 4 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearFlexibleTypeCapabilitiesId() {
        bitField0_ = (bitField0_ & ~0x00000004);
        flexibleTypeCapabilitiesId_ = 0;
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.metadata.ProtoBuf.Type flexibleUpperBound_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Type, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder> flexibleUpperBoundBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type flexible_upper_bound = 5;</code>
       * @return Whether the flexibleUpperBound field is set.
       */
      public boolean hasFlexibleUpperBound() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type flexible_upper_bound = 5;</code>
       * @return The flexibleUpperBound.
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type getFlexibleUpperBound() {
        if (flexibleUpperBoundBuilder_ == null) {
          return flexibleUpperBound_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance() : flexibleUpperBound_;
        } else {
          return flexibleUpperBoundBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type flexible_upper_bound = 5;</code>
       */
      public Builder setFlexibleUpperBound(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        if (flexibleUpperBoundBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          flexibleUpperBound_ = value;
        } else {
          flexibleUpperBoundBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type flexible_upper_bound = 5;</code>
       */
      public Builder setFlexibleUpperBound(
          org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder builderForValue) {
        if (flexibleUpperBoundBuilder_ == null) {
          flexibleUpperBound_ = builderForValue.build();
        } else {
          flexibleUpperBoundBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type flexible_upper_bound = 5;</code>
       */
      public Builder mergeFlexibleUpperBound(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        if (flexibleUpperBoundBuilder_ == null) {
          if (((bitField0_ & 0x00000008) != 0) &&
            flexibleUpperBound_ != null &&
            flexibleUpperBound_ != org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance()) {
            getFlexibleUpperBoundBuilder().mergeFrom(value);
          } else {
            flexibleUpperBound_ = value;
          }
        } else {
          flexibleUpperBoundBuilder_.mergeFrom(value);
        }
        if (flexibleUpperBound_ != null) {
          bitField0_ |= 0x00000008;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type flexible_upper_bound = 5;</code>
       */
      public Builder clearFlexibleUpperBound() {
        bitField0_ = (bitField0_ & ~0x00000008);
        flexibleUpperBound_ = null;
        if (flexibleUpperBoundBuilder_ != null) {
          flexibleUpperBoundBuilder_.dispose();
          flexibleUpperBoundBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type flexible_upper_bound = 5;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder getFlexibleUpperBoundBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getFlexibleUpperBoundFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type flexible_upper_bound = 5;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder getFlexibleUpperBoundOrBuilder() {
        if (flexibleUpperBoundBuilder_ != null) {
          return flexibleUpperBoundBuilder_.getMessageOrBuilder();
        } else {
          return flexibleUpperBound_ == null ?
              org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance() : flexibleUpperBound_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type flexible_upper_bound = 5;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Type, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder> 
          getFlexibleUpperBoundFieldBuilder() {
        if (flexibleUpperBoundBuilder_ == null) {
          flexibleUpperBoundBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.metadata.ProtoBuf.Type, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder>(
                  getFlexibleUpperBound(),
                  getParentForChildren(),
                  isClean());
          flexibleUpperBound_ = null;
        }
        return flexibleUpperBoundBuilder_;
      }

      private int flexibleUpperBoundId_ ;
      /**
       * <code>int32 flexible_upper_bound_id = 8 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return Whether the flexibleUpperBoundId field is set.
       */
      @java.lang.Override
      public boolean hasFlexibleUpperBoundId() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <code>int32 flexible_upper_bound_id = 8 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return The flexibleUpperBoundId.
       */
      @java.lang.Override
      public int getFlexibleUpperBoundId() {
        return flexibleUpperBoundId_;
      }
      /**
       * <code>int32 flexible_upper_bound_id = 8 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @param value The flexibleUpperBoundId to set.
       * @return This builder for chaining.
       */
      public Builder setFlexibleUpperBoundId(int value) {

        flexibleUpperBoundId_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <code>int32 flexible_upper_bound_id = 8 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearFlexibleUpperBoundId() {
        bitField0_ = (bitField0_ & ~0x00000010);
        flexibleUpperBoundId_ = 0;
        onChanged();
        return this;
      }

      private int className_ ;
      /**
       * <code>int32 class_name = 6 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
       * @return Whether the className field is set.
       */
      @java.lang.Override
      public boolean hasClassName() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <code>int32 class_name = 6 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
       * @return The className.
       */
      @java.lang.Override
      public int getClassName() {
        return className_;
      }
      /**
       * <code>int32 class_name = 6 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
       * @param value The className to set.
       * @return This builder for chaining.
       */
      public Builder setClassName(int value) {

        className_ = value;
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <code>int32 class_name = 6 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearClassName() {
        bitField0_ = (bitField0_ & ~0x00000020);
        className_ = 0;
        onChanged();
        return this;
      }

      private int typeParameter_ ;
      /**
       * <pre>
       * id of the type parameter
       * </pre>
       *
       * <code>int32 type_parameter = 7;</code>
       * @return Whether the typeParameter field is set.
       */
      @java.lang.Override
      public boolean hasTypeParameter() {
        return ((bitField0_ & 0x00000040) != 0);
      }
      /**
       * <pre>
       * id of the type parameter
       * </pre>
       *
       * <code>int32 type_parameter = 7;</code>
       * @return The typeParameter.
       */
      @java.lang.Override
      public int getTypeParameter() {
        return typeParameter_;
      }
      /**
       * <pre>
       * id of the type parameter
       * </pre>
       *
       * <code>int32 type_parameter = 7;</code>
       * @param value The typeParameter to set.
       * @return This builder for chaining.
       */
      public Builder setTypeParameter(int value) {

        typeParameter_ = value;
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * id of the type parameter
       * </pre>
       *
       * <code>int32 type_parameter = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearTypeParameter() {
        bitField0_ = (bitField0_ & ~0x00000040);
        typeParameter_ = 0;
        onChanged();
        return this;
      }

      private int typeParameterName_ ;
      /**
       * <pre>
       * Name of the type parameter in the immediate owner
       * </pre>
       *
       * <code>int32 type_parameter_name = 9 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
       * @return Whether the typeParameterName field is set.
       */
      @java.lang.Override
      public boolean hasTypeParameterName() {
        return ((bitField0_ & 0x00000080) != 0);
      }
      /**
       * <pre>
       * Name of the type parameter in the immediate owner
       * </pre>
       *
       * <code>int32 type_parameter_name = 9 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
       * @return The typeParameterName.
       */
      @java.lang.Override
      public int getTypeParameterName() {
        return typeParameterName_;
      }
      /**
       * <pre>
       * Name of the type parameter in the immediate owner
       * </pre>
       *
       * <code>int32 type_parameter_name = 9 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
       * @param value The typeParameterName to set.
       * @return This builder for chaining.
       */
      public Builder setTypeParameterName(int value) {

        typeParameterName_ = value;
        bitField0_ |= 0x00000080;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Name of the type parameter in the immediate owner
       * </pre>
       *
       * <code>int32 type_parameter_name = 9 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearTypeParameterName() {
        bitField0_ = (bitField0_ & ~0x00000080);
        typeParameterName_ = 0;
        onChanged();
        return this;
      }

      private int typeAliasName_ ;
      /**
       * <pre>
       * Note that this may be present only for abbreviated_type
       * Top level types are always fully expanded
       * </pre>
       *
       * <code>int32 type_alias_name = 12 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
       * @return Whether the typeAliasName field is set.
       */
      @java.lang.Override
      public boolean hasTypeAliasName() {
        return ((bitField0_ & 0x00000100) != 0);
      }
      /**
       * <pre>
       * Note that this may be present only for abbreviated_type
       * Top level types are always fully expanded
       * </pre>
       *
       * <code>int32 type_alias_name = 12 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
       * @return The typeAliasName.
       */
      @java.lang.Override
      public int getTypeAliasName() {
        return typeAliasName_;
      }
      /**
       * <pre>
       * Note that this may be present only for abbreviated_type
       * Top level types are always fully expanded
       * </pre>
       *
       * <code>int32 type_alias_name = 12 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
       * @param value The typeAliasName to set.
       * @return This builder for chaining.
       */
      public Builder setTypeAliasName(int value) {

        typeAliasName_ = value;
        bitField0_ |= 0x00000100;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Note that this may be present only for abbreviated_type
       * Top level types are always fully expanded
       * </pre>
       *
       * <code>int32 type_alias_name = 12 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearTypeAliasName() {
        bitField0_ = (bitField0_ & ~0x00000100);
        typeAliasName_ = 0;
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.metadata.ProtoBuf.Type outerType_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Type, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder> outerTypeBuilder_;
      /**
       * <pre>
       * Outer type may be present only if class_name or type_alias_name is present
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.Type outer_type = 10;</code>
       * @return Whether the outerType field is set.
       */
      public boolean hasOuterType() {
        return ((bitField0_ & 0x00000200) != 0);
      }
      /**
       * <pre>
       * Outer type may be present only if class_name or type_alias_name is present
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.Type outer_type = 10;</code>
       * @return The outerType.
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type getOuterType() {
        if (outerTypeBuilder_ == null) {
          return outerType_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance() : outerType_;
        } else {
          return outerTypeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Outer type may be present only if class_name or type_alias_name is present
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.Type outer_type = 10;</code>
       */
      public Builder setOuterType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        if (outerTypeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          outerType_ = value;
        } else {
          outerTypeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000200;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Outer type may be present only if class_name or type_alias_name is present
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.Type outer_type = 10;</code>
       */
      public Builder setOuterType(
          org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder builderForValue) {
        if (outerTypeBuilder_ == null) {
          outerType_ = builderForValue.build();
        } else {
          outerTypeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000200;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Outer type may be present only if class_name or type_alias_name is present
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.Type outer_type = 10;</code>
       */
      public Builder mergeOuterType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        if (outerTypeBuilder_ == null) {
          if (((bitField0_ & 0x00000200) != 0) &&
            outerType_ != null &&
            outerType_ != org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance()) {
            getOuterTypeBuilder().mergeFrom(value);
          } else {
            outerType_ = value;
          }
        } else {
          outerTypeBuilder_.mergeFrom(value);
        }
        if (outerType_ != null) {
          bitField0_ |= 0x00000200;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * Outer type may be present only if class_name or type_alias_name is present
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.Type outer_type = 10;</code>
       */
      public Builder clearOuterType() {
        bitField0_ = (bitField0_ & ~0x00000200);
        outerType_ = null;
        if (outerTypeBuilder_ != null) {
          outerTypeBuilder_.dispose();
          outerTypeBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Outer type may be present only if class_name or type_alias_name is present
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.Type outer_type = 10;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder getOuterTypeBuilder() {
        bitField0_ |= 0x00000200;
        onChanged();
        return getOuterTypeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Outer type may be present only if class_name or type_alias_name is present
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.Type outer_type = 10;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder getOuterTypeOrBuilder() {
        if (outerTypeBuilder_ != null) {
          return outerTypeBuilder_.getMessageOrBuilder();
        } else {
          return outerType_ == null ?
              org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance() : outerType_;
        }
      }
      /**
       * <pre>
       * Outer type may be present only if class_name or type_alias_name is present
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.Type outer_type = 10;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Type, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder> 
          getOuterTypeFieldBuilder() {
        if (outerTypeBuilder_ == null) {
          outerTypeBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.metadata.ProtoBuf.Type, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder>(
                  getOuterType(),
                  getParentForChildren(),
                  isClean());
          outerType_ = null;
        }
        return outerTypeBuilder_;
      }

      private int outerTypeId_ ;
      /**
       * <code>int32 outer_type_id = 11 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return Whether the outerTypeId field is set.
       */
      @java.lang.Override
      public boolean hasOuterTypeId() {
        return ((bitField0_ & 0x00000400) != 0);
      }
      /**
       * <code>int32 outer_type_id = 11 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return The outerTypeId.
       */
      @java.lang.Override
      public int getOuterTypeId() {
        return outerTypeId_;
      }
      /**
       * <code>int32 outer_type_id = 11 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @param value The outerTypeId to set.
       * @return This builder for chaining.
       */
      public Builder setOuterTypeId(int value) {

        outerTypeId_ = value;
        bitField0_ |= 0x00000400;
        onChanged();
        return this;
      }
      /**
       * <code>int32 outer_type_id = 11 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearOuterTypeId() {
        bitField0_ = (bitField0_ & ~0x00000400);
        outerTypeId_ = 0;
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.metadata.ProtoBuf.Type abbreviatedType_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Type, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder> abbreviatedTypeBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type abbreviated_type = 13;</code>
       * @return Whether the abbreviatedType field is set.
       */
      public boolean hasAbbreviatedType() {
        return ((bitField0_ & 0x00000800) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type abbreviated_type = 13;</code>
       * @return The abbreviatedType.
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type getAbbreviatedType() {
        if (abbreviatedTypeBuilder_ == null) {
          return abbreviatedType_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance() : abbreviatedType_;
        } else {
          return abbreviatedTypeBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type abbreviated_type = 13;</code>
       */
      public Builder setAbbreviatedType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        if (abbreviatedTypeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          abbreviatedType_ = value;
        } else {
          abbreviatedTypeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000800;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type abbreviated_type = 13;</code>
       */
      public Builder setAbbreviatedType(
          org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder builderForValue) {
        if (abbreviatedTypeBuilder_ == null) {
          abbreviatedType_ = builderForValue.build();
        } else {
          abbreviatedTypeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000800;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type abbreviated_type = 13;</code>
       */
      public Builder mergeAbbreviatedType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        if (abbreviatedTypeBuilder_ == null) {
          if (((bitField0_ & 0x00000800) != 0) &&
            abbreviatedType_ != null &&
            abbreviatedType_ != org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance()) {
            getAbbreviatedTypeBuilder().mergeFrom(value);
          } else {
            abbreviatedType_ = value;
          }
        } else {
          abbreviatedTypeBuilder_.mergeFrom(value);
        }
        if (abbreviatedType_ != null) {
          bitField0_ |= 0x00000800;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type abbreviated_type = 13;</code>
       */
      public Builder clearAbbreviatedType() {
        bitField0_ = (bitField0_ & ~0x00000800);
        abbreviatedType_ = null;
        if (abbreviatedTypeBuilder_ != null) {
          abbreviatedTypeBuilder_.dispose();
          abbreviatedTypeBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type abbreviated_type = 13;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder getAbbreviatedTypeBuilder() {
        bitField0_ |= 0x00000800;
        onChanged();
        return getAbbreviatedTypeFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type abbreviated_type = 13;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder getAbbreviatedTypeOrBuilder() {
        if (abbreviatedTypeBuilder_ != null) {
          return abbreviatedTypeBuilder_.getMessageOrBuilder();
        } else {
          return abbreviatedType_ == null ?
              org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance() : abbreviatedType_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type abbreviated_type = 13;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Type, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder> 
          getAbbreviatedTypeFieldBuilder() {
        if (abbreviatedTypeBuilder_ == null) {
          abbreviatedTypeBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.metadata.ProtoBuf.Type, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder>(
                  getAbbreviatedType(),
                  getParentForChildren(),
                  isClean());
          abbreviatedType_ = null;
        }
        return abbreviatedTypeBuilder_;
      }

      private int abbreviatedTypeId_ ;
      /**
       * <code>int32 abbreviated_type_id = 14 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return Whether the abbreviatedTypeId field is set.
       */
      @java.lang.Override
      public boolean hasAbbreviatedTypeId() {
        return ((bitField0_ & 0x00001000) != 0);
      }
      /**
       * <code>int32 abbreviated_type_id = 14 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return The abbreviatedTypeId.
       */
      @java.lang.Override
      public int getAbbreviatedTypeId() {
        return abbreviatedTypeId_;
      }
      /**
       * <code>int32 abbreviated_type_id = 14 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @param value The abbreviatedTypeId to set.
       * @return This builder for chaining.
       */
      public Builder setAbbreviatedTypeId(int value) {

        abbreviatedTypeId_ = value;
        bitField0_ |= 0x00001000;
        onChanged();
        return this;
      }
      /**
       * <code>int32 abbreviated_type_id = 14 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearAbbreviatedTypeId() {
        bitField0_ = (bitField0_ & ~0x00001000);
        abbreviatedTypeId_ = 0;
        onChanged();
        return this;
      }

      private int flags_ ;
      /**
       * <pre>
       *
       * suspend
       * definitelyNonNull
       * </pre>
       *
       * <code>int32 flags = 1;</code>
       * @return Whether the flags field is set.
       */
      @java.lang.Override
      public boolean hasFlags() {
        return ((bitField0_ & 0x00002000) != 0);
      }
      /**
       * <pre>
       *
       * suspend
       * definitelyNonNull
       * </pre>
       *
       * <code>int32 flags = 1;</code>
       * @return The flags.
       */
      @java.lang.Override
      public int getFlags() {
        return flags_;
      }
      /**
       * <pre>
       *
       * suspend
       * definitelyNonNull
       * </pre>
       *
       * <code>int32 flags = 1;</code>
       * @param value The flags to set.
       * @return This builder for chaining.
       */
      public Builder setFlags(int value) {

        flags_ = value;
        bitField0_ |= 0x00002000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *
       * suspend
       * definitelyNonNull
       * </pre>
       *
       * <code>int32 flags = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearFlags() {
        bitField0_ = (bitField0_ & ~0x00002000);
        flags_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.Type)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.Type)
    private static final org.jetbrains.kotlin.metadata.ProtoBuf.Type DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.metadata.ProtoBuf.Type();
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Type getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<Type>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<Type>() {
      @java.lang.Override
      public Type parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<Type> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<Type> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Type getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface TypeParameterOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.TypeParameter)
      org.jetbrains.kotlin.protobuf.GeneratedMessage.
          ExtendableMessageOrBuilder<TypeParameter> {

    /**
     * <code>int32 id = 1 [features = { ... }</code>
     * @return Whether the id field is set.
     */
    boolean hasId();
    /**
     * <code>int32 id = 1 [features = { ... }</code>
     * @return The id.
     */
    int getId();

    /**
     * <code>int32 name = 2 [features = { ... }</code>
     * @return Whether the name field is set.
     */
    boolean hasName();
    /**
     * <code>int32 name = 2 [features = { ... }</code>
     * @return The name.
     */
    int getName();

    /**
     * <code>bool reified = 3 [default = false];</code>
     * @return Whether the reified field is set.
     */
    boolean hasReified();
    /**
     * <code>bool reified = 3 [default = false];</code>
     * @return The reified.
     */
    boolean getReified();

    /**
     * <code>.org.jetbrains.kotlin.metadata.TypeParameter.Variance variance = 4 [default = INV];</code>
     * @return Whether the variance field is set.
     */
    boolean hasVariance();
    /**
     * <code>.org.jetbrains.kotlin.metadata.TypeParameter.Variance variance = 4 [default = INV];</code>
     * @return The variance.
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.Variance getVariance();

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Type> 
        getUpperBoundList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Type getUpperBound(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
     */
    int getUpperBoundCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder> 
        getUpperBoundOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder getUpperBoundOrBuilder(
        int index);

    /**
     * <code>repeated int32 upper_bound_id = 6 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return A list containing the upperBoundId.
     */
    java.util.List<java.lang.Integer> getUpperBoundIdList();
    /**
     * <code>repeated int32 upper_bound_id = 6 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return The count of upperBoundId.
     */
    int getUpperBoundIdCount();
    /**
     * <code>repeated int32 upper_bound_id = 6 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @param index The index of the element to return.
     * @return The upperBoundId at the given index.
     */
    int getUpperBoundId(int index);
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.metadata.TypeParameter}
   */
  public static final class TypeParameter extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage.ExtendableMessage<
        TypeParameter> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.TypeParameter)
      TypeParameterOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        TypeParameter.class.getName());
    }
    // Use TypeParameter.newBuilder() to construct.
    private TypeParameter(org.jetbrains.kotlin.protobuf.GeneratedMessage.ExtendableBuilder<org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter, ?> builder) {
      super(builder);
    }
    private TypeParameter() {
      variance_ = 2;
      upperBound_ = java.util.Collections.emptyList();
      upperBoundId_ = emptyIntList();
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_TypeParameter_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_TypeParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.class, org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.Builder.class);
    }

    /**
     * Protobuf enum {@code org.jetbrains.kotlin.metadata.TypeParameter.Variance}
     */
    public enum Variance
        implements org.jetbrains.kotlin.protobuf.ProtocolMessageEnum {
      /**
       * <code>IN = 0;</code>
       */
      IN(0),
      /**
       * <code>OUT = 1;</code>
       */
      OUT(1),
      /**
       * <code>INV = 2;</code>
       */
      INV(2),
      ;

      static {
        org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
          org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
          /* major= */ 4,
          /* minor= */ 29,
          /* patch= */ 3,
          /* suffix= */ "",
          Variance.class.getName());
      }
      /**
       * <code>IN = 0;</code>
       */
      public static final int IN_VALUE = 0;
      /**
       * <code>OUT = 1;</code>
       */
      public static final int OUT_VALUE = 1;
      /**
       * <code>INV = 2;</code>
       */
      public static final int INV_VALUE = 2;


      public final int getNumber() {
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static Variance valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static Variance forNumber(int value) {
        switch (value) {
          case 0: return IN;
          case 1: return OUT;
          case 2: return INV;
          default: return null;
        }
      }

      public static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Variance>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<
          Variance> internalValueMap =
            new org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Variance>() {
              public Variance findValueByNumber(int number) {
                return Variance.forNumber(number);
              }
            };

      public final org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.getDescriptor().getEnumTypes().get(0);
      }

      private static final Variance[] VALUES = values();

      public static Variance valueOf(
          org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private Variance(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:org.jetbrains.kotlin.metadata.TypeParameter.Variance)
    }

    private int bitField0_;
    public static final int ID_FIELD_NUMBER = 1;
    private int id_ = 0;
    /**
     * <code>int32 id = 1 [features = { ... }</code>
     * @return Whether the id field is set.
     */
    @java.lang.Override
    public boolean hasId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>int32 id = 1 [features = { ... }</code>
     * @return The id.
     */
    @java.lang.Override
    public int getId() {
      return id_;
    }

    public static final int NAME_FIELD_NUMBER = 2;
    private int name_ = 0;
    /**
     * <code>int32 name = 2 [features = { ... }</code>
     * @return Whether the name field is set.
     */
    @java.lang.Override
    public boolean hasName() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>int32 name = 2 [features = { ... }</code>
     * @return The name.
     */
    @java.lang.Override
    public int getName() {
      return name_;
    }

    public static final int REIFIED_FIELD_NUMBER = 3;
    private boolean reified_ = false;
    /**
     * <code>bool reified = 3 [default = false];</code>
     * @return Whether the reified field is set.
     */
    @java.lang.Override
    public boolean hasReified() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>bool reified = 3 [default = false];</code>
     * @return The reified.
     */
    @java.lang.Override
    public boolean getReified() {
      return reified_;
    }

    public static final int VARIANCE_FIELD_NUMBER = 4;
    private int variance_ = 2;
    /**
     * <code>.org.jetbrains.kotlin.metadata.TypeParameter.Variance variance = 4 [default = INV];</code>
     * @return Whether the variance field is set.
     */
    @java.lang.Override public boolean hasVariance() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.TypeParameter.Variance variance = 4 [default = INV];</code>
     * @return The variance.
     */
    @java.lang.Override public org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.Variance getVariance() {
      org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.Variance result = org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.Variance.forNumber(variance_);
      return result == null ? org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.Variance.INV : result;
    }

    public static final int UPPER_BOUND_FIELD_NUMBER = 5;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Type> upperBound_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Type> getUpperBoundList() {
      return upperBound_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder> 
        getUpperBoundOrBuilderList() {
      return upperBound_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
     */
    @java.lang.Override
    public int getUpperBoundCount() {
      return upperBound_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Type getUpperBound(int index) {
      return upperBound_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder getUpperBoundOrBuilder(
        int index) {
      return upperBound_.get(index);
    }

    public static final int UPPER_BOUND_ID_FIELD_NUMBER = 6;
    @SuppressWarnings("serial")
    private org.jetbrains.kotlin.protobuf.Internal.IntList upperBoundId_ =
        emptyIntList();
    /**
     * <code>repeated int32 upper_bound_id = 6 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return A list containing the upperBoundId.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getUpperBoundIdList() {
      return upperBoundId_;
    }
    /**
     * <code>repeated int32 upper_bound_id = 6 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return The count of upperBoundId.
     */
    public int getUpperBoundIdCount() {
      return upperBoundId_.size();
    }
    /**
     * <code>repeated int32 upper_bound_id = 6 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @param index The index of the element to return.
     * @return The upperBoundId at the given index.
     */
    public int getUpperBoundId(int index) {
      return upperBoundId_.getInt(index);
    }
    private int upperBoundIdMemoizedSerializedSize = -1;

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasName()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getUpperBoundCount(); i++) {
        if (!getUpperBound(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (!extensionsAreInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      org.jetbrains.kotlin.protobuf.GeneratedMessage
        .ExtendableMessage.ExtensionSerializer
          extensionWriter = newExtensionSerializer();
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeInt32(1, id_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeInt32(2, name_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeBool(3, reified_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeEnum(4, variance_);
      }
      for (int i = 0; i < upperBound_.size(); i++) {
        output.writeMessage(5, upperBound_.get(i));
      }
      if (getUpperBoundIdList().size() > 0) {
        output.writeUInt32NoTag(50);
        output.writeUInt32NoTag(upperBoundIdMemoizedSerializedSize);
      }
      for (int i = 0; i < upperBoundId_.size(); i++) {
        output.writeInt32NoTag(upperBoundId_.getInt(i));
      }
      extensionWriter.writeUntil(1000, output);
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(1, id_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(2, name_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBoolSize(3, reified_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeEnumSize(4, variance_);
      }
      for (int i = 0; i < upperBound_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(5, upperBound_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < upperBoundId_.size(); i++) {
          dataSize += org.jetbrains.kotlin.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(upperBoundId_.getInt(i));
        }
        size += dataSize;
        if (!getUpperBoundIdList().isEmpty()) {
          size += 1;
          size += org.jetbrains.kotlin.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        upperBoundIdMemoizedSerializedSize = dataSize;
      }
      size += extensionsSerializedSize();
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter other = (org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter) obj;

      if (hasId() != other.hasId()) return false;
      if (hasId()) {
        if (getId()
            != other.getId()) return false;
      }
      if (hasName() != other.hasName()) return false;
      if (hasName()) {
        if (getName()
            != other.getName()) return false;
      }
      if (hasReified() != other.hasReified()) return false;
      if (hasReified()) {
        if (getReified()
            != other.getReified()) return false;
      }
      if (hasVariance() != other.hasVariance()) return false;
      if (hasVariance()) {
        if (variance_ != other.variance_) return false;
      }
      if (!getUpperBoundList()
          .equals(other.getUpperBoundList())) return false;
      if (!getUpperBoundIdList()
          .equals(other.getUpperBoundIdList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      if (!getExtensionFields().equals(other.getExtensionFields()))
        return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasId()) {
        hash = (37 * hash) + ID_FIELD_NUMBER;
        hash = (53 * hash) + getId();
      }
      if (hasName()) {
        hash = (37 * hash) + NAME_FIELD_NUMBER;
        hash = (53 * hash) + getName();
      }
      if (hasReified()) {
        hash = (37 * hash) + REIFIED_FIELD_NUMBER;
        hash = (53 * hash) + org.jetbrains.kotlin.protobuf.Internal.hashBoolean(
            getReified());
      }
      if (hasVariance()) {
        hash = (37 * hash) + VARIANCE_FIELD_NUMBER;
        hash = (53 * hash) + variance_;
      }
      if (getUpperBoundCount() > 0) {
        hash = (37 * hash) + UPPER_BOUND_FIELD_NUMBER;
        hash = (53 * hash) + getUpperBoundList().hashCode();
      }
      if (getUpperBoundIdCount() > 0) {
        hash = (37 * hash) + UPPER_BOUND_ID_FIELD_NUMBER;
        hash = (53 * hash) + getUpperBoundIdList().hashCode();
      }
      hash = hashFields(hash, getExtensionFields());
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.TypeParameter}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.ExtendableBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.TypeParameter)
        org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameterOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_TypeParameter_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_TypeParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.class, org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.newBuilder()
      private Builder() {

      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        id_ = 0;
        name_ = 0;
        reified_ = false;
        variance_ = 2;
        if (upperBoundBuilder_ == null) {
          upperBound_ = java.util.Collections.emptyList();
        } else {
          upperBound_ = null;
          upperBoundBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        upperBoundId_ = emptyIntList();
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_TypeParameter_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter getDefaultInstanceForType() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter build() {
        org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter buildPartial() {
        org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter result = new org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter result) {
        if (upperBoundBuilder_ == null) {
          if (((bitField0_ & 0x00000010) != 0)) {
            upperBound_ = java.util.Collections.unmodifiableList(upperBound_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.upperBound_ = upperBound_;
        } else {
          result.upperBound_ = upperBoundBuilder_.build();
        }
      }

      private void buildPartial0(org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.id_ = id_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.name_ = name_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.reified_ = reified_;
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.variance_ = variance_;
          to_bitField0_ |= 0x00000008;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          upperBoundId_.makeImmutable();
          result.upperBoundId_ = upperBoundId_;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter) {
          return mergeFrom((org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter other) {
        if (other == org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.getDefaultInstance()) return this;
        if (other.hasId()) {
          setId(other.getId());
        }
        if (other.hasName()) {
          setName(other.getName());
        }
        if (other.hasReified()) {
          setReified(other.getReified());
        }
        if (other.hasVariance()) {
          setVariance(other.getVariance());
        }
        if (upperBoundBuilder_ == null) {
          if (!other.upperBound_.isEmpty()) {
            if (upperBound_.isEmpty()) {
              upperBound_ = other.upperBound_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureUpperBoundIsMutable();
              upperBound_.addAll(other.upperBound_);
            }
            onChanged();
          }
        } else {
          if (!other.upperBound_.isEmpty()) {
            if (upperBoundBuilder_.isEmpty()) {
              upperBoundBuilder_.dispose();
              upperBoundBuilder_ = null;
              upperBound_ = other.upperBound_;
              bitField0_ = (bitField0_ & ~0x00000010);
              upperBoundBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getUpperBoundFieldBuilder() : null;
            } else {
              upperBoundBuilder_.addAllMessages(other.upperBound_);
            }
          }
        }
        if (!other.upperBoundId_.isEmpty()) {
          if (upperBoundId_.isEmpty()) {
            upperBoundId_ = other.upperBoundId_;
            upperBoundId_.makeImmutable();
            bitField0_ |= 0x00000020;
          } else {
            ensureUpperBoundIdIsMutable();
            upperBoundId_.addAll(other.upperBoundId_);
          }
          onChanged();
        }
        this.mergeExtensionFields(other);
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasId()) {
          return false;
        }
        if (!hasName()) {
          return false;
        }
        for (int i = 0; i < getUpperBoundCount(); i++) {
          if (!getUpperBound(i).isInitialized()) {
            return false;
          }
        }
        if (!extensionsAreInitialized()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                id_ = input.readInt32();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 16: {
                name_ = input.readInt32();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              case 24: {
                reified_ = input.readBool();
                bitField0_ |= 0x00000004;
                break;
              } // case 24
              case 32: {
                int tmpRaw = input.readEnum();
                org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.Variance tmpValue =
                    org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.Variance.forNumber(tmpRaw);
                if (tmpValue == null) {
                  mergeUnknownVarintField(4, tmpRaw);
                } else {
                  variance_ = tmpRaw;
                  bitField0_ |= 0x00000008;
                }
                break;
              } // case 32
              case 42: {
                org.jetbrains.kotlin.metadata.ProtoBuf.Type m =
                    input.readMessage(
                        org.jetbrains.kotlin.metadata.ProtoBuf.Type.parser(),
                        extensionRegistry);
                if (upperBoundBuilder_ == null) {
                  ensureUpperBoundIsMutable();
                  upperBound_.add(m);
                } else {
                  upperBoundBuilder_.addMessage(m);
                }
                break;
              } // case 42
              case 48: {
                int v = input.readInt32();
                ensureUpperBoundIdIsMutable();
                upperBoundId_.addInt(v);
                break;
              } // case 48
              case 50: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureUpperBoundIdIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  upperBoundId_.addInt(input.readInt32());
                }
                input.popLimit(limit);
                break;
              } // case 50
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int id_ ;
      /**
       * <code>int32 id = 1 [features = { ... }</code>
       * @return Whether the id field is set.
       */
      @java.lang.Override
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>int32 id = 1 [features = { ... }</code>
       * @return The id.
       */
      @java.lang.Override
      public int getId() {
        return id_;
      }
      /**
       * <code>int32 id = 1 [features = { ... }</code>
       * @param value The id to set.
       * @return This builder for chaining.
       */
      public Builder setId(int value) {

        id_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>int32 id = 1 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        id_ = 0;
        onChanged();
        return this;
      }

      private int name_ ;
      /**
       * <code>int32 name = 2 [features = { ... }</code>
       * @return Whether the name field is set.
       */
      @java.lang.Override
      public boolean hasName() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>int32 name = 2 [features = { ... }</code>
       * @return The name.
       */
      @java.lang.Override
      public int getName() {
        return name_;
      }
      /**
       * <code>int32 name = 2 [features = { ... }</code>
       * @param value The name to set.
       * @return This builder for chaining.
       */
      public Builder setName(int value) {

        name_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>int32 name = 2 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000002);
        name_ = 0;
        onChanged();
        return this;
      }

      private boolean reified_ ;
      /**
       * <code>bool reified = 3 [default = false];</code>
       * @return Whether the reified field is set.
       */
      @java.lang.Override
      public boolean hasReified() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>bool reified = 3 [default = false];</code>
       * @return The reified.
       */
      @java.lang.Override
      public boolean getReified() {
        return reified_;
      }
      /**
       * <code>bool reified = 3 [default = false];</code>
       * @param value The reified to set.
       * @return This builder for chaining.
       */
      public Builder setReified(boolean value) {

        reified_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>bool reified = 3 [default = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearReified() {
        bitField0_ = (bitField0_ & ~0x00000004);
        reified_ = false;
        onChanged();
        return this;
      }

      private int variance_ = 2;
      /**
       * <code>.org.jetbrains.kotlin.metadata.TypeParameter.Variance variance = 4 [default = INV];</code>
       * @return Whether the variance field is set.
       */
      @java.lang.Override public boolean hasVariance() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.TypeParameter.Variance variance = 4 [default = INV];</code>
       * @return The variance.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.Variance getVariance() {
        org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.Variance result = org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.Variance.forNumber(variance_);
        return result == null ? org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.Variance.INV : result;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.TypeParameter.Variance variance = 4 [default = INV];</code>
       * @param value The variance to set.
       * @return This builder for chaining.
       */
      public Builder setVariance(org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.Variance value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000008;
        variance_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.TypeParameter.Variance variance = 4 [default = INV];</code>
       * @return This builder for chaining.
       */
      public Builder clearVariance() {
        bitField0_ = (bitField0_ & ~0x00000008);
        variance_ = 2;
        onChanged();
        return this;
      }

      private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Type> upperBound_ =
        java.util.Collections.emptyList();
      private void ensureUpperBoundIsMutable() {
        if (!((bitField0_ & 0x00000010) != 0)) {
          upperBound_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.ProtoBuf.Type>(upperBound_);
          bitField0_ |= 0x00000010;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Type, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder> upperBoundBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Type> getUpperBoundList() {
        if (upperBoundBuilder_ == null) {
          return java.util.Collections.unmodifiableList(upperBound_);
        } else {
          return upperBoundBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
       */
      public int getUpperBoundCount() {
        if (upperBoundBuilder_ == null) {
          return upperBound_.size();
        } else {
          return upperBoundBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type getUpperBound(int index) {
        if (upperBoundBuilder_ == null) {
          return upperBound_.get(index);
        } else {
          return upperBoundBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
       */
      public Builder setUpperBound(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        if (upperBoundBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureUpperBoundIsMutable();
          upperBound_.set(index, value);
          onChanged();
        } else {
          upperBoundBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
       */
      public Builder setUpperBound(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder builderForValue) {
        if (upperBoundBuilder_ == null) {
          ensureUpperBoundIsMutable();
          upperBound_.set(index, builderForValue.build());
          onChanged();
        } else {
          upperBoundBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
       */
      public Builder addUpperBound(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        if (upperBoundBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureUpperBoundIsMutable();
          upperBound_.add(value);
          onChanged();
        } else {
          upperBoundBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
       */
      public Builder addUpperBound(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        if (upperBoundBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureUpperBoundIsMutable();
          upperBound_.add(index, value);
          onChanged();
        } else {
          upperBoundBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
       */
      public Builder addUpperBound(
          org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder builderForValue) {
        if (upperBoundBuilder_ == null) {
          ensureUpperBoundIsMutable();
          upperBound_.add(builderForValue.build());
          onChanged();
        } else {
          upperBoundBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
       */
      public Builder addUpperBound(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder builderForValue) {
        if (upperBoundBuilder_ == null) {
          ensureUpperBoundIsMutable();
          upperBound_.add(index, builderForValue.build());
          onChanged();
        } else {
          upperBoundBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
       */
      public Builder addAllUpperBound(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Type> values) {
        if (upperBoundBuilder_ == null) {
          ensureUpperBoundIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, upperBound_);
          onChanged();
        } else {
          upperBoundBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
       */
      public Builder clearUpperBound() {
        if (upperBoundBuilder_ == null) {
          upperBound_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          upperBoundBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
       */
      public Builder removeUpperBound(int index) {
        if (upperBoundBuilder_ == null) {
          ensureUpperBoundIsMutable();
          upperBound_.remove(index);
          onChanged();
        } else {
          upperBoundBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder getUpperBoundBuilder(
          int index) {
        return getUpperBoundFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder getUpperBoundOrBuilder(
          int index) {
        if (upperBoundBuilder_ == null) {
          return upperBound_.get(index);  } else {
          return upperBoundBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder> 
           getUpperBoundOrBuilderList() {
        if (upperBoundBuilder_ != null) {
          return upperBoundBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(upperBound_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder addUpperBoundBuilder() {
        return getUpperBoundFieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder addUpperBoundBuilder(
          int index) {
        return getUpperBoundFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder> 
           getUpperBoundBuilderList() {
        return getUpperBoundFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Type, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder> 
          getUpperBoundFieldBuilder() {
        if (upperBoundBuilder_ == null) {
          upperBoundBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.ProtoBuf.Type, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder>(
                  upperBound_,
                  ((bitField0_ & 0x00000010) != 0),
                  getParentForChildren(),
                  isClean());
          upperBound_ = null;
        }
        return upperBoundBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.Internal.IntList upperBoundId_ = emptyIntList();
      private void ensureUpperBoundIdIsMutable() {
        if (!upperBoundId_.isModifiable()) {
          upperBoundId_ = makeMutableCopy(upperBoundId_);
        }
        bitField0_ |= 0x00000020;
      }
      /**
       * <code>repeated int32 upper_bound_id = 6 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return A list containing the upperBoundId.
       */
      public java.util.List<java.lang.Integer>
          getUpperBoundIdList() {
        upperBoundId_.makeImmutable();
        return upperBoundId_;
      }
      /**
       * <code>repeated int32 upper_bound_id = 6 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return The count of upperBoundId.
       */
      public int getUpperBoundIdCount() {
        return upperBoundId_.size();
      }
      /**
       * <code>repeated int32 upper_bound_id = 6 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @param index The index of the element to return.
       * @return The upperBoundId at the given index.
       */
      public int getUpperBoundId(int index) {
        return upperBoundId_.getInt(index);
      }
      /**
       * <code>repeated int32 upper_bound_id = 6 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @param index The index to set the value at.
       * @param value The upperBoundId to set.
       * @return This builder for chaining.
       */
      public Builder setUpperBoundId(
          int index, int value) {

        ensureUpperBoundIdIsMutable();
        upperBoundId_.setInt(index, value);
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 upper_bound_id = 6 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @param value The upperBoundId to add.
       * @return This builder for chaining.
       */
      public Builder addUpperBoundId(int value) {

        ensureUpperBoundIdIsMutable();
        upperBoundId_.addInt(value);
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 upper_bound_id = 6 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @param values The upperBoundId to add.
       * @return This builder for chaining.
       */
      public Builder addAllUpperBoundId(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureUpperBoundIdIsMutable();
        org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
            values, upperBoundId_);
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 upper_bound_id = 6 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearUpperBoundId() {
        upperBoundId_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.TypeParameter)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.TypeParameter)
    private static final org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter();
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<TypeParameter>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<TypeParameter>() {
      @java.lang.Override
      public TypeParameter parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<TypeParameter> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<TypeParameter> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ClassOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.Class)
      org.jetbrains.kotlin.protobuf.GeneratedMessage.
          ExtendableMessageOrBuilder<Class> {

    /**
     * <pre>
     *
     * hasAnnotations
     * Visibility
     * Modality
     * ClassKind
     * isInner
     * isData
     * isExternal
     * isExpect
     * isInline
     * isFun
     * hasEnumEntries
     * </pre>
     *
     * <code>int32 flags = 1 [default = 6];</code>
     * @return Whether the flags field is set.
     */
    boolean hasFlags();
    /**
     * <pre>
     *
     * hasAnnotations
     * Visibility
     * Modality
     * ClassKind
     * isInner
     * isData
     * isExternal
     * isExpect
     * isInline
     * isFun
     * hasEnumEntries
     * </pre>
     *
     * <code>int32 flags = 1 [default = 6];</code>
     * @return The flags.
     */
    int getFlags();

    /**
     * <code>int32 fq_name = 3 [features = { ... }</code>
     * @return Whether the fqName field is set.
     */
    boolean hasFqName();
    /**
     * <code>int32 fq_name = 3 [features = { ... }</code>
     * @return The fqName.
     */
    int getFqName();

    /**
     * <code>int32 companion_object_name = 4 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
     * @return Whether the companionObjectName field is set.
     */
    boolean hasCompanionObjectName();
    /**
     * <code>int32 companion_object_name = 4 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
     * @return The companionObjectName.
     */
    int getCompanionObjectName();

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter> 
        getTypeParameterList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter getTypeParameter(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
     */
    int getTypeParameterCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameterOrBuilder> 
        getTypeParameterOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameterOrBuilder getTypeParameterOrBuilder(
        int index);

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Type> 
        getSupertypeList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Type getSupertype(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
     */
    int getSupertypeCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder> 
        getSupertypeOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder getSupertypeOrBuilder(
        int index);

    /**
     * <code>repeated int32 supertype_id = 2 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return A list containing the supertypeId.
     */
    java.util.List<java.lang.Integer> getSupertypeIdList();
    /**
     * <code>repeated int32 supertype_id = 2 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return The count of supertypeId.
     */
    int getSupertypeIdCount();
    /**
     * <code>repeated int32 supertype_id = 2 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @param index The index of the element to return.
     * @return The supertypeId at the given index.
     */
    int getSupertypeId(int index);

    /**
     * <code>repeated int32 nested_class_name = 7 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
     * @return A list containing the nestedClassName.
     */
    java.util.List<java.lang.Integer> getNestedClassNameList();
    /**
     * <code>repeated int32 nested_class_name = 7 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
     * @return The count of nestedClassName.
     */
    int getNestedClassNameCount();
    /**
     * <code>repeated int32 nested_class_name = 7 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
     * @param index The index of the element to return.
     * @return The nestedClassName at the given index.
     */
    int getNestedClassName(int index);

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 20;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Type> 
        getContextReceiverTypeList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 20;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Type getContextReceiverType(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 20;</code>
     */
    int getContextReceiverTypeCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 20;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder> 
        getContextReceiverTypeOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 20;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder getContextReceiverTypeOrBuilder(
        int index);

    /**
     * <code>repeated int32 context_receiver_type_id = 21 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return A list containing the contextReceiverTypeId.
     */
    java.util.List<java.lang.Integer> getContextReceiverTypeIdList();
    /**
     * <code>repeated int32 context_receiver_type_id = 21 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return The count of contextReceiverTypeId.
     */
    int getContextReceiverTypeIdCount();
    /**
     * <code>repeated int32 context_receiver_type_id = 21 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @param index The index of the element to return.
     * @return The contextReceiverTypeId at the given index.
     */
    int getContextReceiverTypeId(int index);

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Constructor> 
        getConstructorList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Constructor getConstructor(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
     */
    int getConstructorCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.ConstructorOrBuilder> 
        getConstructorOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.ConstructorOrBuilder getConstructorOrBuilder(
        int index);

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Function> 
        getFunctionList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Function getFunction(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
     */
    int getFunctionCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.FunctionOrBuilder> 
        getFunctionOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.FunctionOrBuilder getFunctionOrBuilder(
        int index);

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Property> 
        getPropertyList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Property getProperty(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
     */
    int getPropertyCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.PropertyOrBuilder> 
        getPropertyOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.PropertyOrBuilder getPropertyOrBuilder(
        int index);

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias> 
        getTypeAliasList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias getTypeAlias(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
     */
    int getTypeAliasCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.TypeAliasOrBuilder> 
        getTypeAliasOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.TypeAliasOrBuilder getTypeAliasOrBuilder(
        int index);

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry> 
        getEnumEntryList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry getEnumEntry(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
     */
    int getEnumEntryCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntryOrBuilder> 
        getEnumEntryOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntryOrBuilder getEnumEntryOrBuilder(
        int index);

    /**
     * <code>repeated int32 sealed_subclass_fq_name = 16 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
     * @return A list containing the sealedSubclassFqName.
     */
    java.util.List<java.lang.Integer> getSealedSubclassFqNameList();
    /**
     * <code>repeated int32 sealed_subclass_fq_name = 16 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
     * @return The count of sealedSubclassFqName.
     */
    int getSealedSubclassFqNameCount();
    /**
     * <code>repeated int32 sealed_subclass_fq_name = 16 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
     * @param index The index of the element to return.
     * @return The sealedSubclassFqName at the given index.
     */
    int getSealedSubclassFqName(int index);

    /**
     * <code>int32 inline_class_underlying_property_name = 17 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
     * @return Whether the inlineClassUnderlyingPropertyName field is set.
     */
    boolean hasInlineClassUnderlyingPropertyName();
    /**
     * <code>int32 inline_class_underlying_property_name = 17 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
     * @return The inlineClassUnderlyingPropertyName.
     */
    int getInlineClassUnderlyingPropertyName();

    /**
     * <code>.org.jetbrains.kotlin.metadata.Type inline_class_underlying_type = 18;</code>
     * @return Whether the inlineClassUnderlyingType field is set.
     */
    boolean hasInlineClassUnderlyingType();
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type inline_class_underlying_type = 18;</code>
     * @return The inlineClassUnderlyingType.
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Type getInlineClassUnderlyingType();
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type inline_class_underlying_type = 18;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder getInlineClassUnderlyingTypeOrBuilder();

    /**
     * <code>int32 inline_class_underlying_type_id = 19 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return Whether the inlineClassUnderlyingTypeId field is set.
     */
    boolean hasInlineClassUnderlyingTypeId();
    /**
     * <code>int32 inline_class_underlying_type_id = 19 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return The inlineClassUnderlyingTypeId.
     */
    int getInlineClassUnderlyingTypeId();

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 25;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> 
        getAnnotationList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 25;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getAnnotation(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 25;</code>
     */
    int getAnnotationCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 25;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> 
        getAnnotationOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 25;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder getAnnotationOrBuilder(
        int index);

    /**
     * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
     * @return Whether the typeTable field is set.
     */
    boolean hasTypeTable();
    /**
     * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
     * @return The typeTable.
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable getTypeTable();
    /**
     * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.TypeTableOrBuilder getTypeTableOrBuilder();

    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     * @return A list containing the versionRequirement.
     */
    java.util.List<java.lang.Integer> getVersionRequirementList();
    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     * @return The count of versionRequirement.
     */
    int getVersionRequirementCount();
    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     * @param index The index of the element to return.
     * @return The versionRequirement at the given index.
     */
    int getVersionRequirement(int index);

    /**
     * <code>.org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
     * @return Whether the versionRequirementTable field is set.
     */
    boolean hasVersionRequirementTable();
    /**
     * <code>.org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
     * @return The versionRequirementTable.
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable getVersionRequirementTable();
    /**
     * <code>.org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTableOrBuilder getVersionRequirementTableOrBuilder();

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData> 
        getCompilerPluginDataList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData getCompilerPluginData(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
     */
    int getCompilerPluginDataCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginDataOrBuilder> 
        getCompilerPluginDataOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginDataOrBuilder getCompilerPluginDataOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.metadata.Class}
   */
  public static final class Class extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage.ExtendableMessage<
        Class> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.Class)
      ClassOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        Class.class.getName());
    }
    // Use Class.newBuilder() to construct.
    private Class(org.jetbrains.kotlin.protobuf.GeneratedMessage.ExtendableBuilder<org.jetbrains.kotlin.metadata.ProtoBuf.Class, ?> builder) {
      super(builder);
    }
    private Class() {
      flags_ = 6;
      typeParameter_ = java.util.Collections.emptyList();
      supertype_ = java.util.Collections.emptyList();
      supertypeId_ = emptyIntList();
      nestedClassName_ = emptyIntList();
      contextReceiverType_ = java.util.Collections.emptyList();
      contextReceiverTypeId_ = emptyIntList();
      constructor_ = java.util.Collections.emptyList();
      function_ = java.util.Collections.emptyList();
      property_ = java.util.Collections.emptyList();
      typeAlias_ = java.util.Collections.emptyList();
      enumEntry_ = java.util.Collections.emptyList();
      sealedSubclassFqName_ = emptyIntList();
      annotation_ = java.util.Collections.emptyList();
      versionRequirement_ = emptyIntList();
      compilerPluginData_ = java.util.Collections.emptyList();
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Class_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Class_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.metadata.ProtoBuf.Class.class, org.jetbrains.kotlin.metadata.ProtoBuf.Class.Builder.class);
    }

    /**
     * Protobuf enum {@code org.jetbrains.kotlin.metadata.Class.Kind}
     */
    public enum Kind
        implements org.jetbrains.kotlin.protobuf.ProtocolMessageEnum {
      /**
       * <pre>
       * 3 bits
       * </pre>
       *
       * <code>CLASS = 0;</code>
       */
      CLASS(0),
      /**
       * <code>INTERFACE = 1;</code>
       */
      INTERFACE(1),
      /**
       * <code>ENUM_CLASS = 2;</code>
       */
      ENUM_CLASS(2),
      /**
       * <code>ENUM_ENTRY = 3;</code>
       */
      ENUM_ENTRY(3),
      /**
       * <code>ANNOTATION_CLASS = 4;</code>
       */
      ANNOTATION_CLASS(4),
      /**
       * <code>OBJECT = 5;</code>
       */
      OBJECT(5),
      /**
       * <code>COMPANION_OBJECT = 6;</code>
       */
      COMPANION_OBJECT(6),
      ;

      static {
        org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
          org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
          /* major= */ 4,
          /* minor= */ 29,
          /* patch= */ 3,
          /* suffix= */ "",
          Kind.class.getName());
      }
      /**
       * <pre>
       * 3 bits
       * </pre>
       *
       * <code>CLASS = 0;</code>
       */
      public static final int CLASS_VALUE = 0;
      /**
       * <code>INTERFACE = 1;</code>
       */
      public static final int INTERFACE_VALUE = 1;
      /**
       * <code>ENUM_CLASS = 2;</code>
       */
      public static final int ENUM_CLASS_VALUE = 2;
      /**
       * <code>ENUM_ENTRY = 3;</code>
       */
      public static final int ENUM_ENTRY_VALUE = 3;
      /**
       * <code>ANNOTATION_CLASS = 4;</code>
       */
      public static final int ANNOTATION_CLASS_VALUE = 4;
      /**
       * <code>OBJECT = 5;</code>
       */
      public static final int OBJECT_VALUE = 5;
      /**
       * <code>COMPANION_OBJECT = 6;</code>
       */
      public static final int COMPANION_OBJECT_VALUE = 6;


      public final int getNumber() {
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static Kind valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static Kind forNumber(int value) {
        switch (value) {
          case 0: return CLASS;
          case 1: return INTERFACE;
          case 2: return ENUM_CLASS;
          case 3: return ENUM_ENTRY;
          case 4: return ANNOTATION_CLASS;
          case 5: return OBJECT;
          case 6: return COMPANION_OBJECT;
          default: return null;
        }
      }

      public static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Kind>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<
          Kind> internalValueMap =
            new org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Kind>() {
              public Kind findValueByNumber(int number) {
                return Kind.forNumber(number);
              }
            };

      public final org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.Class.getDescriptor().getEnumTypes().get(0);
      }

      private static final Kind[] VALUES = values();

      public static Kind valueOf(
          org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private Kind(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:org.jetbrains.kotlin.metadata.Class.Kind)
    }

    private int bitField0_;
    public static final int FLAGS_FIELD_NUMBER = 1;
    private int flags_ = 6;
    /**
     * <pre>
     *
     * hasAnnotations
     * Visibility
     * Modality
     * ClassKind
     * isInner
     * isData
     * isExternal
     * isExpect
     * isInline
     * isFun
     * hasEnumEntries
     * </pre>
     *
     * <code>int32 flags = 1 [default = 6];</code>
     * @return Whether the flags field is set.
     */
    @java.lang.Override
    public boolean hasFlags() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     *
     * hasAnnotations
     * Visibility
     * Modality
     * ClassKind
     * isInner
     * isData
     * isExternal
     * isExpect
     * isInline
     * isFun
     * hasEnumEntries
     * </pre>
     *
     * <code>int32 flags = 1 [default = 6];</code>
     * @return The flags.
     */
    @java.lang.Override
    public int getFlags() {
      return flags_;
    }

    public static final int FQ_NAME_FIELD_NUMBER = 3;
    private int fqName_ = 0;
    /**
     * <code>int32 fq_name = 3 [features = { ... }</code>
     * @return Whether the fqName field is set.
     */
    @java.lang.Override
    public boolean hasFqName() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>int32 fq_name = 3 [features = { ... }</code>
     * @return The fqName.
     */
    @java.lang.Override
    public int getFqName() {
      return fqName_;
    }

    public static final int COMPANION_OBJECT_NAME_FIELD_NUMBER = 4;
    private int companionObjectName_ = 0;
    /**
     * <code>int32 companion_object_name = 4 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
     * @return Whether the companionObjectName field is set.
     */
    @java.lang.Override
    public boolean hasCompanionObjectName() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>int32 companion_object_name = 4 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
     * @return The companionObjectName.
     */
    @java.lang.Override
    public int getCompanionObjectName() {
      return companionObjectName_;
    }

    public static final int TYPE_PARAMETER_FIELD_NUMBER = 5;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter> typeParameter_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter> getTypeParameterList() {
      return typeParameter_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameterOrBuilder> 
        getTypeParameterOrBuilderList() {
      return typeParameter_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
     */
    @java.lang.Override
    public int getTypeParameterCount() {
      return typeParameter_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter getTypeParameter(int index) {
      return typeParameter_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameterOrBuilder getTypeParameterOrBuilder(
        int index) {
      return typeParameter_.get(index);
    }

    public static final int SUPERTYPE_FIELD_NUMBER = 6;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Type> supertype_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Type> getSupertypeList() {
      return supertype_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder> 
        getSupertypeOrBuilderList() {
      return supertype_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
     */
    @java.lang.Override
    public int getSupertypeCount() {
      return supertype_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Type getSupertype(int index) {
      return supertype_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder getSupertypeOrBuilder(
        int index) {
      return supertype_.get(index);
    }

    public static final int SUPERTYPE_ID_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private org.jetbrains.kotlin.protobuf.Internal.IntList supertypeId_ =
        emptyIntList();
    /**
     * <code>repeated int32 supertype_id = 2 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return A list containing the supertypeId.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getSupertypeIdList() {
      return supertypeId_;
    }
    /**
     * <code>repeated int32 supertype_id = 2 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return The count of supertypeId.
     */
    public int getSupertypeIdCount() {
      return supertypeId_.size();
    }
    /**
     * <code>repeated int32 supertype_id = 2 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @param index The index of the element to return.
     * @return The supertypeId at the given index.
     */
    public int getSupertypeId(int index) {
      return supertypeId_.getInt(index);
    }
    private int supertypeIdMemoizedSerializedSize = -1;

    public static final int NESTED_CLASS_NAME_FIELD_NUMBER = 7;
    @SuppressWarnings("serial")
    private org.jetbrains.kotlin.protobuf.Internal.IntList nestedClassName_ =
        emptyIntList();
    /**
     * <code>repeated int32 nested_class_name = 7 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
     * @return A list containing the nestedClassName.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getNestedClassNameList() {
      return nestedClassName_;
    }
    /**
     * <code>repeated int32 nested_class_name = 7 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
     * @return The count of nestedClassName.
     */
    public int getNestedClassNameCount() {
      return nestedClassName_.size();
    }
    /**
     * <code>repeated int32 nested_class_name = 7 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
     * @param index The index of the element to return.
     * @return The nestedClassName at the given index.
     */
    public int getNestedClassName(int index) {
      return nestedClassName_.getInt(index);
    }
    private int nestedClassNameMemoizedSerializedSize = -1;

    public static final int CONTEXT_RECEIVER_TYPE_FIELD_NUMBER = 20;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Type> contextReceiverType_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 20;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Type> getContextReceiverTypeList() {
      return contextReceiverType_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 20;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder> 
        getContextReceiverTypeOrBuilderList() {
      return contextReceiverType_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 20;</code>
     */
    @java.lang.Override
    public int getContextReceiverTypeCount() {
      return contextReceiverType_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 20;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Type getContextReceiverType(int index) {
      return contextReceiverType_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 20;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder getContextReceiverTypeOrBuilder(
        int index) {
      return contextReceiverType_.get(index);
    }

    public static final int CONTEXT_RECEIVER_TYPE_ID_FIELD_NUMBER = 21;
    @SuppressWarnings("serial")
    private org.jetbrains.kotlin.protobuf.Internal.IntList contextReceiverTypeId_ =
        emptyIntList();
    /**
     * <code>repeated int32 context_receiver_type_id = 21 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return A list containing the contextReceiverTypeId.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getContextReceiverTypeIdList() {
      return contextReceiverTypeId_;
    }
    /**
     * <code>repeated int32 context_receiver_type_id = 21 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return The count of contextReceiverTypeId.
     */
    public int getContextReceiverTypeIdCount() {
      return contextReceiverTypeId_.size();
    }
    /**
     * <code>repeated int32 context_receiver_type_id = 21 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @param index The index of the element to return.
     * @return The contextReceiverTypeId at the given index.
     */
    public int getContextReceiverTypeId(int index) {
      return contextReceiverTypeId_.getInt(index);
    }
    private int contextReceiverTypeIdMemoizedSerializedSize = -1;

    public static final int CONSTRUCTOR_FIELD_NUMBER = 8;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Constructor> constructor_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Constructor> getConstructorList() {
      return constructor_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.ConstructorOrBuilder> 
        getConstructorOrBuilderList() {
      return constructor_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
     */
    @java.lang.Override
    public int getConstructorCount() {
      return constructor_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Constructor getConstructor(int index) {
      return constructor_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.ConstructorOrBuilder getConstructorOrBuilder(
        int index) {
      return constructor_.get(index);
    }

    public static final int FUNCTION_FIELD_NUMBER = 9;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Function> function_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Function> getFunctionList() {
      return function_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.FunctionOrBuilder> 
        getFunctionOrBuilderList() {
      return function_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
     */
    @java.lang.Override
    public int getFunctionCount() {
      return function_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Function getFunction(int index) {
      return function_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.FunctionOrBuilder getFunctionOrBuilder(
        int index) {
      return function_.get(index);
    }

    public static final int PROPERTY_FIELD_NUMBER = 10;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Property> property_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Property> getPropertyList() {
      return property_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.PropertyOrBuilder> 
        getPropertyOrBuilderList() {
      return property_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
     */
    @java.lang.Override
    public int getPropertyCount() {
      return property_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Property getProperty(int index) {
      return property_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.PropertyOrBuilder getPropertyOrBuilder(
        int index) {
      return property_.get(index);
    }

    public static final int TYPE_ALIAS_FIELD_NUMBER = 11;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias> typeAlias_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias> getTypeAliasList() {
      return typeAlias_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.TypeAliasOrBuilder> 
        getTypeAliasOrBuilderList() {
      return typeAlias_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
     */
    @java.lang.Override
    public int getTypeAliasCount() {
      return typeAlias_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias getTypeAlias(int index) {
      return typeAlias_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.TypeAliasOrBuilder getTypeAliasOrBuilder(
        int index) {
      return typeAlias_.get(index);
    }

    public static final int ENUM_ENTRY_FIELD_NUMBER = 13;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry> enumEntry_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry> getEnumEntryList() {
      return enumEntry_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntryOrBuilder> 
        getEnumEntryOrBuilderList() {
      return enumEntry_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
     */
    @java.lang.Override
    public int getEnumEntryCount() {
      return enumEntry_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry getEnumEntry(int index) {
      return enumEntry_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntryOrBuilder getEnumEntryOrBuilder(
        int index) {
      return enumEntry_.get(index);
    }

    public static final int SEALED_SUBCLASS_FQ_NAME_FIELD_NUMBER = 16;
    @SuppressWarnings("serial")
    private org.jetbrains.kotlin.protobuf.Internal.IntList sealedSubclassFqName_ =
        emptyIntList();
    /**
     * <code>repeated int32 sealed_subclass_fq_name = 16 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
     * @return A list containing the sealedSubclassFqName.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getSealedSubclassFqNameList() {
      return sealedSubclassFqName_;
    }
    /**
     * <code>repeated int32 sealed_subclass_fq_name = 16 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
     * @return The count of sealedSubclassFqName.
     */
    public int getSealedSubclassFqNameCount() {
      return sealedSubclassFqName_.size();
    }
    /**
     * <code>repeated int32 sealed_subclass_fq_name = 16 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
     * @param index The index of the element to return.
     * @return The sealedSubclassFqName at the given index.
     */
    public int getSealedSubclassFqName(int index) {
      return sealedSubclassFqName_.getInt(index);
    }
    private int sealedSubclassFqNameMemoizedSerializedSize = -1;

    public static final int INLINE_CLASS_UNDERLYING_PROPERTY_NAME_FIELD_NUMBER = 17;
    private int inlineClassUnderlyingPropertyName_ = 0;
    /**
     * <code>int32 inline_class_underlying_property_name = 17 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
     * @return Whether the inlineClassUnderlyingPropertyName field is set.
     */
    @java.lang.Override
    public boolean hasInlineClassUnderlyingPropertyName() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <code>int32 inline_class_underlying_property_name = 17 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
     * @return The inlineClassUnderlyingPropertyName.
     */
    @java.lang.Override
    public int getInlineClassUnderlyingPropertyName() {
      return inlineClassUnderlyingPropertyName_;
    }

    public static final int INLINE_CLASS_UNDERLYING_TYPE_FIELD_NUMBER = 18;
    private org.jetbrains.kotlin.metadata.ProtoBuf.Type inlineClassUnderlyingType_;
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type inline_class_underlying_type = 18;</code>
     * @return Whether the inlineClassUnderlyingType field is set.
     */
    @java.lang.Override
    public boolean hasInlineClassUnderlyingType() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type inline_class_underlying_type = 18;</code>
     * @return The inlineClassUnderlyingType.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Type getInlineClassUnderlyingType() {
      return inlineClassUnderlyingType_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance() : inlineClassUnderlyingType_;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type inline_class_underlying_type = 18;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder getInlineClassUnderlyingTypeOrBuilder() {
      return inlineClassUnderlyingType_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance() : inlineClassUnderlyingType_;
    }

    public static final int INLINE_CLASS_UNDERLYING_TYPE_ID_FIELD_NUMBER = 19;
    private int inlineClassUnderlyingTypeId_ = 0;
    /**
     * <code>int32 inline_class_underlying_type_id = 19 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return Whether the inlineClassUnderlyingTypeId field is set.
     */
    @java.lang.Override
    public boolean hasInlineClassUnderlyingTypeId() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <code>int32 inline_class_underlying_type_id = 19 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return The inlineClassUnderlyingTypeId.
     */
    @java.lang.Override
    public int getInlineClassUnderlyingTypeId() {
      return inlineClassUnderlyingTypeId_;
    }

    public static final int ANNOTATION_FIELD_NUMBER = 25;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> annotation_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 25;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> getAnnotationList() {
      return annotation_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 25;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> 
        getAnnotationOrBuilderList() {
      return annotation_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 25;</code>
     */
    @java.lang.Override
    public int getAnnotationCount() {
      return annotation_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 25;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getAnnotation(int index) {
      return annotation_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 25;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder getAnnotationOrBuilder(
        int index) {
      return annotation_.get(index);
    }

    public static final int TYPE_TABLE_FIELD_NUMBER = 30;
    private org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable typeTable_;
    /**
     * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
     * @return Whether the typeTable field is set.
     */
    @java.lang.Override
    public boolean hasTypeTable() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
     * @return The typeTable.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable getTypeTable() {
      return typeTable_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable.getDefaultInstance() : typeTable_;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.TypeTableOrBuilder getTypeTableOrBuilder() {
      return typeTable_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable.getDefaultInstance() : typeTable_;
    }

    public static final int VERSION_REQUIREMENT_FIELD_NUMBER = 31;
    @SuppressWarnings("serial")
    private org.jetbrains.kotlin.protobuf.Internal.IntList versionRequirement_ =
        emptyIntList();
    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     * @return A list containing the versionRequirement.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getVersionRequirementList() {
      return versionRequirement_;
    }
    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     * @return The count of versionRequirement.
     */
    public int getVersionRequirementCount() {
      return versionRequirement_.size();
    }
    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     * @param index The index of the element to return.
     * @return The versionRequirement at the given index.
     */
    public int getVersionRequirement(int index) {
      return versionRequirement_.getInt(index);
    }

    public static final int VERSION_REQUIREMENT_TABLE_FIELD_NUMBER = 32;
    private org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable versionRequirementTable_;
    /**
     * <code>.org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
     * @return Whether the versionRequirementTable field is set.
     */
    @java.lang.Override
    public boolean hasVersionRequirementTable() {
      return ((bitField0_ & 0x00000080) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
     * @return The versionRequirementTable.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable getVersionRequirementTable() {
      return versionRequirementTable_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable.getDefaultInstance() : versionRequirementTable_;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTableOrBuilder getVersionRequirementTableOrBuilder() {
      return versionRequirementTable_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable.getDefaultInstance() : versionRequirementTable_;
    }

    public static final int COMPILER_PLUGIN_DATA_FIELD_NUMBER = 33;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData> compilerPluginData_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData> getCompilerPluginDataList() {
      return compilerPluginData_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginDataOrBuilder> 
        getCompilerPluginDataOrBuilderList() {
      return compilerPluginData_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
     */
    @java.lang.Override
    public int getCompilerPluginDataCount() {
      return compilerPluginData_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData getCompilerPluginData(int index) {
      return compilerPluginData_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginDataOrBuilder getCompilerPluginDataOrBuilder(
        int index) {
      return compilerPluginData_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasFqName()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getTypeParameterCount(); i++) {
        if (!getTypeParameter(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getSupertypeCount(); i++) {
        if (!getSupertype(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getContextReceiverTypeCount(); i++) {
        if (!getContextReceiverType(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getConstructorCount(); i++) {
        if (!getConstructor(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getFunctionCount(); i++) {
        if (!getFunction(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getPropertyCount(); i++) {
        if (!getProperty(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getTypeAliasCount(); i++) {
        if (!getTypeAlias(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getEnumEntryCount(); i++) {
        if (!getEnumEntry(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasInlineClassUnderlyingType()) {
        if (!getInlineClassUnderlyingType().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getAnnotationCount(); i++) {
        if (!getAnnotation(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasTypeTable()) {
        if (!getTypeTable().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getCompilerPluginDataCount(); i++) {
        if (!getCompilerPluginData(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (!extensionsAreInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      org.jetbrains.kotlin.protobuf.GeneratedMessage
        .ExtendableMessage.ExtensionSerializer
          extensionWriter = newExtensionSerializer();
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeInt32(1, flags_);
      }
      if (getSupertypeIdList().size() > 0) {
        output.writeUInt32NoTag(18);
        output.writeUInt32NoTag(supertypeIdMemoizedSerializedSize);
      }
      for (int i = 0; i < supertypeId_.size(); i++) {
        output.writeInt32NoTag(supertypeId_.getInt(i));
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeInt32(3, fqName_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeInt32(4, companionObjectName_);
      }
      for (int i = 0; i < typeParameter_.size(); i++) {
        output.writeMessage(5, typeParameter_.get(i));
      }
      for (int i = 0; i < supertype_.size(); i++) {
        output.writeMessage(6, supertype_.get(i));
      }
      if (getNestedClassNameList().size() > 0) {
        output.writeUInt32NoTag(58);
        output.writeUInt32NoTag(nestedClassNameMemoizedSerializedSize);
      }
      for (int i = 0; i < nestedClassName_.size(); i++) {
        output.writeInt32NoTag(nestedClassName_.getInt(i));
      }
      for (int i = 0; i < constructor_.size(); i++) {
        output.writeMessage(8, constructor_.get(i));
      }
      for (int i = 0; i < function_.size(); i++) {
        output.writeMessage(9, function_.get(i));
      }
      for (int i = 0; i < property_.size(); i++) {
        output.writeMessage(10, property_.get(i));
      }
      for (int i = 0; i < typeAlias_.size(); i++) {
        output.writeMessage(11, typeAlias_.get(i));
      }
      for (int i = 0; i < enumEntry_.size(); i++) {
        output.writeMessage(13, enumEntry_.get(i));
      }
      if (getSealedSubclassFqNameList().size() > 0) {
        output.writeUInt32NoTag(130);
        output.writeUInt32NoTag(sealedSubclassFqNameMemoizedSerializedSize);
      }
      for (int i = 0; i < sealedSubclassFqName_.size(); i++) {
        output.writeInt32NoTag(sealedSubclassFqName_.getInt(i));
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeInt32(17, inlineClassUnderlyingPropertyName_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        output.writeMessage(18, getInlineClassUnderlyingType());
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        output.writeInt32(19, inlineClassUnderlyingTypeId_);
      }
      for (int i = 0; i < contextReceiverType_.size(); i++) {
        output.writeMessage(20, contextReceiverType_.get(i));
      }
      if (getContextReceiverTypeIdList().size() > 0) {
        output.writeUInt32NoTag(170);
        output.writeUInt32NoTag(contextReceiverTypeIdMemoizedSerializedSize);
      }
      for (int i = 0; i < contextReceiverTypeId_.size(); i++) {
        output.writeInt32NoTag(contextReceiverTypeId_.getInt(i));
      }
      for (int i = 0; i < annotation_.size(); i++) {
        output.writeMessage(25, annotation_.get(i));
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        output.writeMessage(30, getTypeTable());
      }
      for (int i = 0; i < versionRequirement_.size(); i++) {
        output.writeInt32(31, versionRequirement_.getInt(i));
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        output.writeMessage(32, getVersionRequirementTable());
      }
      for (int i = 0; i < compilerPluginData_.size(); i++) {
        output.writeMessage(33, compilerPluginData_.get(i));
      }
      extensionWriter.writeUntil(19000, output);
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(1, flags_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < supertypeId_.size(); i++) {
          dataSize += org.jetbrains.kotlin.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(supertypeId_.getInt(i));
        }
        size += dataSize;
        if (!getSupertypeIdList().isEmpty()) {
          size += 1;
          size += org.jetbrains.kotlin.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        supertypeIdMemoizedSerializedSize = dataSize;
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(3, fqName_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(4, companionObjectName_);
      }
      for (int i = 0; i < typeParameter_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(5, typeParameter_.get(i));
      }
      for (int i = 0; i < supertype_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(6, supertype_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < nestedClassName_.size(); i++) {
          dataSize += org.jetbrains.kotlin.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(nestedClassName_.getInt(i));
        }
        size += dataSize;
        if (!getNestedClassNameList().isEmpty()) {
          size += 1;
          size += org.jetbrains.kotlin.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        nestedClassNameMemoizedSerializedSize = dataSize;
      }
      for (int i = 0; i < constructor_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(8, constructor_.get(i));
      }
      for (int i = 0; i < function_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(9, function_.get(i));
      }
      for (int i = 0; i < property_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(10, property_.get(i));
      }
      for (int i = 0; i < typeAlias_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(11, typeAlias_.get(i));
      }
      for (int i = 0; i < enumEntry_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(13, enumEntry_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < sealedSubclassFqName_.size(); i++) {
          dataSize += org.jetbrains.kotlin.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(sealedSubclassFqName_.getInt(i));
        }
        size += dataSize;
        if (!getSealedSubclassFqNameList().isEmpty()) {
          size += 2;
          size += org.jetbrains.kotlin.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        sealedSubclassFqNameMemoizedSerializedSize = dataSize;
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(17, inlineClassUnderlyingPropertyName_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(18, getInlineClassUnderlyingType());
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(19, inlineClassUnderlyingTypeId_);
      }
      for (int i = 0; i < contextReceiverType_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(20, contextReceiverType_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < contextReceiverTypeId_.size(); i++) {
          dataSize += org.jetbrains.kotlin.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(contextReceiverTypeId_.getInt(i));
        }
        size += dataSize;
        if (!getContextReceiverTypeIdList().isEmpty()) {
          size += 2;
          size += org.jetbrains.kotlin.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        contextReceiverTypeIdMemoizedSerializedSize = dataSize;
      }
      for (int i = 0; i < annotation_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(25, annotation_.get(i));
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(30, getTypeTable());
      }
      {
        int dataSize = 0;
        for (int i = 0; i < versionRequirement_.size(); i++) {
          dataSize += org.jetbrains.kotlin.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(versionRequirement_.getInt(i));
        }
        size += dataSize;
        size += 2 * getVersionRequirementList().size();
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(32, getVersionRequirementTable());
      }
      for (int i = 0; i < compilerPluginData_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(33, compilerPluginData_.get(i));
      }
      size += extensionsSerializedSize();
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.metadata.ProtoBuf.Class)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.metadata.ProtoBuf.Class other = (org.jetbrains.kotlin.metadata.ProtoBuf.Class) obj;

      if (hasFlags() != other.hasFlags()) return false;
      if (hasFlags()) {
        if (getFlags()
            != other.getFlags()) return false;
      }
      if (hasFqName() != other.hasFqName()) return false;
      if (hasFqName()) {
        if (getFqName()
            != other.getFqName()) return false;
      }
      if (hasCompanionObjectName() != other.hasCompanionObjectName()) return false;
      if (hasCompanionObjectName()) {
        if (getCompanionObjectName()
            != other.getCompanionObjectName()) return false;
      }
      if (!getTypeParameterList()
          .equals(other.getTypeParameterList())) return false;
      if (!getSupertypeList()
          .equals(other.getSupertypeList())) return false;
      if (!getSupertypeIdList()
          .equals(other.getSupertypeIdList())) return false;
      if (!getNestedClassNameList()
          .equals(other.getNestedClassNameList())) return false;
      if (!getContextReceiverTypeList()
          .equals(other.getContextReceiverTypeList())) return false;
      if (!getContextReceiverTypeIdList()
          .equals(other.getContextReceiverTypeIdList())) return false;
      if (!getConstructorList()
          .equals(other.getConstructorList())) return false;
      if (!getFunctionList()
          .equals(other.getFunctionList())) return false;
      if (!getPropertyList()
          .equals(other.getPropertyList())) return false;
      if (!getTypeAliasList()
          .equals(other.getTypeAliasList())) return false;
      if (!getEnumEntryList()
          .equals(other.getEnumEntryList())) return false;
      if (!getSealedSubclassFqNameList()
          .equals(other.getSealedSubclassFqNameList())) return false;
      if (hasInlineClassUnderlyingPropertyName() != other.hasInlineClassUnderlyingPropertyName()) return false;
      if (hasInlineClassUnderlyingPropertyName()) {
        if (getInlineClassUnderlyingPropertyName()
            != other.getInlineClassUnderlyingPropertyName()) return false;
      }
      if (hasInlineClassUnderlyingType() != other.hasInlineClassUnderlyingType()) return false;
      if (hasInlineClassUnderlyingType()) {
        if (!getInlineClassUnderlyingType()
            .equals(other.getInlineClassUnderlyingType())) return false;
      }
      if (hasInlineClassUnderlyingTypeId() != other.hasInlineClassUnderlyingTypeId()) return false;
      if (hasInlineClassUnderlyingTypeId()) {
        if (getInlineClassUnderlyingTypeId()
            != other.getInlineClassUnderlyingTypeId()) return false;
      }
      if (!getAnnotationList()
          .equals(other.getAnnotationList())) return false;
      if (hasTypeTable() != other.hasTypeTable()) return false;
      if (hasTypeTable()) {
        if (!getTypeTable()
            .equals(other.getTypeTable())) return false;
      }
      if (!getVersionRequirementList()
          .equals(other.getVersionRequirementList())) return false;
      if (hasVersionRequirementTable() != other.hasVersionRequirementTable()) return false;
      if (hasVersionRequirementTable()) {
        if (!getVersionRequirementTable()
            .equals(other.getVersionRequirementTable())) return false;
      }
      if (!getCompilerPluginDataList()
          .equals(other.getCompilerPluginDataList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      if (!getExtensionFields().equals(other.getExtensionFields()))
        return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasFlags()) {
        hash = (37 * hash) + FLAGS_FIELD_NUMBER;
        hash = (53 * hash) + getFlags();
      }
      if (hasFqName()) {
        hash = (37 * hash) + FQ_NAME_FIELD_NUMBER;
        hash = (53 * hash) + getFqName();
      }
      if (hasCompanionObjectName()) {
        hash = (37 * hash) + COMPANION_OBJECT_NAME_FIELD_NUMBER;
        hash = (53 * hash) + getCompanionObjectName();
      }
      if (getTypeParameterCount() > 0) {
        hash = (37 * hash) + TYPE_PARAMETER_FIELD_NUMBER;
        hash = (53 * hash) + getTypeParameterList().hashCode();
      }
      if (getSupertypeCount() > 0) {
        hash = (37 * hash) + SUPERTYPE_FIELD_NUMBER;
        hash = (53 * hash) + getSupertypeList().hashCode();
      }
      if (getSupertypeIdCount() > 0) {
        hash = (37 * hash) + SUPERTYPE_ID_FIELD_NUMBER;
        hash = (53 * hash) + getSupertypeIdList().hashCode();
      }
      if (getNestedClassNameCount() > 0) {
        hash = (37 * hash) + NESTED_CLASS_NAME_FIELD_NUMBER;
        hash = (53 * hash) + getNestedClassNameList().hashCode();
      }
      if (getContextReceiverTypeCount() > 0) {
        hash = (37 * hash) + CONTEXT_RECEIVER_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + getContextReceiverTypeList().hashCode();
      }
      if (getContextReceiverTypeIdCount() > 0) {
        hash = (37 * hash) + CONTEXT_RECEIVER_TYPE_ID_FIELD_NUMBER;
        hash = (53 * hash) + getContextReceiverTypeIdList().hashCode();
      }
      if (getConstructorCount() > 0) {
        hash = (37 * hash) + CONSTRUCTOR_FIELD_NUMBER;
        hash = (53 * hash) + getConstructorList().hashCode();
      }
      if (getFunctionCount() > 0) {
        hash = (37 * hash) + FUNCTION_FIELD_NUMBER;
        hash = (53 * hash) + getFunctionList().hashCode();
      }
      if (getPropertyCount() > 0) {
        hash = (37 * hash) + PROPERTY_FIELD_NUMBER;
        hash = (53 * hash) + getPropertyList().hashCode();
      }
      if (getTypeAliasCount() > 0) {
        hash = (37 * hash) + TYPE_ALIAS_FIELD_NUMBER;
        hash = (53 * hash) + getTypeAliasList().hashCode();
      }
      if (getEnumEntryCount() > 0) {
        hash = (37 * hash) + ENUM_ENTRY_FIELD_NUMBER;
        hash = (53 * hash) + getEnumEntryList().hashCode();
      }
      if (getSealedSubclassFqNameCount() > 0) {
        hash = (37 * hash) + SEALED_SUBCLASS_FQ_NAME_FIELD_NUMBER;
        hash = (53 * hash) + getSealedSubclassFqNameList().hashCode();
      }
      if (hasInlineClassUnderlyingPropertyName()) {
        hash = (37 * hash) + INLINE_CLASS_UNDERLYING_PROPERTY_NAME_FIELD_NUMBER;
        hash = (53 * hash) + getInlineClassUnderlyingPropertyName();
      }
      if (hasInlineClassUnderlyingType()) {
        hash = (37 * hash) + INLINE_CLASS_UNDERLYING_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + getInlineClassUnderlyingType().hashCode();
      }
      if (hasInlineClassUnderlyingTypeId()) {
        hash = (37 * hash) + INLINE_CLASS_UNDERLYING_TYPE_ID_FIELD_NUMBER;
        hash = (53 * hash) + getInlineClassUnderlyingTypeId();
      }
      if (getAnnotationCount() > 0) {
        hash = (37 * hash) + ANNOTATION_FIELD_NUMBER;
        hash = (53 * hash) + getAnnotationList().hashCode();
      }
      if (hasTypeTable()) {
        hash = (37 * hash) + TYPE_TABLE_FIELD_NUMBER;
        hash = (53 * hash) + getTypeTable().hashCode();
      }
      if (getVersionRequirementCount() > 0) {
        hash = (37 * hash) + VERSION_REQUIREMENT_FIELD_NUMBER;
        hash = (53 * hash) + getVersionRequirementList().hashCode();
      }
      if (hasVersionRequirementTable()) {
        hash = (37 * hash) + VERSION_REQUIREMENT_TABLE_FIELD_NUMBER;
        hash = (53 * hash) + getVersionRequirementTable().hashCode();
      }
      if (getCompilerPluginDataCount() > 0) {
        hash = (37 * hash) + COMPILER_PLUGIN_DATA_FIELD_NUMBER;
        hash = (53 * hash) + getCompilerPluginDataList().hashCode();
      }
      hash = hashFields(hash, getExtensionFields());
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Class parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Class parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Class parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Class parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Class parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Class parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Class parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Class parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Class parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Class parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Class parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Class parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.metadata.ProtoBuf.Class prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.Class}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.ExtendableBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Class, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.Class)
        org.jetbrains.kotlin.metadata.ProtoBuf.ClassOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Class_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Class_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.metadata.ProtoBuf.Class.class, org.jetbrains.kotlin.metadata.ProtoBuf.Class.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.metadata.ProtoBuf.Class.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getTypeParameterFieldBuilder();
          getSupertypeFieldBuilder();
          getContextReceiverTypeFieldBuilder();
          getConstructorFieldBuilder();
          getFunctionFieldBuilder();
          getPropertyFieldBuilder();
          getTypeAliasFieldBuilder();
          getEnumEntryFieldBuilder();
          getInlineClassUnderlyingTypeFieldBuilder();
          getAnnotationFieldBuilder();
          getTypeTableFieldBuilder();
          getVersionRequirementTableFieldBuilder();
          getCompilerPluginDataFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        flags_ = 6;
        fqName_ = 0;
        companionObjectName_ = 0;
        if (typeParameterBuilder_ == null) {
          typeParameter_ = java.util.Collections.emptyList();
        } else {
          typeParameter_ = null;
          typeParameterBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        if (supertypeBuilder_ == null) {
          supertype_ = java.util.Collections.emptyList();
        } else {
          supertype_ = null;
          supertypeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        supertypeId_ = emptyIntList();
        nestedClassName_ = emptyIntList();
        if (contextReceiverTypeBuilder_ == null) {
          contextReceiverType_ = java.util.Collections.emptyList();
        } else {
          contextReceiverType_ = null;
          contextReceiverTypeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000080);
        contextReceiverTypeId_ = emptyIntList();
        if (constructorBuilder_ == null) {
          constructor_ = java.util.Collections.emptyList();
        } else {
          constructor_ = null;
          constructorBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000200);
        if (functionBuilder_ == null) {
          function_ = java.util.Collections.emptyList();
        } else {
          function_ = null;
          functionBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000400);
        if (propertyBuilder_ == null) {
          property_ = java.util.Collections.emptyList();
        } else {
          property_ = null;
          propertyBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000800);
        if (typeAliasBuilder_ == null) {
          typeAlias_ = java.util.Collections.emptyList();
        } else {
          typeAlias_ = null;
          typeAliasBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00001000);
        if (enumEntryBuilder_ == null) {
          enumEntry_ = java.util.Collections.emptyList();
        } else {
          enumEntry_ = null;
          enumEntryBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00002000);
        sealedSubclassFqName_ = emptyIntList();
        inlineClassUnderlyingPropertyName_ = 0;
        inlineClassUnderlyingType_ = null;
        if (inlineClassUnderlyingTypeBuilder_ != null) {
          inlineClassUnderlyingTypeBuilder_.dispose();
          inlineClassUnderlyingTypeBuilder_ = null;
        }
        inlineClassUnderlyingTypeId_ = 0;
        if (annotationBuilder_ == null) {
          annotation_ = java.util.Collections.emptyList();
        } else {
          annotation_ = null;
          annotationBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00040000);
        typeTable_ = null;
        if (typeTableBuilder_ != null) {
          typeTableBuilder_.dispose();
          typeTableBuilder_ = null;
        }
        versionRequirement_ = emptyIntList();
        versionRequirementTable_ = null;
        if (versionRequirementTableBuilder_ != null) {
          versionRequirementTableBuilder_.dispose();
          versionRequirementTableBuilder_ = null;
        }
        if (compilerPluginDataBuilder_ == null) {
          compilerPluginData_ = java.util.Collections.emptyList();
        } else {
          compilerPluginData_ = null;
          compilerPluginDataBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00400000);
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Class_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Class getDefaultInstanceForType() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.Class.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Class build() {
        org.jetbrains.kotlin.metadata.ProtoBuf.Class result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Class buildPartial() {
        org.jetbrains.kotlin.metadata.ProtoBuf.Class result = new org.jetbrains.kotlin.metadata.ProtoBuf.Class(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(org.jetbrains.kotlin.metadata.ProtoBuf.Class result) {
        if (typeParameterBuilder_ == null) {
          if (((bitField0_ & 0x00000008) != 0)) {
            typeParameter_ = java.util.Collections.unmodifiableList(typeParameter_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.typeParameter_ = typeParameter_;
        } else {
          result.typeParameter_ = typeParameterBuilder_.build();
        }
        if (supertypeBuilder_ == null) {
          if (((bitField0_ & 0x00000010) != 0)) {
            supertype_ = java.util.Collections.unmodifiableList(supertype_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.supertype_ = supertype_;
        } else {
          result.supertype_ = supertypeBuilder_.build();
        }
        if (contextReceiverTypeBuilder_ == null) {
          if (((bitField0_ & 0x00000080) != 0)) {
            contextReceiverType_ = java.util.Collections.unmodifiableList(contextReceiverType_);
            bitField0_ = (bitField0_ & ~0x00000080);
          }
          result.contextReceiverType_ = contextReceiverType_;
        } else {
          result.contextReceiverType_ = contextReceiverTypeBuilder_.build();
        }
        if (constructorBuilder_ == null) {
          if (((bitField0_ & 0x00000200) != 0)) {
            constructor_ = java.util.Collections.unmodifiableList(constructor_);
            bitField0_ = (bitField0_ & ~0x00000200);
          }
          result.constructor_ = constructor_;
        } else {
          result.constructor_ = constructorBuilder_.build();
        }
        if (functionBuilder_ == null) {
          if (((bitField0_ & 0x00000400) != 0)) {
            function_ = java.util.Collections.unmodifiableList(function_);
            bitField0_ = (bitField0_ & ~0x00000400);
          }
          result.function_ = function_;
        } else {
          result.function_ = functionBuilder_.build();
        }
        if (propertyBuilder_ == null) {
          if (((bitField0_ & 0x00000800) != 0)) {
            property_ = java.util.Collections.unmodifiableList(property_);
            bitField0_ = (bitField0_ & ~0x00000800);
          }
          result.property_ = property_;
        } else {
          result.property_ = propertyBuilder_.build();
        }
        if (typeAliasBuilder_ == null) {
          if (((bitField0_ & 0x00001000) != 0)) {
            typeAlias_ = java.util.Collections.unmodifiableList(typeAlias_);
            bitField0_ = (bitField0_ & ~0x00001000);
          }
          result.typeAlias_ = typeAlias_;
        } else {
          result.typeAlias_ = typeAliasBuilder_.build();
        }
        if (enumEntryBuilder_ == null) {
          if (((bitField0_ & 0x00002000) != 0)) {
            enumEntry_ = java.util.Collections.unmodifiableList(enumEntry_);
            bitField0_ = (bitField0_ & ~0x00002000);
          }
          result.enumEntry_ = enumEntry_;
        } else {
          result.enumEntry_ = enumEntryBuilder_.build();
        }
        if (annotationBuilder_ == null) {
          if (((bitField0_ & 0x00040000) != 0)) {
            annotation_ = java.util.Collections.unmodifiableList(annotation_);
            bitField0_ = (bitField0_ & ~0x00040000);
          }
          result.annotation_ = annotation_;
        } else {
          result.annotation_ = annotationBuilder_.build();
        }
        if (compilerPluginDataBuilder_ == null) {
          if (((bitField0_ & 0x00400000) != 0)) {
            compilerPluginData_ = java.util.Collections.unmodifiableList(compilerPluginData_);
            bitField0_ = (bitField0_ & ~0x00400000);
          }
          result.compilerPluginData_ = compilerPluginData_;
        } else {
          result.compilerPluginData_ = compilerPluginDataBuilder_.build();
        }
      }

      private void buildPartial0(org.jetbrains.kotlin.metadata.ProtoBuf.Class result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.flags_ = flags_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.fqName_ = fqName_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.companionObjectName_ = companionObjectName_;
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          supertypeId_.makeImmutable();
          result.supertypeId_ = supertypeId_;
        }
        if (((from_bitField0_ & 0x00000040) != 0)) {
          nestedClassName_.makeImmutable();
          result.nestedClassName_ = nestedClassName_;
        }
        if (((from_bitField0_ & 0x00000100) != 0)) {
          contextReceiverTypeId_.makeImmutable();
          result.contextReceiverTypeId_ = contextReceiverTypeId_;
        }
        if (((from_bitField0_ & 0x00004000) != 0)) {
          sealedSubclassFqName_.makeImmutable();
          result.sealedSubclassFqName_ = sealedSubclassFqName_;
        }
        if (((from_bitField0_ & 0x00008000) != 0)) {
          result.inlineClassUnderlyingPropertyName_ = inlineClassUnderlyingPropertyName_;
          to_bitField0_ |= 0x00000008;
        }
        if (((from_bitField0_ & 0x00010000) != 0)) {
          result.inlineClassUnderlyingType_ = inlineClassUnderlyingTypeBuilder_ == null
              ? inlineClassUnderlyingType_
              : inlineClassUnderlyingTypeBuilder_.build();
          to_bitField0_ |= 0x00000010;
        }
        if (((from_bitField0_ & 0x00020000) != 0)) {
          result.inlineClassUnderlyingTypeId_ = inlineClassUnderlyingTypeId_;
          to_bitField0_ |= 0x00000020;
        }
        if (((from_bitField0_ & 0x00080000) != 0)) {
          result.typeTable_ = typeTableBuilder_ == null
              ? typeTable_
              : typeTableBuilder_.build();
          to_bitField0_ |= 0x00000040;
        }
        if (((from_bitField0_ & 0x00100000) != 0)) {
          versionRequirement_.makeImmutable();
          result.versionRequirement_ = versionRequirement_;
        }
        if (((from_bitField0_ & 0x00200000) != 0)) {
          result.versionRequirementTable_ = versionRequirementTableBuilder_ == null
              ? versionRequirementTable_
              : versionRequirementTableBuilder_.build();
          to_bitField0_ |= 0x00000080;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.metadata.ProtoBuf.Class) {
          return mergeFrom((org.jetbrains.kotlin.metadata.ProtoBuf.Class)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.metadata.ProtoBuf.Class other) {
        if (other == org.jetbrains.kotlin.metadata.ProtoBuf.Class.getDefaultInstance()) return this;
        if (other.hasFlags()) {
          setFlags(other.getFlags());
        }
        if (other.hasFqName()) {
          setFqName(other.getFqName());
        }
        if (other.hasCompanionObjectName()) {
          setCompanionObjectName(other.getCompanionObjectName());
        }
        if (typeParameterBuilder_ == null) {
          if (!other.typeParameter_.isEmpty()) {
            if (typeParameter_.isEmpty()) {
              typeParameter_ = other.typeParameter_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureTypeParameterIsMutable();
              typeParameter_.addAll(other.typeParameter_);
            }
            onChanged();
          }
        } else {
          if (!other.typeParameter_.isEmpty()) {
            if (typeParameterBuilder_.isEmpty()) {
              typeParameterBuilder_.dispose();
              typeParameterBuilder_ = null;
              typeParameter_ = other.typeParameter_;
              bitField0_ = (bitField0_ & ~0x00000008);
              typeParameterBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getTypeParameterFieldBuilder() : null;
            } else {
              typeParameterBuilder_.addAllMessages(other.typeParameter_);
            }
          }
        }
        if (supertypeBuilder_ == null) {
          if (!other.supertype_.isEmpty()) {
            if (supertype_.isEmpty()) {
              supertype_ = other.supertype_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureSupertypeIsMutable();
              supertype_.addAll(other.supertype_);
            }
            onChanged();
          }
        } else {
          if (!other.supertype_.isEmpty()) {
            if (supertypeBuilder_.isEmpty()) {
              supertypeBuilder_.dispose();
              supertypeBuilder_ = null;
              supertype_ = other.supertype_;
              bitField0_ = (bitField0_ & ~0x00000010);
              supertypeBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getSupertypeFieldBuilder() : null;
            } else {
              supertypeBuilder_.addAllMessages(other.supertype_);
            }
          }
        }
        if (!other.supertypeId_.isEmpty()) {
          if (supertypeId_.isEmpty()) {
            supertypeId_ = other.supertypeId_;
            supertypeId_.makeImmutable();
            bitField0_ |= 0x00000020;
          } else {
            ensureSupertypeIdIsMutable();
            supertypeId_.addAll(other.supertypeId_);
          }
          onChanged();
        }
        if (!other.nestedClassName_.isEmpty()) {
          if (nestedClassName_.isEmpty()) {
            nestedClassName_ = other.nestedClassName_;
            nestedClassName_.makeImmutable();
            bitField0_ |= 0x00000040;
          } else {
            ensureNestedClassNameIsMutable();
            nestedClassName_.addAll(other.nestedClassName_);
          }
          onChanged();
        }
        if (contextReceiverTypeBuilder_ == null) {
          if (!other.contextReceiverType_.isEmpty()) {
            if (contextReceiverType_.isEmpty()) {
              contextReceiverType_ = other.contextReceiverType_;
              bitField0_ = (bitField0_ & ~0x00000080);
            } else {
              ensureContextReceiverTypeIsMutable();
              contextReceiverType_.addAll(other.contextReceiverType_);
            }
            onChanged();
          }
        } else {
          if (!other.contextReceiverType_.isEmpty()) {
            if (contextReceiverTypeBuilder_.isEmpty()) {
              contextReceiverTypeBuilder_.dispose();
              contextReceiverTypeBuilder_ = null;
              contextReceiverType_ = other.contextReceiverType_;
              bitField0_ = (bitField0_ & ~0x00000080);
              contextReceiverTypeBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getContextReceiverTypeFieldBuilder() : null;
            } else {
              contextReceiverTypeBuilder_.addAllMessages(other.contextReceiverType_);
            }
          }
        }
        if (!other.contextReceiverTypeId_.isEmpty()) {
          if (contextReceiverTypeId_.isEmpty()) {
            contextReceiverTypeId_ = other.contextReceiverTypeId_;
            contextReceiverTypeId_.makeImmutable();
            bitField0_ |= 0x00000100;
          } else {
            ensureContextReceiverTypeIdIsMutable();
            contextReceiverTypeId_.addAll(other.contextReceiverTypeId_);
          }
          onChanged();
        }
        if (constructorBuilder_ == null) {
          if (!other.constructor_.isEmpty()) {
            if (constructor_.isEmpty()) {
              constructor_ = other.constructor_;
              bitField0_ = (bitField0_ & ~0x00000200);
            } else {
              ensureConstructorIsMutable();
              constructor_.addAll(other.constructor_);
            }
            onChanged();
          }
        } else {
          if (!other.constructor_.isEmpty()) {
            if (constructorBuilder_.isEmpty()) {
              constructorBuilder_.dispose();
              constructorBuilder_ = null;
              constructor_ = other.constructor_;
              bitField0_ = (bitField0_ & ~0x00000200);
              constructorBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getConstructorFieldBuilder() : null;
            } else {
              constructorBuilder_.addAllMessages(other.constructor_);
            }
          }
        }
        if (functionBuilder_ == null) {
          if (!other.function_.isEmpty()) {
            if (function_.isEmpty()) {
              function_ = other.function_;
              bitField0_ = (bitField0_ & ~0x00000400);
            } else {
              ensureFunctionIsMutable();
              function_.addAll(other.function_);
            }
            onChanged();
          }
        } else {
          if (!other.function_.isEmpty()) {
            if (functionBuilder_.isEmpty()) {
              functionBuilder_.dispose();
              functionBuilder_ = null;
              function_ = other.function_;
              bitField0_ = (bitField0_ & ~0x00000400);
              functionBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getFunctionFieldBuilder() : null;
            } else {
              functionBuilder_.addAllMessages(other.function_);
            }
          }
        }
        if (propertyBuilder_ == null) {
          if (!other.property_.isEmpty()) {
            if (property_.isEmpty()) {
              property_ = other.property_;
              bitField0_ = (bitField0_ & ~0x00000800);
            } else {
              ensurePropertyIsMutable();
              property_.addAll(other.property_);
            }
            onChanged();
          }
        } else {
          if (!other.property_.isEmpty()) {
            if (propertyBuilder_.isEmpty()) {
              propertyBuilder_.dispose();
              propertyBuilder_ = null;
              property_ = other.property_;
              bitField0_ = (bitField0_ & ~0x00000800);
              propertyBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPropertyFieldBuilder() : null;
            } else {
              propertyBuilder_.addAllMessages(other.property_);
            }
          }
        }
        if (typeAliasBuilder_ == null) {
          if (!other.typeAlias_.isEmpty()) {
            if (typeAlias_.isEmpty()) {
              typeAlias_ = other.typeAlias_;
              bitField0_ = (bitField0_ & ~0x00001000);
            } else {
              ensureTypeAliasIsMutable();
              typeAlias_.addAll(other.typeAlias_);
            }
            onChanged();
          }
        } else {
          if (!other.typeAlias_.isEmpty()) {
            if (typeAliasBuilder_.isEmpty()) {
              typeAliasBuilder_.dispose();
              typeAliasBuilder_ = null;
              typeAlias_ = other.typeAlias_;
              bitField0_ = (bitField0_ & ~0x00001000);
              typeAliasBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getTypeAliasFieldBuilder() : null;
            } else {
              typeAliasBuilder_.addAllMessages(other.typeAlias_);
            }
          }
        }
        if (enumEntryBuilder_ == null) {
          if (!other.enumEntry_.isEmpty()) {
            if (enumEntry_.isEmpty()) {
              enumEntry_ = other.enumEntry_;
              bitField0_ = (bitField0_ & ~0x00002000);
            } else {
              ensureEnumEntryIsMutable();
              enumEntry_.addAll(other.enumEntry_);
            }
            onChanged();
          }
        } else {
          if (!other.enumEntry_.isEmpty()) {
            if (enumEntryBuilder_.isEmpty()) {
              enumEntryBuilder_.dispose();
              enumEntryBuilder_ = null;
              enumEntry_ = other.enumEntry_;
              bitField0_ = (bitField0_ & ~0x00002000);
              enumEntryBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getEnumEntryFieldBuilder() : null;
            } else {
              enumEntryBuilder_.addAllMessages(other.enumEntry_);
            }
          }
        }
        if (!other.sealedSubclassFqName_.isEmpty()) {
          if (sealedSubclassFqName_.isEmpty()) {
            sealedSubclassFqName_ = other.sealedSubclassFqName_;
            sealedSubclassFqName_.makeImmutable();
            bitField0_ |= 0x00004000;
          } else {
            ensureSealedSubclassFqNameIsMutable();
            sealedSubclassFqName_.addAll(other.sealedSubclassFqName_);
          }
          onChanged();
        }
        if (other.hasInlineClassUnderlyingPropertyName()) {
          setInlineClassUnderlyingPropertyName(other.getInlineClassUnderlyingPropertyName());
        }
        if (other.hasInlineClassUnderlyingType()) {
          mergeInlineClassUnderlyingType(other.getInlineClassUnderlyingType());
        }
        if (other.hasInlineClassUnderlyingTypeId()) {
          setInlineClassUnderlyingTypeId(other.getInlineClassUnderlyingTypeId());
        }
        if (annotationBuilder_ == null) {
          if (!other.annotation_.isEmpty()) {
            if (annotation_.isEmpty()) {
              annotation_ = other.annotation_;
              bitField0_ = (bitField0_ & ~0x00040000);
            } else {
              ensureAnnotationIsMutable();
              annotation_.addAll(other.annotation_);
            }
            onChanged();
          }
        } else {
          if (!other.annotation_.isEmpty()) {
            if (annotationBuilder_.isEmpty()) {
              annotationBuilder_.dispose();
              annotationBuilder_ = null;
              annotation_ = other.annotation_;
              bitField0_ = (bitField0_ & ~0x00040000);
              annotationBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getAnnotationFieldBuilder() : null;
            } else {
              annotationBuilder_.addAllMessages(other.annotation_);
            }
          }
        }
        if (other.hasTypeTable()) {
          mergeTypeTable(other.getTypeTable());
        }
        if (!other.versionRequirement_.isEmpty()) {
          if (versionRequirement_.isEmpty()) {
            versionRequirement_ = other.versionRequirement_;
            versionRequirement_.makeImmutable();
            bitField0_ |= 0x00100000;
          } else {
            ensureVersionRequirementIsMutable();
            versionRequirement_.addAll(other.versionRequirement_);
          }
          onChanged();
        }
        if (other.hasVersionRequirementTable()) {
          mergeVersionRequirementTable(other.getVersionRequirementTable());
        }
        if (compilerPluginDataBuilder_ == null) {
          if (!other.compilerPluginData_.isEmpty()) {
            if (compilerPluginData_.isEmpty()) {
              compilerPluginData_ = other.compilerPluginData_;
              bitField0_ = (bitField0_ & ~0x00400000);
            } else {
              ensureCompilerPluginDataIsMutable();
              compilerPluginData_.addAll(other.compilerPluginData_);
            }
            onChanged();
          }
        } else {
          if (!other.compilerPluginData_.isEmpty()) {
            if (compilerPluginDataBuilder_.isEmpty()) {
              compilerPluginDataBuilder_.dispose();
              compilerPluginDataBuilder_ = null;
              compilerPluginData_ = other.compilerPluginData_;
              bitField0_ = (bitField0_ & ~0x00400000);
              compilerPluginDataBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCompilerPluginDataFieldBuilder() : null;
            } else {
              compilerPluginDataBuilder_.addAllMessages(other.compilerPluginData_);
            }
          }
        }
        this.mergeExtensionFields(other);
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasFqName()) {
          return false;
        }
        for (int i = 0; i < getTypeParameterCount(); i++) {
          if (!getTypeParameter(i).isInitialized()) {
            return false;
          }
        }
        for (int i = 0; i < getSupertypeCount(); i++) {
          if (!getSupertype(i).isInitialized()) {
            return false;
          }
        }
        for (int i = 0; i < getContextReceiverTypeCount(); i++) {
          if (!getContextReceiverType(i).isInitialized()) {
            return false;
          }
        }
        for (int i = 0; i < getConstructorCount(); i++) {
          if (!getConstructor(i).isInitialized()) {
            return false;
          }
        }
        for (int i = 0; i < getFunctionCount(); i++) {
          if (!getFunction(i).isInitialized()) {
            return false;
          }
        }
        for (int i = 0; i < getPropertyCount(); i++) {
          if (!getProperty(i).isInitialized()) {
            return false;
          }
        }
        for (int i = 0; i < getTypeAliasCount(); i++) {
          if (!getTypeAlias(i).isInitialized()) {
            return false;
          }
        }
        for (int i = 0; i < getEnumEntryCount(); i++) {
          if (!getEnumEntry(i).isInitialized()) {
            return false;
          }
        }
        if (hasInlineClassUnderlyingType()) {
          if (!getInlineClassUnderlyingType().isInitialized()) {
            return false;
          }
        }
        for (int i = 0; i < getAnnotationCount(); i++) {
          if (!getAnnotation(i).isInitialized()) {
            return false;
          }
        }
        if (hasTypeTable()) {
          if (!getTypeTable().isInitialized()) {
            return false;
          }
        }
        for (int i = 0; i < getCompilerPluginDataCount(); i++) {
          if (!getCompilerPluginData(i).isInitialized()) {
            return false;
          }
        }
        if (!extensionsAreInitialized()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                flags_ = input.readInt32();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 16: {
                int v = input.readInt32();
                ensureSupertypeIdIsMutable();
                supertypeId_.addInt(v);
                break;
              } // case 16
              case 18: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureSupertypeIdIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  supertypeId_.addInt(input.readInt32());
                }
                input.popLimit(limit);
                break;
              } // case 18
              case 24: {
                fqName_ = input.readInt32();
                bitField0_ |= 0x00000002;
                break;
              } // case 24
              case 32: {
                companionObjectName_ = input.readInt32();
                bitField0_ |= 0x00000004;
                break;
              } // case 32
              case 42: {
                org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter m =
                    input.readMessage(
                        org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.parser(),
                        extensionRegistry);
                if (typeParameterBuilder_ == null) {
                  ensureTypeParameterIsMutable();
                  typeParameter_.add(m);
                } else {
                  typeParameterBuilder_.addMessage(m);
                }
                break;
              } // case 42
              case 50: {
                org.jetbrains.kotlin.metadata.ProtoBuf.Type m =
                    input.readMessage(
                        org.jetbrains.kotlin.metadata.ProtoBuf.Type.parser(),
                        extensionRegistry);
                if (supertypeBuilder_ == null) {
                  ensureSupertypeIsMutable();
                  supertype_.add(m);
                } else {
                  supertypeBuilder_.addMessage(m);
                }
                break;
              } // case 50
              case 56: {
                int v = input.readInt32();
                ensureNestedClassNameIsMutable();
                nestedClassName_.addInt(v);
                break;
              } // case 56
              case 58: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureNestedClassNameIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  nestedClassName_.addInt(input.readInt32());
                }
                input.popLimit(limit);
                break;
              } // case 58
              case 66: {
                org.jetbrains.kotlin.metadata.ProtoBuf.Constructor m =
                    input.readMessage(
                        org.jetbrains.kotlin.metadata.ProtoBuf.Constructor.parser(),
                        extensionRegistry);
                if (constructorBuilder_ == null) {
                  ensureConstructorIsMutable();
                  constructor_.add(m);
                } else {
                  constructorBuilder_.addMessage(m);
                }
                break;
              } // case 66
              case 74: {
                org.jetbrains.kotlin.metadata.ProtoBuf.Function m =
                    input.readMessage(
                        org.jetbrains.kotlin.metadata.ProtoBuf.Function.parser(),
                        extensionRegistry);
                if (functionBuilder_ == null) {
                  ensureFunctionIsMutable();
                  function_.add(m);
                } else {
                  functionBuilder_.addMessage(m);
                }
                break;
              } // case 74
              case 82: {
                org.jetbrains.kotlin.metadata.ProtoBuf.Property m =
                    input.readMessage(
                        org.jetbrains.kotlin.metadata.ProtoBuf.Property.parser(),
                        extensionRegistry);
                if (propertyBuilder_ == null) {
                  ensurePropertyIsMutable();
                  property_.add(m);
                } else {
                  propertyBuilder_.addMessage(m);
                }
                break;
              } // case 82
              case 90: {
                org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias m =
                    input.readMessage(
                        org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias.parser(),
                        extensionRegistry);
                if (typeAliasBuilder_ == null) {
                  ensureTypeAliasIsMutable();
                  typeAlias_.add(m);
                } else {
                  typeAliasBuilder_.addMessage(m);
                }
                break;
              } // case 90
              case 106: {
                org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry m =
                    input.readMessage(
                        org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry.parser(),
                        extensionRegistry);
                if (enumEntryBuilder_ == null) {
                  ensureEnumEntryIsMutable();
                  enumEntry_.add(m);
                } else {
                  enumEntryBuilder_.addMessage(m);
                }
                break;
              } // case 106
              case 128: {
                int v = input.readInt32();
                ensureSealedSubclassFqNameIsMutable();
                sealedSubclassFqName_.addInt(v);
                break;
              } // case 128
              case 130: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureSealedSubclassFqNameIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  sealedSubclassFqName_.addInt(input.readInt32());
                }
                input.popLimit(limit);
                break;
              } // case 130
              case 136: {
                inlineClassUnderlyingPropertyName_ = input.readInt32();
                bitField0_ |= 0x00008000;
                break;
              } // case 136
              case 146: {
                input.readMessage(
                    getInlineClassUnderlyingTypeFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00010000;
                break;
              } // case 146
              case 152: {
                inlineClassUnderlyingTypeId_ = input.readInt32();
                bitField0_ |= 0x00020000;
                break;
              } // case 152
              case 162: {
                org.jetbrains.kotlin.metadata.ProtoBuf.Type m =
                    input.readMessage(
                        org.jetbrains.kotlin.metadata.ProtoBuf.Type.parser(),
                        extensionRegistry);
                if (contextReceiverTypeBuilder_ == null) {
                  ensureContextReceiverTypeIsMutable();
                  contextReceiverType_.add(m);
                } else {
                  contextReceiverTypeBuilder_.addMessage(m);
                }
                break;
              } // case 162
              case 168: {
                int v = input.readInt32();
                ensureContextReceiverTypeIdIsMutable();
                contextReceiverTypeId_.addInt(v);
                break;
              } // case 168
              case 170: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureContextReceiverTypeIdIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  contextReceiverTypeId_.addInt(input.readInt32());
                }
                input.popLimit(limit);
                break;
              } // case 170
              case 202: {
                org.jetbrains.kotlin.metadata.ProtoBuf.Annotation m =
                    input.readMessage(
                        org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.parser(),
                        extensionRegistry);
                if (annotationBuilder_ == null) {
                  ensureAnnotationIsMutable();
                  annotation_.add(m);
                } else {
                  annotationBuilder_.addMessage(m);
                }
                break;
              } // case 202
              case 242: {
                input.readMessage(
                    getTypeTableFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00080000;
                break;
              } // case 242
              case 248: {
                int v = input.readInt32();
                ensureVersionRequirementIsMutable();
                versionRequirement_.addInt(v);
                break;
              } // case 248
              case 250: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureVersionRequirementIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  versionRequirement_.addInt(input.readInt32());
                }
                input.popLimit(limit);
                break;
              } // case 250
              case 258: {
                input.readMessage(
                    getVersionRequirementTableFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00200000;
                break;
              } // case 258
              case 266: {
                org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData m =
                    input.readMessage(
                        org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.parser(),
                        extensionRegistry);
                if (compilerPluginDataBuilder_ == null) {
                  ensureCompilerPluginDataIsMutable();
                  compilerPluginData_.add(m);
                } else {
                  compilerPluginDataBuilder_.addMessage(m);
                }
                break;
              } // case 266
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int flags_ = 6;
      /**
       * <pre>
       *
       * hasAnnotations
       * Visibility
       * Modality
       * ClassKind
       * isInner
       * isData
       * isExternal
       * isExpect
       * isInline
       * isFun
       * hasEnumEntries
       * </pre>
       *
       * <code>int32 flags = 1 [default = 6];</code>
       * @return Whether the flags field is set.
       */
      @java.lang.Override
      public boolean hasFlags() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       *
       * hasAnnotations
       * Visibility
       * Modality
       * ClassKind
       * isInner
       * isData
       * isExternal
       * isExpect
       * isInline
       * isFun
       * hasEnumEntries
       * </pre>
       *
       * <code>int32 flags = 1 [default = 6];</code>
       * @return The flags.
       */
      @java.lang.Override
      public int getFlags() {
        return flags_;
      }
      /**
       * <pre>
       *
       * hasAnnotations
       * Visibility
       * Modality
       * ClassKind
       * isInner
       * isData
       * isExternal
       * isExpect
       * isInline
       * isFun
       * hasEnumEntries
       * </pre>
       *
       * <code>int32 flags = 1 [default = 6];</code>
       * @param value The flags to set.
       * @return This builder for chaining.
       */
      public Builder setFlags(int value) {

        flags_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *
       * hasAnnotations
       * Visibility
       * Modality
       * ClassKind
       * isInner
       * isData
       * isExternal
       * isExpect
       * isInline
       * isFun
       * hasEnumEntries
       * </pre>
       *
       * <code>int32 flags = 1 [default = 6];</code>
       * @return This builder for chaining.
       */
      public Builder clearFlags() {
        bitField0_ = (bitField0_ & ~0x00000001);
        flags_ = 6;
        onChanged();
        return this;
      }

      private int fqName_ ;
      /**
       * <code>int32 fq_name = 3 [features = { ... }</code>
       * @return Whether the fqName field is set.
       */
      @java.lang.Override
      public boolean hasFqName() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>int32 fq_name = 3 [features = { ... }</code>
       * @return The fqName.
       */
      @java.lang.Override
      public int getFqName() {
        return fqName_;
      }
      /**
       * <code>int32 fq_name = 3 [features = { ... }</code>
       * @param value The fqName to set.
       * @return This builder for chaining.
       */
      public Builder setFqName(int value) {

        fqName_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>int32 fq_name = 3 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearFqName() {
        bitField0_ = (bitField0_ & ~0x00000002);
        fqName_ = 0;
        onChanged();
        return this;
      }

      private int companionObjectName_ ;
      /**
       * <code>int32 companion_object_name = 4 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
       * @return Whether the companionObjectName field is set.
       */
      @java.lang.Override
      public boolean hasCompanionObjectName() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>int32 companion_object_name = 4 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
       * @return The companionObjectName.
       */
      @java.lang.Override
      public int getCompanionObjectName() {
        return companionObjectName_;
      }
      /**
       * <code>int32 companion_object_name = 4 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
       * @param value The companionObjectName to set.
       * @return This builder for chaining.
       */
      public Builder setCompanionObjectName(int value) {

        companionObjectName_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>int32 companion_object_name = 4 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearCompanionObjectName() {
        bitField0_ = (bitField0_ & ~0x00000004);
        companionObjectName_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter> typeParameter_ =
        java.util.Collections.emptyList();
      private void ensureTypeParameterIsMutable() {
        if (!((bitField0_ & 0x00000008) != 0)) {
          typeParameter_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter>(typeParameter_);
          bitField0_ |= 0x00000008;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter, org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameterOrBuilder> typeParameterBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter> getTypeParameterList() {
        if (typeParameterBuilder_ == null) {
          return java.util.Collections.unmodifiableList(typeParameter_);
        } else {
          return typeParameterBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
       */
      public int getTypeParameterCount() {
        if (typeParameterBuilder_ == null) {
          return typeParameter_.size();
        } else {
          return typeParameterBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter getTypeParameter(int index) {
        if (typeParameterBuilder_ == null) {
          return typeParameter_.get(index);
        } else {
          return typeParameterBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
       */
      public Builder setTypeParameter(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter value) {
        if (typeParameterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTypeParameterIsMutable();
          typeParameter_.set(index, value);
          onChanged();
        } else {
          typeParameterBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
       */
      public Builder setTypeParameter(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.Builder builderForValue) {
        if (typeParameterBuilder_ == null) {
          ensureTypeParameterIsMutable();
          typeParameter_.set(index, builderForValue.build());
          onChanged();
        } else {
          typeParameterBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
       */
      public Builder addTypeParameter(org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter value) {
        if (typeParameterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTypeParameterIsMutable();
          typeParameter_.add(value);
          onChanged();
        } else {
          typeParameterBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
       */
      public Builder addTypeParameter(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter value) {
        if (typeParameterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTypeParameterIsMutable();
          typeParameter_.add(index, value);
          onChanged();
        } else {
          typeParameterBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
       */
      public Builder addTypeParameter(
          org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.Builder builderForValue) {
        if (typeParameterBuilder_ == null) {
          ensureTypeParameterIsMutable();
          typeParameter_.add(builderForValue.build());
          onChanged();
        } else {
          typeParameterBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
       */
      public Builder addTypeParameter(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.Builder builderForValue) {
        if (typeParameterBuilder_ == null) {
          ensureTypeParameterIsMutable();
          typeParameter_.add(index, builderForValue.build());
          onChanged();
        } else {
          typeParameterBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
       */
      public Builder addAllTypeParameter(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter> values) {
        if (typeParameterBuilder_ == null) {
          ensureTypeParameterIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, typeParameter_);
          onChanged();
        } else {
          typeParameterBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
       */
      public Builder clearTypeParameter() {
        if (typeParameterBuilder_ == null) {
          typeParameter_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          typeParameterBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
       */
      public Builder removeTypeParameter(int index) {
        if (typeParameterBuilder_ == null) {
          ensureTypeParameterIsMutable();
          typeParameter_.remove(index);
          onChanged();
        } else {
          typeParameterBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.Builder getTypeParameterBuilder(
          int index) {
        return getTypeParameterFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameterOrBuilder getTypeParameterOrBuilder(
          int index) {
        if (typeParameterBuilder_ == null) {
          return typeParameter_.get(index);  } else {
          return typeParameterBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameterOrBuilder> 
           getTypeParameterOrBuilderList() {
        if (typeParameterBuilder_ != null) {
          return typeParameterBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(typeParameter_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.Builder addTypeParameterBuilder() {
        return getTypeParameterFieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.Builder addTypeParameterBuilder(
          int index) {
        return getTypeParameterFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.Builder> 
           getTypeParameterBuilderList() {
        return getTypeParameterFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter, org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameterOrBuilder> 
          getTypeParameterFieldBuilder() {
        if (typeParameterBuilder_ == null) {
          typeParameterBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter, org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameterOrBuilder>(
                  typeParameter_,
                  ((bitField0_ & 0x00000008) != 0),
                  getParentForChildren(),
                  isClean());
          typeParameter_ = null;
        }
        return typeParameterBuilder_;
      }

      private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Type> supertype_ =
        java.util.Collections.emptyList();
      private void ensureSupertypeIsMutable() {
        if (!((bitField0_ & 0x00000010) != 0)) {
          supertype_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.ProtoBuf.Type>(supertype_);
          bitField0_ |= 0x00000010;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Type, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder> supertypeBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Type> getSupertypeList() {
        if (supertypeBuilder_ == null) {
          return java.util.Collections.unmodifiableList(supertype_);
        } else {
          return supertypeBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
       */
      public int getSupertypeCount() {
        if (supertypeBuilder_ == null) {
          return supertype_.size();
        } else {
          return supertypeBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type getSupertype(int index) {
        if (supertypeBuilder_ == null) {
          return supertype_.get(index);
        } else {
          return supertypeBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
       */
      public Builder setSupertype(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        if (supertypeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSupertypeIsMutable();
          supertype_.set(index, value);
          onChanged();
        } else {
          supertypeBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
       */
      public Builder setSupertype(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder builderForValue) {
        if (supertypeBuilder_ == null) {
          ensureSupertypeIsMutable();
          supertype_.set(index, builderForValue.build());
          onChanged();
        } else {
          supertypeBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
       */
      public Builder addSupertype(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        if (supertypeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSupertypeIsMutable();
          supertype_.add(value);
          onChanged();
        } else {
          supertypeBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
       */
      public Builder addSupertype(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        if (supertypeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSupertypeIsMutable();
          supertype_.add(index, value);
          onChanged();
        } else {
          supertypeBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
       */
      public Builder addSupertype(
          org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder builderForValue) {
        if (supertypeBuilder_ == null) {
          ensureSupertypeIsMutable();
          supertype_.add(builderForValue.build());
          onChanged();
        } else {
          supertypeBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
       */
      public Builder addSupertype(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder builderForValue) {
        if (supertypeBuilder_ == null) {
          ensureSupertypeIsMutable();
          supertype_.add(index, builderForValue.build());
          onChanged();
        } else {
          supertypeBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
       */
      public Builder addAllSupertype(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Type> values) {
        if (supertypeBuilder_ == null) {
          ensureSupertypeIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, supertype_);
          onChanged();
        } else {
          supertypeBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
       */
      public Builder clearSupertype() {
        if (supertypeBuilder_ == null) {
          supertype_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          supertypeBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
       */
      public Builder removeSupertype(int index) {
        if (supertypeBuilder_ == null) {
          ensureSupertypeIsMutable();
          supertype_.remove(index);
          onChanged();
        } else {
          supertypeBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder getSupertypeBuilder(
          int index) {
        return getSupertypeFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder getSupertypeOrBuilder(
          int index) {
        if (supertypeBuilder_ == null) {
          return supertype_.get(index);  } else {
          return supertypeBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder> 
           getSupertypeOrBuilderList() {
        if (supertypeBuilder_ != null) {
          return supertypeBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(supertype_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder addSupertypeBuilder() {
        return getSupertypeFieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder addSupertypeBuilder(
          int index) {
        return getSupertypeFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder> 
           getSupertypeBuilderList() {
        return getSupertypeFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Type, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder> 
          getSupertypeFieldBuilder() {
        if (supertypeBuilder_ == null) {
          supertypeBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.ProtoBuf.Type, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder>(
                  supertype_,
                  ((bitField0_ & 0x00000010) != 0),
                  getParentForChildren(),
                  isClean());
          supertype_ = null;
        }
        return supertypeBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.Internal.IntList supertypeId_ = emptyIntList();
      private void ensureSupertypeIdIsMutable() {
        if (!supertypeId_.isModifiable()) {
          supertypeId_ = makeMutableCopy(supertypeId_);
        }
        bitField0_ |= 0x00000020;
      }
      /**
       * <code>repeated int32 supertype_id = 2 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return A list containing the supertypeId.
       */
      public java.util.List<java.lang.Integer>
          getSupertypeIdList() {
        supertypeId_.makeImmutable();
        return supertypeId_;
      }
      /**
       * <code>repeated int32 supertype_id = 2 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return The count of supertypeId.
       */
      public int getSupertypeIdCount() {
        return supertypeId_.size();
      }
      /**
       * <code>repeated int32 supertype_id = 2 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @param index The index of the element to return.
       * @return The supertypeId at the given index.
       */
      public int getSupertypeId(int index) {
        return supertypeId_.getInt(index);
      }
      /**
       * <code>repeated int32 supertype_id = 2 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @param index The index to set the value at.
       * @param value The supertypeId to set.
       * @return This builder for chaining.
       */
      public Builder setSupertypeId(
          int index, int value) {

        ensureSupertypeIdIsMutable();
        supertypeId_.setInt(index, value);
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 supertype_id = 2 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @param value The supertypeId to add.
       * @return This builder for chaining.
       */
      public Builder addSupertypeId(int value) {

        ensureSupertypeIdIsMutable();
        supertypeId_.addInt(value);
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 supertype_id = 2 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @param values The supertypeId to add.
       * @return This builder for chaining.
       */
      public Builder addAllSupertypeId(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureSupertypeIdIsMutable();
        org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
            values, supertypeId_);
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 supertype_id = 2 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearSupertypeId() {
        supertypeId_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.protobuf.Internal.IntList nestedClassName_ = emptyIntList();
      private void ensureNestedClassNameIsMutable() {
        if (!nestedClassName_.isModifiable()) {
          nestedClassName_ = makeMutableCopy(nestedClassName_);
        }
        bitField0_ |= 0x00000040;
      }
      /**
       * <code>repeated int32 nested_class_name = 7 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
       * @return A list containing the nestedClassName.
       */
      public java.util.List<java.lang.Integer>
          getNestedClassNameList() {
        nestedClassName_.makeImmutable();
        return nestedClassName_;
      }
      /**
       * <code>repeated int32 nested_class_name = 7 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
       * @return The count of nestedClassName.
       */
      public int getNestedClassNameCount() {
        return nestedClassName_.size();
      }
      /**
       * <code>repeated int32 nested_class_name = 7 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
       * @param index The index of the element to return.
       * @return The nestedClassName at the given index.
       */
      public int getNestedClassName(int index) {
        return nestedClassName_.getInt(index);
      }
      /**
       * <code>repeated int32 nested_class_name = 7 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
       * @param index The index to set the value at.
       * @param value The nestedClassName to set.
       * @return This builder for chaining.
       */
      public Builder setNestedClassName(
          int index, int value) {

        ensureNestedClassNameIsMutable();
        nestedClassName_.setInt(index, value);
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 nested_class_name = 7 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
       * @param value The nestedClassName to add.
       * @return This builder for chaining.
       */
      public Builder addNestedClassName(int value) {

        ensureNestedClassNameIsMutable();
        nestedClassName_.addInt(value);
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 nested_class_name = 7 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
       * @param values The nestedClassName to add.
       * @return This builder for chaining.
       */
      public Builder addAllNestedClassName(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureNestedClassNameIsMutable();
        org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
            values, nestedClassName_);
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 nested_class_name = 7 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearNestedClassName() {
        nestedClassName_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }

      private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Type> contextReceiverType_ =
        java.util.Collections.emptyList();
      private void ensureContextReceiverTypeIsMutable() {
        if (!((bitField0_ & 0x00000080) != 0)) {
          contextReceiverType_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.ProtoBuf.Type>(contextReceiverType_);
          bitField0_ |= 0x00000080;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Type, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder> contextReceiverTypeBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 20;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Type> getContextReceiverTypeList() {
        if (contextReceiverTypeBuilder_ == null) {
          return java.util.Collections.unmodifiableList(contextReceiverType_);
        } else {
          return contextReceiverTypeBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 20;</code>
       */
      public int getContextReceiverTypeCount() {
        if (contextReceiverTypeBuilder_ == null) {
          return contextReceiverType_.size();
        } else {
          return contextReceiverTypeBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 20;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type getContextReceiverType(int index) {
        if (contextReceiverTypeBuilder_ == null) {
          return contextReceiverType_.get(index);
        } else {
          return contextReceiverTypeBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 20;</code>
       */
      public Builder setContextReceiverType(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        if (contextReceiverTypeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureContextReceiverTypeIsMutable();
          contextReceiverType_.set(index, value);
          onChanged();
        } else {
          contextReceiverTypeBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 20;</code>
       */
      public Builder setContextReceiverType(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder builderForValue) {
        if (contextReceiverTypeBuilder_ == null) {
          ensureContextReceiverTypeIsMutable();
          contextReceiverType_.set(index, builderForValue.build());
          onChanged();
        } else {
          contextReceiverTypeBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 20;</code>
       */
      public Builder addContextReceiverType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        if (contextReceiverTypeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureContextReceiverTypeIsMutable();
          contextReceiverType_.add(value);
          onChanged();
        } else {
          contextReceiverTypeBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 20;</code>
       */
      public Builder addContextReceiverType(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        if (contextReceiverTypeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureContextReceiverTypeIsMutable();
          contextReceiverType_.add(index, value);
          onChanged();
        } else {
          contextReceiverTypeBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 20;</code>
       */
      public Builder addContextReceiverType(
          org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder builderForValue) {
        if (contextReceiverTypeBuilder_ == null) {
          ensureContextReceiverTypeIsMutable();
          contextReceiverType_.add(builderForValue.build());
          onChanged();
        } else {
          contextReceiverTypeBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 20;</code>
       */
      public Builder addContextReceiverType(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder builderForValue) {
        if (contextReceiverTypeBuilder_ == null) {
          ensureContextReceiverTypeIsMutable();
          contextReceiverType_.add(index, builderForValue.build());
          onChanged();
        } else {
          contextReceiverTypeBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 20;</code>
       */
      public Builder addAllContextReceiverType(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Type> values) {
        if (contextReceiverTypeBuilder_ == null) {
          ensureContextReceiverTypeIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, contextReceiverType_);
          onChanged();
        } else {
          contextReceiverTypeBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 20;</code>
       */
      public Builder clearContextReceiverType() {
        if (contextReceiverTypeBuilder_ == null) {
          contextReceiverType_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000080);
          onChanged();
        } else {
          contextReceiverTypeBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 20;</code>
       */
      public Builder removeContextReceiverType(int index) {
        if (contextReceiverTypeBuilder_ == null) {
          ensureContextReceiverTypeIsMutable();
          contextReceiverType_.remove(index);
          onChanged();
        } else {
          contextReceiverTypeBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 20;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder getContextReceiverTypeBuilder(
          int index) {
        return getContextReceiverTypeFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 20;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder getContextReceiverTypeOrBuilder(
          int index) {
        if (contextReceiverTypeBuilder_ == null) {
          return contextReceiverType_.get(index);  } else {
          return contextReceiverTypeBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 20;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder> 
           getContextReceiverTypeOrBuilderList() {
        if (contextReceiverTypeBuilder_ != null) {
          return contextReceiverTypeBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(contextReceiverType_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 20;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder addContextReceiverTypeBuilder() {
        return getContextReceiverTypeFieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 20;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder addContextReceiverTypeBuilder(
          int index) {
        return getContextReceiverTypeFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 20;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder> 
           getContextReceiverTypeBuilderList() {
        return getContextReceiverTypeFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Type, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder> 
          getContextReceiverTypeFieldBuilder() {
        if (contextReceiverTypeBuilder_ == null) {
          contextReceiverTypeBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.ProtoBuf.Type, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder>(
                  contextReceiverType_,
                  ((bitField0_ & 0x00000080) != 0),
                  getParentForChildren(),
                  isClean());
          contextReceiverType_ = null;
        }
        return contextReceiverTypeBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.Internal.IntList contextReceiverTypeId_ = emptyIntList();
      private void ensureContextReceiverTypeIdIsMutable() {
        if (!contextReceiverTypeId_.isModifiable()) {
          contextReceiverTypeId_ = makeMutableCopy(contextReceiverTypeId_);
        }
        bitField0_ |= 0x00000100;
      }
      /**
       * <code>repeated int32 context_receiver_type_id = 21 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return A list containing the contextReceiverTypeId.
       */
      public java.util.List<java.lang.Integer>
          getContextReceiverTypeIdList() {
        contextReceiverTypeId_.makeImmutable();
        return contextReceiverTypeId_;
      }
      /**
       * <code>repeated int32 context_receiver_type_id = 21 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return The count of contextReceiverTypeId.
       */
      public int getContextReceiverTypeIdCount() {
        return contextReceiverTypeId_.size();
      }
      /**
       * <code>repeated int32 context_receiver_type_id = 21 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @param index The index of the element to return.
       * @return The contextReceiverTypeId at the given index.
       */
      public int getContextReceiverTypeId(int index) {
        return contextReceiverTypeId_.getInt(index);
      }
      /**
       * <code>repeated int32 context_receiver_type_id = 21 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @param index The index to set the value at.
       * @param value The contextReceiverTypeId to set.
       * @return This builder for chaining.
       */
      public Builder setContextReceiverTypeId(
          int index, int value) {

        ensureContextReceiverTypeIdIsMutable();
        contextReceiverTypeId_.setInt(index, value);
        bitField0_ |= 0x00000100;
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 context_receiver_type_id = 21 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @param value The contextReceiverTypeId to add.
       * @return This builder for chaining.
       */
      public Builder addContextReceiverTypeId(int value) {

        ensureContextReceiverTypeIdIsMutable();
        contextReceiverTypeId_.addInt(value);
        bitField0_ |= 0x00000100;
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 context_receiver_type_id = 21 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @param values The contextReceiverTypeId to add.
       * @return This builder for chaining.
       */
      public Builder addAllContextReceiverTypeId(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureContextReceiverTypeIdIsMutable();
        org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
            values, contextReceiverTypeId_);
        bitField0_ |= 0x00000100;
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 context_receiver_type_id = 21 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearContextReceiverTypeId() {
        contextReceiverTypeId_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000100);
        onChanged();
        return this;
      }

      private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Constructor> constructor_ =
        java.util.Collections.emptyList();
      private void ensureConstructorIsMutable() {
        if (!((bitField0_ & 0x00000200) != 0)) {
          constructor_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.ProtoBuf.Constructor>(constructor_);
          bitField0_ |= 0x00000200;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Constructor, org.jetbrains.kotlin.metadata.ProtoBuf.Constructor.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.ConstructorOrBuilder> constructorBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Constructor> getConstructorList() {
        if (constructorBuilder_ == null) {
          return java.util.Collections.unmodifiableList(constructor_);
        } else {
          return constructorBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
       */
      public int getConstructorCount() {
        if (constructorBuilder_ == null) {
          return constructor_.size();
        } else {
          return constructorBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Constructor getConstructor(int index) {
        if (constructorBuilder_ == null) {
          return constructor_.get(index);
        } else {
          return constructorBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
       */
      public Builder setConstructor(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Constructor value) {
        if (constructorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureConstructorIsMutable();
          constructor_.set(index, value);
          onChanged();
        } else {
          constructorBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
       */
      public Builder setConstructor(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Constructor.Builder builderForValue) {
        if (constructorBuilder_ == null) {
          ensureConstructorIsMutable();
          constructor_.set(index, builderForValue.build());
          onChanged();
        } else {
          constructorBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
       */
      public Builder addConstructor(org.jetbrains.kotlin.metadata.ProtoBuf.Constructor value) {
        if (constructorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureConstructorIsMutable();
          constructor_.add(value);
          onChanged();
        } else {
          constructorBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
       */
      public Builder addConstructor(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Constructor value) {
        if (constructorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureConstructorIsMutable();
          constructor_.add(index, value);
          onChanged();
        } else {
          constructorBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
       */
      public Builder addConstructor(
          org.jetbrains.kotlin.metadata.ProtoBuf.Constructor.Builder builderForValue) {
        if (constructorBuilder_ == null) {
          ensureConstructorIsMutable();
          constructor_.add(builderForValue.build());
          onChanged();
        } else {
          constructorBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
       */
      public Builder addConstructor(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Constructor.Builder builderForValue) {
        if (constructorBuilder_ == null) {
          ensureConstructorIsMutable();
          constructor_.add(index, builderForValue.build());
          onChanged();
        } else {
          constructorBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
       */
      public Builder addAllConstructor(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Constructor> values) {
        if (constructorBuilder_ == null) {
          ensureConstructorIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, constructor_);
          onChanged();
        } else {
          constructorBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
       */
      public Builder clearConstructor() {
        if (constructorBuilder_ == null) {
          constructor_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000200);
          onChanged();
        } else {
          constructorBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
       */
      public Builder removeConstructor(int index) {
        if (constructorBuilder_ == null) {
          ensureConstructorIsMutable();
          constructor_.remove(index);
          onChanged();
        } else {
          constructorBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Constructor.Builder getConstructorBuilder(
          int index) {
        return getConstructorFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.ConstructorOrBuilder getConstructorOrBuilder(
          int index) {
        if (constructorBuilder_ == null) {
          return constructor_.get(index);  } else {
          return constructorBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.ConstructorOrBuilder> 
           getConstructorOrBuilderList() {
        if (constructorBuilder_ != null) {
          return constructorBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(constructor_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Constructor.Builder addConstructorBuilder() {
        return getConstructorFieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.ProtoBuf.Constructor.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Constructor.Builder addConstructorBuilder(
          int index) {
        return getConstructorFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.ProtoBuf.Constructor.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Constructor.Builder> 
           getConstructorBuilderList() {
        return getConstructorFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Constructor, org.jetbrains.kotlin.metadata.ProtoBuf.Constructor.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.ConstructorOrBuilder> 
          getConstructorFieldBuilder() {
        if (constructorBuilder_ == null) {
          constructorBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.ProtoBuf.Constructor, org.jetbrains.kotlin.metadata.ProtoBuf.Constructor.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.ConstructorOrBuilder>(
                  constructor_,
                  ((bitField0_ & 0x00000200) != 0),
                  getParentForChildren(),
                  isClean());
          constructor_ = null;
        }
        return constructorBuilder_;
      }

      private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Function> function_ =
        java.util.Collections.emptyList();
      private void ensureFunctionIsMutable() {
        if (!((bitField0_ & 0x00000400) != 0)) {
          function_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.ProtoBuf.Function>(function_);
          bitField0_ |= 0x00000400;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Function, org.jetbrains.kotlin.metadata.ProtoBuf.Function.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.FunctionOrBuilder> functionBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Function> getFunctionList() {
        if (functionBuilder_ == null) {
          return java.util.Collections.unmodifiableList(function_);
        } else {
          return functionBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
       */
      public int getFunctionCount() {
        if (functionBuilder_ == null) {
          return function_.size();
        } else {
          return functionBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Function getFunction(int index) {
        if (functionBuilder_ == null) {
          return function_.get(index);
        } else {
          return functionBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
       */
      public Builder setFunction(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Function value) {
        if (functionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFunctionIsMutable();
          function_.set(index, value);
          onChanged();
        } else {
          functionBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
       */
      public Builder setFunction(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Function.Builder builderForValue) {
        if (functionBuilder_ == null) {
          ensureFunctionIsMutable();
          function_.set(index, builderForValue.build());
          onChanged();
        } else {
          functionBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
       */
      public Builder addFunction(org.jetbrains.kotlin.metadata.ProtoBuf.Function value) {
        if (functionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFunctionIsMutable();
          function_.add(value);
          onChanged();
        } else {
          functionBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
       */
      public Builder addFunction(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Function value) {
        if (functionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFunctionIsMutable();
          function_.add(index, value);
          onChanged();
        } else {
          functionBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
       */
      public Builder addFunction(
          org.jetbrains.kotlin.metadata.ProtoBuf.Function.Builder builderForValue) {
        if (functionBuilder_ == null) {
          ensureFunctionIsMutable();
          function_.add(builderForValue.build());
          onChanged();
        } else {
          functionBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
       */
      public Builder addFunction(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Function.Builder builderForValue) {
        if (functionBuilder_ == null) {
          ensureFunctionIsMutable();
          function_.add(index, builderForValue.build());
          onChanged();
        } else {
          functionBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
       */
      public Builder addAllFunction(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Function> values) {
        if (functionBuilder_ == null) {
          ensureFunctionIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, function_);
          onChanged();
        } else {
          functionBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
       */
      public Builder clearFunction() {
        if (functionBuilder_ == null) {
          function_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000400);
          onChanged();
        } else {
          functionBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
       */
      public Builder removeFunction(int index) {
        if (functionBuilder_ == null) {
          ensureFunctionIsMutable();
          function_.remove(index);
          onChanged();
        } else {
          functionBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Function.Builder getFunctionBuilder(
          int index) {
        return getFunctionFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.FunctionOrBuilder getFunctionOrBuilder(
          int index) {
        if (functionBuilder_ == null) {
          return function_.get(index);  } else {
          return functionBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.FunctionOrBuilder> 
           getFunctionOrBuilderList() {
        if (functionBuilder_ != null) {
          return functionBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(function_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Function.Builder addFunctionBuilder() {
        return getFunctionFieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.ProtoBuf.Function.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Function.Builder addFunctionBuilder(
          int index) {
        return getFunctionFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.ProtoBuf.Function.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Function.Builder> 
           getFunctionBuilderList() {
        return getFunctionFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Function, org.jetbrains.kotlin.metadata.ProtoBuf.Function.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.FunctionOrBuilder> 
          getFunctionFieldBuilder() {
        if (functionBuilder_ == null) {
          functionBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.ProtoBuf.Function, org.jetbrains.kotlin.metadata.ProtoBuf.Function.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.FunctionOrBuilder>(
                  function_,
                  ((bitField0_ & 0x00000400) != 0),
                  getParentForChildren(),
                  isClean());
          function_ = null;
        }
        return functionBuilder_;
      }

      private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Property> property_ =
        java.util.Collections.emptyList();
      private void ensurePropertyIsMutable() {
        if (!((bitField0_ & 0x00000800) != 0)) {
          property_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.ProtoBuf.Property>(property_);
          bitField0_ |= 0x00000800;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Property, org.jetbrains.kotlin.metadata.ProtoBuf.Property.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.PropertyOrBuilder> propertyBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Property> getPropertyList() {
        if (propertyBuilder_ == null) {
          return java.util.Collections.unmodifiableList(property_);
        } else {
          return propertyBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
       */
      public int getPropertyCount() {
        if (propertyBuilder_ == null) {
          return property_.size();
        } else {
          return propertyBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Property getProperty(int index) {
        if (propertyBuilder_ == null) {
          return property_.get(index);
        } else {
          return propertyBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
       */
      public Builder setProperty(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Property value) {
        if (propertyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePropertyIsMutable();
          property_.set(index, value);
          onChanged();
        } else {
          propertyBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
       */
      public Builder setProperty(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Property.Builder builderForValue) {
        if (propertyBuilder_ == null) {
          ensurePropertyIsMutable();
          property_.set(index, builderForValue.build());
          onChanged();
        } else {
          propertyBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
       */
      public Builder addProperty(org.jetbrains.kotlin.metadata.ProtoBuf.Property value) {
        if (propertyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePropertyIsMutable();
          property_.add(value);
          onChanged();
        } else {
          propertyBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
       */
      public Builder addProperty(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Property value) {
        if (propertyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePropertyIsMutable();
          property_.add(index, value);
          onChanged();
        } else {
          propertyBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
       */
      public Builder addProperty(
          org.jetbrains.kotlin.metadata.ProtoBuf.Property.Builder builderForValue) {
        if (propertyBuilder_ == null) {
          ensurePropertyIsMutable();
          property_.add(builderForValue.build());
          onChanged();
        } else {
          propertyBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
       */
      public Builder addProperty(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Property.Builder builderForValue) {
        if (propertyBuilder_ == null) {
          ensurePropertyIsMutable();
          property_.add(index, builderForValue.build());
          onChanged();
        } else {
          propertyBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
       */
      public Builder addAllProperty(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Property> values) {
        if (propertyBuilder_ == null) {
          ensurePropertyIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, property_);
          onChanged();
        } else {
          propertyBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
       */
      public Builder clearProperty() {
        if (propertyBuilder_ == null) {
          property_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000800);
          onChanged();
        } else {
          propertyBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
       */
      public Builder removeProperty(int index) {
        if (propertyBuilder_ == null) {
          ensurePropertyIsMutable();
          property_.remove(index);
          onChanged();
        } else {
          propertyBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Property.Builder getPropertyBuilder(
          int index) {
        return getPropertyFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.PropertyOrBuilder getPropertyOrBuilder(
          int index) {
        if (propertyBuilder_ == null) {
          return property_.get(index);  } else {
          return propertyBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.PropertyOrBuilder> 
           getPropertyOrBuilderList() {
        if (propertyBuilder_ != null) {
          return propertyBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(property_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Property.Builder addPropertyBuilder() {
        return getPropertyFieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.ProtoBuf.Property.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Property.Builder addPropertyBuilder(
          int index) {
        return getPropertyFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.ProtoBuf.Property.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Property.Builder> 
           getPropertyBuilderList() {
        return getPropertyFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Property, org.jetbrains.kotlin.metadata.ProtoBuf.Property.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.PropertyOrBuilder> 
          getPropertyFieldBuilder() {
        if (propertyBuilder_ == null) {
          propertyBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.ProtoBuf.Property, org.jetbrains.kotlin.metadata.ProtoBuf.Property.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.PropertyOrBuilder>(
                  property_,
                  ((bitField0_ & 0x00000800) != 0),
                  getParentForChildren(),
                  isClean());
          property_ = null;
        }
        return propertyBuilder_;
      }

      private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias> typeAlias_ =
        java.util.Collections.emptyList();
      private void ensureTypeAliasIsMutable() {
        if (!((bitField0_ & 0x00001000) != 0)) {
          typeAlias_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias>(typeAlias_);
          bitField0_ |= 0x00001000;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias, org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeAliasOrBuilder> typeAliasBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias> getTypeAliasList() {
        if (typeAliasBuilder_ == null) {
          return java.util.Collections.unmodifiableList(typeAlias_);
        } else {
          return typeAliasBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
       */
      public int getTypeAliasCount() {
        if (typeAliasBuilder_ == null) {
          return typeAlias_.size();
        } else {
          return typeAliasBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias getTypeAlias(int index) {
        if (typeAliasBuilder_ == null) {
          return typeAlias_.get(index);
        } else {
          return typeAliasBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
       */
      public Builder setTypeAlias(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias value) {
        if (typeAliasBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTypeAliasIsMutable();
          typeAlias_.set(index, value);
          onChanged();
        } else {
          typeAliasBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
       */
      public Builder setTypeAlias(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias.Builder builderForValue) {
        if (typeAliasBuilder_ == null) {
          ensureTypeAliasIsMutable();
          typeAlias_.set(index, builderForValue.build());
          onChanged();
        } else {
          typeAliasBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
       */
      public Builder addTypeAlias(org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias value) {
        if (typeAliasBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTypeAliasIsMutable();
          typeAlias_.add(value);
          onChanged();
        } else {
          typeAliasBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
       */
      public Builder addTypeAlias(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias value) {
        if (typeAliasBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTypeAliasIsMutable();
          typeAlias_.add(index, value);
          onChanged();
        } else {
          typeAliasBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
       */
      public Builder addTypeAlias(
          org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias.Builder builderForValue) {
        if (typeAliasBuilder_ == null) {
          ensureTypeAliasIsMutable();
          typeAlias_.add(builderForValue.build());
          onChanged();
        } else {
          typeAliasBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
       */
      public Builder addTypeAlias(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias.Builder builderForValue) {
        if (typeAliasBuilder_ == null) {
          ensureTypeAliasIsMutable();
          typeAlias_.add(index, builderForValue.build());
          onChanged();
        } else {
          typeAliasBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
       */
      public Builder addAllTypeAlias(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias> values) {
        if (typeAliasBuilder_ == null) {
          ensureTypeAliasIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, typeAlias_);
          onChanged();
        } else {
          typeAliasBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
       */
      public Builder clearTypeAlias() {
        if (typeAliasBuilder_ == null) {
          typeAlias_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00001000);
          onChanged();
        } else {
          typeAliasBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
       */
      public Builder removeTypeAlias(int index) {
        if (typeAliasBuilder_ == null) {
          ensureTypeAliasIsMutable();
          typeAlias_.remove(index);
          onChanged();
        } else {
          typeAliasBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias.Builder getTypeAliasBuilder(
          int index) {
        return getTypeAliasFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeAliasOrBuilder getTypeAliasOrBuilder(
          int index) {
        if (typeAliasBuilder_ == null) {
          return typeAlias_.get(index);  } else {
          return typeAliasBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.TypeAliasOrBuilder> 
           getTypeAliasOrBuilderList() {
        if (typeAliasBuilder_ != null) {
          return typeAliasBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(typeAlias_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias.Builder addTypeAliasBuilder() {
        return getTypeAliasFieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias.Builder addTypeAliasBuilder(
          int index) {
        return getTypeAliasFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias.Builder> 
           getTypeAliasBuilderList() {
        return getTypeAliasFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias, org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeAliasOrBuilder> 
          getTypeAliasFieldBuilder() {
        if (typeAliasBuilder_ == null) {
          typeAliasBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias, org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeAliasOrBuilder>(
                  typeAlias_,
                  ((bitField0_ & 0x00001000) != 0),
                  getParentForChildren(),
                  isClean());
          typeAlias_ = null;
        }
        return typeAliasBuilder_;
      }

      private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry> enumEntry_ =
        java.util.Collections.emptyList();
      private void ensureEnumEntryIsMutable() {
        if (!((bitField0_ & 0x00002000) != 0)) {
          enumEntry_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry>(enumEntry_);
          bitField0_ |= 0x00002000;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry, org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntryOrBuilder> enumEntryBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry> getEnumEntryList() {
        if (enumEntryBuilder_ == null) {
          return java.util.Collections.unmodifiableList(enumEntry_);
        } else {
          return enumEntryBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
       */
      public int getEnumEntryCount() {
        if (enumEntryBuilder_ == null) {
          return enumEntry_.size();
        } else {
          return enumEntryBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry getEnumEntry(int index) {
        if (enumEntryBuilder_ == null) {
          return enumEntry_.get(index);
        } else {
          return enumEntryBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
       */
      public Builder setEnumEntry(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry value) {
        if (enumEntryBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEnumEntryIsMutable();
          enumEntry_.set(index, value);
          onChanged();
        } else {
          enumEntryBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
       */
      public Builder setEnumEntry(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry.Builder builderForValue) {
        if (enumEntryBuilder_ == null) {
          ensureEnumEntryIsMutable();
          enumEntry_.set(index, builderForValue.build());
          onChanged();
        } else {
          enumEntryBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
       */
      public Builder addEnumEntry(org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry value) {
        if (enumEntryBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEnumEntryIsMutable();
          enumEntry_.add(value);
          onChanged();
        } else {
          enumEntryBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
       */
      public Builder addEnumEntry(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry value) {
        if (enumEntryBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEnumEntryIsMutable();
          enumEntry_.add(index, value);
          onChanged();
        } else {
          enumEntryBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
       */
      public Builder addEnumEntry(
          org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry.Builder builderForValue) {
        if (enumEntryBuilder_ == null) {
          ensureEnumEntryIsMutable();
          enumEntry_.add(builderForValue.build());
          onChanged();
        } else {
          enumEntryBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
       */
      public Builder addEnumEntry(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry.Builder builderForValue) {
        if (enumEntryBuilder_ == null) {
          ensureEnumEntryIsMutable();
          enumEntry_.add(index, builderForValue.build());
          onChanged();
        } else {
          enumEntryBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
       */
      public Builder addAllEnumEntry(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry> values) {
        if (enumEntryBuilder_ == null) {
          ensureEnumEntryIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, enumEntry_);
          onChanged();
        } else {
          enumEntryBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
       */
      public Builder clearEnumEntry() {
        if (enumEntryBuilder_ == null) {
          enumEntry_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00002000);
          onChanged();
        } else {
          enumEntryBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
       */
      public Builder removeEnumEntry(int index) {
        if (enumEntryBuilder_ == null) {
          ensureEnumEntryIsMutable();
          enumEntry_.remove(index);
          onChanged();
        } else {
          enumEntryBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry.Builder getEnumEntryBuilder(
          int index) {
        return getEnumEntryFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntryOrBuilder getEnumEntryOrBuilder(
          int index) {
        if (enumEntryBuilder_ == null) {
          return enumEntry_.get(index);  } else {
          return enumEntryBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntryOrBuilder> 
           getEnumEntryOrBuilderList() {
        if (enumEntryBuilder_ != null) {
          return enumEntryBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(enumEntry_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry.Builder addEnumEntryBuilder() {
        return getEnumEntryFieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry.Builder addEnumEntryBuilder(
          int index) {
        return getEnumEntryFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry.Builder> 
           getEnumEntryBuilderList() {
        return getEnumEntryFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry, org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntryOrBuilder> 
          getEnumEntryFieldBuilder() {
        if (enumEntryBuilder_ == null) {
          enumEntryBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry, org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntryOrBuilder>(
                  enumEntry_,
                  ((bitField0_ & 0x00002000) != 0),
                  getParentForChildren(),
                  isClean());
          enumEntry_ = null;
        }
        return enumEntryBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.Internal.IntList sealedSubclassFqName_ = emptyIntList();
      private void ensureSealedSubclassFqNameIsMutable() {
        if (!sealedSubclassFqName_.isModifiable()) {
          sealedSubclassFqName_ = makeMutableCopy(sealedSubclassFqName_);
        }
        bitField0_ |= 0x00004000;
      }
      /**
       * <code>repeated int32 sealed_subclass_fq_name = 16 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
       * @return A list containing the sealedSubclassFqName.
       */
      public java.util.List<java.lang.Integer>
          getSealedSubclassFqNameList() {
        sealedSubclassFqName_.makeImmutable();
        return sealedSubclassFqName_;
      }
      /**
       * <code>repeated int32 sealed_subclass_fq_name = 16 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
       * @return The count of sealedSubclassFqName.
       */
      public int getSealedSubclassFqNameCount() {
        return sealedSubclassFqName_.size();
      }
      /**
       * <code>repeated int32 sealed_subclass_fq_name = 16 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
       * @param index The index of the element to return.
       * @return The sealedSubclassFqName at the given index.
       */
      public int getSealedSubclassFqName(int index) {
        return sealedSubclassFqName_.getInt(index);
      }
      /**
       * <code>repeated int32 sealed_subclass_fq_name = 16 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
       * @param index The index to set the value at.
       * @param value The sealedSubclassFqName to set.
       * @return This builder for chaining.
       */
      public Builder setSealedSubclassFqName(
          int index, int value) {

        ensureSealedSubclassFqNameIsMutable();
        sealedSubclassFqName_.setInt(index, value);
        bitField0_ |= 0x00004000;
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 sealed_subclass_fq_name = 16 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
       * @param value The sealedSubclassFqName to add.
       * @return This builder for chaining.
       */
      public Builder addSealedSubclassFqName(int value) {

        ensureSealedSubclassFqNameIsMutable();
        sealedSubclassFqName_.addInt(value);
        bitField0_ |= 0x00004000;
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 sealed_subclass_fq_name = 16 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
       * @param values The sealedSubclassFqName to add.
       * @return This builder for chaining.
       */
      public Builder addAllSealedSubclassFqName(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureSealedSubclassFqNameIsMutable();
        org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
            values, sealedSubclassFqName_);
        bitField0_ |= 0x00004000;
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 sealed_subclass_fq_name = 16 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearSealedSubclassFqName() {
        sealedSubclassFqName_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00004000);
        onChanged();
        return this;
      }

      private int inlineClassUnderlyingPropertyName_ ;
      /**
       * <code>int32 inline_class_underlying_property_name = 17 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
       * @return Whether the inlineClassUnderlyingPropertyName field is set.
       */
      @java.lang.Override
      public boolean hasInlineClassUnderlyingPropertyName() {
        return ((bitField0_ & 0x00008000) != 0);
      }
      /**
       * <code>int32 inline_class_underlying_property_name = 17 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
       * @return The inlineClassUnderlyingPropertyName.
       */
      @java.lang.Override
      public int getInlineClassUnderlyingPropertyName() {
        return inlineClassUnderlyingPropertyName_;
      }
      /**
       * <code>int32 inline_class_underlying_property_name = 17 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
       * @param value The inlineClassUnderlyingPropertyName to set.
       * @return This builder for chaining.
       */
      public Builder setInlineClassUnderlyingPropertyName(int value) {

        inlineClassUnderlyingPropertyName_ = value;
        bitField0_ |= 0x00008000;
        onChanged();
        return this;
      }
      /**
       * <code>int32 inline_class_underlying_property_name = 17 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearInlineClassUnderlyingPropertyName() {
        bitField0_ = (bitField0_ & ~0x00008000);
        inlineClassUnderlyingPropertyName_ = 0;
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.metadata.ProtoBuf.Type inlineClassUnderlyingType_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Type, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder> inlineClassUnderlyingTypeBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type inline_class_underlying_type = 18;</code>
       * @return Whether the inlineClassUnderlyingType field is set.
       */
      public boolean hasInlineClassUnderlyingType() {
        return ((bitField0_ & 0x00010000) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type inline_class_underlying_type = 18;</code>
       * @return The inlineClassUnderlyingType.
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type getInlineClassUnderlyingType() {
        if (inlineClassUnderlyingTypeBuilder_ == null) {
          return inlineClassUnderlyingType_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance() : inlineClassUnderlyingType_;
        } else {
          return inlineClassUnderlyingTypeBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type inline_class_underlying_type = 18;</code>
       */
      public Builder setInlineClassUnderlyingType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        if (inlineClassUnderlyingTypeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          inlineClassUnderlyingType_ = value;
        } else {
          inlineClassUnderlyingTypeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00010000;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type inline_class_underlying_type = 18;</code>
       */
      public Builder setInlineClassUnderlyingType(
          org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder builderForValue) {
        if (inlineClassUnderlyingTypeBuilder_ == null) {
          inlineClassUnderlyingType_ = builderForValue.build();
        } else {
          inlineClassUnderlyingTypeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00010000;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type inline_class_underlying_type = 18;</code>
       */
      public Builder mergeInlineClassUnderlyingType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        if (inlineClassUnderlyingTypeBuilder_ == null) {
          if (((bitField0_ & 0x00010000) != 0) &&
            inlineClassUnderlyingType_ != null &&
            inlineClassUnderlyingType_ != org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance()) {
            getInlineClassUnderlyingTypeBuilder().mergeFrom(value);
          } else {
            inlineClassUnderlyingType_ = value;
          }
        } else {
          inlineClassUnderlyingTypeBuilder_.mergeFrom(value);
        }
        if (inlineClassUnderlyingType_ != null) {
          bitField0_ |= 0x00010000;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type inline_class_underlying_type = 18;</code>
       */
      public Builder clearInlineClassUnderlyingType() {
        bitField0_ = (bitField0_ & ~0x00010000);
        inlineClassUnderlyingType_ = null;
        if (inlineClassUnderlyingTypeBuilder_ != null) {
          inlineClassUnderlyingTypeBuilder_.dispose();
          inlineClassUnderlyingTypeBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type inline_class_underlying_type = 18;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder getInlineClassUnderlyingTypeBuilder() {
        bitField0_ |= 0x00010000;
        onChanged();
        return getInlineClassUnderlyingTypeFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type inline_class_underlying_type = 18;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder getInlineClassUnderlyingTypeOrBuilder() {
        if (inlineClassUnderlyingTypeBuilder_ != null) {
          return inlineClassUnderlyingTypeBuilder_.getMessageOrBuilder();
        } else {
          return inlineClassUnderlyingType_ == null ?
              org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance() : inlineClassUnderlyingType_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type inline_class_underlying_type = 18;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Type, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder> 
          getInlineClassUnderlyingTypeFieldBuilder() {
        if (inlineClassUnderlyingTypeBuilder_ == null) {
          inlineClassUnderlyingTypeBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.metadata.ProtoBuf.Type, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder>(
                  getInlineClassUnderlyingType(),
                  getParentForChildren(),
                  isClean());
          inlineClassUnderlyingType_ = null;
        }
        return inlineClassUnderlyingTypeBuilder_;
      }

      private int inlineClassUnderlyingTypeId_ ;
      /**
       * <code>int32 inline_class_underlying_type_id = 19 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return Whether the inlineClassUnderlyingTypeId field is set.
       */
      @java.lang.Override
      public boolean hasInlineClassUnderlyingTypeId() {
        return ((bitField0_ & 0x00020000) != 0);
      }
      /**
       * <code>int32 inline_class_underlying_type_id = 19 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return The inlineClassUnderlyingTypeId.
       */
      @java.lang.Override
      public int getInlineClassUnderlyingTypeId() {
        return inlineClassUnderlyingTypeId_;
      }
      /**
       * <code>int32 inline_class_underlying_type_id = 19 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @param value The inlineClassUnderlyingTypeId to set.
       * @return This builder for chaining.
       */
      public Builder setInlineClassUnderlyingTypeId(int value) {

        inlineClassUnderlyingTypeId_ = value;
        bitField0_ |= 0x00020000;
        onChanged();
        return this;
      }
      /**
       * <code>int32 inline_class_underlying_type_id = 19 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearInlineClassUnderlyingTypeId() {
        bitField0_ = (bitField0_ & ~0x00020000);
        inlineClassUnderlyingTypeId_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> annotation_ =
        java.util.Collections.emptyList();
      private void ensureAnnotationIsMutable() {
        if (!((bitField0_ & 0x00040000) != 0)) {
          annotation_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation>(annotation_);
          bitField0_ |= 0x00040000;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Annotation, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> annotationBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 25;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> getAnnotationList() {
        if (annotationBuilder_ == null) {
          return java.util.Collections.unmodifiableList(annotation_);
        } else {
          return annotationBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 25;</code>
       */
      public int getAnnotationCount() {
        if (annotationBuilder_ == null) {
          return annotation_.size();
        } else {
          return annotationBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 25;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getAnnotation(int index) {
        if (annotationBuilder_ == null) {
          return annotation_.get(index);
        } else {
          return annotationBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 25;</code>
       */
      public Builder setAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        if (annotationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAnnotationIsMutable();
          annotation_.set(index, value);
          onChanged();
        } else {
          annotationBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 25;</code>
       */
      public Builder setAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        if (annotationBuilder_ == null) {
          ensureAnnotationIsMutable();
          annotation_.set(index, builderForValue.build());
          onChanged();
        } else {
          annotationBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 25;</code>
       */
      public Builder addAnnotation(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        if (annotationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAnnotationIsMutable();
          annotation_.add(value);
          onChanged();
        } else {
          annotationBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 25;</code>
       */
      public Builder addAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        if (annotationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAnnotationIsMutable();
          annotation_.add(index, value);
          onChanged();
        } else {
          annotationBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 25;</code>
       */
      public Builder addAnnotation(
          org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        if (annotationBuilder_ == null) {
          ensureAnnotationIsMutable();
          annotation_.add(builderForValue.build());
          onChanged();
        } else {
          annotationBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 25;</code>
       */
      public Builder addAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        if (annotationBuilder_ == null) {
          ensureAnnotationIsMutable();
          annotation_.add(index, builderForValue.build());
          onChanged();
        } else {
          annotationBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 25;</code>
       */
      public Builder addAllAnnotation(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> values) {
        if (annotationBuilder_ == null) {
          ensureAnnotationIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, annotation_);
          onChanged();
        } else {
          annotationBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 25;</code>
       */
      public Builder clearAnnotation() {
        if (annotationBuilder_ == null) {
          annotation_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00040000);
          onChanged();
        } else {
          annotationBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 25;</code>
       */
      public Builder removeAnnotation(int index) {
        if (annotationBuilder_ == null) {
          ensureAnnotationIsMutable();
          annotation_.remove(index);
          onChanged();
        } else {
          annotationBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 25;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder getAnnotationBuilder(
          int index) {
        return getAnnotationFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 25;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder getAnnotationOrBuilder(
          int index) {
        if (annotationBuilder_ == null) {
          return annotation_.get(index);  } else {
          return annotationBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 25;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> 
           getAnnotationOrBuilderList() {
        if (annotationBuilder_ != null) {
          return annotationBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(annotation_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 25;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder addAnnotationBuilder() {
        return getAnnotationFieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 25;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder addAnnotationBuilder(
          int index) {
        return getAnnotationFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 25;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder> 
           getAnnotationBuilderList() {
        return getAnnotationFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Annotation, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> 
          getAnnotationFieldBuilder() {
        if (annotationBuilder_ == null) {
          annotationBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.ProtoBuf.Annotation, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder>(
                  annotation_,
                  ((bitField0_ & 0x00040000) != 0),
                  getParentForChildren(),
                  isClean());
          annotation_ = null;
        }
        return annotationBuilder_;
      }

      private org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable typeTable_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable, org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeTableOrBuilder> typeTableBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
       * @return Whether the typeTable field is set.
       */
      public boolean hasTypeTable() {
        return ((bitField0_ & 0x00080000) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
       * @return The typeTable.
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable getTypeTable() {
        if (typeTableBuilder_ == null) {
          return typeTable_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable.getDefaultInstance() : typeTable_;
        } else {
          return typeTableBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
       */
      public Builder setTypeTable(org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable value) {
        if (typeTableBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          typeTable_ = value;
        } else {
          typeTableBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00080000;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
       */
      public Builder setTypeTable(
          org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable.Builder builderForValue) {
        if (typeTableBuilder_ == null) {
          typeTable_ = builderForValue.build();
        } else {
          typeTableBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00080000;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
       */
      public Builder mergeTypeTable(org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable value) {
        if (typeTableBuilder_ == null) {
          if (((bitField0_ & 0x00080000) != 0) &&
            typeTable_ != null &&
            typeTable_ != org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable.getDefaultInstance()) {
            getTypeTableBuilder().mergeFrom(value);
          } else {
            typeTable_ = value;
          }
        } else {
          typeTableBuilder_.mergeFrom(value);
        }
        if (typeTable_ != null) {
          bitField0_ |= 0x00080000;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
       */
      public Builder clearTypeTable() {
        bitField0_ = (bitField0_ & ~0x00080000);
        typeTable_ = null;
        if (typeTableBuilder_ != null) {
          typeTableBuilder_.dispose();
          typeTableBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable.Builder getTypeTableBuilder() {
        bitField0_ |= 0x00080000;
        onChanged();
        return getTypeTableFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeTableOrBuilder getTypeTableOrBuilder() {
        if (typeTableBuilder_ != null) {
          return typeTableBuilder_.getMessageOrBuilder();
        } else {
          return typeTable_ == null ?
              org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable.getDefaultInstance() : typeTable_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable, org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeTableOrBuilder> 
          getTypeTableFieldBuilder() {
        if (typeTableBuilder_ == null) {
          typeTableBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable, org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeTableOrBuilder>(
                  getTypeTable(),
                  getParentForChildren(),
                  isClean());
          typeTable_ = null;
        }
        return typeTableBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.Internal.IntList versionRequirement_ = emptyIntList();
      private void ensureVersionRequirementIsMutable() {
        if (!versionRequirement_.isModifiable()) {
          versionRequirement_ = makeMutableCopy(versionRequirement_);
        }
        bitField0_ |= 0x00100000;
      }
      /**
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       *
       * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
       * @return A list containing the versionRequirement.
       */
      public java.util.List<java.lang.Integer>
          getVersionRequirementList() {
        versionRequirement_.makeImmutable();
        return versionRequirement_;
      }
      /**
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       *
       * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
       * @return The count of versionRequirement.
       */
      public int getVersionRequirementCount() {
        return versionRequirement_.size();
      }
      /**
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       *
       * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
       * @param index The index of the element to return.
       * @return The versionRequirement at the given index.
       */
      public int getVersionRequirement(int index) {
        return versionRequirement_.getInt(index);
      }
      /**
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       *
       * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
       * @param index The index to set the value at.
       * @param value The versionRequirement to set.
       * @return This builder for chaining.
       */
      public Builder setVersionRequirement(
          int index, int value) {

        ensureVersionRequirementIsMutable();
        versionRequirement_.setInt(index, value);
        bitField0_ |= 0x00100000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       *
       * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
       * @param value The versionRequirement to add.
       * @return This builder for chaining.
       */
      public Builder addVersionRequirement(int value) {

        ensureVersionRequirementIsMutable();
        versionRequirement_.addInt(value);
        bitField0_ |= 0x00100000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       *
       * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
       * @param values The versionRequirement to add.
       * @return This builder for chaining.
       */
      public Builder addAllVersionRequirement(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureVersionRequirementIsMutable();
        org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
            values, versionRequirement_);
        bitField0_ |= 0x00100000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       *
       * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearVersionRequirement() {
        versionRequirement_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00100000);
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable versionRequirementTable_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable, org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTableOrBuilder> versionRequirementTableBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
       * @return Whether the versionRequirementTable field is set.
       */
      public boolean hasVersionRequirementTable() {
        return ((bitField0_ & 0x00200000) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
       * @return The versionRequirementTable.
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable getVersionRequirementTable() {
        if (versionRequirementTableBuilder_ == null) {
          return versionRequirementTable_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable.getDefaultInstance() : versionRequirementTable_;
        } else {
          return versionRequirementTableBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
       */
      public Builder setVersionRequirementTable(org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable value) {
        if (versionRequirementTableBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          versionRequirementTable_ = value;
        } else {
          versionRequirementTableBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00200000;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
       */
      public Builder setVersionRequirementTable(
          org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable.Builder builderForValue) {
        if (versionRequirementTableBuilder_ == null) {
          versionRequirementTable_ = builderForValue.build();
        } else {
          versionRequirementTableBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00200000;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
       */
      public Builder mergeVersionRequirementTable(org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable value) {
        if (versionRequirementTableBuilder_ == null) {
          if (((bitField0_ & 0x00200000) != 0) &&
            versionRequirementTable_ != null &&
            versionRequirementTable_ != org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable.getDefaultInstance()) {
            getVersionRequirementTableBuilder().mergeFrom(value);
          } else {
            versionRequirementTable_ = value;
          }
        } else {
          versionRequirementTableBuilder_.mergeFrom(value);
        }
        if (versionRequirementTable_ != null) {
          bitField0_ |= 0x00200000;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
       */
      public Builder clearVersionRequirementTable() {
        bitField0_ = (bitField0_ & ~0x00200000);
        versionRequirementTable_ = null;
        if (versionRequirementTableBuilder_ != null) {
          versionRequirementTableBuilder_.dispose();
          versionRequirementTableBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable.Builder getVersionRequirementTableBuilder() {
        bitField0_ |= 0x00200000;
        onChanged();
        return getVersionRequirementTableFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTableOrBuilder getVersionRequirementTableOrBuilder() {
        if (versionRequirementTableBuilder_ != null) {
          return versionRequirementTableBuilder_.getMessageOrBuilder();
        } else {
          return versionRequirementTable_ == null ?
              org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable.getDefaultInstance() : versionRequirementTable_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable, org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTableOrBuilder> 
          getVersionRequirementTableFieldBuilder() {
        if (versionRequirementTableBuilder_ == null) {
          versionRequirementTableBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable, org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTableOrBuilder>(
                  getVersionRequirementTable(),
                  getParentForChildren(),
                  isClean());
          versionRequirementTable_ = null;
        }
        return versionRequirementTableBuilder_;
      }

      private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData> compilerPluginData_ =
        java.util.Collections.emptyList();
      private void ensureCompilerPluginDataIsMutable() {
        if (!((bitField0_ & 0x00400000) != 0)) {
          compilerPluginData_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData>(compilerPluginData_);
          bitField0_ |= 0x00400000;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginDataOrBuilder> compilerPluginDataBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData> getCompilerPluginDataList() {
        if (compilerPluginDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(compilerPluginData_);
        } else {
          return compilerPluginDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
       */
      public int getCompilerPluginDataCount() {
        if (compilerPluginDataBuilder_ == null) {
          return compilerPluginData_.size();
        } else {
          return compilerPluginDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData getCompilerPluginData(int index) {
        if (compilerPluginDataBuilder_ == null) {
          return compilerPluginData_.get(index);
        } else {
          return compilerPluginDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
       */
      public Builder setCompilerPluginData(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData value) {
        if (compilerPluginDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCompilerPluginDataIsMutable();
          compilerPluginData_.set(index, value);
          onChanged();
        } else {
          compilerPluginDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
       */
      public Builder setCompilerPluginData(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.Builder builderForValue) {
        if (compilerPluginDataBuilder_ == null) {
          ensureCompilerPluginDataIsMutable();
          compilerPluginData_.set(index, builderForValue.build());
          onChanged();
        } else {
          compilerPluginDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
       */
      public Builder addCompilerPluginData(org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData value) {
        if (compilerPluginDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCompilerPluginDataIsMutable();
          compilerPluginData_.add(value);
          onChanged();
        } else {
          compilerPluginDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
       */
      public Builder addCompilerPluginData(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData value) {
        if (compilerPluginDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCompilerPluginDataIsMutable();
          compilerPluginData_.add(index, value);
          onChanged();
        } else {
          compilerPluginDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
       */
      public Builder addCompilerPluginData(
          org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.Builder builderForValue) {
        if (compilerPluginDataBuilder_ == null) {
          ensureCompilerPluginDataIsMutable();
          compilerPluginData_.add(builderForValue.build());
          onChanged();
        } else {
          compilerPluginDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
       */
      public Builder addCompilerPluginData(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.Builder builderForValue) {
        if (compilerPluginDataBuilder_ == null) {
          ensureCompilerPluginDataIsMutable();
          compilerPluginData_.add(index, builderForValue.build());
          onChanged();
        } else {
          compilerPluginDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
       */
      public Builder addAllCompilerPluginData(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData> values) {
        if (compilerPluginDataBuilder_ == null) {
          ensureCompilerPluginDataIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, compilerPluginData_);
          onChanged();
        } else {
          compilerPluginDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
       */
      public Builder clearCompilerPluginData() {
        if (compilerPluginDataBuilder_ == null) {
          compilerPluginData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00400000);
          onChanged();
        } else {
          compilerPluginDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
       */
      public Builder removeCompilerPluginData(int index) {
        if (compilerPluginDataBuilder_ == null) {
          ensureCompilerPluginDataIsMutable();
          compilerPluginData_.remove(index);
          onChanged();
        } else {
          compilerPluginDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.Builder getCompilerPluginDataBuilder(
          int index) {
        return getCompilerPluginDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginDataOrBuilder getCompilerPluginDataOrBuilder(
          int index) {
        if (compilerPluginDataBuilder_ == null) {
          return compilerPluginData_.get(index);  } else {
          return compilerPluginDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginDataOrBuilder> 
           getCompilerPluginDataOrBuilderList() {
        if (compilerPluginDataBuilder_ != null) {
          return compilerPluginDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(compilerPluginData_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.Builder addCompilerPluginDataBuilder() {
        return getCompilerPluginDataFieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.Builder addCompilerPluginDataBuilder(
          int index) {
        return getCompilerPluginDataFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.Builder> 
           getCompilerPluginDataBuilderList() {
        return getCompilerPluginDataFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginDataOrBuilder> 
          getCompilerPluginDataFieldBuilder() {
        if (compilerPluginDataBuilder_ == null) {
          compilerPluginDataBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginDataOrBuilder>(
                  compilerPluginData_,
                  ((bitField0_ & 0x00400000) != 0),
                  getParentForChildren(),
                  isClean());
          compilerPluginData_ = null;
        }
        return compilerPluginDataBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.Class)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.Class)
    private static final org.jetbrains.kotlin.metadata.ProtoBuf.Class DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.metadata.ProtoBuf.Class();
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Class getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<Class>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<Class>() {
      @java.lang.Override
      public Class parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<Class> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<Class> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Class getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface PackageOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.Package)
      org.jetbrains.kotlin.protobuf.GeneratedMessage.
          ExtendableMessageOrBuilder<Package> {

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Function> 
        getFunctionList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Function getFunction(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
     */
    int getFunctionCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.FunctionOrBuilder> 
        getFunctionOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.FunctionOrBuilder getFunctionOrBuilder(
        int index);

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Property> 
        getPropertyList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Property getProperty(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
     */
    int getPropertyCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.PropertyOrBuilder> 
        getPropertyOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.PropertyOrBuilder getPropertyOrBuilder(
        int index);

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias> 
        getTypeAliasList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias getTypeAlias(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
     */
    int getTypeAliasCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.TypeAliasOrBuilder> 
        getTypeAliasOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.TypeAliasOrBuilder getTypeAliasOrBuilder(
        int index);

    /**
     * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
     * @return Whether the typeTable field is set.
     */
    boolean hasTypeTable();
    /**
     * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
     * @return The typeTable.
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable getTypeTable();
    /**
     * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.TypeTableOrBuilder getTypeTableOrBuilder();

    /**
     * <code>.org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
     * @return Whether the versionRequirementTable field is set.
     */
    boolean hasVersionRequirementTable();
    /**
     * <code>.org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
     * @return The versionRequirementTable.
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable getVersionRequirementTable();
    /**
     * <code>.org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTableOrBuilder getVersionRequirementTableOrBuilder();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.metadata.Package}
   */
  public static final class Package extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage.ExtendableMessage<
        Package> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.Package)
      PackageOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        Package.class.getName());
    }
    // Use Package.newBuilder() to construct.
    private Package(org.jetbrains.kotlin.protobuf.GeneratedMessage.ExtendableBuilder<org.jetbrains.kotlin.metadata.ProtoBuf.Package, ?> builder) {
      super(builder);
    }
    private Package() {
      function_ = java.util.Collections.emptyList();
      property_ = java.util.Collections.emptyList();
      typeAlias_ = java.util.Collections.emptyList();
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Package_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Package_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.metadata.ProtoBuf.Package.class, org.jetbrains.kotlin.metadata.ProtoBuf.Package.Builder.class);
    }

    private int bitField0_;
    public static final int FUNCTION_FIELD_NUMBER = 3;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Function> function_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Function> getFunctionList() {
      return function_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.FunctionOrBuilder> 
        getFunctionOrBuilderList() {
      return function_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
     */
    @java.lang.Override
    public int getFunctionCount() {
      return function_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Function getFunction(int index) {
      return function_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.FunctionOrBuilder getFunctionOrBuilder(
        int index) {
      return function_.get(index);
    }

    public static final int PROPERTY_FIELD_NUMBER = 4;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Property> property_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Property> getPropertyList() {
      return property_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.PropertyOrBuilder> 
        getPropertyOrBuilderList() {
      return property_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
     */
    @java.lang.Override
    public int getPropertyCount() {
      return property_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Property getProperty(int index) {
      return property_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.PropertyOrBuilder getPropertyOrBuilder(
        int index) {
      return property_.get(index);
    }

    public static final int TYPE_ALIAS_FIELD_NUMBER = 5;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias> typeAlias_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias> getTypeAliasList() {
      return typeAlias_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.TypeAliasOrBuilder> 
        getTypeAliasOrBuilderList() {
      return typeAlias_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
     */
    @java.lang.Override
    public int getTypeAliasCount() {
      return typeAlias_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias getTypeAlias(int index) {
      return typeAlias_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.TypeAliasOrBuilder getTypeAliasOrBuilder(
        int index) {
      return typeAlias_.get(index);
    }

    public static final int TYPE_TABLE_FIELD_NUMBER = 30;
    private org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable typeTable_;
    /**
     * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
     * @return Whether the typeTable field is set.
     */
    @java.lang.Override
    public boolean hasTypeTable() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
     * @return The typeTable.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable getTypeTable() {
      return typeTable_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable.getDefaultInstance() : typeTable_;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.TypeTableOrBuilder getTypeTableOrBuilder() {
      return typeTable_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable.getDefaultInstance() : typeTable_;
    }

    public static final int VERSION_REQUIREMENT_TABLE_FIELD_NUMBER = 32;
    private org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable versionRequirementTable_;
    /**
     * <code>.org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
     * @return Whether the versionRequirementTable field is set.
     */
    @java.lang.Override
    public boolean hasVersionRequirementTable() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
     * @return The versionRequirementTable.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable getVersionRequirementTable() {
      return versionRequirementTable_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable.getDefaultInstance() : versionRequirementTable_;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTableOrBuilder getVersionRequirementTableOrBuilder() {
      return versionRequirementTable_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable.getDefaultInstance() : versionRequirementTable_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getFunctionCount(); i++) {
        if (!getFunction(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getPropertyCount(); i++) {
        if (!getProperty(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getTypeAliasCount(); i++) {
        if (!getTypeAlias(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasTypeTable()) {
        if (!getTypeTable().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (!extensionsAreInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      org.jetbrains.kotlin.protobuf.GeneratedMessage
        .ExtendableMessage.ExtensionSerializer
          extensionWriter = newExtensionSerializer();
      for (int i = 0; i < function_.size(); i++) {
        output.writeMessage(3, function_.get(i));
      }
      for (int i = 0; i < property_.size(); i++) {
        output.writeMessage(4, property_.get(i));
      }
      for (int i = 0; i < typeAlias_.size(); i++) {
        output.writeMessage(5, typeAlias_.get(i));
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(30, getTypeTable());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeMessage(32, getVersionRequirementTable());
      }
      extensionWriter.writeUntil(200, output);
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < function_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(3, function_.get(i));
      }
      for (int i = 0; i < property_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(4, property_.get(i));
      }
      for (int i = 0; i < typeAlias_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(5, typeAlias_.get(i));
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(30, getTypeTable());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(32, getVersionRequirementTable());
      }
      size += extensionsSerializedSize();
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.metadata.ProtoBuf.Package)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.metadata.ProtoBuf.Package other = (org.jetbrains.kotlin.metadata.ProtoBuf.Package) obj;

      if (!getFunctionList()
          .equals(other.getFunctionList())) return false;
      if (!getPropertyList()
          .equals(other.getPropertyList())) return false;
      if (!getTypeAliasList()
          .equals(other.getTypeAliasList())) return false;
      if (hasTypeTable() != other.hasTypeTable()) return false;
      if (hasTypeTable()) {
        if (!getTypeTable()
            .equals(other.getTypeTable())) return false;
      }
      if (hasVersionRequirementTable() != other.hasVersionRequirementTable()) return false;
      if (hasVersionRequirementTable()) {
        if (!getVersionRequirementTable()
            .equals(other.getVersionRequirementTable())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      if (!getExtensionFields().equals(other.getExtensionFields()))
        return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getFunctionCount() > 0) {
        hash = (37 * hash) + FUNCTION_FIELD_NUMBER;
        hash = (53 * hash) + getFunctionList().hashCode();
      }
      if (getPropertyCount() > 0) {
        hash = (37 * hash) + PROPERTY_FIELD_NUMBER;
        hash = (53 * hash) + getPropertyList().hashCode();
      }
      if (getTypeAliasCount() > 0) {
        hash = (37 * hash) + TYPE_ALIAS_FIELD_NUMBER;
        hash = (53 * hash) + getTypeAliasList().hashCode();
      }
      if (hasTypeTable()) {
        hash = (37 * hash) + TYPE_TABLE_FIELD_NUMBER;
        hash = (53 * hash) + getTypeTable().hashCode();
      }
      if (hasVersionRequirementTable()) {
        hash = (37 * hash) + VERSION_REQUIREMENT_TABLE_FIELD_NUMBER;
        hash = (53 * hash) + getVersionRequirementTable().hashCode();
      }
      hash = hashFields(hash, getExtensionFields());
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Package parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Package parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Package parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Package parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Package parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Package parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Package parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Package parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Package parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Package parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Package parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Package parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.metadata.ProtoBuf.Package prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.Package}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.ExtendableBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Package, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.Package)
        org.jetbrains.kotlin.metadata.ProtoBuf.PackageOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Package_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Package_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.metadata.ProtoBuf.Package.class, org.jetbrains.kotlin.metadata.ProtoBuf.Package.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.metadata.ProtoBuf.Package.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getFunctionFieldBuilder();
          getPropertyFieldBuilder();
          getTypeAliasFieldBuilder();
          getTypeTableFieldBuilder();
          getVersionRequirementTableFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        if (functionBuilder_ == null) {
          function_ = java.util.Collections.emptyList();
        } else {
          function_ = null;
          functionBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (propertyBuilder_ == null) {
          property_ = java.util.Collections.emptyList();
        } else {
          property_ = null;
          propertyBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        if (typeAliasBuilder_ == null) {
          typeAlias_ = java.util.Collections.emptyList();
        } else {
          typeAlias_ = null;
          typeAliasBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        typeTable_ = null;
        if (typeTableBuilder_ != null) {
          typeTableBuilder_.dispose();
          typeTableBuilder_ = null;
        }
        versionRequirementTable_ = null;
        if (versionRequirementTableBuilder_ != null) {
          versionRequirementTableBuilder_.dispose();
          versionRequirementTableBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Package_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Package getDefaultInstanceForType() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.Package.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Package build() {
        org.jetbrains.kotlin.metadata.ProtoBuf.Package result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Package buildPartial() {
        org.jetbrains.kotlin.metadata.ProtoBuf.Package result = new org.jetbrains.kotlin.metadata.ProtoBuf.Package(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(org.jetbrains.kotlin.metadata.ProtoBuf.Package result) {
        if (functionBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            function_ = java.util.Collections.unmodifiableList(function_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.function_ = function_;
        } else {
          result.function_ = functionBuilder_.build();
        }
        if (propertyBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            property_ = java.util.Collections.unmodifiableList(property_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.property_ = property_;
        } else {
          result.property_ = propertyBuilder_.build();
        }
        if (typeAliasBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0)) {
            typeAlias_ = java.util.Collections.unmodifiableList(typeAlias_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.typeAlias_ = typeAlias_;
        } else {
          result.typeAlias_ = typeAliasBuilder_.build();
        }
      }

      private void buildPartial0(org.jetbrains.kotlin.metadata.ProtoBuf.Package result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.typeTable_ = typeTableBuilder_ == null
              ? typeTable_
              : typeTableBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.versionRequirementTable_ = versionRequirementTableBuilder_ == null
              ? versionRequirementTable_
              : versionRequirementTableBuilder_.build();
          to_bitField0_ |= 0x00000002;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.metadata.ProtoBuf.Package) {
          return mergeFrom((org.jetbrains.kotlin.metadata.ProtoBuf.Package)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.metadata.ProtoBuf.Package other) {
        if (other == org.jetbrains.kotlin.metadata.ProtoBuf.Package.getDefaultInstance()) return this;
        if (functionBuilder_ == null) {
          if (!other.function_.isEmpty()) {
            if (function_.isEmpty()) {
              function_ = other.function_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureFunctionIsMutable();
              function_.addAll(other.function_);
            }
            onChanged();
          }
        } else {
          if (!other.function_.isEmpty()) {
            if (functionBuilder_.isEmpty()) {
              functionBuilder_.dispose();
              functionBuilder_ = null;
              function_ = other.function_;
              bitField0_ = (bitField0_ & ~0x00000001);
              functionBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getFunctionFieldBuilder() : null;
            } else {
              functionBuilder_.addAllMessages(other.function_);
            }
          }
        }
        if (propertyBuilder_ == null) {
          if (!other.property_.isEmpty()) {
            if (property_.isEmpty()) {
              property_ = other.property_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensurePropertyIsMutable();
              property_.addAll(other.property_);
            }
            onChanged();
          }
        } else {
          if (!other.property_.isEmpty()) {
            if (propertyBuilder_.isEmpty()) {
              propertyBuilder_.dispose();
              propertyBuilder_ = null;
              property_ = other.property_;
              bitField0_ = (bitField0_ & ~0x00000002);
              propertyBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPropertyFieldBuilder() : null;
            } else {
              propertyBuilder_.addAllMessages(other.property_);
            }
          }
        }
        if (typeAliasBuilder_ == null) {
          if (!other.typeAlias_.isEmpty()) {
            if (typeAlias_.isEmpty()) {
              typeAlias_ = other.typeAlias_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureTypeAliasIsMutable();
              typeAlias_.addAll(other.typeAlias_);
            }
            onChanged();
          }
        } else {
          if (!other.typeAlias_.isEmpty()) {
            if (typeAliasBuilder_.isEmpty()) {
              typeAliasBuilder_.dispose();
              typeAliasBuilder_ = null;
              typeAlias_ = other.typeAlias_;
              bitField0_ = (bitField0_ & ~0x00000004);
              typeAliasBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getTypeAliasFieldBuilder() : null;
            } else {
              typeAliasBuilder_.addAllMessages(other.typeAlias_);
            }
          }
        }
        if (other.hasTypeTable()) {
          mergeTypeTable(other.getTypeTable());
        }
        if (other.hasVersionRequirementTable()) {
          mergeVersionRequirementTable(other.getVersionRequirementTable());
        }
        this.mergeExtensionFields(other);
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        for (int i = 0; i < getFunctionCount(); i++) {
          if (!getFunction(i).isInitialized()) {
            return false;
          }
        }
        for (int i = 0; i < getPropertyCount(); i++) {
          if (!getProperty(i).isInitialized()) {
            return false;
          }
        }
        for (int i = 0; i < getTypeAliasCount(); i++) {
          if (!getTypeAlias(i).isInitialized()) {
            return false;
          }
        }
        if (hasTypeTable()) {
          if (!getTypeTable().isInitialized()) {
            return false;
          }
        }
        if (!extensionsAreInitialized()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 26: {
                org.jetbrains.kotlin.metadata.ProtoBuf.Function m =
                    input.readMessage(
                        org.jetbrains.kotlin.metadata.ProtoBuf.Function.parser(),
                        extensionRegistry);
                if (functionBuilder_ == null) {
                  ensureFunctionIsMutable();
                  function_.add(m);
                } else {
                  functionBuilder_.addMessage(m);
                }
                break;
              } // case 26
              case 34: {
                org.jetbrains.kotlin.metadata.ProtoBuf.Property m =
                    input.readMessage(
                        org.jetbrains.kotlin.metadata.ProtoBuf.Property.parser(),
                        extensionRegistry);
                if (propertyBuilder_ == null) {
                  ensurePropertyIsMutable();
                  property_.add(m);
                } else {
                  propertyBuilder_.addMessage(m);
                }
                break;
              } // case 34
              case 42: {
                org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias m =
                    input.readMessage(
                        org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias.parser(),
                        extensionRegistry);
                if (typeAliasBuilder_ == null) {
                  ensureTypeAliasIsMutable();
                  typeAlias_.add(m);
                } else {
                  typeAliasBuilder_.addMessage(m);
                }
                break;
              } // case 42
              case 242: {
                input.readMessage(
                    getTypeTableFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000008;
                break;
              } // case 242
              case 258: {
                input.readMessage(
                    getVersionRequirementTableFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000010;
                break;
              } // case 258
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Function> function_ =
        java.util.Collections.emptyList();
      private void ensureFunctionIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          function_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.ProtoBuf.Function>(function_);
          bitField0_ |= 0x00000001;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Function, org.jetbrains.kotlin.metadata.ProtoBuf.Function.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.FunctionOrBuilder> functionBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Function> getFunctionList() {
        if (functionBuilder_ == null) {
          return java.util.Collections.unmodifiableList(function_);
        } else {
          return functionBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
       */
      public int getFunctionCount() {
        if (functionBuilder_ == null) {
          return function_.size();
        } else {
          return functionBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Function getFunction(int index) {
        if (functionBuilder_ == null) {
          return function_.get(index);
        } else {
          return functionBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
       */
      public Builder setFunction(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Function value) {
        if (functionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFunctionIsMutable();
          function_.set(index, value);
          onChanged();
        } else {
          functionBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
       */
      public Builder setFunction(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Function.Builder builderForValue) {
        if (functionBuilder_ == null) {
          ensureFunctionIsMutable();
          function_.set(index, builderForValue.build());
          onChanged();
        } else {
          functionBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
       */
      public Builder addFunction(org.jetbrains.kotlin.metadata.ProtoBuf.Function value) {
        if (functionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFunctionIsMutable();
          function_.add(value);
          onChanged();
        } else {
          functionBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
       */
      public Builder addFunction(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Function value) {
        if (functionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFunctionIsMutable();
          function_.add(index, value);
          onChanged();
        } else {
          functionBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
       */
      public Builder addFunction(
          org.jetbrains.kotlin.metadata.ProtoBuf.Function.Builder builderForValue) {
        if (functionBuilder_ == null) {
          ensureFunctionIsMutable();
          function_.add(builderForValue.build());
          onChanged();
        } else {
          functionBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
       */
      public Builder addFunction(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Function.Builder builderForValue) {
        if (functionBuilder_ == null) {
          ensureFunctionIsMutable();
          function_.add(index, builderForValue.build());
          onChanged();
        } else {
          functionBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
       */
      public Builder addAllFunction(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Function> values) {
        if (functionBuilder_ == null) {
          ensureFunctionIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, function_);
          onChanged();
        } else {
          functionBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
       */
      public Builder clearFunction() {
        if (functionBuilder_ == null) {
          function_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          functionBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
       */
      public Builder removeFunction(int index) {
        if (functionBuilder_ == null) {
          ensureFunctionIsMutable();
          function_.remove(index);
          onChanged();
        } else {
          functionBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Function.Builder getFunctionBuilder(
          int index) {
        return getFunctionFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.FunctionOrBuilder getFunctionOrBuilder(
          int index) {
        if (functionBuilder_ == null) {
          return function_.get(index);  } else {
          return functionBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.FunctionOrBuilder> 
           getFunctionOrBuilderList() {
        if (functionBuilder_ != null) {
          return functionBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(function_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Function.Builder addFunctionBuilder() {
        return getFunctionFieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.ProtoBuf.Function.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Function.Builder addFunctionBuilder(
          int index) {
        return getFunctionFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.ProtoBuf.Function.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Function.Builder> 
           getFunctionBuilderList() {
        return getFunctionFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Function, org.jetbrains.kotlin.metadata.ProtoBuf.Function.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.FunctionOrBuilder> 
          getFunctionFieldBuilder() {
        if (functionBuilder_ == null) {
          functionBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.ProtoBuf.Function, org.jetbrains.kotlin.metadata.ProtoBuf.Function.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.FunctionOrBuilder>(
                  function_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          function_ = null;
        }
        return functionBuilder_;
      }

      private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Property> property_ =
        java.util.Collections.emptyList();
      private void ensurePropertyIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          property_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.ProtoBuf.Property>(property_);
          bitField0_ |= 0x00000002;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Property, org.jetbrains.kotlin.metadata.ProtoBuf.Property.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.PropertyOrBuilder> propertyBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Property> getPropertyList() {
        if (propertyBuilder_ == null) {
          return java.util.Collections.unmodifiableList(property_);
        } else {
          return propertyBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
       */
      public int getPropertyCount() {
        if (propertyBuilder_ == null) {
          return property_.size();
        } else {
          return propertyBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Property getProperty(int index) {
        if (propertyBuilder_ == null) {
          return property_.get(index);
        } else {
          return propertyBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
       */
      public Builder setProperty(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Property value) {
        if (propertyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePropertyIsMutable();
          property_.set(index, value);
          onChanged();
        } else {
          propertyBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
       */
      public Builder setProperty(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Property.Builder builderForValue) {
        if (propertyBuilder_ == null) {
          ensurePropertyIsMutable();
          property_.set(index, builderForValue.build());
          onChanged();
        } else {
          propertyBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
       */
      public Builder addProperty(org.jetbrains.kotlin.metadata.ProtoBuf.Property value) {
        if (propertyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePropertyIsMutable();
          property_.add(value);
          onChanged();
        } else {
          propertyBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
       */
      public Builder addProperty(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Property value) {
        if (propertyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePropertyIsMutable();
          property_.add(index, value);
          onChanged();
        } else {
          propertyBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
       */
      public Builder addProperty(
          org.jetbrains.kotlin.metadata.ProtoBuf.Property.Builder builderForValue) {
        if (propertyBuilder_ == null) {
          ensurePropertyIsMutable();
          property_.add(builderForValue.build());
          onChanged();
        } else {
          propertyBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
       */
      public Builder addProperty(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Property.Builder builderForValue) {
        if (propertyBuilder_ == null) {
          ensurePropertyIsMutable();
          property_.add(index, builderForValue.build());
          onChanged();
        } else {
          propertyBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
       */
      public Builder addAllProperty(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Property> values) {
        if (propertyBuilder_ == null) {
          ensurePropertyIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, property_);
          onChanged();
        } else {
          propertyBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
       */
      public Builder clearProperty() {
        if (propertyBuilder_ == null) {
          property_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          propertyBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
       */
      public Builder removeProperty(int index) {
        if (propertyBuilder_ == null) {
          ensurePropertyIsMutable();
          property_.remove(index);
          onChanged();
        } else {
          propertyBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Property.Builder getPropertyBuilder(
          int index) {
        return getPropertyFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.PropertyOrBuilder getPropertyOrBuilder(
          int index) {
        if (propertyBuilder_ == null) {
          return property_.get(index);  } else {
          return propertyBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.PropertyOrBuilder> 
           getPropertyOrBuilderList() {
        if (propertyBuilder_ != null) {
          return propertyBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(property_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Property.Builder addPropertyBuilder() {
        return getPropertyFieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.ProtoBuf.Property.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Property.Builder addPropertyBuilder(
          int index) {
        return getPropertyFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.ProtoBuf.Property.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Property.Builder> 
           getPropertyBuilderList() {
        return getPropertyFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Property, org.jetbrains.kotlin.metadata.ProtoBuf.Property.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.PropertyOrBuilder> 
          getPropertyFieldBuilder() {
        if (propertyBuilder_ == null) {
          propertyBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.ProtoBuf.Property, org.jetbrains.kotlin.metadata.ProtoBuf.Property.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.PropertyOrBuilder>(
                  property_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          property_ = null;
        }
        return propertyBuilder_;
      }

      private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias> typeAlias_ =
        java.util.Collections.emptyList();
      private void ensureTypeAliasIsMutable() {
        if (!((bitField0_ & 0x00000004) != 0)) {
          typeAlias_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias>(typeAlias_);
          bitField0_ |= 0x00000004;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias, org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeAliasOrBuilder> typeAliasBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias> getTypeAliasList() {
        if (typeAliasBuilder_ == null) {
          return java.util.Collections.unmodifiableList(typeAlias_);
        } else {
          return typeAliasBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
       */
      public int getTypeAliasCount() {
        if (typeAliasBuilder_ == null) {
          return typeAlias_.size();
        } else {
          return typeAliasBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias getTypeAlias(int index) {
        if (typeAliasBuilder_ == null) {
          return typeAlias_.get(index);
        } else {
          return typeAliasBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
       */
      public Builder setTypeAlias(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias value) {
        if (typeAliasBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTypeAliasIsMutable();
          typeAlias_.set(index, value);
          onChanged();
        } else {
          typeAliasBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
       */
      public Builder setTypeAlias(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias.Builder builderForValue) {
        if (typeAliasBuilder_ == null) {
          ensureTypeAliasIsMutable();
          typeAlias_.set(index, builderForValue.build());
          onChanged();
        } else {
          typeAliasBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
       */
      public Builder addTypeAlias(org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias value) {
        if (typeAliasBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTypeAliasIsMutable();
          typeAlias_.add(value);
          onChanged();
        } else {
          typeAliasBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
       */
      public Builder addTypeAlias(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias value) {
        if (typeAliasBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTypeAliasIsMutable();
          typeAlias_.add(index, value);
          onChanged();
        } else {
          typeAliasBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
       */
      public Builder addTypeAlias(
          org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias.Builder builderForValue) {
        if (typeAliasBuilder_ == null) {
          ensureTypeAliasIsMutable();
          typeAlias_.add(builderForValue.build());
          onChanged();
        } else {
          typeAliasBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
       */
      public Builder addTypeAlias(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias.Builder builderForValue) {
        if (typeAliasBuilder_ == null) {
          ensureTypeAliasIsMutable();
          typeAlias_.add(index, builderForValue.build());
          onChanged();
        } else {
          typeAliasBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
       */
      public Builder addAllTypeAlias(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias> values) {
        if (typeAliasBuilder_ == null) {
          ensureTypeAliasIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, typeAlias_);
          onChanged();
        } else {
          typeAliasBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
       */
      public Builder clearTypeAlias() {
        if (typeAliasBuilder_ == null) {
          typeAlias_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          typeAliasBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
       */
      public Builder removeTypeAlias(int index) {
        if (typeAliasBuilder_ == null) {
          ensureTypeAliasIsMutable();
          typeAlias_.remove(index);
          onChanged();
        } else {
          typeAliasBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias.Builder getTypeAliasBuilder(
          int index) {
        return getTypeAliasFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeAliasOrBuilder getTypeAliasOrBuilder(
          int index) {
        if (typeAliasBuilder_ == null) {
          return typeAlias_.get(index);  } else {
          return typeAliasBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.TypeAliasOrBuilder> 
           getTypeAliasOrBuilderList() {
        if (typeAliasBuilder_ != null) {
          return typeAliasBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(typeAlias_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias.Builder addTypeAliasBuilder() {
        return getTypeAliasFieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias.Builder addTypeAliasBuilder(
          int index) {
        return getTypeAliasFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias.Builder> 
           getTypeAliasBuilderList() {
        return getTypeAliasFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias, org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeAliasOrBuilder> 
          getTypeAliasFieldBuilder() {
        if (typeAliasBuilder_ == null) {
          typeAliasBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias, org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeAliasOrBuilder>(
                  typeAlias_,
                  ((bitField0_ & 0x00000004) != 0),
                  getParentForChildren(),
                  isClean());
          typeAlias_ = null;
        }
        return typeAliasBuilder_;
      }

      private org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable typeTable_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable, org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeTableOrBuilder> typeTableBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
       * @return Whether the typeTable field is set.
       */
      public boolean hasTypeTable() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
       * @return The typeTable.
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable getTypeTable() {
        if (typeTableBuilder_ == null) {
          return typeTable_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable.getDefaultInstance() : typeTable_;
        } else {
          return typeTableBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
       */
      public Builder setTypeTable(org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable value) {
        if (typeTableBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          typeTable_ = value;
        } else {
          typeTableBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
       */
      public Builder setTypeTable(
          org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable.Builder builderForValue) {
        if (typeTableBuilder_ == null) {
          typeTable_ = builderForValue.build();
        } else {
          typeTableBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
       */
      public Builder mergeTypeTable(org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable value) {
        if (typeTableBuilder_ == null) {
          if (((bitField0_ & 0x00000008) != 0) &&
            typeTable_ != null &&
            typeTable_ != org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable.getDefaultInstance()) {
            getTypeTableBuilder().mergeFrom(value);
          } else {
            typeTable_ = value;
          }
        } else {
          typeTableBuilder_.mergeFrom(value);
        }
        if (typeTable_ != null) {
          bitField0_ |= 0x00000008;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
       */
      public Builder clearTypeTable() {
        bitField0_ = (bitField0_ & ~0x00000008);
        typeTable_ = null;
        if (typeTableBuilder_ != null) {
          typeTableBuilder_.dispose();
          typeTableBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable.Builder getTypeTableBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getTypeTableFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeTableOrBuilder getTypeTableOrBuilder() {
        if (typeTableBuilder_ != null) {
          return typeTableBuilder_.getMessageOrBuilder();
        } else {
          return typeTable_ == null ?
              org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable.getDefaultInstance() : typeTable_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable, org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeTableOrBuilder> 
          getTypeTableFieldBuilder() {
        if (typeTableBuilder_ == null) {
          typeTableBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable, org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeTableOrBuilder>(
                  getTypeTable(),
                  getParentForChildren(),
                  isClean());
          typeTable_ = null;
        }
        return typeTableBuilder_;
      }

      private org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable versionRequirementTable_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable, org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTableOrBuilder> versionRequirementTableBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
       * @return Whether the versionRequirementTable field is set.
       */
      public boolean hasVersionRequirementTable() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
       * @return The versionRequirementTable.
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable getVersionRequirementTable() {
        if (versionRequirementTableBuilder_ == null) {
          return versionRequirementTable_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable.getDefaultInstance() : versionRequirementTable_;
        } else {
          return versionRequirementTableBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
       */
      public Builder setVersionRequirementTable(org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable value) {
        if (versionRequirementTableBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          versionRequirementTable_ = value;
        } else {
          versionRequirementTableBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
       */
      public Builder setVersionRequirementTable(
          org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable.Builder builderForValue) {
        if (versionRequirementTableBuilder_ == null) {
          versionRequirementTable_ = builderForValue.build();
        } else {
          versionRequirementTableBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
       */
      public Builder mergeVersionRequirementTable(org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable value) {
        if (versionRequirementTableBuilder_ == null) {
          if (((bitField0_ & 0x00000010) != 0) &&
            versionRequirementTable_ != null &&
            versionRequirementTable_ != org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable.getDefaultInstance()) {
            getVersionRequirementTableBuilder().mergeFrom(value);
          } else {
            versionRequirementTable_ = value;
          }
        } else {
          versionRequirementTableBuilder_.mergeFrom(value);
        }
        if (versionRequirementTable_ != null) {
          bitField0_ |= 0x00000010;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
       */
      public Builder clearVersionRequirementTable() {
        bitField0_ = (bitField0_ & ~0x00000010);
        versionRequirementTable_ = null;
        if (versionRequirementTableBuilder_ != null) {
          versionRequirementTableBuilder_.dispose();
          versionRequirementTableBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable.Builder getVersionRequirementTableBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getVersionRequirementTableFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTableOrBuilder getVersionRequirementTableOrBuilder() {
        if (versionRequirementTableBuilder_ != null) {
          return versionRequirementTableBuilder_.getMessageOrBuilder();
        } else {
          return versionRequirementTable_ == null ?
              org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable.getDefaultInstance() : versionRequirementTable_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable, org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTableOrBuilder> 
          getVersionRequirementTableFieldBuilder() {
        if (versionRequirementTableBuilder_ == null) {
          versionRequirementTableBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable, org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTableOrBuilder>(
                  getVersionRequirementTable(),
                  getParentForChildren(),
                  isClean());
          versionRequirementTable_ = null;
        }
        return versionRequirementTableBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.Package)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.Package)
    private static final org.jetbrains.kotlin.metadata.ProtoBuf.Package DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.metadata.ProtoBuf.Package();
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Package getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<Package>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<Package>() {
      @java.lang.Override
      public Package parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<Package> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<Package> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Package getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface TypeTableOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.TypeTable)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Type> 
        getTypeList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Type getType(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
     */
    int getTypeCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder> 
        getTypeOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder getTypeOrBuilder(
        int index);

    /**
     * <pre>
     * Index starting from which all types are nullable, or nothing if all types in this table are non-null.
     * Note that the 'nullable' field of Type messages is ignored and shouldn't be written because it wastes too much space
     * </pre>
     *
     * <code>int32 first_nullable = 2 [default = -1];</code>
     * @return Whether the firstNullable field is set.
     */
    boolean hasFirstNullable();
    /**
     * <pre>
     * Index starting from which all types are nullable, or nothing if all types in this table are non-null.
     * Note that the 'nullable' field of Type messages is ignored and shouldn't be written because it wastes too much space
     * </pre>
     *
     * <code>int32 first_nullable = 2 [default = -1];</code>
     * @return The firstNullable.
     */
    int getFirstNullable();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.metadata.TypeTable}
   */
  public static final class TypeTable extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.TypeTable)
      TypeTableOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        TypeTable.class.getName());
    }
    // Use TypeTable.newBuilder() to construct.
    private TypeTable(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private TypeTable() {
      type_ = java.util.Collections.emptyList();
      firstNullable_ = -1;
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_TypeTable_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_TypeTable_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable.class, org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable.Builder.class);
    }

    private int bitField0_;
    public static final int TYPE_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Type> type_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Type> getTypeList() {
      return type_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder> 
        getTypeOrBuilderList() {
      return type_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
     */
    @java.lang.Override
    public int getTypeCount() {
      return type_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Type getType(int index) {
      return type_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder getTypeOrBuilder(
        int index) {
      return type_.get(index);
    }

    public static final int FIRST_NULLABLE_FIELD_NUMBER = 2;
    private int firstNullable_ = -1;
    /**
     * <pre>
     * Index starting from which all types are nullable, or nothing if all types in this table are non-null.
     * Note that the 'nullable' field of Type messages is ignored and shouldn't be written because it wastes too much space
     * </pre>
     *
     * <code>int32 first_nullable = 2 [default = -1];</code>
     * @return Whether the firstNullable field is set.
     */
    @java.lang.Override
    public boolean hasFirstNullable() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Index starting from which all types are nullable, or nothing if all types in this table are non-null.
     * Note that the 'nullable' field of Type messages is ignored and shouldn't be written because it wastes too much space
     * </pre>
     *
     * <code>int32 first_nullable = 2 [default = -1];</code>
     * @return The firstNullable.
     */
    @java.lang.Override
    public int getFirstNullable() {
      return firstNullable_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getTypeCount(); i++) {
        if (!getType(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < type_.size(); i++) {
        output.writeMessage(1, type_.get(i));
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeInt32(2, firstNullable_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < type_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, type_.get(i));
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(2, firstNullable_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable other = (org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable) obj;

      if (!getTypeList()
          .equals(other.getTypeList())) return false;
      if (hasFirstNullable() != other.hasFirstNullable()) return false;
      if (hasFirstNullable()) {
        if (getFirstNullable()
            != other.getFirstNullable()) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getTypeCount() > 0) {
        hash = (37 * hash) + TYPE_FIELD_NUMBER;
        hash = (53 * hash) + getTypeList().hashCode();
      }
      if (hasFirstNullable()) {
        hash = (37 * hash) + FIRST_NULLABLE_FIELD_NUMBER;
        hash = (53 * hash) + getFirstNullable();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.TypeTable}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.TypeTable)
        org.jetbrains.kotlin.metadata.ProtoBuf.TypeTableOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_TypeTable_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_TypeTable_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable.class, org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable.newBuilder()
      private Builder() {

      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        if (typeBuilder_ == null) {
          type_ = java.util.Collections.emptyList();
        } else {
          type_ = null;
          typeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        firstNullable_ = -1;
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_TypeTable_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable getDefaultInstanceForType() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable build() {
        org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable buildPartial() {
        org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable result = new org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable result) {
        if (typeBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            type_ = java.util.Collections.unmodifiableList(type_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.type_ = type_;
        } else {
          result.type_ = typeBuilder_.build();
        }
      }

      private void buildPartial0(org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.firstNullable_ = firstNullable_;
          to_bitField0_ |= 0x00000001;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable) {
          return mergeFrom((org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable other) {
        if (other == org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable.getDefaultInstance()) return this;
        if (typeBuilder_ == null) {
          if (!other.type_.isEmpty()) {
            if (type_.isEmpty()) {
              type_ = other.type_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureTypeIsMutable();
              type_.addAll(other.type_);
            }
            onChanged();
          }
        } else {
          if (!other.type_.isEmpty()) {
            if (typeBuilder_.isEmpty()) {
              typeBuilder_.dispose();
              typeBuilder_ = null;
              type_ = other.type_;
              bitField0_ = (bitField0_ & ~0x00000001);
              typeBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getTypeFieldBuilder() : null;
            } else {
              typeBuilder_.addAllMessages(other.type_);
            }
          }
        }
        if (other.hasFirstNullable()) {
          setFirstNullable(other.getFirstNullable());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        for (int i = 0; i < getTypeCount(); i++) {
          if (!getType(i).isInitialized()) {
            return false;
          }
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                org.jetbrains.kotlin.metadata.ProtoBuf.Type m =
                    input.readMessage(
                        org.jetbrains.kotlin.metadata.ProtoBuf.Type.parser(),
                        extensionRegistry);
                if (typeBuilder_ == null) {
                  ensureTypeIsMutable();
                  type_.add(m);
                } else {
                  typeBuilder_.addMessage(m);
                }
                break;
              } // case 10
              case 16: {
                firstNullable_ = input.readInt32();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Type> type_ =
        java.util.Collections.emptyList();
      private void ensureTypeIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          type_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.ProtoBuf.Type>(type_);
          bitField0_ |= 0x00000001;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Type, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder> typeBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Type> getTypeList() {
        if (typeBuilder_ == null) {
          return java.util.Collections.unmodifiableList(type_);
        } else {
          return typeBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
       */
      public int getTypeCount() {
        if (typeBuilder_ == null) {
          return type_.size();
        } else {
          return typeBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type getType(int index) {
        if (typeBuilder_ == null) {
          return type_.get(index);
        } else {
          return typeBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
       */
      public Builder setType(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        if (typeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTypeIsMutable();
          type_.set(index, value);
          onChanged();
        } else {
          typeBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
       */
      public Builder setType(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder builderForValue) {
        if (typeBuilder_ == null) {
          ensureTypeIsMutable();
          type_.set(index, builderForValue.build());
          onChanged();
        } else {
          typeBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
       */
      public Builder addType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        if (typeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTypeIsMutable();
          type_.add(value);
          onChanged();
        } else {
          typeBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
       */
      public Builder addType(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        if (typeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTypeIsMutable();
          type_.add(index, value);
          onChanged();
        } else {
          typeBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
       */
      public Builder addType(
          org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder builderForValue) {
        if (typeBuilder_ == null) {
          ensureTypeIsMutable();
          type_.add(builderForValue.build());
          onChanged();
        } else {
          typeBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
       */
      public Builder addType(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder builderForValue) {
        if (typeBuilder_ == null) {
          ensureTypeIsMutable();
          type_.add(index, builderForValue.build());
          onChanged();
        } else {
          typeBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
       */
      public Builder addAllType(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Type> values) {
        if (typeBuilder_ == null) {
          ensureTypeIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, type_);
          onChanged();
        } else {
          typeBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
       */
      public Builder clearType() {
        if (typeBuilder_ == null) {
          type_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          typeBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
       */
      public Builder removeType(int index) {
        if (typeBuilder_ == null) {
          ensureTypeIsMutable();
          type_.remove(index);
          onChanged();
        } else {
          typeBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder getTypeBuilder(
          int index) {
        return getTypeFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder getTypeOrBuilder(
          int index) {
        if (typeBuilder_ == null) {
          return type_.get(index);  } else {
          return typeBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder> 
           getTypeOrBuilderList() {
        if (typeBuilder_ != null) {
          return typeBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(type_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder addTypeBuilder() {
        return getTypeFieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder addTypeBuilder(
          int index) {
        return getTypeFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder> 
           getTypeBuilderList() {
        return getTypeFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Type, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder> 
          getTypeFieldBuilder() {
        if (typeBuilder_ == null) {
          typeBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.ProtoBuf.Type, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder>(
                  type_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          type_ = null;
        }
        return typeBuilder_;
      }

      private int firstNullable_ = -1;
      /**
       * <pre>
       * Index starting from which all types are nullable, or nothing if all types in this table are non-null.
       * Note that the 'nullable' field of Type messages is ignored and shouldn't be written because it wastes too much space
       * </pre>
       *
       * <code>int32 first_nullable = 2 [default = -1];</code>
       * @return Whether the firstNullable field is set.
       */
      @java.lang.Override
      public boolean hasFirstNullable() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * Index starting from which all types are nullable, or nothing if all types in this table are non-null.
       * Note that the 'nullable' field of Type messages is ignored and shouldn't be written because it wastes too much space
       * </pre>
       *
       * <code>int32 first_nullable = 2 [default = -1];</code>
       * @return The firstNullable.
       */
      @java.lang.Override
      public int getFirstNullable() {
        return firstNullable_;
      }
      /**
       * <pre>
       * Index starting from which all types are nullable, or nothing if all types in this table are non-null.
       * Note that the 'nullable' field of Type messages is ignored and shouldn't be written because it wastes too much space
       * </pre>
       *
       * <code>int32 first_nullable = 2 [default = -1];</code>
       * @param value The firstNullable to set.
       * @return This builder for chaining.
       */
      public Builder setFirstNullable(int value) {

        firstNullable_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Index starting from which all types are nullable, or nothing if all types in this table are non-null.
       * Note that the 'nullable' field of Type messages is ignored and shouldn't be written because it wastes too much space
       * </pre>
       *
       * <code>int32 first_nullable = 2 [default = -1];</code>
       * @return This builder for chaining.
       */
      public Builder clearFirstNullable() {
        bitField0_ = (bitField0_ & ~0x00000002);
        firstNullable_ = -1;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.TypeTable)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.TypeTable)
    private static final org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable();
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<TypeTable>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<TypeTable>() {
      @java.lang.Override
      public TypeTable parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<TypeTable> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<TypeTable> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ConstructorOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.Constructor)
      org.jetbrains.kotlin.protobuf.GeneratedMessage.
          ExtendableMessageOrBuilder<Constructor> {

    /**
     * <pre>
     *
     * hasAnnotations
     * Visibility
     * isSecondary
     * hasNonStableParameterNames
     * </pre>
     *
     * <code>int32 flags = 1 [default = 6];</code>
     * @return Whether the flags field is set.
     */
    boolean hasFlags();
    /**
     * <pre>
     *
     * hasAnnotations
     * Visibility
     * isSecondary
     * hasNonStableParameterNames
     * </pre>
     *
     * <code>int32 flags = 1 [default = 6];</code>
     * @return The flags.
     */
    int getFlags();

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter> 
        getValueParameterList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter getValueParameter(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
     */
    int getValueParameterCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameterOrBuilder> 
        getValueParameterOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameterOrBuilder getValueParameterOrBuilder(
        int index);

    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     * @return A list containing the versionRequirement.
     */
    java.util.List<java.lang.Integer> getVersionRequirementList();
    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     * @return The count of versionRequirement.
     */
    int getVersionRequirementCount();
    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     * @param index The index of the element to return.
     * @return The versionRequirement at the given index.
     */
    int getVersionRequirement(int index);

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData> 
        getCompilerPluginDataList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData getCompilerPluginData(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
     */
    int getCompilerPluginDataCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginDataOrBuilder> 
        getCompilerPluginDataOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginDataOrBuilder getCompilerPluginDataOrBuilder(
        int index);

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 3;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> 
        getAnnotationList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 3;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getAnnotation(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 3;</code>
     */
    int getAnnotationCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 3;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> 
        getAnnotationOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 3;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder getAnnotationOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.metadata.Constructor}
   */
  public static final class Constructor extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage.ExtendableMessage<
        Constructor> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.Constructor)
      ConstructorOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        Constructor.class.getName());
    }
    // Use Constructor.newBuilder() to construct.
    private Constructor(org.jetbrains.kotlin.protobuf.GeneratedMessage.ExtendableBuilder<org.jetbrains.kotlin.metadata.ProtoBuf.Constructor, ?> builder) {
      super(builder);
    }
    private Constructor() {
      flags_ = 6;
      valueParameter_ = java.util.Collections.emptyList();
      versionRequirement_ = emptyIntList();
      compilerPluginData_ = java.util.Collections.emptyList();
      annotation_ = java.util.Collections.emptyList();
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Constructor_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Constructor_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.metadata.ProtoBuf.Constructor.class, org.jetbrains.kotlin.metadata.ProtoBuf.Constructor.Builder.class);
    }

    private int bitField0_;
    public static final int FLAGS_FIELD_NUMBER = 1;
    private int flags_ = 6;
    /**
     * <pre>
     *
     * hasAnnotations
     * Visibility
     * isSecondary
     * hasNonStableParameterNames
     * </pre>
     *
     * <code>int32 flags = 1 [default = 6];</code>
     * @return Whether the flags field is set.
     */
    @java.lang.Override
    public boolean hasFlags() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     *
     * hasAnnotations
     * Visibility
     * isSecondary
     * hasNonStableParameterNames
     * </pre>
     *
     * <code>int32 flags = 1 [default = 6];</code>
     * @return The flags.
     */
    @java.lang.Override
    public int getFlags() {
      return flags_;
    }

    public static final int VALUE_PARAMETER_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter> valueParameter_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter> getValueParameterList() {
      return valueParameter_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameterOrBuilder> 
        getValueParameterOrBuilderList() {
      return valueParameter_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
     */
    @java.lang.Override
    public int getValueParameterCount() {
      return valueParameter_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter getValueParameter(int index) {
      return valueParameter_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameterOrBuilder getValueParameterOrBuilder(
        int index) {
      return valueParameter_.get(index);
    }

    public static final int VERSION_REQUIREMENT_FIELD_NUMBER = 31;
    @SuppressWarnings("serial")
    private org.jetbrains.kotlin.protobuf.Internal.IntList versionRequirement_ =
        emptyIntList();
    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     * @return A list containing the versionRequirement.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getVersionRequirementList() {
      return versionRequirement_;
    }
    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     * @return The count of versionRequirement.
     */
    public int getVersionRequirementCount() {
      return versionRequirement_.size();
    }
    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     * @param index The index of the element to return.
     * @return The versionRequirement at the given index.
     */
    public int getVersionRequirement(int index) {
      return versionRequirement_.getInt(index);
    }

    public static final int COMPILER_PLUGIN_DATA_FIELD_NUMBER = 32;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData> compilerPluginData_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData> getCompilerPluginDataList() {
      return compilerPluginData_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginDataOrBuilder> 
        getCompilerPluginDataOrBuilderList() {
      return compilerPluginData_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
     */
    @java.lang.Override
    public int getCompilerPluginDataCount() {
      return compilerPluginData_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData getCompilerPluginData(int index) {
      return compilerPluginData_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginDataOrBuilder getCompilerPluginDataOrBuilder(
        int index) {
      return compilerPluginData_.get(index);
    }

    public static final int ANNOTATION_FIELD_NUMBER = 3;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> annotation_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 3;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> getAnnotationList() {
      return annotation_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 3;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> 
        getAnnotationOrBuilderList() {
      return annotation_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 3;</code>
     */
    @java.lang.Override
    public int getAnnotationCount() {
      return annotation_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 3;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getAnnotation(int index) {
      return annotation_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 3;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder getAnnotationOrBuilder(
        int index) {
      return annotation_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getValueParameterCount(); i++) {
        if (!getValueParameter(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getCompilerPluginDataCount(); i++) {
        if (!getCompilerPluginData(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getAnnotationCount(); i++) {
        if (!getAnnotation(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (!extensionsAreInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      org.jetbrains.kotlin.protobuf.GeneratedMessage
        .ExtendableMessage.ExtensionSerializer
          extensionWriter = newExtensionSerializer();
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeInt32(1, flags_);
      }
      for (int i = 0; i < valueParameter_.size(); i++) {
        output.writeMessage(2, valueParameter_.get(i));
      }
      for (int i = 0; i < annotation_.size(); i++) {
        output.writeMessage(3, annotation_.get(i));
      }
      for (int i = 0; i < versionRequirement_.size(); i++) {
        output.writeInt32(31, versionRequirement_.getInt(i));
      }
      for (int i = 0; i < compilerPluginData_.size(); i++) {
        output.writeMessage(32, compilerPluginData_.get(i));
      }
      extensionWriter.writeUntil(19000, output);
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(1, flags_);
      }
      for (int i = 0; i < valueParameter_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, valueParameter_.get(i));
      }
      for (int i = 0; i < annotation_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(3, annotation_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < versionRequirement_.size(); i++) {
          dataSize += org.jetbrains.kotlin.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(versionRequirement_.getInt(i));
        }
        size += dataSize;
        size += 2 * getVersionRequirementList().size();
      }
      for (int i = 0; i < compilerPluginData_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(32, compilerPluginData_.get(i));
      }
      size += extensionsSerializedSize();
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.metadata.ProtoBuf.Constructor)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.metadata.ProtoBuf.Constructor other = (org.jetbrains.kotlin.metadata.ProtoBuf.Constructor) obj;

      if (hasFlags() != other.hasFlags()) return false;
      if (hasFlags()) {
        if (getFlags()
            != other.getFlags()) return false;
      }
      if (!getValueParameterList()
          .equals(other.getValueParameterList())) return false;
      if (!getVersionRequirementList()
          .equals(other.getVersionRequirementList())) return false;
      if (!getCompilerPluginDataList()
          .equals(other.getCompilerPluginDataList())) return false;
      if (!getAnnotationList()
          .equals(other.getAnnotationList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      if (!getExtensionFields().equals(other.getExtensionFields()))
        return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasFlags()) {
        hash = (37 * hash) + FLAGS_FIELD_NUMBER;
        hash = (53 * hash) + getFlags();
      }
      if (getValueParameterCount() > 0) {
        hash = (37 * hash) + VALUE_PARAMETER_FIELD_NUMBER;
        hash = (53 * hash) + getValueParameterList().hashCode();
      }
      if (getVersionRequirementCount() > 0) {
        hash = (37 * hash) + VERSION_REQUIREMENT_FIELD_NUMBER;
        hash = (53 * hash) + getVersionRequirementList().hashCode();
      }
      if (getCompilerPluginDataCount() > 0) {
        hash = (37 * hash) + COMPILER_PLUGIN_DATA_FIELD_NUMBER;
        hash = (53 * hash) + getCompilerPluginDataList().hashCode();
      }
      if (getAnnotationCount() > 0) {
        hash = (37 * hash) + ANNOTATION_FIELD_NUMBER;
        hash = (53 * hash) + getAnnotationList().hashCode();
      }
      hash = hashFields(hash, getExtensionFields());
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Constructor parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Constructor parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Constructor parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Constructor parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Constructor parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Constructor parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Constructor parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Constructor parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Constructor parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Constructor parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Constructor parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Constructor parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.metadata.ProtoBuf.Constructor prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.Constructor}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.ExtendableBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Constructor, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.Constructor)
        org.jetbrains.kotlin.metadata.ProtoBuf.ConstructorOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Constructor_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Constructor_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.metadata.ProtoBuf.Constructor.class, org.jetbrains.kotlin.metadata.ProtoBuf.Constructor.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.metadata.ProtoBuf.Constructor.newBuilder()
      private Builder() {

      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        flags_ = 6;
        if (valueParameterBuilder_ == null) {
          valueParameter_ = java.util.Collections.emptyList();
        } else {
          valueParameter_ = null;
          valueParameterBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        versionRequirement_ = emptyIntList();
        if (compilerPluginDataBuilder_ == null) {
          compilerPluginData_ = java.util.Collections.emptyList();
        } else {
          compilerPluginData_ = null;
          compilerPluginDataBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        if (annotationBuilder_ == null) {
          annotation_ = java.util.Collections.emptyList();
        } else {
          annotation_ = null;
          annotationBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Constructor_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Constructor getDefaultInstanceForType() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.Constructor.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Constructor build() {
        org.jetbrains.kotlin.metadata.ProtoBuf.Constructor result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Constructor buildPartial() {
        org.jetbrains.kotlin.metadata.ProtoBuf.Constructor result = new org.jetbrains.kotlin.metadata.ProtoBuf.Constructor(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(org.jetbrains.kotlin.metadata.ProtoBuf.Constructor result) {
        if (valueParameterBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            valueParameter_ = java.util.Collections.unmodifiableList(valueParameter_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.valueParameter_ = valueParameter_;
        } else {
          result.valueParameter_ = valueParameterBuilder_.build();
        }
        if (compilerPluginDataBuilder_ == null) {
          if (((bitField0_ & 0x00000008) != 0)) {
            compilerPluginData_ = java.util.Collections.unmodifiableList(compilerPluginData_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.compilerPluginData_ = compilerPluginData_;
        } else {
          result.compilerPluginData_ = compilerPluginDataBuilder_.build();
        }
        if (annotationBuilder_ == null) {
          if (((bitField0_ & 0x00000010) != 0)) {
            annotation_ = java.util.Collections.unmodifiableList(annotation_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.annotation_ = annotation_;
        } else {
          result.annotation_ = annotationBuilder_.build();
        }
      }

      private void buildPartial0(org.jetbrains.kotlin.metadata.ProtoBuf.Constructor result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.flags_ = flags_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          versionRequirement_.makeImmutable();
          result.versionRequirement_ = versionRequirement_;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.metadata.ProtoBuf.Constructor) {
          return mergeFrom((org.jetbrains.kotlin.metadata.ProtoBuf.Constructor)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.metadata.ProtoBuf.Constructor other) {
        if (other == org.jetbrains.kotlin.metadata.ProtoBuf.Constructor.getDefaultInstance()) return this;
        if (other.hasFlags()) {
          setFlags(other.getFlags());
        }
        if (valueParameterBuilder_ == null) {
          if (!other.valueParameter_.isEmpty()) {
            if (valueParameter_.isEmpty()) {
              valueParameter_ = other.valueParameter_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureValueParameterIsMutable();
              valueParameter_.addAll(other.valueParameter_);
            }
            onChanged();
          }
        } else {
          if (!other.valueParameter_.isEmpty()) {
            if (valueParameterBuilder_.isEmpty()) {
              valueParameterBuilder_.dispose();
              valueParameterBuilder_ = null;
              valueParameter_ = other.valueParameter_;
              bitField0_ = (bitField0_ & ~0x00000002);
              valueParameterBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getValueParameterFieldBuilder() : null;
            } else {
              valueParameterBuilder_.addAllMessages(other.valueParameter_);
            }
          }
        }
        if (!other.versionRequirement_.isEmpty()) {
          if (versionRequirement_.isEmpty()) {
            versionRequirement_ = other.versionRequirement_;
            versionRequirement_.makeImmutable();
            bitField0_ |= 0x00000004;
          } else {
            ensureVersionRequirementIsMutable();
            versionRequirement_.addAll(other.versionRequirement_);
          }
          onChanged();
        }
        if (compilerPluginDataBuilder_ == null) {
          if (!other.compilerPluginData_.isEmpty()) {
            if (compilerPluginData_.isEmpty()) {
              compilerPluginData_ = other.compilerPluginData_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureCompilerPluginDataIsMutable();
              compilerPluginData_.addAll(other.compilerPluginData_);
            }
            onChanged();
          }
        } else {
          if (!other.compilerPluginData_.isEmpty()) {
            if (compilerPluginDataBuilder_.isEmpty()) {
              compilerPluginDataBuilder_.dispose();
              compilerPluginDataBuilder_ = null;
              compilerPluginData_ = other.compilerPluginData_;
              bitField0_ = (bitField0_ & ~0x00000008);
              compilerPluginDataBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCompilerPluginDataFieldBuilder() : null;
            } else {
              compilerPluginDataBuilder_.addAllMessages(other.compilerPluginData_);
            }
          }
        }
        if (annotationBuilder_ == null) {
          if (!other.annotation_.isEmpty()) {
            if (annotation_.isEmpty()) {
              annotation_ = other.annotation_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureAnnotationIsMutable();
              annotation_.addAll(other.annotation_);
            }
            onChanged();
          }
        } else {
          if (!other.annotation_.isEmpty()) {
            if (annotationBuilder_.isEmpty()) {
              annotationBuilder_.dispose();
              annotationBuilder_ = null;
              annotation_ = other.annotation_;
              bitField0_ = (bitField0_ & ~0x00000010);
              annotationBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getAnnotationFieldBuilder() : null;
            } else {
              annotationBuilder_.addAllMessages(other.annotation_);
            }
          }
        }
        this.mergeExtensionFields(other);
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        for (int i = 0; i < getValueParameterCount(); i++) {
          if (!getValueParameter(i).isInitialized()) {
            return false;
          }
        }
        for (int i = 0; i < getCompilerPluginDataCount(); i++) {
          if (!getCompilerPluginData(i).isInitialized()) {
            return false;
          }
        }
        for (int i = 0; i < getAnnotationCount(); i++) {
          if (!getAnnotation(i).isInitialized()) {
            return false;
          }
        }
        if (!extensionsAreInitialized()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                flags_ = input.readInt32();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 18: {
                org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter m =
                    input.readMessage(
                        org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.parser(),
                        extensionRegistry);
                if (valueParameterBuilder_ == null) {
                  ensureValueParameterIsMutable();
                  valueParameter_.add(m);
                } else {
                  valueParameterBuilder_.addMessage(m);
                }
                break;
              } // case 18
              case 26: {
                org.jetbrains.kotlin.metadata.ProtoBuf.Annotation m =
                    input.readMessage(
                        org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.parser(),
                        extensionRegistry);
                if (annotationBuilder_ == null) {
                  ensureAnnotationIsMutable();
                  annotation_.add(m);
                } else {
                  annotationBuilder_.addMessage(m);
                }
                break;
              } // case 26
              case 248: {
                int v = input.readInt32();
                ensureVersionRequirementIsMutable();
                versionRequirement_.addInt(v);
                break;
              } // case 248
              case 250: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureVersionRequirementIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  versionRequirement_.addInt(input.readInt32());
                }
                input.popLimit(limit);
                break;
              } // case 250
              case 258: {
                org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData m =
                    input.readMessage(
                        org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.parser(),
                        extensionRegistry);
                if (compilerPluginDataBuilder_ == null) {
                  ensureCompilerPluginDataIsMutable();
                  compilerPluginData_.add(m);
                } else {
                  compilerPluginDataBuilder_.addMessage(m);
                }
                break;
              } // case 258
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int flags_ = 6;
      /**
       * <pre>
       *
       * hasAnnotations
       * Visibility
       * isSecondary
       * hasNonStableParameterNames
       * </pre>
       *
       * <code>int32 flags = 1 [default = 6];</code>
       * @return Whether the flags field is set.
       */
      @java.lang.Override
      public boolean hasFlags() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       *
       * hasAnnotations
       * Visibility
       * isSecondary
       * hasNonStableParameterNames
       * </pre>
       *
       * <code>int32 flags = 1 [default = 6];</code>
       * @return The flags.
       */
      @java.lang.Override
      public int getFlags() {
        return flags_;
      }
      /**
       * <pre>
       *
       * hasAnnotations
       * Visibility
       * isSecondary
       * hasNonStableParameterNames
       * </pre>
       *
       * <code>int32 flags = 1 [default = 6];</code>
       * @param value The flags to set.
       * @return This builder for chaining.
       */
      public Builder setFlags(int value) {

        flags_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *
       * hasAnnotations
       * Visibility
       * isSecondary
       * hasNonStableParameterNames
       * </pre>
       *
       * <code>int32 flags = 1 [default = 6];</code>
       * @return This builder for chaining.
       */
      public Builder clearFlags() {
        bitField0_ = (bitField0_ & ~0x00000001);
        flags_ = 6;
        onChanged();
        return this;
      }

      private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter> valueParameter_ =
        java.util.Collections.emptyList();
      private void ensureValueParameterIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          valueParameter_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter>(valueParameter_);
          bitField0_ |= 0x00000002;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter, org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameterOrBuilder> valueParameterBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter> getValueParameterList() {
        if (valueParameterBuilder_ == null) {
          return java.util.Collections.unmodifiableList(valueParameter_);
        } else {
          return valueParameterBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
       */
      public int getValueParameterCount() {
        if (valueParameterBuilder_ == null) {
          return valueParameter_.size();
        } else {
          return valueParameterBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter getValueParameter(int index) {
        if (valueParameterBuilder_ == null) {
          return valueParameter_.get(index);
        } else {
          return valueParameterBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
       */
      public Builder setValueParameter(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter value) {
        if (valueParameterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureValueParameterIsMutable();
          valueParameter_.set(index, value);
          onChanged();
        } else {
          valueParameterBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
       */
      public Builder setValueParameter(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.Builder builderForValue) {
        if (valueParameterBuilder_ == null) {
          ensureValueParameterIsMutable();
          valueParameter_.set(index, builderForValue.build());
          onChanged();
        } else {
          valueParameterBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
       */
      public Builder addValueParameter(org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter value) {
        if (valueParameterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureValueParameterIsMutable();
          valueParameter_.add(value);
          onChanged();
        } else {
          valueParameterBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
       */
      public Builder addValueParameter(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter value) {
        if (valueParameterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureValueParameterIsMutable();
          valueParameter_.add(index, value);
          onChanged();
        } else {
          valueParameterBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
       */
      public Builder addValueParameter(
          org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.Builder builderForValue) {
        if (valueParameterBuilder_ == null) {
          ensureValueParameterIsMutable();
          valueParameter_.add(builderForValue.build());
          onChanged();
        } else {
          valueParameterBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
       */
      public Builder addValueParameter(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.Builder builderForValue) {
        if (valueParameterBuilder_ == null) {
          ensureValueParameterIsMutable();
          valueParameter_.add(index, builderForValue.build());
          onChanged();
        } else {
          valueParameterBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
       */
      public Builder addAllValueParameter(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter> values) {
        if (valueParameterBuilder_ == null) {
          ensureValueParameterIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, valueParameter_);
          onChanged();
        } else {
          valueParameterBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
       */
      public Builder clearValueParameter() {
        if (valueParameterBuilder_ == null) {
          valueParameter_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          valueParameterBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
       */
      public Builder removeValueParameter(int index) {
        if (valueParameterBuilder_ == null) {
          ensureValueParameterIsMutable();
          valueParameter_.remove(index);
          onChanged();
        } else {
          valueParameterBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.Builder getValueParameterBuilder(
          int index) {
        return getValueParameterFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameterOrBuilder getValueParameterOrBuilder(
          int index) {
        if (valueParameterBuilder_ == null) {
          return valueParameter_.get(index);  } else {
          return valueParameterBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameterOrBuilder> 
           getValueParameterOrBuilderList() {
        if (valueParameterBuilder_ != null) {
          return valueParameterBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(valueParameter_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.Builder addValueParameterBuilder() {
        return getValueParameterFieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.Builder addValueParameterBuilder(
          int index) {
        return getValueParameterFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.Builder> 
           getValueParameterBuilderList() {
        return getValueParameterFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter, org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameterOrBuilder> 
          getValueParameterFieldBuilder() {
        if (valueParameterBuilder_ == null) {
          valueParameterBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter, org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameterOrBuilder>(
                  valueParameter_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          valueParameter_ = null;
        }
        return valueParameterBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.Internal.IntList versionRequirement_ = emptyIntList();
      private void ensureVersionRequirementIsMutable() {
        if (!versionRequirement_.isModifiable()) {
          versionRequirement_ = makeMutableCopy(versionRequirement_);
        }
        bitField0_ |= 0x00000004;
      }
      /**
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       *
       * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
       * @return A list containing the versionRequirement.
       */
      public java.util.List<java.lang.Integer>
          getVersionRequirementList() {
        versionRequirement_.makeImmutable();
        return versionRequirement_;
      }
      /**
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       *
       * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
       * @return The count of versionRequirement.
       */
      public int getVersionRequirementCount() {
        return versionRequirement_.size();
      }
      /**
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       *
       * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
       * @param index The index of the element to return.
       * @return The versionRequirement at the given index.
       */
      public int getVersionRequirement(int index) {
        return versionRequirement_.getInt(index);
      }
      /**
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       *
       * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
       * @param index The index to set the value at.
       * @param value The versionRequirement to set.
       * @return This builder for chaining.
       */
      public Builder setVersionRequirement(
          int index, int value) {

        ensureVersionRequirementIsMutable();
        versionRequirement_.setInt(index, value);
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       *
       * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
       * @param value The versionRequirement to add.
       * @return This builder for chaining.
       */
      public Builder addVersionRequirement(int value) {

        ensureVersionRequirementIsMutable();
        versionRequirement_.addInt(value);
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       *
       * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
       * @param values The versionRequirement to add.
       * @return This builder for chaining.
       */
      public Builder addAllVersionRequirement(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureVersionRequirementIsMutable();
        org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
            values, versionRequirement_);
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       *
       * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearVersionRequirement() {
        versionRequirement_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData> compilerPluginData_ =
        java.util.Collections.emptyList();
      private void ensureCompilerPluginDataIsMutable() {
        if (!((bitField0_ & 0x00000008) != 0)) {
          compilerPluginData_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData>(compilerPluginData_);
          bitField0_ |= 0x00000008;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginDataOrBuilder> compilerPluginDataBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData> getCompilerPluginDataList() {
        if (compilerPluginDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(compilerPluginData_);
        } else {
          return compilerPluginDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public int getCompilerPluginDataCount() {
        if (compilerPluginDataBuilder_ == null) {
          return compilerPluginData_.size();
        } else {
          return compilerPluginDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData getCompilerPluginData(int index) {
        if (compilerPluginDataBuilder_ == null) {
          return compilerPluginData_.get(index);
        } else {
          return compilerPluginDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public Builder setCompilerPluginData(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData value) {
        if (compilerPluginDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCompilerPluginDataIsMutable();
          compilerPluginData_.set(index, value);
          onChanged();
        } else {
          compilerPluginDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public Builder setCompilerPluginData(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.Builder builderForValue) {
        if (compilerPluginDataBuilder_ == null) {
          ensureCompilerPluginDataIsMutable();
          compilerPluginData_.set(index, builderForValue.build());
          onChanged();
        } else {
          compilerPluginDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public Builder addCompilerPluginData(org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData value) {
        if (compilerPluginDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCompilerPluginDataIsMutable();
          compilerPluginData_.add(value);
          onChanged();
        } else {
          compilerPluginDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public Builder addCompilerPluginData(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData value) {
        if (compilerPluginDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCompilerPluginDataIsMutable();
          compilerPluginData_.add(index, value);
          onChanged();
        } else {
          compilerPluginDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public Builder addCompilerPluginData(
          org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.Builder builderForValue) {
        if (compilerPluginDataBuilder_ == null) {
          ensureCompilerPluginDataIsMutable();
          compilerPluginData_.add(builderForValue.build());
          onChanged();
        } else {
          compilerPluginDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public Builder addCompilerPluginData(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.Builder builderForValue) {
        if (compilerPluginDataBuilder_ == null) {
          ensureCompilerPluginDataIsMutable();
          compilerPluginData_.add(index, builderForValue.build());
          onChanged();
        } else {
          compilerPluginDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public Builder addAllCompilerPluginData(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData> values) {
        if (compilerPluginDataBuilder_ == null) {
          ensureCompilerPluginDataIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, compilerPluginData_);
          onChanged();
        } else {
          compilerPluginDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public Builder clearCompilerPluginData() {
        if (compilerPluginDataBuilder_ == null) {
          compilerPluginData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          compilerPluginDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public Builder removeCompilerPluginData(int index) {
        if (compilerPluginDataBuilder_ == null) {
          ensureCompilerPluginDataIsMutable();
          compilerPluginData_.remove(index);
          onChanged();
        } else {
          compilerPluginDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.Builder getCompilerPluginDataBuilder(
          int index) {
        return getCompilerPluginDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginDataOrBuilder getCompilerPluginDataOrBuilder(
          int index) {
        if (compilerPluginDataBuilder_ == null) {
          return compilerPluginData_.get(index);  } else {
          return compilerPluginDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginDataOrBuilder> 
           getCompilerPluginDataOrBuilderList() {
        if (compilerPluginDataBuilder_ != null) {
          return compilerPluginDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(compilerPluginData_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.Builder addCompilerPluginDataBuilder() {
        return getCompilerPluginDataFieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.Builder addCompilerPluginDataBuilder(
          int index) {
        return getCompilerPluginDataFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.Builder> 
           getCompilerPluginDataBuilderList() {
        return getCompilerPluginDataFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginDataOrBuilder> 
          getCompilerPluginDataFieldBuilder() {
        if (compilerPluginDataBuilder_ == null) {
          compilerPluginDataBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginDataOrBuilder>(
                  compilerPluginData_,
                  ((bitField0_ & 0x00000008) != 0),
                  getParentForChildren(),
                  isClean());
          compilerPluginData_ = null;
        }
        return compilerPluginDataBuilder_;
      }

      private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> annotation_ =
        java.util.Collections.emptyList();
      private void ensureAnnotationIsMutable() {
        if (!((bitField0_ & 0x00000010) != 0)) {
          annotation_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation>(annotation_);
          bitField0_ |= 0x00000010;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Annotation, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> annotationBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 3;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> getAnnotationList() {
        if (annotationBuilder_ == null) {
          return java.util.Collections.unmodifiableList(annotation_);
        } else {
          return annotationBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 3;</code>
       */
      public int getAnnotationCount() {
        if (annotationBuilder_ == null) {
          return annotation_.size();
        } else {
          return annotationBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 3;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getAnnotation(int index) {
        if (annotationBuilder_ == null) {
          return annotation_.get(index);
        } else {
          return annotationBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 3;</code>
       */
      public Builder setAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        if (annotationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAnnotationIsMutable();
          annotation_.set(index, value);
          onChanged();
        } else {
          annotationBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 3;</code>
       */
      public Builder setAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        if (annotationBuilder_ == null) {
          ensureAnnotationIsMutable();
          annotation_.set(index, builderForValue.build());
          onChanged();
        } else {
          annotationBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 3;</code>
       */
      public Builder addAnnotation(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        if (annotationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAnnotationIsMutable();
          annotation_.add(value);
          onChanged();
        } else {
          annotationBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 3;</code>
       */
      public Builder addAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        if (annotationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAnnotationIsMutable();
          annotation_.add(index, value);
          onChanged();
        } else {
          annotationBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 3;</code>
       */
      public Builder addAnnotation(
          org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        if (annotationBuilder_ == null) {
          ensureAnnotationIsMutable();
          annotation_.add(builderForValue.build());
          onChanged();
        } else {
          annotationBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 3;</code>
       */
      public Builder addAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        if (annotationBuilder_ == null) {
          ensureAnnotationIsMutable();
          annotation_.add(index, builderForValue.build());
          onChanged();
        } else {
          annotationBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 3;</code>
       */
      public Builder addAllAnnotation(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> values) {
        if (annotationBuilder_ == null) {
          ensureAnnotationIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, annotation_);
          onChanged();
        } else {
          annotationBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 3;</code>
       */
      public Builder clearAnnotation() {
        if (annotationBuilder_ == null) {
          annotation_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          annotationBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 3;</code>
       */
      public Builder removeAnnotation(int index) {
        if (annotationBuilder_ == null) {
          ensureAnnotationIsMutable();
          annotation_.remove(index);
          onChanged();
        } else {
          annotationBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 3;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder getAnnotationBuilder(
          int index) {
        return getAnnotationFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 3;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder getAnnotationOrBuilder(
          int index) {
        if (annotationBuilder_ == null) {
          return annotation_.get(index);  } else {
          return annotationBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 3;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> 
           getAnnotationOrBuilderList() {
        if (annotationBuilder_ != null) {
          return annotationBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(annotation_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 3;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder addAnnotationBuilder() {
        return getAnnotationFieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 3;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder addAnnotationBuilder(
          int index) {
        return getAnnotationFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 3;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder> 
           getAnnotationBuilderList() {
        return getAnnotationFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Annotation, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> 
          getAnnotationFieldBuilder() {
        if (annotationBuilder_ == null) {
          annotationBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.ProtoBuf.Annotation, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder>(
                  annotation_,
                  ((bitField0_ & 0x00000010) != 0),
                  getParentForChildren(),
                  isClean());
          annotation_ = null;
        }
        return annotationBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.Constructor)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.Constructor)
    private static final org.jetbrains.kotlin.metadata.ProtoBuf.Constructor DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.metadata.ProtoBuf.Constructor();
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Constructor getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<Constructor>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<Constructor>() {
      @java.lang.Override
      public Constructor parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<Constructor> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<Constructor> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Constructor getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface FunctionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.Function)
      org.jetbrains.kotlin.protobuf.GeneratedMessage.
          ExtendableMessageOrBuilder<Function> {

    /**
     * <pre>
     *
     * hasAnnotations
     * Visibility
     * Modality
     * MemberKind
     * isOperator
     * isInfix
     * isInline
     * isTailrec
     * isExternal
     * isSuspend
     * isExpect
     * hasNonStableParameterNames
     * </pre>
     *
     * <code>int32 flags = 9 [default = 6];</code>
     * @return Whether the flags field is set.
     */
    boolean hasFlags();
    /**
     * <pre>
     *
     * hasAnnotations
     * Visibility
     * Modality
     * MemberKind
     * isOperator
     * isInfix
     * isInline
     * isTailrec
     * isExternal
     * isSuspend
     * isExpect
     * hasNonStableParameterNames
     * </pre>
     *
     * <code>int32 flags = 9 [default = 6];</code>
     * @return The flags.
     */
    int getFlags();

    /**
     * <code>int32 old_flags = 1 [default = 6];</code>
     * @return Whether the oldFlags field is set.
     */
    boolean hasOldFlags();
    /**
     * <code>int32 old_flags = 1 [default = 6];</code>
     * @return The oldFlags.
     */
    int getOldFlags();

    /**
     * <code>int32 name = 2 [features = { ... }</code>
     * @return Whether the name field is set.
     */
    boolean hasName();
    /**
     * <code>int32 name = 2 [features = { ... }</code>
     * @return The name.
     */
    int getName();

    /**
     * <code>.org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
     * @return Whether the returnType field is set.
     */
    boolean hasReturnType();
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
     * @return The returnType.
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Type getReturnType();
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder getReturnTypeOrBuilder();

    /**
     * <code>int32 return_type_id = 7 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return Whether the returnTypeId field is set.
     */
    boolean hasReturnTypeId();
    /**
     * <code>int32 return_type_id = 7 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return The returnTypeId.
     */
    int getReturnTypeId();

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter> 
        getTypeParameterList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter getTypeParameter(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
     */
    int getTypeParameterCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameterOrBuilder> 
        getTypeParameterOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameterOrBuilder getTypeParameterOrBuilder(
        int index);

    /**
     * <code>.org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
     * @return Whether the receiverType field is set.
     */
    boolean hasReceiverType();
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
     * @return The receiverType.
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Type getReceiverType();
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder getReceiverTypeOrBuilder();

    /**
     * <code>int32 receiver_type_id = 8 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return Whether the receiverTypeId field is set.
     */
    boolean hasReceiverTypeId();
    /**
     * <code>int32 receiver_type_id = 8 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return The receiverTypeId.
     */
    int getReceiverTypeId();

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 10;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Type> 
        getContextReceiverTypeList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 10;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Type getContextReceiverType(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 10;</code>
     */
    int getContextReceiverTypeCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 10;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder> 
        getContextReceiverTypeOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 10;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder getContextReceiverTypeOrBuilder(
        int index);

    /**
     * <code>repeated int32 context_receiver_type_id = 11 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return A list containing the contextReceiverTypeId.
     */
    java.util.List<java.lang.Integer> getContextReceiverTypeIdList();
    /**
     * <code>repeated int32 context_receiver_type_id = 11 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return The count of contextReceiverTypeId.
     */
    int getContextReceiverTypeIdCount();
    /**
     * <code>repeated int32 context_receiver_type_id = 11 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @param index The index of the element to return.
     * @return The contextReceiverTypeId at the given index.
     */
    int getContextReceiverTypeId(int index);

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 13;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter> 
        getContextParameterList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 13;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter getContextParameter(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 13;</code>
     */
    int getContextParameterCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 13;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameterOrBuilder> 
        getContextParameterOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 13;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameterOrBuilder getContextParameterOrBuilder(
        int index);

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter> 
        getValueParameterList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter getValueParameter(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
     */
    int getValueParameterCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameterOrBuilder> 
        getValueParameterOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameterOrBuilder getValueParameterOrBuilder(
        int index);

    /**
     * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
     * @return Whether the typeTable field is set.
     */
    boolean hasTypeTable();
    /**
     * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
     * @return The typeTable.
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable getTypeTable();
    /**
     * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.TypeTableOrBuilder getTypeTableOrBuilder();

    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     * @return A list containing the versionRequirement.
     */
    java.util.List<java.lang.Integer> getVersionRequirementList();
    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     * @return The count of versionRequirement.
     */
    int getVersionRequirementCount();
    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     * @param index The index of the element to return.
     * @return The versionRequirement at the given index.
     */
    int getVersionRequirement(int index);

    /**
     * <code>.org.jetbrains.kotlin.metadata.Contract contract = 32;</code>
     * @return Whether the contract field is set.
     */
    boolean hasContract();
    /**
     * <code>.org.jetbrains.kotlin.metadata.Contract contract = 32;</code>
     * @return The contract.
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Contract getContract();
    /**
     * <code>.org.jetbrains.kotlin.metadata.Contract contract = 32;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.ContractOrBuilder getContractOrBuilder();

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData> 
        getCompilerPluginDataList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData getCompilerPluginData(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
     */
    int getCompilerPluginDataCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginDataOrBuilder> 
        getCompilerPluginDataOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginDataOrBuilder getCompilerPluginDataOrBuilder(
        int index);

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 12;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> 
        getAnnotationList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 12;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getAnnotation(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 12;</code>
     */
    int getAnnotationCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 12;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> 
        getAnnotationOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 12;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder getAnnotationOrBuilder(
        int index);

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 34;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> 
        getExtensionReceiverAnnotationList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 34;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getExtensionReceiverAnnotation(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 34;</code>
     */
    int getExtensionReceiverAnnotationCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 34;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> 
        getExtensionReceiverAnnotationOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 34;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder getExtensionReceiverAnnotationOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.metadata.Function}
   */
  public static final class Function extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage.ExtendableMessage<
        Function> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.Function)
      FunctionOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        Function.class.getName());
    }
    // Use Function.newBuilder() to construct.
    private Function(org.jetbrains.kotlin.protobuf.GeneratedMessage.ExtendableBuilder<org.jetbrains.kotlin.metadata.ProtoBuf.Function, ?> builder) {
      super(builder);
    }
    private Function() {
      flags_ = 6;
      oldFlags_ = 6;
      typeParameter_ = java.util.Collections.emptyList();
      contextReceiverType_ = java.util.Collections.emptyList();
      contextReceiverTypeId_ = emptyIntList();
      contextParameter_ = java.util.Collections.emptyList();
      valueParameter_ = java.util.Collections.emptyList();
      versionRequirement_ = emptyIntList();
      compilerPluginData_ = java.util.Collections.emptyList();
      annotation_ = java.util.Collections.emptyList();
      extensionReceiverAnnotation_ = java.util.Collections.emptyList();
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Function_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Function_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.metadata.ProtoBuf.Function.class, org.jetbrains.kotlin.metadata.ProtoBuf.Function.Builder.class);
    }

    private int bitField0_;
    public static final int FLAGS_FIELD_NUMBER = 9;
    private int flags_ = 6;
    /**
     * <pre>
     *
     * hasAnnotations
     * Visibility
     * Modality
     * MemberKind
     * isOperator
     * isInfix
     * isInline
     * isTailrec
     * isExternal
     * isSuspend
     * isExpect
     * hasNonStableParameterNames
     * </pre>
     *
     * <code>int32 flags = 9 [default = 6];</code>
     * @return Whether the flags field is set.
     */
    @java.lang.Override
    public boolean hasFlags() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     *
     * hasAnnotations
     * Visibility
     * Modality
     * MemberKind
     * isOperator
     * isInfix
     * isInline
     * isTailrec
     * isExternal
     * isSuspend
     * isExpect
     * hasNonStableParameterNames
     * </pre>
     *
     * <code>int32 flags = 9 [default = 6];</code>
     * @return The flags.
     */
    @java.lang.Override
    public int getFlags() {
      return flags_;
    }

    public static final int OLD_FLAGS_FIELD_NUMBER = 1;
    private int oldFlags_ = 6;
    /**
     * <code>int32 old_flags = 1 [default = 6];</code>
     * @return Whether the oldFlags field is set.
     */
    @java.lang.Override
    public boolean hasOldFlags() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>int32 old_flags = 1 [default = 6];</code>
     * @return The oldFlags.
     */
    @java.lang.Override
    public int getOldFlags() {
      return oldFlags_;
    }

    public static final int NAME_FIELD_NUMBER = 2;
    private int name_ = 0;
    /**
     * <code>int32 name = 2 [features = { ... }</code>
     * @return Whether the name field is set.
     */
    @java.lang.Override
    public boolean hasName() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>int32 name = 2 [features = { ... }</code>
     * @return The name.
     */
    @java.lang.Override
    public int getName() {
      return name_;
    }

    public static final int RETURN_TYPE_FIELD_NUMBER = 3;
    private org.jetbrains.kotlin.metadata.ProtoBuf.Type returnType_;
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
     * @return Whether the returnType field is set.
     */
    @java.lang.Override
    public boolean hasReturnType() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
     * @return The returnType.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Type getReturnType() {
      return returnType_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance() : returnType_;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder getReturnTypeOrBuilder() {
      return returnType_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance() : returnType_;
    }

    public static final int RETURN_TYPE_ID_FIELD_NUMBER = 7;
    private int returnTypeId_ = 0;
    /**
     * <code>int32 return_type_id = 7 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return Whether the returnTypeId field is set.
     */
    @java.lang.Override
    public boolean hasReturnTypeId() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <code>int32 return_type_id = 7 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return The returnTypeId.
     */
    @java.lang.Override
    public int getReturnTypeId() {
      return returnTypeId_;
    }

    public static final int TYPE_PARAMETER_FIELD_NUMBER = 4;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter> typeParameter_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter> getTypeParameterList() {
      return typeParameter_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameterOrBuilder> 
        getTypeParameterOrBuilderList() {
      return typeParameter_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
     */
    @java.lang.Override
    public int getTypeParameterCount() {
      return typeParameter_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter getTypeParameter(int index) {
      return typeParameter_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameterOrBuilder getTypeParameterOrBuilder(
        int index) {
      return typeParameter_.get(index);
    }

    public static final int RECEIVER_TYPE_FIELD_NUMBER = 5;
    private org.jetbrains.kotlin.metadata.ProtoBuf.Type receiverType_;
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
     * @return Whether the receiverType field is set.
     */
    @java.lang.Override
    public boolean hasReceiverType() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
     * @return The receiverType.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Type getReceiverType() {
      return receiverType_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance() : receiverType_;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder getReceiverTypeOrBuilder() {
      return receiverType_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance() : receiverType_;
    }

    public static final int RECEIVER_TYPE_ID_FIELD_NUMBER = 8;
    private int receiverTypeId_ = 0;
    /**
     * <code>int32 receiver_type_id = 8 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return Whether the receiverTypeId field is set.
     */
    @java.lang.Override
    public boolean hasReceiverTypeId() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <code>int32 receiver_type_id = 8 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return The receiverTypeId.
     */
    @java.lang.Override
    public int getReceiverTypeId() {
      return receiverTypeId_;
    }

    public static final int CONTEXT_RECEIVER_TYPE_FIELD_NUMBER = 10;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Type> contextReceiverType_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 10;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Type> getContextReceiverTypeList() {
      return contextReceiverType_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 10;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder> 
        getContextReceiverTypeOrBuilderList() {
      return contextReceiverType_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 10;</code>
     */
    @java.lang.Override
    public int getContextReceiverTypeCount() {
      return contextReceiverType_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 10;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Type getContextReceiverType(int index) {
      return contextReceiverType_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 10;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder getContextReceiverTypeOrBuilder(
        int index) {
      return contextReceiverType_.get(index);
    }

    public static final int CONTEXT_RECEIVER_TYPE_ID_FIELD_NUMBER = 11;
    @SuppressWarnings("serial")
    private org.jetbrains.kotlin.protobuf.Internal.IntList contextReceiverTypeId_ =
        emptyIntList();
    /**
     * <code>repeated int32 context_receiver_type_id = 11 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return A list containing the contextReceiverTypeId.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getContextReceiverTypeIdList() {
      return contextReceiverTypeId_;
    }
    /**
     * <code>repeated int32 context_receiver_type_id = 11 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return The count of contextReceiverTypeId.
     */
    public int getContextReceiverTypeIdCount() {
      return contextReceiverTypeId_.size();
    }
    /**
     * <code>repeated int32 context_receiver_type_id = 11 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @param index The index of the element to return.
     * @return The contextReceiverTypeId at the given index.
     */
    public int getContextReceiverTypeId(int index) {
      return contextReceiverTypeId_.getInt(index);
    }
    private int contextReceiverTypeIdMemoizedSerializedSize = -1;

    public static final int CONTEXT_PARAMETER_FIELD_NUMBER = 13;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter> contextParameter_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 13;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter> getContextParameterList() {
      return contextParameter_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 13;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameterOrBuilder> 
        getContextParameterOrBuilderList() {
      return contextParameter_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 13;</code>
     */
    @java.lang.Override
    public int getContextParameterCount() {
      return contextParameter_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 13;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter getContextParameter(int index) {
      return contextParameter_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 13;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameterOrBuilder getContextParameterOrBuilder(
        int index) {
      return contextParameter_.get(index);
    }

    public static final int VALUE_PARAMETER_FIELD_NUMBER = 6;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter> valueParameter_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter> getValueParameterList() {
      return valueParameter_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameterOrBuilder> 
        getValueParameterOrBuilderList() {
      return valueParameter_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
     */
    @java.lang.Override
    public int getValueParameterCount() {
      return valueParameter_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter getValueParameter(int index) {
      return valueParameter_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameterOrBuilder getValueParameterOrBuilder(
        int index) {
      return valueParameter_.get(index);
    }

    public static final int TYPE_TABLE_FIELD_NUMBER = 30;
    private org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable typeTable_;
    /**
     * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
     * @return Whether the typeTable field is set.
     */
    @java.lang.Override
    public boolean hasTypeTable() {
      return ((bitField0_ & 0x00000080) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
     * @return The typeTable.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable getTypeTable() {
      return typeTable_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable.getDefaultInstance() : typeTable_;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.TypeTableOrBuilder getTypeTableOrBuilder() {
      return typeTable_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable.getDefaultInstance() : typeTable_;
    }

    public static final int VERSION_REQUIREMENT_FIELD_NUMBER = 31;
    @SuppressWarnings("serial")
    private org.jetbrains.kotlin.protobuf.Internal.IntList versionRequirement_ =
        emptyIntList();
    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     * @return A list containing the versionRequirement.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getVersionRequirementList() {
      return versionRequirement_;
    }
    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     * @return The count of versionRequirement.
     */
    public int getVersionRequirementCount() {
      return versionRequirement_.size();
    }
    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     * @param index The index of the element to return.
     * @return The versionRequirement at the given index.
     */
    public int getVersionRequirement(int index) {
      return versionRequirement_.getInt(index);
    }

    public static final int CONTRACT_FIELD_NUMBER = 32;
    private org.jetbrains.kotlin.metadata.ProtoBuf.Contract contract_;
    /**
     * <code>.org.jetbrains.kotlin.metadata.Contract contract = 32;</code>
     * @return Whether the contract field is set.
     */
    @java.lang.Override
    public boolean hasContract() {
      return ((bitField0_ & 0x00000100) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Contract contract = 32;</code>
     * @return The contract.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Contract getContract() {
      return contract_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Contract.getDefaultInstance() : contract_;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Contract contract = 32;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.ContractOrBuilder getContractOrBuilder() {
      return contract_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Contract.getDefaultInstance() : contract_;
    }

    public static final int COMPILER_PLUGIN_DATA_FIELD_NUMBER = 33;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData> compilerPluginData_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData> getCompilerPluginDataList() {
      return compilerPluginData_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginDataOrBuilder> 
        getCompilerPluginDataOrBuilderList() {
      return compilerPluginData_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
     */
    @java.lang.Override
    public int getCompilerPluginDataCount() {
      return compilerPluginData_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData getCompilerPluginData(int index) {
      return compilerPluginData_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginDataOrBuilder getCompilerPluginDataOrBuilder(
        int index) {
      return compilerPluginData_.get(index);
    }

    public static final int ANNOTATION_FIELD_NUMBER = 12;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> annotation_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 12;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> getAnnotationList() {
      return annotation_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 12;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> 
        getAnnotationOrBuilderList() {
      return annotation_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 12;</code>
     */
    @java.lang.Override
    public int getAnnotationCount() {
      return annotation_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 12;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getAnnotation(int index) {
      return annotation_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 12;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder getAnnotationOrBuilder(
        int index) {
      return annotation_.get(index);
    }

    public static final int EXTENSION_RECEIVER_ANNOTATION_FIELD_NUMBER = 34;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> extensionReceiverAnnotation_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 34;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> getExtensionReceiverAnnotationList() {
      return extensionReceiverAnnotation_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 34;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> 
        getExtensionReceiverAnnotationOrBuilderList() {
      return extensionReceiverAnnotation_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 34;</code>
     */
    @java.lang.Override
    public int getExtensionReceiverAnnotationCount() {
      return extensionReceiverAnnotation_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 34;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getExtensionReceiverAnnotation(int index) {
      return extensionReceiverAnnotation_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 34;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder getExtensionReceiverAnnotationOrBuilder(
        int index) {
      return extensionReceiverAnnotation_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasName()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasReturnType()) {
        if (!getReturnType().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getTypeParameterCount(); i++) {
        if (!getTypeParameter(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasReceiverType()) {
        if (!getReceiverType().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getContextReceiverTypeCount(); i++) {
        if (!getContextReceiverType(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getContextParameterCount(); i++) {
        if (!getContextParameter(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getValueParameterCount(); i++) {
        if (!getValueParameter(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasTypeTable()) {
        if (!getTypeTable().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasContract()) {
        if (!getContract().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getCompilerPluginDataCount(); i++) {
        if (!getCompilerPluginData(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getAnnotationCount(); i++) {
        if (!getAnnotation(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getExtensionReceiverAnnotationCount(); i++) {
        if (!getExtensionReceiverAnnotation(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (!extensionsAreInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      org.jetbrains.kotlin.protobuf.GeneratedMessage
        .ExtendableMessage.ExtensionSerializer
          extensionWriter = newExtensionSerializer();
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeInt32(1, oldFlags_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeInt32(2, name_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeMessage(3, getReturnType());
      }
      for (int i = 0; i < typeParameter_.size(); i++) {
        output.writeMessage(4, typeParameter_.get(i));
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        output.writeMessage(5, getReceiverType());
      }
      for (int i = 0; i < valueParameter_.size(); i++) {
        output.writeMessage(6, valueParameter_.get(i));
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        output.writeInt32(7, returnTypeId_);
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        output.writeInt32(8, receiverTypeId_);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeInt32(9, flags_);
      }
      for (int i = 0; i < contextReceiverType_.size(); i++) {
        output.writeMessage(10, contextReceiverType_.get(i));
      }
      if (getContextReceiverTypeIdList().size() > 0) {
        output.writeUInt32NoTag(90);
        output.writeUInt32NoTag(contextReceiverTypeIdMemoizedSerializedSize);
      }
      for (int i = 0; i < contextReceiverTypeId_.size(); i++) {
        output.writeInt32NoTag(contextReceiverTypeId_.getInt(i));
      }
      for (int i = 0; i < annotation_.size(); i++) {
        output.writeMessage(12, annotation_.get(i));
      }
      for (int i = 0; i < contextParameter_.size(); i++) {
        output.writeMessage(13, contextParameter_.get(i));
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        output.writeMessage(30, getTypeTable());
      }
      for (int i = 0; i < versionRequirement_.size(); i++) {
        output.writeInt32(31, versionRequirement_.getInt(i));
      }
      if (((bitField0_ & 0x00000100) != 0)) {
        output.writeMessage(32, getContract());
      }
      for (int i = 0; i < compilerPluginData_.size(); i++) {
        output.writeMessage(33, compilerPluginData_.get(i));
      }
      for (int i = 0; i < extensionReceiverAnnotation_.size(); i++) {
        output.writeMessage(34, extensionReceiverAnnotation_.get(i));
      }
      extensionWriter.writeUntil(19000, output);
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000002) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(1, oldFlags_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(2, name_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(3, getReturnType());
      }
      for (int i = 0; i < typeParameter_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(4, typeParameter_.get(i));
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(5, getReceiverType());
      }
      for (int i = 0; i < valueParameter_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(6, valueParameter_.get(i));
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(7, returnTypeId_);
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(8, receiverTypeId_);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(9, flags_);
      }
      for (int i = 0; i < contextReceiverType_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(10, contextReceiverType_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < contextReceiverTypeId_.size(); i++) {
          dataSize += org.jetbrains.kotlin.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(contextReceiverTypeId_.getInt(i));
        }
        size += dataSize;
        if (!getContextReceiverTypeIdList().isEmpty()) {
          size += 1;
          size += org.jetbrains.kotlin.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        contextReceiverTypeIdMemoizedSerializedSize = dataSize;
      }
      for (int i = 0; i < annotation_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(12, annotation_.get(i));
      }
      for (int i = 0; i < contextParameter_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(13, contextParameter_.get(i));
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(30, getTypeTable());
      }
      {
        int dataSize = 0;
        for (int i = 0; i < versionRequirement_.size(); i++) {
          dataSize += org.jetbrains.kotlin.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(versionRequirement_.getInt(i));
        }
        size += dataSize;
        size += 2 * getVersionRequirementList().size();
      }
      if (((bitField0_ & 0x00000100) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(32, getContract());
      }
      for (int i = 0; i < compilerPluginData_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(33, compilerPluginData_.get(i));
      }
      for (int i = 0; i < extensionReceiverAnnotation_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(34, extensionReceiverAnnotation_.get(i));
      }
      size += extensionsSerializedSize();
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.metadata.ProtoBuf.Function)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.metadata.ProtoBuf.Function other = (org.jetbrains.kotlin.metadata.ProtoBuf.Function) obj;

      if (hasFlags() != other.hasFlags()) return false;
      if (hasFlags()) {
        if (getFlags()
            != other.getFlags()) return false;
      }
      if (hasOldFlags() != other.hasOldFlags()) return false;
      if (hasOldFlags()) {
        if (getOldFlags()
            != other.getOldFlags()) return false;
      }
      if (hasName() != other.hasName()) return false;
      if (hasName()) {
        if (getName()
            != other.getName()) return false;
      }
      if (hasReturnType() != other.hasReturnType()) return false;
      if (hasReturnType()) {
        if (!getReturnType()
            .equals(other.getReturnType())) return false;
      }
      if (hasReturnTypeId() != other.hasReturnTypeId()) return false;
      if (hasReturnTypeId()) {
        if (getReturnTypeId()
            != other.getReturnTypeId()) return false;
      }
      if (!getTypeParameterList()
          .equals(other.getTypeParameterList())) return false;
      if (hasReceiverType() != other.hasReceiverType()) return false;
      if (hasReceiverType()) {
        if (!getReceiverType()
            .equals(other.getReceiverType())) return false;
      }
      if (hasReceiverTypeId() != other.hasReceiverTypeId()) return false;
      if (hasReceiverTypeId()) {
        if (getReceiverTypeId()
            != other.getReceiverTypeId()) return false;
      }
      if (!getContextReceiverTypeList()
          .equals(other.getContextReceiverTypeList())) return false;
      if (!getContextReceiverTypeIdList()
          .equals(other.getContextReceiverTypeIdList())) return false;
      if (!getContextParameterList()
          .equals(other.getContextParameterList())) return false;
      if (!getValueParameterList()
          .equals(other.getValueParameterList())) return false;
      if (hasTypeTable() != other.hasTypeTable()) return false;
      if (hasTypeTable()) {
        if (!getTypeTable()
            .equals(other.getTypeTable())) return false;
      }
      if (!getVersionRequirementList()
          .equals(other.getVersionRequirementList())) return false;
      if (hasContract() != other.hasContract()) return false;
      if (hasContract()) {
        if (!getContract()
            .equals(other.getContract())) return false;
      }
      if (!getCompilerPluginDataList()
          .equals(other.getCompilerPluginDataList())) return false;
      if (!getAnnotationList()
          .equals(other.getAnnotationList())) return false;
      if (!getExtensionReceiverAnnotationList()
          .equals(other.getExtensionReceiverAnnotationList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      if (!getExtensionFields().equals(other.getExtensionFields()))
        return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasFlags()) {
        hash = (37 * hash) + FLAGS_FIELD_NUMBER;
        hash = (53 * hash) + getFlags();
      }
      if (hasOldFlags()) {
        hash = (37 * hash) + OLD_FLAGS_FIELD_NUMBER;
        hash = (53 * hash) + getOldFlags();
      }
      if (hasName()) {
        hash = (37 * hash) + NAME_FIELD_NUMBER;
        hash = (53 * hash) + getName();
      }
      if (hasReturnType()) {
        hash = (37 * hash) + RETURN_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + getReturnType().hashCode();
      }
      if (hasReturnTypeId()) {
        hash = (37 * hash) + RETURN_TYPE_ID_FIELD_NUMBER;
        hash = (53 * hash) + getReturnTypeId();
      }
      if (getTypeParameterCount() > 0) {
        hash = (37 * hash) + TYPE_PARAMETER_FIELD_NUMBER;
        hash = (53 * hash) + getTypeParameterList().hashCode();
      }
      if (hasReceiverType()) {
        hash = (37 * hash) + RECEIVER_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + getReceiverType().hashCode();
      }
      if (hasReceiverTypeId()) {
        hash = (37 * hash) + RECEIVER_TYPE_ID_FIELD_NUMBER;
        hash = (53 * hash) + getReceiverTypeId();
      }
      if (getContextReceiverTypeCount() > 0) {
        hash = (37 * hash) + CONTEXT_RECEIVER_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + getContextReceiverTypeList().hashCode();
      }
      if (getContextReceiverTypeIdCount() > 0) {
        hash = (37 * hash) + CONTEXT_RECEIVER_TYPE_ID_FIELD_NUMBER;
        hash = (53 * hash) + getContextReceiverTypeIdList().hashCode();
      }
      if (getContextParameterCount() > 0) {
        hash = (37 * hash) + CONTEXT_PARAMETER_FIELD_NUMBER;
        hash = (53 * hash) + getContextParameterList().hashCode();
      }
      if (getValueParameterCount() > 0) {
        hash = (37 * hash) + VALUE_PARAMETER_FIELD_NUMBER;
        hash = (53 * hash) + getValueParameterList().hashCode();
      }
      if (hasTypeTable()) {
        hash = (37 * hash) + TYPE_TABLE_FIELD_NUMBER;
        hash = (53 * hash) + getTypeTable().hashCode();
      }
      if (getVersionRequirementCount() > 0) {
        hash = (37 * hash) + VERSION_REQUIREMENT_FIELD_NUMBER;
        hash = (53 * hash) + getVersionRequirementList().hashCode();
      }
      if (hasContract()) {
        hash = (37 * hash) + CONTRACT_FIELD_NUMBER;
        hash = (53 * hash) + getContract().hashCode();
      }
      if (getCompilerPluginDataCount() > 0) {
        hash = (37 * hash) + COMPILER_PLUGIN_DATA_FIELD_NUMBER;
        hash = (53 * hash) + getCompilerPluginDataList().hashCode();
      }
      if (getAnnotationCount() > 0) {
        hash = (37 * hash) + ANNOTATION_FIELD_NUMBER;
        hash = (53 * hash) + getAnnotationList().hashCode();
      }
      if (getExtensionReceiverAnnotationCount() > 0) {
        hash = (37 * hash) + EXTENSION_RECEIVER_ANNOTATION_FIELD_NUMBER;
        hash = (53 * hash) + getExtensionReceiverAnnotationList().hashCode();
      }
      hash = hashFields(hash, getExtensionFields());
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Function parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Function parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Function parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Function parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Function parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Function parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Function parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Function parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Function parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Function parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Function parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Function parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.metadata.ProtoBuf.Function prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.Function}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.ExtendableBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Function, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.Function)
        org.jetbrains.kotlin.metadata.ProtoBuf.FunctionOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Function_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Function_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.metadata.ProtoBuf.Function.class, org.jetbrains.kotlin.metadata.ProtoBuf.Function.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.metadata.ProtoBuf.Function.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getReturnTypeFieldBuilder();
          getTypeParameterFieldBuilder();
          getReceiverTypeFieldBuilder();
          getContextReceiverTypeFieldBuilder();
          getContextParameterFieldBuilder();
          getValueParameterFieldBuilder();
          getTypeTableFieldBuilder();
          getContractFieldBuilder();
          getCompilerPluginDataFieldBuilder();
          getAnnotationFieldBuilder();
          getExtensionReceiverAnnotationFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        flags_ = 6;
        oldFlags_ = 6;
        name_ = 0;
        returnType_ = null;
        if (returnTypeBuilder_ != null) {
          returnTypeBuilder_.dispose();
          returnTypeBuilder_ = null;
        }
        returnTypeId_ = 0;
        if (typeParameterBuilder_ == null) {
          typeParameter_ = java.util.Collections.emptyList();
        } else {
          typeParameter_ = null;
          typeParameterBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        receiverType_ = null;
        if (receiverTypeBuilder_ != null) {
          receiverTypeBuilder_.dispose();
          receiverTypeBuilder_ = null;
        }
        receiverTypeId_ = 0;
        if (contextReceiverTypeBuilder_ == null) {
          contextReceiverType_ = java.util.Collections.emptyList();
        } else {
          contextReceiverType_ = null;
          contextReceiverTypeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000100);
        contextReceiverTypeId_ = emptyIntList();
        if (contextParameterBuilder_ == null) {
          contextParameter_ = java.util.Collections.emptyList();
        } else {
          contextParameter_ = null;
          contextParameterBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000400);
        if (valueParameterBuilder_ == null) {
          valueParameter_ = java.util.Collections.emptyList();
        } else {
          valueParameter_ = null;
          valueParameterBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000800);
        typeTable_ = null;
        if (typeTableBuilder_ != null) {
          typeTableBuilder_.dispose();
          typeTableBuilder_ = null;
        }
        versionRequirement_ = emptyIntList();
        contract_ = null;
        if (contractBuilder_ != null) {
          contractBuilder_.dispose();
          contractBuilder_ = null;
        }
        if (compilerPluginDataBuilder_ == null) {
          compilerPluginData_ = java.util.Collections.emptyList();
        } else {
          compilerPluginData_ = null;
          compilerPluginDataBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00008000);
        if (annotationBuilder_ == null) {
          annotation_ = java.util.Collections.emptyList();
        } else {
          annotation_ = null;
          annotationBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00010000);
        if (extensionReceiverAnnotationBuilder_ == null) {
          extensionReceiverAnnotation_ = java.util.Collections.emptyList();
        } else {
          extensionReceiverAnnotation_ = null;
          extensionReceiverAnnotationBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00020000);
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Function_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Function getDefaultInstanceForType() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.Function.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Function build() {
        org.jetbrains.kotlin.metadata.ProtoBuf.Function result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Function buildPartial() {
        org.jetbrains.kotlin.metadata.ProtoBuf.Function result = new org.jetbrains.kotlin.metadata.ProtoBuf.Function(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(org.jetbrains.kotlin.metadata.ProtoBuf.Function result) {
        if (typeParameterBuilder_ == null) {
          if (((bitField0_ & 0x00000020) != 0)) {
            typeParameter_ = java.util.Collections.unmodifiableList(typeParameter_);
            bitField0_ = (bitField0_ & ~0x00000020);
          }
          result.typeParameter_ = typeParameter_;
        } else {
          result.typeParameter_ = typeParameterBuilder_.build();
        }
        if (contextReceiverTypeBuilder_ == null) {
          if (((bitField0_ & 0x00000100) != 0)) {
            contextReceiverType_ = java.util.Collections.unmodifiableList(contextReceiverType_);
            bitField0_ = (bitField0_ & ~0x00000100);
          }
          result.contextReceiverType_ = contextReceiverType_;
        } else {
          result.contextReceiverType_ = contextReceiverTypeBuilder_.build();
        }
        if (contextParameterBuilder_ == null) {
          if (((bitField0_ & 0x00000400) != 0)) {
            contextParameter_ = java.util.Collections.unmodifiableList(contextParameter_);
            bitField0_ = (bitField0_ & ~0x00000400);
          }
          result.contextParameter_ = contextParameter_;
        } else {
          result.contextParameter_ = contextParameterBuilder_.build();
        }
        if (valueParameterBuilder_ == null) {
          if (((bitField0_ & 0x00000800) != 0)) {
            valueParameter_ = java.util.Collections.unmodifiableList(valueParameter_);
            bitField0_ = (bitField0_ & ~0x00000800);
          }
          result.valueParameter_ = valueParameter_;
        } else {
          result.valueParameter_ = valueParameterBuilder_.build();
        }
        if (compilerPluginDataBuilder_ == null) {
          if (((bitField0_ & 0x00008000) != 0)) {
            compilerPluginData_ = java.util.Collections.unmodifiableList(compilerPluginData_);
            bitField0_ = (bitField0_ & ~0x00008000);
          }
          result.compilerPluginData_ = compilerPluginData_;
        } else {
          result.compilerPluginData_ = compilerPluginDataBuilder_.build();
        }
        if (annotationBuilder_ == null) {
          if (((bitField0_ & 0x00010000) != 0)) {
            annotation_ = java.util.Collections.unmodifiableList(annotation_);
            bitField0_ = (bitField0_ & ~0x00010000);
          }
          result.annotation_ = annotation_;
        } else {
          result.annotation_ = annotationBuilder_.build();
        }
        if (extensionReceiverAnnotationBuilder_ == null) {
          if (((bitField0_ & 0x00020000) != 0)) {
            extensionReceiverAnnotation_ = java.util.Collections.unmodifiableList(extensionReceiverAnnotation_);
            bitField0_ = (bitField0_ & ~0x00020000);
          }
          result.extensionReceiverAnnotation_ = extensionReceiverAnnotation_;
        } else {
          result.extensionReceiverAnnotation_ = extensionReceiverAnnotationBuilder_.build();
        }
      }

      private void buildPartial0(org.jetbrains.kotlin.metadata.ProtoBuf.Function result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.flags_ = flags_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.oldFlags_ = oldFlags_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.name_ = name_;
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.returnType_ = returnTypeBuilder_ == null
              ? returnType_
              : returnTypeBuilder_.build();
          to_bitField0_ |= 0x00000008;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.returnTypeId_ = returnTypeId_;
          to_bitField0_ |= 0x00000010;
        }
        if (((from_bitField0_ & 0x00000040) != 0)) {
          result.receiverType_ = receiverTypeBuilder_ == null
              ? receiverType_
              : receiverTypeBuilder_.build();
          to_bitField0_ |= 0x00000020;
        }
        if (((from_bitField0_ & 0x00000080) != 0)) {
          result.receiverTypeId_ = receiverTypeId_;
          to_bitField0_ |= 0x00000040;
        }
        if (((from_bitField0_ & 0x00000200) != 0)) {
          contextReceiverTypeId_.makeImmutable();
          result.contextReceiverTypeId_ = contextReceiverTypeId_;
        }
        if (((from_bitField0_ & 0x00001000) != 0)) {
          result.typeTable_ = typeTableBuilder_ == null
              ? typeTable_
              : typeTableBuilder_.build();
          to_bitField0_ |= 0x00000080;
        }
        if (((from_bitField0_ & 0x00002000) != 0)) {
          versionRequirement_.makeImmutable();
          result.versionRequirement_ = versionRequirement_;
        }
        if (((from_bitField0_ & 0x00004000) != 0)) {
          result.contract_ = contractBuilder_ == null
              ? contract_
              : contractBuilder_.build();
          to_bitField0_ |= 0x00000100;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.metadata.ProtoBuf.Function) {
          return mergeFrom((org.jetbrains.kotlin.metadata.ProtoBuf.Function)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.metadata.ProtoBuf.Function other) {
        if (other == org.jetbrains.kotlin.metadata.ProtoBuf.Function.getDefaultInstance()) return this;
        if (other.hasFlags()) {
          setFlags(other.getFlags());
        }
        if (other.hasOldFlags()) {
          setOldFlags(other.getOldFlags());
        }
        if (other.hasName()) {
          setName(other.getName());
        }
        if (other.hasReturnType()) {
          mergeReturnType(other.getReturnType());
        }
        if (other.hasReturnTypeId()) {
          setReturnTypeId(other.getReturnTypeId());
        }
        if (typeParameterBuilder_ == null) {
          if (!other.typeParameter_.isEmpty()) {
            if (typeParameter_.isEmpty()) {
              typeParameter_ = other.typeParameter_;
              bitField0_ = (bitField0_ & ~0x00000020);
            } else {
              ensureTypeParameterIsMutable();
              typeParameter_.addAll(other.typeParameter_);
            }
            onChanged();
          }
        } else {
          if (!other.typeParameter_.isEmpty()) {
            if (typeParameterBuilder_.isEmpty()) {
              typeParameterBuilder_.dispose();
              typeParameterBuilder_ = null;
              typeParameter_ = other.typeParameter_;
              bitField0_ = (bitField0_ & ~0x00000020);
              typeParameterBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getTypeParameterFieldBuilder() : null;
            } else {
              typeParameterBuilder_.addAllMessages(other.typeParameter_);
            }
          }
        }
        if (other.hasReceiverType()) {
          mergeReceiverType(other.getReceiverType());
        }
        if (other.hasReceiverTypeId()) {
          setReceiverTypeId(other.getReceiverTypeId());
        }
        if (contextReceiverTypeBuilder_ == null) {
          if (!other.contextReceiverType_.isEmpty()) {
            if (contextReceiverType_.isEmpty()) {
              contextReceiverType_ = other.contextReceiverType_;
              bitField0_ = (bitField0_ & ~0x00000100);
            } else {
              ensureContextReceiverTypeIsMutable();
              contextReceiverType_.addAll(other.contextReceiverType_);
            }
            onChanged();
          }
        } else {
          if (!other.contextReceiverType_.isEmpty()) {
            if (contextReceiverTypeBuilder_.isEmpty()) {
              contextReceiverTypeBuilder_.dispose();
              contextReceiverTypeBuilder_ = null;
              contextReceiverType_ = other.contextReceiverType_;
              bitField0_ = (bitField0_ & ~0x00000100);
              contextReceiverTypeBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getContextReceiverTypeFieldBuilder() : null;
            } else {
              contextReceiverTypeBuilder_.addAllMessages(other.contextReceiverType_);
            }
          }
        }
        if (!other.contextReceiverTypeId_.isEmpty()) {
          if (contextReceiverTypeId_.isEmpty()) {
            contextReceiverTypeId_ = other.contextReceiverTypeId_;
            contextReceiverTypeId_.makeImmutable();
            bitField0_ |= 0x00000200;
          } else {
            ensureContextReceiverTypeIdIsMutable();
            contextReceiverTypeId_.addAll(other.contextReceiverTypeId_);
          }
          onChanged();
        }
        if (contextParameterBuilder_ == null) {
          if (!other.contextParameter_.isEmpty()) {
            if (contextParameter_.isEmpty()) {
              contextParameter_ = other.contextParameter_;
              bitField0_ = (bitField0_ & ~0x00000400);
            } else {
              ensureContextParameterIsMutable();
              contextParameter_.addAll(other.contextParameter_);
            }
            onChanged();
          }
        } else {
          if (!other.contextParameter_.isEmpty()) {
            if (contextParameterBuilder_.isEmpty()) {
              contextParameterBuilder_.dispose();
              contextParameterBuilder_ = null;
              contextParameter_ = other.contextParameter_;
              bitField0_ = (bitField0_ & ~0x00000400);
              contextParameterBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getContextParameterFieldBuilder() : null;
            } else {
              contextParameterBuilder_.addAllMessages(other.contextParameter_);
            }
          }
        }
        if (valueParameterBuilder_ == null) {
          if (!other.valueParameter_.isEmpty()) {
            if (valueParameter_.isEmpty()) {
              valueParameter_ = other.valueParameter_;
              bitField0_ = (bitField0_ & ~0x00000800);
            } else {
              ensureValueParameterIsMutable();
              valueParameter_.addAll(other.valueParameter_);
            }
            onChanged();
          }
        } else {
          if (!other.valueParameter_.isEmpty()) {
            if (valueParameterBuilder_.isEmpty()) {
              valueParameterBuilder_.dispose();
              valueParameterBuilder_ = null;
              valueParameter_ = other.valueParameter_;
              bitField0_ = (bitField0_ & ~0x00000800);
              valueParameterBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getValueParameterFieldBuilder() : null;
            } else {
              valueParameterBuilder_.addAllMessages(other.valueParameter_);
            }
          }
        }
        if (other.hasTypeTable()) {
          mergeTypeTable(other.getTypeTable());
        }
        if (!other.versionRequirement_.isEmpty()) {
          if (versionRequirement_.isEmpty()) {
            versionRequirement_ = other.versionRequirement_;
            versionRequirement_.makeImmutable();
            bitField0_ |= 0x00002000;
          } else {
            ensureVersionRequirementIsMutable();
            versionRequirement_.addAll(other.versionRequirement_);
          }
          onChanged();
        }
        if (other.hasContract()) {
          mergeContract(other.getContract());
        }
        if (compilerPluginDataBuilder_ == null) {
          if (!other.compilerPluginData_.isEmpty()) {
            if (compilerPluginData_.isEmpty()) {
              compilerPluginData_ = other.compilerPluginData_;
              bitField0_ = (bitField0_ & ~0x00008000);
            } else {
              ensureCompilerPluginDataIsMutable();
              compilerPluginData_.addAll(other.compilerPluginData_);
            }
            onChanged();
          }
        } else {
          if (!other.compilerPluginData_.isEmpty()) {
            if (compilerPluginDataBuilder_.isEmpty()) {
              compilerPluginDataBuilder_.dispose();
              compilerPluginDataBuilder_ = null;
              compilerPluginData_ = other.compilerPluginData_;
              bitField0_ = (bitField0_ & ~0x00008000);
              compilerPluginDataBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCompilerPluginDataFieldBuilder() : null;
            } else {
              compilerPluginDataBuilder_.addAllMessages(other.compilerPluginData_);
            }
          }
        }
        if (annotationBuilder_ == null) {
          if (!other.annotation_.isEmpty()) {
            if (annotation_.isEmpty()) {
              annotation_ = other.annotation_;
              bitField0_ = (bitField0_ & ~0x00010000);
            } else {
              ensureAnnotationIsMutable();
              annotation_.addAll(other.annotation_);
            }
            onChanged();
          }
        } else {
          if (!other.annotation_.isEmpty()) {
            if (annotationBuilder_.isEmpty()) {
              annotationBuilder_.dispose();
              annotationBuilder_ = null;
              annotation_ = other.annotation_;
              bitField0_ = (bitField0_ & ~0x00010000);
              annotationBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getAnnotationFieldBuilder() : null;
            } else {
              annotationBuilder_.addAllMessages(other.annotation_);
            }
          }
        }
        if (extensionReceiverAnnotationBuilder_ == null) {
          if (!other.extensionReceiverAnnotation_.isEmpty()) {
            if (extensionReceiverAnnotation_.isEmpty()) {
              extensionReceiverAnnotation_ = other.extensionReceiverAnnotation_;
              bitField0_ = (bitField0_ & ~0x00020000);
            } else {
              ensureExtensionReceiverAnnotationIsMutable();
              extensionReceiverAnnotation_.addAll(other.extensionReceiverAnnotation_);
            }
            onChanged();
          }
        } else {
          if (!other.extensionReceiverAnnotation_.isEmpty()) {
            if (extensionReceiverAnnotationBuilder_.isEmpty()) {
              extensionReceiverAnnotationBuilder_.dispose();
              extensionReceiverAnnotationBuilder_ = null;
              extensionReceiverAnnotation_ = other.extensionReceiverAnnotation_;
              bitField0_ = (bitField0_ & ~0x00020000);
              extensionReceiverAnnotationBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getExtensionReceiverAnnotationFieldBuilder() : null;
            } else {
              extensionReceiverAnnotationBuilder_.addAllMessages(other.extensionReceiverAnnotation_);
            }
          }
        }
        this.mergeExtensionFields(other);
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasName()) {
          return false;
        }
        if (hasReturnType()) {
          if (!getReturnType().isInitialized()) {
            return false;
          }
        }
        for (int i = 0; i < getTypeParameterCount(); i++) {
          if (!getTypeParameter(i).isInitialized()) {
            return false;
          }
        }
        if (hasReceiverType()) {
          if (!getReceiverType().isInitialized()) {
            return false;
          }
        }
        for (int i = 0; i < getContextReceiverTypeCount(); i++) {
          if (!getContextReceiverType(i).isInitialized()) {
            return false;
          }
        }
        for (int i = 0; i < getContextParameterCount(); i++) {
          if (!getContextParameter(i).isInitialized()) {
            return false;
          }
        }
        for (int i = 0; i < getValueParameterCount(); i++) {
          if (!getValueParameter(i).isInitialized()) {
            return false;
          }
        }
        if (hasTypeTable()) {
          if (!getTypeTable().isInitialized()) {
            return false;
          }
        }
        if (hasContract()) {
          if (!getContract().isInitialized()) {
            return false;
          }
        }
        for (int i = 0; i < getCompilerPluginDataCount(); i++) {
          if (!getCompilerPluginData(i).isInitialized()) {
            return false;
          }
        }
        for (int i = 0; i < getAnnotationCount(); i++) {
          if (!getAnnotation(i).isInitialized()) {
            return false;
          }
        }
        for (int i = 0; i < getExtensionReceiverAnnotationCount(); i++) {
          if (!getExtensionReceiverAnnotation(i).isInitialized()) {
            return false;
          }
        }
        if (!extensionsAreInitialized()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                oldFlags_ = input.readInt32();
                bitField0_ |= 0x00000002;
                break;
              } // case 8
              case 16: {
                name_ = input.readInt32();
                bitField0_ |= 0x00000004;
                break;
              } // case 16
              case 26: {
                input.readMessage(
                    getReturnTypeFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000008;
                break;
              } // case 26
              case 34: {
                org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter m =
                    input.readMessage(
                        org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.parser(),
                        extensionRegistry);
                if (typeParameterBuilder_ == null) {
                  ensureTypeParameterIsMutable();
                  typeParameter_.add(m);
                } else {
                  typeParameterBuilder_.addMessage(m);
                }
                break;
              } // case 34
              case 42: {
                input.readMessage(
                    getReceiverTypeFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000040;
                break;
              } // case 42
              case 50: {
                org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter m =
                    input.readMessage(
                        org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.parser(),
                        extensionRegistry);
                if (valueParameterBuilder_ == null) {
                  ensureValueParameterIsMutable();
                  valueParameter_.add(m);
                } else {
                  valueParameterBuilder_.addMessage(m);
                }
                break;
              } // case 50
              case 56: {
                returnTypeId_ = input.readInt32();
                bitField0_ |= 0x00000010;
                break;
              } // case 56
              case 64: {
                receiverTypeId_ = input.readInt32();
                bitField0_ |= 0x00000080;
                break;
              } // case 64
              case 72: {
                flags_ = input.readInt32();
                bitField0_ |= 0x00000001;
                break;
              } // case 72
              case 82: {
                org.jetbrains.kotlin.metadata.ProtoBuf.Type m =
                    input.readMessage(
                        org.jetbrains.kotlin.metadata.ProtoBuf.Type.parser(),
                        extensionRegistry);
                if (contextReceiverTypeBuilder_ == null) {
                  ensureContextReceiverTypeIsMutable();
                  contextReceiverType_.add(m);
                } else {
                  contextReceiverTypeBuilder_.addMessage(m);
                }
                break;
              } // case 82
              case 88: {
                int v = input.readInt32();
                ensureContextReceiverTypeIdIsMutable();
                contextReceiverTypeId_.addInt(v);
                break;
              } // case 88
              case 90: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureContextReceiverTypeIdIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  contextReceiverTypeId_.addInt(input.readInt32());
                }
                input.popLimit(limit);
                break;
              } // case 90
              case 98: {
                org.jetbrains.kotlin.metadata.ProtoBuf.Annotation m =
                    input.readMessage(
                        org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.parser(),
                        extensionRegistry);
                if (annotationBuilder_ == null) {
                  ensureAnnotationIsMutable();
                  annotation_.add(m);
                } else {
                  annotationBuilder_.addMessage(m);
                }
                break;
              } // case 98
              case 106: {
                org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter m =
                    input.readMessage(
                        org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.parser(),
                        extensionRegistry);
                if (contextParameterBuilder_ == null) {
                  ensureContextParameterIsMutable();
                  contextParameter_.add(m);
                } else {
                  contextParameterBuilder_.addMessage(m);
                }
                break;
              } // case 106
              case 242: {
                input.readMessage(
                    getTypeTableFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00001000;
                break;
              } // case 242
              case 248: {
                int v = input.readInt32();
                ensureVersionRequirementIsMutable();
                versionRequirement_.addInt(v);
                break;
              } // case 248
              case 250: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureVersionRequirementIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  versionRequirement_.addInt(input.readInt32());
                }
                input.popLimit(limit);
                break;
              } // case 250
              case 258: {
                input.readMessage(
                    getContractFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00004000;
                break;
              } // case 258
              case 266: {
                org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData m =
                    input.readMessage(
                        org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.parser(),
                        extensionRegistry);
                if (compilerPluginDataBuilder_ == null) {
                  ensureCompilerPluginDataIsMutable();
                  compilerPluginData_.add(m);
                } else {
                  compilerPluginDataBuilder_.addMessage(m);
                }
                break;
              } // case 266
              case 274: {
                org.jetbrains.kotlin.metadata.ProtoBuf.Annotation m =
                    input.readMessage(
                        org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.parser(),
                        extensionRegistry);
                if (extensionReceiverAnnotationBuilder_ == null) {
                  ensureExtensionReceiverAnnotationIsMutable();
                  extensionReceiverAnnotation_.add(m);
                } else {
                  extensionReceiverAnnotationBuilder_.addMessage(m);
                }
                break;
              } // case 274
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int flags_ = 6;
      /**
       * <pre>
       *
       * hasAnnotations
       * Visibility
       * Modality
       * MemberKind
       * isOperator
       * isInfix
       * isInline
       * isTailrec
       * isExternal
       * isSuspend
       * isExpect
       * hasNonStableParameterNames
       * </pre>
       *
       * <code>int32 flags = 9 [default = 6];</code>
       * @return Whether the flags field is set.
       */
      @java.lang.Override
      public boolean hasFlags() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       *
       * hasAnnotations
       * Visibility
       * Modality
       * MemberKind
       * isOperator
       * isInfix
       * isInline
       * isTailrec
       * isExternal
       * isSuspend
       * isExpect
       * hasNonStableParameterNames
       * </pre>
       *
       * <code>int32 flags = 9 [default = 6];</code>
       * @return The flags.
       */
      @java.lang.Override
      public int getFlags() {
        return flags_;
      }
      /**
       * <pre>
       *
       * hasAnnotations
       * Visibility
       * Modality
       * MemberKind
       * isOperator
       * isInfix
       * isInline
       * isTailrec
       * isExternal
       * isSuspend
       * isExpect
       * hasNonStableParameterNames
       * </pre>
       *
       * <code>int32 flags = 9 [default = 6];</code>
       * @param value The flags to set.
       * @return This builder for chaining.
       */
      public Builder setFlags(int value) {

        flags_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *
       * hasAnnotations
       * Visibility
       * Modality
       * MemberKind
       * isOperator
       * isInfix
       * isInline
       * isTailrec
       * isExternal
       * isSuspend
       * isExpect
       * hasNonStableParameterNames
       * </pre>
       *
       * <code>int32 flags = 9 [default = 6];</code>
       * @return This builder for chaining.
       */
      public Builder clearFlags() {
        bitField0_ = (bitField0_ & ~0x00000001);
        flags_ = 6;
        onChanged();
        return this;
      }

      private int oldFlags_ = 6;
      /**
       * <code>int32 old_flags = 1 [default = 6];</code>
       * @return Whether the oldFlags field is set.
       */
      @java.lang.Override
      public boolean hasOldFlags() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>int32 old_flags = 1 [default = 6];</code>
       * @return The oldFlags.
       */
      @java.lang.Override
      public int getOldFlags() {
        return oldFlags_;
      }
      /**
       * <code>int32 old_flags = 1 [default = 6];</code>
       * @param value The oldFlags to set.
       * @return This builder for chaining.
       */
      public Builder setOldFlags(int value) {

        oldFlags_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>int32 old_flags = 1 [default = 6];</code>
       * @return This builder for chaining.
       */
      public Builder clearOldFlags() {
        bitField0_ = (bitField0_ & ~0x00000002);
        oldFlags_ = 6;
        onChanged();
        return this;
      }

      private int name_ ;
      /**
       * <code>int32 name = 2 [features = { ... }</code>
       * @return Whether the name field is set.
       */
      @java.lang.Override
      public boolean hasName() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>int32 name = 2 [features = { ... }</code>
       * @return The name.
       */
      @java.lang.Override
      public int getName() {
        return name_;
      }
      /**
       * <code>int32 name = 2 [features = { ... }</code>
       * @param value The name to set.
       * @return This builder for chaining.
       */
      public Builder setName(int value) {

        name_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>int32 name = 2 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000004);
        name_ = 0;
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.metadata.ProtoBuf.Type returnType_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Type, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder> returnTypeBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
       * @return Whether the returnType field is set.
       */
      public boolean hasReturnType() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
       * @return The returnType.
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type getReturnType() {
        if (returnTypeBuilder_ == null) {
          return returnType_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance() : returnType_;
        } else {
          return returnTypeBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
       */
      public Builder setReturnType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        if (returnTypeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          returnType_ = value;
        } else {
          returnTypeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
       */
      public Builder setReturnType(
          org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder builderForValue) {
        if (returnTypeBuilder_ == null) {
          returnType_ = builderForValue.build();
        } else {
          returnTypeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
       */
      public Builder mergeReturnType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        if (returnTypeBuilder_ == null) {
          if (((bitField0_ & 0x00000008) != 0) &&
            returnType_ != null &&
            returnType_ != org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance()) {
            getReturnTypeBuilder().mergeFrom(value);
          } else {
            returnType_ = value;
          }
        } else {
          returnTypeBuilder_.mergeFrom(value);
        }
        if (returnType_ != null) {
          bitField0_ |= 0x00000008;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
       */
      public Builder clearReturnType() {
        bitField0_ = (bitField0_ & ~0x00000008);
        returnType_ = null;
        if (returnTypeBuilder_ != null) {
          returnTypeBuilder_.dispose();
          returnTypeBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder getReturnTypeBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getReturnTypeFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder getReturnTypeOrBuilder() {
        if (returnTypeBuilder_ != null) {
          return returnTypeBuilder_.getMessageOrBuilder();
        } else {
          return returnType_ == null ?
              org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance() : returnType_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Type, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder> 
          getReturnTypeFieldBuilder() {
        if (returnTypeBuilder_ == null) {
          returnTypeBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.metadata.ProtoBuf.Type, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder>(
                  getReturnType(),
                  getParentForChildren(),
                  isClean());
          returnType_ = null;
        }
        return returnTypeBuilder_;
      }

      private int returnTypeId_ ;
      /**
       * <code>int32 return_type_id = 7 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return Whether the returnTypeId field is set.
       */
      @java.lang.Override
      public boolean hasReturnTypeId() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <code>int32 return_type_id = 7 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return The returnTypeId.
       */
      @java.lang.Override
      public int getReturnTypeId() {
        return returnTypeId_;
      }
      /**
       * <code>int32 return_type_id = 7 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @param value The returnTypeId to set.
       * @return This builder for chaining.
       */
      public Builder setReturnTypeId(int value) {

        returnTypeId_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <code>int32 return_type_id = 7 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearReturnTypeId() {
        bitField0_ = (bitField0_ & ~0x00000010);
        returnTypeId_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter> typeParameter_ =
        java.util.Collections.emptyList();
      private void ensureTypeParameterIsMutable() {
        if (!((bitField0_ & 0x00000020) != 0)) {
          typeParameter_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter>(typeParameter_);
          bitField0_ |= 0x00000020;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter, org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameterOrBuilder> typeParameterBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter> getTypeParameterList() {
        if (typeParameterBuilder_ == null) {
          return java.util.Collections.unmodifiableList(typeParameter_);
        } else {
          return typeParameterBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public int getTypeParameterCount() {
        if (typeParameterBuilder_ == null) {
          return typeParameter_.size();
        } else {
          return typeParameterBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter getTypeParameter(int index) {
        if (typeParameterBuilder_ == null) {
          return typeParameter_.get(index);
        } else {
          return typeParameterBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public Builder setTypeParameter(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter value) {
        if (typeParameterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTypeParameterIsMutable();
          typeParameter_.set(index, value);
          onChanged();
        } else {
          typeParameterBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public Builder setTypeParameter(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.Builder builderForValue) {
        if (typeParameterBuilder_ == null) {
          ensureTypeParameterIsMutable();
          typeParameter_.set(index, builderForValue.build());
          onChanged();
        } else {
          typeParameterBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public Builder addTypeParameter(org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter value) {
        if (typeParameterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTypeParameterIsMutable();
          typeParameter_.add(value);
          onChanged();
        } else {
          typeParameterBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public Builder addTypeParameter(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter value) {
        if (typeParameterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTypeParameterIsMutable();
          typeParameter_.add(index, value);
          onChanged();
        } else {
          typeParameterBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public Builder addTypeParameter(
          org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.Builder builderForValue) {
        if (typeParameterBuilder_ == null) {
          ensureTypeParameterIsMutable();
          typeParameter_.add(builderForValue.build());
          onChanged();
        } else {
          typeParameterBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public Builder addTypeParameter(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.Builder builderForValue) {
        if (typeParameterBuilder_ == null) {
          ensureTypeParameterIsMutable();
          typeParameter_.add(index, builderForValue.build());
          onChanged();
        } else {
          typeParameterBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public Builder addAllTypeParameter(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter> values) {
        if (typeParameterBuilder_ == null) {
          ensureTypeParameterIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, typeParameter_);
          onChanged();
        } else {
          typeParameterBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public Builder clearTypeParameter() {
        if (typeParameterBuilder_ == null) {
          typeParameter_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
          onChanged();
        } else {
          typeParameterBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public Builder removeTypeParameter(int index) {
        if (typeParameterBuilder_ == null) {
          ensureTypeParameterIsMutable();
          typeParameter_.remove(index);
          onChanged();
        } else {
          typeParameterBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.Builder getTypeParameterBuilder(
          int index) {
        return getTypeParameterFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameterOrBuilder getTypeParameterOrBuilder(
          int index) {
        if (typeParameterBuilder_ == null) {
          return typeParameter_.get(index);  } else {
          return typeParameterBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameterOrBuilder> 
           getTypeParameterOrBuilderList() {
        if (typeParameterBuilder_ != null) {
          return typeParameterBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(typeParameter_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.Builder addTypeParameterBuilder() {
        return getTypeParameterFieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.Builder addTypeParameterBuilder(
          int index) {
        return getTypeParameterFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.Builder> 
           getTypeParameterBuilderList() {
        return getTypeParameterFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter, org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameterOrBuilder> 
          getTypeParameterFieldBuilder() {
        if (typeParameterBuilder_ == null) {
          typeParameterBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter, org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameterOrBuilder>(
                  typeParameter_,
                  ((bitField0_ & 0x00000020) != 0),
                  getParentForChildren(),
                  isClean());
          typeParameter_ = null;
        }
        return typeParameterBuilder_;
      }

      private org.jetbrains.kotlin.metadata.ProtoBuf.Type receiverType_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Type, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder> receiverTypeBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
       * @return Whether the receiverType field is set.
       */
      public boolean hasReceiverType() {
        return ((bitField0_ & 0x00000040) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
       * @return The receiverType.
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type getReceiverType() {
        if (receiverTypeBuilder_ == null) {
          return receiverType_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance() : receiverType_;
        } else {
          return receiverTypeBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
       */
      public Builder setReceiverType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        if (receiverTypeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          receiverType_ = value;
        } else {
          receiverTypeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
       */
      public Builder setReceiverType(
          org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder builderForValue) {
        if (receiverTypeBuilder_ == null) {
          receiverType_ = builderForValue.build();
        } else {
          receiverTypeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
       */
      public Builder mergeReceiverType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        if (receiverTypeBuilder_ == null) {
          if (((bitField0_ & 0x00000040) != 0) &&
            receiverType_ != null &&
            receiverType_ != org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance()) {
            getReceiverTypeBuilder().mergeFrom(value);
          } else {
            receiverType_ = value;
          }
        } else {
          receiverTypeBuilder_.mergeFrom(value);
        }
        if (receiverType_ != null) {
          bitField0_ |= 0x00000040;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
       */
      public Builder clearReceiverType() {
        bitField0_ = (bitField0_ & ~0x00000040);
        receiverType_ = null;
        if (receiverTypeBuilder_ != null) {
          receiverTypeBuilder_.dispose();
          receiverTypeBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder getReceiverTypeBuilder() {
        bitField0_ |= 0x00000040;
        onChanged();
        return getReceiverTypeFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder getReceiverTypeOrBuilder() {
        if (receiverTypeBuilder_ != null) {
          return receiverTypeBuilder_.getMessageOrBuilder();
        } else {
          return receiverType_ == null ?
              org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance() : receiverType_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Type, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder> 
          getReceiverTypeFieldBuilder() {
        if (receiverTypeBuilder_ == null) {
          receiverTypeBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.metadata.ProtoBuf.Type, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder>(
                  getReceiverType(),
                  getParentForChildren(),
                  isClean());
          receiverType_ = null;
        }
        return receiverTypeBuilder_;
      }

      private int receiverTypeId_ ;
      /**
       * <code>int32 receiver_type_id = 8 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return Whether the receiverTypeId field is set.
       */
      @java.lang.Override
      public boolean hasReceiverTypeId() {
        return ((bitField0_ & 0x00000080) != 0);
      }
      /**
       * <code>int32 receiver_type_id = 8 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return The receiverTypeId.
       */
      @java.lang.Override
      public int getReceiverTypeId() {
        return receiverTypeId_;
      }
      /**
       * <code>int32 receiver_type_id = 8 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @param value The receiverTypeId to set.
       * @return This builder for chaining.
       */
      public Builder setReceiverTypeId(int value) {

        receiverTypeId_ = value;
        bitField0_ |= 0x00000080;
        onChanged();
        return this;
      }
      /**
       * <code>int32 receiver_type_id = 8 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearReceiverTypeId() {
        bitField0_ = (bitField0_ & ~0x00000080);
        receiverTypeId_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Type> contextReceiverType_ =
        java.util.Collections.emptyList();
      private void ensureContextReceiverTypeIsMutable() {
        if (!((bitField0_ & 0x00000100) != 0)) {
          contextReceiverType_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.ProtoBuf.Type>(contextReceiverType_);
          bitField0_ |= 0x00000100;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Type, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder> contextReceiverTypeBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 10;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Type> getContextReceiverTypeList() {
        if (contextReceiverTypeBuilder_ == null) {
          return java.util.Collections.unmodifiableList(contextReceiverType_);
        } else {
          return contextReceiverTypeBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 10;</code>
       */
      public int getContextReceiverTypeCount() {
        if (contextReceiverTypeBuilder_ == null) {
          return contextReceiverType_.size();
        } else {
          return contextReceiverTypeBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 10;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type getContextReceiverType(int index) {
        if (contextReceiverTypeBuilder_ == null) {
          return contextReceiverType_.get(index);
        } else {
          return contextReceiverTypeBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 10;</code>
       */
      public Builder setContextReceiverType(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        if (contextReceiverTypeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureContextReceiverTypeIsMutable();
          contextReceiverType_.set(index, value);
          onChanged();
        } else {
          contextReceiverTypeBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 10;</code>
       */
      public Builder setContextReceiverType(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder builderForValue) {
        if (contextReceiverTypeBuilder_ == null) {
          ensureContextReceiverTypeIsMutable();
          contextReceiverType_.set(index, builderForValue.build());
          onChanged();
        } else {
          contextReceiverTypeBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 10;</code>
       */
      public Builder addContextReceiverType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        if (contextReceiverTypeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureContextReceiverTypeIsMutable();
          contextReceiverType_.add(value);
          onChanged();
        } else {
          contextReceiverTypeBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 10;</code>
       */
      public Builder addContextReceiverType(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        if (contextReceiverTypeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureContextReceiverTypeIsMutable();
          contextReceiverType_.add(index, value);
          onChanged();
        } else {
          contextReceiverTypeBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 10;</code>
       */
      public Builder addContextReceiverType(
          org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder builderForValue) {
        if (contextReceiverTypeBuilder_ == null) {
          ensureContextReceiverTypeIsMutable();
          contextReceiverType_.add(builderForValue.build());
          onChanged();
        } else {
          contextReceiverTypeBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 10;</code>
       */
      public Builder addContextReceiverType(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder builderForValue) {
        if (contextReceiverTypeBuilder_ == null) {
          ensureContextReceiverTypeIsMutable();
          contextReceiverType_.add(index, builderForValue.build());
          onChanged();
        } else {
          contextReceiverTypeBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 10;</code>
       */
      public Builder addAllContextReceiverType(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Type> values) {
        if (contextReceiverTypeBuilder_ == null) {
          ensureContextReceiverTypeIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, contextReceiverType_);
          onChanged();
        } else {
          contextReceiverTypeBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 10;</code>
       */
      public Builder clearContextReceiverType() {
        if (contextReceiverTypeBuilder_ == null) {
          contextReceiverType_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000100);
          onChanged();
        } else {
          contextReceiverTypeBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 10;</code>
       */
      public Builder removeContextReceiverType(int index) {
        if (contextReceiverTypeBuilder_ == null) {
          ensureContextReceiverTypeIsMutable();
          contextReceiverType_.remove(index);
          onChanged();
        } else {
          contextReceiverTypeBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 10;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder getContextReceiverTypeBuilder(
          int index) {
        return getContextReceiverTypeFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 10;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder getContextReceiverTypeOrBuilder(
          int index) {
        if (contextReceiverTypeBuilder_ == null) {
          return contextReceiverType_.get(index);  } else {
          return contextReceiverTypeBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 10;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder> 
           getContextReceiverTypeOrBuilderList() {
        if (contextReceiverTypeBuilder_ != null) {
          return contextReceiverTypeBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(contextReceiverType_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 10;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder addContextReceiverTypeBuilder() {
        return getContextReceiverTypeFieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 10;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder addContextReceiverTypeBuilder(
          int index) {
        return getContextReceiverTypeFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 10;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder> 
           getContextReceiverTypeBuilderList() {
        return getContextReceiverTypeFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Type, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder> 
          getContextReceiverTypeFieldBuilder() {
        if (contextReceiverTypeBuilder_ == null) {
          contextReceiverTypeBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.ProtoBuf.Type, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder>(
                  contextReceiverType_,
                  ((bitField0_ & 0x00000100) != 0),
                  getParentForChildren(),
                  isClean());
          contextReceiverType_ = null;
        }
        return contextReceiverTypeBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.Internal.IntList contextReceiverTypeId_ = emptyIntList();
      private void ensureContextReceiverTypeIdIsMutable() {
        if (!contextReceiverTypeId_.isModifiable()) {
          contextReceiverTypeId_ = makeMutableCopy(contextReceiverTypeId_);
        }
        bitField0_ |= 0x00000200;
      }
      /**
       * <code>repeated int32 context_receiver_type_id = 11 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return A list containing the contextReceiverTypeId.
       */
      public java.util.List<java.lang.Integer>
          getContextReceiverTypeIdList() {
        contextReceiverTypeId_.makeImmutable();
        return contextReceiverTypeId_;
      }
      /**
       * <code>repeated int32 context_receiver_type_id = 11 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return The count of contextReceiverTypeId.
       */
      public int getContextReceiverTypeIdCount() {
        return contextReceiverTypeId_.size();
      }
      /**
       * <code>repeated int32 context_receiver_type_id = 11 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @param index The index of the element to return.
       * @return The contextReceiverTypeId at the given index.
       */
      public int getContextReceiverTypeId(int index) {
        return contextReceiverTypeId_.getInt(index);
      }
      /**
       * <code>repeated int32 context_receiver_type_id = 11 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @param index The index to set the value at.
       * @param value The contextReceiverTypeId to set.
       * @return This builder for chaining.
       */
      public Builder setContextReceiverTypeId(
          int index, int value) {

        ensureContextReceiverTypeIdIsMutable();
        contextReceiverTypeId_.setInt(index, value);
        bitField0_ |= 0x00000200;
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 context_receiver_type_id = 11 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @param value The contextReceiverTypeId to add.
       * @return This builder for chaining.
       */
      public Builder addContextReceiverTypeId(int value) {

        ensureContextReceiverTypeIdIsMutable();
        contextReceiverTypeId_.addInt(value);
        bitField0_ |= 0x00000200;
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 context_receiver_type_id = 11 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @param values The contextReceiverTypeId to add.
       * @return This builder for chaining.
       */
      public Builder addAllContextReceiverTypeId(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureContextReceiverTypeIdIsMutable();
        org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
            values, contextReceiverTypeId_);
        bitField0_ |= 0x00000200;
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 context_receiver_type_id = 11 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearContextReceiverTypeId() {
        contextReceiverTypeId_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000200);
        onChanged();
        return this;
      }

      private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter> contextParameter_ =
        java.util.Collections.emptyList();
      private void ensureContextParameterIsMutable() {
        if (!((bitField0_ & 0x00000400) != 0)) {
          contextParameter_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter>(contextParameter_);
          bitField0_ |= 0x00000400;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter, org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameterOrBuilder> contextParameterBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 13;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter> getContextParameterList() {
        if (contextParameterBuilder_ == null) {
          return java.util.Collections.unmodifiableList(contextParameter_);
        } else {
          return contextParameterBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 13;</code>
       */
      public int getContextParameterCount() {
        if (contextParameterBuilder_ == null) {
          return contextParameter_.size();
        } else {
          return contextParameterBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 13;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter getContextParameter(int index) {
        if (contextParameterBuilder_ == null) {
          return contextParameter_.get(index);
        } else {
          return contextParameterBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 13;</code>
       */
      public Builder setContextParameter(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter value) {
        if (contextParameterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureContextParameterIsMutable();
          contextParameter_.set(index, value);
          onChanged();
        } else {
          contextParameterBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 13;</code>
       */
      public Builder setContextParameter(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.Builder builderForValue) {
        if (contextParameterBuilder_ == null) {
          ensureContextParameterIsMutable();
          contextParameter_.set(index, builderForValue.build());
          onChanged();
        } else {
          contextParameterBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 13;</code>
       */
      public Builder addContextParameter(org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter value) {
        if (contextParameterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureContextParameterIsMutable();
          contextParameter_.add(value);
          onChanged();
        } else {
          contextParameterBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 13;</code>
       */
      public Builder addContextParameter(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter value) {
        if (contextParameterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureContextParameterIsMutable();
          contextParameter_.add(index, value);
          onChanged();
        } else {
          contextParameterBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 13;</code>
       */
      public Builder addContextParameter(
          org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.Builder builderForValue) {
        if (contextParameterBuilder_ == null) {
          ensureContextParameterIsMutable();
          contextParameter_.add(builderForValue.build());
          onChanged();
        } else {
          contextParameterBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 13;</code>
       */
      public Builder addContextParameter(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.Builder builderForValue) {
        if (contextParameterBuilder_ == null) {
          ensureContextParameterIsMutable();
          contextParameter_.add(index, builderForValue.build());
          onChanged();
        } else {
          contextParameterBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 13;</code>
       */
      public Builder addAllContextParameter(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter> values) {
        if (contextParameterBuilder_ == null) {
          ensureContextParameterIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, contextParameter_);
          onChanged();
        } else {
          contextParameterBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 13;</code>
       */
      public Builder clearContextParameter() {
        if (contextParameterBuilder_ == null) {
          contextParameter_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000400);
          onChanged();
        } else {
          contextParameterBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 13;</code>
       */
      public Builder removeContextParameter(int index) {
        if (contextParameterBuilder_ == null) {
          ensureContextParameterIsMutable();
          contextParameter_.remove(index);
          onChanged();
        } else {
          contextParameterBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 13;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.Builder getContextParameterBuilder(
          int index) {
        return getContextParameterFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 13;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameterOrBuilder getContextParameterOrBuilder(
          int index) {
        if (contextParameterBuilder_ == null) {
          return contextParameter_.get(index);  } else {
          return contextParameterBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 13;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameterOrBuilder> 
           getContextParameterOrBuilderList() {
        if (contextParameterBuilder_ != null) {
          return contextParameterBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(contextParameter_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 13;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.Builder addContextParameterBuilder() {
        return getContextParameterFieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 13;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.Builder addContextParameterBuilder(
          int index) {
        return getContextParameterFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 13;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.Builder> 
           getContextParameterBuilderList() {
        return getContextParameterFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter, org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameterOrBuilder> 
          getContextParameterFieldBuilder() {
        if (contextParameterBuilder_ == null) {
          contextParameterBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter, org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameterOrBuilder>(
                  contextParameter_,
                  ((bitField0_ & 0x00000400) != 0),
                  getParentForChildren(),
                  isClean());
          contextParameter_ = null;
        }
        return contextParameterBuilder_;
      }

      private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter> valueParameter_ =
        java.util.Collections.emptyList();
      private void ensureValueParameterIsMutable() {
        if (!((bitField0_ & 0x00000800) != 0)) {
          valueParameter_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter>(valueParameter_);
          bitField0_ |= 0x00000800;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter, org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameterOrBuilder> valueParameterBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter> getValueParameterList() {
        if (valueParameterBuilder_ == null) {
          return java.util.Collections.unmodifiableList(valueParameter_);
        } else {
          return valueParameterBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
       */
      public int getValueParameterCount() {
        if (valueParameterBuilder_ == null) {
          return valueParameter_.size();
        } else {
          return valueParameterBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter getValueParameter(int index) {
        if (valueParameterBuilder_ == null) {
          return valueParameter_.get(index);
        } else {
          return valueParameterBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
       */
      public Builder setValueParameter(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter value) {
        if (valueParameterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureValueParameterIsMutable();
          valueParameter_.set(index, value);
          onChanged();
        } else {
          valueParameterBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
       */
      public Builder setValueParameter(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.Builder builderForValue) {
        if (valueParameterBuilder_ == null) {
          ensureValueParameterIsMutable();
          valueParameter_.set(index, builderForValue.build());
          onChanged();
        } else {
          valueParameterBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
       */
      public Builder addValueParameter(org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter value) {
        if (valueParameterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureValueParameterIsMutable();
          valueParameter_.add(value);
          onChanged();
        } else {
          valueParameterBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
       */
      public Builder addValueParameter(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter value) {
        if (valueParameterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureValueParameterIsMutable();
          valueParameter_.add(index, value);
          onChanged();
        } else {
          valueParameterBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
       */
      public Builder addValueParameter(
          org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.Builder builderForValue) {
        if (valueParameterBuilder_ == null) {
          ensureValueParameterIsMutable();
          valueParameter_.add(builderForValue.build());
          onChanged();
        } else {
          valueParameterBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
       */
      public Builder addValueParameter(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.Builder builderForValue) {
        if (valueParameterBuilder_ == null) {
          ensureValueParameterIsMutable();
          valueParameter_.add(index, builderForValue.build());
          onChanged();
        } else {
          valueParameterBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
       */
      public Builder addAllValueParameter(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter> values) {
        if (valueParameterBuilder_ == null) {
          ensureValueParameterIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, valueParameter_);
          onChanged();
        } else {
          valueParameterBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
       */
      public Builder clearValueParameter() {
        if (valueParameterBuilder_ == null) {
          valueParameter_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000800);
          onChanged();
        } else {
          valueParameterBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
       */
      public Builder removeValueParameter(int index) {
        if (valueParameterBuilder_ == null) {
          ensureValueParameterIsMutable();
          valueParameter_.remove(index);
          onChanged();
        } else {
          valueParameterBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.Builder getValueParameterBuilder(
          int index) {
        return getValueParameterFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameterOrBuilder getValueParameterOrBuilder(
          int index) {
        if (valueParameterBuilder_ == null) {
          return valueParameter_.get(index);  } else {
          return valueParameterBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameterOrBuilder> 
           getValueParameterOrBuilderList() {
        if (valueParameterBuilder_ != null) {
          return valueParameterBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(valueParameter_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.Builder addValueParameterBuilder() {
        return getValueParameterFieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.Builder addValueParameterBuilder(
          int index) {
        return getValueParameterFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.Builder> 
           getValueParameterBuilderList() {
        return getValueParameterFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter, org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameterOrBuilder> 
          getValueParameterFieldBuilder() {
        if (valueParameterBuilder_ == null) {
          valueParameterBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter, org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameterOrBuilder>(
                  valueParameter_,
                  ((bitField0_ & 0x00000800) != 0),
                  getParentForChildren(),
                  isClean());
          valueParameter_ = null;
        }
        return valueParameterBuilder_;
      }

      private org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable typeTable_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable, org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeTableOrBuilder> typeTableBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
       * @return Whether the typeTable field is set.
       */
      public boolean hasTypeTable() {
        return ((bitField0_ & 0x00001000) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
       * @return The typeTable.
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable getTypeTable() {
        if (typeTableBuilder_ == null) {
          return typeTable_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable.getDefaultInstance() : typeTable_;
        } else {
          return typeTableBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
       */
      public Builder setTypeTable(org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable value) {
        if (typeTableBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          typeTable_ = value;
        } else {
          typeTableBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00001000;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
       */
      public Builder setTypeTable(
          org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable.Builder builderForValue) {
        if (typeTableBuilder_ == null) {
          typeTable_ = builderForValue.build();
        } else {
          typeTableBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00001000;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
       */
      public Builder mergeTypeTable(org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable value) {
        if (typeTableBuilder_ == null) {
          if (((bitField0_ & 0x00001000) != 0) &&
            typeTable_ != null &&
            typeTable_ != org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable.getDefaultInstance()) {
            getTypeTableBuilder().mergeFrom(value);
          } else {
            typeTable_ = value;
          }
        } else {
          typeTableBuilder_.mergeFrom(value);
        }
        if (typeTable_ != null) {
          bitField0_ |= 0x00001000;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
       */
      public Builder clearTypeTable() {
        bitField0_ = (bitField0_ & ~0x00001000);
        typeTable_ = null;
        if (typeTableBuilder_ != null) {
          typeTableBuilder_.dispose();
          typeTableBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable.Builder getTypeTableBuilder() {
        bitField0_ |= 0x00001000;
        onChanged();
        return getTypeTableFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeTableOrBuilder getTypeTableOrBuilder() {
        if (typeTableBuilder_ != null) {
          return typeTableBuilder_.getMessageOrBuilder();
        } else {
          return typeTable_ == null ?
              org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable.getDefaultInstance() : typeTable_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable, org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeTableOrBuilder> 
          getTypeTableFieldBuilder() {
        if (typeTableBuilder_ == null) {
          typeTableBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable, org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeTableOrBuilder>(
                  getTypeTable(),
                  getParentForChildren(),
                  isClean());
          typeTable_ = null;
        }
        return typeTableBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.Internal.IntList versionRequirement_ = emptyIntList();
      private void ensureVersionRequirementIsMutable() {
        if (!versionRequirement_.isModifiable()) {
          versionRequirement_ = makeMutableCopy(versionRequirement_);
        }
        bitField0_ |= 0x00002000;
      }
      /**
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       *
       * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
       * @return A list containing the versionRequirement.
       */
      public java.util.List<java.lang.Integer>
          getVersionRequirementList() {
        versionRequirement_.makeImmutable();
        return versionRequirement_;
      }
      /**
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       *
       * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
       * @return The count of versionRequirement.
       */
      public int getVersionRequirementCount() {
        return versionRequirement_.size();
      }
      /**
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       *
       * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
       * @param index The index of the element to return.
       * @return The versionRequirement at the given index.
       */
      public int getVersionRequirement(int index) {
        return versionRequirement_.getInt(index);
      }
      /**
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       *
       * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
       * @param index The index to set the value at.
       * @param value The versionRequirement to set.
       * @return This builder for chaining.
       */
      public Builder setVersionRequirement(
          int index, int value) {

        ensureVersionRequirementIsMutable();
        versionRequirement_.setInt(index, value);
        bitField0_ |= 0x00002000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       *
       * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
       * @param value The versionRequirement to add.
       * @return This builder for chaining.
       */
      public Builder addVersionRequirement(int value) {

        ensureVersionRequirementIsMutable();
        versionRequirement_.addInt(value);
        bitField0_ |= 0x00002000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       *
       * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
       * @param values The versionRequirement to add.
       * @return This builder for chaining.
       */
      public Builder addAllVersionRequirement(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureVersionRequirementIsMutable();
        org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
            values, versionRequirement_);
        bitField0_ |= 0x00002000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       *
       * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearVersionRequirement() {
        versionRequirement_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00002000);
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.metadata.ProtoBuf.Contract contract_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Contract, org.jetbrains.kotlin.metadata.ProtoBuf.Contract.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.ContractOrBuilder> contractBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.metadata.Contract contract = 32;</code>
       * @return Whether the contract field is set.
       */
      public boolean hasContract() {
        return ((bitField0_ & 0x00004000) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Contract contract = 32;</code>
       * @return The contract.
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Contract getContract() {
        if (contractBuilder_ == null) {
          return contract_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Contract.getDefaultInstance() : contract_;
        } else {
          return contractBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Contract contract = 32;</code>
       */
      public Builder setContract(org.jetbrains.kotlin.metadata.ProtoBuf.Contract value) {
        if (contractBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          contract_ = value;
        } else {
          contractBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00004000;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Contract contract = 32;</code>
       */
      public Builder setContract(
          org.jetbrains.kotlin.metadata.ProtoBuf.Contract.Builder builderForValue) {
        if (contractBuilder_ == null) {
          contract_ = builderForValue.build();
        } else {
          contractBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00004000;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Contract contract = 32;</code>
       */
      public Builder mergeContract(org.jetbrains.kotlin.metadata.ProtoBuf.Contract value) {
        if (contractBuilder_ == null) {
          if (((bitField0_ & 0x00004000) != 0) &&
            contract_ != null &&
            contract_ != org.jetbrains.kotlin.metadata.ProtoBuf.Contract.getDefaultInstance()) {
            getContractBuilder().mergeFrom(value);
          } else {
            contract_ = value;
          }
        } else {
          contractBuilder_.mergeFrom(value);
        }
        if (contract_ != null) {
          bitField0_ |= 0x00004000;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Contract contract = 32;</code>
       */
      public Builder clearContract() {
        bitField0_ = (bitField0_ & ~0x00004000);
        contract_ = null;
        if (contractBuilder_ != null) {
          contractBuilder_.dispose();
          contractBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Contract contract = 32;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Contract.Builder getContractBuilder() {
        bitField0_ |= 0x00004000;
        onChanged();
        return getContractFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Contract contract = 32;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.ContractOrBuilder getContractOrBuilder() {
        if (contractBuilder_ != null) {
          return contractBuilder_.getMessageOrBuilder();
        } else {
          return contract_ == null ?
              org.jetbrains.kotlin.metadata.ProtoBuf.Contract.getDefaultInstance() : contract_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Contract contract = 32;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Contract, org.jetbrains.kotlin.metadata.ProtoBuf.Contract.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.ContractOrBuilder> 
          getContractFieldBuilder() {
        if (contractBuilder_ == null) {
          contractBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.metadata.ProtoBuf.Contract, org.jetbrains.kotlin.metadata.ProtoBuf.Contract.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.ContractOrBuilder>(
                  getContract(),
                  getParentForChildren(),
                  isClean());
          contract_ = null;
        }
        return contractBuilder_;
      }

      private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData> compilerPluginData_ =
        java.util.Collections.emptyList();
      private void ensureCompilerPluginDataIsMutable() {
        if (!((bitField0_ & 0x00008000) != 0)) {
          compilerPluginData_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData>(compilerPluginData_);
          bitField0_ |= 0x00008000;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginDataOrBuilder> compilerPluginDataBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData> getCompilerPluginDataList() {
        if (compilerPluginDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(compilerPluginData_);
        } else {
          return compilerPluginDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
       */
      public int getCompilerPluginDataCount() {
        if (compilerPluginDataBuilder_ == null) {
          return compilerPluginData_.size();
        } else {
          return compilerPluginDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData getCompilerPluginData(int index) {
        if (compilerPluginDataBuilder_ == null) {
          return compilerPluginData_.get(index);
        } else {
          return compilerPluginDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
       */
      public Builder setCompilerPluginData(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData value) {
        if (compilerPluginDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCompilerPluginDataIsMutable();
          compilerPluginData_.set(index, value);
          onChanged();
        } else {
          compilerPluginDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
       */
      public Builder setCompilerPluginData(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.Builder builderForValue) {
        if (compilerPluginDataBuilder_ == null) {
          ensureCompilerPluginDataIsMutable();
          compilerPluginData_.set(index, builderForValue.build());
          onChanged();
        } else {
          compilerPluginDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
       */
      public Builder addCompilerPluginData(org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData value) {
        if (compilerPluginDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCompilerPluginDataIsMutable();
          compilerPluginData_.add(value);
          onChanged();
        } else {
          compilerPluginDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
       */
      public Builder addCompilerPluginData(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData value) {
        if (compilerPluginDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCompilerPluginDataIsMutable();
          compilerPluginData_.add(index, value);
          onChanged();
        } else {
          compilerPluginDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
       */
      public Builder addCompilerPluginData(
          org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.Builder builderForValue) {
        if (compilerPluginDataBuilder_ == null) {
          ensureCompilerPluginDataIsMutable();
          compilerPluginData_.add(builderForValue.build());
          onChanged();
        } else {
          compilerPluginDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
       */
      public Builder addCompilerPluginData(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.Builder builderForValue) {
        if (compilerPluginDataBuilder_ == null) {
          ensureCompilerPluginDataIsMutable();
          compilerPluginData_.add(index, builderForValue.build());
          onChanged();
        } else {
          compilerPluginDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
       */
      public Builder addAllCompilerPluginData(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData> values) {
        if (compilerPluginDataBuilder_ == null) {
          ensureCompilerPluginDataIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, compilerPluginData_);
          onChanged();
        } else {
          compilerPluginDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
       */
      public Builder clearCompilerPluginData() {
        if (compilerPluginDataBuilder_ == null) {
          compilerPluginData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00008000);
          onChanged();
        } else {
          compilerPluginDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
       */
      public Builder removeCompilerPluginData(int index) {
        if (compilerPluginDataBuilder_ == null) {
          ensureCompilerPluginDataIsMutable();
          compilerPluginData_.remove(index);
          onChanged();
        } else {
          compilerPluginDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.Builder getCompilerPluginDataBuilder(
          int index) {
        return getCompilerPluginDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginDataOrBuilder getCompilerPluginDataOrBuilder(
          int index) {
        if (compilerPluginDataBuilder_ == null) {
          return compilerPluginData_.get(index);  } else {
          return compilerPluginDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginDataOrBuilder> 
           getCompilerPluginDataOrBuilderList() {
        if (compilerPluginDataBuilder_ != null) {
          return compilerPluginDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(compilerPluginData_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.Builder addCompilerPluginDataBuilder() {
        return getCompilerPluginDataFieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.Builder addCompilerPluginDataBuilder(
          int index) {
        return getCompilerPluginDataFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.Builder> 
           getCompilerPluginDataBuilderList() {
        return getCompilerPluginDataFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginDataOrBuilder> 
          getCompilerPluginDataFieldBuilder() {
        if (compilerPluginDataBuilder_ == null) {
          compilerPluginDataBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginDataOrBuilder>(
                  compilerPluginData_,
                  ((bitField0_ & 0x00008000) != 0),
                  getParentForChildren(),
                  isClean());
          compilerPluginData_ = null;
        }
        return compilerPluginDataBuilder_;
      }

      private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> annotation_ =
        java.util.Collections.emptyList();
      private void ensureAnnotationIsMutable() {
        if (!((bitField0_ & 0x00010000) != 0)) {
          annotation_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation>(annotation_);
          bitField0_ |= 0x00010000;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Annotation, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> annotationBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 12;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> getAnnotationList() {
        if (annotationBuilder_ == null) {
          return java.util.Collections.unmodifiableList(annotation_);
        } else {
          return annotationBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 12;</code>
       */
      public int getAnnotationCount() {
        if (annotationBuilder_ == null) {
          return annotation_.size();
        } else {
          return annotationBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 12;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getAnnotation(int index) {
        if (annotationBuilder_ == null) {
          return annotation_.get(index);
        } else {
          return annotationBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 12;</code>
       */
      public Builder setAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        if (annotationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAnnotationIsMutable();
          annotation_.set(index, value);
          onChanged();
        } else {
          annotationBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 12;</code>
       */
      public Builder setAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        if (annotationBuilder_ == null) {
          ensureAnnotationIsMutable();
          annotation_.set(index, builderForValue.build());
          onChanged();
        } else {
          annotationBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 12;</code>
       */
      public Builder addAnnotation(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        if (annotationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAnnotationIsMutable();
          annotation_.add(value);
          onChanged();
        } else {
          annotationBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 12;</code>
       */
      public Builder addAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        if (annotationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAnnotationIsMutable();
          annotation_.add(index, value);
          onChanged();
        } else {
          annotationBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 12;</code>
       */
      public Builder addAnnotation(
          org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        if (annotationBuilder_ == null) {
          ensureAnnotationIsMutable();
          annotation_.add(builderForValue.build());
          onChanged();
        } else {
          annotationBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 12;</code>
       */
      public Builder addAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        if (annotationBuilder_ == null) {
          ensureAnnotationIsMutable();
          annotation_.add(index, builderForValue.build());
          onChanged();
        } else {
          annotationBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 12;</code>
       */
      public Builder addAllAnnotation(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> values) {
        if (annotationBuilder_ == null) {
          ensureAnnotationIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, annotation_);
          onChanged();
        } else {
          annotationBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 12;</code>
       */
      public Builder clearAnnotation() {
        if (annotationBuilder_ == null) {
          annotation_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00010000);
          onChanged();
        } else {
          annotationBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 12;</code>
       */
      public Builder removeAnnotation(int index) {
        if (annotationBuilder_ == null) {
          ensureAnnotationIsMutable();
          annotation_.remove(index);
          onChanged();
        } else {
          annotationBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 12;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder getAnnotationBuilder(
          int index) {
        return getAnnotationFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 12;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder getAnnotationOrBuilder(
          int index) {
        if (annotationBuilder_ == null) {
          return annotation_.get(index);  } else {
          return annotationBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 12;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> 
           getAnnotationOrBuilderList() {
        if (annotationBuilder_ != null) {
          return annotationBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(annotation_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 12;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder addAnnotationBuilder() {
        return getAnnotationFieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 12;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder addAnnotationBuilder(
          int index) {
        return getAnnotationFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 12;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder> 
           getAnnotationBuilderList() {
        return getAnnotationFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Annotation, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> 
          getAnnotationFieldBuilder() {
        if (annotationBuilder_ == null) {
          annotationBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.ProtoBuf.Annotation, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder>(
                  annotation_,
                  ((bitField0_ & 0x00010000) != 0),
                  getParentForChildren(),
                  isClean());
          annotation_ = null;
        }
        return annotationBuilder_;
      }

      private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> extensionReceiverAnnotation_ =
        java.util.Collections.emptyList();
      private void ensureExtensionReceiverAnnotationIsMutable() {
        if (!((bitField0_ & 0x00020000) != 0)) {
          extensionReceiverAnnotation_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation>(extensionReceiverAnnotation_);
          bitField0_ |= 0x00020000;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Annotation, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> extensionReceiverAnnotationBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 34;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> getExtensionReceiverAnnotationList() {
        if (extensionReceiverAnnotationBuilder_ == null) {
          return java.util.Collections.unmodifiableList(extensionReceiverAnnotation_);
        } else {
          return extensionReceiverAnnotationBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 34;</code>
       */
      public int getExtensionReceiverAnnotationCount() {
        if (extensionReceiverAnnotationBuilder_ == null) {
          return extensionReceiverAnnotation_.size();
        } else {
          return extensionReceiverAnnotationBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 34;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getExtensionReceiverAnnotation(int index) {
        if (extensionReceiverAnnotationBuilder_ == null) {
          return extensionReceiverAnnotation_.get(index);
        } else {
          return extensionReceiverAnnotationBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 34;</code>
       */
      public Builder setExtensionReceiverAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        if (extensionReceiverAnnotationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureExtensionReceiverAnnotationIsMutable();
          extensionReceiverAnnotation_.set(index, value);
          onChanged();
        } else {
          extensionReceiverAnnotationBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 34;</code>
       */
      public Builder setExtensionReceiverAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        if (extensionReceiverAnnotationBuilder_ == null) {
          ensureExtensionReceiverAnnotationIsMutable();
          extensionReceiverAnnotation_.set(index, builderForValue.build());
          onChanged();
        } else {
          extensionReceiverAnnotationBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 34;</code>
       */
      public Builder addExtensionReceiverAnnotation(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        if (extensionReceiverAnnotationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureExtensionReceiverAnnotationIsMutable();
          extensionReceiverAnnotation_.add(value);
          onChanged();
        } else {
          extensionReceiverAnnotationBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 34;</code>
       */
      public Builder addExtensionReceiverAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        if (extensionReceiverAnnotationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureExtensionReceiverAnnotationIsMutable();
          extensionReceiverAnnotation_.add(index, value);
          onChanged();
        } else {
          extensionReceiverAnnotationBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 34;</code>
       */
      public Builder addExtensionReceiverAnnotation(
          org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        if (extensionReceiverAnnotationBuilder_ == null) {
          ensureExtensionReceiverAnnotationIsMutable();
          extensionReceiverAnnotation_.add(builderForValue.build());
          onChanged();
        } else {
          extensionReceiverAnnotationBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 34;</code>
       */
      public Builder addExtensionReceiverAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        if (extensionReceiverAnnotationBuilder_ == null) {
          ensureExtensionReceiverAnnotationIsMutable();
          extensionReceiverAnnotation_.add(index, builderForValue.build());
          onChanged();
        } else {
          extensionReceiverAnnotationBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 34;</code>
       */
      public Builder addAllExtensionReceiverAnnotation(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> values) {
        if (extensionReceiverAnnotationBuilder_ == null) {
          ensureExtensionReceiverAnnotationIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, extensionReceiverAnnotation_);
          onChanged();
        } else {
          extensionReceiverAnnotationBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 34;</code>
       */
      public Builder clearExtensionReceiverAnnotation() {
        if (extensionReceiverAnnotationBuilder_ == null) {
          extensionReceiverAnnotation_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00020000);
          onChanged();
        } else {
          extensionReceiverAnnotationBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 34;</code>
       */
      public Builder removeExtensionReceiverAnnotation(int index) {
        if (extensionReceiverAnnotationBuilder_ == null) {
          ensureExtensionReceiverAnnotationIsMutable();
          extensionReceiverAnnotation_.remove(index);
          onChanged();
        } else {
          extensionReceiverAnnotationBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 34;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder getExtensionReceiverAnnotationBuilder(
          int index) {
        return getExtensionReceiverAnnotationFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 34;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder getExtensionReceiverAnnotationOrBuilder(
          int index) {
        if (extensionReceiverAnnotationBuilder_ == null) {
          return extensionReceiverAnnotation_.get(index);  } else {
          return extensionReceiverAnnotationBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 34;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> 
           getExtensionReceiverAnnotationOrBuilderList() {
        if (extensionReceiverAnnotationBuilder_ != null) {
          return extensionReceiverAnnotationBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(extensionReceiverAnnotation_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 34;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder addExtensionReceiverAnnotationBuilder() {
        return getExtensionReceiverAnnotationFieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 34;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder addExtensionReceiverAnnotationBuilder(
          int index) {
        return getExtensionReceiverAnnotationFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 34;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder> 
           getExtensionReceiverAnnotationBuilderList() {
        return getExtensionReceiverAnnotationFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Annotation, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> 
          getExtensionReceiverAnnotationFieldBuilder() {
        if (extensionReceiverAnnotationBuilder_ == null) {
          extensionReceiverAnnotationBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.ProtoBuf.Annotation, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder>(
                  extensionReceiverAnnotation_,
                  ((bitField0_ & 0x00020000) != 0),
                  getParentForChildren(),
                  isClean());
          extensionReceiverAnnotation_ = null;
        }
        return extensionReceiverAnnotationBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.Function)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.Function)
    private static final org.jetbrains.kotlin.metadata.ProtoBuf.Function DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.metadata.ProtoBuf.Function();
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Function getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<Function>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<Function>() {
      @java.lang.Override
      public Function parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<Function> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<Function> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Function getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface PropertyOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.Property)
      org.jetbrains.kotlin.protobuf.GeneratedMessage.
          ExtendableMessageOrBuilder<Property> {

    /**
     * <pre>
     *
     * hasAnnotations
     * Visibility
     * Modality
     * MemberKind
     * isVar
     * hasGetter
     * hasSetter
     * isConst
     * isLateinit
     * hasConstant
     * isExternal
     * isDelegated
     * isExpect
     * </pre>
     *
     * <code>int32 flags = 11 [default = 518];</code>
     * @return Whether the flags field is set.
     */
    boolean hasFlags();
    /**
     * <pre>
     *
     * hasAnnotations
     * Visibility
     * Modality
     * MemberKind
     * isVar
     * hasGetter
     * hasSetter
     * isConst
     * isLateinit
     * hasConstant
     * isExternal
     * isDelegated
     * isExpect
     * </pre>
     *
     * <code>int32 flags = 11 [default = 518];</code>
     * @return The flags.
     */
    int getFlags();

    /**
     * <code>int32 old_flags = 1 [default = 2054];</code>
     * @return Whether the oldFlags field is set.
     */
    boolean hasOldFlags();
    /**
     * <code>int32 old_flags = 1 [default = 2054];</code>
     * @return The oldFlags.
     */
    int getOldFlags();

    /**
     * <code>int32 name = 2 [features = { ... }</code>
     * @return Whether the name field is set.
     */
    boolean hasName();
    /**
     * <code>int32 name = 2 [features = { ... }</code>
     * @return The name.
     */
    int getName();

    /**
     * <code>.org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
     * @return Whether the returnType field is set.
     */
    boolean hasReturnType();
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
     * @return The returnType.
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Type getReturnType();
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder getReturnTypeOrBuilder();

    /**
     * <code>int32 return_type_id = 9 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return Whether the returnTypeId field is set.
     */
    boolean hasReturnTypeId();
    /**
     * <code>int32 return_type_id = 9 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return The returnTypeId.
     */
    int getReturnTypeId();

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter> 
        getTypeParameterList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter getTypeParameter(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
     */
    int getTypeParameterCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameterOrBuilder> 
        getTypeParameterOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameterOrBuilder getTypeParameterOrBuilder(
        int index);

    /**
     * <code>.org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
     * @return Whether the receiverType field is set.
     */
    boolean hasReceiverType();
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
     * @return The receiverType.
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Type getReceiverType();
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder getReceiverTypeOrBuilder();

    /**
     * <code>int32 receiver_type_id = 10 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return Whether the receiverTypeId field is set.
     */
    boolean hasReceiverTypeId();
    /**
     * <code>int32 receiver_type_id = 10 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return The receiverTypeId.
     */
    int getReceiverTypeId();

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 12;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Type> 
        getContextReceiverTypeList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 12;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Type getContextReceiverType(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 12;</code>
     */
    int getContextReceiverTypeCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 12;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder> 
        getContextReceiverTypeOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 12;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder getContextReceiverTypeOrBuilder(
        int index);

    /**
     * <code>repeated int32 context_receiver_type_id = 13 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return A list containing the contextReceiverTypeId.
     */
    java.util.List<java.lang.Integer> getContextReceiverTypeIdList();
    /**
     * <code>repeated int32 context_receiver_type_id = 13 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return The count of contextReceiverTypeId.
     */
    int getContextReceiverTypeIdCount();
    /**
     * <code>repeated int32 context_receiver_type_id = 13 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @param index The index of the element to return.
     * @return The contextReceiverTypeId at the given index.
     */
    int getContextReceiverTypeId(int index);

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 17;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter> 
        getContextParameterList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 17;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter getContextParameter(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 17;</code>
     */
    int getContextParameterCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 17;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameterOrBuilder> 
        getContextParameterOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 17;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameterOrBuilder getContextParameterOrBuilder(
        int index);

    /**
     * <code>.org.jetbrains.kotlin.metadata.ValueParameter setter_value_parameter = 6;</code>
     * @return Whether the setterValueParameter field is set.
     */
    boolean hasSetterValueParameter();
    /**
     * <code>.org.jetbrains.kotlin.metadata.ValueParameter setter_value_parameter = 6;</code>
     * @return The setterValueParameter.
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter getSetterValueParameter();
    /**
     * <code>.org.jetbrains.kotlin.metadata.ValueParameter setter_value_parameter = 6;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameterOrBuilder getSetterValueParameterOrBuilder();

    /**
     * <pre>
     *
     * hasAnnotations
     * Visibility
     * Modality
     * isNotDefault
     * isExternal
     * isInline
     *
     * If getter_flags or setter_flags are absent, their value should be computed as follows:
     * - hasAnnotations, Visibility, Modality have the same value as in the property flags
     * - all other flags are false
     * </pre>
     *
     * <code>int32 getter_flags = 7;</code>
     * @return Whether the getterFlags field is set.
     */
    boolean hasGetterFlags();
    /**
     * <pre>
     *
     * hasAnnotations
     * Visibility
     * Modality
     * isNotDefault
     * isExternal
     * isInline
     *
     * If getter_flags or setter_flags are absent, their value should be computed as follows:
     * - hasAnnotations, Visibility, Modality have the same value as in the property flags
     * - all other flags are false
     * </pre>
     *
     * <code>int32 getter_flags = 7;</code>
     * @return The getterFlags.
     */
    int getGetterFlags();

    /**
     * <code>int32 setter_flags = 8;</code>
     * @return Whether the setterFlags field is set.
     */
    boolean hasSetterFlags();
    /**
     * <code>int32 setter_flags = 8;</code>
     * @return The setterFlags.
     */
    int getSetterFlags();

    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     * @return A list containing the versionRequirement.
     */
    java.util.List<java.lang.Integer> getVersionRequirementList();
    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     * @return The count of versionRequirement.
     */
    int getVersionRequirementCount();
    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     * @param index The index of the element to return.
     * @return The versionRequirement at the given index.
     */
    int getVersionRequirement(int index);

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData> 
        getCompilerPluginDataList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData getCompilerPluginData(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
     */
    int getCompilerPluginDataCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginDataOrBuilder> 
        getCompilerPluginDataOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginDataOrBuilder getCompilerPluginDataOrBuilder(
        int index);

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 14;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> 
        getAnnotationList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 14;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getAnnotation(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 14;</code>
     */
    int getAnnotationCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 14;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> 
        getAnnotationOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 14;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder getAnnotationOrBuilder(
        int index);

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation getter_annotation = 15;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> 
        getGetterAnnotationList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation getter_annotation = 15;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getGetterAnnotation(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation getter_annotation = 15;</code>
     */
    int getGetterAnnotationCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation getter_annotation = 15;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> 
        getGetterAnnotationOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation getter_annotation = 15;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder getGetterAnnotationOrBuilder(
        int index);

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation setter_annotation = 16;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> 
        getSetterAnnotationList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation setter_annotation = 16;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getSetterAnnotation(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation setter_annotation = 16;</code>
     */
    int getSetterAnnotationCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation setter_annotation = 16;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> 
        getSetterAnnotationOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation setter_annotation = 16;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder getSetterAnnotationOrBuilder(
        int index);

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 33;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> 
        getExtensionReceiverAnnotationList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 33;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getExtensionReceiverAnnotation(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 33;</code>
     */
    int getExtensionReceiverAnnotationCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 33;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> 
        getExtensionReceiverAnnotationOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 33;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder getExtensionReceiverAnnotationOrBuilder(
        int index);

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation backing_field_annotation = 34;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> 
        getBackingFieldAnnotationList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation backing_field_annotation = 34;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getBackingFieldAnnotation(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation backing_field_annotation = 34;</code>
     */
    int getBackingFieldAnnotationCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation backing_field_annotation = 34;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> 
        getBackingFieldAnnotationOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation backing_field_annotation = 34;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder getBackingFieldAnnotationOrBuilder(
        int index);

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation delegate_field_annotation = 35;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> 
        getDelegateFieldAnnotationList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation delegate_field_annotation = 35;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getDelegateFieldAnnotation(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation delegate_field_annotation = 35;</code>
     */
    int getDelegateFieldAnnotationCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation delegate_field_annotation = 35;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> 
        getDelegateFieldAnnotationOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation delegate_field_annotation = 35;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder getDelegateFieldAnnotationOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.metadata.Property}
   */
  public static final class Property extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage.ExtendableMessage<
        Property> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.Property)
      PropertyOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        Property.class.getName());
    }
    // Use Property.newBuilder() to construct.
    private Property(org.jetbrains.kotlin.protobuf.GeneratedMessage.ExtendableBuilder<org.jetbrains.kotlin.metadata.ProtoBuf.Property, ?> builder) {
      super(builder);
    }
    private Property() {
      flags_ = 518;
      oldFlags_ = 2054;
      typeParameter_ = java.util.Collections.emptyList();
      contextReceiverType_ = java.util.Collections.emptyList();
      contextReceiverTypeId_ = emptyIntList();
      contextParameter_ = java.util.Collections.emptyList();
      versionRequirement_ = emptyIntList();
      compilerPluginData_ = java.util.Collections.emptyList();
      annotation_ = java.util.Collections.emptyList();
      getterAnnotation_ = java.util.Collections.emptyList();
      setterAnnotation_ = java.util.Collections.emptyList();
      extensionReceiverAnnotation_ = java.util.Collections.emptyList();
      backingFieldAnnotation_ = java.util.Collections.emptyList();
      delegateFieldAnnotation_ = java.util.Collections.emptyList();
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Property_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Property_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.metadata.ProtoBuf.Property.class, org.jetbrains.kotlin.metadata.ProtoBuf.Property.Builder.class);
    }

    private int bitField0_;
    public static final int FLAGS_FIELD_NUMBER = 11;
    private int flags_ = 518;
    /**
     * <pre>
     *
     * hasAnnotations
     * Visibility
     * Modality
     * MemberKind
     * isVar
     * hasGetter
     * hasSetter
     * isConst
     * isLateinit
     * hasConstant
     * isExternal
     * isDelegated
     * isExpect
     * </pre>
     *
     * <code>int32 flags = 11 [default = 518];</code>
     * @return Whether the flags field is set.
     */
    @java.lang.Override
    public boolean hasFlags() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     *
     * hasAnnotations
     * Visibility
     * Modality
     * MemberKind
     * isVar
     * hasGetter
     * hasSetter
     * isConst
     * isLateinit
     * hasConstant
     * isExternal
     * isDelegated
     * isExpect
     * </pre>
     *
     * <code>int32 flags = 11 [default = 518];</code>
     * @return The flags.
     */
    @java.lang.Override
    public int getFlags() {
      return flags_;
    }

    public static final int OLD_FLAGS_FIELD_NUMBER = 1;
    private int oldFlags_ = 2054;
    /**
     * <code>int32 old_flags = 1 [default = 2054];</code>
     * @return Whether the oldFlags field is set.
     */
    @java.lang.Override
    public boolean hasOldFlags() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>int32 old_flags = 1 [default = 2054];</code>
     * @return The oldFlags.
     */
    @java.lang.Override
    public int getOldFlags() {
      return oldFlags_;
    }

    public static final int NAME_FIELD_NUMBER = 2;
    private int name_ = 0;
    /**
     * <code>int32 name = 2 [features = { ... }</code>
     * @return Whether the name field is set.
     */
    @java.lang.Override
    public boolean hasName() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>int32 name = 2 [features = { ... }</code>
     * @return The name.
     */
    @java.lang.Override
    public int getName() {
      return name_;
    }

    public static final int RETURN_TYPE_FIELD_NUMBER = 3;
    private org.jetbrains.kotlin.metadata.ProtoBuf.Type returnType_;
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
     * @return Whether the returnType field is set.
     */
    @java.lang.Override
    public boolean hasReturnType() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
     * @return The returnType.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Type getReturnType() {
      return returnType_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance() : returnType_;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder getReturnTypeOrBuilder() {
      return returnType_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance() : returnType_;
    }

    public static final int RETURN_TYPE_ID_FIELD_NUMBER = 9;
    private int returnTypeId_ = 0;
    /**
     * <code>int32 return_type_id = 9 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return Whether the returnTypeId field is set.
     */
    @java.lang.Override
    public boolean hasReturnTypeId() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <code>int32 return_type_id = 9 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return The returnTypeId.
     */
    @java.lang.Override
    public int getReturnTypeId() {
      return returnTypeId_;
    }

    public static final int TYPE_PARAMETER_FIELD_NUMBER = 4;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter> typeParameter_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter> getTypeParameterList() {
      return typeParameter_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameterOrBuilder> 
        getTypeParameterOrBuilderList() {
      return typeParameter_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
     */
    @java.lang.Override
    public int getTypeParameterCount() {
      return typeParameter_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter getTypeParameter(int index) {
      return typeParameter_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameterOrBuilder getTypeParameterOrBuilder(
        int index) {
      return typeParameter_.get(index);
    }

    public static final int RECEIVER_TYPE_FIELD_NUMBER = 5;
    private org.jetbrains.kotlin.metadata.ProtoBuf.Type receiverType_;
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
     * @return Whether the receiverType field is set.
     */
    @java.lang.Override
    public boolean hasReceiverType() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
     * @return The receiverType.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Type getReceiverType() {
      return receiverType_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance() : receiverType_;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder getReceiverTypeOrBuilder() {
      return receiverType_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance() : receiverType_;
    }

    public static final int RECEIVER_TYPE_ID_FIELD_NUMBER = 10;
    private int receiverTypeId_ = 0;
    /**
     * <code>int32 receiver_type_id = 10 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return Whether the receiverTypeId field is set.
     */
    @java.lang.Override
    public boolean hasReceiverTypeId() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <code>int32 receiver_type_id = 10 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return The receiverTypeId.
     */
    @java.lang.Override
    public int getReceiverTypeId() {
      return receiverTypeId_;
    }

    public static final int CONTEXT_RECEIVER_TYPE_FIELD_NUMBER = 12;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Type> contextReceiverType_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 12;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Type> getContextReceiverTypeList() {
      return contextReceiverType_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 12;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder> 
        getContextReceiverTypeOrBuilderList() {
      return contextReceiverType_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 12;</code>
     */
    @java.lang.Override
    public int getContextReceiverTypeCount() {
      return contextReceiverType_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 12;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Type getContextReceiverType(int index) {
      return contextReceiverType_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 12;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder getContextReceiverTypeOrBuilder(
        int index) {
      return contextReceiverType_.get(index);
    }

    public static final int CONTEXT_RECEIVER_TYPE_ID_FIELD_NUMBER = 13;
    @SuppressWarnings("serial")
    private org.jetbrains.kotlin.protobuf.Internal.IntList contextReceiverTypeId_ =
        emptyIntList();
    /**
     * <code>repeated int32 context_receiver_type_id = 13 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return A list containing the contextReceiverTypeId.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getContextReceiverTypeIdList() {
      return contextReceiverTypeId_;
    }
    /**
     * <code>repeated int32 context_receiver_type_id = 13 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return The count of contextReceiverTypeId.
     */
    public int getContextReceiverTypeIdCount() {
      return contextReceiverTypeId_.size();
    }
    /**
     * <code>repeated int32 context_receiver_type_id = 13 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @param index The index of the element to return.
     * @return The contextReceiverTypeId at the given index.
     */
    public int getContextReceiverTypeId(int index) {
      return contextReceiverTypeId_.getInt(index);
    }
    private int contextReceiverTypeIdMemoizedSerializedSize = -1;

    public static final int CONTEXT_PARAMETER_FIELD_NUMBER = 17;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter> contextParameter_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 17;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter> getContextParameterList() {
      return contextParameter_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 17;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameterOrBuilder> 
        getContextParameterOrBuilderList() {
      return contextParameter_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 17;</code>
     */
    @java.lang.Override
    public int getContextParameterCount() {
      return contextParameter_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 17;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter getContextParameter(int index) {
      return contextParameter_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 17;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameterOrBuilder getContextParameterOrBuilder(
        int index) {
      return contextParameter_.get(index);
    }

    public static final int SETTER_VALUE_PARAMETER_FIELD_NUMBER = 6;
    private org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter setterValueParameter_;
    /**
     * <code>.org.jetbrains.kotlin.metadata.ValueParameter setter_value_parameter = 6;</code>
     * @return Whether the setterValueParameter field is set.
     */
    @java.lang.Override
    public boolean hasSetterValueParameter() {
      return ((bitField0_ & 0x00000080) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.ValueParameter setter_value_parameter = 6;</code>
     * @return The setterValueParameter.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter getSetterValueParameter() {
      return setterValueParameter_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.getDefaultInstance() : setterValueParameter_;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.ValueParameter setter_value_parameter = 6;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameterOrBuilder getSetterValueParameterOrBuilder() {
      return setterValueParameter_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.getDefaultInstance() : setterValueParameter_;
    }

    public static final int GETTER_FLAGS_FIELD_NUMBER = 7;
    private int getterFlags_ = 0;
    /**
     * <pre>
     *
     * hasAnnotations
     * Visibility
     * Modality
     * isNotDefault
     * isExternal
     * isInline
     *
     * If getter_flags or setter_flags are absent, their value should be computed as follows:
     * - hasAnnotations, Visibility, Modality have the same value as in the property flags
     * - all other flags are false
     * </pre>
     *
     * <code>int32 getter_flags = 7;</code>
     * @return Whether the getterFlags field is set.
     */
    @java.lang.Override
    public boolean hasGetterFlags() {
      return ((bitField0_ & 0x00000100) != 0);
    }
    /**
     * <pre>
     *
     * hasAnnotations
     * Visibility
     * Modality
     * isNotDefault
     * isExternal
     * isInline
     *
     * If getter_flags or setter_flags are absent, their value should be computed as follows:
     * - hasAnnotations, Visibility, Modality have the same value as in the property flags
     * - all other flags are false
     * </pre>
     *
     * <code>int32 getter_flags = 7;</code>
     * @return The getterFlags.
     */
    @java.lang.Override
    public int getGetterFlags() {
      return getterFlags_;
    }

    public static final int SETTER_FLAGS_FIELD_NUMBER = 8;
    private int setterFlags_ = 0;
    /**
     * <code>int32 setter_flags = 8;</code>
     * @return Whether the setterFlags field is set.
     */
    @java.lang.Override
    public boolean hasSetterFlags() {
      return ((bitField0_ & 0x00000200) != 0);
    }
    /**
     * <code>int32 setter_flags = 8;</code>
     * @return The setterFlags.
     */
    @java.lang.Override
    public int getSetterFlags() {
      return setterFlags_;
    }

    public static final int VERSION_REQUIREMENT_FIELD_NUMBER = 31;
    @SuppressWarnings("serial")
    private org.jetbrains.kotlin.protobuf.Internal.IntList versionRequirement_ =
        emptyIntList();
    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     * @return A list containing the versionRequirement.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getVersionRequirementList() {
      return versionRequirement_;
    }
    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     * @return The count of versionRequirement.
     */
    public int getVersionRequirementCount() {
      return versionRequirement_.size();
    }
    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     * @param index The index of the element to return.
     * @return The versionRequirement at the given index.
     */
    public int getVersionRequirement(int index) {
      return versionRequirement_.getInt(index);
    }

    public static final int COMPILER_PLUGIN_DATA_FIELD_NUMBER = 32;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData> compilerPluginData_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData> getCompilerPluginDataList() {
      return compilerPluginData_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginDataOrBuilder> 
        getCompilerPluginDataOrBuilderList() {
      return compilerPluginData_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
     */
    @java.lang.Override
    public int getCompilerPluginDataCount() {
      return compilerPluginData_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData getCompilerPluginData(int index) {
      return compilerPluginData_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginDataOrBuilder getCompilerPluginDataOrBuilder(
        int index) {
      return compilerPluginData_.get(index);
    }

    public static final int ANNOTATION_FIELD_NUMBER = 14;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> annotation_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 14;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> getAnnotationList() {
      return annotation_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 14;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> 
        getAnnotationOrBuilderList() {
      return annotation_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 14;</code>
     */
    @java.lang.Override
    public int getAnnotationCount() {
      return annotation_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 14;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getAnnotation(int index) {
      return annotation_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 14;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder getAnnotationOrBuilder(
        int index) {
      return annotation_.get(index);
    }

    public static final int GETTER_ANNOTATION_FIELD_NUMBER = 15;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> getterAnnotation_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation getter_annotation = 15;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> getGetterAnnotationList() {
      return getterAnnotation_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation getter_annotation = 15;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> 
        getGetterAnnotationOrBuilderList() {
      return getterAnnotation_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation getter_annotation = 15;</code>
     */
    @java.lang.Override
    public int getGetterAnnotationCount() {
      return getterAnnotation_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation getter_annotation = 15;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getGetterAnnotation(int index) {
      return getterAnnotation_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation getter_annotation = 15;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder getGetterAnnotationOrBuilder(
        int index) {
      return getterAnnotation_.get(index);
    }

    public static final int SETTER_ANNOTATION_FIELD_NUMBER = 16;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> setterAnnotation_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation setter_annotation = 16;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> getSetterAnnotationList() {
      return setterAnnotation_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation setter_annotation = 16;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> 
        getSetterAnnotationOrBuilderList() {
      return setterAnnotation_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation setter_annotation = 16;</code>
     */
    @java.lang.Override
    public int getSetterAnnotationCount() {
      return setterAnnotation_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation setter_annotation = 16;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getSetterAnnotation(int index) {
      return setterAnnotation_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation setter_annotation = 16;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder getSetterAnnotationOrBuilder(
        int index) {
      return setterAnnotation_.get(index);
    }

    public static final int EXTENSION_RECEIVER_ANNOTATION_FIELD_NUMBER = 33;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> extensionReceiverAnnotation_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 33;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> getExtensionReceiverAnnotationList() {
      return extensionReceiverAnnotation_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 33;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> 
        getExtensionReceiverAnnotationOrBuilderList() {
      return extensionReceiverAnnotation_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 33;</code>
     */
    @java.lang.Override
    public int getExtensionReceiverAnnotationCount() {
      return extensionReceiverAnnotation_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 33;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getExtensionReceiverAnnotation(int index) {
      return extensionReceiverAnnotation_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 33;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder getExtensionReceiverAnnotationOrBuilder(
        int index) {
      return extensionReceiverAnnotation_.get(index);
    }

    public static final int BACKING_FIELD_ANNOTATION_FIELD_NUMBER = 34;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> backingFieldAnnotation_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation backing_field_annotation = 34;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> getBackingFieldAnnotationList() {
      return backingFieldAnnotation_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation backing_field_annotation = 34;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> 
        getBackingFieldAnnotationOrBuilderList() {
      return backingFieldAnnotation_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation backing_field_annotation = 34;</code>
     */
    @java.lang.Override
    public int getBackingFieldAnnotationCount() {
      return backingFieldAnnotation_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation backing_field_annotation = 34;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getBackingFieldAnnotation(int index) {
      return backingFieldAnnotation_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation backing_field_annotation = 34;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder getBackingFieldAnnotationOrBuilder(
        int index) {
      return backingFieldAnnotation_.get(index);
    }

    public static final int DELEGATE_FIELD_ANNOTATION_FIELD_NUMBER = 35;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> delegateFieldAnnotation_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation delegate_field_annotation = 35;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> getDelegateFieldAnnotationList() {
      return delegateFieldAnnotation_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation delegate_field_annotation = 35;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> 
        getDelegateFieldAnnotationOrBuilderList() {
      return delegateFieldAnnotation_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation delegate_field_annotation = 35;</code>
     */
    @java.lang.Override
    public int getDelegateFieldAnnotationCount() {
      return delegateFieldAnnotation_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation delegate_field_annotation = 35;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getDelegateFieldAnnotation(int index) {
      return delegateFieldAnnotation_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation delegate_field_annotation = 35;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder getDelegateFieldAnnotationOrBuilder(
        int index) {
      return delegateFieldAnnotation_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasName()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasReturnType()) {
        if (!getReturnType().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getTypeParameterCount(); i++) {
        if (!getTypeParameter(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasReceiverType()) {
        if (!getReceiverType().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getContextReceiverTypeCount(); i++) {
        if (!getContextReceiverType(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getContextParameterCount(); i++) {
        if (!getContextParameter(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasSetterValueParameter()) {
        if (!getSetterValueParameter().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getCompilerPluginDataCount(); i++) {
        if (!getCompilerPluginData(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getAnnotationCount(); i++) {
        if (!getAnnotation(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getGetterAnnotationCount(); i++) {
        if (!getGetterAnnotation(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getSetterAnnotationCount(); i++) {
        if (!getSetterAnnotation(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getExtensionReceiverAnnotationCount(); i++) {
        if (!getExtensionReceiverAnnotation(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getBackingFieldAnnotationCount(); i++) {
        if (!getBackingFieldAnnotation(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getDelegateFieldAnnotationCount(); i++) {
        if (!getDelegateFieldAnnotation(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (!extensionsAreInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      org.jetbrains.kotlin.protobuf.GeneratedMessage
        .ExtendableMessage.ExtensionSerializer
          extensionWriter = newExtensionSerializer();
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeInt32(1, oldFlags_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeInt32(2, name_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeMessage(3, getReturnType());
      }
      for (int i = 0; i < typeParameter_.size(); i++) {
        output.writeMessage(4, typeParameter_.get(i));
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        output.writeMessage(5, getReceiverType());
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        output.writeMessage(6, getSetterValueParameter());
      }
      if (((bitField0_ & 0x00000100) != 0)) {
        output.writeInt32(7, getterFlags_);
      }
      if (((bitField0_ & 0x00000200) != 0)) {
        output.writeInt32(8, setterFlags_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        output.writeInt32(9, returnTypeId_);
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        output.writeInt32(10, receiverTypeId_);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeInt32(11, flags_);
      }
      for (int i = 0; i < contextReceiverType_.size(); i++) {
        output.writeMessage(12, contextReceiverType_.get(i));
      }
      if (getContextReceiverTypeIdList().size() > 0) {
        output.writeUInt32NoTag(106);
        output.writeUInt32NoTag(contextReceiverTypeIdMemoizedSerializedSize);
      }
      for (int i = 0; i < contextReceiverTypeId_.size(); i++) {
        output.writeInt32NoTag(contextReceiverTypeId_.getInt(i));
      }
      for (int i = 0; i < annotation_.size(); i++) {
        output.writeMessage(14, annotation_.get(i));
      }
      for (int i = 0; i < getterAnnotation_.size(); i++) {
        output.writeMessage(15, getterAnnotation_.get(i));
      }
      for (int i = 0; i < setterAnnotation_.size(); i++) {
        output.writeMessage(16, setterAnnotation_.get(i));
      }
      for (int i = 0; i < contextParameter_.size(); i++) {
        output.writeMessage(17, contextParameter_.get(i));
      }
      for (int i = 0; i < versionRequirement_.size(); i++) {
        output.writeInt32(31, versionRequirement_.getInt(i));
      }
      for (int i = 0; i < compilerPluginData_.size(); i++) {
        output.writeMessage(32, compilerPluginData_.get(i));
      }
      for (int i = 0; i < extensionReceiverAnnotation_.size(); i++) {
        output.writeMessage(33, extensionReceiverAnnotation_.get(i));
      }
      for (int i = 0; i < backingFieldAnnotation_.size(); i++) {
        output.writeMessage(34, backingFieldAnnotation_.get(i));
      }
      for (int i = 0; i < delegateFieldAnnotation_.size(); i++) {
        output.writeMessage(35, delegateFieldAnnotation_.get(i));
      }
      extensionWriter.writeUntil(19000, output);
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000002) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(1, oldFlags_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(2, name_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(3, getReturnType());
      }
      for (int i = 0; i < typeParameter_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(4, typeParameter_.get(i));
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(5, getReceiverType());
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(6, getSetterValueParameter());
      }
      if (((bitField0_ & 0x00000100) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(7, getterFlags_);
      }
      if (((bitField0_ & 0x00000200) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(8, setterFlags_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(9, returnTypeId_);
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(10, receiverTypeId_);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(11, flags_);
      }
      for (int i = 0; i < contextReceiverType_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(12, contextReceiverType_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < contextReceiverTypeId_.size(); i++) {
          dataSize += org.jetbrains.kotlin.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(contextReceiverTypeId_.getInt(i));
        }
        size += dataSize;
        if (!getContextReceiverTypeIdList().isEmpty()) {
          size += 1;
          size += org.jetbrains.kotlin.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        contextReceiverTypeIdMemoizedSerializedSize = dataSize;
      }
      for (int i = 0; i < annotation_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(14, annotation_.get(i));
      }
      for (int i = 0; i < getterAnnotation_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(15, getterAnnotation_.get(i));
      }
      for (int i = 0; i < setterAnnotation_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(16, setterAnnotation_.get(i));
      }
      for (int i = 0; i < contextParameter_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(17, contextParameter_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < versionRequirement_.size(); i++) {
          dataSize += org.jetbrains.kotlin.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(versionRequirement_.getInt(i));
        }
        size += dataSize;
        size += 2 * getVersionRequirementList().size();
      }
      for (int i = 0; i < compilerPluginData_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(32, compilerPluginData_.get(i));
      }
      for (int i = 0; i < extensionReceiverAnnotation_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(33, extensionReceiverAnnotation_.get(i));
      }
      for (int i = 0; i < backingFieldAnnotation_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(34, backingFieldAnnotation_.get(i));
      }
      for (int i = 0; i < delegateFieldAnnotation_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(35, delegateFieldAnnotation_.get(i));
      }
      size += extensionsSerializedSize();
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.metadata.ProtoBuf.Property)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.metadata.ProtoBuf.Property other = (org.jetbrains.kotlin.metadata.ProtoBuf.Property) obj;

      if (hasFlags() != other.hasFlags()) return false;
      if (hasFlags()) {
        if (getFlags()
            != other.getFlags()) return false;
      }
      if (hasOldFlags() != other.hasOldFlags()) return false;
      if (hasOldFlags()) {
        if (getOldFlags()
            != other.getOldFlags()) return false;
      }
      if (hasName() != other.hasName()) return false;
      if (hasName()) {
        if (getName()
            != other.getName()) return false;
      }
      if (hasReturnType() != other.hasReturnType()) return false;
      if (hasReturnType()) {
        if (!getReturnType()
            .equals(other.getReturnType())) return false;
      }
      if (hasReturnTypeId() != other.hasReturnTypeId()) return false;
      if (hasReturnTypeId()) {
        if (getReturnTypeId()
            != other.getReturnTypeId()) return false;
      }
      if (!getTypeParameterList()
          .equals(other.getTypeParameterList())) return false;
      if (hasReceiverType() != other.hasReceiverType()) return false;
      if (hasReceiverType()) {
        if (!getReceiverType()
            .equals(other.getReceiverType())) return false;
      }
      if (hasReceiverTypeId() != other.hasReceiverTypeId()) return false;
      if (hasReceiverTypeId()) {
        if (getReceiverTypeId()
            != other.getReceiverTypeId()) return false;
      }
      if (!getContextReceiverTypeList()
          .equals(other.getContextReceiverTypeList())) return false;
      if (!getContextReceiverTypeIdList()
          .equals(other.getContextReceiverTypeIdList())) return false;
      if (!getContextParameterList()
          .equals(other.getContextParameterList())) return false;
      if (hasSetterValueParameter() != other.hasSetterValueParameter()) return false;
      if (hasSetterValueParameter()) {
        if (!getSetterValueParameter()
            .equals(other.getSetterValueParameter())) return false;
      }
      if (hasGetterFlags() != other.hasGetterFlags()) return false;
      if (hasGetterFlags()) {
        if (getGetterFlags()
            != other.getGetterFlags()) return false;
      }
      if (hasSetterFlags() != other.hasSetterFlags()) return false;
      if (hasSetterFlags()) {
        if (getSetterFlags()
            != other.getSetterFlags()) return false;
      }
      if (!getVersionRequirementList()
          .equals(other.getVersionRequirementList())) return false;
      if (!getCompilerPluginDataList()
          .equals(other.getCompilerPluginDataList())) return false;
      if (!getAnnotationList()
          .equals(other.getAnnotationList())) return false;
      if (!getGetterAnnotationList()
          .equals(other.getGetterAnnotationList())) return false;
      if (!getSetterAnnotationList()
          .equals(other.getSetterAnnotationList())) return false;
      if (!getExtensionReceiverAnnotationList()
          .equals(other.getExtensionReceiverAnnotationList())) return false;
      if (!getBackingFieldAnnotationList()
          .equals(other.getBackingFieldAnnotationList())) return false;
      if (!getDelegateFieldAnnotationList()
          .equals(other.getDelegateFieldAnnotationList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      if (!getExtensionFields().equals(other.getExtensionFields()))
        return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasFlags()) {
        hash = (37 * hash) + FLAGS_FIELD_NUMBER;
        hash = (53 * hash) + getFlags();
      }
      if (hasOldFlags()) {
        hash = (37 * hash) + OLD_FLAGS_FIELD_NUMBER;
        hash = (53 * hash) + getOldFlags();
      }
      if (hasName()) {
        hash = (37 * hash) + NAME_FIELD_NUMBER;
        hash = (53 * hash) + getName();
      }
      if (hasReturnType()) {
        hash = (37 * hash) + RETURN_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + getReturnType().hashCode();
      }
      if (hasReturnTypeId()) {
        hash = (37 * hash) + RETURN_TYPE_ID_FIELD_NUMBER;
        hash = (53 * hash) + getReturnTypeId();
      }
      if (getTypeParameterCount() > 0) {
        hash = (37 * hash) + TYPE_PARAMETER_FIELD_NUMBER;
        hash = (53 * hash) + getTypeParameterList().hashCode();
      }
      if (hasReceiverType()) {
        hash = (37 * hash) + RECEIVER_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + getReceiverType().hashCode();
      }
      if (hasReceiverTypeId()) {
        hash = (37 * hash) + RECEIVER_TYPE_ID_FIELD_NUMBER;
        hash = (53 * hash) + getReceiverTypeId();
      }
      if (getContextReceiverTypeCount() > 0) {
        hash = (37 * hash) + CONTEXT_RECEIVER_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + getContextReceiverTypeList().hashCode();
      }
      if (getContextReceiverTypeIdCount() > 0) {
        hash = (37 * hash) + CONTEXT_RECEIVER_TYPE_ID_FIELD_NUMBER;
        hash = (53 * hash) + getContextReceiverTypeIdList().hashCode();
      }
      if (getContextParameterCount() > 0) {
        hash = (37 * hash) + CONTEXT_PARAMETER_FIELD_NUMBER;
        hash = (53 * hash) + getContextParameterList().hashCode();
      }
      if (hasSetterValueParameter()) {
        hash = (37 * hash) + SETTER_VALUE_PARAMETER_FIELD_NUMBER;
        hash = (53 * hash) + getSetterValueParameter().hashCode();
      }
      if (hasGetterFlags()) {
        hash = (37 * hash) + GETTER_FLAGS_FIELD_NUMBER;
        hash = (53 * hash) + getGetterFlags();
      }
      if (hasSetterFlags()) {
        hash = (37 * hash) + SETTER_FLAGS_FIELD_NUMBER;
        hash = (53 * hash) + getSetterFlags();
      }
      if (getVersionRequirementCount() > 0) {
        hash = (37 * hash) + VERSION_REQUIREMENT_FIELD_NUMBER;
        hash = (53 * hash) + getVersionRequirementList().hashCode();
      }
      if (getCompilerPluginDataCount() > 0) {
        hash = (37 * hash) + COMPILER_PLUGIN_DATA_FIELD_NUMBER;
        hash = (53 * hash) + getCompilerPluginDataList().hashCode();
      }
      if (getAnnotationCount() > 0) {
        hash = (37 * hash) + ANNOTATION_FIELD_NUMBER;
        hash = (53 * hash) + getAnnotationList().hashCode();
      }
      if (getGetterAnnotationCount() > 0) {
        hash = (37 * hash) + GETTER_ANNOTATION_FIELD_NUMBER;
        hash = (53 * hash) + getGetterAnnotationList().hashCode();
      }
      if (getSetterAnnotationCount() > 0) {
        hash = (37 * hash) + SETTER_ANNOTATION_FIELD_NUMBER;
        hash = (53 * hash) + getSetterAnnotationList().hashCode();
      }
      if (getExtensionReceiverAnnotationCount() > 0) {
        hash = (37 * hash) + EXTENSION_RECEIVER_ANNOTATION_FIELD_NUMBER;
        hash = (53 * hash) + getExtensionReceiverAnnotationList().hashCode();
      }
      if (getBackingFieldAnnotationCount() > 0) {
        hash = (37 * hash) + BACKING_FIELD_ANNOTATION_FIELD_NUMBER;
        hash = (53 * hash) + getBackingFieldAnnotationList().hashCode();
      }
      if (getDelegateFieldAnnotationCount() > 0) {
        hash = (37 * hash) + DELEGATE_FIELD_ANNOTATION_FIELD_NUMBER;
        hash = (53 * hash) + getDelegateFieldAnnotationList().hashCode();
      }
      hash = hashFields(hash, getExtensionFields());
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Property parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Property parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Property parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Property parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Property parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Property parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Property parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Property parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Property parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Property parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Property parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Property parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.metadata.ProtoBuf.Property prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.Property}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.ExtendableBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Property, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.Property)
        org.jetbrains.kotlin.metadata.ProtoBuf.PropertyOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Property_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Property_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.metadata.ProtoBuf.Property.class, org.jetbrains.kotlin.metadata.ProtoBuf.Property.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.metadata.ProtoBuf.Property.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getReturnTypeFieldBuilder();
          getTypeParameterFieldBuilder();
          getReceiverTypeFieldBuilder();
          getContextReceiverTypeFieldBuilder();
          getContextParameterFieldBuilder();
          getSetterValueParameterFieldBuilder();
          getCompilerPluginDataFieldBuilder();
          getAnnotationFieldBuilder();
          getGetterAnnotationFieldBuilder();
          getSetterAnnotationFieldBuilder();
          getExtensionReceiverAnnotationFieldBuilder();
          getBackingFieldAnnotationFieldBuilder();
          getDelegateFieldAnnotationFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        flags_ = 518;
        oldFlags_ = 2054;
        name_ = 0;
        returnType_ = null;
        if (returnTypeBuilder_ != null) {
          returnTypeBuilder_.dispose();
          returnTypeBuilder_ = null;
        }
        returnTypeId_ = 0;
        if (typeParameterBuilder_ == null) {
          typeParameter_ = java.util.Collections.emptyList();
        } else {
          typeParameter_ = null;
          typeParameterBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        receiverType_ = null;
        if (receiverTypeBuilder_ != null) {
          receiverTypeBuilder_.dispose();
          receiverTypeBuilder_ = null;
        }
        receiverTypeId_ = 0;
        if (contextReceiverTypeBuilder_ == null) {
          contextReceiverType_ = java.util.Collections.emptyList();
        } else {
          contextReceiverType_ = null;
          contextReceiverTypeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000100);
        contextReceiverTypeId_ = emptyIntList();
        if (contextParameterBuilder_ == null) {
          contextParameter_ = java.util.Collections.emptyList();
        } else {
          contextParameter_ = null;
          contextParameterBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000400);
        setterValueParameter_ = null;
        if (setterValueParameterBuilder_ != null) {
          setterValueParameterBuilder_.dispose();
          setterValueParameterBuilder_ = null;
        }
        getterFlags_ = 0;
        setterFlags_ = 0;
        versionRequirement_ = emptyIntList();
        if (compilerPluginDataBuilder_ == null) {
          compilerPluginData_ = java.util.Collections.emptyList();
        } else {
          compilerPluginData_ = null;
          compilerPluginDataBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00008000);
        if (annotationBuilder_ == null) {
          annotation_ = java.util.Collections.emptyList();
        } else {
          annotation_ = null;
          annotationBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00010000);
        if (getterAnnotationBuilder_ == null) {
          getterAnnotation_ = java.util.Collections.emptyList();
        } else {
          getterAnnotation_ = null;
          getterAnnotationBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00020000);
        if (setterAnnotationBuilder_ == null) {
          setterAnnotation_ = java.util.Collections.emptyList();
        } else {
          setterAnnotation_ = null;
          setterAnnotationBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00040000);
        if (extensionReceiverAnnotationBuilder_ == null) {
          extensionReceiverAnnotation_ = java.util.Collections.emptyList();
        } else {
          extensionReceiverAnnotation_ = null;
          extensionReceiverAnnotationBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00080000);
        if (backingFieldAnnotationBuilder_ == null) {
          backingFieldAnnotation_ = java.util.Collections.emptyList();
        } else {
          backingFieldAnnotation_ = null;
          backingFieldAnnotationBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00100000);
        if (delegateFieldAnnotationBuilder_ == null) {
          delegateFieldAnnotation_ = java.util.Collections.emptyList();
        } else {
          delegateFieldAnnotation_ = null;
          delegateFieldAnnotationBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00200000);
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Property_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Property getDefaultInstanceForType() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.Property.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Property build() {
        org.jetbrains.kotlin.metadata.ProtoBuf.Property result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Property buildPartial() {
        org.jetbrains.kotlin.metadata.ProtoBuf.Property result = new org.jetbrains.kotlin.metadata.ProtoBuf.Property(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(org.jetbrains.kotlin.metadata.ProtoBuf.Property result) {
        if (typeParameterBuilder_ == null) {
          if (((bitField0_ & 0x00000020) != 0)) {
            typeParameter_ = java.util.Collections.unmodifiableList(typeParameter_);
            bitField0_ = (bitField0_ & ~0x00000020);
          }
          result.typeParameter_ = typeParameter_;
        } else {
          result.typeParameter_ = typeParameterBuilder_.build();
        }
        if (contextReceiverTypeBuilder_ == null) {
          if (((bitField0_ & 0x00000100) != 0)) {
            contextReceiverType_ = java.util.Collections.unmodifiableList(contextReceiverType_);
            bitField0_ = (bitField0_ & ~0x00000100);
          }
          result.contextReceiverType_ = contextReceiverType_;
        } else {
          result.contextReceiverType_ = contextReceiverTypeBuilder_.build();
        }
        if (contextParameterBuilder_ == null) {
          if (((bitField0_ & 0x00000400) != 0)) {
            contextParameter_ = java.util.Collections.unmodifiableList(contextParameter_);
            bitField0_ = (bitField0_ & ~0x00000400);
          }
          result.contextParameter_ = contextParameter_;
        } else {
          result.contextParameter_ = contextParameterBuilder_.build();
        }
        if (compilerPluginDataBuilder_ == null) {
          if (((bitField0_ & 0x00008000) != 0)) {
            compilerPluginData_ = java.util.Collections.unmodifiableList(compilerPluginData_);
            bitField0_ = (bitField0_ & ~0x00008000);
          }
          result.compilerPluginData_ = compilerPluginData_;
        } else {
          result.compilerPluginData_ = compilerPluginDataBuilder_.build();
        }
        if (annotationBuilder_ == null) {
          if (((bitField0_ & 0x00010000) != 0)) {
            annotation_ = java.util.Collections.unmodifiableList(annotation_);
            bitField0_ = (bitField0_ & ~0x00010000);
          }
          result.annotation_ = annotation_;
        } else {
          result.annotation_ = annotationBuilder_.build();
        }
        if (getterAnnotationBuilder_ == null) {
          if (((bitField0_ & 0x00020000) != 0)) {
            getterAnnotation_ = java.util.Collections.unmodifiableList(getterAnnotation_);
            bitField0_ = (bitField0_ & ~0x00020000);
          }
          result.getterAnnotation_ = getterAnnotation_;
        } else {
          result.getterAnnotation_ = getterAnnotationBuilder_.build();
        }
        if (setterAnnotationBuilder_ == null) {
          if (((bitField0_ & 0x00040000) != 0)) {
            setterAnnotation_ = java.util.Collections.unmodifiableList(setterAnnotation_);
            bitField0_ = (bitField0_ & ~0x00040000);
          }
          result.setterAnnotation_ = setterAnnotation_;
        } else {
          result.setterAnnotation_ = setterAnnotationBuilder_.build();
        }
        if (extensionReceiverAnnotationBuilder_ == null) {
          if (((bitField0_ & 0x00080000) != 0)) {
            extensionReceiverAnnotation_ = java.util.Collections.unmodifiableList(extensionReceiverAnnotation_);
            bitField0_ = (bitField0_ & ~0x00080000);
          }
          result.extensionReceiverAnnotation_ = extensionReceiverAnnotation_;
        } else {
          result.extensionReceiverAnnotation_ = extensionReceiverAnnotationBuilder_.build();
        }
        if (backingFieldAnnotationBuilder_ == null) {
          if (((bitField0_ & 0x00100000) != 0)) {
            backingFieldAnnotation_ = java.util.Collections.unmodifiableList(backingFieldAnnotation_);
            bitField0_ = (bitField0_ & ~0x00100000);
          }
          result.backingFieldAnnotation_ = backingFieldAnnotation_;
        } else {
          result.backingFieldAnnotation_ = backingFieldAnnotationBuilder_.build();
        }
        if (delegateFieldAnnotationBuilder_ == null) {
          if (((bitField0_ & 0x00200000) != 0)) {
            delegateFieldAnnotation_ = java.util.Collections.unmodifiableList(delegateFieldAnnotation_);
            bitField0_ = (bitField0_ & ~0x00200000);
          }
          result.delegateFieldAnnotation_ = delegateFieldAnnotation_;
        } else {
          result.delegateFieldAnnotation_ = delegateFieldAnnotationBuilder_.build();
        }
      }

      private void buildPartial0(org.jetbrains.kotlin.metadata.ProtoBuf.Property result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.flags_ = flags_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.oldFlags_ = oldFlags_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.name_ = name_;
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.returnType_ = returnTypeBuilder_ == null
              ? returnType_
              : returnTypeBuilder_.build();
          to_bitField0_ |= 0x00000008;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.returnTypeId_ = returnTypeId_;
          to_bitField0_ |= 0x00000010;
        }
        if (((from_bitField0_ & 0x00000040) != 0)) {
          result.receiverType_ = receiverTypeBuilder_ == null
              ? receiverType_
              : receiverTypeBuilder_.build();
          to_bitField0_ |= 0x00000020;
        }
        if (((from_bitField0_ & 0x00000080) != 0)) {
          result.receiverTypeId_ = receiverTypeId_;
          to_bitField0_ |= 0x00000040;
        }
        if (((from_bitField0_ & 0x00000200) != 0)) {
          contextReceiverTypeId_.makeImmutable();
          result.contextReceiverTypeId_ = contextReceiverTypeId_;
        }
        if (((from_bitField0_ & 0x00000800) != 0)) {
          result.setterValueParameter_ = setterValueParameterBuilder_ == null
              ? setterValueParameter_
              : setterValueParameterBuilder_.build();
          to_bitField0_ |= 0x00000080;
        }
        if (((from_bitField0_ & 0x00001000) != 0)) {
          result.getterFlags_ = getterFlags_;
          to_bitField0_ |= 0x00000100;
        }
        if (((from_bitField0_ & 0x00002000) != 0)) {
          result.setterFlags_ = setterFlags_;
          to_bitField0_ |= 0x00000200;
        }
        if (((from_bitField0_ & 0x00004000) != 0)) {
          versionRequirement_.makeImmutable();
          result.versionRequirement_ = versionRequirement_;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.metadata.ProtoBuf.Property) {
          return mergeFrom((org.jetbrains.kotlin.metadata.ProtoBuf.Property)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.metadata.ProtoBuf.Property other) {
        if (other == org.jetbrains.kotlin.metadata.ProtoBuf.Property.getDefaultInstance()) return this;
        if (other.hasFlags()) {
          setFlags(other.getFlags());
        }
        if (other.hasOldFlags()) {
          setOldFlags(other.getOldFlags());
        }
        if (other.hasName()) {
          setName(other.getName());
        }
        if (other.hasReturnType()) {
          mergeReturnType(other.getReturnType());
        }
        if (other.hasReturnTypeId()) {
          setReturnTypeId(other.getReturnTypeId());
        }
        if (typeParameterBuilder_ == null) {
          if (!other.typeParameter_.isEmpty()) {
            if (typeParameter_.isEmpty()) {
              typeParameter_ = other.typeParameter_;
              bitField0_ = (bitField0_ & ~0x00000020);
            } else {
              ensureTypeParameterIsMutable();
              typeParameter_.addAll(other.typeParameter_);
            }
            onChanged();
          }
        } else {
          if (!other.typeParameter_.isEmpty()) {
            if (typeParameterBuilder_.isEmpty()) {
              typeParameterBuilder_.dispose();
              typeParameterBuilder_ = null;
              typeParameter_ = other.typeParameter_;
              bitField0_ = (bitField0_ & ~0x00000020);
              typeParameterBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getTypeParameterFieldBuilder() : null;
            } else {
              typeParameterBuilder_.addAllMessages(other.typeParameter_);
            }
          }
        }
        if (other.hasReceiverType()) {
          mergeReceiverType(other.getReceiverType());
        }
        if (other.hasReceiverTypeId()) {
          setReceiverTypeId(other.getReceiverTypeId());
        }
        if (contextReceiverTypeBuilder_ == null) {
          if (!other.contextReceiverType_.isEmpty()) {
            if (contextReceiverType_.isEmpty()) {
              contextReceiverType_ = other.contextReceiverType_;
              bitField0_ = (bitField0_ & ~0x00000100);
            } else {
              ensureContextReceiverTypeIsMutable();
              contextReceiverType_.addAll(other.contextReceiverType_);
            }
            onChanged();
          }
        } else {
          if (!other.contextReceiverType_.isEmpty()) {
            if (contextReceiverTypeBuilder_.isEmpty()) {
              contextReceiverTypeBuilder_.dispose();
              contextReceiverTypeBuilder_ = null;
              contextReceiverType_ = other.contextReceiverType_;
              bitField0_ = (bitField0_ & ~0x00000100);
              contextReceiverTypeBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getContextReceiverTypeFieldBuilder() : null;
            } else {
              contextReceiverTypeBuilder_.addAllMessages(other.contextReceiverType_);
            }
          }
        }
        if (!other.contextReceiverTypeId_.isEmpty()) {
          if (contextReceiverTypeId_.isEmpty()) {
            contextReceiverTypeId_ = other.contextReceiverTypeId_;
            contextReceiverTypeId_.makeImmutable();
            bitField0_ |= 0x00000200;
          } else {
            ensureContextReceiverTypeIdIsMutable();
            contextReceiverTypeId_.addAll(other.contextReceiverTypeId_);
          }
          onChanged();
        }
        if (contextParameterBuilder_ == null) {
          if (!other.contextParameter_.isEmpty()) {
            if (contextParameter_.isEmpty()) {
              contextParameter_ = other.contextParameter_;
              bitField0_ = (bitField0_ & ~0x00000400);
            } else {
              ensureContextParameterIsMutable();
              contextParameter_.addAll(other.contextParameter_);
            }
            onChanged();
          }
        } else {
          if (!other.contextParameter_.isEmpty()) {
            if (contextParameterBuilder_.isEmpty()) {
              contextParameterBuilder_.dispose();
              contextParameterBuilder_ = null;
              contextParameter_ = other.contextParameter_;
              bitField0_ = (bitField0_ & ~0x00000400);
              contextParameterBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getContextParameterFieldBuilder() : null;
            } else {
              contextParameterBuilder_.addAllMessages(other.contextParameter_);
            }
          }
        }
        if (other.hasSetterValueParameter()) {
          mergeSetterValueParameter(other.getSetterValueParameter());
        }
        if (other.hasGetterFlags()) {
          setGetterFlags(other.getGetterFlags());
        }
        if (other.hasSetterFlags()) {
          setSetterFlags(other.getSetterFlags());
        }
        if (!other.versionRequirement_.isEmpty()) {
          if (versionRequirement_.isEmpty()) {
            versionRequirement_ = other.versionRequirement_;
            versionRequirement_.makeImmutable();
            bitField0_ |= 0x00004000;
          } else {
            ensureVersionRequirementIsMutable();
            versionRequirement_.addAll(other.versionRequirement_);
          }
          onChanged();
        }
        if (compilerPluginDataBuilder_ == null) {
          if (!other.compilerPluginData_.isEmpty()) {
            if (compilerPluginData_.isEmpty()) {
              compilerPluginData_ = other.compilerPluginData_;
              bitField0_ = (bitField0_ & ~0x00008000);
            } else {
              ensureCompilerPluginDataIsMutable();
              compilerPluginData_.addAll(other.compilerPluginData_);
            }
            onChanged();
          }
        } else {
          if (!other.compilerPluginData_.isEmpty()) {
            if (compilerPluginDataBuilder_.isEmpty()) {
              compilerPluginDataBuilder_.dispose();
              compilerPluginDataBuilder_ = null;
              compilerPluginData_ = other.compilerPluginData_;
              bitField0_ = (bitField0_ & ~0x00008000);
              compilerPluginDataBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCompilerPluginDataFieldBuilder() : null;
            } else {
              compilerPluginDataBuilder_.addAllMessages(other.compilerPluginData_);
            }
          }
        }
        if (annotationBuilder_ == null) {
          if (!other.annotation_.isEmpty()) {
            if (annotation_.isEmpty()) {
              annotation_ = other.annotation_;
              bitField0_ = (bitField0_ & ~0x00010000);
            } else {
              ensureAnnotationIsMutable();
              annotation_.addAll(other.annotation_);
            }
            onChanged();
          }
        } else {
          if (!other.annotation_.isEmpty()) {
            if (annotationBuilder_.isEmpty()) {
              annotationBuilder_.dispose();
              annotationBuilder_ = null;
              annotation_ = other.annotation_;
              bitField0_ = (bitField0_ & ~0x00010000);
              annotationBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getAnnotationFieldBuilder() : null;
            } else {
              annotationBuilder_.addAllMessages(other.annotation_);
            }
          }
        }
        if (getterAnnotationBuilder_ == null) {
          if (!other.getterAnnotation_.isEmpty()) {
            if (getterAnnotation_.isEmpty()) {
              getterAnnotation_ = other.getterAnnotation_;
              bitField0_ = (bitField0_ & ~0x00020000);
            } else {
              ensureGetterAnnotationIsMutable();
              getterAnnotation_.addAll(other.getterAnnotation_);
            }
            onChanged();
          }
        } else {
          if (!other.getterAnnotation_.isEmpty()) {
            if (getterAnnotationBuilder_.isEmpty()) {
              getterAnnotationBuilder_.dispose();
              getterAnnotationBuilder_ = null;
              getterAnnotation_ = other.getterAnnotation_;
              bitField0_ = (bitField0_ & ~0x00020000);
              getterAnnotationBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getGetterAnnotationFieldBuilder() : null;
            } else {
              getterAnnotationBuilder_.addAllMessages(other.getterAnnotation_);
            }
          }
        }
        if (setterAnnotationBuilder_ == null) {
          if (!other.setterAnnotation_.isEmpty()) {
            if (setterAnnotation_.isEmpty()) {
              setterAnnotation_ = other.setterAnnotation_;
              bitField0_ = (bitField0_ & ~0x00040000);
            } else {
              ensureSetterAnnotationIsMutable();
              setterAnnotation_.addAll(other.setterAnnotation_);
            }
            onChanged();
          }
        } else {
          if (!other.setterAnnotation_.isEmpty()) {
            if (setterAnnotationBuilder_.isEmpty()) {
              setterAnnotationBuilder_.dispose();
              setterAnnotationBuilder_ = null;
              setterAnnotation_ = other.setterAnnotation_;
              bitField0_ = (bitField0_ & ~0x00040000);
              setterAnnotationBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getSetterAnnotationFieldBuilder() : null;
            } else {
              setterAnnotationBuilder_.addAllMessages(other.setterAnnotation_);
            }
          }
        }
        if (extensionReceiverAnnotationBuilder_ == null) {
          if (!other.extensionReceiverAnnotation_.isEmpty()) {
            if (extensionReceiverAnnotation_.isEmpty()) {
              extensionReceiverAnnotation_ = other.extensionReceiverAnnotation_;
              bitField0_ = (bitField0_ & ~0x00080000);
            } else {
              ensureExtensionReceiverAnnotationIsMutable();
              extensionReceiverAnnotation_.addAll(other.extensionReceiverAnnotation_);
            }
            onChanged();
          }
        } else {
          if (!other.extensionReceiverAnnotation_.isEmpty()) {
            if (extensionReceiverAnnotationBuilder_.isEmpty()) {
              extensionReceiverAnnotationBuilder_.dispose();
              extensionReceiverAnnotationBuilder_ = null;
              extensionReceiverAnnotation_ = other.extensionReceiverAnnotation_;
              bitField0_ = (bitField0_ & ~0x00080000);
              extensionReceiverAnnotationBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getExtensionReceiverAnnotationFieldBuilder() : null;
            } else {
              extensionReceiverAnnotationBuilder_.addAllMessages(other.extensionReceiverAnnotation_);
            }
          }
        }
        if (backingFieldAnnotationBuilder_ == null) {
          if (!other.backingFieldAnnotation_.isEmpty()) {
            if (backingFieldAnnotation_.isEmpty()) {
              backingFieldAnnotation_ = other.backingFieldAnnotation_;
              bitField0_ = (bitField0_ & ~0x00100000);
            } else {
              ensureBackingFieldAnnotationIsMutable();
              backingFieldAnnotation_.addAll(other.backingFieldAnnotation_);
            }
            onChanged();
          }
        } else {
          if (!other.backingFieldAnnotation_.isEmpty()) {
            if (backingFieldAnnotationBuilder_.isEmpty()) {
              backingFieldAnnotationBuilder_.dispose();
              backingFieldAnnotationBuilder_ = null;
              backingFieldAnnotation_ = other.backingFieldAnnotation_;
              bitField0_ = (bitField0_ & ~0x00100000);
              backingFieldAnnotationBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getBackingFieldAnnotationFieldBuilder() : null;
            } else {
              backingFieldAnnotationBuilder_.addAllMessages(other.backingFieldAnnotation_);
            }
          }
        }
        if (delegateFieldAnnotationBuilder_ == null) {
          if (!other.delegateFieldAnnotation_.isEmpty()) {
            if (delegateFieldAnnotation_.isEmpty()) {
              delegateFieldAnnotation_ = other.delegateFieldAnnotation_;
              bitField0_ = (bitField0_ & ~0x00200000);
            } else {
              ensureDelegateFieldAnnotationIsMutable();
              delegateFieldAnnotation_.addAll(other.delegateFieldAnnotation_);
            }
            onChanged();
          }
        } else {
          if (!other.delegateFieldAnnotation_.isEmpty()) {
            if (delegateFieldAnnotationBuilder_.isEmpty()) {
              delegateFieldAnnotationBuilder_.dispose();
              delegateFieldAnnotationBuilder_ = null;
              delegateFieldAnnotation_ = other.delegateFieldAnnotation_;
              bitField0_ = (bitField0_ & ~0x00200000);
              delegateFieldAnnotationBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getDelegateFieldAnnotationFieldBuilder() : null;
            } else {
              delegateFieldAnnotationBuilder_.addAllMessages(other.delegateFieldAnnotation_);
            }
          }
        }
        this.mergeExtensionFields(other);
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasName()) {
          return false;
        }
        if (hasReturnType()) {
          if (!getReturnType().isInitialized()) {
            return false;
          }
        }
        for (int i = 0; i < getTypeParameterCount(); i++) {
          if (!getTypeParameter(i).isInitialized()) {
            return false;
          }
        }
        if (hasReceiverType()) {
          if (!getReceiverType().isInitialized()) {
            return false;
          }
        }
        for (int i = 0; i < getContextReceiverTypeCount(); i++) {
          if (!getContextReceiverType(i).isInitialized()) {
            return false;
          }
        }
        for (int i = 0; i < getContextParameterCount(); i++) {
          if (!getContextParameter(i).isInitialized()) {
            return false;
          }
        }
        if (hasSetterValueParameter()) {
          if (!getSetterValueParameter().isInitialized()) {
            return false;
          }
        }
        for (int i = 0; i < getCompilerPluginDataCount(); i++) {
          if (!getCompilerPluginData(i).isInitialized()) {
            return false;
          }
        }
        for (int i = 0; i < getAnnotationCount(); i++) {
          if (!getAnnotation(i).isInitialized()) {
            return false;
          }
        }
        for (int i = 0; i < getGetterAnnotationCount(); i++) {
          if (!getGetterAnnotation(i).isInitialized()) {
            return false;
          }
        }
        for (int i = 0; i < getSetterAnnotationCount(); i++) {
          if (!getSetterAnnotation(i).isInitialized()) {
            return false;
          }
        }
        for (int i = 0; i < getExtensionReceiverAnnotationCount(); i++) {
          if (!getExtensionReceiverAnnotation(i).isInitialized()) {
            return false;
          }
        }
        for (int i = 0; i < getBackingFieldAnnotationCount(); i++) {
          if (!getBackingFieldAnnotation(i).isInitialized()) {
            return false;
          }
        }
        for (int i = 0; i < getDelegateFieldAnnotationCount(); i++) {
          if (!getDelegateFieldAnnotation(i).isInitialized()) {
            return false;
          }
        }
        if (!extensionsAreInitialized()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                oldFlags_ = input.readInt32();
                bitField0_ |= 0x00000002;
                break;
              } // case 8
              case 16: {
                name_ = input.readInt32();
                bitField0_ |= 0x00000004;
                break;
              } // case 16
              case 26: {
                input.readMessage(
                    getReturnTypeFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000008;
                break;
              } // case 26
              case 34: {
                org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter m =
                    input.readMessage(
                        org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.parser(),
                        extensionRegistry);
                if (typeParameterBuilder_ == null) {
                  ensureTypeParameterIsMutable();
                  typeParameter_.add(m);
                } else {
                  typeParameterBuilder_.addMessage(m);
                }
                break;
              } // case 34
              case 42: {
                input.readMessage(
                    getReceiverTypeFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000040;
                break;
              } // case 42
              case 50: {
                input.readMessage(
                    getSetterValueParameterFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000800;
                break;
              } // case 50
              case 56: {
                getterFlags_ = input.readInt32();
                bitField0_ |= 0x00001000;
                break;
              } // case 56
              case 64: {
                setterFlags_ = input.readInt32();
                bitField0_ |= 0x00002000;
                break;
              } // case 64
              case 72: {
                returnTypeId_ = input.readInt32();
                bitField0_ |= 0x00000010;
                break;
              } // case 72
              case 80: {
                receiverTypeId_ = input.readInt32();
                bitField0_ |= 0x00000080;
                break;
              } // case 80
              case 88: {
                flags_ = input.readInt32();
                bitField0_ |= 0x00000001;
                break;
              } // case 88
              case 98: {
                org.jetbrains.kotlin.metadata.ProtoBuf.Type m =
                    input.readMessage(
                        org.jetbrains.kotlin.metadata.ProtoBuf.Type.parser(),
                        extensionRegistry);
                if (contextReceiverTypeBuilder_ == null) {
                  ensureContextReceiverTypeIsMutable();
                  contextReceiverType_.add(m);
                } else {
                  contextReceiverTypeBuilder_.addMessage(m);
                }
                break;
              } // case 98
              case 104: {
                int v = input.readInt32();
                ensureContextReceiverTypeIdIsMutable();
                contextReceiverTypeId_.addInt(v);
                break;
              } // case 104
              case 106: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureContextReceiverTypeIdIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  contextReceiverTypeId_.addInt(input.readInt32());
                }
                input.popLimit(limit);
                break;
              } // case 106
              case 114: {
                org.jetbrains.kotlin.metadata.ProtoBuf.Annotation m =
                    input.readMessage(
                        org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.parser(),
                        extensionRegistry);
                if (annotationBuilder_ == null) {
                  ensureAnnotationIsMutable();
                  annotation_.add(m);
                } else {
                  annotationBuilder_.addMessage(m);
                }
                break;
              } // case 114
              case 122: {
                org.jetbrains.kotlin.metadata.ProtoBuf.Annotation m =
                    input.readMessage(
                        org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.parser(),
                        extensionRegistry);
                if (getterAnnotationBuilder_ == null) {
                  ensureGetterAnnotationIsMutable();
                  getterAnnotation_.add(m);
                } else {
                  getterAnnotationBuilder_.addMessage(m);
                }
                break;
              } // case 122
              case 130: {
                org.jetbrains.kotlin.metadata.ProtoBuf.Annotation m =
                    input.readMessage(
                        org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.parser(),
                        extensionRegistry);
                if (setterAnnotationBuilder_ == null) {
                  ensureSetterAnnotationIsMutable();
                  setterAnnotation_.add(m);
                } else {
                  setterAnnotationBuilder_.addMessage(m);
                }
                break;
              } // case 130
              case 138: {
                org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter m =
                    input.readMessage(
                        org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.parser(),
                        extensionRegistry);
                if (contextParameterBuilder_ == null) {
                  ensureContextParameterIsMutable();
                  contextParameter_.add(m);
                } else {
                  contextParameterBuilder_.addMessage(m);
                }
                break;
              } // case 138
              case 248: {
                int v = input.readInt32();
                ensureVersionRequirementIsMutable();
                versionRequirement_.addInt(v);
                break;
              } // case 248
              case 250: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureVersionRequirementIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  versionRequirement_.addInt(input.readInt32());
                }
                input.popLimit(limit);
                break;
              } // case 250
              case 258: {
                org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData m =
                    input.readMessage(
                        org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.parser(),
                        extensionRegistry);
                if (compilerPluginDataBuilder_ == null) {
                  ensureCompilerPluginDataIsMutable();
                  compilerPluginData_.add(m);
                } else {
                  compilerPluginDataBuilder_.addMessage(m);
                }
                break;
              } // case 258
              case 266: {
                org.jetbrains.kotlin.metadata.ProtoBuf.Annotation m =
                    input.readMessage(
                        org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.parser(),
                        extensionRegistry);
                if (extensionReceiverAnnotationBuilder_ == null) {
                  ensureExtensionReceiverAnnotationIsMutable();
                  extensionReceiverAnnotation_.add(m);
                } else {
                  extensionReceiverAnnotationBuilder_.addMessage(m);
                }
                break;
              } // case 266
              case 274: {
                org.jetbrains.kotlin.metadata.ProtoBuf.Annotation m =
                    input.readMessage(
                        org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.parser(),
                        extensionRegistry);
                if (backingFieldAnnotationBuilder_ == null) {
                  ensureBackingFieldAnnotationIsMutable();
                  backingFieldAnnotation_.add(m);
                } else {
                  backingFieldAnnotationBuilder_.addMessage(m);
                }
                break;
              } // case 274
              case 282: {
                org.jetbrains.kotlin.metadata.ProtoBuf.Annotation m =
                    input.readMessage(
                        org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.parser(),
                        extensionRegistry);
                if (delegateFieldAnnotationBuilder_ == null) {
                  ensureDelegateFieldAnnotationIsMutable();
                  delegateFieldAnnotation_.add(m);
                } else {
                  delegateFieldAnnotationBuilder_.addMessage(m);
                }
                break;
              } // case 282
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int flags_ = 518;
      /**
       * <pre>
       *
       * hasAnnotations
       * Visibility
       * Modality
       * MemberKind
       * isVar
       * hasGetter
       * hasSetter
       * isConst
       * isLateinit
       * hasConstant
       * isExternal
       * isDelegated
       * isExpect
       * </pre>
       *
       * <code>int32 flags = 11 [default = 518];</code>
       * @return Whether the flags field is set.
       */
      @java.lang.Override
      public boolean hasFlags() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       *
       * hasAnnotations
       * Visibility
       * Modality
       * MemberKind
       * isVar
       * hasGetter
       * hasSetter
       * isConst
       * isLateinit
       * hasConstant
       * isExternal
       * isDelegated
       * isExpect
       * </pre>
       *
       * <code>int32 flags = 11 [default = 518];</code>
       * @return The flags.
       */
      @java.lang.Override
      public int getFlags() {
        return flags_;
      }
      /**
       * <pre>
       *
       * hasAnnotations
       * Visibility
       * Modality
       * MemberKind
       * isVar
       * hasGetter
       * hasSetter
       * isConst
       * isLateinit
       * hasConstant
       * isExternal
       * isDelegated
       * isExpect
       * </pre>
       *
       * <code>int32 flags = 11 [default = 518];</code>
       * @param value The flags to set.
       * @return This builder for chaining.
       */
      public Builder setFlags(int value) {

        flags_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *
       * hasAnnotations
       * Visibility
       * Modality
       * MemberKind
       * isVar
       * hasGetter
       * hasSetter
       * isConst
       * isLateinit
       * hasConstant
       * isExternal
       * isDelegated
       * isExpect
       * </pre>
       *
       * <code>int32 flags = 11 [default = 518];</code>
       * @return This builder for chaining.
       */
      public Builder clearFlags() {
        bitField0_ = (bitField0_ & ~0x00000001);
        flags_ = 518;
        onChanged();
        return this;
      }

      private int oldFlags_ = 2054;
      /**
       * <code>int32 old_flags = 1 [default = 2054];</code>
       * @return Whether the oldFlags field is set.
       */
      @java.lang.Override
      public boolean hasOldFlags() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>int32 old_flags = 1 [default = 2054];</code>
       * @return The oldFlags.
       */
      @java.lang.Override
      public int getOldFlags() {
        return oldFlags_;
      }
      /**
       * <code>int32 old_flags = 1 [default = 2054];</code>
       * @param value The oldFlags to set.
       * @return This builder for chaining.
       */
      public Builder setOldFlags(int value) {

        oldFlags_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>int32 old_flags = 1 [default = 2054];</code>
       * @return This builder for chaining.
       */
      public Builder clearOldFlags() {
        bitField0_ = (bitField0_ & ~0x00000002);
        oldFlags_ = 2054;
        onChanged();
        return this;
      }

      private int name_ ;
      /**
       * <code>int32 name = 2 [features = { ... }</code>
       * @return Whether the name field is set.
       */
      @java.lang.Override
      public boolean hasName() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>int32 name = 2 [features = { ... }</code>
       * @return The name.
       */
      @java.lang.Override
      public int getName() {
        return name_;
      }
      /**
       * <code>int32 name = 2 [features = { ... }</code>
       * @param value The name to set.
       * @return This builder for chaining.
       */
      public Builder setName(int value) {

        name_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>int32 name = 2 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000004);
        name_ = 0;
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.metadata.ProtoBuf.Type returnType_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Type, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder> returnTypeBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
       * @return Whether the returnType field is set.
       */
      public boolean hasReturnType() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
       * @return The returnType.
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type getReturnType() {
        if (returnTypeBuilder_ == null) {
          return returnType_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance() : returnType_;
        } else {
          return returnTypeBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
       */
      public Builder setReturnType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        if (returnTypeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          returnType_ = value;
        } else {
          returnTypeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
       */
      public Builder setReturnType(
          org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder builderForValue) {
        if (returnTypeBuilder_ == null) {
          returnType_ = builderForValue.build();
        } else {
          returnTypeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
       */
      public Builder mergeReturnType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        if (returnTypeBuilder_ == null) {
          if (((bitField0_ & 0x00000008) != 0) &&
            returnType_ != null &&
            returnType_ != org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance()) {
            getReturnTypeBuilder().mergeFrom(value);
          } else {
            returnType_ = value;
          }
        } else {
          returnTypeBuilder_.mergeFrom(value);
        }
        if (returnType_ != null) {
          bitField0_ |= 0x00000008;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
       */
      public Builder clearReturnType() {
        bitField0_ = (bitField0_ & ~0x00000008);
        returnType_ = null;
        if (returnTypeBuilder_ != null) {
          returnTypeBuilder_.dispose();
          returnTypeBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder getReturnTypeBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getReturnTypeFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder getReturnTypeOrBuilder() {
        if (returnTypeBuilder_ != null) {
          return returnTypeBuilder_.getMessageOrBuilder();
        } else {
          return returnType_ == null ?
              org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance() : returnType_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Type, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder> 
          getReturnTypeFieldBuilder() {
        if (returnTypeBuilder_ == null) {
          returnTypeBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.metadata.ProtoBuf.Type, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder>(
                  getReturnType(),
                  getParentForChildren(),
                  isClean());
          returnType_ = null;
        }
        return returnTypeBuilder_;
      }

      private int returnTypeId_ ;
      /**
       * <code>int32 return_type_id = 9 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return Whether the returnTypeId field is set.
       */
      @java.lang.Override
      public boolean hasReturnTypeId() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <code>int32 return_type_id = 9 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return The returnTypeId.
       */
      @java.lang.Override
      public int getReturnTypeId() {
        return returnTypeId_;
      }
      /**
       * <code>int32 return_type_id = 9 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @param value The returnTypeId to set.
       * @return This builder for chaining.
       */
      public Builder setReturnTypeId(int value) {

        returnTypeId_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <code>int32 return_type_id = 9 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearReturnTypeId() {
        bitField0_ = (bitField0_ & ~0x00000010);
        returnTypeId_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter> typeParameter_ =
        java.util.Collections.emptyList();
      private void ensureTypeParameterIsMutable() {
        if (!((bitField0_ & 0x00000020) != 0)) {
          typeParameter_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter>(typeParameter_);
          bitField0_ |= 0x00000020;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter, org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameterOrBuilder> typeParameterBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter> getTypeParameterList() {
        if (typeParameterBuilder_ == null) {
          return java.util.Collections.unmodifiableList(typeParameter_);
        } else {
          return typeParameterBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public int getTypeParameterCount() {
        if (typeParameterBuilder_ == null) {
          return typeParameter_.size();
        } else {
          return typeParameterBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter getTypeParameter(int index) {
        if (typeParameterBuilder_ == null) {
          return typeParameter_.get(index);
        } else {
          return typeParameterBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public Builder setTypeParameter(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter value) {
        if (typeParameterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTypeParameterIsMutable();
          typeParameter_.set(index, value);
          onChanged();
        } else {
          typeParameterBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public Builder setTypeParameter(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.Builder builderForValue) {
        if (typeParameterBuilder_ == null) {
          ensureTypeParameterIsMutable();
          typeParameter_.set(index, builderForValue.build());
          onChanged();
        } else {
          typeParameterBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public Builder addTypeParameter(org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter value) {
        if (typeParameterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTypeParameterIsMutable();
          typeParameter_.add(value);
          onChanged();
        } else {
          typeParameterBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public Builder addTypeParameter(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter value) {
        if (typeParameterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTypeParameterIsMutable();
          typeParameter_.add(index, value);
          onChanged();
        } else {
          typeParameterBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public Builder addTypeParameter(
          org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.Builder builderForValue) {
        if (typeParameterBuilder_ == null) {
          ensureTypeParameterIsMutable();
          typeParameter_.add(builderForValue.build());
          onChanged();
        } else {
          typeParameterBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public Builder addTypeParameter(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.Builder builderForValue) {
        if (typeParameterBuilder_ == null) {
          ensureTypeParameterIsMutable();
          typeParameter_.add(index, builderForValue.build());
          onChanged();
        } else {
          typeParameterBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public Builder addAllTypeParameter(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter> values) {
        if (typeParameterBuilder_ == null) {
          ensureTypeParameterIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, typeParameter_);
          onChanged();
        } else {
          typeParameterBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public Builder clearTypeParameter() {
        if (typeParameterBuilder_ == null) {
          typeParameter_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
          onChanged();
        } else {
          typeParameterBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public Builder removeTypeParameter(int index) {
        if (typeParameterBuilder_ == null) {
          ensureTypeParameterIsMutable();
          typeParameter_.remove(index);
          onChanged();
        } else {
          typeParameterBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.Builder getTypeParameterBuilder(
          int index) {
        return getTypeParameterFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameterOrBuilder getTypeParameterOrBuilder(
          int index) {
        if (typeParameterBuilder_ == null) {
          return typeParameter_.get(index);  } else {
          return typeParameterBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameterOrBuilder> 
           getTypeParameterOrBuilderList() {
        if (typeParameterBuilder_ != null) {
          return typeParameterBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(typeParameter_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.Builder addTypeParameterBuilder() {
        return getTypeParameterFieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.Builder addTypeParameterBuilder(
          int index) {
        return getTypeParameterFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.Builder> 
           getTypeParameterBuilderList() {
        return getTypeParameterFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter, org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameterOrBuilder> 
          getTypeParameterFieldBuilder() {
        if (typeParameterBuilder_ == null) {
          typeParameterBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter, org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameterOrBuilder>(
                  typeParameter_,
                  ((bitField0_ & 0x00000020) != 0),
                  getParentForChildren(),
                  isClean());
          typeParameter_ = null;
        }
        return typeParameterBuilder_;
      }

      private org.jetbrains.kotlin.metadata.ProtoBuf.Type receiverType_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Type, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder> receiverTypeBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
       * @return Whether the receiverType field is set.
       */
      public boolean hasReceiverType() {
        return ((bitField0_ & 0x00000040) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
       * @return The receiverType.
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type getReceiverType() {
        if (receiverTypeBuilder_ == null) {
          return receiverType_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance() : receiverType_;
        } else {
          return receiverTypeBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
       */
      public Builder setReceiverType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        if (receiverTypeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          receiverType_ = value;
        } else {
          receiverTypeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
       */
      public Builder setReceiverType(
          org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder builderForValue) {
        if (receiverTypeBuilder_ == null) {
          receiverType_ = builderForValue.build();
        } else {
          receiverTypeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
       */
      public Builder mergeReceiverType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        if (receiverTypeBuilder_ == null) {
          if (((bitField0_ & 0x00000040) != 0) &&
            receiverType_ != null &&
            receiverType_ != org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance()) {
            getReceiverTypeBuilder().mergeFrom(value);
          } else {
            receiverType_ = value;
          }
        } else {
          receiverTypeBuilder_.mergeFrom(value);
        }
        if (receiverType_ != null) {
          bitField0_ |= 0x00000040;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
       */
      public Builder clearReceiverType() {
        bitField0_ = (bitField0_ & ~0x00000040);
        receiverType_ = null;
        if (receiverTypeBuilder_ != null) {
          receiverTypeBuilder_.dispose();
          receiverTypeBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder getReceiverTypeBuilder() {
        bitField0_ |= 0x00000040;
        onChanged();
        return getReceiverTypeFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder getReceiverTypeOrBuilder() {
        if (receiverTypeBuilder_ != null) {
          return receiverTypeBuilder_.getMessageOrBuilder();
        } else {
          return receiverType_ == null ?
              org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance() : receiverType_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Type, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder> 
          getReceiverTypeFieldBuilder() {
        if (receiverTypeBuilder_ == null) {
          receiverTypeBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.metadata.ProtoBuf.Type, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder>(
                  getReceiverType(),
                  getParentForChildren(),
                  isClean());
          receiverType_ = null;
        }
        return receiverTypeBuilder_;
      }

      private int receiverTypeId_ ;
      /**
       * <code>int32 receiver_type_id = 10 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return Whether the receiverTypeId field is set.
       */
      @java.lang.Override
      public boolean hasReceiverTypeId() {
        return ((bitField0_ & 0x00000080) != 0);
      }
      /**
       * <code>int32 receiver_type_id = 10 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return The receiverTypeId.
       */
      @java.lang.Override
      public int getReceiverTypeId() {
        return receiverTypeId_;
      }
      /**
       * <code>int32 receiver_type_id = 10 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @param value The receiverTypeId to set.
       * @return This builder for chaining.
       */
      public Builder setReceiverTypeId(int value) {

        receiverTypeId_ = value;
        bitField0_ |= 0x00000080;
        onChanged();
        return this;
      }
      /**
       * <code>int32 receiver_type_id = 10 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearReceiverTypeId() {
        bitField0_ = (bitField0_ & ~0x00000080);
        receiverTypeId_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Type> contextReceiverType_ =
        java.util.Collections.emptyList();
      private void ensureContextReceiverTypeIsMutable() {
        if (!((bitField0_ & 0x00000100) != 0)) {
          contextReceiverType_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.ProtoBuf.Type>(contextReceiverType_);
          bitField0_ |= 0x00000100;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Type, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder> contextReceiverTypeBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 12;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Type> getContextReceiverTypeList() {
        if (contextReceiverTypeBuilder_ == null) {
          return java.util.Collections.unmodifiableList(contextReceiverType_);
        } else {
          return contextReceiverTypeBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 12;</code>
       */
      public int getContextReceiverTypeCount() {
        if (contextReceiverTypeBuilder_ == null) {
          return contextReceiverType_.size();
        } else {
          return contextReceiverTypeBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 12;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type getContextReceiverType(int index) {
        if (contextReceiverTypeBuilder_ == null) {
          return contextReceiverType_.get(index);
        } else {
          return contextReceiverTypeBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 12;</code>
       */
      public Builder setContextReceiverType(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        if (contextReceiverTypeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureContextReceiverTypeIsMutable();
          contextReceiverType_.set(index, value);
          onChanged();
        } else {
          contextReceiverTypeBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 12;</code>
       */
      public Builder setContextReceiverType(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder builderForValue) {
        if (contextReceiverTypeBuilder_ == null) {
          ensureContextReceiverTypeIsMutable();
          contextReceiverType_.set(index, builderForValue.build());
          onChanged();
        } else {
          contextReceiverTypeBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 12;</code>
       */
      public Builder addContextReceiverType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        if (contextReceiverTypeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureContextReceiverTypeIsMutable();
          contextReceiverType_.add(value);
          onChanged();
        } else {
          contextReceiverTypeBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 12;</code>
       */
      public Builder addContextReceiverType(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        if (contextReceiverTypeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureContextReceiverTypeIsMutable();
          contextReceiverType_.add(index, value);
          onChanged();
        } else {
          contextReceiverTypeBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 12;</code>
       */
      public Builder addContextReceiverType(
          org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder builderForValue) {
        if (contextReceiverTypeBuilder_ == null) {
          ensureContextReceiverTypeIsMutable();
          contextReceiverType_.add(builderForValue.build());
          onChanged();
        } else {
          contextReceiverTypeBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 12;</code>
       */
      public Builder addContextReceiverType(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder builderForValue) {
        if (contextReceiverTypeBuilder_ == null) {
          ensureContextReceiverTypeIsMutable();
          contextReceiverType_.add(index, builderForValue.build());
          onChanged();
        } else {
          contextReceiverTypeBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 12;</code>
       */
      public Builder addAllContextReceiverType(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Type> values) {
        if (contextReceiverTypeBuilder_ == null) {
          ensureContextReceiverTypeIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, contextReceiverType_);
          onChanged();
        } else {
          contextReceiverTypeBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 12;</code>
       */
      public Builder clearContextReceiverType() {
        if (contextReceiverTypeBuilder_ == null) {
          contextReceiverType_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000100);
          onChanged();
        } else {
          contextReceiverTypeBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 12;</code>
       */
      public Builder removeContextReceiverType(int index) {
        if (contextReceiverTypeBuilder_ == null) {
          ensureContextReceiverTypeIsMutable();
          contextReceiverType_.remove(index);
          onChanged();
        } else {
          contextReceiverTypeBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 12;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder getContextReceiverTypeBuilder(
          int index) {
        return getContextReceiverTypeFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 12;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder getContextReceiverTypeOrBuilder(
          int index) {
        if (contextReceiverTypeBuilder_ == null) {
          return contextReceiverType_.get(index);  } else {
          return contextReceiverTypeBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 12;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder> 
           getContextReceiverTypeOrBuilderList() {
        if (contextReceiverTypeBuilder_ != null) {
          return contextReceiverTypeBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(contextReceiverType_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 12;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder addContextReceiverTypeBuilder() {
        return getContextReceiverTypeFieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 12;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder addContextReceiverTypeBuilder(
          int index) {
        return getContextReceiverTypeFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 12;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder> 
           getContextReceiverTypeBuilderList() {
        return getContextReceiverTypeFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Type, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder> 
          getContextReceiverTypeFieldBuilder() {
        if (contextReceiverTypeBuilder_ == null) {
          contextReceiverTypeBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.ProtoBuf.Type, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder>(
                  contextReceiverType_,
                  ((bitField0_ & 0x00000100) != 0),
                  getParentForChildren(),
                  isClean());
          contextReceiverType_ = null;
        }
        return contextReceiverTypeBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.Internal.IntList contextReceiverTypeId_ = emptyIntList();
      private void ensureContextReceiverTypeIdIsMutable() {
        if (!contextReceiverTypeId_.isModifiable()) {
          contextReceiverTypeId_ = makeMutableCopy(contextReceiverTypeId_);
        }
        bitField0_ |= 0x00000200;
      }
      /**
       * <code>repeated int32 context_receiver_type_id = 13 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return A list containing the contextReceiverTypeId.
       */
      public java.util.List<java.lang.Integer>
          getContextReceiverTypeIdList() {
        contextReceiverTypeId_.makeImmutable();
        return contextReceiverTypeId_;
      }
      /**
       * <code>repeated int32 context_receiver_type_id = 13 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return The count of contextReceiverTypeId.
       */
      public int getContextReceiverTypeIdCount() {
        return contextReceiverTypeId_.size();
      }
      /**
       * <code>repeated int32 context_receiver_type_id = 13 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @param index The index of the element to return.
       * @return The contextReceiverTypeId at the given index.
       */
      public int getContextReceiverTypeId(int index) {
        return contextReceiverTypeId_.getInt(index);
      }
      /**
       * <code>repeated int32 context_receiver_type_id = 13 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @param index The index to set the value at.
       * @param value The contextReceiverTypeId to set.
       * @return This builder for chaining.
       */
      public Builder setContextReceiverTypeId(
          int index, int value) {

        ensureContextReceiverTypeIdIsMutable();
        contextReceiverTypeId_.setInt(index, value);
        bitField0_ |= 0x00000200;
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 context_receiver_type_id = 13 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @param value The contextReceiverTypeId to add.
       * @return This builder for chaining.
       */
      public Builder addContextReceiverTypeId(int value) {

        ensureContextReceiverTypeIdIsMutable();
        contextReceiverTypeId_.addInt(value);
        bitField0_ |= 0x00000200;
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 context_receiver_type_id = 13 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @param values The contextReceiverTypeId to add.
       * @return This builder for chaining.
       */
      public Builder addAllContextReceiverTypeId(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureContextReceiverTypeIdIsMutable();
        org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
            values, contextReceiverTypeId_);
        bitField0_ |= 0x00000200;
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 context_receiver_type_id = 13 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearContextReceiverTypeId() {
        contextReceiverTypeId_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000200);
        onChanged();
        return this;
      }

      private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter> contextParameter_ =
        java.util.Collections.emptyList();
      private void ensureContextParameterIsMutable() {
        if (!((bitField0_ & 0x00000400) != 0)) {
          contextParameter_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter>(contextParameter_);
          bitField0_ |= 0x00000400;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter, org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameterOrBuilder> contextParameterBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 17;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter> getContextParameterList() {
        if (contextParameterBuilder_ == null) {
          return java.util.Collections.unmodifiableList(contextParameter_);
        } else {
          return contextParameterBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 17;</code>
       */
      public int getContextParameterCount() {
        if (contextParameterBuilder_ == null) {
          return contextParameter_.size();
        } else {
          return contextParameterBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 17;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter getContextParameter(int index) {
        if (contextParameterBuilder_ == null) {
          return contextParameter_.get(index);
        } else {
          return contextParameterBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 17;</code>
       */
      public Builder setContextParameter(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter value) {
        if (contextParameterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureContextParameterIsMutable();
          contextParameter_.set(index, value);
          onChanged();
        } else {
          contextParameterBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 17;</code>
       */
      public Builder setContextParameter(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.Builder builderForValue) {
        if (contextParameterBuilder_ == null) {
          ensureContextParameterIsMutable();
          contextParameter_.set(index, builderForValue.build());
          onChanged();
        } else {
          contextParameterBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 17;</code>
       */
      public Builder addContextParameter(org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter value) {
        if (contextParameterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureContextParameterIsMutable();
          contextParameter_.add(value);
          onChanged();
        } else {
          contextParameterBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 17;</code>
       */
      public Builder addContextParameter(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter value) {
        if (contextParameterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureContextParameterIsMutable();
          contextParameter_.add(index, value);
          onChanged();
        } else {
          contextParameterBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 17;</code>
       */
      public Builder addContextParameter(
          org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.Builder builderForValue) {
        if (contextParameterBuilder_ == null) {
          ensureContextParameterIsMutable();
          contextParameter_.add(builderForValue.build());
          onChanged();
        } else {
          contextParameterBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 17;</code>
       */
      public Builder addContextParameter(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.Builder builderForValue) {
        if (contextParameterBuilder_ == null) {
          ensureContextParameterIsMutable();
          contextParameter_.add(index, builderForValue.build());
          onChanged();
        } else {
          contextParameterBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 17;</code>
       */
      public Builder addAllContextParameter(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter> values) {
        if (contextParameterBuilder_ == null) {
          ensureContextParameterIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, contextParameter_);
          onChanged();
        } else {
          contextParameterBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 17;</code>
       */
      public Builder clearContextParameter() {
        if (contextParameterBuilder_ == null) {
          contextParameter_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000400);
          onChanged();
        } else {
          contextParameterBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 17;</code>
       */
      public Builder removeContextParameter(int index) {
        if (contextParameterBuilder_ == null) {
          ensureContextParameterIsMutable();
          contextParameter_.remove(index);
          onChanged();
        } else {
          contextParameterBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 17;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.Builder getContextParameterBuilder(
          int index) {
        return getContextParameterFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 17;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameterOrBuilder getContextParameterOrBuilder(
          int index) {
        if (contextParameterBuilder_ == null) {
          return contextParameter_.get(index);  } else {
          return contextParameterBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 17;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameterOrBuilder> 
           getContextParameterOrBuilderList() {
        if (contextParameterBuilder_ != null) {
          return contextParameterBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(contextParameter_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 17;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.Builder addContextParameterBuilder() {
        return getContextParameterFieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 17;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.Builder addContextParameterBuilder(
          int index) {
        return getContextParameterFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 17;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.Builder> 
           getContextParameterBuilderList() {
        return getContextParameterFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter, org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameterOrBuilder> 
          getContextParameterFieldBuilder() {
        if (contextParameterBuilder_ == null) {
          contextParameterBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter, org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameterOrBuilder>(
                  contextParameter_,
                  ((bitField0_ & 0x00000400) != 0),
                  getParentForChildren(),
                  isClean());
          contextParameter_ = null;
        }
        return contextParameterBuilder_;
      }

      private org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter setterValueParameter_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter, org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameterOrBuilder> setterValueParameterBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.metadata.ValueParameter setter_value_parameter = 6;</code>
       * @return Whether the setterValueParameter field is set.
       */
      public boolean hasSetterValueParameter() {
        return ((bitField0_ & 0x00000800) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.ValueParameter setter_value_parameter = 6;</code>
       * @return The setterValueParameter.
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter getSetterValueParameter() {
        if (setterValueParameterBuilder_ == null) {
          return setterValueParameter_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.getDefaultInstance() : setterValueParameter_;
        } else {
          return setterValueParameterBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.ValueParameter setter_value_parameter = 6;</code>
       */
      public Builder setSetterValueParameter(org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter value) {
        if (setterValueParameterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          setterValueParameter_ = value;
        } else {
          setterValueParameterBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000800;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.ValueParameter setter_value_parameter = 6;</code>
       */
      public Builder setSetterValueParameter(
          org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.Builder builderForValue) {
        if (setterValueParameterBuilder_ == null) {
          setterValueParameter_ = builderForValue.build();
        } else {
          setterValueParameterBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000800;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.ValueParameter setter_value_parameter = 6;</code>
       */
      public Builder mergeSetterValueParameter(org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter value) {
        if (setterValueParameterBuilder_ == null) {
          if (((bitField0_ & 0x00000800) != 0) &&
            setterValueParameter_ != null &&
            setterValueParameter_ != org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.getDefaultInstance()) {
            getSetterValueParameterBuilder().mergeFrom(value);
          } else {
            setterValueParameter_ = value;
          }
        } else {
          setterValueParameterBuilder_.mergeFrom(value);
        }
        if (setterValueParameter_ != null) {
          bitField0_ |= 0x00000800;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.ValueParameter setter_value_parameter = 6;</code>
       */
      public Builder clearSetterValueParameter() {
        bitField0_ = (bitField0_ & ~0x00000800);
        setterValueParameter_ = null;
        if (setterValueParameterBuilder_ != null) {
          setterValueParameterBuilder_.dispose();
          setterValueParameterBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.ValueParameter setter_value_parameter = 6;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.Builder getSetterValueParameterBuilder() {
        bitField0_ |= 0x00000800;
        onChanged();
        return getSetterValueParameterFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.ValueParameter setter_value_parameter = 6;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameterOrBuilder getSetterValueParameterOrBuilder() {
        if (setterValueParameterBuilder_ != null) {
          return setterValueParameterBuilder_.getMessageOrBuilder();
        } else {
          return setterValueParameter_ == null ?
              org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.getDefaultInstance() : setterValueParameter_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.ValueParameter setter_value_parameter = 6;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter, org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameterOrBuilder> 
          getSetterValueParameterFieldBuilder() {
        if (setterValueParameterBuilder_ == null) {
          setterValueParameterBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter, org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameterOrBuilder>(
                  getSetterValueParameter(),
                  getParentForChildren(),
                  isClean());
          setterValueParameter_ = null;
        }
        return setterValueParameterBuilder_;
      }

      private int getterFlags_ ;
      /**
       * <pre>
       *
       * hasAnnotations
       * Visibility
       * Modality
       * isNotDefault
       * isExternal
       * isInline
       *
       * If getter_flags or setter_flags are absent, their value should be computed as follows:
       * - hasAnnotations, Visibility, Modality have the same value as in the property flags
       * - all other flags are false
       * </pre>
       *
       * <code>int32 getter_flags = 7;</code>
       * @return Whether the getterFlags field is set.
       */
      @java.lang.Override
      public boolean hasGetterFlags() {
        return ((bitField0_ & 0x00001000) != 0);
      }
      /**
       * <pre>
       *
       * hasAnnotations
       * Visibility
       * Modality
       * isNotDefault
       * isExternal
       * isInline
       *
       * If getter_flags or setter_flags are absent, their value should be computed as follows:
       * - hasAnnotations, Visibility, Modality have the same value as in the property flags
       * - all other flags are false
       * </pre>
       *
       * <code>int32 getter_flags = 7;</code>
       * @return The getterFlags.
       */
      @java.lang.Override
      public int getGetterFlags() {
        return getterFlags_;
      }
      /**
       * <pre>
       *
       * hasAnnotations
       * Visibility
       * Modality
       * isNotDefault
       * isExternal
       * isInline
       *
       * If getter_flags or setter_flags are absent, their value should be computed as follows:
       * - hasAnnotations, Visibility, Modality have the same value as in the property flags
       * - all other flags are false
       * </pre>
       *
       * <code>int32 getter_flags = 7;</code>
       * @param value The getterFlags to set.
       * @return This builder for chaining.
       */
      public Builder setGetterFlags(int value) {

        getterFlags_ = value;
        bitField0_ |= 0x00001000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *
       * hasAnnotations
       * Visibility
       * Modality
       * isNotDefault
       * isExternal
       * isInline
       *
       * If getter_flags or setter_flags are absent, their value should be computed as follows:
       * - hasAnnotations, Visibility, Modality have the same value as in the property flags
       * - all other flags are false
       * </pre>
       *
       * <code>int32 getter_flags = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearGetterFlags() {
        bitField0_ = (bitField0_ & ~0x00001000);
        getterFlags_ = 0;
        onChanged();
        return this;
      }

      private int setterFlags_ ;
      /**
       * <code>int32 setter_flags = 8;</code>
       * @return Whether the setterFlags field is set.
       */
      @java.lang.Override
      public boolean hasSetterFlags() {
        return ((bitField0_ & 0x00002000) != 0);
      }
      /**
       * <code>int32 setter_flags = 8;</code>
       * @return The setterFlags.
       */
      @java.lang.Override
      public int getSetterFlags() {
        return setterFlags_;
      }
      /**
       * <code>int32 setter_flags = 8;</code>
       * @param value The setterFlags to set.
       * @return This builder for chaining.
       */
      public Builder setSetterFlags(int value) {

        setterFlags_ = value;
        bitField0_ |= 0x00002000;
        onChanged();
        return this;
      }
      /**
       * <code>int32 setter_flags = 8;</code>
       * @return This builder for chaining.
       */
      public Builder clearSetterFlags() {
        bitField0_ = (bitField0_ & ~0x00002000);
        setterFlags_ = 0;
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.protobuf.Internal.IntList versionRequirement_ = emptyIntList();
      private void ensureVersionRequirementIsMutable() {
        if (!versionRequirement_.isModifiable()) {
          versionRequirement_ = makeMutableCopy(versionRequirement_);
        }
        bitField0_ |= 0x00004000;
      }
      /**
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       *
       * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
       * @return A list containing the versionRequirement.
       */
      public java.util.List<java.lang.Integer>
          getVersionRequirementList() {
        versionRequirement_.makeImmutable();
        return versionRequirement_;
      }
      /**
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       *
       * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
       * @return The count of versionRequirement.
       */
      public int getVersionRequirementCount() {
        return versionRequirement_.size();
      }
      /**
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       *
       * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
       * @param index The index of the element to return.
       * @return The versionRequirement at the given index.
       */
      public int getVersionRequirement(int index) {
        return versionRequirement_.getInt(index);
      }
      /**
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       *
       * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
       * @param index The index to set the value at.
       * @param value The versionRequirement to set.
       * @return This builder for chaining.
       */
      public Builder setVersionRequirement(
          int index, int value) {

        ensureVersionRequirementIsMutable();
        versionRequirement_.setInt(index, value);
        bitField0_ |= 0x00004000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       *
       * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
       * @param value The versionRequirement to add.
       * @return This builder for chaining.
       */
      public Builder addVersionRequirement(int value) {

        ensureVersionRequirementIsMutable();
        versionRequirement_.addInt(value);
        bitField0_ |= 0x00004000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       *
       * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
       * @param values The versionRequirement to add.
       * @return This builder for chaining.
       */
      public Builder addAllVersionRequirement(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureVersionRequirementIsMutable();
        org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
            values, versionRequirement_);
        bitField0_ |= 0x00004000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       *
       * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearVersionRequirement() {
        versionRequirement_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00004000);
        onChanged();
        return this;
      }

      private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData> compilerPluginData_ =
        java.util.Collections.emptyList();
      private void ensureCompilerPluginDataIsMutable() {
        if (!((bitField0_ & 0x00008000) != 0)) {
          compilerPluginData_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData>(compilerPluginData_);
          bitField0_ |= 0x00008000;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginDataOrBuilder> compilerPluginDataBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData> getCompilerPluginDataList() {
        if (compilerPluginDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(compilerPluginData_);
        } else {
          return compilerPluginDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public int getCompilerPluginDataCount() {
        if (compilerPluginDataBuilder_ == null) {
          return compilerPluginData_.size();
        } else {
          return compilerPluginDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData getCompilerPluginData(int index) {
        if (compilerPluginDataBuilder_ == null) {
          return compilerPluginData_.get(index);
        } else {
          return compilerPluginDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public Builder setCompilerPluginData(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData value) {
        if (compilerPluginDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCompilerPluginDataIsMutable();
          compilerPluginData_.set(index, value);
          onChanged();
        } else {
          compilerPluginDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public Builder setCompilerPluginData(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.Builder builderForValue) {
        if (compilerPluginDataBuilder_ == null) {
          ensureCompilerPluginDataIsMutable();
          compilerPluginData_.set(index, builderForValue.build());
          onChanged();
        } else {
          compilerPluginDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public Builder addCompilerPluginData(org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData value) {
        if (compilerPluginDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCompilerPluginDataIsMutable();
          compilerPluginData_.add(value);
          onChanged();
        } else {
          compilerPluginDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public Builder addCompilerPluginData(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData value) {
        if (compilerPluginDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCompilerPluginDataIsMutable();
          compilerPluginData_.add(index, value);
          onChanged();
        } else {
          compilerPluginDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public Builder addCompilerPluginData(
          org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.Builder builderForValue) {
        if (compilerPluginDataBuilder_ == null) {
          ensureCompilerPluginDataIsMutable();
          compilerPluginData_.add(builderForValue.build());
          onChanged();
        } else {
          compilerPluginDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public Builder addCompilerPluginData(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.Builder builderForValue) {
        if (compilerPluginDataBuilder_ == null) {
          ensureCompilerPluginDataIsMutable();
          compilerPluginData_.add(index, builderForValue.build());
          onChanged();
        } else {
          compilerPluginDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public Builder addAllCompilerPluginData(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData> values) {
        if (compilerPluginDataBuilder_ == null) {
          ensureCompilerPluginDataIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, compilerPluginData_);
          onChanged();
        } else {
          compilerPluginDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public Builder clearCompilerPluginData() {
        if (compilerPluginDataBuilder_ == null) {
          compilerPluginData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00008000);
          onChanged();
        } else {
          compilerPluginDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public Builder removeCompilerPluginData(int index) {
        if (compilerPluginDataBuilder_ == null) {
          ensureCompilerPluginDataIsMutable();
          compilerPluginData_.remove(index);
          onChanged();
        } else {
          compilerPluginDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.Builder getCompilerPluginDataBuilder(
          int index) {
        return getCompilerPluginDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginDataOrBuilder getCompilerPluginDataOrBuilder(
          int index) {
        if (compilerPluginDataBuilder_ == null) {
          return compilerPluginData_.get(index);  } else {
          return compilerPluginDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginDataOrBuilder> 
           getCompilerPluginDataOrBuilderList() {
        if (compilerPluginDataBuilder_ != null) {
          return compilerPluginDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(compilerPluginData_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.Builder addCompilerPluginDataBuilder() {
        return getCompilerPluginDataFieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.Builder addCompilerPluginDataBuilder(
          int index) {
        return getCompilerPluginDataFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.Builder> 
           getCompilerPluginDataBuilderList() {
        return getCompilerPluginDataFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginDataOrBuilder> 
          getCompilerPluginDataFieldBuilder() {
        if (compilerPluginDataBuilder_ == null) {
          compilerPluginDataBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginDataOrBuilder>(
                  compilerPluginData_,
                  ((bitField0_ & 0x00008000) != 0),
                  getParentForChildren(),
                  isClean());
          compilerPluginData_ = null;
        }
        return compilerPluginDataBuilder_;
      }

      private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> annotation_ =
        java.util.Collections.emptyList();
      private void ensureAnnotationIsMutable() {
        if (!((bitField0_ & 0x00010000) != 0)) {
          annotation_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation>(annotation_);
          bitField0_ |= 0x00010000;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Annotation, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> annotationBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 14;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> getAnnotationList() {
        if (annotationBuilder_ == null) {
          return java.util.Collections.unmodifiableList(annotation_);
        } else {
          return annotationBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 14;</code>
       */
      public int getAnnotationCount() {
        if (annotationBuilder_ == null) {
          return annotation_.size();
        } else {
          return annotationBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 14;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getAnnotation(int index) {
        if (annotationBuilder_ == null) {
          return annotation_.get(index);
        } else {
          return annotationBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 14;</code>
       */
      public Builder setAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        if (annotationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAnnotationIsMutable();
          annotation_.set(index, value);
          onChanged();
        } else {
          annotationBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 14;</code>
       */
      public Builder setAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        if (annotationBuilder_ == null) {
          ensureAnnotationIsMutable();
          annotation_.set(index, builderForValue.build());
          onChanged();
        } else {
          annotationBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 14;</code>
       */
      public Builder addAnnotation(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        if (annotationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAnnotationIsMutable();
          annotation_.add(value);
          onChanged();
        } else {
          annotationBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 14;</code>
       */
      public Builder addAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        if (annotationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAnnotationIsMutable();
          annotation_.add(index, value);
          onChanged();
        } else {
          annotationBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 14;</code>
       */
      public Builder addAnnotation(
          org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        if (annotationBuilder_ == null) {
          ensureAnnotationIsMutable();
          annotation_.add(builderForValue.build());
          onChanged();
        } else {
          annotationBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 14;</code>
       */
      public Builder addAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        if (annotationBuilder_ == null) {
          ensureAnnotationIsMutable();
          annotation_.add(index, builderForValue.build());
          onChanged();
        } else {
          annotationBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 14;</code>
       */
      public Builder addAllAnnotation(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> values) {
        if (annotationBuilder_ == null) {
          ensureAnnotationIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, annotation_);
          onChanged();
        } else {
          annotationBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 14;</code>
       */
      public Builder clearAnnotation() {
        if (annotationBuilder_ == null) {
          annotation_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00010000);
          onChanged();
        } else {
          annotationBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 14;</code>
       */
      public Builder removeAnnotation(int index) {
        if (annotationBuilder_ == null) {
          ensureAnnotationIsMutable();
          annotation_.remove(index);
          onChanged();
        } else {
          annotationBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 14;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder getAnnotationBuilder(
          int index) {
        return getAnnotationFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 14;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder getAnnotationOrBuilder(
          int index) {
        if (annotationBuilder_ == null) {
          return annotation_.get(index);  } else {
          return annotationBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 14;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> 
           getAnnotationOrBuilderList() {
        if (annotationBuilder_ != null) {
          return annotationBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(annotation_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 14;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder addAnnotationBuilder() {
        return getAnnotationFieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 14;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder addAnnotationBuilder(
          int index) {
        return getAnnotationFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 14;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder> 
           getAnnotationBuilderList() {
        return getAnnotationFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Annotation, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> 
          getAnnotationFieldBuilder() {
        if (annotationBuilder_ == null) {
          annotationBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.ProtoBuf.Annotation, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder>(
                  annotation_,
                  ((bitField0_ & 0x00010000) != 0),
                  getParentForChildren(),
                  isClean());
          annotation_ = null;
        }
        return annotationBuilder_;
      }

      private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> getterAnnotation_ =
        java.util.Collections.emptyList();
      private void ensureGetterAnnotationIsMutable() {
        if (!((bitField0_ & 0x00020000) != 0)) {
          getterAnnotation_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation>(getterAnnotation_);
          bitField0_ |= 0x00020000;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Annotation, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> getterAnnotationBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation getter_annotation = 15;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> getGetterAnnotationList() {
        if (getterAnnotationBuilder_ == null) {
          return java.util.Collections.unmodifiableList(getterAnnotation_);
        } else {
          return getterAnnotationBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation getter_annotation = 15;</code>
       */
      public int getGetterAnnotationCount() {
        if (getterAnnotationBuilder_ == null) {
          return getterAnnotation_.size();
        } else {
          return getterAnnotationBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation getter_annotation = 15;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getGetterAnnotation(int index) {
        if (getterAnnotationBuilder_ == null) {
          return getterAnnotation_.get(index);
        } else {
          return getterAnnotationBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation getter_annotation = 15;</code>
       */
      public Builder setGetterAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        if (getterAnnotationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureGetterAnnotationIsMutable();
          getterAnnotation_.set(index, value);
          onChanged();
        } else {
          getterAnnotationBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation getter_annotation = 15;</code>
       */
      public Builder setGetterAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        if (getterAnnotationBuilder_ == null) {
          ensureGetterAnnotationIsMutable();
          getterAnnotation_.set(index, builderForValue.build());
          onChanged();
        } else {
          getterAnnotationBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation getter_annotation = 15;</code>
       */
      public Builder addGetterAnnotation(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        if (getterAnnotationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureGetterAnnotationIsMutable();
          getterAnnotation_.add(value);
          onChanged();
        } else {
          getterAnnotationBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation getter_annotation = 15;</code>
       */
      public Builder addGetterAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        if (getterAnnotationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureGetterAnnotationIsMutable();
          getterAnnotation_.add(index, value);
          onChanged();
        } else {
          getterAnnotationBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation getter_annotation = 15;</code>
       */
      public Builder addGetterAnnotation(
          org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        if (getterAnnotationBuilder_ == null) {
          ensureGetterAnnotationIsMutable();
          getterAnnotation_.add(builderForValue.build());
          onChanged();
        } else {
          getterAnnotationBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation getter_annotation = 15;</code>
       */
      public Builder addGetterAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        if (getterAnnotationBuilder_ == null) {
          ensureGetterAnnotationIsMutable();
          getterAnnotation_.add(index, builderForValue.build());
          onChanged();
        } else {
          getterAnnotationBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation getter_annotation = 15;</code>
       */
      public Builder addAllGetterAnnotation(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> values) {
        if (getterAnnotationBuilder_ == null) {
          ensureGetterAnnotationIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, getterAnnotation_);
          onChanged();
        } else {
          getterAnnotationBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation getter_annotation = 15;</code>
       */
      public Builder clearGetterAnnotation() {
        if (getterAnnotationBuilder_ == null) {
          getterAnnotation_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00020000);
          onChanged();
        } else {
          getterAnnotationBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation getter_annotation = 15;</code>
       */
      public Builder removeGetterAnnotation(int index) {
        if (getterAnnotationBuilder_ == null) {
          ensureGetterAnnotationIsMutable();
          getterAnnotation_.remove(index);
          onChanged();
        } else {
          getterAnnotationBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation getter_annotation = 15;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder getGetterAnnotationBuilder(
          int index) {
        return getGetterAnnotationFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation getter_annotation = 15;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder getGetterAnnotationOrBuilder(
          int index) {
        if (getterAnnotationBuilder_ == null) {
          return getterAnnotation_.get(index);  } else {
          return getterAnnotationBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation getter_annotation = 15;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> 
           getGetterAnnotationOrBuilderList() {
        if (getterAnnotationBuilder_ != null) {
          return getterAnnotationBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(getterAnnotation_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation getter_annotation = 15;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder addGetterAnnotationBuilder() {
        return getGetterAnnotationFieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation getter_annotation = 15;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder addGetterAnnotationBuilder(
          int index) {
        return getGetterAnnotationFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation getter_annotation = 15;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder> 
           getGetterAnnotationBuilderList() {
        return getGetterAnnotationFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Annotation, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> 
          getGetterAnnotationFieldBuilder() {
        if (getterAnnotationBuilder_ == null) {
          getterAnnotationBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.ProtoBuf.Annotation, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder>(
                  getterAnnotation_,
                  ((bitField0_ & 0x00020000) != 0),
                  getParentForChildren(),
                  isClean());
          getterAnnotation_ = null;
        }
        return getterAnnotationBuilder_;
      }

      private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> setterAnnotation_ =
        java.util.Collections.emptyList();
      private void ensureSetterAnnotationIsMutable() {
        if (!((bitField0_ & 0x00040000) != 0)) {
          setterAnnotation_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation>(setterAnnotation_);
          bitField0_ |= 0x00040000;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Annotation, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> setterAnnotationBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation setter_annotation = 16;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> getSetterAnnotationList() {
        if (setterAnnotationBuilder_ == null) {
          return java.util.Collections.unmodifiableList(setterAnnotation_);
        } else {
          return setterAnnotationBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation setter_annotation = 16;</code>
       */
      public int getSetterAnnotationCount() {
        if (setterAnnotationBuilder_ == null) {
          return setterAnnotation_.size();
        } else {
          return setterAnnotationBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation setter_annotation = 16;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getSetterAnnotation(int index) {
        if (setterAnnotationBuilder_ == null) {
          return setterAnnotation_.get(index);
        } else {
          return setterAnnotationBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation setter_annotation = 16;</code>
       */
      public Builder setSetterAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        if (setterAnnotationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSetterAnnotationIsMutable();
          setterAnnotation_.set(index, value);
          onChanged();
        } else {
          setterAnnotationBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation setter_annotation = 16;</code>
       */
      public Builder setSetterAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        if (setterAnnotationBuilder_ == null) {
          ensureSetterAnnotationIsMutable();
          setterAnnotation_.set(index, builderForValue.build());
          onChanged();
        } else {
          setterAnnotationBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation setter_annotation = 16;</code>
       */
      public Builder addSetterAnnotation(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        if (setterAnnotationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSetterAnnotationIsMutable();
          setterAnnotation_.add(value);
          onChanged();
        } else {
          setterAnnotationBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation setter_annotation = 16;</code>
       */
      public Builder addSetterAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        if (setterAnnotationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSetterAnnotationIsMutable();
          setterAnnotation_.add(index, value);
          onChanged();
        } else {
          setterAnnotationBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation setter_annotation = 16;</code>
       */
      public Builder addSetterAnnotation(
          org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        if (setterAnnotationBuilder_ == null) {
          ensureSetterAnnotationIsMutable();
          setterAnnotation_.add(builderForValue.build());
          onChanged();
        } else {
          setterAnnotationBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation setter_annotation = 16;</code>
       */
      public Builder addSetterAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        if (setterAnnotationBuilder_ == null) {
          ensureSetterAnnotationIsMutable();
          setterAnnotation_.add(index, builderForValue.build());
          onChanged();
        } else {
          setterAnnotationBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation setter_annotation = 16;</code>
       */
      public Builder addAllSetterAnnotation(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> values) {
        if (setterAnnotationBuilder_ == null) {
          ensureSetterAnnotationIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, setterAnnotation_);
          onChanged();
        } else {
          setterAnnotationBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation setter_annotation = 16;</code>
       */
      public Builder clearSetterAnnotation() {
        if (setterAnnotationBuilder_ == null) {
          setterAnnotation_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00040000);
          onChanged();
        } else {
          setterAnnotationBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation setter_annotation = 16;</code>
       */
      public Builder removeSetterAnnotation(int index) {
        if (setterAnnotationBuilder_ == null) {
          ensureSetterAnnotationIsMutable();
          setterAnnotation_.remove(index);
          onChanged();
        } else {
          setterAnnotationBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation setter_annotation = 16;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder getSetterAnnotationBuilder(
          int index) {
        return getSetterAnnotationFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation setter_annotation = 16;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder getSetterAnnotationOrBuilder(
          int index) {
        if (setterAnnotationBuilder_ == null) {
          return setterAnnotation_.get(index);  } else {
          return setterAnnotationBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation setter_annotation = 16;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> 
           getSetterAnnotationOrBuilderList() {
        if (setterAnnotationBuilder_ != null) {
          return setterAnnotationBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(setterAnnotation_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation setter_annotation = 16;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder addSetterAnnotationBuilder() {
        return getSetterAnnotationFieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation setter_annotation = 16;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder addSetterAnnotationBuilder(
          int index) {
        return getSetterAnnotationFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation setter_annotation = 16;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder> 
           getSetterAnnotationBuilderList() {
        return getSetterAnnotationFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Annotation, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> 
          getSetterAnnotationFieldBuilder() {
        if (setterAnnotationBuilder_ == null) {
          setterAnnotationBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.ProtoBuf.Annotation, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder>(
                  setterAnnotation_,
                  ((bitField0_ & 0x00040000) != 0),
                  getParentForChildren(),
                  isClean());
          setterAnnotation_ = null;
        }
        return setterAnnotationBuilder_;
      }

      private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> extensionReceiverAnnotation_ =
        java.util.Collections.emptyList();
      private void ensureExtensionReceiverAnnotationIsMutable() {
        if (!((bitField0_ & 0x00080000) != 0)) {
          extensionReceiverAnnotation_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation>(extensionReceiverAnnotation_);
          bitField0_ |= 0x00080000;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Annotation, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> extensionReceiverAnnotationBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 33;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> getExtensionReceiverAnnotationList() {
        if (extensionReceiverAnnotationBuilder_ == null) {
          return java.util.Collections.unmodifiableList(extensionReceiverAnnotation_);
        } else {
          return extensionReceiverAnnotationBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 33;</code>
       */
      public int getExtensionReceiverAnnotationCount() {
        if (extensionReceiverAnnotationBuilder_ == null) {
          return extensionReceiverAnnotation_.size();
        } else {
          return extensionReceiverAnnotationBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 33;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getExtensionReceiverAnnotation(int index) {
        if (extensionReceiverAnnotationBuilder_ == null) {
          return extensionReceiverAnnotation_.get(index);
        } else {
          return extensionReceiverAnnotationBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 33;</code>
       */
      public Builder setExtensionReceiverAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        if (extensionReceiverAnnotationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureExtensionReceiverAnnotationIsMutable();
          extensionReceiverAnnotation_.set(index, value);
          onChanged();
        } else {
          extensionReceiverAnnotationBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 33;</code>
       */
      public Builder setExtensionReceiverAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        if (extensionReceiverAnnotationBuilder_ == null) {
          ensureExtensionReceiverAnnotationIsMutable();
          extensionReceiverAnnotation_.set(index, builderForValue.build());
          onChanged();
        } else {
          extensionReceiverAnnotationBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 33;</code>
       */
      public Builder addExtensionReceiverAnnotation(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        if (extensionReceiverAnnotationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureExtensionReceiverAnnotationIsMutable();
          extensionReceiverAnnotation_.add(value);
          onChanged();
        } else {
          extensionReceiverAnnotationBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 33;</code>
       */
      public Builder addExtensionReceiverAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        if (extensionReceiverAnnotationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureExtensionReceiverAnnotationIsMutable();
          extensionReceiverAnnotation_.add(index, value);
          onChanged();
        } else {
          extensionReceiverAnnotationBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 33;</code>
       */
      public Builder addExtensionReceiverAnnotation(
          org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        if (extensionReceiverAnnotationBuilder_ == null) {
          ensureExtensionReceiverAnnotationIsMutable();
          extensionReceiverAnnotation_.add(builderForValue.build());
          onChanged();
        } else {
          extensionReceiverAnnotationBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 33;</code>
       */
      public Builder addExtensionReceiverAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        if (extensionReceiverAnnotationBuilder_ == null) {
          ensureExtensionReceiverAnnotationIsMutable();
          extensionReceiverAnnotation_.add(index, builderForValue.build());
          onChanged();
        } else {
          extensionReceiverAnnotationBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 33;</code>
       */
      public Builder addAllExtensionReceiverAnnotation(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> values) {
        if (extensionReceiverAnnotationBuilder_ == null) {
          ensureExtensionReceiverAnnotationIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, extensionReceiverAnnotation_);
          onChanged();
        } else {
          extensionReceiverAnnotationBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 33;</code>
       */
      public Builder clearExtensionReceiverAnnotation() {
        if (extensionReceiverAnnotationBuilder_ == null) {
          extensionReceiverAnnotation_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00080000);
          onChanged();
        } else {
          extensionReceiverAnnotationBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 33;</code>
       */
      public Builder removeExtensionReceiverAnnotation(int index) {
        if (extensionReceiverAnnotationBuilder_ == null) {
          ensureExtensionReceiverAnnotationIsMutable();
          extensionReceiverAnnotation_.remove(index);
          onChanged();
        } else {
          extensionReceiverAnnotationBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 33;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder getExtensionReceiverAnnotationBuilder(
          int index) {
        return getExtensionReceiverAnnotationFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 33;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder getExtensionReceiverAnnotationOrBuilder(
          int index) {
        if (extensionReceiverAnnotationBuilder_ == null) {
          return extensionReceiverAnnotation_.get(index);  } else {
          return extensionReceiverAnnotationBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 33;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> 
           getExtensionReceiverAnnotationOrBuilderList() {
        if (extensionReceiverAnnotationBuilder_ != null) {
          return extensionReceiverAnnotationBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(extensionReceiverAnnotation_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 33;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder addExtensionReceiverAnnotationBuilder() {
        return getExtensionReceiverAnnotationFieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 33;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder addExtensionReceiverAnnotationBuilder(
          int index) {
        return getExtensionReceiverAnnotationFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 33;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder> 
           getExtensionReceiverAnnotationBuilderList() {
        return getExtensionReceiverAnnotationFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Annotation, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> 
          getExtensionReceiverAnnotationFieldBuilder() {
        if (extensionReceiverAnnotationBuilder_ == null) {
          extensionReceiverAnnotationBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.ProtoBuf.Annotation, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder>(
                  extensionReceiverAnnotation_,
                  ((bitField0_ & 0x00080000) != 0),
                  getParentForChildren(),
                  isClean());
          extensionReceiverAnnotation_ = null;
        }
        return extensionReceiverAnnotationBuilder_;
      }

      private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> backingFieldAnnotation_ =
        java.util.Collections.emptyList();
      private void ensureBackingFieldAnnotationIsMutable() {
        if (!((bitField0_ & 0x00100000) != 0)) {
          backingFieldAnnotation_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation>(backingFieldAnnotation_);
          bitField0_ |= 0x00100000;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Annotation, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> backingFieldAnnotationBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation backing_field_annotation = 34;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> getBackingFieldAnnotationList() {
        if (backingFieldAnnotationBuilder_ == null) {
          return java.util.Collections.unmodifiableList(backingFieldAnnotation_);
        } else {
          return backingFieldAnnotationBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation backing_field_annotation = 34;</code>
       */
      public int getBackingFieldAnnotationCount() {
        if (backingFieldAnnotationBuilder_ == null) {
          return backingFieldAnnotation_.size();
        } else {
          return backingFieldAnnotationBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation backing_field_annotation = 34;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getBackingFieldAnnotation(int index) {
        if (backingFieldAnnotationBuilder_ == null) {
          return backingFieldAnnotation_.get(index);
        } else {
          return backingFieldAnnotationBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation backing_field_annotation = 34;</code>
       */
      public Builder setBackingFieldAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        if (backingFieldAnnotationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBackingFieldAnnotationIsMutable();
          backingFieldAnnotation_.set(index, value);
          onChanged();
        } else {
          backingFieldAnnotationBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation backing_field_annotation = 34;</code>
       */
      public Builder setBackingFieldAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        if (backingFieldAnnotationBuilder_ == null) {
          ensureBackingFieldAnnotationIsMutable();
          backingFieldAnnotation_.set(index, builderForValue.build());
          onChanged();
        } else {
          backingFieldAnnotationBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation backing_field_annotation = 34;</code>
       */
      public Builder addBackingFieldAnnotation(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        if (backingFieldAnnotationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBackingFieldAnnotationIsMutable();
          backingFieldAnnotation_.add(value);
          onChanged();
        } else {
          backingFieldAnnotationBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation backing_field_annotation = 34;</code>
       */
      public Builder addBackingFieldAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        if (backingFieldAnnotationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBackingFieldAnnotationIsMutable();
          backingFieldAnnotation_.add(index, value);
          onChanged();
        } else {
          backingFieldAnnotationBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation backing_field_annotation = 34;</code>
       */
      public Builder addBackingFieldAnnotation(
          org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        if (backingFieldAnnotationBuilder_ == null) {
          ensureBackingFieldAnnotationIsMutable();
          backingFieldAnnotation_.add(builderForValue.build());
          onChanged();
        } else {
          backingFieldAnnotationBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation backing_field_annotation = 34;</code>
       */
      public Builder addBackingFieldAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        if (backingFieldAnnotationBuilder_ == null) {
          ensureBackingFieldAnnotationIsMutable();
          backingFieldAnnotation_.add(index, builderForValue.build());
          onChanged();
        } else {
          backingFieldAnnotationBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation backing_field_annotation = 34;</code>
       */
      public Builder addAllBackingFieldAnnotation(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> values) {
        if (backingFieldAnnotationBuilder_ == null) {
          ensureBackingFieldAnnotationIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, backingFieldAnnotation_);
          onChanged();
        } else {
          backingFieldAnnotationBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation backing_field_annotation = 34;</code>
       */
      public Builder clearBackingFieldAnnotation() {
        if (backingFieldAnnotationBuilder_ == null) {
          backingFieldAnnotation_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00100000);
          onChanged();
        } else {
          backingFieldAnnotationBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation backing_field_annotation = 34;</code>
       */
      public Builder removeBackingFieldAnnotation(int index) {
        if (backingFieldAnnotationBuilder_ == null) {
          ensureBackingFieldAnnotationIsMutable();
          backingFieldAnnotation_.remove(index);
          onChanged();
        } else {
          backingFieldAnnotationBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation backing_field_annotation = 34;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder getBackingFieldAnnotationBuilder(
          int index) {
        return getBackingFieldAnnotationFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation backing_field_annotation = 34;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder getBackingFieldAnnotationOrBuilder(
          int index) {
        if (backingFieldAnnotationBuilder_ == null) {
          return backingFieldAnnotation_.get(index);  } else {
          return backingFieldAnnotationBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation backing_field_annotation = 34;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> 
           getBackingFieldAnnotationOrBuilderList() {
        if (backingFieldAnnotationBuilder_ != null) {
          return backingFieldAnnotationBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(backingFieldAnnotation_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation backing_field_annotation = 34;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder addBackingFieldAnnotationBuilder() {
        return getBackingFieldAnnotationFieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation backing_field_annotation = 34;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder addBackingFieldAnnotationBuilder(
          int index) {
        return getBackingFieldAnnotationFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation backing_field_annotation = 34;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder> 
           getBackingFieldAnnotationBuilderList() {
        return getBackingFieldAnnotationFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Annotation, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> 
          getBackingFieldAnnotationFieldBuilder() {
        if (backingFieldAnnotationBuilder_ == null) {
          backingFieldAnnotationBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.ProtoBuf.Annotation, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder>(
                  backingFieldAnnotation_,
                  ((bitField0_ & 0x00100000) != 0),
                  getParentForChildren(),
                  isClean());
          backingFieldAnnotation_ = null;
        }
        return backingFieldAnnotationBuilder_;
      }

      private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> delegateFieldAnnotation_ =
        java.util.Collections.emptyList();
      private void ensureDelegateFieldAnnotationIsMutable() {
        if (!((bitField0_ & 0x00200000) != 0)) {
          delegateFieldAnnotation_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation>(delegateFieldAnnotation_);
          bitField0_ |= 0x00200000;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Annotation, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> delegateFieldAnnotationBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation delegate_field_annotation = 35;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> getDelegateFieldAnnotationList() {
        if (delegateFieldAnnotationBuilder_ == null) {
          return java.util.Collections.unmodifiableList(delegateFieldAnnotation_);
        } else {
          return delegateFieldAnnotationBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation delegate_field_annotation = 35;</code>
       */
      public int getDelegateFieldAnnotationCount() {
        if (delegateFieldAnnotationBuilder_ == null) {
          return delegateFieldAnnotation_.size();
        } else {
          return delegateFieldAnnotationBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation delegate_field_annotation = 35;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getDelegateFieldAnnotation(int index) {
        if (delegateFieldAnnotationBuilder_ == null) {
          return delegateFieldAnnotation_.get(index);
        } else {
          return delegateFieldAnnotationBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation delegate_field_annotation = 35;</code>
       */
      public Builder setDelegateFieldAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        if (delegateFieldAnnotationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDelegateFieldAnnotationIsMutable();
          delegateFieldAnnotation_.set(index, value);
          onChanged();
        } else {
          delegateFieldAnnotationBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation delegate_field_annotation = 35;</code>
       */
      public Builder setDelegateFieldAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        if (delegateFieldAnnotationBuilder_ == null) {
          ensureDelegateFieldAnnotationIsMutable();
          delegateFieldAnnotation_.set(index, builderForValue.build());
          onChanged();
        } else {
          delegateFieldAnnotationBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation delegate_field_annotation = 35;</code>
       */
      public Builder addDelegateFieldAnnotation(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        if (delegateFieldAnnotationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDelegateFieldAnnotationIsMutable();
          delegateFieldAnnotation_.add(value);
          onChanged();
        } else {
          delegateFieldAnnotationBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation delegate_field_annotation = 35;</code>
       */
      public Builder addDelegateFieldAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        if (delegateFieldAnnotationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDelegateFieldAnnotationIsMutable();
          delegateFieldAnnotation_.add(index, value);
          onChanged();
        } else {
          delegateFieldAnnotationBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation delegate_field_annotation = 35;</code>
       */
      public Builder addDelegateFieldAnnotation(
          org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        if (delegateFieldAnnotationBuilder_ == null) {
          ensureDelegateFieldAnnotationIsMutable();
          delegateFieldAnnotation_.add(builderForValue.build());
          onChanged();
        } else {
          delegateFieldAnnotationBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation delegate_field_annotation = 35;</code>
       */
      public Builder addDelegateFieldAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        if (delegateFieldAnnotationBuilder_ == null) {
          ensureDelegateFieldAnnotationIsMutable();
          delegateFieldAnnotation_.add(index, builderForValue.build());
          onChanged();
        } else {
          delegateFieldAnnotationBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation delegate_field_annotation = 35;</code>
       */
      public Builder addAllDelegateFieldAnnotation(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> values) {
        if (delegateFieldAnnotationBuilder_ == null) {
          ensureDelegateFieldAnnotationIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, delegateFieldAnnotation_);
          onChanged();
        } else {
          delegateFieldAnnotationBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation delegate_field_annotation = 35;</code>
       */
      public Builder clearDelegateFieldAnnotation() {
        if (delegateFieldAnnotationBuilder_ == null) {
          delegateFieldAnnotation_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00200000);
          onChanged();
        } else {
          delegateFieldAnnotationBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation delegate_field_annotation = 35;</code>
       */
      public Builder removeDelegateFieldAnnotation(int index) {
        if (delegateFieldAnnotationBuilder_ == null) {
          ensureDelegateFieldAnnotationIsMutable();
          delegateFieldAnnotation_.remove(index);
          onChanged();
        } else {
          delegateFieldAnnotationBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation delegate_field_annotation = 35;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder getDelegateFieldAnnotationBuilder(
          int index) {
        return getDelegateFieldAnnotationFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation delegate_field_annotation = 35;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder getDelegateFieldAnnotationOrBuilder(
          int index) {
        if (delegateFieldAnnotationBuilder_ == null) {
          return delegateFieldAnnotation_.get(index);  } else {
          return delegateFieldAnnotationBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation delegate_field_annotation = 35;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> 
           getDelegateFieldAnnotationOrBuilderList() {
        if (delegateFieldAnnotationBuilder_ != null) {
          return delegateFieldAnnotationBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(delegateFieldAnnotation_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation delegate_field_annotation = 35;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder addDelegateFieldAnnotationBuilder() {
        return getDelegateFieldAnnotationFieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation delegate_field_annotation = 35;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder addDelegateFieldAnnotationBuilder(
          int index) {
        return getDelegateFieldAnnotationFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation delegate_field_annotation = 35;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder> 
           getDelegateFieldAnnotationBuilderList() {
        return getDelegateFieldAnnotationFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Annotation, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> 
          getDelegateFieldAnnotationFieldBuilder() {
        if (delegateFieldAnnotationBuilder_ == null) {
          delegateFieldAnnotationBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.ProtoBuf.Annotation, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder>(
                  delegateFieldAnnotation_,
                  ((bitField0_ & 0x00200000) != 0),
                  getParentForChildren(),
                  isClean());
          delegateFieldAnnotation_ = null;
        }
        return delegateFieldAnnotationBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.Property)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.Property)
    private static final org.jetbrains.kotlin.metadata.ProtoBuf.Property DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.metadata.ProtoBuf.Property();
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Property getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<Property>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<Property>() {
      @java.lang.Override
      public Property parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<Property> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<Property> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Property getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ValueParameterOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.ValueParameter)
      org.jetbrains.kotlin.protobuf.GeneratedMessage.
          ExtendableMessageOrBuilder<ValueParameter> {

    /**
     * <pre>
     *
     * hasAnnotations
     * declaresDefault
     * isCrossinline
     * isNoinline
     * </pre>
     *
     * <code>int32 flags = 1 [default = 0];</code>
     * @return Whether the flags field is set.
     */
    boolean hasFlags();
    /**
     * <pre>
     *
     * hasAnnotations
     * declaresDefault
     * isCrossinline
     * isNoinline
     * </pre>
     *
     * <code>int32 flags = 1 [default = 0];</code>
     * @return The flags.
     */
    int getFlags();

    /**
     * <code>int32 name = 2 [features = { ... }</code>
     * @return Whether the name field is set.
     */
    boolean hasName();
    /**
     * <code>int32 name = 2 [features = { ... }</code>
     * @return The name.
     */
    int getName();

    /**
     * <code>.org.jetbrains.kotlin.metadata.Type type = 3;</code>
     * @return Whether the type field is set.
     */
    boolean hasType();
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type type = 3;</code>
     * @return The type.
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Type getType();
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type type = 3;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder getTypeOrBuilder();

    /**
     * <code>int32 type_id = 5 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return Whether the typeId field is set.
     */
    boolean hasTypeId();
    /**
     * <code>int32 type_id = 5 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return The typeId.
     */
    int getTypeId();

    /**
     * <code>.org.jetbrains.kotlin.metadata.Type vararg_element_type = 4;</code>
     * @return Whether the varargElementType field is set.
     */
    boolean hasVarargElementType();
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type vararg_element_type = 4;</code>
     * @return The varargElementType.
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Type getVarargElementType();
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type vararg_element_type = 4;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder getVarargElementTypeOrBuilder();

    /**
     * <code>int32 vararg_element_type_id = 6 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return Whether the varargElementTypeId field is set.
     */
    boolean hasVarargElementTypeId();
    /**
     * <code>int32 vararg_element_type_id = 6 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return The varargElementTypeId.
     */
    int getVarargElementTypeId();

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 7;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> 
        getAnnotationList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 7;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getAnnotation(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 7;</code>
     */
    int getAnnotationCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 7;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> 
        getAnnotationOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 7;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder getAnnotationOrBuilder(
        int index);

    /**
     * <code>.org.jetbrains.kotlin.metadata.Annotation.Argument.Value annotation_parameter_default_value = 8;</code>
     * @return Whether the annotationParameterDefaultValue field is set.
     */
    boolean hasAnnotationParameterDefaultValue();
    /**
     * <code>.org.jetbrains.kotlin.metadata.Annotation.Argument.Value annotation_parameter_default_value = 8;</code>
     * @return The annotationParameterDefaultValue.
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value getAnnotationParameterDefaultValue();
    /**
     * <code>.org.jetbrains.kotlin.metadata.Annotation.Argument.Value annotation_parameter_default_value = 8;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.ValueOrBuilder getAnnotationParameterDefaultValueOrBuilder();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.metadata.ValueParameter}
   */
  public static final class ValueParameter extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage.ExtendableMessage<
        ValueParameter> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.ValueParameter)
      ValueParameterOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        ValueParameter.class.getName());
    }
    // Use ValueParameter.newBuilder() to construct.
    private ValueParameter(org.jetbrains.kotlin.protobuf.GeneratedMessage.ExtendableBuilder<org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter, ?> builder) {
      super(builder);
    }
    private ValueParameter() {
      annotation_ = java.util.Collections.emptyList();
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_ValueParameter_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_ValueParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.class, org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.Builder.class);
    }

    private int bitField0_;
    public static final int FLAGS_FIELD_NUMBER = 1;
    private int flags_ = 0;
    /**
     * <pre>
     *
     * hasAnnotations
     * declaresDefault
     * isCrossinline
     * isNoinline
     * </pre>
     *
     * <code>int32 flags = 1 [default = 0];</code>
     * @return Whether the flags field is set.
     */
    @java.lang.Override
    public boolean hasFlags() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     *
     * hasAnnotations
     * declaresDefault
     * isCrossinline
     * isNoinline
     * </pre>
     *
     * <code>int32 flags = 1 [default = 0];</code>
     * @return The flags.
     */
    @java.lang.Override
    public int getFlags() {
      return flags_;
    }

    public static final int NAME_FIELD_NUMBER = 2;
    private int name_ = 0;
    /**
     * <code>int32 name = 2 [features = { ... }</code>
     * @return Whether the name field is set.
     */
    @java.lang.Override
    public boolean hasName() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>int32 name = 2 [features = { ... }</code>
     * @return The name.
     */
    @java.lang.Override
    public int getName() {
      return name_;
    }

    public static final int TYPE_FIELD_NUMBER = 3;
    private org.jetbrains.kotlin.metadata.ProtoBuf.Type type_;
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type type = 3;</code>
     * @return Whether the type field is set.
     */
    @java.lang.Override
    public boolean hasType() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type type = 3;</code>
     * @return The type.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Type getType() {
      return type_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance() : type_;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type type = 3;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder getTypeOrBuilder() {
      return type_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance() : type_;
    }

    public static final int TYPE_ID_FIELD_NUMBER = 5;
    private int typeId_ = 0;
    /**
     * <code>int32 type_id = 5 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return Whether the typeId field is set.
     */
    @java.lang.Override
    public boolean hasTypeId() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <code>int32 type_id = 5 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return The typeId.
     */
    @java.lang.Override
    public int getTypeId() {
      return typeId_;
    }

    public static final int VARARG_ELEMENT_TYPE_FIELD_NUMBER = 4;
    private org.jetbrains.kotlin.metadata.ProtoBuf.Type varargElementType_;
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type vararg_element_type = 4;</code>
     * @return Whether the varargElementType field is set.
     */
    @java.lang.Override
    public boolean hasVarargElementType() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type vararg_element_type = 4;</code>
     * @return The varargElementType.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Type getVarargElementType() {
      return varargElementType_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance() : varargElementType_;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type vararg_element_type = 4;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder getVarargElementTypeOrBuilder() {
      return varargElementType_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance() : varargElementType_;
    }

    public static final int VARARG_ELEMENT_TYPE_ID_FIELD_NUMBER = 6;
    private int varargElementTypeId_ = 0;
    /**
     * <code>int32 vararg_element_type_id = 6 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return Whether the varargElementTypeId field is set.
     */
    @java.lang.Override
    public boolean hasVarargElementTypeId() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <code>int32 vararg_element_type_id = 6 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return The varargElementTypeId.
     */
    @java.lang.Override
    public int getVarargElementTypeId() {
      return varargElementTypeId_;
    }

    public static final int ANNOTATION_FIELD_NUMBER = 7;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> annotation_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 7;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> getAnnotationList() {
      return annotation_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 7;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> 
        getAnnotationOrBuilderList() {
      return annotation_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 7;</code>
     */
    @java.lang.Override
    public int getAnnotationCount() {
      return annotation_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 7;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getAnnotation(int index) {
      return annotation_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 7;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder getAnnotationOrBuilder(
        int index) {
      return annotation_.get(index);
    }

    public static final int ANNOTATION_PARAMETER_DEFAULT_VALUE_FIELD_NUMBER = 8;
    private org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value annotationParameterDefaultValue_;
    /**
     * <code>.org.jetbrains.kotlin.metadata.Annotation.Argument.Value annotation_parameter_default_value = 8;</code>
     * @return Whether the annotationParameterDefaultValue field is set.
     */
    @java.lang.Override
    public boolean hasAnnotationParameterDefaultValue() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Annotation.Argument.Value annotation_parameter_default_value = 8;</code>
     * @return The annotationParameterDefaultValue.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value getAnnotationParameterDefaultValue() {
      return annotationParameterDefaultValue_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value.getDefaultInstance() : annotationParameterDefaultValue_;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Annotation.Argument.Value annotation_parameter_default_value = 8;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.ValueOrBuilder getAnnotationParameterDefaultValueOrBuilder() {
      return annotationParameterDefaultValue_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value.getDefaultInstance() : annotationParameterDefaultValue_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasName()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasType()) {
        if (!getType().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasVarargElementType()) {
        if (!getVarargElementType().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getAnnotationCount(); i++) {
        if (!getAnnotation(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasAnnotationParameterDefaultValue()) {
        if (!getAnnotationParameterDefaultValue().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (!extensionsAreInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      org.jetbrains.kotlin.protobuf.GeneratedMessage
        .ExtendableMessage.ExtensionSerializer
          extensionWriter = newExtensionSerializer();
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeInt32(1, flags_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeInt32(2, name_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeMessage(3, getType());
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        output.writeMessage(4, getVarargElementType());
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeInt32(5, typeId_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        output.writeInt32(6, varargElementTypeId_);
      }
      for (int i = 0; i < annotation_.size(); i++) {
        output.writeMessage(7, annotation_.get(i));
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        output.writeMessage(8, getAnnotationParameterDefaultValue());
      }
      extensionWriter.writeUntil(200, output);
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(1, flags_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(2, name_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(3, getType());
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(4, getVarargElementType());
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(5, typeId_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(6, varargElementTypeId_);
      }
      for (int i = 0; i < annotation_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(7, annotation_.get(i));
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(8, getAnnotationParameterDefaultValue());
      }
      size += extensionsSerializedSize();
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter other = (org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter) obj;

      if (hasFlags() != other.hasFlags()) return false;
      if (hasFlags()) {
        if (getFlags()
            != other.getFlags()) return false;
      }
      if (hasName() != other.hasName()) return false;
      if (hasName()) {
        if (getName()
            != other.getName()) return false;
      }
      if (hasType() != other.hasType()) return false;
      if (hasType()) {
        if (!getType()
            .equals(other.getType())) return false;
      }
      if (hasTypeId() != other.hasTypeId()) return false;
      if (hasTypeId()) {
        if (getTypeId()
            != other.getTypeId()) return false;
      }
      if (hasVarargElementType() != other.hasVarargElementType()) return false;
      if (hasVarargElementType()) {
        if (!getVarargElementType()
            .equals(other.getVarargElementType())) return false;
      }
      if (hasVarargElementTypeId() != other.hasVarargElementTypeId()) return false;
      if (hasVarargElementTypeId()) {
        if (getVarargElementTypeId()
            != other.getVarargElementTypeId()) return false;
      }
      if (!getAnnotationList()
          .equals(other.getAnnotationList())) return false;
      if (hasAnnotationParameterDefaultValue() != other.hasAnnotationParameterDefaultValue()) return false;
      if (hasAnnotationParameterDefaultValue()) {
        if (!getAnnotationParameterDefaultValue()
            .equals(other.getAnnotationParameterDefaultValue())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      if (!getExtensionFields().equals(other.getExtensionFields()))
        return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasFlags()) {
        hash = (37 * hash) + FLAGS_FIELD_NUMBER;
        hash = (53 * hash) + getFlags();
      }
      if (hasName()) {
        hash = (37 * hash) + NAME_FIELD_NUMBER;
        hash = (53 * hash) + getName();
      }
      if (hasType()) {
        hash = (37 * hash) + TYPE_FIELD_NUMBER;
        hash = (53 * hash) + getType().hashCode();
      }
      if (hasTypeId()) {
        hash = (37 * hash) + TYPE_ID_FIELD_NUMBER;
        hash = (53 * hash) + getTypeId();
      }
      if (hasVarargElementType()) {
        hash = (37 * hash) + VARARG_ELEMENT_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + getVarargElementType().hashCode();
      }
      if (hasVarargElementTypeId()) {
        hash = (37 * hash) + VARARG_ELEMENT_TYPE_ID_FIELD_NUMBER;
        hash = (53 * hash) + getVarargElementTypeId();
      }
      if (getAnnotationCount() > 0) {
        hash = (37 * hash) + ANNOTATION_FIELD_NUMBER;
        hash = (53 * hash) + getAnnotationList().hashCode();
      }
      if (hasAnnotationParameterDefaultValue()) {
        hash = (37 * hash) + ANNOTATION_PARAMETER_DEFAULT_VALUE_FIELD_NUMBER;
        hash = (53 * hash) + getAnnotationParameterDefaultValue().hashCode();
      }
      hash = hashFields(hash, getExtensionFields());
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.ValueParameter}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.ExtendableBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.ValueParameter)
        org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameterOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_ValueParameter_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_ValueParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.class, org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getTypeFieldBuilder();
          getVarargElementTypeFieldBuilder();
          getAnnotationFieldBuilder();
          getAnnotationParameterDefaultValueFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        flags_ = 0;
        name_ = 0;
        type_ = null;
        if (typeBuilder_ != null) {
          typeBuilder_.dispose();
          typeBuilder_ = null;
        }
        typeId_ = 0;
        varargElementType_ = null;
        if (varargElementTypeBuilder_ != null) {
          varargElementTypeBuilder_.dispose();
          varargElementTypeBuilder_ = null;
        }
        varargElementTypeId_ = 0;
        if (annotationBuilder_ == null) {
          annotation_ = java.util.Collections.emptyList();
        } else {
          annotation_ = null;
          annotationBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        annotationParameterDefaultValue_ = null;
        if (annotationParameterDefaultValueBuilder_ != null) {
          annotationParameterDefaultValueBuilder_.dispose();
          annotationParameterDefaultValueBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_ValueParameter_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter getDefaultInstanceForType() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter build() {
        org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter buildPartial() {
        org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter result = new org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter result) {
        if (annotationBuilder_ == null) {
          if (((bitField0_ & 0x00000040) != 0)) {
            annotation_ = java.util.Collections.unmodifiableList(annotation_);
            bitField0_ = (bitField0_ & ~0x00000040);
          }
          result.annotation_ = annotation_;
        } else {
          result.annotation_ = annotationBuilder_.build();
        }
      }

      private void buildPartial0(org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.flags_ = flags_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.name_ = name_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.type_ = typeBuilder_ == null
              ? type_
              : typeBuilder_.build();
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.typeId_ = typeId_;
          to_bitField0_ |= 0x00000008;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.varargElementType_ = varargElementTypeBuilder_ == null
              ? varargElementType_
              : varargElementTypeBuilder_.build();
          to_bitField0_ |= 0x00000010;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.varargElementTypeId_ = varargElementTypeId_;
          to_bitField0_ |= 0x00000020;
        }
        if (((from_bitField0_ & 0x00000080) != 0)) {
          result.annotationParameterDefaultValue_ = annotationParameterDefaultValueBuilder_ == null
              ? annotationParameterDefaultValue_
              : annotationParameterDefaultValueBuilder_.build();
          to_bitField0_ |= 0x00000040;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter) {
          return mergeFrom((org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter other) {
        if (other == org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.getDefaultInstance()) return this;
        if (other.hasFlags()) {
          setFlags(other.getFlags());
        }
        if (other.hasName()) {
          setName(other.getName());
        }
        if (other.hasType()) {
          mergeType(other.getType());
        }
        if (other.hasTypeId()) {
          setTypeId(other.getTypeId());
        }
        if (other.hasVarargElementType()) {
          mergeVarargElementType(other.getVarargElementType());
        }
        if (other.hasVarargElementTypeId()) {
          setVarargElementTypeId(other.getVarargElementTypeId());
        }
        if (annotationBuilder_ == null) {
          if (!other.annotation_.isEmpty()) {
            if (annotation_.isEmpty()) {
              annotation_ = other.annotation_;
              bitField0_ = (bitField0_ & ~0x00000040);
            } else {
              ensureAnnotationIsMutable();
              annotation_.addAll(other.annotation_);
            }
            onChanged();
          }
        } else {
          if (!other.annotation_.isEmpty()) {
            if (annotationBuilder_.isEmpty()) {
              annotationBuilder_.dispose();
              annotationBuilder_ = null;
              annotation_ = other.annotation_;
              bitField0_ = (bitField0_ & ~0x00000040);
              annotationBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getAnnotationFieldBuilder() : null;
            } else {
              annotationBuilder_.addAllMessages(other.annotation_);
            }
          }
        }
        if (other.hasAnnotationParameterDefaultValue()) {
          mergeAnnotationParameterDefaultValue(other.getAnnotationParameterDefaultValue());
        }
        this.mergeExtensionFields(other);
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasName()) {
          return false;
        }
        if (hasType()) {
          if (!getType().isInitialized()) {
            return false;
          }
        }
        if (hasVarargElementType()) {
          if (!getVarargElementType().isInitialized()) {
            return false;
          }
        }
        for (int i = 0; i < getAnnotationCount(); i++) {
          if (!getAnnotation(i).isInitialized()) {
            return false;
          }
        }
        if (hasAnnotationParameterDefaultValue()) {
          if (!getAnnotationParameterDefaultValue().isInitialized()) {
            return false;
          }
        }
        if (!extensionsAreInitialized()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                flags_ = input.readInt32();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 16: {
                name_ = input.readInt32();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              case 26: {
                input.readMessage(
                    getTypeFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              case 34: {
                input.readMessage(
                    getVarargElementTypeFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000010;
                break;
              } // case 34
              case 40: {
                typeId_ = input.readInt32();
                bitField0_ |= 0x00000008;
                break;
              } // case 40
              case 48: {
                varargElementTypeId_ = input.readInt32();
                bitField0_ |= 0x00000020;
                break;
              } // case 48
              case 58: {
                org.jetbrains.kotlin.metadata.ProtoBuf.Annotation m =
                    input.readMessage(
                        org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.parser(),
                        extensionRegistry);
                if (annotationBuilder_ == null) {
                  ensureAnnotationIsMutable();
                  annotation_.add(m);
                } else {
                  annotationBuilder_.addMessage(m);
                }
                break;
              } // case 58
              case 66: {
                input.readMessage(
                    getAnnotationParameterDefaultValueFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000080;
                break;
              } // case 66
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int flags_ ;
      /**
       * <pre>
       *
       * hasAnnotations
       * declaresDefault
       * isCrossinline
       * isNoinline
       * </pre>
       *
       * <code>int32 flags = 1 [default = 0];</code>
       * @return Whether the flags field is set.
       */
      @java.lang.Override
      public boolean hasFlags() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       *
       * hasAnnotations
       * declaresDefault
       * isCrossinline
       * isNoinline
       * </pre>
       *
       * <code>int32 flags = 1 [default = 0];</code>
       * @return The flags.
       */
      @java.lang.Override
      public int getFlags() {
        return flags_;
      }
      /**
       * <pre>
       *
       * hasAnnotations
       * declaresDefault
       * isCrossinline
       * isNoinline
       * </pre>
       *
       * <code>int32 flags = 1 [default = 0];</code>
       * @param value The flags to set.
       * @return This builder for chaining.
       */
      public Builder setFlags(int value) {

        flags_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *
       * hasAnnotations
       * declaresDefault
       * isCrossinline
       * isNoinline
       * </pre>
       *
       * <code>int32 flags = 1 [default = 0];</code>
       * @return This builder for chaining.
       */
      public Builder clearFlags() {
        bitField0_ = (bitField0_ & ~0x00000001);
        flags_ = 0;
        onChanged();
        return this;
      }

      private int name_ ;
      /**
       * <code>int32 name = 2 [features = { ... }</code>
       * @return Whether the name field is set.
       */
      @java.lang.Override
      public boolean hasName() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>int32 name = 2 [features = { ... }</code>
       * @return The name.
       */
      @java.lang.Override
      public int getName() {
        return name_;
      }
      /**
       * <code>int32 name = 2 [features = { ... }</code>
       * @param value The name to set.
       * @return This builder for chaining.
       */
      public Builder setName(int value) {

        name_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>int32 name = 2 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000002);
        name_ = 0;
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.metadata.ProtoBuf.Type type_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Type, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder> typeBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type type = 3;</code>
       * @return Whether the type field is set.
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type type = 3;</code>
       * @return The type.
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type getType() {
        if (typeBuilder_ == null) {
          return type_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance() : type_;
        } else {
          return typeBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type type = 3;</code>
       */
      public Builder setType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        if (typeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          type_ = value;
        } else {
          typeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type type = 3;</code>
       */
      public Builder setType(
          org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder builderForValue) {
        if (typeBuilder_ == null) {
          type_ = builderForValue.build();
        } else {
          typeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type type = 3;</code>
       */
      public Builder mergeType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        if (typeBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0) &&
            type_ != null &&
            type_ != org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance()) {
            getTypeBuilder().mergeFrom(value);
          } else {
            type_ = value;
          }
        } else {
          typeBuilder_.mergeFrom(value);
        }
        if (type_ != null) {
          bitField0_ |= 0x00000004;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type type = 3;</code>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000004);
        type_ = null;
        if (typeBuilder_ != null) {
          typeBuilder_.dispose();
          typeBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type type = 3;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder getTypeBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getTypeFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type type = 3;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder getTypeOrBuilder() {
        if (typeBuilder_ != null) {
          return typeBuilder_.getMessageOrBuilder();
        } else {
          return type_ == null ?
              org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance() : type_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type type = 3;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Type, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder> 
          getTypeFieldBuilder() {
        if (typeBuilder_ == null) {
          typeBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.metadata.ProtoBuf.Type, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder>(
                  getType(),
                  getParentForChildren(),
                  isClean());
          type_ = null;
        }
        return typeBuilder_;
      }

      private int typeId_ ;
      /**
       * <code>int32 type_id = 5 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return Whether the typeId field is set.
       */
      @java.lang.Override
      public boolean hasTypeId() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <code>int32 type_id = 5 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return The typeId.
       */
      @java.lang.Override
      public int getTypeId() {
        return typeId_;
      }
      /**
       * <code>int32 type_id = 5 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @param value The typeId to set.
       * @return This builder for chaining.
       */
      public Builder setTypeId(int value) {

        typeId_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>int32 type_id = 5 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearTypeId() {
        bitField0_ = (bitField0_ & ~0x00000008);
        typeId_ = 0;
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.metadata.ProtoBuf.Type varargElementType_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Type, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder> varargElementTypeBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type vararg_element_type = 4;</code>
       * @return Whether the varargElementType field is set.
       */
      public boolean hasVarargElementType() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type vararg_element_type = 4;</code>
       * @return The varargElementType.
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type getVarargElementType() {
        if (varargElementTypeBuilder_ == null) {
          return varargElementType_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance() : varargElementType_;
        } else {
          return varargElementTypeBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type vararg_element_type = 4;</code>
       */
      public Builder setVarargElementType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        if (varargElementTypeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          varargElementType_ = value;
        } else {
          varargElementTypeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type vararg_element_type = 4;</code>
       */
      public Builder setVarargElementType(
          org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder builderForValue) {
        if (varargElementTypeBuilder_ == null) {
          varargElementType_ = builderForValue.build();
        } else {
          varargElementTypeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type vararg_element_type = 4;</code>
       */
      public Builder mergeVarargElementType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        if (varargElementTypeBuilder_ == null) {
          if (((bitField0_ & 0x00000010) != 0) &&
            varargElementType_ != null &&
            varargElementType_ != org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance()) {
            getVarargElementTypeBuilder().mergeFrom(value);
          } else {
            varargElementType_ = value;
          }
        } else {
          varargElementTypeBuilder_.mergeFrom(value);
        }
        if (varargElementType_ != null) {
          bitField0_ |= 0x00000010;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type vararg_element_type = 4;</code>
       */
      public Builder clearVarargElementType() {
        bitField0_ = (bitField0_ & ~0x00000010);
        varargElementType_ = null;
        if (varargElementTypeBuilder_ != null) {
          varargElementTypeBuilder_.dispose();
          varargElementTypeBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type vararg_element_type = 4;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder getVarargElementTypeBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getVarargElementTypeFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type vararg_element_type = 4;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder getVarargElementTypeOrBuilder() {
        if (varargElementTypeBuilder_ != null) {
          return varargElementTypeBuilder_.getMessageOrBuilder();
        } else {
          return varargElementType_ == null ?
              org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance() : varargElementType_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type vararg_element_type = 4;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Type, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder> 
          getVarargElementTypeFieldBuilder() {
        if (varargElementTypeBuilder_ == null) {
          varargElementTypeBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.metadata.ProtoBuf.Type, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder>(
                  getVarargElementType(),
                  getParentForChildren(),
                  isClean());
          varargElementType_ = null;
        }
        return varargElementTypeBuilder_;
      }

      private int varargElementTypeId_ ;
      /**
       * <code>int32 vararg_element_type_id = 6 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return Whether the varargElementTypeId field is set.
       */
      @java.lang.Override
      public boolean hasVarargElementTypeId() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <code>int32 vararg_element_type_id = 6 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return The varargElementTypeId.
       */
      @java.lang.Override
      public int getVarargElementTypeId() {
        return varargElementTypeId_;
      }
      /**
       * <code>int32 vararg_element_type_id = 6 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @param value The varargElementTypeId to set.
       * @return This builder for chaining.
       */
      public Builder setVarargElementTypeId(int value) {

        varargElementTypeId_ = value;
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <code>int32 vararg_element_type_id = 6 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearVarargElementTypeId() {
        bitField0_ = (bitField0_ & ~0x00000020);
        varargElementTypeId_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> annotation_ =
        java.util.Collections.emptyList();
      private void ensureAnnotationIsMutable() {
        if (!((bitField0_ & 0x00000040) != 0)) {
          annotation_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation>(annotation_);
          bitField0_ |= 0x00000040;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Annotation, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> annotationBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 7;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> getAnnotationList() {
        if (annotationBuilder_ == null) {
          return java.util.Collections.unmodifiableList(annotation_);
        } else {
          return annotationBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 7;</code>
       */
      public int getAnnotationCount() {
        if (annotationBuilder_ == null) {
          return annotation_.size();
        } else {
          return annotationBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 7;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getAnnotation(int index) {
        if (annotationBuilder_ == null) {
          return annotation_.get(index);
        } else {
          return annotationBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 7;</code>
       */
      public Builder setAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        if (annotationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAnnotationIsMutable();
          annotation_.set(index, value);
          onChanged();
        } else {
          annotationBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 7;</code>
       */
      public Builder setAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        if (annotationBuilder_ == null) {
          ensureAnnotationIsMutable();
          annotation_.set(index, builderForValue.build());
          onChanged();
        } else {
          annotationBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 7;</code>
       */
      public Builder addAnnotation(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        if (annotationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAnnotationIsMutable();
          annotation_.add(value);
          onChanged();
        } else {
          annotationBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 7;</code>
       */
      public Builder addAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        if (annotationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAnnotationIsMutable();
          annotation_.add(index, value);
          onChanged();
        } else {
          annotationBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 7;</code>
       */
      public Builder addAnnotation(
          org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        if (annotationBuilder_ == null) {
          ensureAnnotationIsMutable();
          annotation_.add(builderForValue.build());
          onChanged();
        } else {
          annotationBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 7;</code>
       */
      public Builder addAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        if (annotationBuilder_ == null) {
          ensureAnnotationIsMutable();
          annotation_.add(index, builderForValue.build());
          onChanged();
        } else {
          annotationBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 7;</code>
       */
      public Builder addAllAnnotation(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> values) {
        if (annotationBuilder_ == null) {
          ensureAnnotationIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, annotation_);
          onChanged();
        } else {
          annotationBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 7;</code>
       */
      public Builder clearAnnotation() {
        if (annotationBuilder_ == null) {
          annotation_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000040);
          onChanged();
        } else {
          annotationBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 7;</code>
       */
      public Builder removeAnnotation(int index) {
        if (annotationBuilder_ == null) {
          ensureAnnotationIsMutable();
          annotation_.remove(index);
          onChanged();
        } else {
          annotationBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 7;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder getAnnotationBuilder(
          int index) {
        return getAnnotationFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 7;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder getAnnotationOrBuilder(
          int index) {
        if (annotationBuilder_ == null) {
          return annotation_.get(index);  } else {
          return annotationBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 7;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> 
           getAnnotationOrBuilderList() {
        if (annotationBuilder_ != null) {
          return annotationBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(annotation_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 7;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder addAnnotationBuilder() {
        return getAnnotationFieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 7;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder addAnnotationBuilder(
          int index) {
        return getAnnotationFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 7;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder> 
           getAnnotationBuilderList() {
        return getAnnotationFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Annotation, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> 
          getAnnotationFieldBuilder() {
        if (annotationBuilder_ == null) {
          annotationBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.ProtoBuf.Annotation, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder>(
                  annotation_,
                  ((bitField0_ & 0x00000040) != 0),
                  getParentForChildren(),
                  isClean());
          annotation_ = null;
        }
        return annotationBuilder_;
      }

      private org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value annotationParameterDefaultValue_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.ValueOrBuilder> annotationParameterDefaultValueBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.metadata.Annotation.Argument.Value annotation_parameter_default_value = 8;</code>
       * @return Whether the annotationParameterDefaultValue field is set.
       */
      public boolean hasAnnotationParameterDefaultValue() {
        return ((bitField0_ & 0x00000080) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Annotation.Argument.Value annotation_parameter_default_value = 8;</code>
       * @return The annotationParameterDefaultValue.
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value getAnnotationParameterDefaultValue() {
        if (annotationParameterDefaultValueBuilder_ == null) {
          return annotationParameterDefaultValue_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value.getDefaultInstance() : annotationParameterDefaultValue_;
        } else {
          return annotationParameterDefaultValueBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Annotation.Argument.Value annotation_parameter_default_value = 8;</code>
       */
      public Builder setAnnotationParameterDefaultValue(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value value) {
        if (annotationParameterDefaultValueBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          annotationParameterDefaultValue_ = value;
        } else {
          annotationParameterDefaultValueBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000080;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Annotation.Argument.Value annotation_parameter_default_value = 8;</code>
       */
      public Builder setAnnotationParameterDefaultValue(
          org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value.Builder builderForValue) {
        if (annotationParameterDefaultValueBuilder_ == null) {
          annotationParameterDefaultValue_ = builderForValue.build();
        } else {
          annotationParameterDefaultValueBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000080;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Annotation.Argument.Value annotation_parameter_default_value = 8;</code>
       */
      public Builder mergeAnnotationParameterDefaultValue(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value value) {
        if (annotationParameterDefaultValueBuilder_ == null) {
          if (((bitField0_ & 0x00000080) != 0) &&
            annotationParameterDefaultValue_ != null &&
            annotationParameterDefaultValue_ != org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value.getDefaultInstance()) {
            getAnnotationParameterDefaultValueBuilder().mergeFrom(value);
          } else {
            annotationParameterDefaultValue_ = value;
          }
        } else {
          annotationParameterDefaultValueBuilder_.mergeFrom(value);
        }
        if (annotationParameterDefaultValue_ != null) {
          bitField0_ |= 0x00000080;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Annotation.Argument.Value annotation_parameter_default_value = 8;</code>
       */
      public Builder clearAnnotationParameterDefaultValue() {
        bitField0_ = (bitField0_ & ~0x00000080);
        annotationParameterDefaultValue_ = null;
        if (annotationParameterDefaultValueBuilder_ != null) {
          annotationParameterDefaultValueBuilder_.dispose();
          annotationParameterDefaultValueBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Annotation.Argument.Value annotation_parameter_default_value = 8;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value.Builder getAnnotationParameterDefaultValueBuilder() {
        bitField0_ |= 0x00000080;
        onChanged();
        return getAnnotationParameterDefaultValueFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Annotation.Argument.Value annotation_parameter_default_value = 8;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.ValueOrBuilder getAnnotationParameterDefaultValueOrBuilder() {
        if (annotationParameterDefaultValueBuilder_ != null) {
          return annotationParameterDefaultValueBuilder_.getMessageOrBuilder();
        } else {
          return annotationParameterDefaultValue_ == null ?
              org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value.getDefaultInstance() : annotationParameterDefaultValue_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Annotation.Argument.Value annotation_parameter_default_value = 8;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.ValueOrBuilder> 
          getAnnotationParameterDefaultValueFieldBuilder() {
        if (annotationParameterDefaultValueBuilder_ == null) {
          annotationParameterDefaultValueBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.ValueOrBuilder>(
                  getAnnotationParameterDefaultValue(),
                  getParentForChildren(),
                  isClean());
          annotationParameterDefaultValue_ = null;
        }
        return annotationParameterDefaultValueBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.ValueParameter)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.ValueParameter)
    private static final org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter();
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<ValueParameter>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<ValueParameter>() {
      @java.lang.Override
      public ValueParameter parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<ValueParameter> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<ValueParameter> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface TypeAliasOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.TypeAlias)
      org.jetbrains.kotlin.protobuf.GeneratedMessage.
          ExtendableMessageOrBuilder<TypeAlias> {

    /**
     * <pre>
     *
     * hasAnnotations
     * Visibility
     * </pre>
     *
     * <code>int32 flags = 1 [default = 6];</code>
     * @return Whether the flags field is set.
     */
    boolean hasFlags();
    /**
     * <pre>
     *
     * hasAnnotations
     * Visibility
     * </pre>
     *
     * <code>int32 flags = 1 [default = 6];</code>
     * @return The flags.
     */
    int getFlags();

    /**
     * <code>int32 name = 2 [features = { ... }</code>
     * @return Whether the name field is set.
     */
    boolean hasName();
    /**
     * <code>int32 name = 2 [features = { ... }</code>
     * @return The name.
     */
    int getName();

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter> 
        getTypeParameterList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter getTypeParameter(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
     */
    int getTypeParameterCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameterOrBuilder> 
        getTypeParameterOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameterOrBuilder getTypeParameterOrBuilder(
        int index);

    /**
     * <code>.org.jetbrains.kotlin.metadata.Type underlying_type = 4;</code>
     * @return Whether the underlyingType field is set.
     */
    boolean hasUnderlyingType();
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type underlying_type = 4;</code>
     * @return The underlyingType.
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Type getUnderlyingType();
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type underlying_type = 4;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder getUnderlyingTypeOrBuilder();

    /**
     * <code>int32 underlying_type_id = 5 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return Whether the underlyingTypeId field is set.
     */
    boolean hasUnderlyingTypeId();
    /**
     * <code>int32 underlying_type_id = 5 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return The underlyingTypeId.
     */
    int getUnderlyingTypeId();

    /**
     * <code>.org.jetbrains.kotlin.metadata.Type expanded_type = 6;</code>
     * @return Whether the expandedType field is set.
     */
    boolean hasExpandedType();
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type expanded_type = 6;</code>
     * @return The expandedType.
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Type getExpandedType();
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type expanded_type = 6;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder getExpandedTypeOrBuilder();

    /**
     * <code>int32 expanded_type_id = 7 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return Whether the expandedTypeId field is set.
     */
    boolean hasExpandedTypeId();
    /**
     * <code>int32 expanded_type_id = 7 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return The expandedTypeId.
     */
    int getExpandedTypeId();

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> 
        getAnnotationList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getAnnotation(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
     */
    int getAnnotationCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> 
        getAnnotationOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder getAnnotationOrBuilder(
        int index);

    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     * @return A list containing the versionRequirement.
     */
    java.util.List<java.lang.Integer> getVersionRequirementList();
    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     * @return The count of versionRequirement.
     */
    int getVersionRequirementCount();
    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     * @param index The index of the element to return.
     * @return The versionRequirement at the given index.
     */
    int getVersionRequirement(int index);

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData> 
        getCompilerPluginDataList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData getCompilerPluginData(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
     */
    int getCompilerPluginDataCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginDataOrBuilder> 
        getCompilerPluginDataOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginDataOrBuilder getCompilerPluginDataOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.metadata.TypeAlias}
   */
  public static final class TypeAlias extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage.ExtendableMessage<
        TypeAlias> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.TypeAlias)
      TypeAliasOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        TypeAlias.class.getName());
    }
    // Use TypeAlias.newBuilder() to construct.
    private TypeAlias(org.jetbrains.kotlin.protobuf.GeneratedMessage.ExtendableBuilder<org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias, ?> builder) {
      super(builder);
    }
    private TypeAlias() {
      flags_ = 6;
      typeParameter_ = java.util.Collections.emptyList();
      annotation_ = java.util.Collections.emptyList();
      versionRequirement_ = emptyIntList();
      compilerPluginData_ = java.util.Collections.emptyList();
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_TypeAlias_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_TypeAlias_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias.class, org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias.Builder.class);
    }

    private int bitField0_;
    public static final int FLAGS_FIELD_NUMBER = 1;
    private int flags_ = 6;
    /**
     * <pre>
     *
     * hasAnnotations
     * Visibility
     * </pre>
     *
     * <code>int32 flags = 1 [default = 6];</code>
     * @return Whether the flags field is set.
     */
    @java.lang.Override
    public boolean hasFlags() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     *
     * hasAnnotations
     * Visibility
     * </pre>
     *
     * <code>int32 flags = 1 [default = 6];</code>
     * @return The flags.
     */
    @java.lang.Override
    public int getFlags() {
      return flags_;
    }

    public static final int NAME_FIELD_NUMBER = 2;
    private int name_ = 0;
    /**
     * <code>int32 name = 2 [features = { ... }</code>
     * @return Whether the name field is set.
     */
    @java.lang.Override
    public boolean hasName() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>int32 name = 2 [features = { ... }</code>
     * @return The name.
     */
    @java.lang.Override
    public int getName() {
      return name_;
    }

    public static final int TYPE_PARAMETER_FIELD_NUMBER = 3;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter> typeParameter_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter> getTypeParameterList() {
      return typeParameter_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameterOrBuilder> 
        getTypeParameterOrBuilderList() {
      return typeParameter_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
     */
    @java.lang.Override
    public int getTypeParameterCount() {
      return typeParameter_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter getTypeParameter(int index) {
      return typeParameter_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameterOrBuilder getTypeParameterOrBuilder(
        int index) {
      return typeParameter_.get(index);
    }

    public static final int UNDERLYING_TYPE_FIELD_NUMBER = 4;
    private org.jetbrains.kotlin.metadata.ProtoBuf.Type underlyingType_;
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type underlying_type = 4;</code>
     * @return Whether the underlyingType field is set.
     */
    @java.lang.Override
    public boolean hasUnderlyingType() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type underlying_type = 4;</code>
     * @return The underlyingType.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Type getUnderlyingType() {
      return underlyingType_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance() : underlyingType_;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type underlying_type = 4;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder getUnderlyingTypeOrBuilder() {
      return underlyingType_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance() : underlyingType_;
    }

    public static final int UNDERLYING_TYPE_ID_FIELD_NUMBER = 5;
    private int underlyingTypeId_ = 0;
    /**
     * <code>int32 underlying_type_id = 5 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return Whether the underlyingTypeId field is set.
     */
    @java.lang.Override
    public boolean hasUnderlyingTypeId() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <code>int32 underlying_type_id = 5 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return The underlyingTypeId.
     */
    @java.lang.Override
    public int getUnderlyingTypeId() {
      return underlyingTypeId_;
    }

    public static final int EXPANDED_TYPE_FIELD_NUMBER = 6;
    private org.jetbrains.kotlin.metadata.ProtoBuf.Type expandedType_;
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type expanded_type = 6;</code>
     * @return Whether the expandedType field is set.
     */
    @java.lang.Override
    public boolean hasExpandedType() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type expanded_type = 6;</code>
     * @return The expandedType.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Type getExpandedType() {
      return expandedType_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance() : expandedType_;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type expanded_type = 6;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder getExpandedTypeOrBuilder() {
      return expandedType_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance() : expandedType_;
    }

    public static final int EXPANDED_TYPE_ID_FIELD_NUMBER = 7;
    private int expandedTypeId_ = 0;
    /**
     * <code>int32 expanded_type_id = 7 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return Whether the expandedTypeId field is set.
     */
    @java.lang.Override
    public boolean hasExpandedTypeId() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <code>int32 expanded_type_id = 7 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return The expandedTypeId.
     */
    @java.lang.Override
    public int getExpandedTypeId() {
      return expandedTypeId_;
    }

    public static final int ANNOTATION_FIELD_NUMBER = 8;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> annotation_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> getAnnotationList() {
      return annotation_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> 
        getAnnotationOrBuilderList() {
      return annotation_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
     */
    @java.lang.Override
    public int getAnnotationCount() {
      return annotation_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getAnnotation(int index) {
      return annotation_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder getAnnotationOrBuilder(
        int index) {
      return annotation_.get(index);
    }

    public static final int VERSION_REQUIREMENT_FIELD_NUMBER = 31;
    @SuppressWarnings("serial")
    private org.jetbrains.kotlin.protobuf.Internal.IntList versionRequirement_ =
        emptyIntList();
    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     * @return A list containing the versionRequirement.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getVersionRequirementList() {
      return versionRequirement_;
    }
    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     * @return The count of versionRequirement.
     */
    public int getVersionRequirementCount() {
      return versionRequirement_.size();
    }
    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     * @param index The index of the element to return.
     * @return The versionRequirement at the given index.
     */
    public int getVersionRequirement(int index) {
      return versionRequirement_.getInt(index);
    }

    public static final int COMPILER_PLUGIN_DATA_FIELD_NUMBER = 32;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData> compilerPluginData_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData> getCompilerPluginDataList() {
      return compilerPluginData_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginDataOrBuilder> 
        getCompilerPluginDataOrBuilderList() {
      return compilerPluginData_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
     */
    @java.lang.Override
    public int getCompilerPluginDataCount() {
      return compilerPluginData_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData getCompilerPluginData(int index) {
      return compilerPluginData_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginDataOrBuilder getCompilerPluginDataOrBuilder(
        int index) {
      return compilerPluginData_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasName()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getTypeParameterCount(); i++) {
        if (!getTypeParameter(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasUnderlyingType()) {
        if (!getUnderlyingType().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasExpandedType()) {
        if (!getExpandedType().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getAnnotationCount(); i++) {
        if (!getAnnotation(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getCompilerPluginDataCount(); i++) {
        if (!getCompilerPluginData(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (!extensionsAreInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      org.jetbrains.kotlin.protobuf.GeneratedMessage
        .ExtendableMessage.ExtensionSerializer
          extensionWriter = newExtensionSerializer();
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeInt32(1, flags_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeInt32(2, name_);
      }
      for (int i = 0; i < typeParameter_.size(); i++) {
        output.writeMessage(3, typeParameter_.get(i));
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeMessage(4, getUnderlyingType());
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeInt32(5, underlyingTypeId_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        output.writeMessage(6, getExpandedType());
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        output.writeInt32(7, expandedTypeId_);
      }
      for (int i = 0; i < annotation_.size(); i++) {
        output.writeMessage(8, annotation_.get(i));
      }
      for (int i = 0; i < versionRequirement_.size(); i++) {
        output.writeInt32(31, versionRequirement_.getInt(i));
      }
      for (int i = 0; i < compilerPluginData_.size(); i++) {
        output.writeMessage(32, compilerPluginData_.get(i));
      }
      extensionWriter.writeUntil(200, output);
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(1, flags_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(2, name_);
      }
      for (int i = 0; i < typeParameter_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(3, typeParameter_.get(i));
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(4, getUnderlyingType());
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(5, underlyingTypeId_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(6, getExpandedType());
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(7, expandedTypeId_);
      }
      for (int i = 0; i < annotation_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(8, annotation_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < versionRequirement_.size(); i++) {
          dataSize += org.jetbrains.kotlin.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(versionRequirement_.getInt(i));
        }
        size += dataSize;
        size += 2 * getVersionRequirementList().size();
      }
      for (int i = 0; i < compilerPluginData_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(32, compilerPluginData_.get(i));
      }
      size += extensionsSerializedSize();
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias other = (org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias) obj;

      if (hasFlags() != other.hasFlags()) return false;
      if (hasFlags()) {
        if (getFlags()
            != other.getFlags()) return false;
      }
      if (hasName() != other.hasName()) return false;
      if (hasName()) {
        if (getName()
            != other.getName()) return false;
      }
      if (!getTypeParameterList()
          .equals(other.getTypeParameterList())) return false;
      if (hasUnderlyingType() != other.hasUnderlyingType()) return false;
      if (hasUnderlyingType()) {
        if (!getUnderlyingType()
            .equals(other.getUnderlyingType())) return false;
      }
      if (hasUnderlyingTypeId() != other.hasUnderlyingTypeId()) return false;
      if (hasUnderlyingTypeId()) {
        if (getUnderlyingTypeId()
            != other.getUnderlyingTypeId()) return false;
      }
      if (hasExpandedType() != other.hasExpandedType()) return false;
      if (hasExpandedType()) {
        if (!getExpandedType()
            .equals(other.getExpandedType())) return false;
      }
      if (hasExpandedTypeId() != other.hasExpandedTypeId()) return false;
      if (hasExpandedTypeId()) {
        if (getExpandedTypeId()
            != other.getExpandedTypeId()) return false;
      }
      if (!getAnnotationList()
          .equals(other.getAnnotationList())) return false;
      if (!getVersionRequirementList()
          .equals(other.getVersionRequirementList())) return false;
      if (!getCompilerPluginDataList()
          .equals(other.getCompilerPluginDataList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      if (!getExtensionFields().equals(other.getExtensionFields()))
        return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasFlags()) {
        hash = (37 * hash) + FLAGS_FIELD_NUMBER;
        hash = (53 * hash) + getFlags();
      }
      if (hasName()) {
        hash = (37 * hash) + NAME_FIELD_NUMBER;
        hash = (53 * hash) + getName();
      }
      if (getTypeParameterCount() > 0) {
        hash = (37 * hash) + TYPE_PARAMETER_FIELD_NUMBER;
        hash = (53 * hash) + getTypeParameterList().hashCode();
      }
      if (hasUnderlyingType()) {
        hash = (37 * hash) + UNDERLYING_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + getUnderlyingType().hashCode();
      }
      if (hasUnderlyingTypeId()) {
        hash = (37 * hash) + UNDERLYING_TYPE_ID_FIELD_NUMBER;
        hash = (53 * hash) + getUnderlyingTypeId();
      }
      if (hasExpandedType()) {
        hash = (37 * hash) + EXPANDED_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + getExpandedType().hashCode();
      }
      if (hasExpandedTypeId()) {
        hash = (37 * hash) + EXPANDED_TYPE_ID_FIELD_NUMBER;
        hash = (53 * hash) + getExpandedTypeId();
      }
      if (getAnnotationCount() > 0) {
        hash = (37 * hash) + ANNOTATION_FIELD_NUMBER;
        hash = (53 * hash) + getAnnotationList().hashCode();
      }
      if (getVersionRequirementCount() > 0) {
        hash = (37 * hash) + VERSION_REQUIREMENT_FIELD_NUMBER;
        hash = (53 * hash) + getVersionRequirementList().hashCode();
      }
      if (getCompilerPluginDataCount() > 0) {
        hash = (37 * hash) + COMPILER_PLUGIN_DATA_FIELD_NUMBER;
        hash = (53 * hash) + getCompilerPluginDataList().hashCode();
      }
      hash = hashFields(hash, getExtensionFields());
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.TypeAlias}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.ExtendableBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.TypeAlias)
        org.jetbrains.kotlin.metadata.ProtoBuf.TypeAliasOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_TypeAlias_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_TypeAlias_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias.class, org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getTypeParameterFieldBuilder();
          getUnderlyingTypeFieldBuilder();
          getExpandedTypeFieldBuilder();
          getAnnotationFieldBuilder();
          getCompilerPluginDataFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        flags_ = 6;
        name_ = 0;
        if (typeParameterBuilder_ == null) {
          typeParameter_ = java.util.Collections.emptyList();
        } else {
          typeParameter_ = null;
          typeParameterBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        underlyingType_ = null;
        if (underlyingTypeBuilder_ != null) {
          underlyingTypeBuilder_.dispose();
          underlyingTypeBuilder_ = null;
        }
        underlyingTypeId_ = 0;
        expandedType_ = null;
        if (expandedTypeBuilder_ != null) {
          expandedTypeBuilder_.dispose();
          expandedTypeBuilder_ = null;
        }
        expandedTypeId_ = 0;
        if (annotationBuilder_ == null) {
          annotation_ = java.util.Collections.emptyList();
        } else {
          annotation_ = null;
          annotationBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000080);
        versionRequirement_ = emptyIntList();
        if (compilerPluginDataBuilder_ == null) {
          compilerPluginData_ = java.util.Collections.emptyList();
        } else {
          compilerPluginData_ = null;
          compilerPluginDataBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000200);
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_TypeAlias_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias getDefaultInstanceForType() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias build() {
        org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias buildPartial() {
        org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias result = new org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias result) {
        if (typeParameterBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0)) {
            typeParameter_ = java.util.Collections.unmodifiableList(typeParameter_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.typeParameter_ = typeParameter_;
        } else {
          result.typeParameter_ = typeParameterBuilder_.build();
        }
        if (annotationBuilder_ == null) {
          if (((bitField0_ & 0x00000080) != 0)) {
            annotation_ = java.util.Collections.unmodifiableList(annotation_);
            bitField0_ = (bitField0_ & ~0x00000080);
          }
          result.annotation_ = annotation_;
        } else {
          result.annotation_ = annotationBuilder_.build();
        }
        if (compilerPluginDataBuilder_ == null) {
          if (((bitField0_ & 0x00000200) != 0)) {
            compilerPluginData_ = java.util.Collections.unmodifiableList(compilerPluginData_);
            bitField0_ = (bitField0_ & ~0x00000200);
          }
          result.compilerPluginData_ = compilerPluginData_;
        } else {
          result.compilerPluginData_ = compilerPluginDataBuilder_.build();
        }
      }

      private void buildPartial0(org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.flags_ = flags_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.name_ = name_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.underlyingType_ = underlyingTypeBuilder_ == null
              ? underlyingType_
              : underlyingTypeBuilder_.build();
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.underlyingTypeId_ = underlyingTypeId_;
          to_bitField0_ |= 0x00000008;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.expandedType_ = expandedTypeBuilder_ == null
              ? expandedType_
              : expandedTypeBuilder_.build();
          to_bitField0_ |= 0x00000010;
        }
        if (((from_bitField0_ & 0x00000040) != 0)) {
          result.expandedTypeId_ = expandedTypeId_;
          to_bitField0_ |= 0x00000020;
        }
        if (((from_bitField0_ & 0x00000100) != 0)) {
          versionRequirement_.makeImmutable();
          result.versionRequirement_ = versionRequirement_;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias) {
          return mergeFrom((org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias other) {
        if (other == org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias.getDefaultInstance()) return this;
        if (other.hasFlags()) {
          setFlags(other.getFlags());
        }
        if (other.hasName()) {
          setName(other.getName());
        }
        if (typeParameterBuilder_ == null) {
          if (!other.typeParameter_.isEmpty()) {
            if (typeParameter_.isEmpty()) {
              typeParameter_ = other.typeParameter_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureTypeParameterIsMutable();
              typeParameter_.addAll(other.typeParameter_);
            }
            onChanged();
          }
        } else {
          if (!other.typeParameter_.isEmpty()) {
            if (typeParameterBuilder_.isEmpty()) {
              typeParameterBuilder_.dispose();
              typeParameterBuilder_ = null;
              typeParameter_ = other.typeParameter_;
              bitField0_ = (bitField0_ & ~0x00000004);
              typeParameterBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getTypeParameterFieldBuilder() : null;
            } else {
              typeParameterBuilder_.addAllMessages(other.typeParameter_);
            }
          }
        }
        if (other.hasUnderlyingType()) {
          mergeUnderlyingType(other.getUnderlyingType());
        }
        if (other.hasUnderlyingTypeId()) {
          setUnderlyingTypeId(other.getUnderlyingTypeId());
        }
        if (other.hasExpandedType()) {
          mergeExpandedType(other.getExpandedType());
        }
        if (other.hasExpandedTypeId()) {
          setExpandedTypeId(other.getExpandedTypeId());
        }
        if (annotationBuilder_ == null) {
          if (!other.annotation_.isEmpty()) {
            if (annotation_.isEmpty()) {
              annotation_ = other.annotation_;
              bitField0_ = (bitField0_ & ~0x00000080);
            } else {
              ensureAnnotationIsMutable();
              annotation_.addAll(other.annotation_);
            }
            onChanged();
          }
        } else {
          if (!other.annotation_.isEmpty()) {
            if (annotationBuilder_.isEmpty()) {
              annotationBuilder_.dispose();
              annotationBuilder_ = null;
              annotation_ = other.annotation_;
              bitField0_ = (bitField0_ & ~0x00000080);
              annotationBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getAnnotationFieldBuilder() : null;
            } else {
              annotationBuilder_.addAllMessages(other.annotation_);
            }
          }
        }
        if (!other.versionRequirement_.isEmpty()) {
          if (versionRequirement_.isEmpty()) {
            versionRequirement_ = other.versionRequirement_;
            versionRequirement_.makeImmutable();
            bitField0_ |= 0x00000100;
          } else {
            ensureVersionRequirementIsMutable();
            versionRequirement_.addAll(other.versionRequirement_);
          }
          onChanged();
        }
        if (compilerPluginDataBuilder_ == null) {
          if (!other.compilerPluginData_.isEmpty()) {
            if (compilerPluginData_.isEmpty()) {
              compilerPluginData_ = other.compilerPluginData_;
              bitField0_ = (bitField0_ & ~0x00000200);
            } else {
              ensureCompilerPluginDataIsMutable();
              compilerPluginData_.addAll(other.compilerPluginData_);
            }
            onChanged();
          }
        } else {
          if (!other.compilerPluginData_.isEmpty()) {
            if (compilerPluginDataBuilder_.isEmpty()) {
              compilerPluginDataBuilder_.dispose();
              compilerPluginDataBuilder_ = null;
              compilerPluginData_ = other.compilerPluginData_;
              bitField0_ = (bitField0_ & ~0x00000200);
              compilerPluginDataBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCompilerPluginDataFieldBuilder() : null;
            } else {
              compilerPluginDataBuilder_.addAllMessages(other.compilerPluginData_);
            }
          }
        }
        this.mergeExtensionFields(other);
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasName()) {
          return false;
        }
        for (int i = 0; i < getTypeParameterCount(); i++) {
          if (!getTypeParameter(i).isInitialized()) {
            return false;
          }
        }
        if (hasUnderlyingType()) {
          if (!getUnderlyingType().isInitialized()) {
            return false;
          }
        }
        if (hasExpandedType()) {
          if (!getExpandedType().isInitialized()) {
            return false;
          }
        }
        for (int i = 0; i < getAnnotationCount(); i++) {
          if (!getAnnotation(i).isInitialized()) {
            return false;
          }
        }
        for (int i = 0; i < getCompilerPluginDataCount(); i++) {
          if (!getCompilerPluginData(i).isInitialized()) {
            return false;
          }
        }
        if (!extensionsAreInitialized()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                flags_ = input.readInt32();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 16: {
                name_ = input.readInt32();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              case 26: {
                org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter m =
                    input.readMessage(
                        org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.parser(),
                        extensionRegistry);
                if (typeParameterBuilder_ == null) {
                  ensureTypeParameterIsMutable();
                  typeParameter_.add(m);
                } else {
                  typeParameterBuilder_.addMessage(m);
                }
                break;
              } // case 26
              case 34: {
                input.readMessage(
                    getUnderlyingTypeFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000008;
                break;
              } // case 34
              case 40: {
                underlyingTypeId_ = input.readInt32();
                bitField0_ |= 0x00000010;
                break;
              } // case 40
              case 50: {
                input.readMessage(
                    getExpandedTypeFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000020;
                break;
              } // case 50
              case 56: {
                expandedTypeId_ = input.readInt32();
                bitField0_ |= 0x00000040;
                break;
              } // case 56
              case 66: {
                org.jetbrains.kotlin.metadata.ProtoBuf.Annotation m =
                    input.readMessage(
                        org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.parser(),
                        extensionRegistry);
                if (annotationBuilder_ == null) {
                  ensureAnnotationIsMutable();
                  annotation_.add(m);
                } else {
                  annotationBuilder_.addMessage(m);
                }
                break;
              } // case 66
              case 248: {
                int v = input.readInt32();
                ensureVersionRequirementIsMutable();
                versionRequirement_.addInt(v);
                break;
              } // case 248
              case 250: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureVersionRequirementIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  versionRequirement_.addInt(input.readInt32());
                }
                input.popLimit(limit);
                break;
              } // case 250
              case 258: {
                org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData m =
                    input.readMessage(
                        org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.parser(),
                        extensionRegistry);
                if (compilerPluginDataBuilder_ == null) {
                  ensureCompilerPluginDataIsMutable();
                  compilerPluginData_.add(m);
                } else {
                  compilerPluginDataBuilder_.addMessage(m);
                }
                break;
              } // case 258
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int flags_ = 6;
      /**
       * <pre>
       *
       * hasAnnotations
       * Visibility
       * </pre>
       *
       * <code>int32 flags = 1 [default = 6];</code>
       * @return Whether the flags field is set.
       */
      @java.lang.Override
      public boolean hasFlags() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       *
       * hasAnnotations
       * Visibility
       * </pre>
       *
       * <code>int32 flags = 1 [default = 6];</code>
       * @return The flags.
       */
      @java.lang.Override
      public int getFlags() {
        return flags_;
      }
      /**
       * <pre>
       *
       * hasAnnotations
       * Visibility
       * </pre>
       *
       * <code>int32 flags = 1 [default = 6];</code>
       * @param value The flags to set.
       * @return This builder for chaining.
       */
      public Builder setFlags(int value) {

        flags_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *
       * hasAnnotations
       * Visibility
       * </pre>
       *
       * <code>int32 flags = 1 [default = 6];</code>
       * @return This builder for chaining.
       */
      public Builder clearFlags() {
        bitField0_ = (bitField0_ & ~0x00000001);
        flags_ = 6;
        onChanged();
        return this;
      }

      private int name_ ;
      /**
       * <code>int32 name = 2 [features = { ... }</code>
       * @return Whether the name field is set.
       */
      @java.lang.Override
      public boolean hasName() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>int32 name = 2 [features = { ... }</code>
       * @return The name.
       */
      @java.lang.Override
      public int getName() {
        return name_;
      }
      /**
       * <code>int32 name = 2 [features = { ... }</code>
       * @param value The name to set.
       * @return This builder for chaining.
       */
      public Builder setName(int value) {

        name_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>int32 name = 2 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000002);
        name_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter> typeParameter_ =
        java.util.Collections.emptyList();
      private void ensureTypeParameterIsMutable() {
        if (!((bitField0_ & 0x00000004) != 0)) {
          typeParameter_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter>(typeParameter_);
          bitField0_ |= 0x00000004;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter, org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameterOrBuilder> typeParameterBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter> getTypeParameterList() {
        if (typeParameterBuilder_ == null) {
          return java.util.Collections.unmodifiableList(typeParameter_);
        } else {
          return typeParameterBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
       */
      public int getTypeParameterCount() {
        if (typeParameterBuilder_ == null) {
          return typeParameter_.size();
        } else {
          return typeParameterBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter getTypeParameter(int index) {
        if (typeParameterBuilder_ == null) {
          return typeParameter_.get(index);
        } else {
          return typeParameterBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
       */
      public Builder setTypeParameter(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter value) {
        if (typeParameterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTypeParameterIsMutable();
          typeParameter_.set(index, value);
          onChanged();
        } else {
          typeParameterBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
       */
      public Builder setTypeParameter(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.Builder builderForValue) {
        if (typeParameterBuilder_ == null) {
          ensureTypeParameterIsMutable();
          typeParameter_.set(index, builderForValue.build());
          onChanged();
        } else {
          typeParameterBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
       */
      public Builder addTypeParameter(org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter value) {
        if (typeParameterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTypeParameterIsMutable();
          typeParameter_.add(value);
          onChanged();
        } else {
          typeParameterBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
       */
      public Builder addTypeParameter(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter value) {
        if (typeParameterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTypeParameterIsMutable();
          typeParameter_.add(index, value);
          onChanged();
        } else {
          typeParameterBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
       */
      public Builder addTypeParameter(
          org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.Builder builderForValue) {
        if (typeParameterBuilder_ == null) {
          ensureTypeParameterIsMutable();
          typeParameter_.add(builderForValue.build());
          onChanged();
        } else {
          typeParameterBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
       */
      public Builder addTypeParameter(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.Builder builderForValue) {
        if (typeParameterBuilder_ == null) {
          ensureTypeParameterIsMutable();
          typeParameter_.add(index, builderForValue.build());
          onChanged();
        } else {
          typeParameterBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
       */
      public Builder addAllTypeParameter(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter> values) {
        if (typeParameterBuilder_ == null) {
          ensureTypeParameterIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, typeParameter_);
          onChanged();
        } else {
          typeParameterBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
       */
      public Builder clearTypeParameter() {
        if (typeParameterBuilder_ == null) {
          typeParameter_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          typeParameterBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
       */
      public Builder removeTypeParameter(int index) {
        if (typeParameterBuilder_ == null) {
          ensureTypeParameterIsMutable();
          typeParameter_.remove(index);
          onChanged();
        } else {
          typeParameterBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.Builder getTypeParameterBuilder(
          int index) {
        return getTypeParameterFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameterOrBuilder getTypeParameterOrBuilder(
          int index) {
        if (typeParameterBuilder_ == null) {
          return typeParameter_.get(index);  } else {
          return typeParameterBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameterOrBuilder> 
           getTypeParameterOrBuilderList() {
        if (typeParameterBuilder_ != null) {
          return typeParameterBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(typeParameter_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.Builder addTypeParameterBuilder() {
        return getTypeParameterFieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.Builder addTypeParameterBuilder(
          int index) {
        return getTypeParameterFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.Builder> 
           getTypeParameterBuilderList() {
        return getTypeParameterFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter, org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameterOrBuilder> 
          getTypeParameterFieldBuilder() {
        if (typeParameterBuilder_ == null) {
          typeParameterBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter, org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameterOrBuilder>(
                  typeParameter_,
                  ((bitField0_ & 0x00000004) != 0),
                  getParentForChildren(),
                  isClean());
          typeParameter_ = null;
        }
        return typeParameterBuilder_;
      }

      private org.jetbrains.kotlin.metadata.ProtoBuf.Type underlyingType_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Type, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder> underlyingTypeBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type underlying_type = 4;</code>
       * @return Whether the underlyingType field is set.
       */
      public boolean hasUnderlyingType() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type underlying_type = 4;</code>
       * @return The underlyingType.
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type getUnderlyingType() {
        if (underlyingTypeBuilder_ == null) {
          return underlyingType_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance() : underlyingType_;
        } else {
          return underlyingTypeBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type underlying_type = 4;</code>
       */
      public Builder setUnderlyingType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        if (underlyingTypeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          underlyingType_ = value;
        } else {
          underlyingTypeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type underlying_type = 4;</code>
       */
      public Builder setUnderlyingType(
          org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder builderForValue) {
        if (underlyingTypeBuilder_ == null) {
          underlyingType_ = builderForValue.build();
        } else {
          underlyingTypeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type underlying_type = 4;</code>
       */
      public Builder mergeUnderlyingType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        if (underlyingTypeBuilder_ == null) {
          if (((bitField0_ & 0x00000008) != 0) &&
            underlyingType_ != null &&
            underlyingType_ != org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance()) {
            getUnderlyingTypeBuilder().mergeFrom(value);
          } else {
            underlyingType_ = value;
          }
        } else {
          underlyingTypeBuilder_.mergeFrom(value);
        }
        if (underlyingType_ != null) {
          bitField0_ |= 0x00000008;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type underlying_type = 4;</code>
       */
      public Builder clearUnderlyingType() {
        bitField0_ = (bitField0_ & ~0x00000008);
        underlyingType_ = null;
        if (underlyingTypeBuilder_ != null) {
          underlyingTypeBuilder_.dispose();
          underlyingTypeBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type underlying_type = 4;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder getUnderlyingTypeBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getUnderlyingTypeFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type underlying_type = 4;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder getUnderlyingTypeOrBuilder() {
        if (underlyingTypeBuilder_ != null) {
          return underlyingTypeBuilder_.getMessageOrBuilder();
        } else {
          return underlyingType_ == null ?
              org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance() : underlyingType_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type underlying_type = 4;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Type, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder> 
          getUnderlyingTypeFieldBuilder() {
        if (underlyingTypeBuilder_ == null) {
          underlyingTypeBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.metadata.ProtoBuf.Type, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder>(
                  getUnderlyingType(),
                  getParentForChildren(),
                  isClean());
          underlyingType_ = null;
        }
        return underlyingTypeBuilder_;
      }

      private int underlyingTypeId_ ;
      /**
       * <code>int32 underlying_type_id = 5 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return Whether the underlyingTypeId field is set.
       */
      @java.lang.Override
      public boolean hasUnderlyingTypeId() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <code>int32 underlying_type_id = 5 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return The underlyingTypeId.
       */
      @java.lang.Override
      public int getUnderlyingTypeId() {
        return underlyingTypeId_;
      }
      /**
       * <code>int32 underlying_type_id = 5 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @param value The underlyingTypeId to set.
       * @return This builder for chaining.
       */
      public Builder setUnderlyingTypeId(int value) {

        underlyingTypeId_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <code>int32 underlying_type_id = 5 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearUnderlyingTypeId() {
        bitField0_ = (bitField0_ & ~0x00000010);
        underlyingTypeId_ = 0;
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.metadata.ProtoBuf.Type expandedType_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Type, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder> expandedTypeBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type expanded_type = 6;</code>
       * @return Whether the expandedType field is set.
       */
      public boolean hasExpandedType() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type expanded_type = 6;</code>
       * @return The expandedType.
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type getExpandedType() {
        if (expandedTypeBuilder_ == null) {
          return expandedType_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance() : expandedType_;
        } else {
          return expandedTypeBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type expanded_type = 6;</code>
       */
      public Builder setExpandedType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        if (expandedTypeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          expandedType_ = value;
        } else {
          expandedTypeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type expanded_type = 6;</code>
       */
      public Builder setExpandedType(
          org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder builderForValue) {
        if (expandedTypeBuilder_ == null) {
          expandedType_ = builderForValue.build();
        } else {
          expandedTypeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type expanded_type = 6;</code>
       */
      public Builder mergeExpandedType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        if (expandedTypeBuilder_ == null) {
          if (((bitField0_ & 0x00000020) != 0) &&
            expandedType_ != null &&
            expandedType_ != org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance()) {
            getExpandedTypeBuilder().mergeFrom(value);
          } else {
            expandedType_ = value;
          }
        } else {
          expandedTypeBuilder_.mergeFrom(value);
        }
        if (expandedType_ != null) {
          bitField0_ |= 0x00000020;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type expanded_type = 6;</code>
       */
      public Builder clearExpandedType() {
        bitField0_ = (bitField0_ & ~0x00000020);
        expandedType_ = null;
        if (expandedTypeBuilder_ != null) {
          expandedTypeBuilder_.dispose();
          expandedTypeBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type expanded_type = 6;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder getExpandedTypeBuilder() {
        bitField0_ |= 0x00000020;
        onChanged();
        return getExpandedTypeFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type expanded_type = 6;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder getExpandedTypeOrBuilder() {
        if (expandedTypeBuilder_ != null) {
          return expandedTypeBuilder_.getMessageOrBuilder();
        } else {
          return expandedType_ == null ?
              org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance() : expandedType_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type expanded_type = 6;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Type, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder> 
          getExpandedTypeFieldBuilder() {
        if (expandedTypeBuilder_ == null) {
          expandedTypeBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.metadata.ProtoBuf.Type, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder>(
                  getExpandedType(),
                  getParentForChildren(),
                  isClean());
          expandedType_ = null;
        }
        return expandedTypeBuilder_;
      }

      private int expandedTypeId_ ;
      /**
       * <code>int32 expanded_type_id = 7 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return Whether the expandedTypeId field is set.
       */
      @java.lang.Override
      public boolean hasExpandedTypeId() {
        return ((bitField0_ & 0x00000040) != 0);
      }
      /**
       * <code>int32 expanded_type_id = 7 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return The expandedTypeId.
       */
      @java.lang.Override
      public int getExpandedTypeId() {
        return expandedTypeId_;
      }
      /**
       * <code>int32 expanded_type_id = 7 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @param value The expandedTypeId to set.
       * @return This builder for chaining.
       */
      public Builder setExpandedTypeId(int value) {

        expandedTypeId_ = value;
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <code>int32 expanded_type_id = 7 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearExpandedTypeId() {
        bitField0_ = (bitField0_ & ~0x00000040);
        expandedTypeId_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> annotation_ =
        java.util.Collections.emptyList();
      private void ensureAnnotationIsMutable() {
        if (!((bitField0_ & 0x00000080) != 0)) {
          annotation_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation>(annotation_);
          bitField0_ |= 0x00000080;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Annotation, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> annotationBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> getAnnotationList() {
        if (annotationBuilder_ == null) {
          return java.util.Collections.unmodifiableList(annotation_);
        } else {
          return annotationBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
       */
      public int getAnnotationCount() {
        if (annotationBuilder_ == null) {
          return annotation_.size();
        } else {
          return annotationBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getAnnotation(int index) {
        if (annotationBuilder_ == null) {
          return annotation_.get(index);
        } else {
          return annotationBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
       */
      public Builder setAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        if (annotationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAnnotationIsMutable();
          annotation_.set(index, value);
          onChanged();
        } else {
          annotationBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
       */
      public Builder setAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        if (annotationBuilder_ == null) {
          ensureAnnotationIsMutable();
          annotation_.set(index, builderForValue.build());
          onChanged();
        } else {
          annotationBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
       */
      public Builder addAnnotation(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        if (annotationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAnnotationIsMutable();
          annotation_.add(value);
          onChanged();
        } else {
          annotationBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
       */
      public Builder addAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        if (annotationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAnnotationIsMutable();
          annotation_.add(index, value);
          onChanged();
        } else {
          annotationBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
       */
      public Builder addAnnotation(
          org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        if (annotationBuilder_ == null) {
          ensureAnnotationIsMutable();
          annotation_.add(builderForValue.build());
          onChanged();
        } else {
          annotationBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
       */
      public Builder addAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        if (annotationBuilder_ == null) {
          ensureAnnotationIsMutable();
          annotation_.add(index, builderForValue.build());
          onChanged();
        } else {
          annotationBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
       */
      public Builder addAllAnnotation(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> values) {
        if (annotationBuilder_ == null) {
          ensureAnnotationIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, annotation_);
          onChanged();
        } else {
          annotationBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
       */
      public Builder clearAnnotation() {
        if (annotationBuilder_ == null) {
          annotation_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000080);
          onChanged();
        } else {
          annotationBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
       */
      public Builder removeAnnotation(int index) {
        if (annotationBuilder_ == null) {
          ensureAnnotationIsMutable();
          annotation_.remove(index);
          onChanged();
        } else {
          annotationBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder getAnnotationBuilder(
          int index) {
        return getAnnotationFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder getAnnotationOrBuilder(
          int index) {
        if (annotationBuilder_ == null) {
          return annotation_.get(index);  } else {
          return annotationBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> 
           getAnnotationOrBuilderList() {
        if (annotationBuilder_ != null) {
          return annotationBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(annotation_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder addAnnotationBuilder() {
        return getAnnotationFieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder addAnnotationBuilder(
          int index) {
        return getAnnotationFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder> 
           getAnnotationBuilderList() {
        return getAnnotationFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Annotation, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> 
          getAnnotationFieldBuilder() {
        if (annotationBuilder_ == null) {
          annotationBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.ProtoBuf.Annotation, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder>(
                  annotation_,
                  ((bitField0_ & 0x00000080) != 0),
                  getParentForChildren(),
                  isClean());
          annotation_ = null;
        }
        return annotationBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.Internal.IntList versionRequirement_ = emptyIntList();
      private void ensureVersionRequirementIsMutable() {
        if (!versionRequirement_.isModifiable()) {
          versionRequirement_ = makeMutableCopy(versionRequirement_);
        }
        bitField0_ |= 0x00000100;
      }
      /**
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       *
       * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
       * @return A list containing the versionRequirement.
       */
      public java.util.List<java.lang.Integer>
          getVersionRequirementList() {
        versionRequirement_.makeImmutable();
        return versionRequirement_;
      }
      /**
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       *
       * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
       * @return The count of versionRequirement.
       */
      public int getVersionRequirementCount() {
        return versionRequirement_.size();
      }
      /**
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       *
       * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
       * @param index The index of the element to return.
       * @return The versionRequirement at the given index.
       */
      public int getVersionRequirement(int index) {
        return versionRequirement_.getInt(index);
      }
      /**
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       *
       * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
       * @param index The index to set the value at.
       * @param value The versionRequirement to set.
       * @return This builder for chaining.
       */
      public Builder setVersionRequirement(
          int index, int value) {

        ensureVersionRequirementIsMutable();
        versionRequirement_.setInt(index, value);
        bitField0_ |= 0x00000100;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       *
       * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
       * @param value The versionRequirement to add.
       * @return This builder for chaining.
       */
      public Builder addVersionRequirement(int value) {

        ensureVersionRequirementIsMutable();
        versionRequirement_.addInt(value);
        bitField0_ |= 0x00000100;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       *
       * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
       * @param values The versionRequirement to add.
       * @return This builder for chaining.
       */
      public Builder addAllVersionRequirement(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureVersionRequirementIsMutable();
        org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
            values, versionRequirement_);
        bitField0_ |= 0x00000100;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       *
       * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearVersionRequirement() {
        versionRequirement_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000100);
        onChanged();
        return this;
      }

      private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData> compilerPluginData_ =
        java.util.Collections.emptyList();
      private void ensureCompilerPluginDataIsMutable() {
        if (!((bitField0_ & 0x00000200) != 0)) {
          compilerPluginData_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData>(compilerPluginData_);
          bitField0_ |= 0x00000200;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginDataOrBuilder> compilerPluginDataBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData> getCompilerPluginDataList() {
        if (compilerPluginDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(compilerPluginData_);
        } else {
          return compilerPluginDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public int getCompilerPluginDataCount() {
        if (compilerPluginDataBuilder_ == null) {
          return compilerPluginData_.size();
        } else {
          return compilerPluginDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData getCompilerPluginData(int index) {
        if (compilerPluginDataBuilder_ == null) {
          return compilerPluginData_.get(index);
        } else {
          return compilerPluginDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public Builder setCompilerPluginData(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData value) {
        if (compilerPluginDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCompilerPluginDataIsMutable();
          compilerPluginData_.set(index, value);
          onChanged();
        } else {
          compilerPluginDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public Builder setCompilerPluginData(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.Builder builderForValue) {
        if (compilerPluginDataBuilder_ == null) {
          ensureCompilerPluginDataIsMutable();
          compilerPluginData_.set(index, builderForValue.build());
          onChanged();
        } else {
          compilerPluginDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public Builder addCompilerPluginData(org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData value) {
        if (compilerPluginDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCompilerPluginDataIsMutable();
          compilerPluginData_.add(value);
          onChanged();
        } else {
          compilerPluginDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public Builder addCompilerPluginData(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData value) {
        if (compilerPluginDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCompilerPluginDataIsMutable();
          compilerPluginData_.add(index, value);
          onChanged();
        } else {
          compilerPluginDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public Builder addCompilerPluginData(
          org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.Builder builderForValue) {
        if (compilerPluginDataBuilder_ == null) {
          ensureCompilerPluginDataIsMutable();
          compilerPluginData_.add(builderForValue.build());
          onChanged();
        } else {
          compilerPluginDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public Builder addCompilerPluginData(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.Builder builderForValue) {
        if (compilerPluginDataBuilder_ == null) {
          ensureCompilerPluginDataIsMutable();
          compilerPluginData_.add(index, builderForValue.build());
          onChanged();
        } else {
          compilerPluginDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public Builder addAllCompilerPluginData(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData> values) {
        if (compilerPluginDataBuilder_ == null) {
          ensureCompilerPluginDataIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, compilerPluginData_);
          onChanged();
        } else {
          compilerPluginDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public Builder clearCompilerPluginData() {
        if (compilerPluginDataBuilder_ == null) {
          compilerPluginData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000200);
          onChanged();
        } else {
          compilerPluginDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public Builder removeCompilerPluginData(int index) {
        if (compilerPluginDataBuilder_ == null) {
          ensureCompilerPluginDataIsMutable();
          compilerPluginData_.remove(index);
          onChanged();
        } else {
          compilerPluginDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.Builder getCompilerPluginDataBuilder(
          int index) {
        return getCompilerPluginDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginDataOrBuilder getCompilerPluginDataOrBuilder(
          int index) {
        if (compilerPluginDataBuilder_ == null) {
          return compilerPluginData_.get(index);  } else {
          return compilerPluginDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginDataOrBuilder> 
           getCompilerPluginDataOrBuilderList() {
        if (compilerPluginDataBuilder_ != null) {
          return compilerPluginDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(compilerPluginData_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.Builder addCompilerPluginDataBuilder() {
        return getCompilerPluginDataFieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.Builder addCompilerPluginDataBuilder(
          int index) {
        return getCompilerPluginDataFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.Builder> 
           getCompilerPluginDataBuilderList() {
        return getCompilerPluginDataFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginDataOrBuilder> 
          getCompilerPluginDataFieldBuilder() {
        if (compilerPluginDataBuilder_ == null) {
          compilerPluginDataBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginDataOrBuilder>(
                  compilerPluginData_,
                  ((bitField0_ & 0x00000200) != 0),
                  getParentForChildren(),
                  isClean());
          compilerPluginData_ = null;
        }
        return compilerPluginDataBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.TypeAlias)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.TypeAlias)
    private static final org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias();
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<TypeAlias>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<TypeAlias>() {
      @java.lang.Override
      public TypeAlias parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<TypeAlias> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<TypeAlias> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface EnumEntryOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.EnumEntry)
      org.jetbrains.kotlin.protobuf.GeneratedMessage.
          ExtendableMessageOrBuilder<EnumEntry> {

    /**
     * <code>int32 name = 1 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
     * @return Whether the name field is set.
     */
    boolean hasName();
    /**
     * <code>int32 name = 1 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
     * @return The name.
     */
    int getName();

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> 
        getAnnotationList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getAnnotation(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
     */
    int getAnnotationCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> 
        getAnnotationOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder getAnnotationOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.metadata.EnumEntry}
   */
  public static final class EnumEntry extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage.ExtendableMessage<
        EnumEntry> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.EnumEntry)
      EnumEntryOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        EnumEntry.class.getName());
    }
    // Use EnumEntry.newBuilder() to construct.
    private EnumEntry(org.jetbrains.kotlin.protobuf.GeneratedMessage.ExtendableBuilder<org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry, ?> builder) {
      super(builder);
    }
    private EnumEntry() {
      annotation_ = java.util.Collections.emptyList();
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_EnumEntry_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_EnumEntry_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry.class, org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry.Builder.class);
    }

    private int bitField0_;
    public static final int NAME_FIELD_NUMBER = 1;
    private int name_ = 0;
    /**
     * <code>int32 name = 1 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
     * @return Whether the name field is set.
     */
    @java.lang.Override
    public boolean hasName() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>int32 name = 1 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
     * @return The name.
     */
    @java.lang.Override
    public int getName() {
      return name_;
    }

    public static final int ANNOTATION_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> annotation_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> getAnnotationList() {
      return annotation_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> 
        getAnnotationOrBuilderList() {
      return annotation_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
     */
    @java.lang.Override
    public int getAnnotationCount() {
      return annotation_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getAnnotation(int index) {
      return annotation_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder getAnnotationOrBuilder(
        int index) {
      return annotation_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getAnnotationCount(); i++) {
        if (!getAnnotation(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (!extensionsAreInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      org.jetbrains.kotlin.protobuf.GeneratedMessage
        .ExtendableMessage.ExtensionSerializer
          extensionWriter = newExtensionSerializer();
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeInt32(1, name_);
      }
      for (int i = 0; i < annotation_.size(); i++) {
        output.writeMessage(2, annotation_.get(i));
      }
      extensionWriter.writeUntil(200, output);
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(1, name_);
      }
      for (int i = 0; i < annotation_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, annotation_.get(i));
      }
      size += extensionsSerializedSize();
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry other = (org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry) obj;

      if (hasName() != other.hasName()) return false;
      if (hasName()) {
        if (getName()
            != other.getName()) return false;
      }
      if (!getAnnotationList()
          .equals(other.getAnnotationList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      if (!getExtensionFields().equals(other.getExtensionFields()))
        return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasName()) {
        hash = (37 * hash) + NAME_FIELD_NUMBER;
        hash = (53 * hash) + getName();
      }
      if (getAnnotationCount() > 0) {
        hash = (37 * hash) + ANNOTATION_FIELD_NUMBER;
        hash = (53 * hash) + getAnnotationList().hashCode();
      }
      hash = hashFields(hash, getExtensionFields());
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.EnumEntry}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.ExtendableBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.EnumEntry)
        org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntryOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_EnumEntry_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_EnumEntry_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry.class, org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry.newBuilder()
      private Builder() {

      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        name_ = 0;
        if (annotationBuilder_ == null) {
          annotation_ = java.util.Collections.emptyList();
        } else {
          annotation_ = null;
          annotationBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_EnumEntry_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry getDefaultInstanceForType() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry build() {
        org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry buildPartial() {
        org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry result = new org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry result) {
        if (annotationBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            annotation_ = java.util.Collections.unmodifiableList(annotation_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.annotation_ = annotation_;
        } else {
          result.annotation_ = annotationBuilder_.build();
        }
      }

      private void buildPartial0(org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.name_ = name_;
          to_bitField0_ |= 0x00000001;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry) {
          return mergeFrom((org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry other) {
        if (other == org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry.getDefaultInstance()) return this;
        if (other.hasName()) {
          setName(other.getName());
        }
        if (annotationBuilder_ == null) {
          if (!other.annotation_.isEmpty()) {
            if (annotation_.isEmpty()) {
              annotation_ = other.annotation_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureAnnotationIsMutable();
              annotation_.addAll(other.annotation_);
            }
            onChanged();
          }
        } else {
          if (!other.annotation_.isEmpty()) {
            if (annotationBuilder_.isEmpty()) {
              annotationBuilder_.dispose();
              annotationBuilder_ = null;
              annotation_ = other.annotation_;
              bitField0_ = (bitField0_ & ~0x00000002);
              annotationBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getAnnotationFieldBuilder() : null;
            } else {
              annotationBuilder_.addAllMessages(other.annotation_);
            }
          }
        }
        this.mergeExtensionFields(other);
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        for (int i = 0; i < getAnnotationCount(); i++) {
          if (!getAnnotation(i).isInitialized()) {
            return false;
          }
        }
        if (!extensionsAreInitialized()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                name_ = input.readInt32();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 18: {
                org.jetbrains.kotlin.metadata.ProtoBuf.Annotation m =
                    input.readMessage(
                        org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.parser(),
                        extensionRegistry);
                if (annotationBuilder_ == null) {
                  ensureAnnotationIsMutable();
                  annotation_.add(m);
                } else {
                  annotationBuilder_.addMessage(m);
                }
                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int name_ ;
      /**
       * <code>int32 name = 1 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
       * @return Whether the name field is set.
       */
      @java.lang.Override
      public boolean hasName() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>int32 name = 1 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
       * @return The name.
       */
      @java.lang.Override
      public int getName() {
        return name_;
      }
      /**
       * <code>int32 name = 1 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
       * @param value The name to set.
       * @return This builder for chaining.
       */
      public Builder setName(int value) {

        name_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>int32 name = 1 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000001);
        name_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> annotation_ =
        java.util.Collections.emptyList();
      private void ensureAnnotationIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          annotation_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation>(annotation_);
          bitField0_ |= 0x00000002;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Annotation, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> annotationBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> getAnnotationList() {
        if (annotationBuilder_ == null) {
          return java.util.Collections.unmodifiableList(annotation_);
        } else {
          return annotationBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
       */
      public int getAnnotationCount() {
        if (annotationBuilder_ == null) {
          return annotation_.size();
        } else {
          return annotationBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getAnnotation(int index) {
        if (annotationBuilder_ == null) {
          return annotation_.get(index);
        } else {
          return annotationBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
       */
      public Builder setAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        if (annotationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAnnotationIsMutable();
          annotation_.set(index, value);
          onChanged();
        } else {
          annotationBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
       */
      public Builder setAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        if (annotationBuilder_ == null) {
          ensureAnnotationIsMutable();
          annotation_.set(index, builderForValue.build());
          onChanged();
        } else {
          annotationBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
       */
      public Builder addAnnotation(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        if (annotationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAnnotationIsMutable();
          annotation_.add(value);
          onChanged();
        } else {
          annotationBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
       */
      public Builder addAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        if (annotationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAnnotationIsMutable();
          annotation_.add(index, value);
          onChanged();
        } else {
          annotationBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
       */
      public Builder addAnnotation(
          org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        if (annotationBuilder_ == null) {
          ensureAnnotationIsMutable();
          annotation_.add(builderForValue.build());
          onChanged();
        } else {
          annotationBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
       */
      public Builder addAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        if (annotationBuilder_ == null) {
          ensureAnnotationIsMutable();
          annotation_.add(index, builderForValue.build());
          onChanged();
        } else {
          annotationBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
       */
      public Builder addAllAnnotation(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> values) {
        if (annotationBuilder_ == null) {
          ensureAnnotationIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, annotation_);
          onChanged();
        } else {
          annotationBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
       */
      public Builder clearAnnotation() {
        if (annotationBuilder_ == null) {
          annotation_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          annotationBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
       */
      public Builder removeAnnotation(int index) {
        if (annotationBuilder_ == null) {
          ensureAnnotationIsMutable();
          annotation_.remove(index);
          onChanged();
        } else {
          annotationBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder getAnnotationBuilder(
          int index) {
        return getAnnotationFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder getAnnotationOrBuilder(
          int index) {
        if (annotationBuilder_ == null) {
          return annotation_.get(index);  } else {
          return annotationBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> 
           getAnnotationOrBuilderList() {
        if (annotationBuilder_ != null) {
          return annotationBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(annotation_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder addAnnotationBuilder() {
        return getAnnotationFieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder addAnnotationBuilder(
          int index) {
        return getAnnotationFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder> 
           getAnnotationBuilderList() {
        return getAnnotationFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Annotation, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> 
          getAnnotationFieldBuilder() {
        if (annotationBuilder_ == null) {
          annotationBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.ProtoBuf.Annotation, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder>(
                  annotation_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          annotation_ = null;
        }
        return annotationBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.EnumEntry)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.EnumEntry)
    private static final org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry();
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<EnumEntry>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<EnumEntry>() {
      @java.lang.Override
      public EnumEntry parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<EnumEntry> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<EnumEntry> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface VersionRequirementOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.VersionRequirement)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Kotlin version, since which this declaration is accessible, in the following format (encoded version is "major.minor.patch"):
     * (patch &lt;&lt; 7) + (minor &lt;&lt; 3) + major
     * Compilers with version less than this value should report a diagnostic if this declaration is selected as the resolution result
     * </pre>
     *
     * <code>int32 version = 1;</code>
     * @return Whether the version field is set.
     */
    boolean hasVersion();
    /**
     * <pre>
     * Kotlin version, since which this declaration is accessible, in the following format (encoded version is "major.minor.patch"):
     * (patch &lt;&lt; 7) + (minor &lt;&lt; 3) + major
     * Compilers with version less than this value should report a diagnostic if this declaration is selected as the resolution result
     * </pre>
     *
     * <code>int32 version = 1;</code>
     * @return The version.
     */
    int getVersion();

    /**
     * <pre>
     * Version in base 256, in case we run out of space to store the version in the optimized form. Has priority over 'version'.
     * (patch &lt;&lt; 16) + (minor &lt;&lt; 8) + major
     * </pre>
     *
     * <code>int32 version_full = 2;</code>
     * @return Whether the versionFull field is set.
     */
    boolean hasVersionFull();
    /**
     * <pre>
     * Version in base 256, in case we run out of space to store the version in the optimized form. Has priority over 'version'.
     * (patch &lt;&lt; 16) + (minor &lt;&lt; 8) + major
     * </pre>
     *
     * <code>int32 version_full = 2;</code>
     * @return The versionFull.
     */
    int getVersionFull();

    /**
     * <pre>
     * Level of the reported diagnostic
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.metadata.VersionRequirement.Level level = 3 [default = ERROR];</code>
     * @return Whether the level field is set.
     */
    boolean hasLevel();
    /**
     * <pre>
     * Level of the reported diagnostic
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.metadata.VersionRequirement.Level level = 3 [default = ERROR];</code>
     * @return The level.
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement.Level getLevel();

    /**
     * <pre>
     * Error code, to be looked up on the website
     * </pre>
     *
     * <code>int32 error_code = 4;</code>
     * @return Whether the errorCode field is set.
     */
    boolean hasErrorCode();
    /**
     * <pre>
     * Error code, to be looked up on the website
     * </pre>
     *
     * <code>int32 error_code = 4;</code>
     * @return The errorCode.
     */
    int getErrorCode();

    /**
     * <pre>
     * Diagnostic message
     * </pre>
     *
     * <code>int32 message = 5 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
     * @return Whether the message field is set.
     */
    boolean hasMessage();
    /**
     * <pre>
     * Diagnostic message
     * </pre>
     *
     * <code>int32 message = 5 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
     * @return The message.
     */
    int getMessage();

    /**
     * <pre>
     * Which version is this requirement for. For example, if version_kind = API_VERSION, this declaration requires the API version
     * (the "-api-version" argument value when compiling the call site) to be of at least the specified value
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.metadata.VersionRequirement.VersionKind version_kind = 6 [default = LANGUAGE_VERSION];</code>
     * @return Whether the versionKind field is set.
     */
    boolean hasVersionKind();
    /**
     * <pre>
     * Which version is this requirement for. For example, if version_kind = API_VERSION, this declaration requires the API version
     * (the "-api-version" argument value when compiling the call site) to be of at least the specified value
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.metadata.VersionRequirement.VersionKind version_kind = 6 [default = LANGUAGE_VERSION];</code>
     * @return The versionKind.
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement.VersionKind getVersionKind();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.metadata.VersionRequirement}
   */
  public static final class VersionRequirement extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.VersionRequirement)
      VersionRequirementOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        VersionRequirement.class.getName());
    }
    // Use VersionRequirement.newBuilder() to construct.
    private VersionRequirement(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private VersionRequirement() {
      level_ = 1;
      versionKind_ = 0;
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_VersionRequirement_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_VersionRequirement_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement.class, org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement.Builder.class);
    }

    /**
     * Protobuf enum {@code org.jetbrains.kotlin.metadata.VersionRequirement.Level}
     */
    public enum Level
        implements org.jetbrains.kotlin.protobuf.ProtocolMessageEnum {
      /**
       * <code>WARNING = 0;</code>
       */
      WARNING(0),
      /**
       * <code>ERROR = 1;</code>
       */
      ERROR(1),
      /**
       * <code>HIDDEN = 2;</code>
       */
      HIDDEN(2),
      ;

      static {
        org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
          org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
          /* major= */ 4,
          /* minor= */ 29,
          /* patch= */ 3,
          /* suffix= */ "",
          Level.class.getName());
      }
      /**
       * <code>WARNING = 0;</code>
       */
      public static final int WARNING_VALUE = 0;
      /**
       * <code>ERROR = 1;</code>
       */
      public static final int ERROR_VALUE = 1;
      /**
       * <code>HIDDEN = 2;</code>
       */
      public static final int HIDDEN_VALUE = 2;


      public final int getNumber() {
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static Level valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static Level forNumber(int value) {
        switch (value) {
          case 0: return WARNING;
          case 1: return ERROR;
          case 2: return HIDDEN;
          default: return null;
        }
      }

      public static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Level>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<
          Level> internalValueMap =
            new org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Level>() {
              public Level findValueByNumber(int number) {
                return Level.forNumber(number);
              }
            };

      public final org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement.getDescriptor().getEnumTypes().get(0);
      }

      private static final Level[] VALUES = values();

      public static Level valueOf(
          org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private Level(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:org.jetbrains.kotlin.metadata.VersionRequirement.Level)
    }

    /**
     * Protobuf enum {@code org.jetbrains.kotlin.metadata.VersionRequirement.VersionKind}
     */
    public enum VersionKind
        implements org.jetbrains.kotlin.protobuf.ProtocolMessageEnum {
      /**
       * <code>LANGUAGE_VERSION = 0;</code>
       */
      LANGUAGE_VERSION(0),
      /**
       * <code>COMPILER_VERSION = 1;</code>
       */
      COMPILER_VERSION(1),
      /**
       * <code>API_VERSION = 2;</code>
       */
      API_VERSION(2),
      ;

      static {
        org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
          org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
          /* major= */ 4,
          /* minor= */ 29,
          /* patch= */ 3,
          /* suffix= */ "",
          VersionKind.class.getName());
      }
      /**
       * <code>LANGUAGE_VERSION = 0;</code>
       */
      public static final int LANGUAGE_VERSION_VALUE = 0;
      /**
       * <code>COMPILER_VERSION = 1;</code>
       */
      public static final int COMPILER_VERSION_VALUE = 1;
      /**
       * <code>API_VERSION = 2;</code>
       */
      public static final int API_VERSION_VALUE = 2;


      public final int getNumber() {
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static VersionKind valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static VersionKind forNumber(int value) {
        switch (value) {
          case 0: return LANGUAGE_VERSION;
          case 1: return COMPILER_VERSION;
          case 2: return API_VERSION;
          default: return null;
        }
      }

      public static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<VersionKind>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<
          VersionKind> internalValueMap =
            new org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<VersionKind>() {
              public VersionKind findValueByNumber(int number) {
                return VersionKind.forNumber(number);
              }
            };

      public final org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement.getDescriptor().getEnumTypes().get(1);
      }

      private static final VersionKind[] VALUES = values();

      public static VersionKind valueOf(
          org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private VersionKind(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:org.jetbrains.kotlin.metadata.VersionRequirement.VersionKind)
    }

    private int bitField0_;
    public static final int VERSION_FIELD_NUMBER = 1;
    private int version_ = 0;
    /**
     * <pre>
     * Kotlin version, since which this declaration is accessible, in the following format (encoded version is "major.minor.patch"):
     * (patch &lt;&lt; 7) + (minor &lt;&lt; 3) + major
     * Compilers with version less than this value should report a diagnostic if this declaration is selected as the resolution result
     * </pre>
     *
     * <code>int32 version = 1;</code>
     * @return Whether the version field is set.
     */
    @java.lang.Override
    public boolean hasVersion() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Kotlin version, since which this declaration is accessible, in the following format (encoded version is "major.minor.patch"):
     * (patch &lt;&lt; 7) + (minor &lt;&lt; 3) + major
     * Compilers with version less than this value should report a diagnostic if this declaration is selected as the resolution result
     * </pre>
     *
     * <code>int32 version = 1;</code>
     * @return The version.
     */
    @java.lang.Override
    public int getVersion() {
      return version_;
    }

    public static final int VERSION_FULL_FIELD_NUMBER = 2;
    private int versionFull_ = 0;
    /**
     * <pre>
     * Version in base 256, in case we run out of space to store the version in the optimized form. Has priority over 'version'.
     * (patch &lt;&lt; 16) + (minor &lt;&lt; 8) + major
     * </pre>
     *
     * <code>int32 version_full = 2;</code>
     * @return Whether the versionFull field is set.
     */
    @java.lang.Override
    public boolean hasVersionFull() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * Version in base 256, in case we run out of space to store the version in the optimized form. Has priority over 'version'.
     * (patch &lt;&lt; 16) + (minor &lt;&lt; 8) + major
     * </pre>
     *
     * <code>int32 version_full = 2;</code>
     * @return The versionFull.
     */
    @java.lang.Override
    public int getVersionFull() {
      return versionFull_;
    }

    public static final int LEVEL_FIELD_NUMBER = 3;
    private int level_ = 1;
    /**
     * <pre>
     * Level of the reported diagnostic
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.metadata.VersionRequirement.Level level = 3 [default = ERROR];</code>
     * @return Whether the level field is set.
     */
    @java.lang.Override public boolean hasLevel() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * Level of the reported diagnostic
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.metadata.VersionRequirement.Level level = 3 [default = ERROR];</code>
     * @return The level.
     */
    @java.lang.Override public org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement.Level getLevel() {
      org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement.Level result = org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement.Level.forNumber(level_);
      return result == null ? org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement.Level.ERROR : result;
    }

    public static final int ERROR_CODE_FIELD_NUMBER = 4;
    private int errorCode_ = 0;
    /**
     * <pre>
     * Error code, to be looked up on the website
     * </pre>
     *
     * <code>int32 error_code = 4;</code>
     * @return Whether the errorCode field is set.
     */
    @java.lang.Override
    public boolean hasErrorCode() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * Error code, to be looked up on the website
     * </pre>
     *
     * <code>int32 error_code = 4;</code>
     * @return The errorCode.
     */
    @java.lang.Override
    public int getErrorCode() {
      return errorCode_;
    }

    public static final int MESSAGE_FIELD_NUMBER = 5;
    private int message_ = 0;
    /**
     * <pre>
     * Diagnostic message
     * </pre>
     *
     * <code>int32 message = 5 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
     * @return Whether the message field is set.
     */
    @java.lang.Override
    public boolean hasMessage() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * Diagnostic message
     * </pre>
     *
     * <code>int32 message = 5 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
     * @return The message.
     */
    @java.lang.Override
    public int getMessage() {
      return message_;
    }

    public static final int VERSION_KIND_FIELD_NUMBER = 6;
    private int versionKind_ = 0;
    /**
     * <pre>
     * Which version is this requirement for. For example, if version_kind = API_VERSION, this declaration requires the API version
     * (the "-api-version" argument value when compiling the call site) to be of at least the specified value
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.metadata.VersionRequirement.VersionKind version_kind = 6 [default = LANGUAGE_VERSION];</code>
     * @return Whether the versionKind field is set.
     */
    @java.lang.Override public boolean hasVersionKind() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <pre>
     * Which version is this requirement for. For example, if version_kind = API_VERSION, this declaration requires the API version
     * (the "-api-version" argument value when compiling the call site) to be of at least the specified value
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.metadata.VersionRequirement.VersionKind version_kind = 6 [default = LANGUAGE_VERSION];</code>
     * @return The versionKind.
     */
    @java.lang.Override public org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement.VersionKind getVersionKind() {
      org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement.VersionKind result = org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement.VersionKind.forNumber(versionKind_);
      return result == null ? org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement.VersionKind.LANGUAGE_VERSION : result;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeInt32(1, version_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeInt32(2, versionFull_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeEnum(3, level_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeInt32(4, errorCode_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        output.writeInt32(5, message_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        output.writeEnum(6, versionKind_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(1, version_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(2, versionFull_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeEnumSize(3, level_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(4, errorCode_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(5, message_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeEnumSize(6, versionKind_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement other = (org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement) obj;

      if (hasVersion() != other.hasVersion()) return false;
      if (hasVersion()) {
        if (getVersion()
            != other.getVersion()) return false;
      }
      if (hasVersionFull() != other.hasVersionFull()) return false;
      if (hasVersionFull()) {
        if (getVersionFull()
            != other.getVersionFull()) return false;
      }
      if (hasLevel() != other.hasLevel()) return false;
      if (hasLevel()) {
        if (level_ != other.level_) return false;
      }
      if (hasErrorCode() != other.hasErrorCode()) return false;
      if (hasErrorCode()) {
        if (getErrorCode()
            != other.getErrorCode()) return false;
      }
      if (hasMessage() != other.hasMessage()) return false;
      if (hasMessage()) {
        if (getMessage()
            != other.getMessage()) return false;
      }
      if (hasVersionKind() != other.hasVersionKind()) return false;
      if (hasVersionKind()) {
        if (versionKind_ != other.versionKind_) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasVersion()) {
        hash = (37 * hash) + VERSION_FIELD_NUMBER;
        hash = (53 * hash) + getVersion();
      }
      if (hasVersionFull()) {
        hash = (37 * hash) + VERSION_FULL_FIELD_NUMBER;
        hash = (53 * hash) + getVersionFull();
      }
      if (hasLevel()) {
        hash = (37 * hash) + LEVEL_FIELD_NUMBER;
        hash = (53 * hash) + level_;
      }
      if (hasErrorCode()) {
        hash = (37 * hash) + ERROR_CODE_FIELD_NUMBER;
        hash = (53 * hash) + getErrorCode();
      }
      if (hasMessage()) {
        hash = (37 * hash) + MESSAGE_FIELD_NUMBER;
        hash = (53 * hash) + getMessage();
      }
      if (hasVersionKind()) {
        hash = (37 * hash) + VERSION_KIND_FIELD_NUMBER;
        hash = (53 * hash) + versionKind_;
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.VersionRequirement}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.VersionRequirement)
        org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_VersionRequirement_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_VersionRequirement_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement.class, org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement.newBuilder()
      private Builder() {

      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        version_ = 0;
        versionFull_ = 0;
        level_ = 1;
        errorCode_ = 0;
        message_ = 0;
        versionKind_ = 0;
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_VersionRequirement_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement getDefaultInstanceForType() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement build() {
        org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement buildPartial() {
        org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement result = new org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.version_ = version_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.versionFull_ = versionFull_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.level_ = level_;
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.errorCode_ = errorCode_;
          to_bitField0_ |= 0x00000008;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.message_ = message_;
          to_bitField0_ |= 0x00000010;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.versionKind_ = versionKind_;
          to_bitField0_ |= 0x00000020;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement) {
          return mergeFrom((org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement other) {
        if (other == org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement.getDefaultInstance()) return this;
        if (other.hasVersion()) {
          setVersion(other.getVersion());
        }
        if (other.hasVersionFull()) {
          setVersionFull(other.getVersionFull());
        }
        if (other.hasLevel()) {
          setLevel(other.getLevel());
        }
        if (other.hasErrorCode()) {
          setErrorCode(other.getErrorCode());
        }
        if (other.hasMessage()) {
          setMessage(other.getMessage());
        }
        if (other.hasVersionKind()) {
          setVersionKind(other.getVersionKind());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                version_ = input.readInt32();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 16: {
                versionFull_ = input.readInt32();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              case 24: {
                int tmpRaw = input.readEnum();
                org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement.Level tmpValue =
                    org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement.Level.forNumber(tmpRaw);
                if (tmpValue == null) {
                  mergeUnknownVarintField(3, tmpRaw);
                } else {
                  level_ = tmpRaw;
                  bitField0_ |= 0x00000004;
                }
                break;
              } // case 24
              case 32: {
                errorCode_ = input.readInt32();
                bitField0_ |= 0x00000008;
                break;
              } // case 32
              case 40: {
                message_ = input.readInt32();
                bitField0_ |= 0x00000010;
                break;
              } // case 40
              case 48: {
                int tmpRaw = input.readEnum();
                org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement.VersionKind tmpValue =
                    org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement.VersionKind.forNumber(tmpRaw);
                if (tmpValue == null) {
                  mergeUnknownVarintField(6, tmpRaw);
                } else {
                  versionKind_ = tmpRaw;
                  bitField0_ |= 0x00000020;
                }
                break;
              } // case 48
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int version_ ;
      /**
       * <pre>
       * Kotlin version, since which this declaration is accessible, in the following format (encoded version is "major.minor.patch"):
       * (patch &lt;&lt; 7) + (minor &lt;&lt; 3) + major
       * Compilers with version less than this value should report a diagnostic if this declaration is selected as the resolution result
       * </pre>
       *
       * <code>int32 version = 1;</code>
       * @return Whether the version field is set.
       */
      @java.lang.Override
      public boolean hasVersion() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * Kotlin version, since which this declaration is accessible, in the following format (encoded version is "major.minor.patch"):
       * (patch &lt;&lt; 7) + (minor &lt;&lt; 3) + major
       * Compilers with version less than this value should report a diagnostic if this declaration is selected as the resolution result
       * </pre>
       *
       * <code>int32 version = 1;</code>
       * @return The version.
       */
      @java.lang.Override
      public int getVersion() {
        return version_;
      }
      /**
       * <pre>
       * Kotlin version, since which this declaration is accessible, in the following format (encoded version is "major.minor.patch"):
       * (patch &lt;&lt; 7) + (minor &lt;&lt; 3) + major
       * Compilers with version less than this value should report a diagnostic if this declaration is selected as the resolution result
       * </pre>
       *
       * <code>int32 version = 1;</code>
       * @param value The version to set.
       * @return This builder for chaining.
       */
      public Builder setVersion(int value) {

        version_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Kotlin version, since which this declaration is accessible, in the following format (encoded version is "major.minor.patch"):
       * (patch &lt;&lt; 7) + (minor &lt;&lt; 3) + major
       * Compilers with version less than this value should report a diagnostic if this declaration is selected as the resolution result
       * </pre>
       *
       * <code>int32 version = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearVersion() {
        bitField0_ = (bitField0_ & ~0x00000001);
        version_ = 0;
        onChanged();
        return this;
      }

      private int versionFull_ ;
      /**
       * <pre>
       * Version in base 256, in case we run out of space to store the version in the optimized form. Has priority over 'version'.
       * (patch &lt;&lt; 16) + (minor &lt;&lt; 8) + major
       * </pre>
       *
       * <code>int32 version_full = 2;</code>
       * @return Whether the versionFull field is set.
       */
      @java.lang.Override
      public boolean hasVersionFull() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * Version in base 256, in case we run out of space to store the version in the optimized form. Has priority over 'version'.
       * (patch &lt;&lt; 16) + (minor &lt;&lt; 8) + major
       * </pre>
       *
       * <code>int32 version_full = 2;</code>
       * @return The versionFull.
       */
      @java.lang.Override
      public int getVersionFull() {
        return versionFull_;
      }
      /**
       * <pre>
       * Version in base 256, in case we run out of space to store the version in the optimized form. Has priority over 'version'.
       * (patch &lt;&lt; 16) + (minor &lt;&lt; 8) + major
       * </pre>
       *
       * <code>int32 version_full = 2;</code>
       * @param value The versionFull to set.
       * @return This builder for chaining.
       */
      public Builder setVersionFull(int value) {

        versionFull_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Version in base 256, in case we run out of space to store the version in the optimized form. Has priority over 'version'.
       * (patch &lt;&lt; 16) + (minor &lt;&lt; 8) + major
       * </pre>
       *
       * <code>int32 version_full = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearVersionFull() {
        bitField0_ = (bitField0_ & ~0x00000002);
        versionFull_ = 0;
        onChanged();
        return this;
      }

      private int level_ = 1;
      /**
       * <pre>
       * Level of the reported diagnostic
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.VersionRequirement.Level level = 3 [default = ERROR];</code>
       * @return Whether the level field is set.
       */
      @java.lang.Override public boolean hasLevel() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * Level of the reported diagnostic
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.VersionRequirement.Level level = 3 [default = ERROR];</code>
       * @return The level.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement.Level getLevel() {
        org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement.Level result = org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement.Level.forNumber(level_);
        return result == null ? org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement.Level.ERROR : result;
      }
      /**
       * <pre>
       * Level of the reported diagnostic
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.VersionRequirement.Level level = 3 [default = ERROR];</code>
       * @param value The level to set.
       * @return This builder for chaining.
       */
      public Builder setLevel(org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement.Level value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000004;
        level_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Level of the reported diagnostic
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.VersionRequirement.Level level = 3 [default = ERROR];</code>
       * @return This builder for chaining.
       */
      public Builder clearLevel() {
        bitField0_ = (bitField0_ & ~0x00000004);
        level_ = 1;
        onChanged();
        return this;
      }

      private int errorCode_ ;
      /**
       * <pre>
       * Error code, to be looked up on the website
       * </pre>
       *
       * <code>int32 error_code = 4;</code>
       * @return Whether the errorCode field is set.
       */
      @java.lang.Override
      public boolean hasErrorCode() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * Error code, to be looked up on the website
       * </pre>
       *
       * <code>int32 error_code = 4;</code>
       * @return The errorCode.
       */
      @java.lang.Override
      public int getErrorCode() {
        return errorCode_;
      }
      /**
       * <pre>
       * Error code, to be looked up on the website
       * </pre>
       *
       * <code>int32 error_code = 4;</code>
       * @param value The errorCode to set.
       * @return This builder for chaining.
       */
      public Builder setErrorCode(int value) {

        errorCode_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Error code, to be looked up on the website
       * </pre>
       *
       * <code>int32 error_code = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearErrorCode() {
        bitField0_ = (bitField0_ & ~0x00000008);
        errorCode_ = 0;
        onChanged();
        return this;
      }

      private int message_ ;
      /**
       * <pre>
       * Diagnostic message
       * </pre>
       *
       * <code>int32 message = 5 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
       * @return Whether the message field is set.
       */
      @java.lang.Override
      public boolean hasMessage() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <pre>
       * Diagnostic message
       * </pre>
       *
       * <code>int32 message = 5 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
       * @return The message.
       */
      @java.lang.Override
      public int getMessage() {
        return message_;
      }
      /**
       * <pre>
       * Diagnostic message
       * </pre>
       *
       * <code>int32 message = 5 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
       * @param value The message to set.
       * @return This builder for chaining.
       */
      public Builder setMessage(int value) {

        message_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Diagnostic message
       * </pre>
       *
       * <code>int32 message = 5 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearMessage() {
        bitField0_ = (bitField0_ & ~0x00000010);
        message_ = 0;
        onChanged();
        return this;
      }

      private int versionKind_ = 0;
      /**
       * <pre>
       * Which version is this requirement for. For example, if version_kind = API_VERSION, this declaration requires the API version
       * (the "-api-version" argument value when compiling the call site) to be of at least the specified value
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.VersionRequirement.VersionKind version_kind = 6 [default = LANGUAGE_VERSION];</code>
       * @return Whether the versionKind field is set.
       */
      @java.lang.Override public boolean hasVersionKind() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <pre>
       * Which version is this requirement for. For example, if version_kind = API_VERSION, this declaration requires the API version
       * (the "-api-version" argument value when compiling the call site) to be of at least the specified value
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.VersionRequirement.VersionKind version_kind = 6 [default = LANGUAGE_VERSION];</code>
       * @return The versionKind.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement.VersionKind getVersionKind() {
        org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement.VersionKind result = org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement.VersionKind.forNumber(versionKind_);
        return result == null ? org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement.VersionKind.LANGUAGE_VERSION : result;
      }
      /**
       * <pre>
       * Which version is this requirement for. For example, if version_kind = API_VERSION, this declaration requires the API version
       * (the "-api-version" argument value when compiling the call site) to be of at least the specified value
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.VersionRequirement.VersionKind version_kind = 6 [default = LANGUAGE_VERSION];</code>
       * @param value The versionKind to set.
       * @return This builder for chaining.
       */
      public Builder setVersionKind(org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement.VersionKind value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000020;
        versionKind_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Which version is this requirement for. For example, if version_kind = API_VERSION, this declaration requires the API version
       * (the "-api-version" argument value when compiling the call site) to be of at least the specified value
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.VersionRequirement.VersionKind version_kind = 6 [default = LANGUAGE_VERSION];</code>
       * @return This builder for chaining.
       */
      public Builder clearVersionKind() {
        bitField0_ = (bitField0_ & ~0x00000020);
        versionKind_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.VersionRequirement)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.VersionRequirement)
    private static final org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement();
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<VersionRequirement>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<VersionRequirement>() {
      @java.lang.Override
      public VersionRequirement parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<VersionRequirement> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<VersionRequirement> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface VersionRequirementTableOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.VersionRequirementTable)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement> 
        getRequirementList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement getRequirement(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
     */
    int getRequirementCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementOrBuilder> 
        getRequirementOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementOrBuilder getRequirementOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.metadata.VersionRequirementTable}
   */
  public static final class VersionRequirementTable extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.VersionRequirementTable)
      VersionRequirementTableOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        VersionRequirementTable.class.getName());
    }
    // Use VersionRequirementTable.newBuilder() to construct.
    private VersionRequirementTable(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private VersionRequirementTable() {
      requirement_ = java.util.Collections.emptyList();
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_VersionRequirementTable_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_VersionRequirementTable_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable.class, org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable.Builder.class);
    }

    public static final int REQUIREMENT_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement> requirement_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement> getRequirementList() {
      return requirement_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementOrBuilder> 
        getRequirementOrBuilderList() {
      return requirement_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
     */
    @java.lang.Override
    public int getRequirementCount() {
      return requirement_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement getRequirement(int index) {
      return requirement_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementOrBuilder getRequirementOrBuilder(
        int index) {
      return requirement_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < requirement_.size(); i++) {
        output.writeMessage(1, requirement_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < requirement_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, requirement_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable other = (org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable) obj;

      if (!getRequirementList()
          .equals(other.getRequirementList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getRequirementCount() > 0) {
        hash = (37 * hash) + REQUIREMENT_FIELD_NUMBER;
        hash = (53 * hash) + getRequirementList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.VersionRequirementTable}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.VersionRequirementTable)
        org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTableOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_VersionRequirementTable_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_VersionRequirementTable_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable.class, org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable.newBuilder()
      private Builder() {

      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        if (requirementBuilder_ == null) {
          requirement_ = java.util.Collections.emptyList();
        } else {
          requirement_ = null;
          requirementBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_VersionRequirementTable_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable getDefaultInstanceForType() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable build() {
        org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable buildPartial() {
        org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable result = new org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable result) {
        if (requirementBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            requirement_ = java.util.Collections.unmodifiableList(requirement_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.requirement_ = requirement_;
        } else {
          result.requirement_ = requirementBuilder_.build();
        }
      }

      private void buildPartial0(org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable result) {
        int from_bitField0_ = bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable) {
          return mergeFrom((org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable other) {
        if (other == org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable.getDefaultInstance()) return this;
        if (requirementBuilder_ == null) {
          if (!other.requirement_.isEmpty()) {
            if (requirement_.isEmpty()) {
              requirement_ = other.requirement_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureRequirementIsMutable();
              requirement_.addAll(other.requirement_);
            }
            onChanged();
          }
        } else {
          if (!other.requirement_.isEmpty()) {
            if (requirementBuilder_.isEmpty()) {
              requirementBuilder_.dispose();
              requirementBuilder_ = null;
              requirement_ = other.requirement_;
              bitField0_ = (bitField0_ & ~0x00000001);
              requirementBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getRequirementFieldBuilder() : null;
            } else {
              requirementBuilder_.addAllMessages(other.requirement_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement m =
                    input.readMessage(
                        org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement.parser(),
                        extensionRegistry);
                if (requirementBuilder_ == null) {
                  ensureRequirementIsMutable();
                  requirement_.add(m);
                } else {
                  requirementBuilder_.addMessage(m);
                }
                break;
              } // case 10
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement> requirement_ =
        java.util.Collections.emptyList();
      private void ensureRequirementIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          requirement_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement>(requirement_);
          bitField0_ |= 0x00000001;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement, org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementOrBuilder> requirementBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement> getRequirementList() {
        if (requirementBuilder_ == null) {
          return java.util.Collections.unmodifiableList(requirement_);
        } else {
          return requirementBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
       */
      public int getRequirementCount() {
        if (requirementBuilder_ == null) {
          return requirement_.size();
        } else {
          return requirementBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement getRequirement(int index) {
        if (requirementBuilder_ == null) {
          return requirement_.get(index);
        } else {
          return requirementBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
       */
      public Builder setRequirement(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement value) {
        if (requirementBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRequirementIsMutable();
          requirement_.set(index, value);
          onChanged();
        } else {
          requirementBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
       */
      public Builder setRequirement(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement.Builder builderForValue) {
        if (requirementBuilder_ == null) {
          ensureRequirementIsMutable();
          requirement_.set(index, builderForValue.build());
          onChanged();
        } else {
          requirementBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
       */
      public Builder addRequirement(org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement value) {
        if (requirementBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRequirementIsMutable();
          requirement_.add(value);
          onChanged();
        } else {
          requirementBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
       */
      public Builder addRequirement(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement value) {
        if (requirementBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRequirementIsMutable();
          requirement_.add(index, value);
          onChanged();
        } else {
          requirementBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
       */
      public Builder addRequirement(
          org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement.Builder builderForValue) {
        if (requirementBuilder_ == null) {
          ensureRequirementIsMutable();
          requirement_.add(builderForValue.build());
          onChanged();
        } else {
          requirementBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
       */
      public Builder addRequirement(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement.Builder builderForValue) {
        if (requirementBuilder_ == null) {
          ensureRequirementIsMutable();
          requirement_.add(index, builderForValue.build());
          onChanged();
        } else {
          requirementBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
       */
      public Builder addAllRequirement(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement> values) {
        if (requirementBuilder_ == null) {
          ensureRequirementIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, requirement_);
          onChanged();
        } else {
          requirementBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
       */
      public Builder clearRequirement() {
        if (requirementBuilder_ == null) {
          requirement_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          requirementBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
       */
      public Builder removeRequirement(int index) {
        if (requirementBuilder_ == null) {
          ensureRequirementIsMutable();
          requirement_.remove(index);
          onChanged();
        } else {
          requirementBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement.Builder getRequirementBuilder(
          int index) {
        return getRequirementFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementOrBuilder getRequirementOrBuilder(
          int index) {
        if (requirementBuilder_ == null) {
          return requirement_.get(index);  } else {
          return requirementBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementOrBuilder> 
           getRequirementOrBuilderList() {
        if (requirementBuilder_ != null) {
          return requirementBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(requirement_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement.Builder addRequirementBuilder() {
        return getRequirementFieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement.Builder addRequirementBuilder(
          int index) {
        return getRequirementFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement.Builder> 
           getRequirementBuilderList() {
        return getRequirementFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement, org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementOrBuilder> 
          getRequirementFieldBuilder() {
        if (requirementBuilder_ == null) {
          requirementBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement, org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementOrBuilder>(
                  requirement_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          requirement_ = null;
        }
        return requirementBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.VersionRequirementTable)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.VersionRequirementTable)
    private static final org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable();
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<VersionRequirementTable>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<VersionRequirementTable>() {
      @java.lang.Override
      public VersionRequirementTable parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<VersionRequirementTable> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<VersionRequirementTable> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface PackageFragmentOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.PackageFragment)
      org.jetbrains.kotlin.protobuf.GeneratedMessage.
          ExtendableMessageOrBuilder<PackageFragment> {

    /**
     * <code>.org.jetbrains.kotlin.metadata.StringTable strings = 1;</code>
     * @return Whether the strings field is set.
     */
    boolean hasStrings();
    /**
     * <code>.org.jetbrains.kotlin.metadata.StringTable strings = 1;</code>
     * @return The strings.
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.StringTable getStrings();
    /**
     * <code>.org.jetbrains.kotlin.metadata.StringTable strings = 1;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.StringTableOrBuilder getStringsOrBuilder();

    /**
     * <code>.org.jetbrains.kotlin.metadata.QualifiedNameTable qualified_names = 2;</code>
     * @return Whether the qualifiedNames field is set.
     */
    boolean hasQualifiedNames();
    /**
     * <code>.org.jetbrains.kotlin.metadata.QualifiedNameTable qualified_names = 2;</code>
     * @return The qualifiedNames.
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable getQualifiedNames();
    /**
     * <code>.org.jetbrains.kotlin.metadata.QualifiedNameTable qualified_names = 2;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTableOrBuilder getQualifiedNamesOrBuilder();

    /**
     * <code>.org.jetbrains.kotlin.metadata.Package package = 3;</code>
     * @return Whether the package field is set.
     */
    boolean hasPackage();
    /**
     * <code>.org.jetbrains.kotlin.metadata.Package package = 3;</code>
     * @return The package.
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Package getPackage();
    /**
     * <code>.org.jetbrains.kotlin.metadata.Package package = 3;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.PackageOrBuilder getPackageOrBuilder();

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Class> 
        getClass_List();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Class getClass_(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
     */
    int getClass_Count();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.ClassOrBuilder> 
        getClass_OrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.ClassOrBuilder getClass_OrBuilder(
        int index);
  }
  /**
   * <pre>
   * A part of the package, which is used to serialize .kjsm/.meta.js, .kotlin_builtins and .kotlin_metadata files.
   * Is not used in the JVM back-end
   * </pre>
   *
   * Protobuf type {@code org.jetbrains.kotlin.metadata.PackageFragment}
   */
  public static final class PackageFragment extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage.ExtendableMessage<
        PackageFragment> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.PackageFragment)
      PackageFragmentOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        PackageFragment.class.getName());
    }
    // Use PackageFragment.newBuilder() to construct.
    private PackageFragment(org.jetbrains.kotlin.protobuf.GeneratedMessage.ExtendableBuilder<org.jetbrains.kotlin.metadata.ProtoBuf.PackageFragment, ?> builder) {
      super(builder);
    }
    private PackageFragment() {
      class__ = java.util.Collections.emptyList();
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_PackageFragment_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_PackageFragment_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.metadata.ProtoBuf.PackageFragment.class, org.jetbrains.kotlin.metadata.ProtoBuf.PackageFragment.Builder.class);
    }

    private int bitField0_;
    public static final int STRINGS_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.metadata.ProtoBuf.StringTable strings_;
    /**
     * <code>.org.jetbrains.kotlin.metadata.StringTable strings = 1;</code>
     * @return Whether the strings field is set.
     */
    @java.lang.Override
    public boolean hasStrings() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.StringTable strings = 1;</code>
     * @return The strings.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.StringTable getStrings() {
      return strings_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.StringTable.getDefaultInstance() : strings_;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.StringTable strings = 1;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.StringTableOrBuilder getStringsOrBuilder() {
      return strings_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.StringTable.getDefaultInstance() : strings_;
    }

    public static final int QUALIFIED_NAMES_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable qualifiedNames_;
    /**
     * <code>.org.jetbrains.kotlin.metadata.QualifiedNameTable qualified_names = 2;</code>
     * @return Whether the qualifiedNames field is set.
     */
    @java.lang.Override
    public boolean hasQualifiedNames() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.QualifiedNameTable qualified_names = 2;</code>
     * @return The qualifiedNames.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable getQualifiedNames() {
      return qualifiedNames_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.getDefaultInstance() : qualifiedNames_;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.QualifiedNameTable qualified_names = 2;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTableOrBuilder getQualifiedNamesOrBuilder() {
      return qualifiedNames_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.getDefaultInstance() : qualifiedNames_;
    }

    public static final int PACKAGE_FIELD_NUMBER = 3;
    private org.jetbrains.kotlin.metadata.ProtoBuf.Package package_;
    /**
     * <code>.org.jetbrains.kotlin.metadata.Package package = 3;</code>
     * @return Whether the package field is set.
     */
    @java.lang.Override
    public boolean hasPackage() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Package package = 3;</code>
     * @return The package.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Package getPackage() {
      return package_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Package.getDefaultInstance() : package_;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Package package = 3;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.PackageOrBuilder getPackageOrBuilder() {
      return package_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Package.getDefaultInstance() : package_;
    }

    public static final int CLASS_FIELD_NUMBER = 4;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Class> class__;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Class> getClass_List() {
      return class__;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.ClassOrBuilder> 
        getClass_OrBuilderList() {
      return class__;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
     */
    @java.lang.Override
    public int getClass_Count() {
      return class__.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Class getClass_(int index) {
      return class__.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.ClassOrBuilder getClass_OrBuilder(
        int index) {
      return class__.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (hasQualifiedNames()) {
        if (!getQualifiedNames().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasPackage()) {
        if (!getPackage().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getClass_Count(); i++) {
        if (!getClass_(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (!extensionsAreInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      org.jetbrains.kotlin.protobuf.GeneratedMessage
        .ExtendableMessage.ExtensionSerializer
          extensionWriter = newExtensionSerializer();
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(1, getStrings());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeMessage(2, getQualifiedNames());
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeMessage(3, getPackage());
      }
      for (int i = 0; i < class__.size(); i++) {
        output.writeMessage(4, class__.get(i));
      }
      extensionWriter.writeUntil(200, output);
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, getStrings());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, getQualifiedNames());
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(3, getPackage());
      }
      for (int i = 0; i < class__.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(4, class__.get(i));
      }
      size += extensionsSerializedSize();
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.metadata.ProtoBuf.PackageFragment)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.metadata.ProtoBuf.PackageFragment other = (org.jetbrains.kotlin.metadata.ProtoBuf.PackageFragment) obj;

      if (hasStrings() != other.hasStrings()) return false;
      if (hasStrings()) {
        if (!getStrings()
            .equals(other.getStrings())) return false;
      }
      if (hasQualifiedNames() != other.hasQualifiedNames()) return false;
      if (hasQualifiedNames()) {
        if (!getQualifiedNames()
            .equals(other.getQualifiedNames())) return false;
      }
      if (hasPackage() != other.hasPackage()) return false;
      if (hasPackage()) {
        if (!getPackage()
            .equals(other.getPackage())) return false;
      }
      if (!getClass_List()
          .equals(other.getClass_List())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      if (!getExtensionFields().equals(other.getExtensionFields()))
        return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasStrings()) {
        hash = (37 * hash) + STRINGS_FIELD_NUMBER;
        hash = (53 * hash) + getStrings().hashCode();
      }
      if (hasQualifiedNames()) {
        hash = (37 * hash) + QUALIFIED_NAMES_FIELD_NUMBER;
        hash = (53 * hash) + getQualifiedNames().hashCode();
      }
      if (hasPackage()) {
        hash = (37 * hash) + PACKAGE_FIELD_NUMBER;
        hash = (53 * hash) + getPackage().hashCode();
      }
      if (getClass_Count() > 0) {
        hash = (37 * hash) + CLASS_FIELD_NUMBER;
        hash = (53 * hash) + getClass_List().hashCode();
      }
      hash = hashFields(hash, getExtensionFields());
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.PackageFragment parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.PackageFragment parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.PackageFragment parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.PackageFragment parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.PackageFragment parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.PackageFragment parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.PackageFragment parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.PackageFragment parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.PackageFragment parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.PackageFragment parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.PackageFragment parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.PackageFragment parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.metadata.ProtoBuf.PackageFragment prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * A part of the package, which is used to serialize .kjsm/.meta.js, .kotlin_builtins and .kotlin_metadata files.
     * Is not used in the JVM back-end
     * </pre>
     *
     * Protobuf type {@code org.jetbrains.kotlin.metadata.PackageFragment}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.ExtendableBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.PackageFragment, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.PackageFragment)
        org.jetbrains.kotlin.metadata.ProtoBuf.PackageFragmentOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_PackageFragment_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_PackageFragment_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.metadata.ProtoBuf.PackageFragment.class, org.jetbrains.kotlin.metadata.ProtoBuf.PackageFragment.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.metadata.ProtoBuf.PackageFragment.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getStringsFieldBuilder();
          getQualifiedNamesFieldBuilder();
          getPackageFieldBuilder();
          getClass_FieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        strings_ = null;
        if (stringsBuilder_ != null) {
          stringsBuilder_.dispose();
          stringsBuilder_ = null;
        }
        qualifiedNames_ = null;
        if (qualifiedNamesBuilder_ != null) {
          qualifiedNamesBuilder_.dispose();
          qualifiedNamesBuilder_ = null;
        }
        package_ = null;
        if (packageBuilder_ != null) {
          packageBuilder_.dispose();
          packageBuilder_ = null;
        }
        if (class_Builder_ == null) {
          class__ = java.util.Collections.emptyList();
        } else {
          class__ = null;
          class_Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_PackageFragment_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.PackageFragment getDefaultInstanceForType() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.PackageFragment.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.PackageFragment build() {
        org.jetbrains.kotlin.metadata.ProtoBuf.PackageFragment result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.PackageFragment buildPartial() {
        org.jetbrains.kotlin.metadata.ProtoBuf.PackageFragment result = new org.jetbrains.kotlin.metadata.ProtoBuf.PackageFragment(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(org.jetbrains.kotlin.metadata.ProtoBuf.PackageFragment result) {
        if (class_Builder_ == null) {
          if (((bitField0_ & 0x00000008) != 0)) {
            class__ = java.util.Collections.unmodifiableList(class__);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.class__ = class__;
        } else {
          result.class__ = class_Builder_.build();
        }
      }

      private void buildPartial0(org.jetbrains.kotlin.metadata.ProtoBuf.PackageFragment result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.strings_ = stringsBuilder_ == null
              ? strings_
              : stringsBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.qualifiedNames_ = qualifiedNamesBuilder_ == null
              ? qualifiedNames_
              : qualifiedNamesBuilder_.build();
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.package_ = packageBuilder_ == null
              ? package_
              : packageBuilder_.build();
          to_bitField0_ |= 0x00000004;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.metadata.ProtoBuf.PackageFragment) {
          return mergeFrom((org.jetbrains.kotlin.metadata.ProtoBuf.PackageFragment)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.metadata.ProtoBuf.PackageFragment other) {
        if (other == org.jetbrains.kotlin.metadata.ProtoBuf.PackageFragment.getDefaultInstance()) return this;
        if (other.hasStrings()) {
          mergeStrings(other.getStrings());
        }
        if (other.hasQualifiedNames()) {
          mergeQualifiedNames(other.getQualifiedNames());
        }
        if (other.hasPackage()) {
          mergePackage(other.getPackage());
        }
        if (class_Builder_ == null) {
          if (!other.class__.isEmpty()) {
            if (class__.isEmpty()) {
              class__ = other.class__;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureClass_IsMutable();
              class__.addAll(other.class__);
            }
            onChanged();
          }
        } else {
          if (!other.class__.isEmpty()) {
            if (class_Builder_.isEmpty()) {
              class_Builder_.dispose();
              class_Builder_ = null;
              class__ = other.class__;
              bitField0_ = (bitField0_ & ~0x00000008);
              class_Builder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getClass_FieldBuilder() : null;
            } else {
              class_Builder_.addAllMessages(other.class__);
            }
          }
        }
        this.mergeExtensionFields(other);
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (hasQualifiedNames()) {
          if (!getQualifiedNames().isInitialized()) {
            return false;
          }
        }
        if (hasPackage()) {
          if (!getPackage().isInitialized()) {
            return false;
          }
        }
        for (int i = 0; i < getClass_Count(); i++) {
          if (!getClass_(i).isInitialized()) {
            return false;
          }
        }
        if (!extensionsAreInitialized()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getStringsFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                input.readMessage(
                    getQualifiedNamesFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 26: {
                input.readMessage(
                    getPackageFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              case 34: {
                org.jetbrains.kotlin.metadata.ProtoBuf.Class m =
                    input.readMessage(
                        org.jetbrains.kotlin.metadata.ProtoBuf.Class.parser(),
                        extensionRegistry);
                if (class_Builder_ == null) {
                  ensureClass_IsMutable();
                  class__.add(m);
                } else {
                  class_Builder_.addMessage(m);
                }
                break;
              } // case 34
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private org.jetbrains.kotlin.metadata.ProtoBuf.StringTable strings_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.StringTable, org.jetbrains.kotlin.metadata.ProtoBuf.StringTable.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.StringTableOrBuilder> stringsBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.metadata.StringTable strings = 1;</code>
       * @return Whether the strings field is set.
       */
      public boolean hasStrings() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.StringTable strings = 1;</code>
       * @return The strings.
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.StringTable getStrings() {
        if (stringsBuilder_ == null) {
          return strings_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.StringTable.getDefaultInstance() : strings_;
        } else {
          return stringsBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.StringTable strings = 1;</code>
       */
      public Builder setStrings(org.jetbrains.kotlin.metadata.ProtoBuf.StringTable value) {
        if (stringsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          strings_ = value;
        } else {
          stringsBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.StringTable strings = 1;</code>
       */
      public Builder setStrings(
          org.jetbrains.kotlin.metadata.ProtoBuf.StringTable.Builder builderForValue) {
        if (stringsBuilder_ == null) {
          strings_ = builderForValue.build();
        } else {
          stringsBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.StringTable strings = 1;</code>
       */
      public Builder mergeStrings(org.jetbrains.kotlin.metadata.ProtoBuf.StringTable value) {
        if (stringsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            strings_ != null &&
            strings_ != org.jetbrains.kotlin.metadata.ProtoBuf.StringTable.getDefaultInstance()) {
            getStringsBuilder().mergeFrom(value);
          } else {
            strings_ = value;
          }
        } else {
          stringsBuilder_.mergeFrom(value);
        }
        if (strings_ != null) {
          bitField0_ |= 0x00000001;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.StringTable strings = 1;</code>
       */
      public Builder clearStrings() {
        bitField0_ = (bitField0_ & ~0x00000001);
        strings_ = null;
        if (stringsBuilder_ != null) {
          stringsBuilder_.dispose();
          stringsBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.StringTable strings = 1;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.StringTable.Builder getStringsBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getStringsFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.StringTable strings = 1;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.StringTableOrBuilder getStringsOrBuilder() {
        if (stringsBuilder_ != null) {
          return stringsBuilder_.getMessageOrBuilder();
        } else {
          return strings_ == null ?
              org.jetbrains.kotlin.metadata.ProtoBuf.StringTable.getDefaultInstance() : strings_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.StringTable strings = 1;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.StringTable, org.jetbrains.kotlin.metadata.ProtoBuf.StringTable.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.StringTableOrBuilder> 
          getStringsFieldBuilder() {
        if (stringsBuilder_ == null) {
          stringsBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.metadata.ProtoBuf.StringTable, org.jetbrains.kotlin.metadata.ProtoBuf.StringTable.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.StringTableOrBuilder>(
                  getStrings(),
                  getParentForChildren(),
                  isClean());
          strings_ = null;
        }
        return stringsBuilder_;
      }

      private org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable qualifiedNames_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable, org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTableOrBuilder> qualifiedNamesBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.metadata.QualifiedNameTable qualified_names = 2;</code>
       * @return Whether the qualifiedNames field is set.
       */
      public boolean hasQualifiedNames() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.QualifiedNameTable qualified_names = 2;</code>
       * @return The qualifiedNames.
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable getQualifiedNames() {
        if (qualifiedNamesBuilder_ == null) {
          return qualifiedNames_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.getDefaultInstance() : qualifiedNames_;
        } else {
          return qualifiedNamesBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.QualifiedNameTable qualified_names = 2;</code>
       */
      public Builder setQualifiedNames(org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable value) {
        if (qualifiedNamesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          qualifiedNames_ = value;
        } else {
          qualifiedNamesBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.QualifiedNameTable qualified_names = 2;</code>
       */
      public Builder setQualifiedNames(
          org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.Builder builderForValue) {
        if (qualifiedNamesBuilder_ == null) {
          qualifiedNames_ = builderForValue.build();
        } else {
          qualifiedNamesBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.QualifiedNameTable qualified_names = 2;</code>
       */
      public Builder mergeQualifiedNames(org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable value) {
        if (qualifiedNamesBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0) &&
            qualifiedNames_ != null &&
            qualifiedNames_ != org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.getDefaultInstance()) {
            getQualifiedNamesBuilder().mergeFrom(value);
          } else {
            qualifiedNames_ = value;
          }
        } else {
          qualifiedNamesBuilder_.mergeFrom(value);
        }
        if (qualifiedNames_ != null) {
          bitField0_ |= 0x00000002;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.QualifiedNameTable qualified_names = 2;</code>
       */
      public Builder clearQualifiedNames() {
        bitField0_ = (bitField0_ & ~0x00000002);
        qualifiedNames_ = null;
        if (qualifiedNamesBuilder_ != null) {
          qualifiedNamesBuilder_.dispose();
          qualifiedNamesBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.QualifiedNameTable qualified_names = 2;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.Builder getQualifiedNamesBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getQualifiedNamesFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.QualifiedNameTable qualified_names = 2;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTableOrBuilder getQualifiedNamesOrBuilder() {
        if (qualifiedNamesBuilder_ != null) {
          return qualifiedNamesBuilder_.getMessageOrBuilder();
        } else {
          return qualifiedNames_ == null ?
              org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.getDefaultInstance() : qualifiedNames_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.QualifiedNameTable qualified_names = 2;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable, org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTableOrBuilder> 
          getQualifiedNamesFieldBuilder() {
        if (qualifiedNamesBuilder_ == null) {
          qualifiedNamesBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable, org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTableOrBuilder>(
                  getQualifiedNames(),
                  getParentForChildren(),
                  isClean());
          qualifiedNames_ = null;
        }
        return qualifiedNamesBuilder_;
      }

      private org.jetbrains.kotlin.metadata.ProtoBuf.Package package_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Package, org.jetbrains.kotlin.metadata.ProtoBuf.Package.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.PackageOrBuilder> packageBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.metadata.Package package = 3;</code>
       * @return Whether the package field is set.
       */
      public boolean hasPackage() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Package package = 3;</code>
       * @return The package.
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Package getPackage() {
        if (packageBuilder_ == null) {
          return package_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Package.getDefaultInstance() : package_;
        } else {
          return packageBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Package package = 3;</code>
       */
      public Builder setPackage(org.jetbrains.kotlin.metadata.ProtoBuf.Package value) {
        if (packageBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          package_ = value;
        } else {
          packageBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Package package = 3;</code>
       */
      public Builder setPackage(
          org.jetbrains.kotlin.metadata.ProtoBuf.Package.Builder builderForValue) {
        if (packageBuilder_ == null) {
          package_ = builderForValue.build();
        } else {
          packageBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Package package = 3;</code>
       */
      public Builder mergePackage(org.jetbrains.kotlin.metadata.ProtoBuf.Package value) {
        if (packageBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0) &&
            package_ != null &&
            package_ != org.jetbrains.kotlin.metadata.ProtoBuf.Package.getDefaultInstance()) {
            getPackageBuilder().mergeFrom(value);
          } else {
            package_ = value;
          }
        } else {
          packageBuilder_.mergeFrom(value);
        }
        if (package_ != null) {
          bitField0_ |= 0x00000004;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Package package = 3;</code>
       */
      public Builder clearPackage() {
        bitField0_ = (bitField0_ & ~0x00000004);
        package_ = null;
        if (packageBuilder_ != null) {
          packageBuilder_.dispose();
          packageBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Package package = 3;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Package.Builder getPackageBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getPackageFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Package package = 3;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.PackageOrBuilder getPackageOrBuilder() {
        if (packageBuilder_ != null) {
          return packageBuilder_.getMessageOrBuilder();
        } else {
          return package_ == null ?
              org.jetbrains.kotlin.metadata.ProtoBuf.Package.getDefaultInstance() : package_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Package package = 3;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Package, org.jetbrains.kotlin.metadata.ProtoBuf.Package.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.PackageOrBuilder> 
          getPackageFieldBuilder() {
        if (packageBuilder_ == null) {
          packageBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.metadata.ProtoBuf.Package, org.jetbrains.kotlin.metadata.ProtoBuf.Package.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.PackageOrBuilder>(
                  getPackage(),
                  getParentForChildren(),
                  isClean());
          package_ = null;
        }
        return packageBuilder_;
      }

      private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Class> class__ =
        java.util.Collections.emptyList();
      private void ensureClass_IsMutable() {
        if (!((bitField0_ & 0x00000008) != 0)) {
          class__ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.ProtoBuf.Class>(class__);
          bitField0_ |= 0x00000008;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Class, org.jetbrains.kotlin.metadata.ProtoBuf.Class.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.ClassOrBuilder> class_Builder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Class> getClass_List() {
        if (class_Builder_ == null) {
          return java.util.Collections.unmodifiableList(class__);
        } else {
          return class_Builder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
       */
      public int getClass_Count() {
        if (class_Builder_ == null) {
          return class__.size();
        } else {
          return class_Builder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Class getClass_(int index) {
        if (class_Builder_ == null) {
          return class__.get(index);
        } else {
          return class_Builder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
       */
      public Builder setClass_(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Class value) {
        if (class_Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureClass_IsMutable();
          class__.set(index, value);
          onChanged();
        } else {
          class_Builder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
       */
      public Builder setClass_(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Class.Builder builderForValue) {
        if (class_Builder_ == null) {
          ensureClass_IsMutable();
          class__.set(index, builderForValue.build());
          onChanged();
        } else {
          class_Builder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
       */
      public Builder addClass_(org.jetbrains.kotlin.metadata.ProtoBuf.Class value) {
        if (class_Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureClass_IsMutable();
          class__.add(value);
          onChanged();
        } else {
          class_Builder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
       */
      public Builder addClass_(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Class value) {
        if (class_Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureClass_IsMutable();
          class__.add(index, value);
          onChanged();
        } else {
          class_Builder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
       */
      public Builder addClass_(
          org.jetbrains.kotlin.metadata.ProtoBuf.Class.Builder builderForValue) {
        if (class_Builder_ == null) {
          ensureClass_IsMutable();
          class__.add(builderForValue.build());
          onChanged();
        } else {
          class_Builder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
       */
      public Builder addClass_(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Class.Builder builderForValue) {
        if (class_Builder_ == null) {
          ensureClass_IsMutable();
          class__.add(index, builderForValue.build());
          onChanged();
        } else {
          class_Builder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
       */
      public Builder addAllClass_(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Class> values) {
        if (class_Builder_ == null) {
          ensureClass_IsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, class__);
          onChanged();
        } else {
          class_Builder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
       */
      public Builder clearClass_() {
        if (class_Builder_ == null) {
          class__ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          class_Builder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
       */
      public Builder removeClass_(int index) {
        if (class_Builder_ == null) {
          ensureClass_IsMutable();
          class__.remove(index);
          onChanged();
        } else {
          class_Builder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Class.Builder getClass_Builder(
          int index) {
        return getClass_FieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.ClassOrBuilder getClass_OrBuilder(
          int index) {
        if (class_Builder_ == null) {
          return class__.get(index);  } else {
          return class_Builder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.ClassOrBuilder> 
           getClass_OrBuilderList() {
        if (class_Builder_ != null) {
          return class_Builder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(class__);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Class.Builder addClass_Builder() {
        return getClass_FieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.ProtoBuf.Class.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Class.Builder addClass_Builder(
          int index) {
        return getClass_FieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.ProtoBuf.Class.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Class.Builder> 
           getClass_BuilderList() {
        return getClass_FieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Class, org.jetbrains.kotlin.metadata.ProtoBuf.Class.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.ClassOrBuilder> 
          getClass_FieldBuilder() {
        if (class_Builder_ == null) {
          class_Builder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.ProtoBuf.Class, org.jetbrains.kotlin.metadata.ProtoBuf.Class.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.ClassOrBuilder>(
                  class__,
                  ((bitField0_ & 0x00000008) != 0),
                  getParentForChildren(),
                  isClean());
          class__ = null;
        }
        return class_Builder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.PackageFragment)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.PackageFragment)
    private static final org.jetbrains.kotlin.metadata.ProtoBuf.PackageFragment DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.metadata.ProtoBuf.PackageFragment();
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.PackageFragment getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<PackageFragment>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<PackageFragment>() {
      @java.lang.Override
      public PackageFragment parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<PackageFragment> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<PackageFragment> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.PackageFragment getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ContractOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.Contract)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Effect> 
        getEffectList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Effect getEffect(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
     */
    int getEffectCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.EffectOrBuilder> 
        getEffectOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.EffectOrBuilder getEffectOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.metadata.Contract}
   */
  public static final class Contract extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.Contract)
      ContractOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        Contract.class.getName());
    }
    // Use Contract.newBuilder() to construct.
    private Contract(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Contract() {
      effect_ = java.util.Collections.emptyList();
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Contract_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Contract_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.metadata.ProtoBuf.Contract.class, org.jetbrains.kotlin.metadata.ProtoBuf.Contract.Builder.class);
    }

    public static final int EFFECT_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Effect> effect_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Effect> getEffectList() {
      return effect_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.EffectOrBuilder> 
        getEffectOrBuilderList() {
      return effect_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
     */
    @java.lang.Override
    public int getEffectCount() {
      return effect_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Effect getEffect(int index) {
      return effect_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.EffectOrBuilder getEffectOrBuilder(
        int index) {
      return effect_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getEffectCount(); i++) {
        if (!getEffect(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < effect_.size(); i++) {
        output.writeMessage(1, effect_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < effect_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, effect_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.metadata.ProtoBuf.Contract)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.metadata.ProtoBuf.Contract other = (org.jetbrains.kotlin.metadata.ProtoBuf.Contract) obj;

      if (!getEffectList()
          .equals(other.getEffectList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getEffectCount() > 0) {
        hash = (37 * hash) + EFFECT_FIELD_NUMBER;
        hash = (53 * hash) + getEffectList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Contract parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Contract parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Contract parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Contract parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Contract parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Contract parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Contract parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Contract parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Contract parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Contract parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Contract parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Contract parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.metadata.ProtoBuf.Contract prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.Contract}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.Contract)
        org.jetbrains.kotlin.metadata.ProtoBuf.ContractOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Contract_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Contract_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.metadata.ProtoBuf.Contract.class, org.jetbrains.kotlin.metadata.ProtoBuf.Contract.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.metadata.ProtoBuf.Contract.newBuilder()
      private Builder() {

      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        if (effectBuilder_ == null) {
          effect_ = java.util.Collections.emptyList();
        } else {
          effect_ = null;
          effectBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Contract_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Contract getDefaultInstanceForType() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.Contract.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Contract build() {
        org.jetbrains.kotlin.metadata.ProtoBuf.Contract result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Contract buildPartial() {
        org.jetbrains.kotlin.metadata.ProtoBuf.Contract result = new org.jetbrains.kotlin.metadata.ProtoBuf.Contract(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(org.jetbrains.kotlin.metadata.ProtoBuf.Contract result) {
        if (effectBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            effect_ = java.util.Collections.unmodifiableList(effect_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.effect_ = effect_;
        } else {
          result.effect_ = effectBuilder_.build();
        }
      }

      private void buildPartial0(org.jetbrains.kotlin.metadata.ProtoBuf.Contract result) {
        int from_bitField0_ = bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.metadata.ProtoBuf.Contract) {
          return mergeFrom((org.jetbrains.kotlin.metadata.ProtoBuf.Contract)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.metadata.ProtoBuf.Contract other) {
        if (other == org.jetbrains.kotlin.metadata.ProtoBuf.Contract.getDefaultInstance()) return this;
        if (effectBuilder_ == null) {
          if (!other.effect_.isEmpty()) {
            if (effect_.isEmpty()) {
              effect_ = other.effect_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureEffectIsMutable();
              effect_.addAll(other.effect_);
            }
            onChanged();
          }
        } else {
          if (!other.effect_.isEmpty()) {
            if (effectBuilder_.isEmpty()) {
              effectBuilder_.dispose();
              effectBuilder_ = null;
              effect_ = other.effect_;
              bitField0_ = (bitField0_ & ~0x00000001);
              effectBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getEffectFieldBuilder() : null;
            } else {
              effectBuilder_.addAllMessages(other.effect_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        for (int i = 0; i < getEffectCount(); i++) {
          if (!getEffect(i).isInitialized()) {
            return false;
          }
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                org.jetbrains.kotlin.metadata.ProtoBuf.Effect m =
                    input.readMessage(
                        org.jetbrains.kotlin.metadata.ProtoBuf.Effect.parser(),
                        extensionRegistry);
                if (effectBuilder_ == null) {
                  ensureEffectIsMutable();
                  effect_.add(m);
                } else {
                  effectBuilder_.addMessage(m);
                }
                break;
              } // case 10
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Effect> effect_ =
        java.util.Collections.emptyList();
      private void ensureEffectIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          effect_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.ProtoBuf.Effect>(effect_);
          bitField0_ |= 0x00000001;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Effect, org.jetbrains.kotlin.metadata.ProtoBuf.Effect.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.EffectOrBuilder> effectBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Effect> getEffectList() {
        if (effectBuilder_ == null) {
          return java.util.Collections.unmodifiableList(effect_);
        } else {
          return effectBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
       */
      public int getEffectCount() {
        if (effectBuilder_ == null) {
          return effect_.size();
        } else {
          return effectBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Effect getEffect(int index) {
        if (effectBuilder_ == null) {
          return effect_.get(index);
        } else {
          return effectBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
       */
      public Builder setEffect(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Effect value) {
        if (effectBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEffectIsMutable();
          effect_.set(index, value);
          onChanged();
        } else {
          effectBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
       */
      public Builder setEffect(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Effect.Builder builderForValue) {
        if (effectBuilder_ == null) {
          ensureEffectIsMutable();
          effect_.set(index, builderForValue.build());
          onChanged();
        } else {
          effectBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
       */
      public Builder addEffect(org.jetbrains.kotlin.metadata.ProtoBuf.Effect value) {
        if (effectBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEffectIsMutable();
          effect_.add(value);
          onChanged();
        } else {
          effectBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
       */
      public Builder addEffect(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Effect value) {
        if (effectBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEffectIsMutable();
          effect_.add(index, value);
          onChanged();
        } else {
          effectBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
       */
      public Builder addEffect(
          org.jetbrains.kotlin.metadata.ProtoBuf.Effect.Builder builderForValue) {
        if (effectBuilder_ == null) {
          ensureEffectIsMutable();
          effect_.add(builderForValue.build());
          onChanged();
        } else {
          effectBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
       */
      public Builder addEffect(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Effect.Builder builderForValue) {
        if (effectBuilder_ == null) {
          ensureEffectIsMutable();
          effect_.add(index, builderForValue.build());
          onChanged();
        } else {
          effectBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
       */
      public Builder addAllEffect(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Effect> values) {
        if (effectBuilder_ == null) {
          ensureEffectIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, effect_);
          onChanged();
        } else {
          effectBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
       */
      public Builder clearEffect() {
        if (effectBuilder_ == null) {
          effect_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          effectBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
       */
      public Builder removeEffect(int index) {
        if (effectBuilder_ == null) {
          ensureEffectIsMutable();
          effect_.remove(index);
          onChanged();
        } else {
          effectBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Effect.Builder getEffectBuilder(
          int index) {
        return getEffectFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.EffectOrBuilder getEffectOrBuilder(
          int index) {
        if (effectBuilder_ == null) {
          return effect_.get(index);  } else {
          return effectBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.EffectOrBuilder> 
           getEffectOrBuilderList() {
        if (effectBuilder_ != null) {
          return effectBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(effect_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Effect.Builder addEffectBuilder() {
        return getEffectFieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.ProtoBuf.Effect.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Effect.Builder addEffectBuilder(
          int index) {
        return getEffectFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.ProtoBuf.Effect.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Effect.Builder> 
           getEffectBuilderList() {
        return getEffectFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Effect, org.jetbrains.kotlin.metadata.ProtoBuf.Effect.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.EffectOrBuilder> 
          getEffectFieldBuilder() {
        if (effectBuilder_ == null) {
          effectBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.ProtoBuf.Effect, org.jetbrains.kotlin.metadata.ProtoBuf.Effect.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.EffectOrBuilder>(
                  effect_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          effect_ = null;
        }
        return effectBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.Contract)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.Contract)
    private static final org.jetbrains.kotlin.metadata.ProtoBuf.Contract DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.metadata.ProtoBuf.Contract();
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Contract getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<Contract>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<Contract>() {
      @java.lang.Override
      public Contract parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<Contract> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<Contract> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Contract getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface EffectOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.Effect)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>.org.jetbrains.kotlin.metadata.Effect.EffectType effect_type = 1;</code>
     * @return Whether the effectType field is set.
     */
    boolean hasEffectType();
    /**
     * <code>.org.jetbrains.kotlin.metadata.Effect.EffectType effect_type = 1;</code>
     * @return The effectType.
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Effect.EffectType getEffectType();

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Expression> 
        getEffectConstructorArgumentList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Expression getEffectConstructorArgument(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
     */
    int getEffectConstructorArgumentCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.ExpressionOrBuilder> 
        getEffectConstructorArgumentOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.ExpressionOrBuilder getEffectConstructorArgumentOrBuilder(
        int index);

    /**
     * <pre>
     * If present and condition_kind is 0 or absent, then whole message is clause of form 'Effect -&gt; Expression', where 'Effect'
     * is given by other fields in this message, and 'Expression' is stored in this field.
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.metadata.Expression conclusion_of_conditional_effect = 3;</code>
     * @return Whether the conclusionOfConditionalEffect field is set.
     */
    boolean hasConclusionOfConditionalEffect();
    /**
     * <pre>
     * If present and condition_kind is 0 or absent, then whole message is clause of form 'Effect -&gt; Expression', where 'Effect'
     * is given by other fields in this message, and 'Expression' is stored in this field.
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.metadata.Expression conclusion_of_conditional_effect = 3;</code>
     * @return The conclusionOfConditionalEffect.
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Expression getConclusionOfConditionalEffect();
    /**
     * <pre>
     * If present and condition_kind is 0 or absent, then whole message is clause of form 'Effect -&gt; Expression', where 'Effect'
     * is given by other fields in this message, and 'Expression' is stored in this field.
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.metadata.Expression conclusion_of_conditional_effect = 3;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.ExpressionOrBuilder getConclusionOfConditionalEffectOrBuilder();

    /**
     * <code>.org.jetbrains.kotlin.metadata.Effect.InvocationKind kind = 4;</code>
     * @return Whether the kind field is set.
     */
    boolean hasKind();
    /**
     * <code>.org.jetbrains.kotlin.metadata.Effect.InvocationKind kind = 4;</code>
     * @return The kind.
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Effect.InvocationKind getKind();

    /**
     * <code>.org.jetbrains.kotlin.metadata.Effect.EffectConditionKind condition_kind = 5;</code>
     * @return Whether the conditionKind field is set.
     */
    boolean hasConditionKind();
    /**
     * <code>.org.jetbrains.kotlin.metadata.Effect.EffectConditionKind condition_kind = 5;</code>
     * @return The conditionKind.
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Effect.EffectConditionKind getConditionKind();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.metadata.Effect}
   */
  public static final class Effect extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.Effect)
      EffectOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        Effect.class.getName());
    }
    // Use Effect.newBuilder() to construct.
    private Effect(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Effect() {
      effectType_ = 0;
      effectConstructorArgument_ = java.util.Collections.emptyList();
      kind_ = 0;
      conditionKind_ = 0;
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Effect_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Effect_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.metadata.ProtoBuf.Effect.class, org.jetbrains.kotlin.metadata.ProtoBuf.Effect.Builder.class);
    }

    /**
     * <pre>
     * This enum controls which effect this message contains and how 'effectConstructorArguments'
     * should be parsed.
     * Each enum value documented in the following syntax: "EffectName(arg1: T1, arg2: T2, ...)"
     * Those arguments are expected to be found in 'effectConstructorArguments' in exactly the same
     * order and amount as defined by signature, otherwise message should be dropped.
     * </pre>
     *
     * Protobuf enum {@code org.jetbrains.kotlin.metadata.Effect.EffectType}
     */
    public enum EffectType
        implements org.jetbrains.kotlin.protobuf.ProtocolMessageEnum {
      /**
       * <pre>
       * Returns(value: ConstantValue?)
       * </pre>
       *
       * <code>RETURNS_CONSTANT = 0;</code>
       */
      RETURNS_CONSTANT(0),
      /**
       * <pre>
       * CallsInPlace(callable: ParameterReference)
       * Additionally, InvocationKind in the field 'kind' may be provided to define exact amount of invocations.
       * </pre>
       *
       * <code>CALLS = 1;</code>
       */
      CALLS(1),
      /**
       * <pre>
       * ReturnsNotNull()
       * </pre>
       *
       * <code>RETURNS_NOT_NULL = 2;</code>
       */
      RETURNS_NOT_NULL(2),
      ;

      static {
        org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
          org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
          /* major= */ 4,
          /* minor= */ 29,
          /* patch= */ 3,
          /* suffix= */ "",
          EffectType.class.getName());
      }
      /**
       * <pre>
       * Returns(value: ConstantValue?)
       * </pre>
       *
       * <code>RETURNS_CONSTANT = 0;</code>
       */
      public static final int RETURNS_CONSTANT_VALUE = 0;
      /**
       * <pre>
       * CallsInPlace(callable: ParameterReference)
       * Additionally, InvocationKind in the field 'kind' may be provided to define exact amount of invocations.
       * </pre>
       *
       * <code>CALLS = 1;</code>
       */
      public static final int CALLS_VALUE = 1;
      /**
       * <pre>
       * ReturnsNotNull()
       * </pre>
       *
       * <code>RETURNS_NOT_NULL = 2;</code>
       */
      public static final int RETURNS_NOT_NULL_VALUE = 2;


      public final int getNumber() {
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static EffectType valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static EffectType forNumber(int value) {
        switch (value) {
          case 0: return RETURNS_CONSTANT;
          case 1: return CALLS;
          case 2: return RETURNS_NOT_NULL;
          default: return null;
        }
      }

      public static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<EffectType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<
          EffectType> internalValueMap =
            new org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<EffectType>() {
              public EffectType findValueByNumber(int number) {
                return EffectType.forNumber(number);
              }
            };

      public final org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.Effect.getDescriptor().getEnumTypes().get(0);
      }

      private static final EffectType[] VALUES = values();

      public static EffectType valueOf(
          org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private EffectType(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:org.jetbrains.kotlin.metadata.Effect.EffectType)
    }

    /**
     * Protobuf enum {@code org.jetbrains.kotlin.metadata.Effect.InvocationKind}
     */
    public enum InvocationKind
        implements org.jetbrains.kotlin.protobuf.ProtocolMessageEnum {
      /**
       * <code>AT_MOST_ONCE = 0;</code>
       */
      AT_MOST_ONCE(0),
      /**
       * <code>EXACTLY_ONCE = 1;</code>
       */
      EXACTLY_ONCE(1),
      /**
       * <code>AT_LEAST_ONCE = 2;</code>
       */
      AT_LEAST_ONCE(2),
      ;

      static {
        org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
          org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
          /* major= */ 4,
          /* minor= */ 29,
          /* patch= */ 3,
          /* suffix= */ "",
          InvocationKind.class.getName());
      }
      /**
       * <code>AT_MOST_ONCE = 0;</code>
       */
      public static final int AT_MOST_ONCE_VALUE = 0;
      /**
       * <code>EXACTLY_ONCE = 1;</code>
       */
      public static final int EXACTLY_ONCE_VALUE = 1;
      /**
       * <code>AT_LEAST_ONCE = 2;</code>
       */
      public static final int AT_LEAST_ONCE_VALUE = 2;


      public final int getNumber() {
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static InvocationKind valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static InvocationKind forNumber(int value) {
        switch (value) {
          case 0: return AT_MOST_ONCE;
          case 1: return EXACTLY_ONCE;
          case 2: return AT_LEAST_ONCE;
          default: return null;
        }
      }

      public static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<InvocationKind>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<
          InvocationKind> internalValueMap =
            new org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<InvocationKind>() {
              public InvocationKind findValueByNumber(int number) {
                return InvocationKind.forNumber(number);
              }
            };

      public final org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.Effect.getDescriptor().getEnumTypes().get(1);
      }

      private static final InvocationKind[] VALUES = values();

      public static InvocationKind valueOf(
          org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private InvocationKind(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:org.jetbrains.kotlin.metadata.Effect.InvocationKind)
    }

    /**
     * Protobuf enum {@code org.jetbrains.kotlin.metadata.Effect.EffectConditionKind}
     */
    public enum EffectConditionKind
        implements org.jetbrains.kotlin.protobuf.ProtocolMessageEnum {
      /**
       * <pre>
       * also default
       * </pre>
       *
       * <code>CONCLUSION_CONDITION = 0;</code>
       */
      CONCLUSION_CONDITION(0),
      /**
       * <pre>
       * "implies returns" condition. If condition_kind set to it, then then whole message is clause of form
       * </pre>
       *
       * <code>RETURNS_CONDITION = 1;</code>
       */
      RETURNS_CONDITION(1),
      /**
       * <pre>
       * 'Expression -&gt; ReturnsEffect', where 'ReturnsEffect' is given by other fields
       * and 'Expression' is stored in the conclusion_of_conditional_effect
       * </pre>
       *
       * <code>HOLDSIN_CONDITION = 2;</code>
       */
      HOLDSIN_CONDITION(2),
      ;

      static {
        org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
          org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
          /* major= */ 4,
          /* minor= */ 29,
          /* patch= */ 3,
          /* suffix= */ "",
          EffectConditionKind.class.getName());
      }
      /**
       * <pre>
       * also default
       * </pre>
       *
       * <code>CONCLUSION_CONDITION = 0;</code>
       */
      public static final int CONCLUSION_CONDITION_VALUE = 0;
      /**
       * <pre>
       * "implies returns" condition. If condition_kind set to it, then then whole message is clause of form
       * </pre>
       *
       * <code>RETURNS_CONDITION = 1;</code>
       */
      public static final int RETURNS_CONDITION_VALUE = 1;
      /**
       * <pre>
       * 'Expression -&gt; ReturnsEffect', where 'ReturnsEffect' is given by other fields
       * and 'Expression' is stored in the conclusion_of_conditional_effect
       * </pre>
       *
       * <code>HOLDSIN_CONDITION = 2;</code>
       */
      public static final int HOLDSIN_CONDITION_VALUE = 2;


      public final int getNumber() {
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static EffectConditionKind valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static EffectConditionKind forNumber(int value) {
        switch (value) {
          case 0: return CONCLUSION_CONDITION;
          case 1: return RETURNS_CONDITION;
          case 2: return HOLDSIN_CONDITION;
          default: return null;
        }
      }

      public static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<EffectConditionKind>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<
          EffectConditionKind> internalValueMap =
            new org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<EffectConditionKind>() {
              public EffectConditionKind findValueByNumber(int number) {
                return EffectConditionKind.forNumber(number);
              }
            };

      public final org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.Effect.getDescriptor().getEnumTypes().get(2);
      }

      private static final EffectConditionKind[] VALUES = values();

      public static EffectConditionKind valueOf(
          org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private EffectConditionKind(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:org.jetbrains.kotlin.metadata.Effect.EffectConditionKind)
    }

    private int bitField0_;
    public static final int EFFECT_TYPE_FIELD_NUMBER = 1;
    private int effectType_ = 0;
    /**
     * <code>.org.jetbrains.kotlin.metadata.Effect.EffectType effect_type = 1;</code>
     * @return Whether the effectType field is set.
     */
    @java.lang.Override public boolean hasEffectType() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Effect.EffectType effect_type = 1;</code>
     * @return The effectType.
     */
    @java.lang.Override public org.jetbrains.kotlin.metadata.ProtoBuf.Effect.EffectType getEffectType() {
      org.jetbrains.kotlin.metadata.ProtoBuf.Effect.EffectType result = org.jetbrains.kotlin.metadata.ProtoBuf.Effect.EffectType.forNumber(effectType_);
      return result == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Effect.EffectType.RETURNS_CONSTANT : result;
    }

    public static final int EFFECT_CONSTRUCTOR_ARGUMENT_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Expression> effectConstructorArgument_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Expression> getEffectConstructorArgumentList() {
      return effectConstructorArgument_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.ExpressionOrBuilder> 
        getEffectConstructorArgumentOrBuilderList() {
      return effectConstructorArgument_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
     */
    @java.lang.Override
    public int getEffectConstructorArgumentCount() {
      return effectConstructorArgument_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Expression getEffectConstructorArgument(int index) {
      return effectConstructorArgument_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.ExpressionOrBuilder getEffectConstructorArgumentOrBuilder(
        int index) {
      return effectConstructorArgument_.get(index);
    }

    public static final int CONCLUSION_OF_CONDITIONAL_EFFECT_FIELD_NUMBER = 3;
    private org.jetbrains.kotlin.metadata.ProtoBuf.Expression conclusionOfConditionalEffect_;
    /**
     * <pre>
     * If present and condition_kind is 0 or absent, then whole message is clause of form 'Effect -&gt; Expression', where 'Effect'
     * is given by other fields in this message, and 'Expression' is stored in this field.
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.metadata.Expression conclusion_of_conditional_effect = 3;</code>
     * @return Whether the conclusionOfConditionalEffect field is set.
     */
    @java.lang.Override
    public boolean hasConclusionOfConditionalEffect() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * If present and condition_kind is 0 or absent, then whole message is clause of form 'Effect -&gt; Expression', where 'Effect'
     * is given by other fields in this message, and 'Expression' is stored in this field.
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.metadata.Expression conclusion_of_conditional_effect = 3;</code>
     * @return The conclusionOfConditionalEffect.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Expression getConclusionOfConditionalEffect() {
      return conclusionOfConditionalEffect_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Expression.getDefaultInstance() : conclusionOfConditionalEffect_;
    }
    /**
     * <pre>
     * If present and condition_kind is 0 or absent, then whole message is clause of form 'Effect -&gt; Expression', where 'Effect'
     * is given by other fields in this message, and 'Expression' is stored in this field.
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.metadata.Expression conclusion_of_conditional_effect = 3;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.ExpressionOrBuilder getConclusionOfConditionalEffectOrBuilder() {
      return conclusionOfConditionalEffect_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Expression.getDefaultInstance() : conclusionOfConditionalEffect_;
    }

    public static final int KIND_FIELD_NUMBER = 4;
    private int kind_ = 0;
    /**
     * <code>.org.jetbrains.kotlin.metadata.Effect.InvocationKind kind = 4;</code>
     * @return Whether the kind field is set.
     */
    @java.lang.Override public boolean hasKind() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Effect.InvocationKind kind = 4;</code>
     * @return The kind.
     */
    @java.lang.Override public org.jetbrains.kotlin.metadata.ProtoBuf.Effect.InvocationKind getKind() {
      org.jetbrains.kotlin.metadata.ProtoBuf.Effect.InvocationKind result = org.jetbrains.kotlin.metadata.ProtoBuf.Effect.InvocationKind.forNumber(kind_);
      return result == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Effect.InvocationKind.AT_MOST_ONCE : result;
    }

    public static final int CONDITION_KIND_FIELD_NUMBER = 5;
    private int conditionKind_ = 0;
    /**
     * <code>.org.jetbrains.kotlin.metadata.Effect.EffectConditionKind condition_kind = 5;</code>
     * @return Whether the conditionKind field is set.
     */
    @java.lang.Override public boolean hasConditionKind() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Effect.EffectConditionKind condition_kind = 5;</code>
     * @return The conditionKind.
     */
    @java.lang.Override public org.jetbrains.kotlin.metadata.ProtoBuf.Effect.EffectConditionKind getConditionKind() {
      org.jetbrains.kotlin.metadata.ProtoBuf.Effect.EffectConditionKind result = org.jetbrains.kotlin.metadata.ProtoBuf.Effect.EffectConditionKind.forNumber(conditionKind_);
      return result == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Effect.EffectConditionKind.CONCLUSION_CONDITION : result;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getEffectConstructorArgumentCount(); i++) {
        if (!getEffectConstructorArgument(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasConclusionOfConditionalEffect()) {
        if (!getConclusionOfConditionalEffect().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeEnum(1, effectType_);
      }
      for (int i = 0; i < effectConstructorArgument_.size(); i++) {
        output.writeMessage(2, effectConstructorArgument_.get(i));
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeMessage(3, getConclusionOfConditionalEffect());
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeEnum(4, kind_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeEnum(5, conditionKind_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeEnumSize(1, effectType_);
      }
      for (int i = 0; i < effectConstructorArgument_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, effectConstructorArgument_.get(i));
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(3, getConclusionOfConditionalEffect());
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeEnumSize(4, kind_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeEnumSize(5, conditionKind_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.metadata.ProtoBuf.Effect)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.metadata.ProtoBuf.Effect other = (org.jetbrains.kotlin.metadata.ProtoBuf.Effect) obj;

      if (hasEffectType() != other.hasEffectType()) return false;
      if (hasEffectType()) {
        if (effectType_ != other.effectType_) return false;
      }
      if (!getEffectConstructorArgumentList()
          .equals(other.getEffectConstructorArgumentList())) return false;
      if (hasConclusionOfConditionalEffect() != other.hasConclusionOfConditionalEffect()) return false;
      if (hasConclusionOfConditionalEffect()) {
        if (!getConclusionOfConditionalEffect()
            .equals(other.getConclusionOfConditionalEffect())) return false;
      }
      if (hasKind() != other.hasKind()) return false;
      if (hasKind()) {
        if (kind_ != other.kind_) return false;
      }
      if (hasConditionKind() != other.hasConditionKind()) return false;
      if (hasConditionKind()) {
        if (conditionKind_ != other.conditionKind_) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasEffectType()) {
        hash = (37 * hash) + EFFECT_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + effectType_;
      }
      if (getEffectConstructorArgumentCount() > 0) {
        hash = (37 * hash) + EFFECT_CONSTRUCTOR_ARGUMENT_FIELD_NUMBER;
        hash = (53 * hash) + getEffectConstructorArgumentList().hashCode();
      }
      if (hasConclusionOfConditionalEffect()) {
        hash = (37 * hash) + CONCLUSION_OF_CONDITIONAL_EFFECT_FIELD_NUMBER;
        hash = (53 * hash) + getConclusionOfConditionalEffect().hashCode();
      }
      if (hasKind()) {
        hash = (37 * hash) + KIND_FIELD_NUMBER;
        hash = (53 * hash) + kind_;
      }
      if (hasConditionKind()) {
        hash = (37 * hash) + CONDITION_KIND_FIELD_NUMBER;
        hash = (53 * hash) + conditionKind_;
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Effect parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Effect parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Effect parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Effect parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Effect parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Effect parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Effect parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Effect parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Effect parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Effect parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Effect parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Effect parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.metadata.ProtoBuf.Effect prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.Effect}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.Effect)
        org.jetbrains.kotlin.metadata.ProtoBuf.EffectOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Effect_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Effect_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.metadata.ProtoBuf.Effect.class, org.jetbrains.kotlin.metadata.ProtoBuf.Effect.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.metadata.ProtoBuf.Effect.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getEffectConstructorArgumentFieldBuilder();
          getConclusionOfConditionalEffectFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        effectType_ = 0;
        if (effectConstructorArgumentBuilder_ == null) {
          effectConstructorArgument_ = java.util.Collections.emptyList();
        } else {
          effectConstructorArgument_ = null;
          effectConstructorArgumentBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        conclusionOfConditionalEffect_ = null;
        if (conclusionOfConditionalEffectBuilder_ != null) {
          conclusionOfConditionalEffectBuilder_.dispose();
          conclusionOfConditionalEffectBuilder_ = null;
        }
        kind_ = 0;
        conditionKind_ = 0;
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Effect_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Effect getDefaultInstanceForType() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.Effect.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Effect build() {
        org.jetbrains.kotlin.metadata.ProtoBuf.Effect result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Effect buildPartial() {
        org.jetbrains.kotlin.metadata.ProtoBuf.Effect result = new org.jetbrains.kotlin.metadata.ProtoBuf.Effect(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(org.jetbrains.kotlin.metadata.ProtoBuf.Effect result) {
        if (effectConstructorArgumentBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            effectConstructorArgument_ = java.util.Collections.unmodifiableList(effectConstructorArgument_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.effectConstructorArgument_ = effectConstructorArgument_;
        } else {
          result.effectConstructorArgument_ = effectConstructorArgumentBuilder_.build();
        }
      }

      private void buildPartial0(org.jetbrains.kotlin.metadata.ProtoBuf.Effect result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.effectType_ = effectType_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.conclusionOfConditionalEffect_ = conclusionOfConditionalEffectBuilder_ == null
              ? conclusionOfConditionalEffect_
              : conclusionOfConditionalEffectBuilder_.build();
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.kind_ = kind_;
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.conditionKind_ = conditionKind_;
          to_bitField0_ |= 0x00000008;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.metadata.ProtoBuf.Effect) {
          return mergeFrom((org.jetbrains.kotlin.metadata.ProtoBuf.Effect)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.metadata.ProtoBuf.Effect other) {
        if (other == org.jetbrains.kotlin.metadata.ProtoBuf.Effect.getDefaultInstance()) return this;
        if (other.hasEffectType()) {
          setEffectType(other.getEffectType());
        }
        if (effectConstructorArgumentBuilder_ == null) {
          if (!other.effectConstructorArgument_.isEmpty()) {
            if (effectConstructorArgument_.isEmpty()) {
              effectConstructorArgument_ = other.effectConstructorArgument_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureEffectConstructorArgumentIsMutable();
              effectConstructorArgument_.addAll(other.effectConstructorArgument_);
            }
            onChanged();
          }
        } else {
          if (!other.effectConstructorArgument_.isEmpty()) {
            if (effectConstructorArgumentBuilder_.isEmpty()) {
              effectConstructorArgumentBuilder_.dispose();
              effectConstructorArgumentBuilder_ = null;
              effectConstructorArgument_ = other.effectConstructorArgument_;
              bitField0_ = (bitField0_ & ~0x00000002);
              effectConstructorArgumentBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getEffectConstructorArgumentFieldBuilder() : null;
            } else {
              effectConstructorArgumentBuilder_.addAllMessages(other.effectConstructorArgument_);
            }
          }
        }
        if (other.hasConclusionOfConditionalEffect()) {
          mergeConclusionOfConditionalEffect(other.getConclusionOfConditionalEffect());
        }
        if (other.hasKind()) {
          setKind(other.getKind());
        }
        if (other.hasConditionKind()) {
          setConditionKind(other.getConditionKind());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        for (int i = 0; i < getEffectConstructorArgumentCount(); i++) {
          if (!getEffectConstructorArgument(i).isInitialized()) {
            return false;
          }
        }
        if (hasConclusionOfConditionalEffect()) {
          if (!getConclusionOfConditionalEffect().isInitialized()) {
            return false;
          }
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                int tmpRaw = input.readEnum();
                org.jetbrains.kotlin.metadata.ProtoBuf.Effect.EffectType tmpValue =
                    org.jetbrains.kotlin.metadata.ProtoBuf.Effect.EffectType.forNumber(tmpRaw);
                if (tmpValue == null) {
                  mergeUnknownVarintField(1, tmpRaw);
                } else {
                  effectType_ = tmpRaw;
                  bitField0_ |= 0x00000001;
                }
                break;
              } // case 8
              case 18: {
                org.jetbrains.kotlin.metadata.ProtoBuf.Expression m =
                    input.readMessage(
                        org.jetbrains.kotlin.metadata.ProtoBuf.Expression.parser(),
                        extensionRegistry);
                if (effectConstructorArgumentBuilder_ == null) {
                  ensureEffectConstructorArgumentIsMutable();
                  effectConstructorArgument_.add(m);
                } else {
                  effectConstructorArgumentBuilder_.addMessage(m);
                }
                break;
              } // case 18
              case 26: {
                input.readMessage(
                    getConclusionOfConditionalEffectFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              case 32: {
                int tmpRaw = input.readEnum();
                org.jetbrains.kotlin.metadata.ProtoBuf.Effect.InvocationKind tmpValue =
                    org.jetbrains.kotlin.metadata.ProtoBuf.Effect.InvocationKind.forNumber(tmpRaw);
                if (tmpValue == null) {
                  mergeUnknownVarintField(4, tmpRaw);
                } else {
                  kind_ = tmpRaw;
                  bitField0_ |= 0x00000008;
                }
                break;
              } // case 32
              case 40: {
                int tmpRaw = input.readEnum();
                org.jetbrains.kotlin.metadata.ProtoBuf.Effect.EffectConditionKind tmpValue =
                    org.jetbrains.kotlin.metadata.ProtoBuf.Effect.EffectConditionKind.forNumber(tmpRaw);
                if (tmpValue == null) {
                  mergeUnknownVarintField(5, tmpRaw);
                } else {
                  conditionKind_ = tmpRaw;
                  bitField0_ |= 0x00000010;
                }
                break;
              } // case 40
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int effectType_ = 0;
      /**
       * <code>.org.jetbrains.kotlin.metadata.Effect.EffectType effect_type = 1;</code>
       * @return Whether the effectType field is set.
       */
      @java.lang.Override public boolean hasEffectType() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Effect.EffectType effect_type = 1;</code>
       * @return The effectType.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Effect.EffectType getEffectType() {
        org.jetbrains.kotlin.metadata.ProtoBuf.Effect.EffectType result = org.jetbrains.kotlin.metadata.ProtoBuf.Effect.EffectType.forNumber(effectType_);
        return result == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Effect.EffectType.RETURNS_CONSTANT : result;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Effect.EffectType effect_type = 1;</code>
       * @param value The effectType to set.
       * @return This builder for chaining.
       */
      public Builder setEffectType(org.jetbrains.kotlin.metadata.ProtoBuf.Effect.EffectType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        effectType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Effect.EffectType effect_type = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearEffectType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        effectType_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Expression> effectConstructorArgument_ =
        java.util.Collections.emptyList();
      private void ensureEffectConstructorArgumentIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          effectConstructorArgument_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.ProtoBuf.Expression>(effectConstructorArgument_);
          bitField0_ |= 0x00000002;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Expression, org.jetbrains.kotlin.metadata.ProtoBuf.Expression.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.ExpressionOrBuilder> effectConstructorArgumentBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Expression> getEffectConstructorArgumentList() {
        if (effectConstructorArgumentBuilder_ == null) {
          return java.util.Collections.unmodifiableList(effectConstructorArgument_);
        } else {
          return effectConstructorArgumentBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
       */
      public int getEffectConstructorArgumentCount() {
        if (effectConstructorArgumentBuilder_ == null) {
          return effectConstructorArgument_.size();
        } else {
          return effectConstructorArgumentBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Expression getEffectConstructorArgument(int index) {
        if (effectConstructorArgumentBuilder_ == null) {
          return effectConstructorArgument_.get(index);
        } else {
          return effectConstructorArgumentBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
       */
      public Builder setEffectConstructorArgument(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Expression value) {
        if (effectConstructorArgumentBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEffectConstructorArgumentIsMutable();
          effectConstructorArgument_.set(index, value);
          onChanged();
        } else {
          effectConstructorArgumentBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
       */
      public Builder setEffectConstructorArgument(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Expression.Builder builderForValue) {
        if (effectConstructorArgumentBuilder_ == null) {
          ensureEffectConstructorArgumentIsMutable();
          effectConstructorArgument_.set(index, builderForValue.build());
          onChanged();
        } else {
          effectConstructorArgumentBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
       */
      public Builder addEffectConstructorArgument(org.jetbrains.kotlin.metadata.ProtoBuf.Expression value) {
        if (effectConstructorArgumentBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEffectConstructorArgumentIsMutable();
          effectConstructorArgument_.add(value);
          onChanged();
        } else {
          effectConstructorArgumentBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
       */
      public Builder addEffectConstructorArgument(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Expression value) {
        if (effectConstructorArgumentBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEffectConstructorArgumentIsMutable();
          effectConstructorArgument_.add(index, value);
          onChanged();
        } else {
          effectConstructorArgumentBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
       */
      public Builder addEffectConstructorArgument(
          org.jetbrains.kotlin.metadata.ProtoBuf.Expression.Builder builderForValue) {
        if (effectConstructorArgumentBuilder_ == null) {
          ensureEffectConstructorArgumentIsMutable();
          effectConstructorArgument_.add(builderForValue.build());
          onChanged();
        } else {
          effectConstructorArgumentBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
       */
      public Builder addEffectConstructorArgument(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Expression.Builder builderForValue) {
        if (effectConstructorArgumentBuilder_ == null) {
          ensureEffectConstructorArgumentIsMutable();
          effectConstructorArgument_.add(index, builderForValue.build());
          onChanged();
        } else {
          effectConstructorArgumentBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
       */
      public Builder addAllEffectConstructorArgument(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Expression> values) {
        if (effectConstructorArgumentBuilder_ == null) {
          ensureEffectConstructorArgumentIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, effectConstructorArgument_);
          onChanged();
        } else {
          effectConstructorArgumentBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
       */
      public Builder clearEffectConstructorArgument() {
        if (effectConstructorArgumentBuilder_ == null) {
          effectConstructorArgument_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          effectConstructorArgumentBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
       */
      public Builder removeEffectConstructorArgument(int index) {
        if (effectConstructorArgumentBuilder_ == null) {
          ensureEffectConstructorArgumentIsMutable();
          effectConstructorArgument_.remove(index);
          onChanged();
        } else {
          effectConstructorArgumentBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Expression.Builder getEffectConstructorArgumentBuilder(
          int index) {
        return getEffectConstructorArgumentFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.ExpressionOrBuilder getEffectConstructorArgumentOrBuilder(
          int index) {
        if (effectConstructorArgumentBuilder_ == null) {
          return effectConstructorArgument_.get(index);  } else {
          return effectConstructorArgumentBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.ExpressionOrBuilder> 
           getEffectConstructorArgumentOrBuilderList() {
        if (effectConstructorArgumentBuilder_ != null) {
          return effectConstructorArgumentBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(effectConstructorArgument_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Expression.Builder addEffectConstructorArgumentBuilder() {
        return getEffectConstructorArgumentFieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.ProtoBuf.Expression.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Expression.Builder addEffectConstructorArgumentBuilder(
          int index) {
        return getEffectConstructorArgumentFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.ProtoBuf.Expression.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Expression.Builder> 
           getEffectConstructorArgumentBuilderList() {
        return getEffectConstructorArgumentFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Expression, org.jetbrains.kotlin.metadata.ProtoBuf.Expression.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.ExpressionOrBuilder> 
          getEffectConstructorArgumentFieldBuilder() {
        if (effectConstructorArgumentBuilder_ == null) {
          effectConstructorArgumentBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.ProtoBuf.Expression, org.jetbrains.kotlin.metadata.ProtoBuf.Expression.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.ExpressionOrBuilder>(
                  effectConstructorArgument_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          effectConstructorArgument_ = null;
        }
        return effectConstructorArgumentBuilder_;
      }

      private org.jetbrains.kotlin.metadata.ProtoBuf.Expression conclusionOfConditionalEffect_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Expression, org.jetbrains.kotlin.metadata.ProtoBuf.Expression.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.ExpressionOrBuilder> conclusionOfConditionalEffectBuilder_;
      /**
       * <pre>
       * If present and condition_kind is 0 or absent, then whole message is clause of form 'Effect -&gt; Expression', where 'Effect'
       * is given by other fields in this message, and 'Expression' is stored in this field.
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.Expression conclusion_of_conditional_effect = 3;</code>
       * @return Whether the conclusionOfConditionalEffect field is set.
       */
      public boolean hasConclusionOfConditionalEffect() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * If present and condition_kind is 0 or absent, then whole message is clause of form 'Effect -&gt; Expression', where 'Effect'
       * is given by other fields in this message, and 'Expression' is stored in this field.
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.Expression conclusion_of_conditional_effect = 3;</code>
       * @return The conclusionOfConditionalEffect.
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Expression getConclusionOfConditionalEffect() {
        if (conclusionOfConditionalEffectBuilder_ == null) {
          return conclusionOfConditionalEffect_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Expression.getDefaultInstance() : conclusionOfConditionalEffect_;
        } else {
          return conclusionOfConditionalEffectBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * If present and condition_kind is 0 or absent, then whole message is clause of form 'Effect -&gt; Expression', where 'Effect'
       * is given by other fields in this message, and 'Expression' is stored in this field.
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.Expression conclusion_of_conditional_effect = 3;</code>
       */
      public Builder setConclusionOfConditionalEffect(org.jetbrains.kotlin.metadata.ProtoBuf.Expression value) {
        if (conclusionOfConditionalEffectBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          conclusionOfConditionalEffect_ = value;
        } else {
          conclusionOfConditionalEffectBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If present and condition_kind is 0 or absent, then whole message is clause of form 'Effect -&gt; Expression', where 'Effect'
       * is given by other fields in this message, and 'Expression' is stored in this field.
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.Expression conclusion_of_conditional_effect = 3;</code>
       */
      public Builder setConclusionOfConditionalEffect(
          org.jetbrains.kotlin.metadata.ProtoBuf.Expression.Builder builderForValue) {
        if (conclusionOfConditionalEffectBuilder_ == null) {
          conclusionOfConditionalEffect_ = builderForValue.build();
        } else {
          conclusionOfConditionalEffectBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If present and condition_kind is 0 or absent, then whole message is clause of form 'Effect -&gt; Expression', where 'Effect'
       * is given by other fields in this message, and 'Expression' is stored in this field.
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.Expression conclusion_of_conditional_effect = 3;</code>
       */
      public Builder mergeConclusionOfConditionalEffect(org.jetbrains.kotlin.metadata.ProtoBuf.Expression value) {
        if (conclusionOfConditionalEffectBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0) &&
            conclusionOfConditionalEffect_ != null &&
            conclusionOfConditionalEffect_ != org.jetbrains.kotlin.metadata.ProtoBuf.Expression.getDefaultInstance()) {
            getConclusionOfConditionalEffectBuilder().mergeFrom(value);
          } else {
            conclusionOfConditionalEffect_ = value;
          }
        } else {
          conclusionOfConditionalEffectBuilder_.mergeFrom(value);
        }
        if (conclusionOfConditionalEffect_ != null) {
          bitField0_ |= 0x00000004;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * If present and condition_kind is 0 or absent, then whole message is clause of form 'Effect -&gt; Expression', where 'Effect'
       * is given by other fields in this message, and 'Expression' is stored in this field.
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.Expression conclusion_of_conditional_effect = 3;</code>
       */
      public Builder clearConclusionOfConditionalEffect() {
        bitField0_ = (bitField0_ & ~0x00000004);
        conclusionOfConditionalEffect_ = null;
        if (conclusionOfConditionalEffectBuilder_ != null) {
          conclusionOfConditionalEffectBuilder_.dispose();
          conclusionOfConditionalEffectBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If present and condition_kind is 0 or absent, then whole message is clause of form 'Effect -&gt; Expression', where 'Effect'
       * is given by other fields in this message, and 'Expression' is stored in this field.
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.Expression conclusion_of_conditional_effect = 3;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Expression.Builder getConclusionOfConditionalEffectBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getConclusionOfConditionalEffectFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * If present and condition_kind is 0 or absent, then whole message is clause of form 'Effect -&gt; Expression', where 'Effect'
       * is given by other fields in this message, and 'Expression' is stored in this field.
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.Expression conclusion_of_conditional_effect = 3;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.ExpressionOrBuilder getConclusionOfConditionalEffectOrBuilder() {
        if (conclusionOfConditionalEffectBuilder_ != null) {
          return conclusionOfConditionalEffectBuilder_.getMessageOrBuilder();
        } else {
          return conclusionOfConditionalEffect_ == null ?
              org.jetbrains.kotlin.metadata.ProtoBuf.Expression.getDefaultInstance() : conclusionOfConditionalEffect_;
        }
      }
      /**
       * <pre>
       * If present and condition_kind is 0 or absent, then whole message is clause of form 'Effect -&gt; Expression', where 'Effect'
       * is given by other fields in this message, and 'Expression' is stored in this field.
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.Expression conclusion_of_conditional_effect = 3;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Expression, org.jetbrains.kotlin.metadata.ProtoBuf.Expression.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.ExpressionOrBuilder> 
          getConclusionOfConditionalEffectFieldBuilder() {
        if (conclusionOfConditionalEffectBuilder_ == null) {
          conclusionOfConditionalEffectBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.metadata.ProtoBuf.Expression, org.jetbrains.kotlin.metadata.ProtoBuf.Expression.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.ExpressionOrBuilder>(
                  getConclusionOfConditionalEffect(),
                  getParentForChildren(),
                  isClean());
          conclusionOfConditionalEffect_ = null;
        }
        return conclusionOfConditionalEffectBuilder_;
      }

      private int kind_ = 0;
      /**
       * <code>.org.jetbrains.kotlin.metadata.Effect.InvocationKind kind = 4;</code>
       * @return Whether the kind field is set.
       */
      @java.lang.Override public boolean hasKind() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Effect.InvocationKind kind = 4;</code>
       * @return The kind.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Effect.InvocationKind getKind() {
        org.jetbrains.kotlin.metadata.ProtoBuf.Effect.InvocationKind result = org.jetbrains.kotlin.metadata.ProtoBuf.Effect.InvocationKind.forNumber(kind_);
        return result == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Effect.InvocationKind.AT_MOST_ONCE : result;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Effect.InvocationKind kind = 4;</code>
       * @param value The kind to set.
       * @return This builder for chaining.
       */
      public Builder setKind(org.jetbrains.kotlin.metadata.ProtoBuf.Effect.InvocationKind value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000008;
        kind_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Effect.InvocationKind kind = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearKind() {
        bitField0_ = (bitField0_ & ~0x00000008);
        kind_ = 0;
        onChanged();
        return this;
      }

      private int conditionKind_ = 0;
      /**
       * <code>.org.jetbrains.kotlin.metadata.Effect.EffectConditionKind condition_kind = 5;</code>
       * @return Whether the conditionKind field is set.
       */
      @java.lang.Override public boolean hasConditionKind() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Effect.EffectConditionKind condition_kind = 5;</code>
       * @return The conditionKind.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Effect.EffectConditionKind getConditionKind() {
        org.jetbrains.kotlin.metadata.ProtoBuf.Effect.EffectConditionKind result = org.jetbrains.kotlin.metadata.ProtoBuf.Effect.EffectConditionKind.forNumber(conditionKind_);
        return result == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Effect.EffectConditionKind.CONCLUSION_CONDITION : result;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Effect.EffectConditionKind condition_kind = 5;</code>
       * @param value The conditionKind to set.
       * @return This builder for chaining.
       */
      public Builder setConditionKind(org.jetbrains.kotlin.metadata.ProtoBuf.Effect.EffectConditionKind value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000010;
        conditionKind_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Effect.EffectConditionKind condition_kind = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearConditionKind() {
        bitField0_ = (bitField0_ & ~0x00000010);
        conditionKind_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.Effect)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.Effect)
    private static final org.jetbrains.kotlin.metadata.ProtoBuf.Effect DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.metadata.ProtoBuf.Effect();
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Effect getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<Effect>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<Effect>() {
      @java.lang.Override
      public Effect parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<Effect> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<Effect> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Effect getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ExpressionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.Expression)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *
     * isNegated =&gt; this expression should be negated
     * isIsNullPredicate =&gt; this expression is IsNullPredicate with 'variableName' as argument
     * </pre>
     *
     * <code>int32 flags = 1 [default = 0];</code>
     * @return Whether the flags field is set.
     */
    boolean hasFlags();
    /**
     * <pre>
     *
     * isNegated =&gt; this expression should be negated
     * isIsNullPredicate =&gt; this expression is IsNullPredicate with 'variableName' as argument
     * </pre>
     *
     * <code>int32 flags = 1 [default = 0];</code>
     * @return The flags.
     */
    int getFlags();

    /**
     * <pre>
     * stored as index in valueParameters list of owner-function in 1-indexation
     * Index '0' is reserved for extension receiver
     * </pre>
     *
     * <code>int32 value_parameter_reference = 2;</code>
     * @return Whether the valueParameterReference field is set.
     */
    boolean hasValueParameterReference();
    /**
     * <pre>
     * stored as index in valueParameters list of owner-function in 1-indexation
     * Index '0' is reserved for extension receiver
     * </pre>
     *
     * <code>int32 value_parameter_reference = 2;</code>
     * @return The valueParameterReference.
     */
    int getValueParameterReference();

    /**
     * <code>.org.jetbrains.kotlin.metadata.Expression.ConstantValue constant_value = 3;</code>
     * @return Whether the constantValue field is set.
     */
    boolean hasConstantValue();
    /**
     * <code>.org.jetbrains.kotlin.metadata.Expression.ConstantValue constant_value = 3;</code>
     * @return The constantValue.
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Expression.ConstantValue getConstantValue();

    /**
     * <pre>
     * present =&gt; this expression is IsInstancePredicate,  with 'variableName' as LHS
     * and with type encoded in either one of next two fields as RHS.
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.metadata.Type is_instance_type = 4;</code>
     * @return Whether the isInstanceType field is set.
     */
    boolean hasIsInstanceType();
    /**
     * <pre>
     * present =&gt; this expression is IsInstancePredicate,  with 'variableName' as LHS
     * and with type encoded in either one of next two fields as RHS.
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.metadata.Type is_instance_type = 4;</code>
     * @return The isInstanceType.
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Type getIsInstanceType();
    /**
     * <pre>
     * present =&gt; this expression is IsInstancePredicate,  with 'variableName' as LHS
     * and with type encoded in either one of next two fields as RHS.
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.metadata.Type is_instance_type = 4;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder getIsInstanceTypeOrBuilder();

    /**
     * <code>int32 is_instance_type_id = 5 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return Whether the isInstanceTypeId field is set.
     */
    boolean hasIsInstanceTypeId();
    /**
     * <code>int32 is_instance_type_id = 5 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return The isInstanceTypeId.
     */
    int getIsInstanceTypeId();

    /**
     * <pre>
     * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
     * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
     * it is optimized and embedded straight into this message
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Expression> 
        getAndArgumentList();
    /**
     * <pre>
     * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
     * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
     * it is optimized and embedded straight into this message
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Expression getAndArgument(int index);
    /**
     * <pre>
     * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
     * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
     * it is optimized and embedded straight into this message
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
     */
    int getAndArgumentCount();
    /**
     * <pre>
     * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
     * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
     * it is optimized and embedded straight into this message
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.ExpressionOrBuilder> 
        getAndArgumentOrBuilderList();
    /**
     * <pre>
     * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
     * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
     * it is optimized and embedded straight into this message
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.ExpressionOrBuilder getAndArgumentOrBuilder(
        int index);

    /**
     * <pre>
     * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
     * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
     * it is optimized and embedded straight into this message.
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Expression> 
        getOrArgumentList();
    /**
     * <pre>
     * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
     * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
     * it is optimized and embedded straight into this message.
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Expression getOrArgument(int index);
    /**
     * <pre>
     * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
     * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
     * it is optimized and embedded straight into this message.
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
     */
    int getOrArgumentCount();
    /**
     * <pre>
     * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
     * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
     * it is optimized and embedded straight into this message.
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.ExpressionOrBuilder> 
        getOrArgumentOrBuilderList();
    /**
     * <pre>
     * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
     * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
     * it is optimized and embedded straight into this message.
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.ExpressionOrBuilder getOrArgumentOrBuilder(
        int index);
  }
  /**
   * <pre>
   * We use some trickery to optimize memory footprint of contract-expressions:
   * exact type of Expression is determined based on its contents.
   * </pre>
   *
   * Protobuf type {@code org.jetbrains.kotlin.metadata.Expression}
   */
  public static final class Expression extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.Expression)
      ExpressionOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        Expression.class.getName());
    }
    // Use Expression.newBuilder() to construct.
    private Expression(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Expression() {
      constantValue_ = 0;
      andArgument_ = java.util.Collections.emptyList();
      orArgument_ = java.util.Collections.emptyList();
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Expression_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Expression_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.metadata.ProtoBuf.Expression.class, org.jetbrains.kotlin.metadata.ProtoBuf.Expression.Builder.class);
    }

    /**
     * Protobuf enum {@code org.jetbrains.kotlin.metadata.Expression.ConstantValue}
     */
    public enum ConstantValue
        implements org.jetbrains.kotlin.protobuf.ProtocolMessageEnum {
      /**
       * <code>TRUE = 0;</code>
       */
      TRUE(0),
      /**
       * <code>FALSE = 1;</code>
       */
      FALSE(1),
      /**
       * <code>NULL = 2;</code>
       */
      NULL(2),
      ;

      static {
        org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
          org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
          /* major= */ 4,
          /* minor= */ 29,
          /* patch= */ 3,
          /* suffix= */ "",
          ConstantValue.class.getName());
      }
      /**
       * <code>TRUE = 0;</code>
       */
      public static final int TRUE_VALUE = 0;
      /**
       * <code>FALSE = 1;</code>
       */
      public static final int FALSE_VALUE = 1;
      /**
       * <code>NULL = 2;</code>
       */
      public static final int NULL_VALUE = 2;


      public final int getNumber() {
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ConstantValue valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static ConstantValue forNumber(int value) {
        switch (value) {
          case 0: return TRUE;
          case 1: return FALSE;
          case 2: return NULL;
          default: return null;
        }
      }

      public static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<ConstantValue>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<
          ConstantValue> internalValueMap =
            new org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<ConstantValue>() {
              public ConstantValue findValueByNumber(int number) {
                return ConstantValue.forNumber(number);
              }
            };

      public final org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.Expression.getDescriptor().getEnumTypes().get(0);
      }

      private static final ConstantValue[] VALUES = values();

      public static ConstantValue valueOf(
          org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private ConstantValue(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:org.jetbrains.kotlin.metadata.Expression.ConstantValue)
    }

    private int bitField0_;
    public static final int FLAGS_FIELD_NUMBER = 1;
    private int flags_ = 0;
    /**
     * <pre>
     *
     * isNegated =&gt; this expression should be negated
     * isIsNullPredicate =&gt; this expression is IsNullPredicate with 'variableName' as argument
     * </pre>
     *
     * <code>int32 flags = 1 [default = 0];</code>
     * @return Whether the flags field is set.
     */
    @java.lang.Override
    public boolean hasFlags() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     *
     * isNegated =&gt; this expression should be negated
     * isIsNullPredicate =&gt; this expression is IsNullPredicate with 'variableName' as argument
     * </pre>
     *
     * <code>int32 flags = 1 [default = 0];</code>
     * @return The flags.
     */
    @java.lang.Override
    public int getFlags() {
      return flags_;
    }

    public static final int VALUE_PARAMETER_REFERENCE_FIELD_NUMBER = 2;
    private int valueParameterReference_ = 0;
    /**
     * <pre>
     * stored as index in valueParameters list of owner-function in 1-indexation
     * Index '0' is reserved for extension receiver
     * </pre>
     *
     * <code>int32 value_parameter_reference = 2;</code>
     * @return Whether the valueParameterReference field is set.
     */
    @java.lang.Override
    public boolean hasValueParameterReference() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * stored as index in valueParameters list of owner-function in 1-indexation
     * Index '0' is reserved for extension receiver
     * </pre>
     *
     * <code>int32 value_parameter_reference = 2;</code>
     * @return The valueParameterReference.
     */
    @java.lang.Override
    public int getValueParameterReference() {
      return valueParameterReference_;
    }

    public static final int CONSTANT_VALUE_FIELD_NUMBER = 3;
    private int constantValue_ = 0;
    /**
     * <code>.org.jetbrains.kotlin.metadata.Expression.ConstantValue constant_value = 3;</code>
     * @return Whether the constantValue field is set.
     */
    @java.lang.Override public boolean hasConstantValue() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Expression.ConstantValue constant_value = 3;</code>
     * @return The constantValue.
     */
    @java.lang.Override public org.jetbrains.kotlin.metadata.ProtoBuf.Expression.ConstantValue getConstantValue() {
      org.jetbrains.kotlin.metadata.ProtoBuf.Expression.ConstantValue result = org.jetbrains.kotlin.metadata.ProtoBuf.Expression.ConstantValue.forNumber(constantValue_);
      return result == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Expression.ConstantValue.TRUE : result;
    }

    public static final int IS_INSTANCE_TYPE_FIELD_NUMBER = 4;
    private org.jetbrains.kotlin.metadata.ProtoBuf.Type isInstanceType_;
    /**
     * <pre>
     * present =&gt; this expression is IsInstancePredicate,  with 'variableName' as LHS
     * and with type encoded in either one of next two fields as RHS.
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.metadata.Type is_instance_type = 4;</code>
     * @return Whether the isInstanceType field is set.
     */
    @java.lang.Override
    public boolean hasIsInstanceType() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * present =&gt; this expression is IsInstancePredicate,  with 'variableName' as LHS
     * and with type encoded in either one of next two fields as RHS.
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.metadata.Type is_instance_type = 4;</code>
     * @return The isInstanceType.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Type getIsInstanceType() {
      return isInstanceType_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance() : isInstanceType_;
    }
    /**
     * <pre>
     * present =&gt; this expression is IsInstancePredicate,  with 'variableName' as LHS
     * and with type encoded in either one of next two fields as RHS.
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.metadata.Type is_instance_type = 4;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder getIsInstanceTypeOrBuilder() {
      return isInstanceType_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance() : isInstanceType_;
    }

    public static final int IS_INSTANCE_TYPE_ID_FIELD_NUMBER = 5;
    private int isInstanceTypeId_ = 0;
    /**
     * <code>int32 is_instance_type_id = 5 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return Whether the isInstanceTypeId field is set.
     */
    @java.lang.Override
    public boolean hasIsInstanceTypeId() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <code>int32 is_instance_type_id = 5 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return The isInstanceTypeId.
     */
    @java.lang.Override
    public int getIsInstanceTypeId() {
      return isInstanceTypeId_;
    }

    public static final int AND_ARGUMENT_FIELD_NUMBER = 6;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Expression> andArgument_;
    /**
     * <pre>
     * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
     * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
     * it is optimized and embedded straight into this message
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Expression> getAndArgumentList() {
      return andArgument_;
    }
    /**
     * <pre>
     * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
     * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
     * it is optimized and embedded straight into this message
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.ExpressionOrBuilder> 
        getAndArgumentOrBuilderList() {
      return andArgument_;
    }
    /**
     * <pre>
     * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
     * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
     * it is optimized and embedded straight into this message
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
     */
    @java.lang.Override
    public int getAndArgumentCount() {
      return andArgument_.size();
    }
    /**
     * <pre>
     * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
     * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
     * it is optimized and embedded straight into this message
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Expression getAndArgument(int index) {
      return andArgument_.get(index);
    }
    /**
     * <pre>
     * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
     * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
     * it is optimized and embedded straight into this message
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.ExpressionOrBuilder getAndArgumentOrBuilder(
        int index) {
      return andArgument_.get(index);
    }

    public static final int OR_ARGUMENT_FIELD_NUMBER = 7;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Expression> orArgument_;
    /**
     * <pre>
     * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
     * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
     * it is optimized and embedded straight into this message.
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Expression> getOrArgumentList() {
      return orArgument_;
    }
    /**
     * <pre>
     * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
     * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
     * it is optimized and embedded straight into this message.
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.ExpressionOrBuilder> 
        getOrArgumentOrBuilderList() {
      return orArgument_;
    }
    /**
     * <pre>
     * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
     * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
     * it is optimized and embedded straight into this message.
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
     */
    @java.lang.Override
    public int getOrArgumentCount() {
      return orArgument_.size();
    }
    /**
     * <pre>
     * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
     * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
     * it is optimized and embedded straight into this message.
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Expression getOrArgument(int index) {
      return orArgument_.get(index);
    }
    /**
     * <pre>
     * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
     * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
     * it is optimized and embedded straight into this message.
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.ExpressionOrBuilder getOrArgumentOrBuilder(
        int index) {
      return orArgument_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (hasIsInstanceType()) {
        if (!getIsInstanceType().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getAndArgumentCount(); i++) {
        if (!getAndArgument(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getOrArgumentCount(); i++) {
        if (!getOrArgument(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeInt32(1, flags_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeInt32(2, valueParameterReference_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeEnum(3, constantValue_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeMessage(4, getIsInstanceType());
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        output.writeInt32(5, isInstanceTypeId_);
      }
      for (int i = 0; i < andArgument_.size(); i++) {
        output.writeMessage(6, andArgument_.get(i));
      }
      for (int i = 0; i < orArgument_.size(); i++) {
        output.writeMessage(7, orArgument_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(1, flags_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(2, valueParameterReference_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeEnumSize(3, constantValue_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(4, getIsInstanceType());
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(5, isInstanceTypeId_);
      }
      for (int i = 0; i < andArgument_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(6, andArgument_.get(i));
      }
      for (int i = 0; i < orArgument_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(7, orArgument_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.metadata.ProtoBuf.Expression)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.metadata.ProtoBuf.Expression other = (org.jetbrains.kotlin.metadata.ProtoBuf.Expression) obj;

      if (hasFlags() != other.hasFlags()) return false;
      if (hasFlags()) {
        if (getFlags()
            != other.getFlags()) return false;
      }
      if (hasValueParameterReference() != other.hasValueParameterReference()) return false;
      if (hasValueParameterReference()) {
        if (getValueParameterReference()
            != other.getValueParameterReference()) return false;
      }
      if (hasConstantValue() != other.hasConstantValue()) return false;
      if (hasConstantValue()) {
        if (constantValue_ != other.constantValue_) return false;
      }
      if (hasIsInstanceType() != other.hasIsInstanceType()) return false;
      if (hasIsInstanceType()) {
        if (!getIsInstanceType()
            .equals(other.getIsInstanceType())) return false;
      }
      if (hasIsInstanceTypeId() != other.hasIsInstanceTypeId()) return false;
      if (hasIsInstanceTypeId()) {
        if (getIsInstanceTypeId()
            != other.getIsInstanceTypeId()) return false;
      }
      if (!getAndArgumentList()
          .equals(other.getAndArgumentList())) return false;
      if (!getOrArgumentList()
          .equals(other.getOrArgumentList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasFlags()) {
        hash = (37 * hash) + FLAGS_FIELD_NUMBER;
        hash = (53 * hash) + getFlags();
      }
      if (hasValueParameterReference()) {
        hash = (37 * hash) + VALUE_PARAMETER_REFERENCE_FIELD_NUMBER;
        hash = (53 * hash) + getValueParameterReference();
      }
      if (hasConstantValue()) {
        hash = (37 * hash) + CONSTANT_VALUE_FIELD_NUMBER;
        hash = (53 * hash) + constantValue_;
      }
      if (hasIsInstanceType()) {
        hash = (37 * hash) + IS_INSTANCE_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + getIsInstanceType().hashCode();
      }
      if (hasIsInstanceTypeId()) {
        hash = (37 * hash) + IS_INSTANCE_TYPE_ID_FIELD_NUMBER;
        hash = (53 * hash) + getIsInstanceTypeId();
      }
      if (getAndArgumentCount() > 0) {
        hash = (37 * hash) + AND_ARGUMENT_FIELD_NUMBER;
        hash = (53 * hash) + getAndArgumentList().hashCode();
      }
      if (getOrArgumentCount() > 0) {
        hash = (37 * hash) + OR_ARGUMENT_FIELD_NUMBER;
        hash = (53 * hash) + getOrArgumentList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Expression parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Expression parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Expression parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Expression parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Expression parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Expression parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Expression parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Expression parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Expression parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Expression parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Expression parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Expression parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.metadata.ProtoBuf.Expression prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * We use some trickery to optimize memory footprint of contract-expressions:
     * exact type of Expression is determined based on its contents.
     * </pre>
     *
     * Protobuf type {@code org.jetbrains.kotlin.metadata.Expression}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.Expression)
        org.jetbrains.kotlin.metadata.ProtoBuf.ExpressionOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Expression_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Expression_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.metadata.ProtoBuf.Expression.class, org.jetbrains.kotlin.metadata.ProtoBuf.Expression.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.metadata.ProtoBuf.Expression.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getIsInstanceTypeFieldBuilder();
          getAndArgumentFieldBuilder();
          getOrArgumentFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        flags_ = 0;
        valueParameterReference_ = 0;
        constantValue_ = 0;
        isInstanceType_ = null;
        if (isInstanceTypeBuilder_ != null) {
          isInstanceTypeBuilder_.dispose();
          isInstanceTypeBuilder_ = null;
        }
        isInstanceTypeId_ = 0;
        if (andArgumentBuilder_ == null) {
          andArgument_ = java.util.Collections.emptyList();
        } else {
          andArgument_ = null;
          andArgumentBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        if (orArgumentBuilder_ == null) {
          orArgument_ = java.util.Collections.emptyList();
        } else {
          orArgument_ = null;
          orArgumentBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_Expression_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Expression getDefaultInstanceForType() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.Expression.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Expression build() {
        org.jetbrains.kotlin.metadata.ProtoBuf.Expression result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Expression buildPartial() {
        org.jetbrains.kotlin.metadata.ProtoBuf.Expression result = new org.jetbrains.kotlin.metadata.ProtoBuf.Expression(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(org.jetbrains.kotlin.metadata.ProtoBuf.Expression result) {
        if (andArgumentBuilder_ == null) {
          if (((bitField0_ & 0x00000020) != 0)) {
            andArgument_ = java.util.Collections.unmodifiableList(andArgument_);
            bitField0_ = (bitField0_ & ~0x00000020);
          }
          result.andArgument_ = andArgument_;
        } else {
          result.andArgument_ = andArgumentBuilder_.build();
        }
        if (orArgumentBuilder_ == null) {
          if (((bitField0_ & 0x00000040) != 0)) {
            orArgument_ = java.util.Collections.unmodifiableList(orArgument_);
            bitField0_ = (bitField0_ & ~0x00000040);
          }
          result.orArgument_ = orArgument_;
        } else {
          result.orArgument_ = orArgumentBuilder_.build();
        }
      }

      private void buildPartial0(org.jetbrains.kotlin.metadata.ProtoBuf.Expression result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.flags_ = flags_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.valueParameterReference_ = valueParameterReference_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.constantValue_ = constantValue_;
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.isInstanceType_ = isInstanceTypeBuilder_ == null
              ? isInstanceType_
              : isInstanceTypeBuilder_.build();
          to_bitField0_ |= 0x00000008;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.isInstanceTypeId_ = isInstanceTypeId_;
          to_bitField0_ |= 0x00000010;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.metadata.ProtoBuf.Expression) {
          return mergeFrom((org.jetbrains.kotlin.metadata.ProtoBuf.Expression)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.metadata.ProtoBuf.Expression other) {
        if (other == org.jetbrains.kotlin.metadata.ProtoBuf.Expression.getDefaultInstance()) return this;
        if (other.hasFlags()) {
          setFlags(other.getFlags());
        }
        if (other.hasValueParameterReference()) {
          setValueParameterReference(other.getValueParameterReference());
        }
        if (other.hasConstantValue()) {
          setConstantValue(other.getConstantValue());
        }
        if (other.hasIsInstanceType()) {
          mergeIsInstanceType(other.getIsInstanceType());
        }
        if (other.hasIsInstanceTypeId()) {
          setIsInstanceTypeId(other.getIsInstanceTypeId());
        }
        if (andArgumentBuilder_ == null) {
          if (!other.andArgument_.isEmpty()) {
            if (andArgument_.isEmpty()) {
              andArgument_ = other.andArgument_;
              bitField0_ = (bitField0_ & ~0x00000020);
            } else {
              ensureAndArgumentIsMutable();
              andArgument_.addAll(other.andArgument_);
            }
            onChanged();
          }
        } else {
          if (!other.andArgument_.isEmpty()) {
            if (andArgumentBuilder_.isEmpty()) {
              andArgumentBuilder_.dispose();
              andArgumentBuilder_ = null;
              andArgument_ = other.andArgument_;
              bitField0_ = (bitField0_ & ~0x00000020);
              andArgumentBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getAndArgumentFieldBuilder() : null;
            } else {
              andArgumentBuilder_.addAllMessages(other.andArgument_);
            }
          }
        }
        if (orArgumentBuilder_ == null) {
          if (!other.orArgument_.isEmpty()) {
            if (orArgument_.isEmpty()) {
              orArgument_ = other.orArgument_;
              bitField0_ = (bitField0_ & ~0x00000040);
            } else {
              ensureOrArgumentIsMutable();
              orArgument_.addAll(other.orArgument_);
            }
            onChanged();
          }
        } else {
          if (!other.orArgument_.isEmpty()) {
            if (orArgumentBuilder_.isEmpty()) {
              orArgumentBuilder_.dispose();
              orArgumentBuilder_ = null;
              orArgument_ = other.orArgument_;
              bitField0_ = (bitField0_ & ~0x00000040);
              orArgumentBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getOrArgumentFieldBuilder() : null;
            } else {
              orArgumentBuilder_.addAllMessages(other.orArgument_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (hasIsInstanceType()) {
          if (!getIsInstanceType().isInitialized()) {
            return false;
          }
        }
        for (int i = 0; i < getAndArgumentCount(); i++) {
          if (!getAndArgument(i).isInitialized()) {
            return false;
          }
        }
        for (int i = 0; i < getOrArgumentCount(); i++) {
          if (!getOrArgument(i).isInitialized()) {
            return false;
          }
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                flags_ = input.readInt32();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 16: {
                valueParameterReference_ = input.readInt32();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              case 24: {
                int tmpRaw = input.readEnum();
                org.jetbrains.kotlin.metadata.ProtoBuf.Expression.ConstantValue tmpValue =
                    org.jetbrains.kotlin.metadata.ProtoBuf.Expression.ConstantValue.forNumber(tmpRaw);
                if (tmpValue == null) {
                  mergeUnknownVarintField(3, tmpRaw);
                } else {
                  constantValue_ = tmpRaw;
                  bitField0_ |= 0x00000004;
                }
                break;
              } // case 24
              case 34: {
                input.readMessage(
                    getIsInstanceTypeFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000008;
                break;
              } // case 34
              case 40: {
                isInstanceTypeId_ = input.readInt32();
                bitField0_ |= 0x00000010;
                break;
              } // case 40
              case 50: {
                org.jetbrains.kotlin.metadata.ProtoBuf.Expression m =
                    input.readMessage(
                        org.jetbrains.kotlin.metadata.ProtoBuf.Expression.parser(),
                        extensionRegistry);
                if (andArgumentBuilder_ == null) {
                  ensureAndArgumentIsMutable();
                  andArgument_.add(m);
                } else {
                  andArgumentBuilder_.addMessage(m);
                }
                break;
              } // case 50
              case 58: {
                org.jetbrains.kotlin.metadata.ProtoBuf.Expression m =
                    input.readMessage(
                        org.jetbrains.kotlin.metadata.ProtoBuf.Expression.parser(),
                        extensionRegistry);
                if (orArgumentBuilder_ == null) {
                  ensureOrArgumentIsMutable();
                  orArgument_.add(m);
                } else {
                  orArgumentBuilder_.addMessage(m);
                }
                break;
              } // case 58
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int flags_ ;
      /**
       * <pre>
       *
       * isNegated =&gt; this expression should be negated
       * isIsNullPredicate =&gt; this expression is IsNullPredicate with 'variableName' as argument
       * </pre>
       *
       * <code>int32 flags = 1 [default = 0];</code>
       * @return Whether the flags field is set.
       */
      @java.lang.Override
      public boolean hasFlags() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       *
       * isNegated =&gt; this expression should be negated
       * isIsNullPredicate =&gt; this expression is IsNullPredicate with 'variableName' as argument
       * </pre>
       *
       * <code>int32 flags = 1 [default = 0];</code>
       * @return The flags.
       */
      @java.lang.Override
      public int getFlags() {
        return flags_;
      }
      /**
       * <pre>
       *
       * isNegated =&gt; this expression should be negated
       * isIsNullPredicate =&gt; this expression is IsNullPredicate with 'variableName' as argument
       * </pre>
       *
       * <code>int32 flags = 1 [default = 0];</code>
       * @param value The flags to set.
       * @return This builder for chaining.
       */
      public Builder setFlags(int value) {

        flags_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *
       * isNegated =&gt; this expression should be negated
       * isIsNullPredicate =&gt; this expression is IsNullPredicate with 'variableName' as argument
       * </pre>
       *
       * <code>int32 flags = 1 [default = 0];</code>
       * @return This builder for chaining.
       */
      public Builder clearFlags() {
        bitField0_ = (bitField0_ & ~0x00000001);
        flags_ = 0;
        onChanged();
        return this;
      }

      private int valueParameterReference_ ;
      /**
       * <pre>
       * stored as index in valueParameters list of owner-function in 1-indexation
       * Index '0' is reserved for extension receiver
       * </pre>
       *
       * <code>int32 value_parameter_reference = 2;</code>
       * @return Whether the valueParameterReference field is set.
       */
      @java.lang.Override
      public boolean hasValueParameterReference() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * stored as index in valueParameters list of owner-function in 1-indexation
       * Index '0' is reserved for extension receiver
       * </pre>
       *
       * <code>int32 value_parameter_reference = 2;</code>
       * @return The valueParameterReference.
       */
      @java.lang.Override
      public int getValueParameterReference() {
        return valueParameterReference_;
      }
      /**
       * <pre>
       * stored as index in valueParameters list of owner-function in 1-indexation
       * Index '0' is reserved for extension receiver
       * </pre>
       *
       * <code>int32 value_parameter_reference = 2;</code>
       * @param value The valueParameterReference to set.
       * @return This builder for chaining.
       */
      public Builder setValueParameterReference(int value) {

        valueParameterReference_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * stored as index in valueParameters list of owner-function in 1-indexation
       * Index '0' is reserved for extension receiver
       * </pre>
       *
       * <code>int32 value_parameter_reference = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearValueParameterReference() {
        bitField0_ = (bitField0_ & ~0x00000002);
        valueParameterReference_ = 0;
        onChanged();
        return this;
      }

      private int constantValue_ = 0;
      /**
       * <code>.org.jetbrains.kotlin.metadata.Expression.ConstantValue constant_value = 3;</code>
       * @return Whether the constantValue field is set.
       */
      @java.lang.Override public boolean hasConstantValue() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Expression.ConstantValue constant_value = 3;</code>
       * @return The constantValue.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Expression.ConstantValue getConstantValue() {
        org.jetbrains.kotlin.metadata.ProtoBuf.Expression.ConstantValue result = org.jetbrains.kotlin.metadata.ProtoBuf.Expression.ConstantValue.forNumber(constantValue_);
        return result == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Expression.ConstantValue.TRUE : result;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Expression.ConstantValue constant_value = 3;</code>
       * @param value The constantValue to set.
       * @return This builder for chaining.
       */
      public Builder setConstantValue(org.jetbrains.kotlin.metadata.ProtoBuf.Expression.ConstantValue value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000004;
        constantValue_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Expression.ConstantValue constant_value = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearConstantValue() {
        bitField0_ = (bitField0_ & ~0x00000004);
        constantValue_ = 0;
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.metadata.ProtoBuf.Type isInstanceType_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Type, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder> isInstanceTypeBuilder_;
      /**
       * <pre>
       * present =&gt; this expression is IsInstancePredicate,  with 'variableName' as LHS
       * and with type encoded in either one of next two fields as RHS.
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.Type is_instance_type = 4;</code>
       * @return Whether the isInstanceType field is set.
       */
      public boolean hasIsInstanceType() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * present =&gt; this expression is IsInstancePredicate,  with 'variableName' as LHS
       * and with type encoded in either one of next two fields as RHS.
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.Type is_instance_type = 4;</code>
       * @return The isInstanceType.
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type getIsInstanceType() {
        if (isInstanceTypeBuilder_ == null) {
          return isInstanceType_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance() : isInstanceType_;
        } else {
          return isInstanceTypeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * present =&gt; this expression is IsInstancePredicate,  with 'variableName' as LHS
       * and with type encoded in either one of next two fields as RHS.
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.Type is_instance_type = 4;</code>
       */
      public Builder setIsInstanceType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        if (isInstanceTypeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          isInstanceType_ = value;
        } else {
          isInstanceTypeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * present =&gt; this expression is IsInstancePredicate,  with 'variableName' as LHS
       * and with type encoded in either one of next two fields as RHS.
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.Type is_instance_type = 4;</code>
       */
      public Builder setIsInstanceType(
          org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder builderForValue) {
        if (isInstanceTypeBuilder_ == null) {
          isInstanceType_ = builderForValue.build();
        } else {
          isInstanceTypeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * present =&gt; this expression is IsInstancePredicate,  with 'variableName' as LHS
       * and with type encoded in either one of next two fields as RHS.
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.Type is_instance_type = 4;</code>
       */
      public Builder mergeIsInstanceType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        if (isInstanceTypeBuilder_ == null) {
          if (((bitField0_ & 0x00000008) != 0) &&
            isInstanceType_ != null &&
            isInstanceType_ != org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance()) {
            getIsInstanceTypeBuilder().mergeFrom(value);
          } else {
            isInstanceType_ = value;
          }
        } else {
          isInstanceTypeBuilder_.mergeFrom(value);
        }
        if (isInstanceType_ != null) {
          bitField0_ |= 0x00000008;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * present =&gt; this expression is IsInstancePredicate,  with 'variableName' as LHS
       * and with type encoded in either one of next two fields as RHS.
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.Type is_instance_type = 4;</code>
       */
      public Builder clearIsInstanceType() {
        bitField0_ = (bitField0_ & ~0x00000008);
        isInstanceType_ = null;
        if (isInstanceTypeBuilder_ != null) {
          isInstanceTypeBuilder_.dispose();
          isInstanceTypeBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * present =&gt; this expression is IsInstancePredicate,  with 'variableName' as LHS
       * and with type encoded in either one of next two fields as RHS.
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.Type is_instance_type = 4;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder getIsInstanceTypeBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getIsInstanceTypeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * present =&gt; this expression is IsInstancePredicate,  with 'variableName' as LHS
       * and with type encoded in either one of next two fields as RHS.
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.Type is_instance_type = 4;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder getIsInstanceTypeOrBuilder() {
        if (isInstanceTypeBuilder_ != null) {
          return isInstanceTypeBuilder_.getMessageOrBuilder();
        } else {
          return isInstanceType_ == null ?
              org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance() : isInstanceType_;
        }
      }
      /**
       * <pre>
       * present =&gt; this expression is IsInstancePredicate,  with 'variableName' as LHS
       * and with type encoded in either one of next two fields as RHS.
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.Type is_instance_type = 4;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Type, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder> 
          getIsInstanceTypeFieldBuilder() {
        if (isInstanceTypeBuilder_ == null) {
          isInstanceTypeBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.metadata.ProtoBuf.Type, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder>(
                  getIsInstanceType(),
                  getParentForChildren(),
                  isClean());
          isInstanceType_ = null;
        }
        return isInstanceTypeBuilder_;
      }

      private int isInstanceTypeId_ ;
      /**
       * <code>int32 is_instance_type_id = 5 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return Whether the isInstanceTypeId field is set.
       */
      @java.lang.Override
      public boolean hasIsInstanceTypeId() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <code>int32 is_instance_type_id = 5 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return The isInstanceTypeId.
       */
      @java.lang.Override
      public int getIsInstanceTypeId() {
        return isInstanceTypeId_;
      }
      /**
       * <code>int32 is_instance_type_id = 5 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @param value The isInstanceTypeId to set.
       * @return This builder for chaining.
       */
      public Builder setIsInstanceTypeId(int value) {

        isInstanceTypeId_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <code>int32 is_instance_type_id = 5 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearIsInstanceTypeId() {
        bitField0_ = (bitField0_ & ~0x00000010);
        isInstanceTypeId_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Expression> andArgument_ =
        java.util.Collections.emptyList();
      private void ensureAndArgumentIsMutable() {
        if (!((bitField0_ & 0x00000020) != 0)) {
          andArgument_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.ProtoBuf.Expression>(andArgument_);
          bitField0_ |= 0x00000020;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Expression, org.jetbrains.kotlin.metadata.ProtoBuf.Expression.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.ExpressionOrBuilder> andArgumentBuilder_;

      /**
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Expression> getAndArgumentList() {
        if (andArgumentBuilder_ == null) {
          return java.util.Collections.unmodifiableList(andArgument_);
        } else {
          return andArgumentBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
       */
      public int getAndArgumentCount() {
        if (andArgumentBuilder_ == null) {
          return andArgument_.size();
        } else {
          return andArgumentBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Expression getAndArgument(int index) {
        if (andArgumentBuilder_ == null) {
          return andArgument_.get(index);
        } else {
          return andArgumentBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
       */
      public Builder setAndArgument(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Expression value) {
        if (andArgumentBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAndArgumentIsMutable();
          andArgument_.set(index, value);
          onChanged();
        } else {
          andArgumentBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
       */
      public Builder setAndArgument(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Expression.Builder builderForValue) {
        if (andArgumentBuilder_ == null) {
          ensureAndArgumentIsMutable();
          andArgument_.set(index, builderForValue.build());
          onChanged();
        } else {
          andArgumentBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
       */
      public Builder addAndArgument(org.jetbrains.kotlin.metadata.ProtoBuf.Expression value) {
        if (andArgumentBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAndArgumentIsMutable();
          andArgument_.add(value);
          onChanged();
        } else {
          andArgumentBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
       */
      public Builder addAndArgument(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Expression value) {
        if (andArgumentBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAndArgumentIsMutable();
          andArgument_.add(index, value);
          onChanged();
        } else {
          andArgumentBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
       */
      public Builder addAndArgument(
          org.jetbrains.kotlin.metadata.ProtoBuf.Expression.Builder builderForValue) {
        if (andArgumentBuilder_ == null) {
          ensureAndArgumentIsMutable();
          andArgument_.add(builderForValue.build());
          onChanged();
        } else {
          andArgumentBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
       */
      public Builder addAndArgument(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Expression.Builder builderForValue) {
        if (andArgumentBuilder_ == null) {
          ensureAndArgumentIsMutable();
          andArgument_.add(index, builderForValue.build());
          onChanged();
        } else {
          andArgumentBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
       */
      public Builder addAllAndArgument(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Expression> values) {
        if (andArgumentBuilder_ == null) {
          ensureAndArgumentIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, andArgument_);
          onChanged();
        } else {
          andArgumentBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
       */
      public Builder clearAndArgument() {
        if (andArgumentBuilder_ == null) {
          andArgument_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
          onChanged();
        } else {
          andArgumentBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
       */
      public Builder removeAndArgument(int index) {
        if (andArgumentBuilder_ == null) {
          ensureAndArgumentIsMutable();
          andArgument_.remove(index);
          onChanged();
        } else {
          andArgumentBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Expression.Builder getAndArgumentBuilder(
          int index) {
        return getAndArgumentFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.ExpressionOrBuilder getAndArgumentOrBuilder(
          int index) {
        if (andArgumentBuilder_ == null) {
          return andArgument_.get(index);  } else {
          return andArgumentBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.ExpressionOrBuilder> 
           getAndArgumentOrBuilderList() {
        if (andArgumentBuilder_ != null) {
          return andArgumentBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(andArgument_);
        }
      }
      /**
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Expression.Builder addAndArgumentBuilder() {
        return getAndArgumentFieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.ProtoBuf.Expression.getDefaultInstance());
      }
      /**
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Expression.Builder addAndArgumentBuilder(
          int index) {
        return getAndArgumentFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.ProtoBuf.Expression.getDefaultInstance());
      }
      /**
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Expression.Builder> 
           getAndArgumentBuilderList() {
        return getAndArgumentFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Expression, org.jetbrains.kotlin.metadata.ProtoBuf.Expression.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.ExpressionOrBuilder> 
          getAndArgumentFieldBuilder() {
        if (andArgumentBuilder_ == null) {
          andArgumentBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.ProtoBuf.Expression, org.jetbrains.kotlin.metadata.ProtoBuf.Expression.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.ExpressionOrBuilder>(
                  andArgument_,
                  ((bitField0_ & 0x00000020) != 0),
                  getParentForChildren(),
                  isClean());
          andArgument_ = null;
        }
        return andArgumentBuilder_;
      }

      private java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Expression> orArgument_ =
        java.util.Collections.emptyList();
      private void ensureOrArgumentIsMutable() {
        if (!((bitField0_ & 0x00000040) != 0)) {
          orArgument_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.ProtoBuf.Expression>(orArgument_);
          bitField0_ |= 0x00000040;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Expression, org.jetbrains.kotlin.metadata.ProtoBuf.Expression.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.ExpressionOrBuilder> orArgumentBuilder_;

      /**
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message.
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Expression> getOrArgumentList() {
        if (orArgumentBuilder_ == null) {
          return java.util.Collections.unmodifiableList(orArgument_);
        } else {
          return orArgumentBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message.
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
       */
      public int getOrArgumentCount() {
        if (orArgumentBuilder_ == null) {
          return orArgument_.size();
        } else {
          return orArgumentBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message.
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Expression getOrArgument(int index) {
        if (orArgumentBuilder_ == null) {
          return orArgument_.get(index);
        } else {
          return orArgumentBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message.
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
       */
      public Builder setOrArgument(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Expression value) {
        if (orArgumentBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOrArgumentIsMutable();
          orArgument_.set(index, value);
          onChanged();
        } else {
          orArgumentBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message.
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
       */
      public Builder setOrArgument(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Expression.Builder builderForValue) {
        if (orArgumentBuilder_ == null) {
          ensureOrArgumentIsMutable();
          orArgument_.set(index, builderForValue.build());
          onChanged();
        } else {
          orArgumentBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message.
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
       */
      public Builder addOrArgument(org.jetbrains.kotlin.metadata.ProtoBuf.Expression value) {
        if (orArgumentBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOrArgumentIsMutable();
          orArgument_.add(value);
          onChanged();
        } else {
          orArgumentBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message.
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
       */
      public Builder addOrArgument(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Expression value) {
        if (orArgumentBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOrArgumentIsMutable();
          orArgument_.add(index, value);
          onChanged();
        } else {
          orArgumentBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message.
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
       */
      public Builder addOrArgument(
          org.jetbrains.kotlin.metadata.ProtoBuf.Expression.Builder builderForValue) {
        if (orArgumentBuilder_ == null) {
          ensureOrArgumentIsMutable();
          orArgument_.add(builderForValue.build());
          onChanged();
        } else {
          orArgumentBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message.
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
       */
      public Builder addOrArgument(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Expression.Builder builderForValue) {
        if (orArgumentBuilder_ == null) {
          ensureOrArgumentIsMutable();
          orArgument_.add(index, builderForValue.build());
          onChanged();
        } else {
          orArgumentBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message.
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
       */
      public Builder addAllOrArgument(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Expression> values) {
        if (orArgumentBuilder_ == null) {
          ensureOrArgumentIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, orArgument_);
          onChanged();
        } else {
          orArgumentBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message.
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
       */
      public Builder clearOrArgument() {
        if (orArgumentBuilder_ == null) {
          orArgument_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000040);
          onChanged();
        } else {
          orArgumentBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message.
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
       */
      public Builder removeOrArgument(int index) {
        if (orArgumentBuilder_ == null) {
          ensureOrArgumentIsMutable();
          orArgument_.remove(index);
          onChanged();
        } else {
          orArgumentBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message.
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Expression.Builder getOrArgumentBuilder(
          int index) {
        return getOrArgumentFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message.
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.ExpressionOrBuilder getOrArgumentOrBuilder(
          int index) {
        if (orArgumentBuilder_ == null) {
          return orArgument_.get(index);  } else {
          return orArgumentBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message.
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.ExpressionOrBuilder> 
           getOrArgumentOrBuilderList() {
        if (orArgumentBuilder_ != null) {
          return orArgumentBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(orArgument_);
        }
      }
      /**
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message.
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Expression.Builder addOrArgumentBuilder() {
        return getOrArgumentFieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.ProtoBuf.Expression.getDefaultInstance());
      }
      /**
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message.
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
       */
      public org.jetbrains.kotlin.metadata.ProtoBuf.Expression.Builder addOrArgumentBuilder(
          int index) {
        return getOrArgumentFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.ProtoBuf.Expression.getDefaultInstance());
      }
      /**
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message.
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Expression.Builder> 
           getOrArgumentBuilderList() {
        return getOrArgumentFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Expression, org.jetbrains.kotlin.metadata.ProtoBuf.Expression.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.ExpressionOrBuilder> 
          getOrArgumentFieldBuilder() {
        if (orArgumentBuilder_ == null) {
          orArgumentBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.ProtoBuf.Expression, org.jetbrains.kotlin.metadata.ProtoBuf.Expression.Builder, org.jetbrains.kotlin.metadata.ProtoBuf.ExpressionOrBuilder>(
                  orArgument_,
                  ((bitField0_ & 0x00000040) != 0),
                  getParentForChildren(),
                  isClean());
          orArgument_ = null;
        }
        return orArgumentBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.Expression)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.Expression)
    private static final org.jetbrains.kotlin.metadata.ProtoBuf.Expression DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.metadata.ProtoBuf.Expression();
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Expression getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<Expression>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<Expression>() {
      @java.lang.Override
      public Expression parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<Expression> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<Expression> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Expression getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface CompilerPluginDataOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.CompilerPluginData)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>int32 plugin_id = 1 [features = { ... }</code>
     * @return Whether the pluginId field is set.
     */
    boolean hasPluginId();
    /**
     * <code>int32 plugin_id = 1 [features = { ... }</code>
     * @return The pluginId.
     */
    int getPluginId();

    /**
     * <code>bytes data = 2 [features = { ... }</code>
     * @return Whether the data field is set.
     */
    boolean hasData();
    /**
     * <code>bytes data = 2 [features = { ... }</code>
     * @return The data.
     */
    org.jetbrains.kotlin.protobuf.ByteString getData();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.metadata.CompilerPluginData}
   */
  public static final class CompilerPluginData extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.CompilerPluginData)
      CompilerPluginDataOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        CompilerPluginData.class.getName());
    }
    // Use CompilerPluginData.newBuilder() to construct.
    private CompilerPluginData(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private CompilerPluginData() {
      data_ = org.jetbrains.kotlin.protobuf.ByteString.EMPTY;
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_CompilerPluginData_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_CompilerPluginData_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.class, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.Builder.class);
    }

    private int bitField0_;
    public static final int PLUGIN_ID_FIELD_NUMBER = 1;
    private int pluginId_ = 0;
    /**
     * <code>int32 plugin_id = 1 [features = { ... }</code>
     * @return Whether the pluginId field is set.
     */
    @java.lang.Override
    public boolean hasPluginId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>int32 plugin_id = 1 [features = { ... }</code>
     * @return The pluginId.
     */
    @java.lang.Override
    public int getPluginId() {
      return pluginId_;
    }

    public static final int DATA_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.protobuf.ByteString data_ = org.jetbrains.kotlin.protobuf.ByteString.EMPTY;
    /**
     * <code>bytes data = 2 [features = { ... }</code>
     * @return Whether the data field is set.
     */
    @java.lang.Override
    public boolean hasData() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>bytes data = 2 [features = { ... }</code>
     * @return The data.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.ByteString getData() {
      return data_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasPluginId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasData()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeInt32(1, pluginId_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeBytes(2, data_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(1, pluginId_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBytesSize(2, data_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData other = (org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData) obj;

      if (hasPluginId() != other.hasPluginId()) return false;
      if (hasPluginId()) {
        if (getPluginId()
            != other.getPluginId()) return false;
      }
      if (hasData() != other.hasData()) return false;
      if (hasData()) {
        if (!getData()
            .equals(other.getData())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasPluginId()) {
        hash = (37 * hash) + PLUGIN_ID_FIELD_NUMBER;
        hash = (53 * hash) + getPluginId();
      }
      if (hasData()) {
        hash = (37 * hash) + DATA_FIELD_NUMBER;
        hash = (53 * hash) + getData().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.CompilerPluginData}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.CompilerPluginData)
        org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginDataOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_CompilerPluginData_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_CompilerPluginData_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.class, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.newBuilder()
      private Builder() {

      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        pluginId_ = 0;
        data_ = org.jetbrains.kotlin.protobuf.ByteString.EMPTY;
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.internal_static_org_jetbrains_kotlin_metadata_CompilerPluginData_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData getDefaultInstanceForType() {
        return org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData build() {
        org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData buildPartial() {
        org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData result = new org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.pluginId_ = pluginId_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.data_ = data_;
          to_bitField0_ |= 0x00000002;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData) {
          return mergeFrom((org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData other) {
        if (other == org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.getDefaultInstance()) return this;
        if (other.hasPluginId()) {
          setPluginId(other.getPluginId());
        }
        if (other.hasData()) {
          setData(other.getData());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasPluginId()) {
          return false;
        }
        if (!hasData()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                pluginId_ = input.readInt32();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 18: {
                data_ = input.readBytes();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int pluginId_ ;
      /**
       * <code>int32 plugin_id = 1 [features = { ... }</code>
       * @return Whether the pluginId field is set.
       */
      @java.lang.Override
      public boolean hasPluginId() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>int32 plugin_id = 1 [features = { ... }</code>
       * @return The pluginId.
       */
      @java.lang.Override
      public int getPluginId() {
        return pluginId_;
      }
      /**
       * <code>int32 plugin_id = 1 [features = { ... }</code>
       * @param value The pluginId to set.
       * @return This builder for chaining.
       */
      public Builder setPluginId(int value) {

        pluginId_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>int32 plugin_id = 1 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearPluginId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        pluginId_ = 0;
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.protobuf.ByteString data_ = org.jetbrains.kotlin.protobuf.ByteString.EMPTY;
      /**
       * <code>bytes data = 2 [features = { ... }</code>
       * @return Whether the data field is set.
       */
      @java.lang.Override
      public boolean hasData() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>bytes data = 2 [features = { ... }</code>
       * @return The data.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.ByteString getData() {
        return data_;
      }
      /**
       * <code>bytes data = 2 [features = { ... }</code>
       * @param value The data to set.
       * @return This builder for chaining.
       */
      public Builder setData(org.jetbrains.kotlin.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        data_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>bytes data = 2 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearData() {
        bitField0_ = (bitField0_ & ~0x00000002);
        data_ = getDefaultInstance().getData();
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.CompilerPluginData)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.CompilerPluginData)
    private static final org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData();
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<CompilerPluginData>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<CompilerPluginData>() {
      @java.lang.Override
      public CompilerPluginData parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<CompilerPluginData> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<CompilerPluginData> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_metadata_StringTable_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_metadata_StringTable_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_metadata_QualifiedNameTable_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_metadata_QualifiedNameTable_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_metadata_QualifiedNameTable_QualifiedName_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_metadata_QualifiedNameTable_QualifiedName_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_metadata_Annotation_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_metadata_Annotation_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_metadata_Annotation_Argument_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_metadata_Annotation_Argument_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_metadata_Annotation_Argument_Value_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_metadata_Annotation_Argument_Value_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_metadata_Type_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_metadata_Type_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_metadata_Type_Argument_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_metadata_Type_Argument_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_metadata_TypeParameter_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_metadata_TypeParameter_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_metadata_Class_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_metadata_Class_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_metadata_Package_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_metadata_Package_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_metadata_TypeTable_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_metadata_TypeTable_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_metadata_Constructor_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_metadata_Constructor_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_metadata_Function_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_metadata_Function_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_metadata_Property_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_metadata_Property_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_metadata_ValueParameter_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_metadata_ValueParameter_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_metadata_TypeAlias_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_metadata_TypeAlias_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_metadata_EnumEntry_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_metadata_EnumEntry_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_metadata_VersionRequirement_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_metadata_VersionRequirement_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_metadata_VersionRequirementTable_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_metadata_VersionRequirementTable_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_metadata_PackageFragment_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_metadata_PackageFragment_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_metadata_Contract_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_metadata_Contract_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_metadata_Effect_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_metadata_Effect_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_metadata_Expression_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_metadata_Expression_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_metadata_CompilerPluginData_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_metadata_CompilerPluginData_fieldAccessorTable;

  public static org.jetbrains.kotlin.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  org.jetbrains.kotlin.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n core/metadata/src/metadata.proto\022\035org." +
      "jetbrains.kotlin.metadata\032#core/metadata" +
      "/src/ext_options.proto\"#\n\013StringTable\022\016\n" +
      "\006string\030\001 \003(\t:\004\240\273\030\001\"\321\002\n\022QualifiedNameTab" +
      "le\022W\n\016qualified_name\030\001 \003(\0132?.org.jetbrai" +
      "ns.kotlin.metadata.QualifiedNameTable.Qu" +
      "alifiedName\032\333\001\n\rQualifiedName\022!\n\025parent_" +
      "qualified_name\030\001 \001(\005:\002-1\022\031\n\nshort_name\030\002" +
      " \001(\005B\005\252\001\002\010\003\022[\n\004kind\030\003 \001(\0162D.org.jetbrain" +
      "s.kotlin.metadata.QualifiedNameTable.Qua" +
      "lifiedName.Kind:\007PACKAGE\"/\n\004Kind\022\t\n\005CLAS" +
      "S\020\000\022\013\n\007PACKAGE\020\001\022\t\n\005LOCAL\020\002\032\004:\002\020\002:\004\240\273\030\001\"" +
      "\255\006\n\nAnnotation\022\025\n\002id\030\001 \001(\005B\t\252\001\002\010\003\220\265\030\001\022D\n" +
      "\010argument\030\002 \003(\01322.org.jetbrains.kotlin.m" +
      "etadata.Annotation.Argument\032\301\005\n\010Argument" +
      "\022\032\n\007name_id\030\001 \001(\005B\t\252\001\002\010\003\210\265\030\001\022N\n\005value\030\002 " +
      "\001(\01328.org.jetbrains.kotlin.metadata.Anno" +
      "tation.Argument.ValueB\005\252\001\002\010\003\032\310\004\n\005Value\022K" +
      "\n\004type\030\001 \001(\0162=.org.jetbrains.kotlin.meta" +
      "data.Annotation.Argument.Value.Type\022\021\n\ti" +
      "nt_value\030\002 \001(\022\022\023\n\013float_value\030\003 \001(\002\022\024\n\014d" +
      "ouble_value\030\004 \001(\001\022\032\n\014string_value\030\005 \001(\005B" +
      "\004\230\265\030\001\022\026\n\010class_id\030\006 \001(\005B\004\220\265\030\001\022\033\n\renum_va" +
      "lue_id\030\007 \001(\005B\004\210\265\030\001\022=\n\nannotation\030\010 \001(\0132)" +
      ".org.jetbrains.kotlin.metadata.Annotatio" +
      "n\022O\n\rarray_element\030\t \003(\01328.org.jetbrains" +
      ".kotlin.metadata.Annotation.Argument.Val" +
      "ue\022 \n\025array_dimension_count\030\013 \001(\005:\0010\022\020\n\005" +
      "flags\030\n \001(\005:\0010\"\236\001\n\004Type\022\010\n\004BYTE\020\000\022\010\n\004CHA" +
      "R\020\001\022\t\n\005SHORT\020\002\022\007\n\003INT\020\003\022\010\n\004LONG\020\004\022\t\n\005FLO" +
      "AT\020\005\022\n\n\006DOUBLE\020\006\022\013\n\007BOOLEAN\020\007\022\n\n\006STRING\020" +
      "\010\022\t\n\005CLASS\020\t\022\010\n\004ENUM\020\n\022\016\n\nANNOTATION\020\013\022\t" +
      "\n\005ARRAY\020\014\032\004:\002\020\002\"\231\006\n\004Type\022>\n\010argument\030\002 \003" +
      "(\0132,.org.jetbrains.kotlin.metadata.Type." +
      "Argument\022\027\n\010nullable\030\003 \001(\010:\005false\022+\n\035fle" +
      "xible_type_capabilities_id\030\004 \001(\005B\004\230\265\030\001\022A" +
      "\n\024flexible_upper_bound\030\005 \001(\0132#.org.jetbr" +
      "ains.kotlin.metadata.Type\022%\n\027flexible_up" +
      "per_bound_id\030\010 \001(\005B\004\240\265\030\001\022\030\n\nclass_name\030\006" +
      " \001(\005B\004\220\265\030\001\022\026\n\016type_parameter\030\007 \001(\005\022!\n\023ty" +
      "pe_parameter_name\030\t \001(\005B\004\210\265\030\001\022\035\n\017type_al" +
      "ias_name\030\014 \001(\005B\004\220\265\030\001\0227\n\nouter_type\030\n \001(\013" +
      "2#.org.jetbrains.kotlin.metadata.Type\022\033\n" +
      "\router_type_id\030\013 \001(\005B\004\240\265\030\001\022=\n\020abbreviate" +
      "d_type\030\r \001(\0132#.org.jetbrains.kotlin.meta" +
      "data.Type\022!\n\023abbreviated_type_id\030\016 \001(\005B\004" +
      "\240\265\030\001\022\r\n\005flags\030\001 \001(\005\032\336\001\n\010Argument\022P\n\nproj" +
      "ection\030\001 \001(\01627.org.jetbrains.kotlin.meta" +
      "data.Type.Argument.Projection:\003INV\0221\n\004ty" +
      "pe\030\002 \001(\0132#.org.jetbrains.kotlin.metadata" +
      ".Type\022\025\n\007type_id\030\003 \001(\005B\004\240\265\030\001\"6\n\nProjecti" +
      "on\022\006\n\002IN\020\000\022\007\n\003OUT\020\001\022\007\n\003INV\020\002\022\010\n\004STAR\020\003\032\004" +
      ":\002\020\002*\005\010d\020\310\001\"\254\002\n\rTypeParameter\022\021\n\002id\030\001 \001(" +
      "\005B\005\252\001\002\010\003\022\027\n\004name\030\002 \001(\005B\t\252\001\002\010\003\210\265\030\001\022\026\n\007rei" +
      "fied\030\003 \001(\010:\005false\022L\n\010variance\030\004 \001(\01625.or" +
      "g.jetbrains.kotlin.metadata.TypeParamete" +
      "r.Variance:\003INV\0228\n\013upper_bound\030\005 \003(\0132#.o" +
      "rg.jetbrains.kotlin.metadata.Type\022\034\n\016upp" +
      "er_bound_id\030\006 \003(\005B\004\240\265\030\001\"*\n\010Variance\022\006\n\002I" +
      "N\020\000\022\007\n\003OUT\020\001\022\007\n\003INV\020\002\032\004:\002\020\002*\005\010d\020\350\007\"\337\n\n\005C" +
      "lass\022\020\n\005flags\030\001 \001(\005:\0016\022\032\n\007fq_name\030\003 \001(\005B" +
      "\t\252\001\002\010\003\220\265\030\001\022#\n\025companion_object_name\030\004 \001(" +
      "\005B\004\210\265\030\001\022D\n\016type_parameter\030\005 \003(\0132,.org.je" +
      "tbrains.kotlin.metadata.TypeParameter\0226\n" +
      "\tsupertype\030\006 \003(\0132#.org.jetbrains.kotlin." +
      "metadata.Type\022\032\n\014supertype_id\030\002 \003(\005B\004\240\265\030" +
      "\001\022\037\n\021nested_class_name\030\007 \003(\005B\004\210\265\030\001\022B\n\025co" +
      "ntext_receiver_type\030\024 \003(\0132#.org.jetbrain" +
      "s.kotlin.metadata.Type\022&\n\030context_receiv" +
      "er_type_id\030\025 \003(\005B\004\240\265\030\001\022?\n\013constructor\030\010 " +
      "\003(\0132*.org.jetbrains.kotlin.metadata.Cons" +
      "tructor\0229\n\010function\030\t \003(\0132\'.org.jetbrain" +
      "s.kotlin.metadata.Function\0229\n\010property\030\n" +
      " \003(\0132\'.org.jetbrains.kotlin.metadata.Pro" +
      "perty\022<\n\ntype_alias\030\013 \003(\0132(.org.jetbrain" +
      "s.kotlin.metadata.TypeAlias\022<\n\nenum_entr" +
      "y\030\r \003(\0132(.org.jetbrains.kotlin.metadata." +
      "EnumEntry\022%\n\027sealed_subclass_fq_name\030\020 \003" +
      "(\005B\004\220\265\030\001\0223\n%inline_class_underlying_prop" +
      "erty_name\030\021 \001(\005B\004\210\265\030\001\022I\n\034inline_class_un" +
      "derlying_type\030\022 \001(\0132#.org.jetbrains.kotl" +
      "in.metadata.Type\022-\n\037inline_class_underly" +
      "ing_type_id\030\023 \001(\005B\004\240\265\030\001\022=\n\nannotation\030\031 " +
      "\003(\0132).org.jetbrains.kotlin.metadata.Anno" +
      "tation\022<\n\ntype_table\030\036 \001(\0132(.org.jetbrai" +
      "ns.kotlin.metadata.TypeTable\022\"\n\023version_" +
      "requirement\030\037 \003(\005B\005\252\001\002\030\002\022Y\n\031version_requ" +
      "irement_table\030  \001(\01326.org.jetbrains.kotl" +
      "in.metadata.VersionRequirementTable\022O\n\024c" +
      "ompiler_plugin_data\030! \003(\01321.org.jetbrain" +
      "s.kotlin.metadata.CompilerPluginData\"~\n\004" +
      "Kind\022\t\n\005CLASS\020\000\022\r\n\tINTERFACE\020\001\022\016\n\nENUM_C" +
      "LASS\020\002\022\016\n\nENUM_ENTRY\020\003\022\024\n\020ANNOTATION_CLA" +
      "SS\020\004\022\n\n\006OBJECT\020\005\022\024\n\020COMPANION_OBJECT\020\006\032\004" +
      ":\002\020\002*\006\010d\020\270\224\001\"\335\002\n\007Package\0229\n\010function\030\003 \003" +
      "(\0132\'.org.jetbrains.kotlin.metadata.Funct" +
      "ion\0229\n\010property\030\004 \003(\0132\'.org.jetbrains.ko" +
      "tlin.metadata.Property\022<\n\ntype_alias\030\005 \003" +
      "(\0132(.org.jetbrains.kotlin.metadata.TypeA" +
      "lias\022<\n\ntype_table\030\036 \001(\0132(.org.jetbrains" +
      ".kotlin.metadata.TypeTable\022Y\n\031version_re" +
      "quirement_table\030  \001(\01326.org.jetbrains.ko" +
      "tlin.metadata.VersionRequirementTable*\005\010" +
      "d\020\310\001\"`\n\tTypeTable\0221\n\004type\030\001 \003(\0132#.org.je" +
      "tbrains.kotlin.metadata.Type\022\032\n\016first_nu" +
      "llable\030\002 \001(\005:\002-1:\004\240\273\030\001\"\243\002\n\013Constructor\022\020" +
      "\n\005flags\030\001 \001(\005:\0016\022F\n\017value_parameter\030\002 \003(" +
      "\0132-.org.jetbrains.kotlin.metadata.ValueP" +
      "arameter\022\"\n\023version_requirement\030\037 \003(\005B\005\252" +
      "\001\002\030\002\022O\n\024compiler_plugin_data\030  \003(\01321.org" +
      ".jetbrains.kotlin.metadata.CompilerPlugi" +
      "nData\022=\n\nannotation\030\003 \003(\0132).org.jetbrain" +
      "s.kotlin.metadata.Annotation*\006\010d\020\270\224\001\"\312\007\n" +
      "\010Function\022\020\n\005flags\030\t \001(\005:\0016\022\024\n\told_flags" +
      "\030\001 \001(\005:\0016\022\027\n\004name\030\002 \001(\005B\t\252\001\002\010\003\210\265\030\001\0228\n\013re" +
      "turn_type\030\003 \001(\0132#.org.jetbrains.kotlin.m" +
      "etadata.Type\022\034\n\016return_type_id\030\007 \001(\005B\004\240\265" +
      "\030\001\022D\n\016type_parameter\030\004 \003(\0132,.org.jetbrai" +
      "ns.kotlin.metadata.TypeParameter\022:\n\rrece" +
      "iver_type\030\005 \001(\0132#.org.jetbrains.kotlin.m" +
      "etadata.Type\022\036\n\020receiver_type_id\030\010 \001(\005B\004" +
      "\240\265\030\001\022B\n\025context_receiver_type\030\n \003(\0132#.or" +
      "g.jetbrains.kotlin.metadata.Type\022&\n\030cont" +
      "ext_receiver_type_id\030\013 \003(\005B\004\240\265\030\001\022H\n\021cont" +
      "ext_parameter\030\r \003(\0132-.org.jetbrains.kotl" +
      "in.metadata.ValueParameter\022F\n\017value_para" +
      "meter\030\006 \003(\0132-.org.jetbrains.kotlin.metad" +
      "ata.ValueParameter\022<\n\ntype_table\030\036 \001(\0132(" +
      ".org.jetbrains.kotlin.metadata.TypeTable" +
      "\022\"\n\023version_requirement\030\037 \003(\005B\005\252\001\002\030\002\0229\n\010" +
      "contract\030  \001(\0132\'.org.jetbrains.kotlin.me" +
      "tadata.Contract\022O\n\024compiler_plugin_data\030" +
      "! \003(\01321.org.jetbrains.kotlin.metadata.Co" +
      "mpilerPluginData\022=\n\nannotation\030\014 \003(\0132).o" +
      "rg.jetbrains.kotlin.metadata.Annotation\022" +
      "P\n\035extension_receiver_annotation\030\" \003(\0132)" +
      ".org.jetbrains.kotlin.metadata.Annotatio" +
      "n*\006\010d\020\270\224\001\"\260\t\n\010Property\022\022\n\005flags\030\013 \001(\005:\0035" +
      "18\022\027\n\told_flags\030\001 \001(\005:\0042054\022\027\n\004name\030\002 \001(" +
      "\005B\t\252\001\002\010\003\210\265\030\001\0228\n\013return_type\030\003 \001(\0132#.org." +
      "jetbrains.kotlin.metadata.Type\022\034\n\016return" +
      "_type_id\030\t \001(\005B\004\240\265\030\001\022D\n\016type_parameter\030\004" +
      " \003(\0132,.org.jetbrains.kotlin.metadata.Typ" +
      "eParameter\022:\n\rreceiver_type\030\005 \001(\0132#.org." +
      "jetbrains.kotlin.metadata.Type\022\036\n\020receiv" +
      "er_type_id\030\n \001(\005B\004\240\265\030\001\022B\n\025context_receiv" +
      "er_type\030\014 \003(\0132#.org.jetbrains.kotlin.met" +
      "adata.Type\022&\n\030context_receiver_type_id\030\r" +
      " \003(\005B\004\240\265\030\001\022H\n\021context_parameter\030\021 \003(\0132-." +
      "org.jetbrains.kotlin.metadata.ValueParam" +
      "eter\022M\n\026setter_value_parameter\030\006 \001(\0132-.o" +
      "rg.jetbrains.kotlin.metadata.ValueParame" +
      "ter\022\024\n\014getter_flags\030\007 \001(\005\022\024\n\014setter_flag" +
      "s\030\010 \001(\005\022\"\n\023version_requirement\030\037 \003(\005B\005\252\001" +
      "\002\030\002\022O\n\024compiler_plugin_data\030  \003(\01321.org." +
      "jetbrains.kotlin.metadata.CompilerPlugin" +
      "Data\022=\n\nannotation\030\016 \003(\0132).org.jetbrains" +
      ".kotlin.metadata.Annotation\022D\n\021getter_an" +
      "notation\030\017 \003(\0132).org.jetbrains.kotlin.me" +
      "tadata.Annotation\022D\n\021setter_annotation\030\020" +
      " \003(\0132).org.jetbrains.kotlin.metadata.Ann" +
      "otation\022P\n\035extension_receiver_annotation" +
      "\030! \003(\0132).org.jetbrains.kotlin.metadata.A" +
      "nnotation\022K\n\030backing_field_annotation\030\" " +
      "\003(\0132).org.jetbrains.kotlin.metadata.Anno" +
      "tation\022L\n\031delegate_field_annotation\030# \003(" +
      "\0132).org.jetbrains.kotlin.metadata.Annota" +
      "tion*\006\010d\020\270\224\001\"\231\003\n\016ValueParameter\022\020\n\005flags" +
      "\030\001 \001(\005:\0010\022\027\n\004name\030\002 \001(\005B\t\252\001\002\010\003\210\265\030\001\0221\n\004ty" +
      "pe\030\003 \001(\0132#.org.jetbrains.kotlin.metadata" +
      ".Type\022\025\n\007type_id\030\005 \001(\005B\004\240\265\030\001\022@\n\023vararg_e" +
      "lement_type\030\004 \001(\0132#.org.jetbrains.kotlin" +
      ".metadata.Type\022$\n\026vararg_element_type_id" +
      "\030\006 \001(\005B\004\240\265\030\001\022=\n\nannotation\030\007 \003(\0132).org.j" +
      "etbrains.kotlin.metadata.Annotation\022d\n\"a" +
      "nnotation_parameter_default_value\030\010 \001(\0132" +
      "8.org.jetbrains.kotlin.metadata.Annotati" +
      "on.Argument.Value*\005\010d\020\310\001\"\363\003\n\tTypeAlias\022\020" +
      "\n\005flags\030\001 \001(\005:\0016\022\027\n\004name\030\002 \001(\005B\t\252\001\002\010\003\210\265\030" +
      "\001\022D\n\016type_parameter\030\003 \003(\0132,.org.jetbrain" +
      "s.kotlin.metadata.TypeParameter\022<\n\017under" +
      "lying_type\030\004 \001(\0132#.org.jetbrains.kotlin." +
      "metadata.Type\022 \n\022underlying_type_id\030\005 \001(" +
      "\005B\004\240\265\030\001\022:\n\rexpanded_type\030\006 \001(\0132#.org.jet" +
      "brains.kotlin.metadata.Type\022\036\n\020expanded_" +
      "type_id\030\007 \001(\005B\004\240\265\030\001\022=\n\nannotation\030\010 \003(\0132" +
      ").org.jetbrains.kotlin.metadata.Annotati" +
      "on\022\"\n\023version_requirement\030\037 \003(\005B\005\252\001\002\030\002\022O" +
      "\n\024compiler_plugin_data\030  \003(\01321.org.jetbr" +
      "ains.kotlin.metadata.CompilerPluginData*" +
      "\005\010d\020\310\001\"e\n\tEnumEntry\022\022\n\004name\030\001 \001(\005B\004\210\265\030\001\022" +
      "=\n\nannotation\030\002 \003(\0132).org.jetbrains.kotl" +
      "in.metadata.Annotation*\005\010d\020\310\001\"\241\003\n\022Versio" +
      "nRequirement\022\017\n\007version\030\001 \001(\005\022\024\n\014version" +
      "_full\030\002 \001(\005\022M\n\005level\030\003 \001(\01627.org.jetbrai" +
      "ns.kotlin.metadata.VersionRequirement.Le" +
      "vel:\005ERROR\022\022\n\nerror_code\030\004 \001(\005\022\025\n\007messag" +
      "e\030\005 \001(\005B\004\230\265\030\001\022e\n\014version_kind\030\006 \001(\0162=.or" +
      "g.jetbrains.kotlin.metadata.VersionRequi" +
      "rement.VersionKind:\020LANGUAGE_VERSION\"1\n\005" +
      "Level\022\013\n\007WARNING\020\000\022\t\n\005ERROR\020\001\022\n\n\006HIDDEN\020" +
      "\002\032\004:\002\020\002\"P\n\013VersionKind\022\024\n\020LANGUAGE_VERSI" +
      "ON\020\000\022\024\n\020COMPILER_VERSION\020\001\022\017\n\013API_VERSIO" +
      "N\020\002\032\004:\002\020\002\"a\n\027VersionRequirementTable\022F\n\013" +
      "requirement\030\001 \003(\01321.org.jetbrains.kotlin" +
      ".metadata.VersionRequirement\"\217\002\n\017Package" +
      "Fragment\022;\n\007strings\030\001 \001(\0132*.org.jetbrain" +
      "s.kotlin.metadata.StringTable\022J\n\017qualifi" +
      "ed_names\030\002 \001(\01321.org.jetbrains.kotlin.me" +
      "tadata.QualifiedNameTable\0227\n\007package\030\003 \001" +
      "(\0132&.org.jetbrains.kotlin.metadata.Packa" +
      "ge\0223\n\005class\030\004 \003(\0132$.org.jetbrains.kotlin" +
      ".metadata.Class*\005\010d\020\310\001\"A\n\010Contract\0225\n\006ef" +
      "fect\030\001 \003(\0132%.org.jetbrains.kotlin.metada" +
      "ta.Effect\"\212\005\n\006Effect\022E\n\013effect_type\030\001 \001(" +
      "\01620.org.jetbrains.kotlin.metadata.Effect" +
      ".EffectType\022N\n\033effect_constructor_argume" +
      "nt\030\002 \003(\0132).org.jetbrains.kotlin.metadata" +
      ".Expression\022S\n conclusion_of_conditional" +
      "_effect\030\003 \001(\0132).org.jetbrains.kotlin.met" +
      "adata.Expression\022B\n\004kind\030\004 \001(\01624.org.jet" +
      "brains.kotlin.metadata.Effect.Invocation" +
      "Kind\022Q\n\016condition_kind\030\005 \001(\01629.org.jetbr" +
      "ains.kotlin.metadata.Effect.EffectCondit" +
      "ionKind\"I\n\nEffectType\022\024\n\020RETURNS_CONSTAN" +
      "T\020\000\022\t\n\005CALLS\020\001\022\024\n\020RETURNS_NOT_NULL\020\002\032\004:\002" +
      "\020\002\"M\n\016InvocationKind\022\020\n\014AT_MOST_ONCE\020\000\022\020" +
      "\n\014EXACTLY_ONCE\020\001\022\021\n\rAT_LEAST_ONCE\020\002\032\004:\002\020" +
      "\002\"c\n\023EffectConditionKind\022\030\n\024CONCLUSION_C" +
      "ONDITION\020\000\022\025\n\021RETURNS_CONDITION\020\001\022\025\n\021HOL" +
      "DSIN_CONDITION\020\002\032\004:\002\020\002\"\253\003\n\nExpression\022\020\n" +
      "\005flags\030\001 \001(\005:\0010\022!\n\031value_parameter_refer" +
      "ence\030\002 \001(\005\022O\n\016constant_value\030\003 \001(\01627.org" +
      ".jetbrains.kotlin.metadata.Expression.Co" +
      "nstantValue\022=\n\020is_instance_type\030\004 \001(\0132#." +
      "org.jetbrains.kotlin.metadata.Type\022!\n\023is" +
      "_instance_type_id\030\005 \001(\005B\004\240\265\030\001\022?\n\014and_arg" +
      "ument\030\006 \003(\0132).org.jetbrains.kotlin.metad" +
      "ata.Expression\022>\n\013or_argument\030\007 \003(\0132).or" +
      "g.jetbrains.kotlin.metadata.Expression\"4" +
      "\n\rConstantValue\022\010\n\004TRUE\020\000\022\t\n\005FALSE\020\001\022\010\n\004" +
      "NULL\020\002\032\004:\002\020\002\"G\n\022CompilerPluginData\022\034\n\tpl" +
      "ugin_id\030\001 \001(\005B\t\252\001\002\010\003\230\265\030\001\022\023\n\004data\030\002 \001(\014B\005" +
      "\252\001\002\010\003*?\n\010Modality\022\t\n\005FINAL\020\000\022\010\n\004OPEN\020\001\022\014" +
      "\n\010ABSTRACT\020\002\022\n\n\006SEALED\020\003\032\004:\002\020\002*h\n\nVisibi" +
      "lity\022\014\n\010INTERNAL\020\000\022\013\n\007PRIVATE\020\001\022\r\n\tPROTE" +
      "CTED\020\002\022\n\n\006PUBLIC\020\003\022\023\n\017PRIVATE_TO_THIS\020\004\022" +
      "\t\n\005LOCAL\020\005\032\004:\002\020\002*W\n\nMemberKind\022\017\n\013DECLAR" +
      "ATION\020\000\022\021\n\rFAKE_OVERRIDE\020\001\022\016\n\nDELEGATION" +
      "\020\002\022\017\n\013SYNTHESIZED\020\003\032\004:\002\020\002B\017B\010ProtoBuf\222\003\002" +
      " \003b\010editionsp\350\007"
    };
    descriptor = org.jetbrains.kotlin.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new org.jetbrains.kotlin.protobuf.Descriptors.FileDescriptor[] {
          org.jetbrains.kotlin.metadata.ExtOptionsProtoBuf.getDescriptor(),
        });
    internal_static_org_jetbrains_kotlin_metadata_StringTable_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_org_jetbrains_kotlin_metadata_StringTable_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_metadata_StringTable_descriptor,
        new java.lang.String[] { "String", });
    internal_static_org_jetbrains_kotlin_metadata_QualifiedNameTable_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_org_jetbrains_kotlin_metadata_QualifiedNameTable_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_metadata_QualifiedNameTable_descriptor,
        new java.lang.String[] { "QualifiedName", });
    internal_static_org_jetbrains_kotlin_metadata_QualifiedNameTable_QualifiedName_descriptor =
      internal_static_org_jetbrains_kotlin_metadata_QualifiedNameTable_descriptor.getNestedTypes().get(0);
    internal_static_org_jetbrains_kotlin_metadata_QualifiedNameTable_QualifiedName_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_metadata_QualifiedNameTable_QualifiedName_descriptor,
        new java.lang.String[] { "ParentQualifiedName", "ShortName", "Kind", });
    internal_static_org_jetbrains_kotlin_metadata_Annotation_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_org_jetbrains_kotlin_metadata_Annotation_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_metadata_Annotation_descriptor,
        new java.lang.String[] { "Id", "Argument", });
    internal_static_org_jetbrains_kotlin_metadata_Annotation_Argument_descriptor =
      internal_static_org_jetbrains_kotlin_metadata_Annotation_descriptor.getNestedTypes().get(0);
    internal_static_org_jetbrains_kotlin_metadata_Annotation_Argument_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_metadata_Annotation_Argument_descriptor,
        new java.lang.String[] { "NameId", "Value", });
    internal_static_org_jetbrains_kotlin_metadata_Annotation_Argument_Value_descriptor =
      internal_static_org_jetbrains_kotlin_metadata_Annotation_Argument_descriptor.getNestedTypes().get(0);
    internal_static_org_jetbrains_kotlin_metadata_Annotation_Argument_Value_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_metadata_Annotation_Argument_Value_descriptor,
        new java.lang.String[] { "Type", "IntValue", "FloatValue", "DoubleValue", "StringValue", "ClassId", "EnumValueId", "Annotation", "ArrayElement", "ArrayDimensionCount", "Flags", });
    internal_static_org_jetbrains_kotlin_metadata_Type_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_org_jetbrains_kotlin_metadata_Type_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_metadata_Type_descriptor,
        new java.lang.String[] { "Argument", "Nullable", "FlexibleTypeCapabilitiesId", "FlexibleUpperBound", "FlexibleUpperBoundId", "ClassName", "TypeParameter", "TypeParameterName", "TypeAliasName", "OuterType", "OuterTypeId", "AbbreviatedType", "AbbreviatedTypeId", "Flags", });
    internal_static_org_jetbrains_kotlin_metadata_Type_Argument_descriptor =
      internal_static_org_jetbrains_kotlin_metadata_Type_descriptor.getNestedTypes().get(0);
    internal_static_org_jetbrains_kotlin_metadata_Type_Argument_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_metadata_Type_Argument_descriptor,
        new java.lang.String[] { "Projection", "Type", "TypeId", });
    internal_static_org_jetbrains_kotlin_metadata_TypeParameter_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_org_jetbrains_kotlin_metadata_TypeParameter_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_metadata_TypeParameter_descriptor,
        new java.lang.String[] { "Id", "Name", "Reified", "Variance", "UpperBound", "UpperBoundId", });
    internal_static_org_jetbrains_kotlin_metadata_Class_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_org_jetbrains_kotlin_metadata_Class_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_metadata_Class_descriptor,
        new java.lang.String[] { "Flags", "FqName", "CompanionObjectName", "TypeParameter", "Supertype", "SupertypeId", "NestedClassName", "ContextReceiverType", "ContextReceiverTypeId", "Constructor", "Function", "Property", "TypeAlias", "EnumEntry", "SealedSubclassFqName", "InlineClassUnderlyingPropertyName", "InlineClassUnderlyingType", "InlineClassUnderlyingTypeId", "Annotation", "TypeTable", "VersionRequirement", "VersionRequirementTable", "CompilerPluginData", });
    internal_static_org_jetbrains_kotlin_metadata_Package_descriptor =
      getDescriptor().getMessageTypes().get(6);
    internal_static_org_jetbrains_kotlin_metadata_Package_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_metadata_Package_descriptor,
        new java.lang.String[] { "Function", "Property", "TypeAlias", "TypeTable", "VersionRequirementTable", });
    internal_static_org_jetbrains_kotlin_metadata_TypeTable_descriptor =
      getDescriptor().getMessageTypes().get(7);
    internal_static_org_jetbrains_kotlin_metadata_TypeTable_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_metadata_TypeTable_descriptor,
        new java.lang.String[] { "Type", "FirstNullable", });
    internal_static_org_jetbrains_kotlin_metadata_Constructor_descriptor =
      getDescriptor().getMessageTypes().get(8);
    internal_static_org_jetbrains_kotlin_metadata_Constructor_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_metadata_Constructor_descriptor,
        new java.lang.String[] { "Flags", "ValueParameter", "VersionRequirement", "CompilerPluginData", "Annotation", });
    internal_static_org_jetbrains_kotlin_metadata_Function_descriptor =
      getDescriptor().getMessageTypes().get(9);
    internal_static_org_jetbrains_kotlin_metadata_Function_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_metadata_Function_descriptor,
        new java.lang.String[] { "Flags", "OldFlags", "Name", "ReturnType", "ReturnTypeId", "TypeParameter", "ReceiverType", "ReceiverTypeId", "ContextReceiverType", "ContextReceiverTypeId", "ContextParameter", "ValueParameter", "TypeTable", "VersionRequirement", "Contract", "CompilerPluginData", "Annotation", "ExtensionReceiverAnnotation", });
    internal_static_org_jetbrains_kotlin_metadata_Property_descriptor =
      getDescriptor().getMessageTypes().get(10);
    internal_static_org_jetbrains_kotlin_metadata_Property_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_metadata_Property_descriptor,
        new java.lang.String[] { "Flags", "OldFlags", "Name", "ReturnType", "ReturnTypeId", "TypeParameter", "ReceiverType", "ReceiverTypeId", "ContextReceiverType", "ContextReceiverTypeId", "ContextParameter", "SetterValueParameter", "GetterFlags", "SetterFlags", "VersionRequirement", "CompilerPluginData", "Annotation", "GetterAnnotation", "SetterAnnotation", "ExtensionReceiverAnnotation", "BackingFieldAnnotation", "DelegateFieldAnnotation", });
    internal_static_org_jetbrains_kotlin_metadata_ValueParameter_descriptor =
      getDescriptor().getMessageTypes().get(11);
    internal_static_org_jetbrains_kotlin_metadata_ValueParameter_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_metadata_ValueParameter_descriptor,
        new java.lang.String[] { "Flags", "Name", "Type", "TypeId", "VarargElementType", "VarargElementTypeId", "Annotation", "AnnotationParameterDefaultValue", });
    internal_static_org_jetbrains_kotlin_metadata_TypeAlias_descriptor =
      getDescriptor().getMessageTypes().get(12);
    internal_static_org_jetbrains_kotlin_metadata_TypeAlias_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_metadata_TypeAlias_descriptor,
        new java.lang.String[] { "Flags", "Name", "TypeParameter", "UnderlyingType", "UnderlyingTypeId", "ExpandedType", "ExpandedTypeId", "Annotation", "VersionRequirement", "CompilerPluginData", });
    internal_static_org_jetbrains_kotlin_metadata_EnumEntry_descriptor =
      getDescriptor().getMessageTypes().get(13);
    internal_static_org_jetbrains_kotlin_metadata_EnumEntry_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_metadata_EnumEntry_descriptor,
        new java.lang.String[] { "Name", "Annotation", });
    internal_static_org_jetbrains_kotlin_metadata_VersionRequirement_descriptor =
      getDescriptor().getMessageTypes().get(14);
    internal_static_org_jetbrains_kotlin_metadata_VersionRequirement_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_metadata_VersionRequirement_descriptor,
        new java.lang.String[] { "Version", "VersionFull", "Level", "ErrorCode", "Message", "VersionKind", });
    internal_static_org_jetbrains_kotlin_metadata_VersionRequirementTable_descriptor =
      getDescriptor().getMessageTypes().get(15);
    internal_static_org_jetbrains_kotlin_metadata_VersionRequirementTable_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_metadata_VersionRequirementTable_descriptor,
        new java.lang.String[] { "Requirement", });
    internal_static_org_jetbrains_kotlin_metadata_PackageFragment_descriptor =
      getDescriptor().getMessageTypes().get(16);
    internal_static_org_jetbrains_kotlin_metadata_PackageFragment_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_metadata_PackageFragment_descriptor,
        new java.lang.String[] { "Strings", "QualifiedNames", "Package", "Class_", });
    internal_static_org_jetbrains_kotlin_metadata_Contract_descriptor =
      getDescriptor().getMessageTypes().get(17);
    internal_static_org_jetbrains_kotlin_metadata_Contract_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_metadata_Contract_descriptor,
        new java.lang.String[] { "Effect", });
    internal_static_org_jetbrains_kotlin_metadata_Effect_descriptor =
      getDescriptor().getMessageTypes().get(18);
    internal_static_org_jetbrains_kotlin_metadata_Effect_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_metadata_Effect_descriptor,
        new java.lang.String[] { "EffectType", "EffectConstructorArgument", "ConclusionOfConditionalEffect", "Kind", "ConditionKind", });
    internal_static_org_jetbrains_kotlin_metadata_Expression_descriptor =
      getDescriptor().getMessageTypes().get(19);
    internal_static_org_jetbrains_kotlin_metadata_Expression_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_metadata_Expression_descriptor,
        new java.lang.String[] { "Flags", "ValueParameterReference", "ConstantValue", "IsInstanceType", "IsInstanceTypeId", "AndArgument", "OrArgument", });
    internal_static_org_jetbrains_kotlin_metadata_CompilerPluginData_descriptor =
      getDescriptor().getMessageTypes().get(20);
    internal_static_org_jetbrains_kotlin_metadata_CompilerPluginData_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_metadata_CompilerPluginData_descriptor,
        new java.lang.String[] { "PluginId", "Data", });
    descriptor.resolveAllFeaturesImmutable();
    org.jetbrains.kotlin.metadata.ExtOptionsProtoBuf.getDescriptor();
    org.jetbrains.kotlin.protobuf.ExtensionRegistry registry =
        org.jetbrains.kotlin.protobuf.ExtensionRegistry.newInstance();
    registry.add(org.jetbrains.kotlin.metadata.ExtOptionsProtoBuf.fqNameIdInTable);
    registry.add(org.jetbrains.kotlin.metadata.ExtOptionsProtoBuf.nameIdInTable);
    registry.add(org.jetbrains.kotlin.metadata.ExtOptionsProtoBuf.skipMessageInComparison);
    registry.add(org.jetbrains.kotlin.metadata.ExtOptionsProtoBuf.stringIdInTable);
    registry.add(org.jetbrains.kotlin.metadata.ExtOptionsProtoBuf.typeIdInTable);
    org.jetbrains.kotlin.protobuf.Descriptors.FileDescriptor
        .internalUpdateFileDescriptor(descriptor, registry);
  }

  // @@protoc_insertion_point(outer_class_scope)
}