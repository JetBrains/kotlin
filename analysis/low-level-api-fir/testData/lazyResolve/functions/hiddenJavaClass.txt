RAW_FIR:
FILE: [ResolvedTo(RAW_FIR)] main.kt
    public final? [ResolvedTo(RAW_FIR)] class Nested : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Nested] constructor(): R|Nested| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] fun foo(): <implicit> { LAZY_BLOCK }

    }
    public final? [ResolvedTo(RAW_FIR)] class MyClass : JavaClass {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyClass] constructor(): R|MyClass| {
            LAZY_super<JavaClass>
        }

        public? final? [ResolvedTo(RAW_FIR)] fun check([ResolvedTo(RAW_FIR)] n: Nested): String { LAZY_BLOCK }

    }

IMPORTS:
FILE: [ResolvedTo(IMPORTS)] main.kt
    public final? [ResolvedTo(RAW_FIR)] class Nested : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Nested] constructor(): R|Nested| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] fun foo(): <implicit> { LAZY_BLOCK }

    }
    public final? [ResolvedTo(RAW_FIR)] class MyClass : JavaClass {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyClass] constructor(): R|MyClass| {
            LAZY_super<JavaClass>
        }

        public? final? [ResolvedTo(RAW_FIR)] fun check([ResolvedTo(RAW_FIR)] n: Nested): String { LAZY_BLOCK }

    }

COMPILER_REQUIRED_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] main.kt
    public final? [ResolvedTo(RAW_FIR)] class Nested : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Nested] constructor(): R|Nested| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] fun foo(): <implicit> { LAZY_BLOCK }

    }
    public final? [ResolvedTo(RAW_FIR)] class MyClass : JavaClass {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyClass] constructor(): R|MyClass| {
            LAZY_super<JavaClass>
        }

        public? final? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] fun check([ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] n: Nested): String { LAZY_BLOCK }

    }

COMPANION_GENERATION:
FILE: [ResolvedTo(IMPORTS)] main.kt
    public final? [ResolvedTo(RAW_FIR)] class Nested : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Nested] constructor(): R|Nested| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] fun foo(): <implicit> { LAZY_BLOCK }

    }
    public final? [ResolvedTo(RAW_FIR)] class MyClass : JavaClass {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyClass] constructor(): R|MyClass| {
            LAZY_super<JavaClass>
        }

        public? final? [ResolvedTo(COMPANION_GENERATION)] fun check([ResolvedTo(COMPANION_GENERATION)] n: Nested): String { LAZY_BLOCK }

    }

SUPER_TYPES:
FILE: [ResolvedTo(IMPORTS)] main.kt
    public final? [ResolvedTo(RAW_FIR)] class Nested : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Nested] constructor(): R|Nested| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] fun foo(): <implicit> { LAZY_BLOCK }

    }
    public final? [ResolvedTo(SUPER_TYPES)] class MyClass : R|JavaClass| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyClass] constructor(): R|MyClass| {
            LAZY_super<JavaClass>
        }

        public? final? [ResolvedTo(SUPER_TYPES)] fun check([ResolvedTo(SUPER_TYPES)] n: Nested): String { LAZY_BLOCK }

    }

TYPES:
FILE: [ResolvedTo(IMPORTS)] main.kt
    public final? [ResolvedTo(RAW_FIR)] class Nested : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Nested] constructor(): R|Nested| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] fun foo(): <implicit> { LAZY_BLOCK }

    }
    public final? [ResolvedTo(TYPES)] class MyClass : R|JavaClass| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyClass] constructor(): R|MyClass| {
            LAZY_super<JavaClass>
        }

        public? final? [ResolvedTo(TYPES)] fun check([ResolvedTo(TYPES)] n: R|JavaClass.Nested|): R|kotlin/String| { LAZY_BLOCK }

    }

STATUS:
FILE: [ResolvedTo(IMPORTS)] main.kt
    public final? [ResolvedTo(RAW_FIR)] class Nested : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Nested] constructor(): R|Nested| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] fun foo(): <implicit> { LAZY_BLOCK }

    }
    public final [ResolvedTo(STATUS)] class MyClass : R|JavaClass| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=MyClass] constructor(): R|MyClass| {
            LAZY_super<R|JavaClass|>
        }

        public final [ResolvedTo(STATUS)] fun check([ResolvedTo(STATUS)] n: R|JavaClass.Nested|): R|kotlin/String| { LAZY_BLOCK }

    }

EXPECT_ACTUAL_MATCHING:
FILE: [ResolvedTo(IMPORTS)] main.kt
    public final? [ResolvedTo(RAW_FIR)] class Nested : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Nested] constructor(): R|Nested| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] fun foo(): <implicit> { LAZY_BLOCK }

    }
    public final [ResolvedTo(STATUS)] class MyClass : R|JavaClass| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=MyClass] constructor(): R|MyClass| {
            LAZY_super<R|JavaClass|>
        }

        public final [ResolvedTo(EXPECT_ACTUAL_MATCHING)] fun check([ResolvedTo(EXPECT_ACTUAL_MATCHING)] n: R|JavaClass.Nested|): R|kotlin/String| { LAZY_BLOCK }

    }

CONTRACTS:
FILE: [ResolvedTo(IMPORTS)] main.kt
    public final? [ResolvedTo(RAW_FIR)] class Nested : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Nested] constructor(): R|Nested| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] fun foo(): <implicit> { LAZY_BLOCK }

    }
    public final [ResolvedTo(STATUS)] class MyClass : R|JavaClass| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=MyClass] constructor(): R|MyClass| {
            LAZY_super<R|JavaClass|>
        }

        public final [ResolvedTo(CONTRACTS)] fun check([ResolvedTo(CONTRACTS)] n: R|JavaClass.Nested|): R|kotlin/String| { LAZY_BLOCK }

    }

IMPLICIT_TYPES_BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] main.kt
    public final? [ResolvedTo(RAW_FIR)] class Nested : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Nested] constructor(): R|Nested| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] fun foo(): <implicit> { LAZY_BLOCK }

    }
    public final [ResolvedTo(STATUS)] class MyClass : R|JavaClass| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=MyClass] constructor(): R|MyClass| {
            LAZY_super<R|JavaClass|>
        }

        public final [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] fun check([ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] n: R|JavaClass.Nested|): R|kotlin/String| { LAZY_BLOCK }

    }

CONSTANT_EVALUATION:
FILE: [ResolvedTo(IMPORTS)] main.kt
    public final? [ResolvedTo(RAW_FIR)] class Nested : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Nested] constructor(): R|Nested| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] fun foo(): <implicit> { LAZY_BLOCK }

    }
    public final [ResolvedTo(STATUS)] class MyClass : R|JavaClass| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=MyClass] constructor(): R|MyClass| {
            LAZY_super<R|JavaClass|>
        }

        public final [ResolvedTo(CONSTANT_EVALUATION)] fun check([ResolvedTo(CONSTANT_EVALUATION)] n: R|JavaClass.Nested|): R|kotlin/String| { LAZY_BLOCK }

    }

ANNOTATION_ARGUMENTS:
FILE: [ResolvedTo(IMPORTS)] main.kt
    public final? [ResolvedTo(RAW_FIR)] class Nested : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Nested] constructor(): R|Nested| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] fun foo(): <implicit> { LAZY_BLOCK }

    }
    public final [ResolvedTo(STATUS)] class MyClass : R|JavaClass| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=MyClass] constructor(): R|MyClass| {
            LAZY_super<R|JavaClass|>
        }

        public final [ResolvedTo(ANNOTATION_ARGUMENTS)] fun check([ResolvedTo(ANNOTATION_ARGUMENTS)] n: R|JavaClass.Nested|): R|kotlin/String| { LAZY_BLOCK }

    }

BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] main.kt
    public final? [ResolvedTo(RAW_FIR)] class Nested : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Nested] constructor(): R|Nested| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] fun foo(): <implicit> { LAZY_BLOCK }

    }
    public final [ResolvedTo(STATUS)] class MyClass : R|JavaClass| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=MyClass] constructor(): R|MyClass| {
            LAZY_super<R|JavaClass|>
        }

        public final [ResolvedTo(BODY_RESOLVE)] fun check([ResolvedTo(BODY_RESOLVE)] n: R|JavaClass.Nested|): R|kotlin/String| {
            ^check R|<local>/n|.<Unresolved name: foo>#()
        }

    }

FILE RAW TO BODY:
FILE: [ResolvedTo(BODY_RESOLVE)] main.kt
    public final [ResolvedTo(BODY_RESOLVE)] class Nested : R|kotlin/Any| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Nested] constructor(): R|Nested| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(BODY_RESOLVE)] fun foo(): R|kotlin/String| {
            ^foo String(OK)
        }

    }
    public final [ResolvedTo(BODY_RESOLVE)] class MyClass : R|JavaClass| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=MyClass] constructor(): R|MyClass| {
            super<R|JavaClass|>()
        }

        public final [ResolvedTo(BODY_RESOLVE)] fun check([ResolvedTo(BODY_RESOLVE)] n: R|JavaClass.Nested|): R|kotlin/String| {
            ^check R|<local>/n|.<Unresolved name: foo>#()
        }

    }
