// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: js/js.config/src/js-ast.proto
// Protobuf Java Version: 4.29.3

package org.jetbrains.kotlin.serialization.js.ast;

public final class JsAstProtoBuf {
  private JsAstProtoBuf() {}
  public static void registerAllExtensions(
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite registry) {
  }
  /**
   * Protobuf enum {@code org.jetbrains.kotlin.serialization.js.ast.SideEffects}
   */
  public enum SideEffects
      implements org.jetbrains.kotlin.protobuf.Internal.EnumLite {
    /**
     * <code>AFFECTS_STATE = 1;</code>
     */
    AFFECTS_STATE(1),
    /**
     * <code>DEPENDS_ON_STATE = 2;</code>
     */
    DEPENDS_ON_STATE(2),
    /**
     * <code>PURE = 3;</code>
     */
    PURE(3),
    ;

    /**
     * <code>AFFECTS_STATE = 1;</code>
     */
    public static final int AFFECTS_STATE_VALUE = 1;
    /**
     * <code>DEPENDS_ON_STATE = 2;</code>
     */
    public static final int DEPENDS_ON_STATE_VALUE = 2;
    /**
     * <code>PURE = 3;</code>
     */
    public static final int PURE_VALUE = 3;


    @java.lang.Override
    public final int getNumber() {
      return value;
    }

    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static SideEffects valueOf(int value) {
      return forNumber(value);
    }

    public static SideEffects forNumber(int value) {
      switch (value) {
        case 1: return AFFECTS_STATE;
        case 2: return DEPENDS_ON_STATE;
        case 3: return PURE;
        default: return null;
      }
    }

    public static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<SideEffects>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<
        SideEffects> internalValueMap =
          new org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<SideEffects>() {
            @java.lang.Override
            public SideEffects findValueByNumber(int number) {
              return SideEffects.forNumber(number);
            }
          };

    public static org.jetbrains.kotlin.protobuf.Internal.EnumVerifier 
        internalGetVerifier() {
      return SideEffectsVerifier.INSTANCE;
    }

    private static final class SideEffectsVerifier implements 
         org.jetbrains.kotlin.protobuf.Internal.EnumVerifier { 
            static final org.jetbrains.kotlin.protobuf.Internal.EnumVerifier           INSTANCE = new SideEffectsVerifier();
            @java.lang.Override
            public boolean isInRange(int number) {
              return SideEffects.forNumber(number) != null;
            }
          };

    private final int value;

    private SideEffects(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:org.jetbrains.kotlin.serialization.js.ast.SideEffects)
  }

  /**
   * Protobuf enum {@code org.jetbrains.kotlin.serialization.js.ast.InlineStrategy}
   */
  public enum InlineStrategy
      implements org.jetbrains.kotlin.protobuf.Internal.EnumLite {
    /**
     * <code>AS_FUNCTION = 0;</code>
     */
    AS_FUNCTION(0),
    /**
     * <code>IN_PLACE = 1;</code>
     */
    IN_PLACE(1),
    /**
     * <code>NOT_INLINE = 2;</code>
     */
    NOT_INLINE(2),
    ;

    /**
     * <code>AS_FUNCTION = 0;</code>
     */
    public static final int AS_FUNCTION_VALUE = 0;
    /**
     * <code>IN_PLACE = 1;</code>
     */
    public static final int IN_PLACE_VALUE = 1;
    /**
     * <code>NOT_INLINE = 2;</code>
     */
    public static final int NOT_INLINE_VALUE = 2;


    @java.lang.Override
    public final int getNumber() {
      return value;
    }

    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static InlineStrategy valueOf(int value) {
      return forNumber(value);
    }

    public static InlineStrategy forNumber(int value) {
      switch (value) {
        case 0: return AS_FUNCTION;
        case 1: return IN_PLACE;
        case 2: return NOT_INLINE;
        default: return null;
      }
    }

    public static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<InlineStrategy>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<
        InlineStrategy> internalValueMap =
          new org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<InlineStrategy>() {
            @java.lang.Override
            public InlineStrategy findValueByNumber(int number) {
              return InlineStrategy.forNumber(number);
            }
          };

    public static org.jetbrains.kotlin.protobuf.Internal.EnumVerifier 
        internalGetVerifier() {
      return InlineStrategyVerifier.INSTANCE;
    }

    private static final class InlineStrategyVerifier implements 
         org.jetbrains.kotlin.protobuf.Internal.EnumVerifier { 
            static final org.jetbrains.kotlin.protobuf.Internal.EnumVerifier           INSTANCE = new InlineStrategyVerifier();
            @java.lang.Override
            public boolean isInRange(int number) {
              return InlineStrategy.forNumber(number) != null;
            }
          };

    private final int value;

    private InlineStrategy(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:org.jetbrains.kotlin.serialization.js.ast.InlineStrategy)
  }

  /**
   * Protobuf enum {@code org.jetbrains.kotlin.serialization.js.ast.SpecialFunction}
   */
  public enum SpecialFunction
      implements org.jetbrains.kotlin.protobuf.Internal.EnumLite {
    /**
     * <code>DEFINE_INLINE_FUNCTION = 1;</code>
     */
    DEFINE_INLINE_FUNCTION(1),
    /**
     * <code>WRAP_FUNCTION = 2;</code>
     */
    WRAP_FUNCTION(2),
    /**
     * <code>TO_BOXED_CHAR = 3;</code>
     */
    TO_BOXED_CHAR(3),
    /**
     * <code>UNBOX_CHAR = 4;</code>
     */
    UNBOX_CHAR(4),
    /**
     * <code>SUSPEND_CALL = 5;</code>
     */
    SUSPEND_CALL(5),
    /**
     * <code>COROUTINE_RESULT = 6;</code>
     */
    COROUTINE_RESULT(6),
    /**
     * <code>COROUTINE_CONTROLLER = 7;</code>
     */
    COROUTINE_CONTROLLER(7),
    /**
     * <code>COROUTINE_RECEIVER = 8;</code>
     */
    COROUTINE_RECEIVER(8),
    /**
     * <code>SET_COROUTINE_RESULT = 9;</code>
     */
    SET_COROUTINE_RESULT(9),
    /**
     * <code>GET_KCLASS = 10;</code>
     */
    GET_KCLASS(10),
    /**
     * <code>GET_REIFIED_TYPE_PARAMETER_KTYPE = 11;</code>
     */
    GET_REIFIED_TYPE_PARAMETER_KTYPE(11),
    ;

    /**
     * <code>DEFINE_INLINE_FUNCTION = 1;</code>
     */
    public static final int DEFINE_INLINE_FUNCTION_VALUE = 1;
    /**
     * <code>WRAP_FUNCTION = 2;</code>
     */
    public static final int WRAP_FUNCTION_VALUE = 2;
    /**
     * <code>TO_BOXED_CHAR = 3;</code>
     */
    public static final int TO_BOXED_CHAR_VALUE = 3;
    /**
     * <code>UNBOX_CHAR = 4;</code>
     */
    public static final int UNBOX_CHAR_VALUE = 4;
    /**
     * <code>SUSPEND_CALL = 5;</code>
     */
    public static final int SUSPEND_CALL_VALUE = 5;
    /**
     * <code>COROUTINE_RESULT = 6;</code>
     */
    public static final int COROUTINE_RESULT_VALUE = 6;
    /**
     * <code>COROUTINE_CONTROLLER = 7;</code>
     */
    public static final int COROUTINE_CONTROLLER_VALUE = 7;
    /**
     * <code>COROUTINE_RECEIVER = 8;</code>
     */
    public static final int COROUTINE_RECEIVER_VALUE = 8;
    /**
     * <code>SET_COROUTINE_RESULT = 9;</code>
     */
    public static final int SET_COROUTINE_RESULT_VALUE = 9;
    /**
     * <code>GET_KCLASS = 10;</code>
     */
    public static final int GET_KCLASS_VALUE = 10;
    /**
     * <code>GET_REIFIED_TYPE_PARAMETER_KTYPE = 11;</code>
     */
    public static final int GET_REIFIED_TYPE_PARAMETER_KTYPE_VALUE = 11;


    @java.lang.Override
    public final int getNumber() {
      return value;
    }

    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static SpecialFunction valueOf(int value) {
      return forNumber(value);
    }

    public static SpecialFunction forNumber(int value) {
      switch (value) {
        case 1: return DEFINE_INLINE_FUNCTION;
        case 2: return WRAP_FUNCTION;
        case 3: return TO_BOXED_CHAR;
        case 4: return UNBOX_CHAR;
        case 5: return SUSPEND_CALL;
        case 6: return COROUTINE_RESULT;
        case 7: return COROUTINE_CONTROLLER;
        case 8: return COROUTINE_RECEIVER;
        case 9: return SET_COROUTINE_RESULT;
        case 10: return GET_KCLASS;
        case 11: return GET_REIFIED_TYPE_PARAMETER_KTYPE;
        default: return null;
      }
    }

    public static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<SpecialFunction>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<
        SpecialFunction> internalValueMap =
          new org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<SpecialFunction>() {
            @java.lang.Override
            public SpecialFunction findValueByNumber(int number) {
              return SpecialFunction.forNumber(number);
            }
          };

    public static org.jetbrains.kotlin.protobuf.Internal.EnumVerifier 
        internalGetVerifier() {
      return SpecialFunctionVerifier.INSTANCE;
    }

    private static final class SpecialFunctionVerifier implements 
         org.jetbrains.kotlin.protobuf.Internal.EnumVerifier { 
            static final org.jetbrains.kotlin.protobuf.Internal.EnumVerifier           INSTANCE = new SpecialFunctionVerifier();
            @java.lang.Override
            public boolean isInRange(int number) {
              return SpecialFunction.forNumber(number) != null;
            }
          };

    private final int value;

    private SpecialFunction(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:org.jetbrains.kotlin.serialization.js.ast.SpecialFunction)
  }

  public interface LocationOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.Location)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>int32 startLine = 1 [features = { ... }</code>
     * @return Whether the startLine field is set.
     */
    boolean hasStartLine();
    /**
     * <code>int32 startLine = 1 [features = { ... }</code>
     * @return The startLine.
     */
    int getStartLine();

    /**
     * <code>int32 startChar = 2 [features = { ... }</code>
     * @return Whether the startChar field is set.
     */
    boolean hasStartChar();
    /**
     * <code>int32 startChar = 2 [features = { ... }</code>
     * @return The startChar.
     */
    int getStartChar();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Location}
   */
  public  static final class Location extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          Location, Location.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.Location)
      LocationOrBuilder {
    private Location() {
    }
    private int bitField0_;
    public static final int STARTLINE_FIELD_NUMBER = 1;
    private int startLine_;
    /**
     * <code>int32 startLine = 1 [features = { ... }</code>
     * @return Whether the startLine field is set.
     */
    @java.lang.Override
    public boolean hasStartLine() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>int32 startLine = 1 [features = { ... }</code>
     * @return The startLine.
     */
    @java.lang.Override
    public int getStartLine() {
      return startLine_;
    }
    /**
     * <code>int32 startLine = 1 [features = { ... }</code>
     * @param value The startLine to set.
     */
    private void setStartLine(int value) {
      bitField0_ |= 0x00000001;
      startLine_ = value;
    }
    /**
     * <code>int32 startLine = 1 [features = { ... }</code>
     */
    private void clearStartLine() {
      bitField0_ = (bitField0_ & ~0x00000001);
      startLine_ = 0;
    }

    public static final int STARTCHAR_FIELD_NUMBER = 2;
    private int startChar_;
    /**
     * <code>int32 startChar = 2 [features = { ... }</code>
     * @return Whether the startChar field is set.
     */
    @java.lang.Override
    public boolean hasStartChar() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>int32 startChar = 2 [features = { ... }</code>
     * @return The startChar.
     */
    @java.lang.Override
    public int getStartChar() {
      return startChar_;
    }
    /**
     * <code>int32 startChar = 2 [features = { ... }</code>
     * @param value The startChar to set.
     */
    private void setStartChar(int value) {
      bitField0_ |= 0x00000002;
      startChar_ = value;
    }
    /**
     * <code>int32 startChar = 2 [features = { ... }</code>
     */
    private void clearStartChar() {
      bitField0_ = (bitField0_ & ~0x00000002);
      startChar_ = 0;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Location}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.Location)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocationOrBuilder {
      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>int32 startLine = 1 [features = { ... }</code>
       * @return Whether the startLine field is set.
       */
      @java.lang.Override
      public boolean hasStartLine() {
        return instance.hasStartLine();
      }
      /**
       * <code>int32 startLine = 1 [features = { ... }</code>
       * @return The startLine.
       */
      @java.lang.Override
      public int getStartLine() {
        return instance.getStartLine();
      }
      /**
       * <code>int32 startLine = 1 [features = { ... }</code>
       * @param value The startLine to set.
       * @return This builder for chaining.
       */
      public Builder setStartLine(int value) {
        copyOnWrite();
        instance.setStartLine(value);
        return this;
      }
      /**
       * <code>int32 startLine = 1 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearStartLine() {
        copyOnWrite();
        instance.clearStartLine();
        return this;
      }

      /**
       * <code>int32 startChar = 2 [features = { ... }</code>
       * @return Whether the startChar field is set.
       */
      @java.lang.Override
      public boolean hasStartChar() {
        return instance.hasStartChar();
      }
      /**
       * <code>int32 startChar = 2 [features = { ... }</code>
       * @return The startChar.
       */
      @java.lang.Override
      public int getStartChar() {
        return instance.getStartChar();
      }
      /**
       * <code>int32 startChar = 2 [features = { ... }</code>
       * @param value The startChar to set.
       * @return This builder for chaining.
       */
      public Builder setStartChar(int value) {
        copyOnWrite();
        instance.setStartChar(value);
        return this;
      }
      /**
       * <code>int32 startChar = 2 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearStartChar() {
        copyOnWrite();
        instance.clearStartChar();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.Location)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "startLine_",
              "startChar_",
            };
            java.lang.String info =
                "\u0004\u0002\u0000\u0001\u0001\u0002\u0002\u0000\u0000\u0002\u0001\u1504\u0000\u0002" +
                "\u1504\u0001";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.Location)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location DEFAULT_INSTANCE;
    static {
      Location defaultInstance = new Location();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        Location.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<Location> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<Location> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface JsImportedModuleOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.JsImportedModule)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>int32 external_name = 1 [features = { ... }</code>
     * @return Whether the externalName field is set.
     */
    boolean hasExternalName();
    /**
     * <code>int32 external_name = 1 [features = { ... }</code>
     * @return The externalName.
     */
    int getExternalName();

    /**
     * <code>int32 internal_name = 2 [features = { ... }</code>
     * @return Whether the internalName field is set.
     */
    boolean hasInternalName();
    /**
     * <code>int32 internal_name = 2 [features = { ... }</code>
     * @return The internalName.
     */
    int getInternalName();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression plain_reference = 3;</code>
     * @return Whether the plainReference field is set.
     */
    boolean hasPlainReference();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression plain_reference = 3;</code>
     * @return The plainReference.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getPlainReference();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.JsImportedModule}
   */
  public  static final class JsImportedModule extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          JsImportedModule, JsImportedModule.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.JsImportedModule)
      JsImportedModuleOrBuilder {
    private JsImportedModule() {
    }
    private int bitField0_;
    public static final int EXTERNAL_NAME_FIELD_NUMBER = 1;
    private int externalName_;
    /**
     * <code>int32 external_name = 1 [features = { ... }</code>
     * @return Whether the externalName field is set.
     */
    @java.lang.Override
    public boolean hasExternalName() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>int32 external_name = 1 [features = { ... }</code>
     * @return The externalName.
     */
    @java.lang.Override
    public int getExternalName() {
      return externalName_;
    }
    /**
     * <code>int32 external_name = 1 [features = { ... }</code>
     * @param value The externalName to set.
     */
    private void setExternalName(int value) {
      bitField0_ |= 0x00000001;
      externalName_ = value;
    }
    /**
     * <code>int32 external_name = 1 [features = { ... }</code>
     */
    private void clearExternalName() {
      bitField0_ = (bitField0_ & ~0x00000001);
      externalName_ = 0;
    }

    public static final int INTERNAL_NAME_FIELD_NUMBER = 2;
    private int internalName_;
    /**
     * <code>int32 internal_name = 2 [features = { ... }</code>
     * @return Whether the internalName field is set.
     */
    @java.lang.Override
    public boolean hasInternalName() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>int32 internal_name = 2 [features = { ... }</code>
     * @return The internalName.
     */
    @java.lang.Override
    public int getInternalName() {
      return internalName_;
    }
    /**
     * <code>int32 internal_name = 2 [features = { ... }</code>
     * @param value The internalName to set.
     */
    private void setInternalName(int value) {
      bitField0_ |= 0x00000002;
      internalName_ = value;
    }
    /**
     * <code>int32 internal_name = 2 [features = { ... }</code>
     */
    private void clearInternalName() {
      bitField0_ = (bitField0_ & ~0x00000002);
      internalName_ = 0;
    }

    public static final int PLAIN_REFERENCE_FIELD_NUMBER = 3;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression plainReference_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression plain_reference = 3;</code>
     */
    @java.lang.Override
    public boolean hasPlainReference() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression plain_reference = 3;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getPlainReference() {
      return plainReference_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : plainReference_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression plain_reference = 3;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setPlainReference(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      plainReference_ = value;
      bitField0_ |= 0x00000004;
      }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression plain_reference = 3;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergePlainReference(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      if (plainReference_ != null &&
          plainReference_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance()) {
        plainReference_ =
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.newBuilder(plainReference_).mergeFrom(value).buildPartial();
      } else {
        plainReference_ = value;
      }
      bitField0_ |= 0x00000004;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression plain_reference = 3;</code>
     */
    private void clearPlainReference() {  plainReference_ = null;
      bitField0_ = (bitField0_ & ~0x00000004);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.JsImportedModule}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.JsImportedModule)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModuleOrBuilder {
      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>int32 external_name = 1 [features = { ... }</code>
       * @return Whether the externalName field is set.
       */
      @java.lang.Override
      public boolean hasExternalName() {
        return instance.hasExternalName();
      }
      /**
       * <code>int32 external_name = 1 [features = { ... }</code>
       * @return The externalName.
       */
      @java.lang.Override
      public int getExternalName() {
        return instance.getExternalName();
      }
      /**
       * <code>int32 external_name = 1 [features = { ... }</code>
       * @param value The externalName to set.
       * @return This builder for chaining.
       */
      public Builder setExternalName(int value) {
        copyOnWrite();
        instance.setExternalName(value);
        return this;
      }
      /**
       * <code>int32 external_name = 1 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearExternalName() {
        copyOnWrite();
        instance.clearExternalName();
        return this;
      }

      /**
       * <code>int32 internal_name = 2 [features = { ... }</code>
       * @return Whether the internalName field is set.
       */
      @java.lang.Override
      public boolean hasInternalName() {
        return instance.hasInternalName();
      }
      /**
       * <code>int32 internal_name = 2 [features = { ... }</code>
       * @return The internalName.
       */
      @java.lang.Override
      public int getInternalName() {
        return instance.getInternalName();
      }
      /**
       * <code>int32 internal_name = 2 [features = { ... }</code>
       * @param value The internalName to set.
       * @return This builder for chaining.
       */
      public Builder setInternalName(int value) {
        copyOnWrite();
        instance.setInternalName(value);
        return this;
      }
      /**
       * <code>int32 internal_name = 2 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearInternalName() {
        copyOnWrite();
        instance.clearInternalName();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression plain_reference = 3;</code>
       */
      @java.lang.Override
      public boolean hasPlainReference() {
        return instance.hasPlainReference();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression plain_reference = 3;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getPlainReference() {
        return instance.getPlainReference();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression plain_reference = 3;</code>
       */
      public Builder setPlainReference(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        copyOnWrite();
        instance.setPlainReference(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression plain_reference = 3;</code>
       */
      public Builder setPlainReference(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        copyOnWrite();
        instance.setPlainReference(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression plain_reference = 3;</code>
       */
      public Builder mergePlainReference(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        copyOnWrite();
        instance.mergePlainReference(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression plain_reference = 3;</code>
       */
      public Builder clearPlainReference() {  copyOnWrite();
        instance.clearPlainReference();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.JsImportedModule)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "externalName_",
              "internalName_",
              "plainReference_",
            };
            java.lang.String info =
                "\u0004\u0003\u0000\u0001\u0001\u0003\u0003\u0000\u0000\u0003\u0001\u1504\u0000\u0002" +
                "\u1504\u0001\u0003\u1409\u0002";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.JsImportedModule)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule DEFAULT_INSTANCE;
    static {
      JsImportedModule defaultInstance = new JsImportedModule();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        JsImportedModule.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<JsImportedModule> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<JsImportedModule> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ExpressionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.Expression)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>int32 fileId = 1;</code>
     * @return Whether the fileId field is set.
     */
    boolean hasFileId();
    /**
     * <code>int32 fileId = 1;</code>
     * @return The fileId.
     */
    int getFileId();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 2;</code>
     * @return Whether the location field is set.
     */
    boolean hasLocation();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 2;</code>
     * @return The location.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location getLocation();

    /**
     * <code>bool synthetic = 3 [default = false];</code>
     * @return Whether the synthetic field is set.
     */
    boolean hasSynthetic();
    /**
     * <code>bool synthetic = 3 [default = false];</code>
     * @return The synthetic.
     */
    boolean getSynthetic();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.SideEffects side_effects = 4 [default = AFFECTS_STATE];</code>
     * @return Whether the sideEffects field is set.
     */
    boolean hasSideEffects();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.SideEffects side_effects = 4 [default = AFFECTS_STATE];</code>
     * @return The sideEffects.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SideEffects getSideEffects();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.JsImportedModule local_alias = 5;</code>
     * @return Whether the localAlias field is set.
     */
    boolean hasLocalAlias();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.JsImportedModule local_alias = 5;</code>
     * @return The localAlias.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule getLocalAlias();

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 6;</code>
     */
    java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment> 
        getBeforeCommentsList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 6;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment getBeforeComments(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 6;</code>
     */
    int getBeforeCommentsCount();

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 7;</code>
     */
    java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment> 
        getAfterCommentsList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 7;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment getAfterComments(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 7;</code>
     */
    int getAfterCommentsCount();

    /**
     * <code>int32 simple_name_reference = 22;</code>
     * @return Whether the simpleNameReference field is set.
     */
    boolean hasSimpleNameReference();
    /**
     * <code>int32 simple_name_reference = 22;</code>
     * @return The simpleNameReference.
     */
    int getSimpleNameReference();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.ThisLiteral this_literal = 23;</code>
     * @return Whether the thisLiteral field is set.
     */
    boolean hasThisLiteral();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.ThisLiteral this_literal = 23;</code>
     * @return The thisLiteral.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral getThisLiteral();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.NullLiteral null_literal = 24;</code>
     * @return Whether the nullLiteral field is set.
     */
    boolean hasNullLiteral();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.NullLiteral null_literal = 24;</code>
     * @return The nullLiteral.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral getNullLiteral();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.TrueLiteral true_literal = 25;</code>
     * @return Whether the trueLiteral field is set.
     */
    boolean hasTrueLiteral();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.TrueLiteral true_literal = 25;</code>
     * @return The trueLiteral.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral getTrueLiteral();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.FalseLiteral false_literal = 26;</code>
     * @return Whether the falseLiteral field is set.
     */
    boolean hasFalseLiteral();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.FalseLiteral false_literal = 26;</code>
     * @return The falseLiteral.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral getFalseLiteral();

    /**
     * <code>int32 string_literal = 27;</code>
     * @return Whether the stringLiteral field is set.
     */
    boolean hasStringLiteral();
    /**
     * <code>int32 string_literal = 27;</code>
     * @return The stringLiteral.
     */
    int getStringLiteral();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.RegExpLiteral reg_exp_literal = 28;</code>
     * @return Whether the regExpLiteral field is set.
     */
    boolean hasRegExpLiteral();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.RegExpLiteral reg_exp_literal = 28;</code>
     * @return The regExpLiteral.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral getRegExpLiteral();

    /**
     * <code>int32 int_literal = 29;</code>
     * @return Whether the intLiteral field is set.
     */
    boolean hasIntLiteral();
    /**
     * <code>int32 int_literal = 29;</code>
     * @return The intLiteral.
     */
    int getIntLiteral();

    /**
     * <code>double double_literal = 30;</code>
     * @return Whether the doubleLiteral field is set.
     */
    boolean hasDoubleLiteral();
    /**
     * <code>double double_literal = 30;</code>
     * @return The doubleLiteral.
     */
    double getDoubleLiteral();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.ArrayLiteral array_literal = 31;</code>
     * @return Whether the arrayLiteral field is set.
     */
    boolean hasArrayLiteral();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.ArrayLiteral array_literal = 31;</code>
     * @return The arrayLiteral.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral getArrayLiteral();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.ObjectLiteral object_literal = 32;</code>
     * @return Whether the objectLiteral field is set.
     */
    boolean hasObjectLiteral();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.ObjectLiteral object_literal = 32;</code>
     * @return The objectLiteral.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral getObjectLiteral();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Function function = 33;</code>
     * @return Whether the function field is set.
     */
    boolean hasFunction();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Function function = 33;</code>
     * @return The function.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function getFunction();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.DocComment doc_comment = 34;</code>
     * @return Whether the docComment field is set.
     */
    boolean hasDocComment();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.DocComment doc_comment = 34;</code>
     * @return The docComment.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment getDocComment();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.BinaryOperation binary = 35;</code>
     * @return Whether the binary field is set.
     */
    boolean hasBinary();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.BinaryOperation binary = 35;</code>
     * @return The binary.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation getBinary();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.UnaryOperation unary = 36;</code>
     * @return Whether the unary field is set.
     */
    boolean hasUnary();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.UnaryOperation unary = 36;</code>
     * @return The unary.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation getUnary();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Conditional conditional = 37;</code>
     * @return Whether the conditional field is set.
     */
    boolean hasConditional();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Conditional conditional = 37;</code>
     * @return The conditional.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional getConditional();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.ArrayAccess array_access = 38;</code>
     * @return Whether the arrayAccess field is set.
     */
    boolean hasArrayAccess();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.ArrayAccess array_access = 38;</code>
     * @return The arrayAccess.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess getArrayAccess();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.NameReference name_reference = 39;</code>
     * @return Whether the nameReference field is set.
     */
    boolean hasNameReference();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.NameReference name_reference = 39;</code>
     * @return The nameReference.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference getNameReference();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.PropertyReference property_reference = 40;</code>
     * @return Whether the propertyReference field is set.
     */
    boolean hasPropertyReference();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.PropertyReference property_reference = 40;</code>
     * @return The propertyReference.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference getPropertyReference();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Invocation invocation = 41;</code>
     * @return Whether the invocation field is set.
     */
    boolean hasInvocation();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Invocation invocation = 41;</code>
     * @return The invocation.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation getInvocation();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Instantiation instantiation = 42;</code>
     * @return Whether the instantiation field is set.
     */
    boolean hasInstantiation();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Instantiation instantiation = 42;</code>
     * @return The instantiation.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation getInstantiation();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.SuperLiteral super_literal = 43;</code>
     * @return Whether the superLiteral field is set.
     */
    boolean hasSuperLiteral();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.SuperLiteral super_literal = 43;</code>
     * @return The superLiteral.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral getSuperLiteral();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Class class = 44;</code>
     * @return Whether the class field is set.
     */
    boolean hasClass_();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Class class = 44;</code>
     * @return The class.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class getClass_();

    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.ExpressionCase getExpressionCase();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Expression}
   */
  public  static final class Expression extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          Expression, Expression.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.Expression)
      ExpressionOrBuilder {
    private Expression() {
      sideEffects_ = 1;
      beforeComments_ = emptyProtobufList();
      afterComments_ = emptyProtobufList();
    }
    private int bitField0_;
    private int expressionCase_ = 0;
    private java.lang.Object expression_;
    public enum ExpressionCase {
      SIMPLE_NAME_REFERENCE(22),
      THIS_LITERAL(23),
      NULL_LITERAL(24),
      TRUE_LITERAL(25),
      FALSE_LITERAL(26),
      STRING_LITERAL(27),
      REG_EXP_LITERAL(28),
      INT_LITERAL(29),
      DOUBLE_LITERAL(30),
      ARRAY_LITERAL(31),
      OBJECT_LITERAL(32),
      FUNCTION(33),
      DOC_COMMENT(34),
      BINARY(35),
      UNARY(36),
      CONDITIONAL(37),
      ARRAY_ACCESS(38),
      NAME_REFERENCE(39),
      PROPERTY_REFERENCE(40),
      INVOCATION(41),
      INSTANTIATION(42),
      SUPER_LITERAL(43),
      CLASS(44),
      EXPRESSION_NOT_SET(0);
      private final int value;
      private ExpressionCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ExpressionCase valueOf(int value) {
        return forNumber(value);
      }

      public static ExpressionCase forNumber(int value) {
        switch (value) {
          case 22: return SIMPLE_NAME_REFERENCE;
          case 23: return THIS_LITERAL;
          case 24: return NULL_LITERAL;
          case 25: return TRUE_LITERAL;
          case 26: return FALSE_LITERAL;
          case 27: return STRING_LITERAL;
          case 28: return REG_EXP_LITERAL;
          case 29: return INT_LITERAL;
          case 30: return DOUBLE_LITERAL;
          case 31: return ARRAY_LITERAL;
          case 32: return OBJECT_LITERAL;
          case 33: return FUNCTION;
          case 34: return DOC_COMMENT;
          case 35: return BINARY;
          case 36: return UNARY;
          case 37: return CONDITIONAL;
          case 38: return ARRAY_ACCESS;
          case 39: return NAME_REFERENCE;
          case 40: return PROPERTY_REFERENCE;
          case 41: return INVOCATION;
          case 42: return INSTANTIATION;
          case 43: return SUPER_LITERAL;
          case 44: return CLASS;
          case 0: return EXPRESSION_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    @java.lang.Override
    public ExpressionCase
    getExpressionCase() {
      return ExpressionCase.forNumber(
          expressionCase_);
    }

    private void clearExpression() {
      expressionCase_ = 0;
      expression_ = null;
    }

    public static final int FILEID_FIELD_NUMBER = 1;
    private int fileId_;
    /**
     * <code>int32 fileId = 1;</code>
     * @return Whether the fileId field is set.
     */
    @java.lang.Override
    public boolean hasFileId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>int32 fileId = 1;</code>
     * @return The fileId.
     */
    @java.lang.Override
    public int getFileId() {
      return fileId_;
    }
    /**
     * <code>int32 fileId = 1;</code>
     * @param value The fileId to set.
     */
    private void setFileId(int value) {
      bitField0_ |= 0x00000001;
      fileId_ = value;
    }
    /**
     * <code>int32 fileId = 1;</code>
     */
    private void clearFileId() {
      bitField0_ = (bitField0_ & ~0x00000001);
      fileId_ = 0;
    }

    public static final int LOCATION_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location location_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 2;</code>
     */
    @java.lang.Override
    public boolean hasLocation() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 2;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location getLocation() {
      return location_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location.getDefaultInstance() : location_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 2;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setLocation(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location value) {
      value.getClass();  // minimal bytecode null check
      location_ = value;
      bitField0_ |= 0x00000002;
      }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 2;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeLocation(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location value) {
      value.getClass();  // minimal bytecode null check
      if (location_ != null &&
          location_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location.getDefaultInstance()) {
        location_ =
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location.newBuilder(location_).mergeFrom(value).buildPartial();
      } else {
        location_ = value;
      }
      bitField0_ |= 0x00000002;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 2;</code>
     */
    private void clearLocation() {  location_ = null;
      bitField0_ = (bitField0_ & ~0x00000002);
    }

    public static final int SYNTHETIC_FIELD_NUMBER = 3;
    private boolean synthetic_;
    /**
     * <code>bool synthetic = 3 [default = false];</code>
     * @return Whether the synthetic field is set.
     */
    @java.lang.Override
    public boolean hasSynthetic() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>bool synthetic = 3 [default = false];</code>
     * @return The synthetic.
     */
    @java.lang.Override
    public boolean getSynthetic() {
      return synthetic_;
    }
    /**
     * <code>bool synthetic = 3 [default = false];</code>
     * @param value The synthetic to set.
     */
    private void setSynthetic(boolean value) {
      bitField0_ |= 0x00000004;
      synthetic_ = value;
    }
    /**
     * <code>bool synthetic = 3 [default = false];</code>
     */
    private void clearSynthetic() {
      bitField0_ = (bitField0_ & ~0x00000004);
      synthetic_ = false;
    }

    public static final int SIDE_EFFECTS_FIELD_NUMBER = 4;
    private int sideEffects_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.SideEffects side_effects = 4 [default = AFFECTS_STATE];</code>
     * @return Whether the sideEffects field is set.
     */
    @java.lang.Override
    public boolean hasSideEffects() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.SideEffects side_effects = 4 [default = AFFECTS_STATE];</code>
     * @return The sideEffects.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SideEffects getSideEffects() {
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SideEffects result = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SideEffects.forNumber(sideEffects_);
      return result == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SideEffects.AFFECTS_STATE : result;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.SideEffects side_effects = 4 [default = AFFECTS_STATE];</code>
     * @param value The sideEffects to set.
     */
    private void setSideEffects(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SideEffects value) {
      sideEffects_ = value.getNumber();
      bitField0_ |= 0x00000008;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.SideEffects side_effects = 4 [default = AFFECTS_STATE];</code>
     */
    private void clearSideEffects() {
      bitField0_ = (bitField0_ & ~0x00000008);
      sideEffects_ = 1;
    }

    public static final int LOCAL_ALIAS_FIELD_NUMBER = 5;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule localAlias_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.JsImportedModule local_alias = 5;</code>
     */
    @java.lang.Override
    public boolean hasLocalAlias() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.JsImportedModule local_alias = 5;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule getLocalAlias() {
      return localAlias_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule.getDefaultInstance() : localAlias_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.JsImportedModule local_alias = 5;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setLocalAlias(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule value) {
      value.getClass();  // minimal bytecode null check
      localAlias_ = value;
      bitField0_ |= 0x00000010;
      }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.JsImportedModule local_alias = 5;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeLocalAlias(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule value) {
      value.getClass();  // minimal bytecode null check
      if (localAlias_ != null &&
          localAlias_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule.getDefaultInstance()) {
        localAlias_ =
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule.newBuilder(localAlias_).mergeFrom(value).buildPartial();
      } else {
        localAlias_ = value;
      }
      bitField0_ |= 0x00000010;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.JsImportedModule local_alias = 5;</code>
     */
    private void clearLocalAlias() {  localAlias_ = null;
      bitField0_ = (bitField0_ & ~0x00000010);
    }

    public static final int BEFORE_COMMENTS_FIELD_NUMBER = 6;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment> beforeComments_;
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 6;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment> getBeforeCommentsList() {
      return beforeComments_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 6;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CommentOrBuilder> 
        getBeforeCommentsOrBuilderList() {
      return beforeComments_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 6;</code>
     */
    @java.lang.Override
    public int getBeforeCommentsCount() {
      return beforeComments_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 6;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment getBeforeComments(int index) {
      return beforeComments_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 6;</code>
     */
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CommentOrBuilder getBeforeCommentsOrBuilder(
        int index) {
      return beforeComments_.get(index);
    }
    private void ensureBeforeCommentsIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment> tmp = beforeComments_;
      if (!tmp.isModifiable()) {
        beforeComments_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 6;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setBeforeComments(
        int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment value) {
      value.getClass();  // minimal bytecode null check
      ensureBeforeCommentsIsMutable();
      beforeComments_.set(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 6;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addBeforeComments(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment value) {
      value.getClass();  // minimal bytecode null check
      ensureBeforeCommentsIsMutable();
      beforeComments_.add(value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 6;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addBeforeComments(
        int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment value) {
      value.getClass();  // minimal bytecode null check
      ensureBeforeCommentsIsMutable();
      beforeComments_.add(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 6;</code>
     */
    private void addAllBeforeComments(
        java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment> values) {
      ensureBeforeCommentsIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, beforeComments_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 6;</code>
     */
    private void clearBeforeComments() {
      beforeComments_ = emptyProtobufList();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 6;</code>
     */
    private void removeBeforeComments(int index) {
      ensureBeforeCommentsIsMutable();
      beforeComments_.remove(index);
    }

    public static final int AFTER_COMMENTS_FIELD_NUMBER = 7;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment> afterComments_;
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 7;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment> getAfterCommentsList() {
      return afterComments_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 7;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CommentOrBuilder> 
        getAfterCommentsOrBuilderList() {
      return afterComments_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 7;</code>
     */
    @java.lang.Override
    public int getAfterCommentsCount() {
      return afterComments_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 7;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment getAfterComments(int index) {
      return afterComments_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 7;</code>
     */
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CommentOrBuilder getAfterCommentsOrBuilder(
        int index) {
      return afterComments_.get(index);
    }
    private void ensureAfterCommentsIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment> tmp = afterComments_;
      if (!tmp.isModifiable()) {
        afterComments_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 7;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setAfterComments(
        int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment value) {
      value.getClass();  // minimal bytecode null check
      ensureAfterCommentsIsMutable();
      afterComments_.set(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 7;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addAfterComments(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment value) {
      value.getClass();  // minimal bytecode null check
      ensureAfterCommentsIsMutable();
      afterComments_.add(value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 7;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addAfterComments(
        int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment value) {
      value.getClass();  // minimal bytecode null check
      ensureAfterCommentsIsMutable();
      afterComments_.add(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 7;</code>
     */
    private void addAllAfterComments(
        java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment> values) {
      ensureAfterCommentsIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, afterComments_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 7;</code>
     */
    private void clearAfterComments() {
      afterComments_ = emptyProtobufList();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 7;</code>
     */
    private void removeAfterComments(int index) {
      ensureAfterCommentsIsMutable();
      afterComments_.remove(index);
    }

    public static final int SIMPLE_NAME_REFERENCE_FIELD_NUMBER = 22;
    /**
     * <code>int32 simple_name_reference = 22;</code>
     * @return Whether the simpleNameReference field is set.
     */
    @java.lang.Override
    public boolean hasSimpleNameReference() {
      return expressionCase_ == 22;
    }
    /**
     * <code>int32 simple_name_reference = 22;</code>
     * @return The simpleNameReference.
     */
    @java.lang.Override
    public int getSimpleNameReference() {
      if (expressionCase_ == 22) {
        return (java.lang.Integer) expression_;
      }
      return 0;
    }
    /**
     * <code>int32 simple_name_reference = 22;</code>
     * @param value The simpleNameReference to set.
     */
    private void setSimpleNameReference(int value) {
      expressionCase_ = 22;
      expression_ = value;
    }
    /**
     * <code>int32 simple_name_reference = 22;</code>
     */
    private void clearSimpleNameReference() {
      if (expressionCase_ == 22) {
        expressionCase_ = 0;
        expression_ = null;
      }
    }

    public static final int THIS_LITERAL_FIELD_NUMBER = 23;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.ThisLiteral this_literal = 23;</code>
     */
    @java.lang.Override
    public boolean hasThisLiteral() {
      return expressionCase_ == 23;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.ThisLiteral this_literal = 23;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral getThisLiteral() {
      if (expressionCase_ == 23) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral) expression_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.ThisLiteral this_literal = 23;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setThisLiteral(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral value) {
      value.getClass();  // minimal bytecode null check
      expression_ = value;
      expressionCase_ = 23;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.ThisLiteral this_literal = 23;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void mergeThisLiteral(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral value) {
      value.getClass();  // minimal bytecode null check
      if (expressionCase_ == 23 &&
          expression_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral.getDefaultInstance()) {
        expression_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral) expression_)
            .mergeFrom(value).buildPartial();
      } else {
        expression_ = value;
      }
      expressionCase_ = 23;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.ThisLiteral this_literal = 23;</code>
     */
    private void clearThisLiteral() {
      if (expressionCase_ == 23) {
        expressionCase_ = 0;
        expression_ = null;
      }
    }

    public static final int NULL_LITERAL_FIELD_NUMBER = 24;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.NullLiteral null_literal = 24;</code>
     */
    @java.lang.Override
    public boolean hasNullLiteral() {
      return expressionCase_ == 24;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.NullLiteral null_literal = 24;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral getNullLiteral() {
      if (expressionCase_ == 24) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral) expression_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.NullLiteral null_literal = 24;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setNullLiteral(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral value) {
      value.getClass();  // minimal bytecode null check
      expression_ = value;
      expressionCase_ = 24;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.NullLiteral null_literal = 24;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void mergeNullLiteral(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral value) {
      value.getClass();  // minimal bytecode null check
      if (expressionCase_ == 24 &&
          expression_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral.getDefaultInstance()) {
        expression_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral) expression_)
            .mergeFrom(value).buildPartial();
      } else {
        expression_ = value;
      }
      expressionCase_ = 24;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.NullLiteral null_literal = 24;</code>
     */
    private void clearNullLiteral() {
      if (expressionCase_ == 24) {
        expressionCase_ = 0;
        expression_ = null;
      }
    }

    public static final int TRUE_LITERAL_FIELD_NUMBER = 25;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.TrueLiteral true_literal = 25;</code>
     */
    @java.lang.Override
    public boolean hasTrueLiteral() {
      return expressionCase_ == 25;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.TrueLiteral true_literal = 25;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral getTrueLiteral() {
      if (expressionCase_ == 25) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral) expression_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.TrueLiteral true_literal = 25;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setTrueLiteral(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral value) {
      value.getClass();  // minimal bytecode null check
      expression_ = value;
      expressionCase_ = 25;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.TrueLiteral true_literal = 25;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void mergeTrueLiteral(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral value) {
      value.getClass();  // minimal bytecode null check
      if (expressionCase_ == 25 &&
          expression_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral.getDefaultInstance()) {
        expression_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral) expression_)
            .mergeFrom(value).buildPartial();
      } else {
        expression_ = value;
      }
      expressionCase_ = 25;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.TrueLiteral true_literal = 25;</code>
     */
    private void clearTrueLiteral() {
      if (expressionCase_ == 25) {
        expressionCase_ = 0;
        expression_ = null;
      }
    }

    public static final int FALSE_LITERAL_FIELD_NUMBER = 26;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.FalseLiteral false_literal = 26;</code>
     */
    @java.lang.Override
    public boolean hasFalseLiteral() {
      return expressionCase_ == 26;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.FalseLiteral false_literal = 26;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral getFalseLiteral() {
      if (expressionCase_ == 26) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral) expression_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.FalseLiteral false_literal = 26;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setFalseLiteral(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral value) {
      value.getClass();  // minimal bytecode null check
      expression_ = value;
      expressionCase_ = 26;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.FalseLiteral false_literal = 26;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void mergeFalseLiteral(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral value) {
      value.getClass();  // minimal bytecode null check
      if (expressionCase_ == 26 &&
          expression_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral.getDefaultInstance()) {
        expression_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral) expression_)
            .mergeFrom(value).buildPartial();
      } else {
        expression_ = value;
      }
      expressionCase_ = 26;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.FalseLiteral false_literal = 26;</code>
     */
    private void clearFalseLiteral() {
      if (expressionCase_ == 26) {
        expressionCase_ = 0;
        expression_ = null;
      }
    }

    public static final int STRING_LITERAL_FIELD_NUMBER = 27;
    /**
     * <code>int32 string_literal = 27;</code>
     * @return Whether the stringLiteral field is set.
     */
    @java.lang.Override
    public boolean hasStringLiteral() {
      return expressionCase_ == 27;
    }
    /**
     * <code>int32 string_literal = 27;</code>
     * @return The stringLiteral.
     */
    @java.lang.Override
    public int getStringLiteral() {
      if (expressionCase_ == 27) {
        return (java.lang.Integer) expression_;
      }
      return 0;
    }
    /**
     * <code>int32 string_literal = 27;</code>
     * @param value The stringLiteral to set.
     */
    private void setStringLiteral(int value) {
      expressionCase_ = 27;
      expression_ = value;
    }
    /**
     * <code>int32 string_literal = 27;</code>
     */
    private void clearStringLiteral() {
      if (expressionCase_ == 27) {
        expressionCase_ = 0;
        expression_ = null;
      }
    }

    public static final int REG_EXP_LITERAL_FIELD_NUMBER = 28;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.RegExpLiteral reg_exp_literal = 28;</code>
     */
    @java.lang.Override
    public boolean hasRegExpLiteral() {
      return expressionCase_ == 28;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.RegExpLiteral reg_exp_literal = 28;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral getRegExpLiteral() {
      if (expressionCase_ == 28) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral) expression_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.RegExpLiteral reg_exp_literal = 28;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setRegExpLiteral(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral value) {
      value.getClass();  // minimal bytecode null check
      expression_ = value;
      expressionCase_ = 28;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.RegExpLiteral reg_exp_literal = 28;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void mergeRegExpLiteral(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral value) {
      value.getClass();  // minimal bytecode null check
      if (expressionCase_ == 28 &&
          expression_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral.getDefaultInstance()) {
        expression_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral) expression_)
            .mergeFrom(value).buildPartial();
      } else {
        expression_ = value;
      }
      expressionCase_ = 28;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.RegExpLiteral reg_exp_literal = 28;</code>
     */
    private void clearRegExpLiteral() {
      if (expressionCase_ == 28) {
        expressionCase_ = 0;
        expression_ = null;
      }
    }

    public static final int INT_LITERAL_FIELD_NUMBER = 29;
    /**
     * <code>int32 int_literal = 29;</code>
     * @return Whether the intLiteral field is set.
     */
    @java.lang.Override
    public boolean hasIntLiteral() {
      return expressionCase_ == 29;
    }
    /**
     * <code>int32 int_literal = 29;</code>
     * @return The intLiteral.
     */
    @java.lang.Override
    public int getIntLiteral() {
      if (expressionCase_ == 29) {
        return (java.lang.Integer) expression_;
      }
      return 0;
    }
    /**
     * <code>int32 int_literal = 29;</code>
     * @param value The intLiteral to set.
     */
    private void setIntLiteral(int value) {
      expressionCase_ = 29;
      expression_ = value;
    }
    /**
     * <code>int32 int_literal = 29;</code>
     */
    private void clearIntLiteral() {
      if (expressionCase_ == 29) {
        expressionCase_ = 0;
        expression_ = null;
      }
    }

    public static final int DOUBLE_LITERAL_FIELD_NUMBER = 30;
    /**
     * <code>double double_literal = 30;</code>
     * @return Whether the doubleLiteral field is set.
     */
    @java.lang.Override
    public boolean hasDoubleLiteral() {
      return expressionCase_ == 30;
    }
    /**
     * <code>double double_literal = 30;</code>
     * @return The doubleLiteral.
     */
    @java.lang.Override
    public double getDoubleLiteral() {
      if (expressionCase_ == 30) {
        return (java.lang.Double) expression_;
      }
      return 0D;
    }
    /**
     * <code>double double_literal = 30;</code>
     * @param value The doubleLiteral to set.
     */
    private void setDoubleLiteral(double value) {
      expressionCase_ = 30;
      expression_ = value;
    }
    /**
     * <code>double double_literal = 30;</code>
     */
    private void clearDoubleLiteral() {
      if (expressionCase_ == 30) {
        expressionCase_ = 0;
        expression_ = null;
      }
    }

    public static final int ARRAY_LITERAL_FIELD_NUMBER = 31;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.ArrayLiteral array_literal = 31;</code>
     */
    @java.lang.Override
    public boolean hasArrayLiteral() {
      return expressionCase_ == 31;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.ArrayLiteral array_literal = 31;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral getArrayLiteral() {
      if (expressionCase_ == 31) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral) expression_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.ArrayLiteral array_literal = 31;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setArrayLiteral(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral value) {
      value.getClass();  // minimal bytecode null check
      expression_ = value;
      expressionCase_ = 31;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.ArrayLiteral array_literal = 31;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void mergeArrayLiteral(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral value) {
      value.getClass();  // minimal bytecode null check
      if (expressionCase_ == 31 &&
          expression_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral.getDefaultInstance()) {
        expression_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral) expression_)
            .mergeFrom(value).buildPartial();
      } else {
        expression_ = value;
      }
      expressionCase_ = 31;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.ArrayLiteral array_literal = 31;</code>
     */
    private void clearArrayLiteral() {
      if (expressionCase_ == 31) {
        expressionCase_ = 0;
        expression_ = null;
      }
    }

    public static final int OBJECT_LITERAL_FIELD_NUMBER = 32;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.ObjectLiteral object_literal = 32;</code>
     */
    @java.lang.Override
    public boolean hasObjectLiteral() {
      return expressionCase_ == 32;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.ObjectLiteral object_literal = 32;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral getObjectLiteral() {
      if (expressionCase_ == 32) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral) expression_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.ObjectLiteral object_literal = 32;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setObjectLiteral(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral value) {
      value.getClass();  // minimal bytecode null check
      expression_ = value;
      expressionCase_ = 32;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.ObjectLiteral object_literal = 32;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void mergeObjectLiteral(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral value) {
      value.getClass();  // minimal bytecode null check
      if (expressionCase_ == 32 &&
          expression_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral.getDefaultInstance()) {
        expression_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral) expression_)
            .mergeFrom(value).buildPartial();
      } else {
        expression_ = value;
      }
      expressionCase_ = 32;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.ObjectLiteral object_literal = 32;</code>
     */
    private void clearObjectLiteral() {
      if (expressionCase_ == 32) {
        expressionCase_ = 0;
        expression_ = null;
      }
    }

    public static final int FUNCTION_FIELD_NUMBER = 33;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Function function = 33;</code>
     */
    @java.lang.Override
    public boolean hasFunction() {
      return expressionCase_ == 33;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Function function = 33;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function getFunction() {
      if (expressionCase_ == 33) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function) expression_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Function function = 33;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setFunction(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function value) {
      value.getClass();  // minimal bytecode null check
      expression_ = value;
      expressionCase_ = 33;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Function function = 33;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void mergeFunction(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function value) {
      value.getClass();  // minimal bytecode null check
      if (expressionCase_ == 33 &&
          expression_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.getDefaultInstance()) {
        expression_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function) expression_)
            .mergeFrom(value).buildPartial();
      } else {
        expression_ = value;
      }
      expressionCase_ = 33;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Function function = 33;</code>
     */
    private void clearFunction() {
      if (expressionCase_ == 33) {
        expressionCase_ = 0;
        expression_ = null;
      }
    }

    public static final int DOC_COMMENT_FIELD_NUMBER = 34;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.DocComment doc_comment = 34;</code>
     */
    @java.lang.Override
    public boolean hasDocComment() {
      return expressionCase_ == 34;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.DocComment doc_comment = 34;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment getDocComment() {
      if (expressionCase_ == 34) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment) expression_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.DocComment doc_comment = 34;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setDocComment(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment value) {
      value.getClass();  // minimal bytecode null check
      expression_ = value;
      expressionCase_ = 34;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.DocComment doc_comment = 34;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void mergeDocComment(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment value) {
      value.getClass();  // minimal bytecode null check
      if (expressionCase_ == 34 &&
          expression_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment.getDefaultInstance()) {
        expression_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment) expression_)
            .mergeFrom(value).buildPartial();
      } else {
        expression_ = value;
      }
      expressionCase_ = 34;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.DocComment doc_comment = 34;</code>
     */
    private void clearDocComment() {
      if (expressionCase_ == 34) {
        expressionCase_ = 0;
        expression_ = null;
      }
    }

    public static final int BINARY_FIELD_NUMBER = 35;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.BinaryOperation binary = 35;</code>
     */
    @java.lang.Override
    public boolean hasBinary() {
      return expressionCase_ == 35;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.BinaryOperation binary = 35;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation getBinary() {
      if (expressionCase_ == 35) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation) expression_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.BinaryOperation binary = 35;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setBinary(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation value) {
      value.getClass();  // minimal bytecode null check
      expression_ = value;
      expressionCase_ = 35;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.BinaryOperation binary = 35;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void mergeBinary(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation value) {
      value.getClass();  // minimal bytecode null check
      if (expressionCase_ == 35 &&
          expression_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation.getDefaultInstance()) {
        expression_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation) expression_)
            .mergeFrom(value).buildPartial();
      } else {
        expression_ = value;
      }
      expressionCase_ = 35;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.BinaryOperation binary = 35;</code>
     */
    private void clearBinary() {
      if (expressionCase_ == 35) {
        expressionCase_ = 0;
        expression_ = null;
      }
    }

    public static final int UNARY_FIELD_NUMBER = 36;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.UnaryOperation unary = 36;</code>
     */
    @java.lang.Override
    public boolean hasUnary() {
      return expressionCase_ == 36;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.UnaryOperation unary = 36;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation getUnary() {
      if (expressionCase_ == 36) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation) expression_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.UnaryOperation unary = 36;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setUnary(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation value) {
      value.getClass();  // minimal bytecode null check
      expression_ = value;
      expressionCase_ = 36;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.UnaryOperation unary = 36;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void mergeUnary(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation value) {
      value.getClass();  // minimal bytecode null check
      if (expressionCase_ == 36 &&
          expression_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation.getDefaultInstance()) {
        expression_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation) expression_)
            .mergeFrom(value).buildPartial();
      } else {
        expression_ = value;
      }
      expressionCase_ = 36;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.UnaryOperation unary = 36;</code>
     */
    private void clearUnary() {
      if (expressionCase_ == 36) {
        expressionCase_ = 0;
        expression_ = null;
      }
    }

    public static final int CONDITIONAL_FIELD_NUMBER = 37;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Conditional conditional = 37;</code>
     */
    @java.lang.Override
    public boolean hasConditional() {
      return expressionCase_ == 37;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Conditional conditional = 37;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional getConditional() {
      if (expressionCase_ == 37) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional) expression_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Conditional conditional = 37;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setConditional(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional value) {
      value.getClass();  // minimal bytecode null check
      expression_ = value;
      expressionCase_ = 37;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Conditional conditional = 37;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void mergeConditional(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional value) {
      value.getClass();  // minimal bytecode null check
      if (expressionCase_ == 37 &&
          expression_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional.getDefaultInstance()) {
        expression_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional) expression_)
            .mergeFrom(value).buildPartial();
      } else {
        expression_ = value;
      }
      expressionCase_ = 37;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Conditional conditional = 37;</code>
     */
    private void clearConditional() {
      if (expressionCase_ == 37) {
        expressionCase_ = 0;
        expression_ = null;
      }
    }

    public static final int ARRAY_ACCESS_FIELD_NUMBER = 38;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.ArrayAccess array_access = 38;</code>
     */
    @java.lang.Override
    public boolean hasArrayAccess() {
      return expressionCase_ == 38;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.ArrayAccess array_access = 38;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess getArrayAccess() {
      if (expressionCase_ == 38) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess) expression_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.ArrayAccess array_access = 38;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setArrayAccess(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess value) {
      value.getClass();  // minimal bytecode null check
      expression_ = value;
      expressionCase_ = 38;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.ArrayAccess array_access = 38;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void mergeArrayAccess(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess value) {
      value.getClass();  // minimal bytecode null check
      if (expressionCase_ == 38 &&
          expression_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess.getDefaultInstance()) {
        expression_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess) expression_)
            .mergeFrom(value).buildPartial();
      } else {
        expression_ = value;
      }
      expressionCase_ = 38;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.ArrayAccess array_access = 38;</code>
     */
    private void clearArrayAccess() {
      if (expressionCase_ == 38) {
        expressionCase_ = 0;
        expression_ = null;
      }
    }

    public static final int NAME_REFERENCE_FIELD_NUMBER = 39;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.NameReference name_reference = 39;</code>
     */
    @java.lang.Override
    public boolean hasNameReference() {
      return expressionCase_ == 39;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.NameReference name_reference = 39;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference getNameReference() {
      if (expressionCase_ == 39) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference) expression_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.NameReference name_reference = 39;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setNameReference(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference value) {
      value.getClass();  // minimal bytecode null check
      expression_ = value;
      expressionCase_ = 39;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.NameReference name_reference = 39;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void mergeNameReference(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference value) {
      value.getClass();  // minimal bytecode null check
      if (expressionCase_ == 39 &&
          expression_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference.getDefaultInstance()) {
        expression_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference) expression_)
            .mergeFrom(value).buildPartial();
      } else {
        expression_ = value;
      }
      expressionCase_ = 39;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.NameReference name_reference = 39;</code>
     */
    private void clearNameReference() {
      if (expressionCase_ == 39) {
        expressionCase_ = 0;
        expression_ = null;
      }
    }

    public static final int PROPERTY_REFERENCE_FIELD_NUMBER = 40;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.PropertyReference property_reference = 40;</code>
     */
    @java.lang.Override
    public boolean hasPropertyReference() {
      return expressionCase_ == 40;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.PropertyReference property_reference = 40;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference getPropertyReference() {
      if (expressionCase_ == 40) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference) expression_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.PropertyReference property_reference = 40;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setPropertyReference(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference value) {
      value.getClass();  // minimal bytecode null check
      expression_ = value;
      expressionCase_ = 40;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.PropertyReference property_reference = 40;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void mergePropertyReference(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference value) {
      value.getClass();  // minimal bytecode null check
      if (expressionCase_ == 40 &&
          expression_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference.getDefaultInstance()) {
        expression_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference) expression_)
            .mergeFrom(value).buildPartial();
      } else {
        expression_ = value;
      }
      expressionCase_ = 40;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.PropertyReference property_reference = 40;</code>
     */
    private void clearPropertyReference() {
      if (expressionCase_ == 40) {
        expressionCase_ = 0;
        expression_ = null;
      }
    }

    public static final int INVOCATION_FIELD_NUMBER = 41;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Invocation invocation = 41;</code>
     */
    @java.lang.Override
    public boolean hasInvocation() {
      return expressionCase_ == 41;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Invocation invocation = 41;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation getInvocation() {
      if (expressionCase_ == 41) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation) expression_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Invocation invocation = 41;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setInvocation(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation value) {
      value.getClass();  // minimal bytecode null check
      expression_ = value;
      expressionCase_ = 41;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Invocation invocation = 41;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void mergeInvocation(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation value) {
      value.getClass();  // minimal bytecode null check
      if (expressionCase_ == 41 &&
          expression_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation.getDefaultInstance()) {
        expression_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation) expression_)
            .mergeFrom(value).buildPartial();
      } else {
        expression_ = value;
      }
      expressionCase_ = 41;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Invocation invocation = 41;</code>
     */
    private void clearInvocation() {
      if (expressionCase_ == 41) {
        expressionCase_ = 0;
        expression_ = null;
      }
    }

    public static final int INSTANTIATION_FIELD_NUMBER = 42;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Instantiation instantiation = 42;</code>
     */
    @java.lang.Override
    public boolean hasInstantiation() {
      return expressionCase_ == 42;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Instantiation instantiation = 42;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation getInstantiation() {
      if (expressionCase_ == 42) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation) expression_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Instantiation instantiation = 42;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setInstantiation(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation value) {
      value.getClass();  // minimal bytecode null check
      expression_ = value;
      expressionCase_ = 42;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Instantiation instantiation = 42;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void mergeInstantiation(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation value) {
      value.getClass();  // minimal bytecode null check
      if (expressionCase_ == 42 &&
          expression_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation.getDefaultInstance()) {
        expression_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation) expression_)
            .mergeFrom(value).buildPartial();
      } else {
        expression_ = value;
      }
      expressionCase_ = 42;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Instantiation instantiation = 42;</code>
     */
    private void clearInstantiation() {
      if (expressionCase_ == 42) {
        expressionCase_ = 0;
        expression_ = null;
      }
    }

    public static final int SUPER_LITERAL_FIELD_NUMBER = 43;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.SuperLiteral super_literal = 43;</code>
     */
    @java.lang.Override
    public boolean hasSuperLiteral() {
      return expressionCase_ == 43;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.SuperLiteral super_literal = 43;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral getSuperLiteral() {
      if (expressionCase_ == 43) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral) expression_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.SuperLiteral super_literal = 43;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setSuperLiteral(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral value) {
      value.getClass();  // minimal bytecode null check
      expression_ = value;
      expressionCase_ = 43;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.SuperLiteral super_literal = 43;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void mergeSuperLiteral(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral value) {
      value.getClass();  // minimal bytecode null check
      if (expressionCase_ == 43 &&
          expression_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral.getDefaultInstance()) {
        expression_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral) expression_)
            .mergeFrom(value).buildPartial();
      } else {
        expression_ = value;
      }
      expressionCase_ = 43;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.SuperLiteral super_literal = 43;</code>
     */
    private void clearSuperLiteral() {
      if (expressionCase_ == 43) {
        expressionCase_ = 0;
        expression_ = null;
      }
    }

    public static final int CLASS_FIELD_NUMBER = 44;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Class class = 44;</code>
     */
    @java.lang.Override
    public boolean hasClass_() {
      return expressionCase_ == 44;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Class class = 44;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class getClass_() {
      if (expressionCase_ == 44) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class) expression_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Class class = 44;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setClass_(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class value) {
      value.getClass();  // minimal bytecode null check
      expression_ = value;
      expressionCase_ = 44;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Class class = 44;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void mergeClass_(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class value) {
      value.getClass();  // minimal bytecode null check
      if (expressionCase_ == 44 &&
          expression_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class.getDefaultInstance()) {
        expression_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class) expression_)
            .mergeFrom(value).buildPartial();
      } else {
        expression_ = value;
      }
      expressionCase_ = 44;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Class class = 44;</code>
     */
    private void clearClass_() {
      if (expressionCase_ == 44) {
        expressionCase_ = 0;
        expression_ = null;
      }
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Expression}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.Expression)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder {
      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }

      @java.lang.Override
      public ExpressionCase
          getExpressionCase() {
        return instance.getExpressionCase();
      }

      public Builder clearExpression() {
        copyOnWrite();
        instance.clearExpression();
        return this;
      }


      /**
       * <code>int32 fileId = 1;</code>
       * @return Whether the fileId field is set.
       */
      @java.lang.Override
      public boolean hasFileId() {
        return instance.hasFileId();
      }
      /**
       * <code>int32 fileId = 1;</code>
       * @return The fileId.
       */
      @java.lang.Override
      public int getFileId() {
        return instance.getFileId();
      }
      /**
       * <code>int32 fileId = 1;</code>
       * @param value The fileId to set.
       * @return This builder for chaining.
       */
      public Builder setFileId(int value) {
        copyOnWrite();
        instance.setFileId(value);
        return this;
      }
      /**
       * <code>int32 fileId = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearFileId() {
        copyOnWrite();
        instance.clearFileId();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 2;</code>
       */
      @java.lang.Override
      public boolean hasLocation() {
        return instance.hasLocation();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 2;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location getLocation() {
        return instance.getLocation();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 2;</code>
       */
      public Builder setLocation(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location value) {
        copyOnWrite();
        instance.setLocation(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 2;</code>
       */
      public Builder setLocation(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location.Builder builderForValue) {
        copyOnWrite();
        instance.setLocation(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 2;</code>
       */
      public Builder mergeLocation(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location value) {
        copyOnWrite();
        instance.mergeLocation(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 2;</code>
       */
      public Builder clearLocation() {  copyOnWrite();
        instance.clearLocation();
        return this;
      }

      /**
       * <code>bool synthetic = 3 [default = false];</code>
       * @return Whether the synthetic field is set.
       */
      @java.lang.Override
      public boolean hasSynthetic() {
        return instance.hasSynthetic();
      }
      /**
       * <code>bool synthetic = 3 [default = false];</code>
       * @return The synthetic.
       */
      @java.lang.Override
      public boolean getSynthetic() {
        return instance.getSynthetic();
      }
      /**
       * <code>bool synthetic = 3 [default = false];</code>
       * @param value The synthetic to set.
       * @return This builder for chaining.
       */
      public Builder setSynthetic(boolean value) {
        copyOnWrite();
        instance.setSynthetic(value);
        return this;
      }
      /**
       * <code>bool synthetic = 3 [default = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearSynthetic() {
        copyOnWrite();
        instance.clearSynthetic();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.SideEffects side_effects = 4 [default = AFFECTS_STATE];</code>
       * @return Whether the sideEffects field is set.
       */
      @java.lang.Override
      public boolean hasSideEffects() {
        return instance.hasSideEffects();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.SideEffects side_effects = 4 [default = AFFECTS_STATE];</code>
       * @return The sideEffects.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SideEffects getSideEffects() {
        return instance.getSideEffects();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.SideEffects side_effects = 4 [default = AFFECTS_STATE];</code>
       * @param value The enum numeric value on the wire for sideEffects to set.
       * @return This builder for chaining.
       */
      public Builder setSideEffects(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SideEffects value) {
        copyOnWrite();
        instance.setSideEffects(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.SideEffects side_effects = 4 [default = AFFECTS_STATE];</code>
       * @return This builder for chaining.
       */
      public Builder clearSideEffects() {
        copyOnWrite();
        instance.clearSideEffects();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.JsImportedModule local_alias = 5;</code>
       */
      @java.lang.Override
      public boolean hasLocalAlias() {
        return instance.hasLocalAlias();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.JsImportedModule local_alias = 5;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule getLocalAlias() {
        return instance.getLocalAlias();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.JsImportedModule local_alias = 5;</code>
       */
      public Builder setLocalAlias(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule value) {
        copyOnWrite();
        instance.setLocalAlias(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.JsImportedModule local_alias = 5;</code>
       */
      public Builder setLocalAlias(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule.Builder builderForValue) {
        copyOnWrite();
        instance.setLocalAlias(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.JsImportedModule local_alias = 5;</code>
       */
      public Builder mergeLocalAlias(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule value) {
        copyOnWrite();
        instance.mergeLocalAlias(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.JsImportedModule local_alias = 5;</code>
       */
      public Builder clearLocalAlias() {  copyOnWrite();
        instance.clearLocalAlias();
        return this;
      }

      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 6;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment> getBeforeCommentsList() {
        return java.util.Collections.unmodifiableList(
            instance.getBeforeCommentsList());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 6;</code>
       */
      @java.lang.Override
      public int getBeforeCommentsCount() {
        return instance.getBeforeCommentsCount();
      }/**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 6;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment getBeforeComments(int index) {
        return instance.getBeforeComments(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 6;</code>
       */
      public Builder setBeforeComments(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment value) {
        copyOnWrite();
        instance.setBeforeComments(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 6;</code>
       */
      public Builder setBeforeComments(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment.Builder builderForValue) {
        copyOnWrite();
        instance.setBeforeComments(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 6;</code>
       */
      public Builder addBeforeComments(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment value) {
        copyOnWrite();
        instance.addBeforeComments(value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 6;</code>
       */
      public Builder addBeforeComments(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment value) {
        copyOnWrite();
        instance.addBeforeComments(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 6;</code>
       */
      public Builder addBeforeComments(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment.Builder builderForValue) {
        copyOnWrite();
        instance.addBeforeComments(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 6;</code>
       */
      public Builder addBeforeComments(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment.Builder builderForValue) {
        copyOnWrite();
        instance.addBeforeComments(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 6;</code>
       */
      public Builder addAllBeforeComments(
          java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment> values) {
        copyOnWrite();
        instance.addAllBeforeComments(values);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 6;</code>
       */
      public Builder clearBeforeComments() {
        copyOnWrite();
        instance.clearBeforeComments();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 6;</code>
       */
      public Builder removeBeforeComments(int index) {
        copyOnWrite();
        instance.removeBeforeComments(index);
        return this;
      }

      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 7;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment> getAfterCommentsList() {
        return java.util.Collections.unmodifiableList(
            instance.getAfterCommentsList());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 7;</code>
       */
      @java.lang.Override
      public int getAfterCommentsCount() {
        return instance.getAfterCommentsCount();
      }/**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 7;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment getAfterComments(int index) {
        return instance.getAfterComments(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 7;</code>
       */
      public Builder setAfterComments(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment value) {
        copyOnWrite();
        instance.setAfterComments(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 7;</code>
       */
      public Builder setAfterComments(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment.Builder builderForValue) {
        copyOnWrite();
        instance.setAfterComments(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 7;</code>
       */
      public Builder addAfterComments(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment value) {
        copyOnWrite();
        instance.addAfterComments(value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 7;</code>
       */
      public Builder addAfterComments(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment value) {
        copyOnWrite();
        instance.addAfterComments(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 7;</code>
       */
      public Builder addAfterComments(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment.Builder builderForValue) {
        copyOnWrite();
        instance.addAfterComments(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 7;</code>
       */
      public Builder addAfterComments(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment.Builder builderForValue) {
        copyOnWrite();
        instance.addAfterComments(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 7;</code>
       */
      public Builder addAllAfterComments(
          java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment> values) {
        copyOnWrite();
        instance.addAllAfterComments(values);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 7;</code>
       */
      public Builder clearAfterComments() {
        copyOnWrite();
        instance.clearAfterComments();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 7;</code>
       */
      public Builder removeAfterComments(int index) {
        copyOnWrite();
        instance.removeAfterComments(index);
        return this;
      }

      /**
       * <code>int32 simple_name_reference = 22;</code>
       * @return Whether the simpleNameReference field is set.
       */
      @java.lang.Override
      public boolean hasSimpleNameReference() {
        return instance.hasSimpleNameReference();
      }
      /**
       * <code>int32 simple_name_reference = 22;</code>
       * @return The simpleNameReference.
       */
      @java.lang.Override
      public int getSimpleNameReference() {
        return instance.getSimpleNameReference();
      }
      /**
       * <code>int32 simple_name_reference = 22;</code>
       * @param value The simpleNameReference to set.
       * @return This builder for chaining.
       */
      public Builder setSimpleNameReference(int value) {
        copyOnWrite();
        instance.setSimpleNameReference(value);
        return this;
      }
      /**
       * <code>int32 simple_name_reference = 22;</code>
       * @return This builder for chaining.
       */
      public Builder clearSimpleNameReference() {
        copyOnWrite();
        instance.clearSimpleNameReference();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ThisLiteral this_literal = 23;</code>
       */
      @java.lang.Override
      public boolean hasThisLiteral() {
        return instance.hasThisLiteral();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ThisLiteral this_literal = 23;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral getThisLiteral() {
        return instance.getThisLiteral();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ThisLiteral this_literal = 23;</code>
       */
      public Builder setThisLiteral(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral value) {
        copyOnWrite();
        instance.setThisLiteral(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ThisLiteral this_literal = 23;</code>
       */
      public Builder setThisLiteral(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral.Builder builderForValue) {
        copyOnWrite();
        instance.setThisLiteral(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ThisLiteral this_literal = 23;</code>
       */
      public Builder mergeThisLiteral(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral value) {
        copyOnWrite();
        instance.mergeThisLiteral(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ThisLiteral this_literal = 23;</code>
       */
      public Builder clearThisLiteral() {
        copyOnWrite();
        instance.clearThisLiteral();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.NullLiteral null_literal = 24;</code>
       */
      @java.lang.Override
      public boolean hasNullLiteral() {
        return instance.hasNullLiteral();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.NullLiteral null_literal = 24;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral getNullLiteral() {
        return instance.getNullLiteral();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.NullLiteral null_literal = 24;</code>
       */
      public Builder setNullLiteral(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral value) {
        copyOnWrite();
        instance.setNullLiteral(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.NullLiteral null_literal = 24;</code>
       */
      public Builder setNullLiteral(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral.Builder builderForValue) {
        copyOnWrite();
        instance.setNullLiteral(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.NullLiteral null_literal = 24;</code>
       */
      public Builder mergeNullLiteral(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral value) {
        copyOnWrite();
        instance.mergeNullLiteral(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.NullLiteral null_literal = 24;</code>
       */
      public Builder clearNullLiteral() {
        copyOnWrite();
        instance.clearNullLiteral();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.TrueLiteral true_literal = 25;</code>
       */
      @java.lang.Override
      public boolean hasTrueLiteral() {
        return instance.hasTrueLiteral();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.TrueLiteral true_literal = 25;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral getTrueLiteral() {
        return instance.getTrueLiteral();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.TrueLiteral true_literal = 25;</code>
       */
      public Builder setTrueLiteral(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral value) {
        copyOnWrite();
        instance.setTrueLiteral(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.TrueLiteral true_literal = 25;</code>
       */
      public Builder setTrueLiteral(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral.Builder builderForValue) {
        copyOnWrite();
        instance.setTrueLiteral(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.TrueLiteral true_literal = 25;</code>
       */
      public Builder mergeTrueLiteral(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral value) {
        copyOnWrite();
        instance.mergeTrueLiteral(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.TrueLiteral true_literal = 25;</code>
       */
      public Builder clearTrueLiteral() {
        copyOnWrite();
        instance.clearTrueLiteral();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.FalseLiteral false_literal = 26;</code>
       */
      @java.lang.Override
      public boolean hasFalseLiteral() {
        return instance.hasFalseLiteral();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.FalseLiteral false_literal = 26;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral getFalseLiteral() {
        return instance.getFalseLiteral();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.FalseLiteral false_literal = 26;</code>
       */
      public Builder setFalseLiteral(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral value) {
        copyOnWrite();
        instance.setFalseLiteral(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.FalseLiteral false_literal = 26;</code>
       */
      public Builder setFalseLiteral(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral.Builder builderForValue) {
        copyOnWrite();
        instance.setFalseLiteral(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.FalseLiteral false_literal = 26;</code>
       */
      public Builder mergeFalseLiteral(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral value) {
        copyOnWrite();
        instance.mergeFalseLiteral(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.FalseLiteral false_literal = 26;</code>
       */
      public Builder clearFalseLiteral() {
        copyOnWrite();
        instance.clearFalseLiteral();
        return this;
      }

      /**
       * <code>int32 string_literal = 27;</code>
       * @return Whether the stringLiteral field is set.
       */
      @java.lang.Override
      public boolean hasStringLiteral() {
        return instance.hasStringLiteral();
      }
      /**
       * <code>int32 string_literal = 27;</code>
       * @return The stringLiteral.
       */
      @java.lang.Override
      public int getStringLiteral() {
        return instance.getStringLiteral();
      }
      /**
       * <code>int32 string_literal = 27;</code>
       * @param value The stringLiteral to set.
       * @return This builder for chaining.
       */
      public Builder setStringLiteral(int value) {
        copyOnWrite();
        instance.setStringLiteral(value);
        return this;
      }
      /**
       * <code>int32 string_literal = 27;</code>
       * @return This builder for chaining.
       */
      public Builder clearStringLiteral() {
        copyOnWrite();
        instance.clearStringLiteral();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.RegExpLiteral reg_exp_literal = 28;</code>
       */
      @java.lang.Override
      public boolean hasRegExpLiteral() {
        return instance.hasRegExpLiteral();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.RegExpLiteral reg_exp_literal = 28;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral getRegExpLiteral() {
        return instance.getRegExpLiteral();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.RegExpLiteral reg_exp_literal = 28;</code>
       */
      public Builder setRegExpLiteral(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral value) {
        copyOnWrite();
        instance.setRegExpLiteral(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.RegExpLiteral reg_exp_literal = 28;</code>
       */
      public Builder setRegExpLiteral(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral.Builder builderForValue) {
        copyOnWrite();
        instance.setRegExpLiteral(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.RegExpLiteral reg_exp_literal = 28;</code>
       */
      public Builder mergeRegExpLiteral(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral value) {
        copyOnWrite();
        instance.mergeRegExpLiteral(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.RegExpLiteral reg_exp_literal = 28;</code>
       */
      public Builder clearRegExpLiteral() {
        copyOnWrite();
        instance.clearRegExpLiteral();
        return this;
      }

      /**
       * <code>int32 int_literal = 29;</code>
       * @return Whether the intLiteral field is set.
       */
      @java.lang.Override
      public boolean hasIntLiteral() {
        return instance.hasIntLiteral();
      }
      /**
       * <code>int32 int_literal = 29;</code>
       * @return The intLiteral.
       */
      @java.lang.Override
      public int getIntLiteral() {
        return instance.getIntLiteral();
      }
      /**
       * <code>int32 int_literal = 29;</code>
       * @param value The intLiteral to set.
       * @return This builder for chaining.
       */
      public Builder setIntLiteral(int value) {
        copyOnWrite();
        instance.setIntLiteral(value);
        return this;
      }
      /**
       * <code>int32 int_literal = 29;</code>
       * @return This builder for chaining.
       */
      public Builder clearIntLiteral() {
        copyOnWrite();
        instance.clearIntLiteral();
        return this;
      }

      /**
       * <code>double double_literal = 30;</code>
       * @return Whether the doubleLiteral field is set.
       */
      @java.lang.Override
      public boolean hasDoubleLiteral() {
        return instance.hasDoubleLiteral();
      }
      /**
       * <code>double double_literal = 30;</code>
       * @return The doubleLiteral.
       */
      @java.lang.Override
      public double getDoubleLiteral() {
        return instance.getDoubleLiteral();
      }
      /**
       * <code>double double_literal = 30;</code>
       * @param value The doubleLiteral to set.
       * @return This builder for chaining.
       */
      public Builder setDoubleLiteral(double value) {
        copyOnWrite();
        instance.setDoubleLiteral(value);
        return this;
      }
      /**
       * <code>double double_literal = 30;</code>
       * @return This builder for chaining.
       */
      public Builder clearDoubleLiteral() {
        copyOnWrite();
        instance.clearDoubleLiteral();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ArrayLiteral array_literal = 31;</code>
       */
      @java.lang.Override
      public boolean hasArrayLiteral() {
        return instance.hasArrayLiteral();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ArrayLiteral array_literal = 31;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral getArrayLiteral() {
        return instance.getArrayLiteral();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ArrayLiteral array_literal = 31;</code>
       */
      public Builder setArrayLiteral(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral value) {
        copyOnWrite();
        instance.setArrayLiteral(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ArrayLiteral array_literal = 31;</code>
       */
      public Builder setArrayLiteral(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral.Builder builderForValue) {
        copyOnWrite();
        instance.setArrayLiteral(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ArrayLiteral array_literal = 31;</code>
       */
      public Builder mergeArrayLiteral(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral value) {
        copyOnWrite();
        instance.mergeArrayLiteral(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ArrayLiteral array_literal = 31;</code>
       */
      public Builder clearArrayLiteral() {
        copyOnWrite();
        instance.clearArrayLiteral();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ObjectLiteral object_literal = 32;</code>
       */
      @java.lang.Override
      public boolean hasObjectLiteral() {
        return instance.hasObjectLiteral();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ObjectLiteral object_literal = 32;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral getObjectLiteral() {
        return instance.getObjectLiteral();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ObjectLiteral object_literal = 32;</code>
       */
      public Builder setObjectLiteral(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral value) {
        copyOnWrite();
        instance.setObjectLiteral(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ObjectLiteral object_literal = 32;</code>
       */
      public Builder setObjectLiteral(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral.Builder builderForValue) {
        copyOnWrite();
        instance.setObjectLiteral(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ObjectLiteral object_literal = 32;</code>
       */
      public Builder mergeObjectLiteral(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral value) {
        copyOnWrite();
        instance.mergeObjectLiteral(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ObjectLiteral object_literal = 32;</code>
       */
      public Builder clearObjectLiteral() {
        copyOnWrite();
        instance.clearObjectLiteral();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Function function = 33;</code>
       */
      @java.lang.Override
      public boolean hasFunction() {
        return instance.hasFunction();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Function function = 33;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function getFunction() {
        return instance.getFunction();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Function function = 33;</code>
       */
      public Builder setFunction(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function value) {
        copyOnWrite();
        instance.setFunction(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Function function = 33;</code>
       */
      public Builder setFunction(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.Builder builderForValue) {
        copyOnWrite();
        instance.setFunction(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Function function = 33;</code>
       */
      public Builder mergeFunction(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function value) {
        copyOnWrite();
        instance.mergeFunction(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Function function = 33;</code>
       */
      public Builder clearFunction() {
        copyOnWrite();
        instance.clearFunction();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.DocComment doc_comment = 34;</code>
       */
      @java.lang.Override
      public boolean hasDocComment() {
        return instance.hasDocComment();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.DocComment doc_comment = 34;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment getDocComment() {
        return instance.getDocComment();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.DocComment doc_comment = 34;</code>
       */
      public Builder setDocComment(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment value) {
        copyOnWrite();
        instance.setDocComment(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.DocComment doc_comment = 34;</code>
       */
      public Builder setDocComment(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment.Builder builderForValue) {
        copyOnWrite();
        instance.setDocComment(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.DocComment doc_comment = 34;</code>
       */
      public Builder mergeDocComment(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment value) {
        copyOnWrite();
        instance.mergeDocComment(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.DocComment doc_comment = 34;</code>
       */
      public Builder clearDocComment() {
        copyOnWrite();
        instance.clearDocComment();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.BinaryOperation binary = 35;</code>
       */
      @java.lang.Override
      public boolean hasBinary() {
        return instance.hasBinary();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.BinaryOperation binary = 35;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation getBinary() {
        return instance.getBinary();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.BinaryOperation binary = 35;</code>
       */
      public Builder setBinary(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation value) {
        copyOnWrite();
        instance.setBinary(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.BinaryOperation binary = 35;</code>
       */
      public Builder setBinary(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation.Builder builderForValue) {
        copyOnWrite();
        instance.setBinary(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.BinaryOperation binary = 35;</code>
       */
      public Builder mergeBinary(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation value) {
        copyOnWrite();
        instance.mergeBinary(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.BinaryOperation binary = 35;</code>
       */
      public Builder clearBinary() {
        copyOnWrite();
        instance.clearBinary();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.UnaryOperation unary = 36;</code>
       */
      @java.lang.Override
      public boolean hasUnary() {
        return instance.hasUnary();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.UnaryOperation unary = 36;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation getUnary() {
        return instance.getUnary();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.UnaryOperation unary = 36;</code>
       */
      public Builder setUnary(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation value) {
        copyOnWrite();
        instance.setUnary(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.UnaryOperation unary = 36;</code>
       */
      public Builder setUnary(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation.Builder builderForValue) {
        copyOnWrite();
        instance.setUnary(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.UnaryOperation unary = 36;</code>
       */
      public Builder mergeUnary(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation value) {
        copyOnWrite();
        instance.mergeUnary(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.UnaryOperation unary = 36;</code>
       */
      public Builder clearUnary() {
        copyOnWrite();
        instance.clearUnary();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Conditional conditional = 37;</code>
       */
      @java.lang.Override
      public boolean hasConditional() {
        return instance.hasConditional();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Conditional conditional = 37;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional getConditional() {
        return instance.getConditional();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Conditional conditional = 37;</code>
       */
      public Builder setConditional(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional value) {
        copyOnWrite();
        instance.setConditional(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Conditional conditional = 37;</code>
       */
      public Builder setConditional(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional.Builder builderForValue) {
        copyOnWrite();
        instance.setConditional(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Conditional conditional = 37;</code>
       */
      public Builder mergeConditional(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional value) {
        copyOnWrite();
        instance.mergeConditional(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Conditional conditional = 37;</code>
       */
      public Builder clearConditional() {
        copyOnWrite();
        instance.clearConditional();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ArrayAccess array_access = 38;</code>
       */
      @java.lang.Override
      public boolean hasArrayAccess() {
        return instance.hasArrayAccess();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ArrayAccess array_access = 38;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess getArrayAccess() {
        return instance.getArrayAccess();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ArrayAccess array_access = 38;</code>
       */
      public Builder setArrayAccess(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess value) {
        copyOnWrite();
        instance.setArrayAccess(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ArrayAccess array_access = 38;</code>
       */
      public Builder setArrayAccess(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess.Builder builderForValue) {
        copyOnWrite();
        instance.setArrayAccess(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ArrayAccess array_access = 38;</code>
       */
      public Builder mergeArrayAccess(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess value) {
        copyOnWrite();
        instance.mergeArrayAccess(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ArrayAccess array_access = 38;</code>
       */
      public Builder clearArrayAccess() {
        copyOnWrite();
        instance.clearArrayAccess();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.NameReference name_reference = 39;</code>
       */
      @java.lang.Override
      public boolean hasNameReference() {
        return instance.hasNameReference();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.NameReference name_reference = 39;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference getNameReference() {
        return instance.getNameReference();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.NameReference name_reference = 39;</code>
       */
      public Builder setNameReference(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference value) {
        copyOnWrite();
        instance.setNameReference(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.NameReference name_reference = 39;</code>
       */
      public Builder setNameReference(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference.Builder builderForValue) {
        copyOnWrite();
        instance.setNameReference(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.NameReference name_reference = 39;</code>
       */
      public Builder mergeNameReference(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference value) {
        copyOnWrite();
        instance.mergeNameReference(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.NameReference name_reference = 39;</code>
       */
      public Builder clearNameReference() {
        copyOnWrite();
        instance.clearNameReference();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.PropertyReference property_reference = 40;</code>
       */
      @java.lang.Override
      public boolean hasPropertyReference() {
        return instance.hasPropertyReference();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.PropertyReference property_reference = 40;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference getPropertyReference() {
        return instance.getPropertyReference();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.PropertyReference property_reference = 40;</code>
       */
      public Builder setPropertyReference(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference value) {
        copyOnWrite();
        instance.setPropertyReference(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.PropertyReference property_reference = 40;</code>
       */
      public Builder setPropertyReference(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference.Builder builderForValue) {
        copyOnWrite();
        instance.setPropertyReference(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.PropertyReference property_reference = 40;</code>
       */
      public Builder mergePropertyReference(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference value) {
        copyOnWrite();
        instance.mergePropertyReference(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.PropertyReference property_reference = 40;</code>
       */
      public Builder clearPropertyReference() {
        copyOnWrite();
        instance.clearPropertyReference();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Invocation invocation = 41;</code>
       */
      @java.lang.Override
      public boolean hasInvocation() {
        return instance.hasInvocation();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Invocation invocation = 41;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation getInvocation() {
        return instance.getInvocation();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Invocation invocation = 41;</code>
       */
      public Builder setInvocation(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation value) {
        copyOnWrite();
        instance.setInvocation(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Invocation invocation = 41;</code>
       */
      public Builder setInvocation(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation.Builder builderForValue) {
        copyOnWrite();
        instance.setInvocation(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Invocation invocation = 41;</code>
       */
      public Builder mergeInvocation(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation value) {
        copyOnWrite();
        instance.mergeInvocation(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Invocation invocation = 41;</code>
       */
      public Builder clearInvocation() {
        copyOnWrite();
        instance.clearInvocation();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Instantiation instantiation = 42;</code>
       */
      @java.lang.Override
      public boolean hasInstantiation() {
        return instance.hasInstantiation();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Instantiation instantiation = 42;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation getInstantiation() {
        return instance.getInstantiation();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Instantiation instantiation = 42;</code>
       */
      public Builder setInstantiation(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation value) {
        copyOnWrite();
        instance.setInstantiation(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Instantiation instantiation = 42;</code>
       */
      public Builder setInstantiation(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation.Builder builderForValue) {
        copyOnWrite();
        instance.setInstantiation(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Instantiation instantiation = 42;</code>
       */
      public Builder mergeInstantiation(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation value) {
        copyOnWrite();
        instance.mergeInstantiation(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Instantiation instantiation = 42;</code>
       */
      public Builder clearInstantiation() {
        copyOnWrite();
        instance.clearInstantiation();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.SuperLiteral super_literal = 43;</code>
       */
      @java.lang.Override
      public boolean hasSuperLiteral() {
        return instance.hasSuperLiteral();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.SuperLiteral super_literal = 43;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral getSuperLiteral() {
        return instance.getSuperLiteral();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.SuperLiteral super_literal = 43;</code>
       */
      public Builder setSuperLiteral(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral value) {
        copyOnWrite();
        instance.setSuperLiteral(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.SuperLiteral super_literal = 43;</code>
       */
      public Builder setSuperLiteral(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral.Builder builderForValue) {
        copyOnWrite();
        instance.setSuperLiteral(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.SuperLiteral super_literal = 43;</code>
       */
      public Builder mergeSuperLiteral(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral value) {
        copyOnWrite();
        instance.mergeSuperLiteral(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.SuperLiteral super_literal = 43;</code>
       */
      public Builder clearSuperLiteral() {
        copyOnWrite();
        instance.clearSuperLiteral();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Class class = 44;</code>
       */
      @java.lang.Override
      public boolean hasClass_() {
        return instance.hasClass_();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Class class = 44;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class getClass_() {
        return instance.getClass_();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Class class = 44;</code>
       */
      public Builder setClass_(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class value) {
        copyOnWrite();
        instance.setClass_(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Class class = 44;</code>
       */
      public Builder setClass_(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class.Builder builderForValue) {
        copyOnWrite();
        instance.setClass_(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Class class = 44;</code>
       */
      public Builder mergeClass_(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class value) {
        copyOnWrite();
        instance.mergeClass_(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Class class = 44;</code>
       */
      public Builder clearClass_() {
        copyOnWrite();
        instance.clearClass_();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.Expression)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "expression_",
              "expressionCase_",
              "bitField0_",
              "fileId_",
              "location_",
              "synthetic_",
              "sideEffects_",
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SideEffects.internalGetVerifier(),
              "localAlias_",
              "beforeComments_",
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment.class,
              "afterComments_",
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment.class,
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral.class,
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral.class,
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral.class,
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral.class,
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral.class,
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral.class,
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral.class,
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.class,
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment.class,
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation.class,
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation.class,
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional.class,
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess.class,
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference.class,
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference.class,
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation.class,
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation.class,
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral.class,
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class.class,
            };
            java.lang.String info =
                "\u0004\u001e\u0001\u0001\u0001,\u001e\u0000\u0002\u0012\u0001\u1004\u0000\u0002\u1409" +
                "\u0001\u0003\u1007\u0002\u0004\u180c\u0003\u0005\u1409\u0004\u0006\u041b\u0007\u041b" +
                "\u00167\u0000\u0017<\u0000\u0018<\u0000\u0019<\u0000\u001a<\u0000\u001b7\u0000\u001c" +
                "\u043c\u0000\u001d7\u0000\u001e3\u0000\u001f\u043c\u0000 \u043c\u0000!\u043c\u0000" +
                "\"\u043c\u0000#\u043c\u0000$\u043c\u0000%\u043c\u0000&\u043c\u0000\'\u043c\u0000" +
                "(\u043c\u0000)\u043c\u0000*\u043c\u0000+<\u0000,\u043c\u0000";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.Expression)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression DEFAULT_INSTANCE;
    static {
      Expression defaultInstance = new Expression();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        Expression.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<Expression> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<Expression> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ThisLiteralOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.ThisLiteral)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.ThisLiteral}
   */
  public  static final class ThisLiteral extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          ThisLiteral, ThisLiteral.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.ThisLiteral)
      ThisLiteralOrBuilder {
    private ThisLiteral() {
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.ThisLiteral}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.ThisLiteral)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteralOrBuilder {
      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.ThisLiteral)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = null;java.lang.String info =
                "\u0004\u0000";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.ThisLiteral)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral DEFAULT_INSTANCE;
    static {
      ThisLiteral defaultInstance = new ThisLiteral();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        ThisLiteral.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<ThisLiteral> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<ThisLiteral> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface SuperLiteralOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.SuperLiteral)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.SuperLiteral}
   */
  public  static final class SuperLiteral extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          SuperLiteral, SuperLiteral.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.SuperLiteral)
      SuperLiteralOrBuilder {
    private SuperLiteral() {
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.SuperLiteral}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.SuperLiteral)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteralOrBuilder {
      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.SuperLiteral)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = null;java.lang.String info =
                "\u0004\u0000";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.SuperLiteral)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral DEFAULT_INSTANCE;
    static {
      SuperLiteral defaultInstance = new SuperLiteral();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        SuperLiteral.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<SuperLiteral> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<SuperLiteral> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface NullLiteralOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.NullLiteral)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.NullLiteral}
   */
  public  static final class NullLiteral extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          NullLiteral, NullLiteral.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.NullLiteral)
      NullLiteralOrBuilder {
    private NullLiteral() {
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.NullLiteral}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.NullLiteral)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteralOrBuilder {
      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.NullLiteral)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = null;java.lang.String info =
                "\u0004\u0000";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.NullLiteral)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral DEFAULT_INSTANCE;
    static {
      NullLiteral defaultInstance = new NullLiteral();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        NullLiteral.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<NullLiteral> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<NullLiteral> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface TrueLiteralOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.TrueLiteral)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.TrueLiteral}
   */
  public  static final class TrueLiteral extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          TrueLiteral, TrueLiteral.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.TrueLiteral)
      TrueLiteralOrBuilder {
    private TrueLiteral() {
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.TrueLiteral}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.TrueLiteral)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteralOrBuilder {
      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.TrueLiteral)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = null;java.lang.String info =
                "\u0004\u0000";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.TrueLiteral)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral DEFAULT_INSTANCE;
    static {
      TrueLiteral defaultInstance = new TrueLiteral();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        TrueLiteral.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<TrueLiteral> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<TrueLiteral> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface FalseLiteralOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.FalseLiteral)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.FalseLiteral}
   */
  public  static final class FalseLiteral extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          FalseLiteral, FalseLiteral.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.FalseLiteral)
      FalseLiteralOrBuilder {
    private FalseLiteral() {
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.FalseLiteral}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.FalseLiteral)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteralOrBuilder {
      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.FalseLiteral)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = null;java.lang.String info =
                "\u0004\u0000";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.FalseLiteral)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral DEFAULT_INSTANCE;
    static {
      FalseLiteral defaultInstance = new FalseLiteral();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        FalseLiteral.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<FalseLiteral> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<FalseLiteral> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface RegExpLiteralOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.RegExpLiteral)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>int32 pattern_string_id = 1 [features = { ... }</code>
     * @return Whether the patternStringId field is set.
     */
    boolean hasPatternStringId();
    /**
     * <code>int32 pattern_string_id = 1 [features = { ... }</code>
     * @return The patternStringId.
     */
    int getPatternStringId();

    /**
     * <code>int32 flags_string_id = 2;</code>
     * @return Whether the flagsStringId field is set.
     */
    boolean hasFlagsStringId();
    /**
     * <code>int32 flags_string_id = 2;</code>
     * @return The flagsStringId.
     */
    int getFlagsStringId();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.RegExpLiteral}
   */
  public  static final class RegExpLiteral extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          RegExpLiteral, RegExpLiteral.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.RegExpLiteral)
      RegExpLiteralOrBuilder {
    private RegExpLiteral() {
    }
    private int bitField0_;
    public static final int PATTERN_STRING_ID_FIELD_NUMBER = 1;
    private int patternStringId_;
    /**
     * <code>int32 pattern_string_id = 1 [features = { ... }</code>
     * @return Whether the patternStringId field is set.
     */
    @java.lang.Override
    public boolean hasPatternStringId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>int32 pattern_string_id = 1 [features = { ... }</code>
     * @return The patternStringId.
     */
    @java.lang.Override
    public int getPatternStringId() {
      return patternStringId_;
    }
    /**
     * <code>int32 pattern_string_id = 1 [features = { ... }</code>
     * @param value The patternStringId to set.
     */
    private void setPatternStringId(int value) {
      bitField0_ |= 0x00000001;
      patternStringId_ = value;
    }
    /**
     * <code>int32 pattern_string_id = 1 [features = { ... }</code>
     */
    private void clearPatternStringId() {
      bitField0_ = (bitField0_ & ~0x00000001);
      patternStringId_ = 0;
    }

    public static final int FLAGS_STRING_ID_FIELD_NUMBER = 2;
    private int flagsStringId_;
    /**
     * <code>int32 flags_string_id = 2;</code>
     * @return Whether the flagsStringId field is set.
     */
    @java.lang.Override
    public boolean hasFlagsStringId() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>int32 flags_string_id = 2;</code>
     * @return The flagsStringId.
     */
    @java.lang.Override
    public int getFlagsStringId() {
      return flagsStringId_;
    }
    /**
     * <code>int32 flags_string_id = 2;</code>
     * @param value The flagsStringId to set.
     */
    private void setFlagsStringId(int value) {
      bitField0_ |= 0x00000002;
      flagsStringId_ = value;
    }
    /**
     * <code>int32 flags_string_id = 2;</code>
     */
    private void clearFlagsStringId() {
      bitField0_ = (bitField0_ & ~0x00000002);
      flagsStringId_ = 0;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.RegExpLiteral}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.RegExpLiteral)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteralOrBuilder {
      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>int32 pattern_string_id = 1 [features = { ... }</code>
       * @return Whether the patternStringId field is set.
       */
      @java.lang.Override
      public boolean hasPatternStringId() {
        return instance.hasPatternStringId();
      }
      /**
       * <code>int32 pattern_string_id = 1 [features = { ... }</code>
       * @return The patternStringId.
       */
      @java.lang.Override
      public int getPatternStringId() {
        return instance.getPatternStringId();
      }
      /**
       * <code>int32 pattern_string_id = 1 [features = { ... }</code>
       * @param value The patternStringId to set.
       * @return This builder for chaining.
       */
      public Builder setPatternStringId(int value) {
        copyOnWrite();
        instance.setPatternStringId(value);
        return this;
      }
      /**
       * <code>int32 pattern_string_id = 1 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearPatternStringId() {
        copyOnWrite();
        instance.clearPatternStringId();
        return this;
      }

      /**
       * <code>int32 flags_string_id = 2;</code>
       * @return Whether the flagsStringId field is set.
       */
      @java.lang.Override
      public boolean hasFlagsStringId() {
        return instance.hasFlagsStringId();
      }
      /**
       * <code>int32 flags_string_id = 2;</code>
       * @return The flagsStringId.
       */
      @java.lang.Override
      public int getFlagsStringId() {
        return instance.getFlagsStringId();
      }
      /**
       * <code>int32 flags_string_id = 2;</code>
       * @param value The flagsStringId to set.
       * @return This builder for chaining.
       */
      public Builder setFlagsStringId(int value) {
        copyOnWrite();
        instance.setFlagsStringId(value);
        return this;
      }
      /**
       * <code>int32 flags_string_id = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearFlagsStringId() {
        copyOnWrite();
        instance.clearFlagsStringId();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.RegExpLiteral)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "patternStringId_",
              "flagsStringId_",
            };
            java.lang.String info =
                "\u0004\u0002\u0000\u0001\u0001\u0002\u0002\u0000\u0000\u0001\u0001\u1504\u0000\u0002" +
                "\u1004\u0001";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.RegExpLiteral)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral DEFAULT_INSTANCE;
    static {
      RegExpLiteral defaultInstance = new RegExpLiteral();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        RegExpLiteral.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<RegExpLiteral> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<RegExpLiteral> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ArrayLiteralOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.ArrayLiteral)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression element = 1;</code>
     */
    java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression> 
        getElementList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression element = 1;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getElement(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression element = 1;</code>
     */
    int getElementCount();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.ArrayLiteral}
   */
  public  static final class ArrayLiteral extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          ArrayLiteral, ArrayLiteral.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.ArrayLiteral)
      ArrayLiteralOrBuilder {
    private ArrayLiteral() {
      element_ = emptyProtobufList();
    }
    public static final int ELEMENT_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression> element_;
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression element = 1;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression> getElementList() {
      return element_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression element = 1;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> 
        getElementOrBuilderList() {
      return element_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression element = 1;</code>
     */
    @java.lang.Override
    public int getElementCount() {
      return element_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression element = 1;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getElement(int index) {
      return element_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression element = 1;</code>
     */
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getElementOrBuilder(
        int index) {
      return element_.get(index);
    }
    private void ensureElementIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression> tmp = element_;
      if (!tmp.isModifiable()) {
        element_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression element = 1;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setElement(
        int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      ensureElementIsMutable();
      element_.set(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression element = 1;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addElement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      ensureElementIsMutable();
      element_.add(value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression element = 1;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addElement(
        int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      ensureElementIsMutable();
      element_.add(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression element = 1;</code>
     */
    private void addAllElement(
        java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression> values) {
      ensureElementIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, element_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression element = 1;</code>
     */
    private void clearElement() {
      element_ = emptyProtobufList();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression element = 1;</code>
     */
    private void removeElement(int index) {
      ensureElementIsMutable();
      element_.remove(index);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.ArrayLiteral}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.ArrayLiteral)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteralOrBuilder {
      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression element = 1;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression> getElementList() {
        return java.util.Collections.unmodifiableList(
            instance.getElementList());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression element = 1;</code>
       */
      @java.lang.Override
      public int getElementCount() {
        return instance.getElementCount();
      }/**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression element = 1;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getElement(int index) {
        return instance.getElement(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression element = 1;</code>
       */
      public Builder setElement(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        copyOnWrite();
        instance.setElement(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression element = 1;</code>
       */
      public Builder setElement(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        copyOnWrite();
        instance.setElement(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression element = 1;</code>
       */
      public Builder addElement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        copyOnWrite();
        instance.addElement(value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression element = 1;</code>
       */
      public Builder addElement(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        copyOnWrite();
        instance.addElement(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression element = 1;</code>
       */
      public Builder addElement(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        copyOnWrite();
        instance.addElement(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression element = 1;</code>
       */
      public Builder addElement(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        copyOnWrite();
        instance.addElement(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression element = 1;</code>
       */
      public Builder addAllElement(
          java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression> values) {
        copyOnWrite();
        instance.addAllElement(values);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression element = 1;</code>
       */
      public Builder clearElement() {
        copyOnWrite();
        instance.clearElement();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression element = 1;</code>
       */
      public Builder removeElement(int index) {
        copyOnWrite();
        instance.removeElement(index);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.ArrayLiteral)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "element_",
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.class,
            };
            java.lang.String info =
                "\u0004\u0001\u0000\u0000\u0001\u0001\u0001\u0000\u0001\u0001\u0001\u041b";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.ArrayLiteral)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral DEFAULT_INSTANCE;
    static {
      ArrayLiteral defaultInstance = new ArrayLiteral();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        ArrayLiteral.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<ArrayLiteral> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<ArrayLiteral> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ObjectLiteralOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.ObjectLiteral)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ObjectLiteralEntry entry = 1;</code>
     */
    java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry> 
        getEntryList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ObjectLiteralEntry entry = 1;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry getEntry(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ObjectLiteralEntry entry = 1;</code>
     */
    int getEntryCount();

    /**
     * <code>bool multiline = 2 [default = true];</code>
     * @return Whether the multiline field is set.
     */
    boolean hasMultiline();
    /**
     * <code>bool multiline = 2 [default = true];</code>
     * @return The multiline.
     */
    boolean getMultiline();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.ObjectLiteral}
   */
  public  static final class ObjectLiteral extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          ObjectLiteral, ObjectLiteral.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.ObjectLiteral)
      ObjectLiteralOrBuilder {
    private ObjectLiteral() {
      entry_ = emptyProtobufList();
      multiline_ = true;
    }
    private int bitField0_;
    public static final int ENTRY_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry> entry_;
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ObjectLiteralEntry entry = 1;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry> getEntryList() {
      return entry_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ObjectLiteralEntry entry = 1;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntryOrBuilder> 
        getEntryOrBuilderList() {
      return entry_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ObjectLiteralEntry entry = 1;</code>
     */
    @java.lang.Override
    public int getEntryCount() {
      return entry_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ObjectLiteralEntry entry = 1;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry getEntry(int index) {
      return entry_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ObjectLiteralEntry entry = 1;</code>
     */
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntryOrBuilder getEntryOrBuilder(
        int index) {
      return entry_.get(index);
    }
    private void ensureEntryIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry> tmp = entry_;
      if (!tmp.isModifiable()) {
        entry_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ObjectLiteralEntry entry = 1;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setEntry(
        int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry value) {
      value.getClass();  // minimal bytecode null check
      ensureEntryIsMutable();
      entry_.set(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ObjectLiteralEntry entry = 1;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addEntry(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry value) {
      value.getClass();  // minimal bytecode null check
      ensureEntryIsMutable();
      entry_.add(value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ObjectLiteralEntry entry = 1;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addEntry(
        int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry value) {
      value.getClass();  // minimal bytecode null check
      ensureEntryIsMutable();
      entry_.add(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ObjectLiteralEntry entry = 1;</code>
     */
    private void addAllEntry(
        java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry> values) {
      ensureEntryIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, entry_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ObjectLiteralEntry entry = 1;</code>
     */
    private void clearEntry() {
      entry_ = emptyProtobufList();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ObjectLiteralEntry entry = 1;</code>
     */
    private void removeEntry(int index) {
      ensureEntryIsMutable();
      entry_.remove(index);
    }

    public static final int MULTILINE_FIELD_NUMBER = 2;
    private boolean multiline_;
    /**
     * <code>bool multiline = 2 [default = true];</code>
     * @return Whether the multiline field is set.
     */
    @java.lang.Override
    public boolean hasMultiline() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>bool multiline = 2 [default = true];</code>
     * @return The multiline.
     */
    @java.lang.Override
    public boolean getMultiline() {
      return multiline_;
    }
    /**
     * <code>bool multiline = 2 [default = true];</code>
     * @param value The multiline to set.
     */
    private void setMultiline(boolean value) {
      bitField0_ |= 0x00000001;
      multiline_ = value;
    }
    /**
     * <code>bool multiline = 2 [default = true];</code>
     */
    private void clearMultiline() {
      bitField0_ = (bitField0_ & ~0x00000001);
      multiline_ = true;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.ObjectLiteral}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.ObjectLiteral)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralOrBuilder {
      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ObjectLiteralEntry entry = 1;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry> getEntryList() {
        return java.util.Collections.unmodifiableList(
            instance.getEntryList());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ObjectLiteralEntry entry = 1;</code>
       */
      @java.lang.Override
      public int getEntryCount() {
        return instance.getEntryCount();
      }/**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ObjectLiteralEntry entry = 1;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry getEntry(int index) {
        return instance.getEntry(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ObjectLiteralEntry entry = 1;</code>
       */
      public Builder setEntry(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry value) {
        copyOnWrite();
        instance.setEntry(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ObjectLiteralEntry entry = 1;</code>
       */
      public Builder setEntry(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry.Builder builderForValue) {
        copyOnWrite();
        instance.setEntry(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ObjectLiteralEntry entry = 1;</code>
       */
      public Builder addEntry(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry value) {
        copyOnWrite();
        instance.addEntry(value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ObjectLiteralEntry entry = 1;</code>
       */
      public Builder addEntry(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry value) {
        copyOnWrite();
        instance.addEntry(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ObjectLiteralEntry entry = 1;</code>
       */
      public Builder addEntry(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry.Builder builderForValue) {
        copyOnWrite();
        instance.addEntry(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ObjectLiteralEntry entry = 1;</code>
       */
      public Builder addEntry(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry.Builder builderForValue) {
        copyOnWrite();
        instance.addEntry(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ObjectLiteralEntry entry = 1;</code>
       */
      public Builder addAllEntry(
          java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry> values) {
        copyOnWrite();
        instance.addAllEntry(values);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ObjectLiteralEntry entry = 1;</code>
       */
      public Builder clearEntry() {
        copyOnWrite();
        instance.clearEntry();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ObjectLiteralEntry entry = 1;</code>
       */
      public Builder removeEntry(int index) {
        copyOnWrite();
        instance.removeEntry(index);
        return this;
      }

      /**
       * <code>bool multiline = 2 [default = true];</code>
       * @return Whether the multiline field is set.
       */
      @java.lang.Override
      public boolean hasMultiline() {
        return instance.hasMultiline();
      }
      /**
       * <code>bool multiline = 2 [default = true];</code>
       * @return The multiline.
       */
      @java.lang.Override
      public boolean getMultiline() {
        return instance.getMultiline();
      }
      /**
       * <code>bool multiline = 2 [default = true];</code>
       * @param value The multiline to set.
       * @return This builder for chaining.
       */
      public Builder setMultiline(boolean value) {
        copyOnWrite();
        instance.setMultiline(value);
        return this;
      }
      /**
       * <code>bool multiline = 2 [default = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearMultiline() {
        copyOnWrite();
        instance.clearMultiline();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.ObjectLiteral)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "entry_",
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry.class,
              "multiline_",
            };
            java.lang.String info =
                "\u0004\u0002\u0000\u0001\u0001\u0002\u0002\u0000\u0001\u0001\u0001\u041b\u0002\u1007" +
                "\u0000";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.ObjectLiteral)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral DEFAULT_INSTANCE;
    static {
      ObjectLiteral defaultInstance = new ObjectLiteral();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        ObjectLiteral.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<ObjectLiteral> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<ObjectLiteral> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ObjectLiteralEntryOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.ObjectLiteralEntry)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression key = 1 [features = { ... }</code>
     * @return Whether the key field is set.
     */
    boolean hasKey();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression key = 1 [features = { ... }</code>
     * @return The key.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getKey();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression value = 2 [features = { ... }</code>
     * @return Whether the value field is set.
     */
    boolean hasValue();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression value = 2 [features = { ... }</code>
     * @return The value.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getValue();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.ObjectLiteralEntry}
   */
  public  static final class ObjectLiteralEntry extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          ObjectLiteralEntry, ObjectLiteralEntry.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.ObjectLiteralEntry)
      ObjectLiteralEntryOrBuilder {
    private ObjectLiteralEntry() {
    }
    private int bitField0_;
    public static final int KEY_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression key_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression key = 1 [features = { ... }</code>
     */
    @java.lang.Override
    public boolean hasKey() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression key = 1 [features = { ... }</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getKey() {
      return key_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : key_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression key = 1 [features = { ... }</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setKey(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      key_ = value;
      bitField0_ |= 0x00000001;
      }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression key = 1 [features = { ... }</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeKey(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      if (key_ != null &&
          key_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance()) {
        key_ =
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.newBuilder(key_).mergeFrom(value).buildPartial();
      } else {
        key_ = value;
      }
      bitField0_ |= 0x00000001;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression key = 1 [features = { ... }</code>
     */
    private void clearKey() {  key_ = null;
      bitField0_ = (bitField0_ & ~0x00000001);
    }

    public static final int VALUE_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression value = 2 [features = { ... }</code>
     */
    @java.lang.Override
    public boolean hasValue() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression value = 2 [features = { ... }</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getValue() {
      return value_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : value_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression value = 2 [features = { ... }</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setValue(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      value_ = value;
      bitField0_ |= 0x00000002;
      }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression value = 2 [features = { ... }</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeValue(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      if (value_ != null &&
          value_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance()) {
        value_ =
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.newBuilder(value_).mergeFrom(value).buildPartial();
      } else {
        value_ = value;
      }
      bitField0_ |= 0x00000002;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression value = 2 [features = { ... }</code>
     */
    private void clearValue() {  value_ = null;
      bitField0_ = (bitField0_ & ~0x00000002);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.ObjectLiteralEntry}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.ObjectLiteralEntry)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntryOrBuilder {
      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression key = 1 [features = { ... }</code>
       */
      @java.lang.Override
      public boolean hasKey() {
        return instance.hasKey();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression key = 1 [features = { ... }</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getKey() {
        return instance.getKey();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression key = 1 [features = { ... }</code>
       */
      public Builder setKey(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        copyOnWrite();
        instance.setKey(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression key = 1 [features = { ... }</code>
       */
      public Builder setKey(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        copyOnWrite();
        instance.setKey(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression key = 1 [features = { ... }</code>
       */
      public Builder mergeKey(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        copyOnWrite();
        instance.mergeKey(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression key = 1 [features = { ... }</code>
       */
      public Builder clearKey() {  copyOnWrite();
        instance.clearKey();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression value = 2 [features = { ... }</code>
       */
      @java.lang.Override
      public boolean hasValue() {
        return instance.hasValue();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression value = 2 [features = { ... }</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getValue() {
        return instance.getValue();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression value = 2 [features = { ... }</code>
       */
      public Builder setValue(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        copyOnWrite();
        instance.setValue(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression value = 2 [features = { ... }</code>
       */
      public Builder setValue(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        copyOnWrite();
        instance.setValue(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression value = 2 [features = { ... }</code>
       */
      public Builder mergeValue(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        copyOnWrite();
        instance.mergeValue(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression value = 2 [features = { ... }</code>
       */
      public Builder clearValue() {  copyOnWrite();
        instance.clearValue();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.ObjectLiteralEntry)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "key_",
              "value_",
            };
            java.lang.String info =
                "\u0004\u0002\u0000\u0001\u0001\u0002\u0002\u0000\u0000\u0002\u0001\u1509\u0000\u0002" +
                "\u1509\u0001";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.ObjectLiteralEntry)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry DEFAULT_INSTANCE;
    static {
      ObjectLiteralEntry defaultInstance = new ObjectLiteralEntry();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        ObjectLiteralEntry.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<ObjectLiteralEntry> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<ObjectLiteralEntry> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface FunctionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.Function)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1;</code>
     */
    java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter> 
        getParameterList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter getParameter(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1;</code>
     */
    int getParameterCount();

    /**
     * <code>int32 name_id = 2;</code>
     * @return Whether the nameId field is set.
     */
    boolean hasNameId();
    /**
     * <code>int32 name_id = 2;</code>
     * @return The nameId.
     */
    int getNameId();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 3 [features = { ... }</code>
     * @return Whether the body field is set.
     */
    boolean hasBody();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 3 [features = { ... }</code>
     * @return The body.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getBody();

    /**
     * <code>bool local = 4 [default = false];</code>
     * @return Whether the local field is set.
     */
    boolean hasLocal();
    /**
     * <code>bool local = 4 [default = false];</code>
     * @return The local.
     */
    boolean getLocal();

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function.Modifier modifier = 5;</code>
     * @return A list containing the modifier.
     */
    java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.Modifier> getModifierList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function.Modifier modifier = 5;</code>
     * @return The count of modifier.
     */
    int getModifierCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function.Modifier modifier = 5;</code>
     * @param index The index of the element to return.
     * @return The modifier at the given index.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.Modifier getModifier(int index);

    /**
     * <code>bool is_es6_arrow = 6 [default = false];</code>
     * @return Whether the isEs6Arrow field is set.
     */
    boolean hasIsEs6Arrow();
    /**
     * <code>bool is_es6_arrow = 6 [default = false];</code>
     * @return The isEs6Arrow.
     */
    boolean getIsEs6Arrow();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Function}
   */
  public  static final class Function extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          Function, Function.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.Function)
      FunctionOrBuilder {
    private Function() {
      parameter_ = emptyProtobufList();
      modifier_ = emptyIntList();
    }
    /**
     * Protobuf enum {@code org.jetbrains.kotlin.serialization.js.ast.Function.Modifier}
     */
    public enum Modifier
        implements org.jetbrains.kotlin.protobuf.Internal.EnumLite {
      /**
       * <code>STATIC = 1;</code>
       */
      STATIC(1),
      /**
       * <code>GET = 2;</code>
       */
      GET(2),
      /**
       * <code>SET = 3;</code>
       */
      SET(3),
      /**
       * <code>GENERATOR = 4;</code>
       */
      GENERATOR(4),
      ;

      /**
       * <code>STATIC = 1;</code>
       */
      public static final int STATIC_VALUE = 1;
      /**
       * <code>GET = 2;</code>
       */
      public static final int GET_VALUE = 2;
      /**
       * <code>SET = 3;</code>
       */
      public static final int SET_VALUE = 3;
      /**
       * <code>GENERATOR = 4;</code>
       */
      public static final int GENERATOR_VALUE = 4;


      @java.lang.Override
      public final int getNumber() {
        return value;
      }

      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static Modifier valueOf(int value) {
        return forNumber(value);
      }

      public static Modifier forNumber(int value) {
        switch (value) {
          case 1: return STATIC;
          case 2: return GET;
          case 3: return SET;
          case 4: return GENERATOR;
          default: return null;
        }
      }

      public static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Modifier>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<
          Modifier> internalValueMap =
            new org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Modifier>() {
              @java.lang.Override
              public Modifier findValueByNumber(int number) {
                return Modifier.forNumber(number);
              }
            };

      public static org.jetbrains.kotlin.protobuf.Internal.EnumVerifier 
          internalGetVerifier() {
        return ModifierVerifier.INSTANCE;
      }

      private static final class ModifierVerifier implements 
           org.jetbrains.kotlin.protobuf.Internal.EnumVerifier { 
              static final org.jetbrains.kotlin.protobuf.Internal.EnumVerifier           INSTANCE = new ModifierVerifier();
              @java.lang.Override
              public boolean isInRange(int number) {
                return Modifier.forNumber(number) != null;
              }
            };

      private final int value;

      private Modifier(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:org.jetbrains.kotlin.serialization.js.ast.Function.Modifier)
    }

    private int bitField0_;
    public static final int PARAMETER_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter> parameter_;
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter> getParameterList() {
      return parameter_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ParameterOrBuilder> 
        getParameterOrBuilderList() {
      return parameter_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1;</code>
     */
    @java.lang.Override
    public int getParameterCount() {
      return parameter_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter getParameter(int index) {
      return parameter_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1;</code>
     */
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ParameterOrBuilder getParameterOrBuilder(
        int index) {
      return parameter_.get(index);
    }
    private void ensureParameterIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter> tmp = parameter_;
      if (!tmp.isModifiable()) {
        parameter_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setParameter(
        int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter value) {
      value.getClass();  // minimal bytecode null check
      ensureParameterIsMutable();
      parameter_.set(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addParameter(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter value) {
      value.getClass();  // minimal bytecode null check
      ensureParameterIsMutable();
      parameter_.add(value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addParameter(
        int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter value) {
      value.getClass();  // minimal bytecode null check
      ensureParameterIsMutable();
      parameter_.add(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1;</code>
     */
    private void addAllParameter(
        java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter> values) {
      ensureParameterIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, parameter_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1;</code>
     */
    private void clearParameter() {
      parameter_ = emptyProtobufList();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1;</code>
     */
    private void removeParameter(int index) {
      ensureParameterIsMutable();
      parameter_.remove(index);
    }

    public static final int NAME_ID_FIELD_NUMBER = 2;
    private int nameId_;
    /**
     * <code>int32 name_id = 2;</code>
     * @return Whether the nameId field is set.
     */
    @java.lang.Override
    public boolean hasNameId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>int32 name_id = 2;</code>
     * @return The nameId.
     */
    @java.lang.Override
    public int getNameId() {
      return nameId_;
    }
    /**
     * <code>int32 name_id = 2;</code>
     * @param value The nameId to set.
     */
    private void setNameId(int value) {
      bitField0_ |= 0x00000001;
      nameId_ = value;
    }
    /**
     * <code>int32 name_id = 2;</code>
     */
    private void clearNameId() {
      bitField0_ = (bitField0_ & ~0x00000001);
      nameId_ = 0;
    }

    public static final int BODY_FIELD_NUMBER = 3;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement body_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 3 [features = { ... }</code>
     */
    @java.lang.Override
    public boolean hasBody() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 3 [features = { ... }</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getBody() {
      return body_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance() : body_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 3 [features = { ... }</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setBody(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
      value.getClass();  // minimal bytecode null check
      body_ = value;
      bitField0_ |= 0x00000002;
      }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 3 [features = { ... }</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeBody(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
      value.getClass();  // minimal bytecode null check
      if (body_ != null &&
          body_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance()) {
        body_ =
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.newBuilder(body_).mergeFrom(value).buildPartial();
      } else {
        body_ = value;
      }
      bitField0_ |= 0x00000002;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 3 [features = { ... }</code>
     */
    private void clearBody() {  body_ = null;
      bitField0_ = (bitField0_ & ~0x00000002);
    }

    public static final int LOCAL_FIELD_NUMBER = 4;
    private boolean local_;
    /**
     * <code>bool local = 4 [default = false];</code>
     * @return Whether the local field is set.
     */
    @java.lang.Override
    public boolean hasLocal() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>bool local = 4 [default = false];</code>
     * @return The local.
     */
    @java.lang.Override
    public boolean getLocal() {
      return local_;
    }
    /**
     * <code>bool local = 4 [default = false];</code>
     * @param value The local to set.
     */
    private void setLocal(boolean value) {
      bitField0_ |= 0x00000004;
      local_ = value;
    }
    /**
     * <code>bool local = 4 [default = false];</code>
     */
    private void clearLocal() {
      bitField0_ = (bitField0_ & ~0x00000004);
      local_ = false;
    }

    public static final int MODIFIER_FIELD_NUMBER = 5;
    private org.jetbrains.kotlin.protobuf.Internal.IntList modifier_;
    private static final org.jetbrains.kotlin.protobuf.Internal.IntListAdapter.IntConverter<
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.Modifier> modifier_converter_ =
            new org.jetbrains.kotlin.protobuf.Internal.IntListAdapter.IntConverter<
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.Modifier>() {
              @java.lang.Override
              public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.Modifier convert(int from) {
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.Modifier result = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.Modifier.forNumber(from);
                return result == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.Modifier.STATIC : result;
              }
            };
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function.Modifier modifier = 5;</code>
     * @return A list containing the modifier.
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.Modifier> getModifierList() {
      return new org.jetbrains.kotlin.protobuf.Internal.IntListAdapter<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.Modifier>(modifier_, modifier_converter_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function.Modifier modifier = 5;</code>
     * @return The count of modifier.
     */
    @java.lang.Override
    public int getModifierCount() {
      return modifier_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function.Modifier modifier = 5;</code>
     * @param index The index of the element to return.
     * @return The modifier at the given index.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.Modifier getModifier(int index) {
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.Modifier result = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.Modifier.forNumber(modifier_.getInt(index));
      return result == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.Modifier.STATIC : result;
    }
    private int modifierMemoizedSerializedSize;
    private void ensureModifierIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.IntList tmp = modifier_;
      if (!tmp.isModifiable()) {
        modifier_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
      }
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function.Modifier modifier = 5;</code>
     * @param index The index to set the value at.
     * @param value The modifier to set.
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setModifier(
        int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.Modifier value) {
      value.getClass();  // minimal bytecode null check
      ensureModifierIsMutable();
      modifier_.setInt(index, value.getNumber());
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function.Modifier modifier = 5;</code>
     * @param value The modifier to add.
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addModifier(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.Modifier value) {
      value.getClass();  // minimal bytecode null check
      ensureModifierIsMutable();
      modifier_.addInt(value.getNumber());
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function.Modifier modifier = 5;</code>
     * @param values The modifier to add.
     */
    private void addAllModifier(
        java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.Modifier> values) {
      ensureModifierIsMutable();
      for (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.Modifier value : values) {
        modifier_.addInt(value.getNumber());
      }
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function.Modifier modifier = 5;</code>
     */
    private void clearModifier() {
      modifier_ = emptyIntList();
    }

    public static final int IS_ES6_ARROW_FIELD_NUMBER = 6;
    private boolean isEs6Arrow_;
    /**
     * <code>bool is_es6_arrow = 6 [default = false];</code>
     * @return Whether the isEs6Arrow field is set.
     */
    @java.lang.Override
    public boolean hasIsEs6Arrow() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <code>bool is_es6_arrow = 6 [default = false];</code>
     * @return The isEs6Arrow.
     */
    @java.lang.Override
    public boolean getIsEs6Arrow() {
      return isEs6Arrow_;
    }
    /**
     * <code>bool is_es6_arrow = 6 [default = false];</code>
     * @param value The isEs6Arrow to set.
     */
    private void setIsEs6Arrow(boolean value) {
      bitField0_ |= 0x00000008;
      isEs6Arrow_ = value;
    }
    /**
     * <code>bool is_es6_arrow = 6 [default = false];</code>
     */
    private void clearIsEs6Arrow() {
      bitField0_ = (bitField0_ & ~0x00000008);
      isEs6Arrow_ = false;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Function}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.Function)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FunctionOrBuilder {
      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter> getParameterList() {
        return java.util.Collections.unmodifiableList(
            instance.getParameterList());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1;</code>
       */
      @java.lang.Override
      public int getParameterCount() {
        return instance.getParameterCount();
      }/**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter getParameter(int index) {
        return instance.getParameter(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1;</code>
       */
      public Builder setParameter(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter value) {
        copyOnWrite();
        instance.setParameter(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1;</code>
       */
      public Builder setParameter(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter.Builder builderForValue) {
        copyOnWrite();
        instance.setParameter(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1;</code>
       */
      public Builder addParameter(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter value) {
        copyOnWrite();
        instance.addParameter(value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1;</code>
       */
      public Builder addParameter(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter value) {
        copyOnWrite();
        instance.addParameter(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1;</code>
       */
      public Builder addParameter(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter.Builder builderForValue) {
        copyOnWrite();
        instance.addParameter(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1;</code>
       */
      public Builder addParameter(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter.Builder builderForValue) {
        copyOnWrite();
        instance.addParameter(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1;</code>
       */
      public Builder addAllParameter(
          java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter> values) {
        copyOnWrite();
        instance.addAllParameter(values);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1;</code>
       */
      public Builder clearParameter() {
        copyOnWrite();
        instance.clearParameter();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1;</code>
       */
      public Builder removeParameter(int index) {
        copyOnWrite();
        instance.removeParameter(index);
        return this;
      }

      /**
       * <code>int32 name_id = 2;</code>
       * @return Whether the nameId field is set.
       */
      @java.lang.Override
      public boolean hasNameId() {
        return instance.hasNameId();
      }
      /**
       * <code>int32 name_id = 2;</code>
       * @return The nameId.
       */
      @java.lang.Override
      public int getNameId() {
        return instance.getNameId();
      }
      /**
       * <code>int32 name_id = 2;</code>
       * @param value The nameId to set.
       * @return This builder for chaining.
       */
      public Builder setNameId(int value) {
        copyOnWrite();
        instance.setNameId(value);
        return this;
      }
      /**
       * <code>int32 name_id = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearNameId() {
        copyOnWrite();
        instance.clearNameId();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 3 [features = { ... }</code>
       */
      @java.lang.Override
      public boolean hasBody() {
        return instance.hasBody();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 3 [features = { ... }</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getBody() {
        return instance.getBody();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 3 [features = { ... }</code>
       */
      public Builder setBody(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
        copyOnWrite();
        instance.setBody(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 3 [features = { ... }</code>
       */
      public Builder setBody(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder builderForValue) {
        copyOnWrite();
        instance.setBody(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 3 [features = { ... }</code>
       */
      public Builder mergeBody(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
        copyOnWrite();
        instance.mergeBody(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 3 [features = { ... }</code>
       */
      public Builder clearBody() {  copyOnWrite();
        instance.clearBody();
        return this;
      }

      /**
       * <code>bool local = 4 [default = false];</code>
       * @return Whether the local field is set.
       */
      @java.lang.Override
      public boolean hasLocal() {
        return instance.hasLocal();
      }
      /**
       * <code>bool local = 4 [default = false];</code>
       * @return The local.
       */
      @java.lang.Override
      public boolean getLocal() {
        return instance.getLocal();
      }
      /**
       * <code>bool local = 4 [default = false];</code>
       * @param value The local to set.
       * @return This builder for chaining.
       */
      public Builder setLocal(boolean value) {
        copyOnWrite();
        instance.setLocal(value);
        return this;
      }
      /**
       * <code>bool local = 4 [default = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearLocal() {
        copyOnWrite();
        instance.clearLocal();
        return this;
      }

      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function.Modifier modifier = 5;</code>
       * @return A list containing the modifier.
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.Modifier> getModifierList() {
        return instance.getModifierList();
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function.Modifier modifier = 5;</code>
       * @return The count of modifier.
       */
      @java.lang.Override
      public int getModifierCount() {
        return instance.getModifierCount();
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function.Modifier modifier = 5;</code>
       * @param index The index of the element to return.
       * @return The modifier at the given index.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.Modifier getModifier(int index) {
        return instance.getModifier(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function.Modifier modifier = 5;</code>
       * @param index The index to set the value at.
       * @param value The modifier to set.
       * @return This builder for chaining.
       */
      public Builder setModifier(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.Modifier value) {
        copyOnWrite();
        instance.setModifier(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function.Modifier modifier = 5;</code>
       * @param value The modifier to add.
       * @return This builder for chaining.
       */
      public Builder addModifier(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.Modifier value) {
        copyOnWrite();
        instance.addModifier(value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function.Modifier modifier = 5;</code>
       * @param values The modifier to add.
       * @return This builder for chaining.
       */
      public Builder addAllModifier(
          java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.Modifier> values) {
        copyOnWrite();
        instance.addAllModifier(values);  return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function.Modifier modifier = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearModifier() {
        copyOnWrite();
        instance.clearModifier();
        return this;
      }

      /**
       * <code>bool is_es6_arrow = 6 [default = false];</code>
       * @return Whether the isEs6Arrow field is set.
       */
      @java.lang.Override
      public boolean hasIsEs6Arrow() {
        return instance.hasIsEs6Arrow();
      }
      /**
       * <code>bool is_es6_arrow = 6 [default = false];</code>
       * @return The isEs6Arrow.
       */
      @java.lang.Override
      public boolean getIsEs6Arrow() {
        return instance.getIsEs6Arrow();
      }
      /**
       * <code>bool is_es6_arrow = 6 [default = false];</code>
       * @param value The isEs6Arrow to set.
       * @return This builder for chaining.
       */
      public Builder setIsEs6Arrow(boolean value) {
        copyOnWrite();
        instance.setIsEs6Arrow(value);
        return this;
      }
      /**
       * <code>bool is_es6_arrow = 6 [default = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearIsEs6Arrow() {
        copyOnWrite();
        instance.clearIsEs6Arrow();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.Function)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "parameter_",
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter.class,
              "nameId_",
              "body_",
              "local_",
              "modifier_",
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.Modifier.internalGetVerifier(),
              "isEs6Arrow_",
            };
            java.lang.String info =
                "\u0004\u0006\u0000\u0001\u0001\u0006\u0006\u0000\u0002\u0002\u0001\u041b\u0002\u1004" +
                "\u0000\u0003\u1509\u0001\u0004\u1007\u0002\u0005\u082c\u0006\u1007\u0003";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.Function)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function DEFAULT_INSTANCE;
    static {
      Function defaultInstance = new Function();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        Function.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<Function> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<Function> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ClassOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.Class)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>int32 name_id = 1;</code>
     * @return Whether the nameId field is set.
     */
    boolean hasNameId();
    /**
     * <code>int32 name_id = 1;</code>
     * @return The nameId.
     */
    int getNameId();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression super_expression = 2;</code>
     * @return Whether the superExpression field is set.
     */
    boolean hasSuperExpression();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression super_expression = 2;</code>
     * @return The superExpression.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getSuperExpression();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Function constructor = 3;</code>
     * @return Whether the constructor field is set.
     */
    boolean hasConstructor();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Function constructor = 3;</code>
     * @return The constructor.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function getConstructor();

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function member = 4;</code>
     */
    java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function> 
        getMemberList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function member = 4;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function getMember(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function member = 4;</code>
     */
    int getMemberCount();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Class}
   */
  public  static final class Class extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          Class, Class.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.Class)
      ClassOrBuilder {
    private Class() {
      member_ = emptyProtobufList();
    }
    private int bitField0_;
    public static final int NAME_ID_FIELD_NUMBER = 1;
    private int nameId_;
    /**
     * <code>int32 name_id = 1;</code>
     * @return Whether the nameId field is set.
     */
    @java.lang.Override
    public boolean hasNameId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>int32 name_id = 1;</code>
     * @return The nameId.
     */
    @java.lang.Override
    public int getNameId() {
      return nameId_;
    }
    /**
     * <code>int32 name_id = 1;</code>
     * @param value The nameId to set.
     */
    private void setNameId(int value) {
      bitField0_ |= 0x00000001;
      nameId_ = value;
    }
    /**
     * <code>int32 name_id = 1;</code>
     */
    private void clearNameId() {
      bitField0_ = (bitField0_ & ~0x00000001);
      nameId_ = 0;
    }

    public static final int SUPER_EXPRESSION_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression superExpression_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression super_expression = 2;</code>
     */
    @java.lang.Override
    public boolean hasSuperExpression() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression super_expression = 2;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getSuperExpression() {
      return superExpression_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : superExpression_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression super_expression = 2;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setSuperExpression(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      superExpression_ = value;
      bitField0_ |= 0x00000002;
      }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression super_expression = 2;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeSuperExpression(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      if (superExpression_ != null &&
          superExpression_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance()) {
        superExpression_ =
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.newBuilder(superExpression_).mergeFrom(value).buildPartial();
      } else {
        superExpression_ = value;
      }
      bitField0_ |= 0x00000002;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression super_expression = 2;</code>
     */
    private void clearSuperExpression() {  superExpression_ = null;
      bitField0_ = (bitField0_ & ~0x00000002);
    }

    public static final int CONSTRUCTOR_FIELD_NUMBER = 3;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function constructor_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Function constructor = 3;</code>
     */
    @java.lang.Override
    public boolean hasConstructor() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Function constructor = 3;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function getConstructor() {
      return constructor_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.getDefaultInstance() : constructor_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Function constructor = 3;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setConstructor(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function value) {
      value.getClass();  // minimal bytecode null check
      constructor_ = value;
      bitField0_ |= 0x00000004;
      }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Function constructor = 3;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeConstructor(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function value) {
      value.getClass();  // minimal bytecode null check
      if (constructor_ != null &&
          constructor_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.getDefaultInstance()) {
        constructor_ =
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.newBuilder(constructor_).mergeFrom(value).buildPartial();
      } else {
        constructor_ = value;
      }
      bitField0_ |= 0x00000004;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Function constructor = 3;</code>
     */
    private void clearConstructor() {  constructor_ = null;
      bitField0_ = (bitField0_ & ~0x00000004);
    }

    public static final int MEMBER_FIELD_NUMBER = 4;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function> member_;
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function member = 4;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function> getMemberList() {
      return member_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function member = 4;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FunctionOrBuilder> 
        getMemberOrBuilderList() {
      return member_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function member = 4;</code>
     */
    @java.lang.Override
    public int getMemberCount() {
      return member_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function member = 4;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function getMember(int index) {
      return member_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function member = 4;</code>
     */
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FunctionOrBuilder getMemberOrBuilder(
        int index) {
      return member_.get(index);
    }
    private void ensureMemberIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function> tmp = member_;
      if (!tmp.isModifiable()) {
        member_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function member = 4;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setMember(
        int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function value) {
      value.getClass();  // minimal bytecode null check
      ensureMemberIsMutable();
      member_.set(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function member = 4;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addMember(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function value) {
      value.getClass();  // minimal bytecode null check
      ensureMemberIsMutable();
      member_.add(value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function member = 4;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addMember(
        int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function value) {
      value.getClass();  // minimal bytecode null check
      ensureMemberIsMutable();
      member_.add(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function member = 4;</code>
     */
    private void addAllMember(
        java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function> values) {
      ensureMemberIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, member_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function member = 4;</code>
     */
    private void clearMember() {
      member_ = emptyProtobufList();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function member = 4;</code>
     */
    private void removeMember(int index) {
      ensureMemberIsMutable();
      member_.remove(index);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Class}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.Class)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassOrBuilder {
      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>int32 name_id = 1;</code>
       * @return Whether the nameId field is set.
       */
      @java.lang.Override
      public boolean hasNameId() {
        return instance.hasNameId();
      }
      /**
       * <code>int32 name_id = 1;</code>
       * @return The nameId.
       */
      @java.lang.Override
      public int getNameId() {
        return instance.getNameId();
      }
      /**
       * <code>int32 name_id = 1;</code>
       * @param value The nameId to set.
       * @return This builder for chaining.
       */
      public Builder setNameId(int value) {
        copyOnWrite();
        instance.setNameId(value);
        return this;
      }
      /**
       * <code>int32 name_id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearNameId() {
        copyOnWrite();
        instance.clearNameId();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression super_expression = 2;</code>
       */
      @java.lang.Override
      public boolean hasSuperExpression() {
        return instance.hasSuperExpression();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression super_expression = 2;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getSuperExpression() {
        return instance.getSuperExpression();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression super_expression = 2;</code>
       */
      public Builder setSuperExpression(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        copyOnWrite();
        instance.setSuperExpression(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression super_expression = 2;</code>
       */
      public Builder setSuperExpression(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        copyOnWrite();
        instance.setSuperExpression(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression super_expression = 2;</code>
       */
      public Builder mergeSuperExpression(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        copyOnWrite();
        instance.mergeSuperExpression(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression super_expression = 2;</code>
       */
      public Builder clearSuperExpression() {  copyOnWrite();
        instance.clearSuperExpression();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Function constructor = 3;</code>
       */
      @java.lang.Override
      public boolean hasConstructor() {
        return instance.hasConstructor();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Function constructor = 3;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function getConstructor() {
        return instance.getConstructor();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Function constructor = 3;</code>
       */
      public Builder setConstructor(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function value) {
        copyOnWrite();
        instance.setConstructor(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Function constructor = 3;</code>
       */
      public Builder setConstructor(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.Builder builderForValue) {
        copyOnWrite();
        instance.setConstructor(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Function constructor = 3;</code>
       */
      public Builder mergeConstructor(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function value) {
        copyOnWrite();
        instance.mergeConstructor(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Function constructor = 3;</code>
       */
      public Builder clearConstructor() {  copyOnWrite();
        instance.clearConstructor();
        return this;
      }

      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function member = 4;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function> getMemberList() {
        return java.util.Collections.unmodifiableList(
            instance.getMemberList());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function member = 4;</code>
       */
      @java.lang.Override
      public int getMemberCount() {
        return instance.getMemberCount();
      }/**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function member = 4;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function getMember(int index) {
        return instance.getMember(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function member = 4;</code>
       */
      public Builder setMember(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function value) {
        copyOnWrite();
        instance.setMember(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function member = 4;</code>
       */
      public Builder setMember(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.Builder builderForValue) {
        copyOnWrite();
        instance.setMember(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function member = 4;</code>
       */
      public Builder addMember(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function value) {
        copyOnWrite();
        instance.addMember(value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function member = 4;</code>
       */
      public Builder addMember(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function value) {
        copyOnWrite();
        instance.addMember(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function member = 4;</code>
       */
      public Builder addMember(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.Builder builderForValue) {
        copyOnWrite();
        instance.addMember(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function member = 4;</code>
       */
      public Builder addMember(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.Builder builderForValue) {
        copyOnWrite();
        instance.addMember(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function member = 4;</code>
       */
      public Builder addAllMember(
          java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function> values) {
        copyOnWrite();
        instance.addAllMember(values);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function member = 4;</code>
       */
      public Builder clearMember() {
        copyOnWrite();
        instance.clearMember();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function member = 4;</code>
       */
      public Builder removeMember(int index) {
        copyOnWrite();
        instance.removeMember(index);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.Class)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "nameId_",
              "superExpression_",
              "constructor_",
              "member_",
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.class,
            };
            java.lang.String info =
                "\u0004\u0004\u0000\u0001\u0001\u0004\u0004\u0000\u0001\u0003\u0001\u1004\u0000\u0002" +
                "\u1409\u0001\u0003\u1409\u0002\u0004\u041b";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.Class)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class DEFAULT_INSTANCE;
    static {
      Class defaultInstance = new Class();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        Class.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<Class> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<Class> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ParameterOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.Parameter)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>int32 name_id = 1 [features = { ... }</code>
     * @return Whether the nameId field is set.
     */
    boolean hasNameId();
    /**
     * <code>int32 name_id = 1 [features = { ... }</code>
     * @return The nameId.
     */
    int getNameId();

    /**
     * <code>bool has_default_value = 2 [default = false];</code>
     * @return Whether the hasDefaultValue field is set.
     */
    boolean hasHasDefaultValue();
    /**
     * <code>bool has_default_value = 2 [default = false];</code>
     * @return The hasDefaultValue.
     */
    boolean getHasDefaultValue();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Parameter}
   */
  public  static final class Parameter extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          Parameter, Parameter.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.Parameter)
      ParameterOrBuilder {
    private Parameter() {
    }
    private int bitField0_;
    public static final int NAME_ID_FIELD_NUMBER = 1;
    private int nameId_;
    /**
     * <code>int32 name_id = 1 [features = { ... }</code>
     * @return Whether the nameId field is set.
     */
    @java.lang.Override
    public boolean hasNameId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>int32 name_id = 1 [features = { ... }</code>
     * @return The nameId.
     */
    @java.lang.Override
    public int getNameId() {
      return nameId_;
    }
    /**
     * <code>int32 name_id = 1 [features = { ... }</code>
     * @param value The nameId to set.
     */
    private void setNameId(int value) {
      bitField0_ |= 0x00000001;
      nameId_ = value;
    }
    /**
     * <code>int32 name_id = 1 [features = { ... }</code>
     */
    private void clearNameId() {
      bitField0_ = (bitField0_ & ~0x00000001);
      nameId_ = 0;
    }

    public static final int HAS_DEFAULT_VALUE_FIELD_NUMBER = 2;
    private boolean hasDefaultValue_;
    /**
     * <code>bool has_default_value = 2 [default = false];</code>
     * @return Whether the hasDefaultValue field is set.
     */
    @java.lang.Override
    public boolean hasHasDefaultValue() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>bool has_default_value = 2 [default = false];</code>
     * @return The hasDefaultValue.
     */
    @java.lang.Override
    public boolean getHasDefaultValue() {
      return hasDefaultValue_;
    }
    /**
     * <code>bool has_default_value = 2 [default = false];</code>
     * @param value The hasDefaultValue to set.
     */
    private void setHasDefaultValue(boolean value) {
      bitField0_ |= 0x00000002;
      hasDefaultValue_ = value;
    }
    /**
     * <code>bool has_default_value = 2 [default = false];</code>
     */
    private void clearHasDefaultValue() {
      bitField0_ = (bitField0_ & ~0x00000002);
      hasDefaultValue_ = false;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Parameter}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.Parameter)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ParameterOrBuilder {
      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>int32 name_id = 1 [features = { ... }</code>
       * @return Whether the nameId field is set.
       */
      @java.lang.Override
      public boolean hasNameId() {
        return instance.hasNameId();
      }
      /**
       * <code>int32 name_id = 1 [features = { ... }</code>
       * @return The nameId.
       */
      @java.lang.Override
      public int getNameId() {
        return instance.getNameId();
      }
      /**
       * <code>int32 name_id = 1 [features = { ... }</code>
       * @param value The nameId to set.
       * @return This builder for chaining.
       */
      public Builder setNameId(int value) {
        copyOnWrite();
        instance.setNameId(value);
        return this;
      }
      /**
       * <code>int32 name_id = 1 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearNameId() {
        copyOnWrite();
        instance.clearNameId();
        return this;
      }

      /**
       * <code>bool has_default_value = 2 [default = false];</code>
       * @return Whether the hasDefaultValue field is set.
       */
      @java.lang.Override
      public boolean hasHasDefaultValue() {
        return instance.hasHasDefaultValue();
      }
      /**
       * <code>bool has_default_value = 2 [default = false];</code>
       * @return The hasDefaultValue.
       */
      @java.lang.Override
      public boolean getHasDefaultValue() {
        return instance.getHasDefaultValue();
      }
      /**
       * <code>bool has_default_value = 2 [default = false];</code>
       * @param value The hasDefaultValue to set.
       * @return This builder for chaining.
       */
      public Builder setHasDefaultValue(boolean value) {
        copyOnWrite();
        instance.setHasDefaultValue(value);
        return this;
      }
      /**
       * <code>bool has_default_value = 2 [default = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearHasDefaultValue() {
        copyOnWrite();
        instance.clearHasDefaultValue();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.Parameter)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "nameId_",
              "hasDefaultValue_",
            };
            java.lang.String info =
                "\u0004\u0002\u0000\u0001\u0001\u0002\u0002\u0000\u0000\u0001\u0001\u1504\u0000\u0002" +
                "\u1007\u0001";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.Parameter)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter DEFAULT_INSTANCE;
    static {
      Parameter defaultInstance = new Parameter();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        Parameter.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<Parameter> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<Parameter> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface DocCommentOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.DocComment)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.DocCommentTag tag = 1;</code>
     */
    java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag> 
        getTagList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.DocCommentTag tag = 1;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag getTag(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.DocCommentTag tag = 1;</code>
     */
    int getTagCount();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.DocComment}
   */
  public  static final class DocComment extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          DocComment, DocComment.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.DocComment)
      DocCommentOrBuilder {
    private DocComment() {
      tag_ = emptyProtobufList();
    }
    public static final int TAG_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag> tag_;
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.DocCommentTag tag = 1;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag> getTagList() {
      return tag_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.DocCommentTag tag = 1;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTagOrBuilder> 
        getTagOrBuilderList() {
      return tag_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.DocCommentTag tag = 1;</code>
     */
    @java.lang.Override
    public int getTagCount() {
      return tag_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.DocCommentTag tag = 1;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag getTag(int index) {
      return tag_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.DocCommentTag tag = 1;</code>
     */
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTagOrBuilder getTagOrBuilder(
        int index) {
      return tag_.get(index);
    }
    private void ensureTagIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag> tmp = tag_;
      if (!tmp.isModifiable()) {
        tag_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.DocCommentTag tag = 1;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setTag(
        int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag value) {
      value.getClass();  // minimal bytecode null check
      ensureTagIsMutable();
      tag_.set(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.DocCommentTag tag = 1;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addTag(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag value) {
      value.getClass();  // minimal bytecode null check
      ensureTagIsMutable();
      tag_.add(value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.DocCommentTag tag = 1;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addTag(
        int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag value) {
      value.getClass();  // minimal bytecode null check
      ensureTagIsMutable();
      tag_.add(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.DocCommentTag tag = 1;</code>
     */
    private void addAllTag(
        java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag> values) {
      ensureTagIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, tag_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.DocCommentTag tag = 1;</code>
     */
    private void clearTag() {
      tag_ = emptyProtobufList();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.DocCommentTag tag = 1;</code>
     */
    private void removeTag(int index) {
      ensureTagIsMutable();
      tag_.remove(index);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.DocComment}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.DocComment)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentOrBuilder {
      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.DocCommentTag tag = 1;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag> getTagList() {
        return java.util.Collections.unmodifiableList(
            instance.getTagList());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.DocCommentTag tag = 1;</code>
       */
      @java.lang.Override
      public int getTagCount() {
        return instance.getTagCount();
      }/**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.DocCommentTag tag = 1;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag getTag(int index) {
        return instance.getTag(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.DocCommentTag tag = 1;</code>
       */
      public Builder setTag(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag value) {
        copyOnWrite();
        instance.setTag(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.DocCommentTag tag = 1;</code>
       */
      public Builder setTag(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag.Builder builderForValue) {
        copyOnWrite();
        instance.setTag(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.DocCommentTag tag = 1;</code>
       */
      public Builder addTag(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag value) {
        copyOnWrite();
        instance.addTag(value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.DocCommentTag tag = 1;</code>
       */
      public Builder addTag(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag value) {
        copyOnWrite();
        instance.addTag(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.DocCommentTag tag = 1;</code>
       */
      public Builder addTag(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag.Builder builderForValue) {
        copyOnWrite();
        instance.addTag(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.DocCommentTag tag = 1;</code>
       */
      public Builder addTag(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag.Builder builderForValue) {
        copyOnWrite();
        instance.addTag(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.DocCommentTag tag = 1;</code>
       */
      public Builder addAllTag(
          java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag> values) {
        copyOnWrite();
        instance.addAllTag(values);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.DocCommentTag tag = 1;</code>
       */
      public Builder clearTag() {
        copyOnWrite();
        instance.clearTag();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.DocCommentTag tag = 1;</code>
       */
      public Builder removeTag(int index) {
        copyOnWrite();
        instance.removeTag(index);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.DocComment)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "tag_",
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag.class,
            };
            java.lang.String info =
                "\u0004\u0001\u0000\u0000\u0001\u0001\u0001\u0000\u0001\u0001\u0001\u041b";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.DocComment)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment DEFAULT_INSTANCE;
    static {
      DocComment defaultInstance = new DocComment();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        DocComment.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<DocComment> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<DocComment> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface DocCommentTagOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.DocCommentTag)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>int32 name_id = 1 [features = { ... }</code>
     * @return Whether the nameId field is set.
     */
    boolean hasNameId();
    /**
     * <code>int32 name_id = 1 [features = { ... }</code>
     * @return The nameId.
     */
    int getNameId();

    /**
     * <code>int32 value_string_id = 2;</code>
     * @return Whether the valueStringId field is set.
     */
    boolean hasValueStringId();
    /**
     * <code>int32 value_string_id = 2;</code>
     * @return The valueStringId.
     */
    int getValueStringId();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 3;</code>
     * @return Whether the expression field is set.
     */
    boolean hasExpression();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 3;</code>
     * @return The expression.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getExpression();

    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag.ValueCase getValueCase();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.DocCommentTag}
   */
  public  static final class DocCommentTag extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          DocCommentTag, DocCommentTag.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.DocCommentTag)
      DocCommentTagOrBuilder {
    private DocCommentTag() {
    }
    private int bitField0_;
    private int valueCase_ = 0;
    private java.lang.Object value_;
    public enum ValueCase {
      VALUE_STRING_ID(2),
      EXPRESSION(3),
      VALUE_NOT_SET(0);
      private final int value;
      private ValueCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ValueCase valueOf(int value) {
        return forNumber(value);
      }

      public static ValueCase forNumber(int value) {
        switch (value) {
          case 2: return VALUE_STRING_ID;
          case 3: return EXPRESSION;
          case 0: return VALUE_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    @java.lang.Override
    public ValueCase
    getValueCase() {
      return ValueCase.forNumber(
          valueCase_);
    }

    private void clearValue() {
      valueCase_ = 0;
      value_ = null;
    }

    public static final int NAME_ID_FIELD_NUMBER = 1;
    private int nameId_;
    /**
     * <code>int32 name_id = 1 [features = { ... }</code>
     * @return Whether the nameId field is set.
     */
    @java.lang.Override
    public boolean hasNameId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>int32 name_id = 1 [features = { ... }</code>
     * @return The nameId.
     */
    @java.lang.Override
    public int getNameId() {
      return nameId_;
    }
    /**
     * <code>int32 name_id = 1 [features = { ... }</code>
     * @param value The nameId to set.
     */
    private void setNameId(int value) {
      bitField0_ |= 0x00000001;
      nameId_ = value;
    }
    /**
     * <code>int32 name_id = 1 [features = { ... }</code>
     */
    private void clearNameId() {
      bitField0_ = (bitField0_ & ~0x00000001);
      nameId_ = 0;
    }

    public static final int VALUE_STRING_ID_FIELD_NUMBER = 2;
    /**
     * <code>int32 value_string_id = 2;</code>
     * @return Whether the valueStringId field is set.
     */
    @java.lang.Override
    public boolean hasValueStringId() {
      return valueCase_ == 2;
    }
    /**
     * <code>int32 value_string_id = 2;</code>
     * @return The valueStringId.
     */
    @java.lang.Override
    public int getValueStringId() {
      if (valueCase_ == 2) {
        return (java.lang.Integer) value_;
      }
      return 0;
    }
    /**
     * <code>int32 value_string_id = 2;</code>
     * @param value The valueStringId to set.
     */
    private void setValueStringId(int value) {
      valueCase_ = 2;
      value_ = value;
    }
    /**
     * <code>int32 value_string_id = 2;</code>
     */
    private void clearValueStringId() {
      if (valueCase_ == 2) {
        valueCase_ = 0;
        value_ = null;
      }
    }

    public static final int EXPRESSION_FIELD_NUMBER = 3;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 3;</code>
     */
    @java.lang.Override
    public boolean hasExpression() {
      return valueCase_ == 3;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 3;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getExpression() {
      if (valueCase_ == 3) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression) value_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 3;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setExpression(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      value_ = value;
      valueCase_ = 3;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 3;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void mergeExpression(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      if (valueCase_ == 3 &&
          value_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance()) {
        value_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression) value_)
            .mergeFrom(value).buildPartial();
      } else {
        value_ = value;
      }
      valueCase_ = 3;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 3;</code>
     */
    private void clearExpression() {
      if (valueCase_ == 3) {
        valueCase_ = 0;
        value_ = null;
      }
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.DocCommentTag}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.DocCommentTag)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTagOrBuilder {
      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }

      @java.lang.Override
      public ValueCase
          getValueCase() {
        return instance.getValueCase();
      }

      public Builder clearValue() {
        copyOnWrite();
        instance.clearValue();
        return this;
      }


      /**
       * <code>int32 name_id = 1 [features = { ... }</code>
       * @return Whether the nameId field is set.
       */
      @java.lang.Override
      public boolean hasNameId() {
        return instance.hasNameId();
      }
      /**
       * <code>int32 name_id = 1 [features = { ... }</code>
       * @return The nameId.
       */
      @java.lang.Override
      public int getNameId() {
        return instance.getNameId();
      }
      /**
       * <code>int32 name_id = 1 [features = { ... }</code>
       * @param value The nameId to set.
       * @return This builder for chaining.
       */
      public Builder setNameId(int value) {
        copyOnWrite();
        instance.setNameId(value);
        return this;
      }
      /**
       * <code>int32 name_id = 1 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearNameId() {
        copyOnWrite();
        instance.clearNameId();
        return this;
      }

      /**
       * <code>int32 value_string_id = 2;</code>
       * @return Whether the valueStringId field is set.
       */
      @java.lang.Override
      public boolean hasValueStringId() {
        return instance.hasValueStringId();
      }
      /**
       * <code>int32 value_string_id = 2;</code>
       * @return The valueStringId.
       */
      @java.lang.Override
      public int getValueStringId() {
        return instance.getValueStringId();
      }
      /**
       * <code>int32 value_string_id = 2;</code>
       * @param value The valueStringId to set.
       * @return This builder for chaining.
       */
      public Builder setValueStringId(int value) {
        copyOnWrite();
        instance.setValueStringId(value);
        return this;
      }
      /**
       * <code>int32 value_string_id = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearValueStringId() {
        copyOnWrite();
        instance.clearValueStringId();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 3;</code>
       */
      @java.lang.Override
      public boolean hasExpression() {
        return instance.hasExpression();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 3;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getExpression() {
        return instance.getExpression();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 3;</code>
       */
      public Builder setExpression(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        copyOnWrite();
        instance.setExpression(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 3;</code>
       */
      public Builder setExpression(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        copyOnWrite();
        instance.setExpression(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 3;</code>
       */
      public Builder mergeExpression(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        copyOnWrite();
        instance.mergeExpression(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 3;</code>
       */
      public Builder clearExpression() {
        copyOnWrite();
        instance.clearExpression();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.DocCommentTag)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "value_",
              "valueCase_",
              "bitField0_",
              "nameId_",
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.class,
            };
            java.lang.String info =
                "\u0004\u0003\u0001\u0001\u0001\u0003\u0003\u0000\u0000\u0002\u0001\u1504\u0000\u0002" +
                "7\u0000\u0003\u043c\u0000";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.DocCommentTag)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag DEFAULT_INSTANCE;
    static {
      DocCommentTag defaultInstance = new DocCommentTag();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        DocCommentTag.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<DocCommentTag> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<DocCommentTag> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface CommentOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.Comment)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>string text = 1 [features = { ... }</code>
     * @return Whether the text field is set.
     */
    boolean hasText();
    /**
     * <code>string text = 1 [features = { ... }</code>
     * @return The text.
     */
    java.lang.String getText();
    /**
     * <code>string text = 1 [features = { ... }</code>
     * @return The bytes for text.
     */
    org.jetbrains.kotlin.protobuf.ByteString
        getTextBytes();

    /**
     * <code>bool multiline = 2 [features = { ... }</code>
     * @return Whether the multiline field is set.
     */
    boolean hasMultiline();
    /**
     * <code>bool multiline = 2 [features = { ... }</code>
     * @return The multiline.
     */
    boolean getMultiline();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Comment}
   */
  public  static final class Comment extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          Comment, Comment.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.Comment)
      CommentOrBuilder {
    private Comment() {
      text_ = "";
    }
    private int bitField0_;
    public static final int TEXT_FIELD_NUMBER = 1;
    private java.lang.String text_;
    /**
     * <code>string text = 1 [features = { ... }</code>
     * @return Whether the text field is set.
     */
    @java.lang.Override
    public boolean hasText() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>string text = 1 [features = { ... }</code>
     * @return The text.
     */
    @java.lang.Override
    public java.lang.String getText() {
      return text_;
    }
    /**
     * <code>string text = 1 [features = { ... }</code>
     * @return The bytes for text.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.ByteString
        getTextBytes() {
      return org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(text_);
    }
    /**
     * <code>string text = 1 [features = { ... }</code>
     * @param value The text to set.
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setText(
        java.lang.String value) {
      value.getClass();  // minimal bytecode null check
      bitField0_ |= 0x00000001;
      text_ = value;
    }
    /**
     * <code>string text = 1 [features = { ... }</code>
     */
    private void clearText() {
      bitField0_ = (bitField0_ & ~0x00000001);
      text_ = getDefaultInstance().getText();
    }
    /**
     * <code>string text = 1 [features = { ... }</code>
     * @param value The bytes for text to set.
     */
    private void setTextBytes(
        org.jetbrains.kotlin.protobuf.ByteString value) {
      text_ = value.toStringUtf8();
      bitField0_ |= 0x00000001;
    }

    public static final int MULTILINE_FIELD_NUMBER = 2;
    private boolean multiline_;
    /**
     * <code>bool multiline = 2 [features = { ... }</code>
     * @return Whether the multiline field is set.
     */
    @java.lang.Override
    public boolean hasMultiline() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>bool multiline = 2 [features = { ... }</code>
     * @return The multiline.
     */
    @java.lang.Override
    public boolean getMultiline() {
      return multiline_;
    }
    /**
     * <code>bool multiline = 2 [features = { ... }</code>
     * @param value The multiline to set.
     */
    private void setMultiline(boolean value) {
      bitField0_ |= 0x00000002;
      multiline_ = value;
    }
    /**
     * <code>bool multiline = 2 [features = { ... }</code>
     */
    private void clearMultiline() {
      bitField0_ = (bitField0_ & ~0x00000002);
      multiline_ = false;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Comment}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.Comment)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CommentOrBuilder {
      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>string text = 1 [features = { ... }</code>
       * @return Whether the text field is set.
       */
      @java.lang.Override
      public boolean hasText() {
        return instance.hasText();
      }
      /**
       * <code>string text = 1 [features = { ... }</code>
       * @return The text.
       */
      @java.lang.Override
      public java.lang.String getText() {
        return instance.getText();
      }
      /**
       * <code>string text = 1 [features = { ... }</code>
       * @return The bytes for text.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.ByteString
          getTextBytes() {
        return instance.getTextBytes();
      }
      /**
       * <code>string text = 1 [features = { ... }</code>
       * @param value The text to set.
       * @return This builder for chaining.
       */
      public Builder setText(
          java.lang.String value) {
        copyOnWrite();
        instance.setText(value);
        return this;
      }
      /**
       * <code>string text = 1 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearText() {
        copyOnWrite();
        instance.clearText();
        return this;
      }
      /**
       * <code>string text = 1 [features = { ... }</code>
       * @param value The bytes for text to set.
       * @return This builder for chaining.
       */
      public Builder setTextBytes(
          org.jetbrains.kotlin.protobuf.ByteString value) {
        copyOnWrite();
        instance.setTextBytes(value);
        return this;
      }

      /**
       * <code>bool multiline = 2 [features = { ... }</code>
       * @return Whether the multiline field is set.
       */
      @java.lang.Override
      public boolean hasMultiline() {
        return instance.hasMultiline();
      }
      /**
       * <code>bool multiline = 2 [features = { ... }</code>
       * @return The multiline.
       */
      @java.lang.Override
      public boolean getMultiline() {
        return instance.getMultiline();
      }
      /**
       * <code>bool multiline = 2 [features = { ... }</code>
       * @param value The multiline to set.
       * @return This builder for chaining.
       */
      public Builder setMultiline(boolean value) {
        copyOnWrite();
        instance.setMultiline(value);
        return this;
      }
      /**
       * <code>bool multiline = 2 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearMultiline() {
        copyOnWrite();
        instance.clearMultiline();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.Comment)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "text_",
              "multiline_",
            };
            java.lang.String info =
                "\u0004\u0002\u0000\u0001\u0001\u0002\u0002\u0000\u0000\u0002\u0001\u1508\u0000\u0002" +
                "\u1507\u0001";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.Comment)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment DEFAULT_INSTANCE;
    static {
      Comment defaultInstance = new Comment();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        Comment.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<Comment> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<Comment> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface BinaryOperationOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.BinaryOperation)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression left = 1 [features = { ... }</code>
     * @return Whether the left field is set.
     */
    boolean hasLeft();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression left = 1 [features = { ... }</code>
     * @return The left.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getLeft();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression right = 2 [features = { ... }</code>
     * @return Whether the right field is set.
     */
    boolean hasRight();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression right = 2 [features = { ... }</code>
     * @return The right.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getRight();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.BinaryOperation.Type type = 3 [features = { ... }</code>
     * @return Whether the type field is set.
     */
    boolean hasType();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.BinaryOperation.Type type = 3 [features = { ... }</code>
     * @return The type.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation.Type getType();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.BinaryOperation}
   */
  public  static final class BinaryOperation extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          BinaryOperation, BinaryOperation.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.BinaryOperation)
      BinaryOperationOrBuilder {
    private BinaryOperation() {
      type_ = 1;
    }
    /**
     * Protobuf enum {@code org.jetbrains.kotlin.serialization.js.ast.BinaryOperation.Type}
     */
    public enum Type
        implements org.jetbrains.kotlin.protobuf.Internal.EnumLite {
      /**
       * <code>MUL = 1;</code>
       */
      MUL(1),
      /**
       * <code>DIV = 2;</code>
       */
      DIV(2),
      /**
       * <code>MOD = 3;</code>
       */
      MOD(3),
      /**
       * <code>ADD = 4;</code>
       */
      ADD(4),
      /**
       * <code>SUB = 5;</code>
       */
      SUB(5),
      /**
       * <code>SHL = 6;</code>
       */
      SHL(6),
      /**
       * <code>SHR = 7;</code>
       */
      SHR(7),
      /**
       * <code>SHRU = 8;</code>
       */
      SHRU(8),
      /**
       * <code>LT = 9;</code>
       */
      LT(9),
      /**
       * <code>LTE = 10;</code>
       */
      LTE(10),
      /**
       * <code>GT = 11;</code>
       */
      GT(11),
      /**
       * <code>GTE = 12;</code>
       */
      GTE(12),
      /**
       * <code>INSTANCEOF = 13;</code>
       */
      INSTANCEOF(13),
      /**
       * <code>IN = 14;</code>
       */
      IN(14),
      /**
       * <code>EQ = 15;</code>
       */
      EQ(15),
      /**
       * <code>NEQ = 16;</code>
       */
      NEQ(16),
      /**
       * <code>REF_EQ = 17;</code>
       */
      REF_EQ(17),
      /**
       * <code>REF_NEQ = 18;</code>
       */
      REF_NEQ(18),
      /**
       * <code>BIT_AND = 19;</code>
       */
      BIT_AND(19),
      /**
       * <code>BIT_XOR = 20;</code>
       */
      BIT_XOR(20),
      /**
       * <code>BIT_OR = 21;</code>
       */
      BIT_OR(21),
      /**
       * <code>AND = 22;</code>
       */
      AND(22),
      /**
       * <code>OR = 23;</code>
       */
      OR(23),
      /**
       * <code>ASG = 24;</code>
       */
      ASG(24),
      /**
       * <code>ASG_ADD = 25;</code>
       */
      ASG_ADD(25),
      /**
       * <code>ASG_SUB = 26;</code>
       */
      ASG_SUB(26),
      /**
       * <code>ASG_MUL = 27;</code>
       */
      ASG_MUL(27),
      /**
       * <code>ASG_DIV = 28;</code>
       */
      ASG_DIV(28),
      /**
       * <code>ASG_MOD = 29;</code>
       */
      ASG_MOD(29),
      /**
       * <code>ASG_SHL = 30;</code>
       */
      ASG_SHL(30),
      /**
       * <code>ASG_SHR = 31;</code>
       */
      ASG_SHR(31),
      /**
       * <code>ASG_SHRU = 32;</code>
       */
      ASG_SHRU(32),
      /**
       * <code>ASG_BIT_AND = 33;</code>
       */
      ASG_BIT_AND(33),
      /**
       * <code>ASG_BIT_OR = 34;</code>
       */
      ASG_BIT_OR(34),
      /**
       * <code>ASG_BIT_XOR = 35;</code>
       */
      ASG_BIT_XOR(35),
      /**
       * <code>COMMA = 36;</code>
       */
      COMMA(36),
      ;

      /**
       * <code>MUL = 1;</code>
       */
      public static final int MUL_VALUE = 1;
      /**
       * <code>DIV = 2;</code>
       */
      public static final int DIV_VALUE = 2;
      /**
       * <code>MOD = 3;</code>
       */
      public static final int MOD_VALUE = 3;
      /**
       * <code>ADD = 4;</code>
       */
      public static final int ADD_VALUE = 4;
      /**
       * <code>SUB = 5;</code>
       */
      public static final int SUB_VALUE = 5;
      /**
       * <code>SHL = 6;</code>
       */
      public static final int SHL_VALUE = 6;
      /**
       * <code>SHR = 7;</code>
       */
      public static final int SHR_VALUE = 7;
      /**
       * <code>SHRU = 8;</code>
       */
      public static final int SHRU_VALUE = 8;
      /**
       * <code>LT = 9;</code>
       */
      public static final int LT_VALUE = 9;
      /**
       * <code>LTE = 10;</code>
       */
      public static final int LTE_VALUE = 10;
      /**
       * <code>GT = 11;</code>
       */
      public static final int GT_VALUE = 11;
      /**
       * <code>GTE = 12;</code>
       */
      public static final int GTE_VALUE = 12;
      /**
       * <code>INSTANCEOF = 13;</code>
       */
      public static final int INSTANCEOF_VALUE = 13;
      /**
       * <code>IN = 14;</code>
       */
      public static final int IN_VALUE = 14;
      /**
       * <code>EQ = 15;</code>
       */
      public static final int EQ_VALUE = 15;
      /**
       * <code>NEQ = 16;</code>
       */
      public static final int NEQ_VALUE = 16;
      /**
       * <code>REF_EQ = 17;</code>
       */
      public static final int REF_EQ_VALUE = 17;
      /**
       * <code>REF_NEQ = 18;</code>
       */
      public static final int REF_NEQ_VALUE = 18;
      /**
       * <code>BIT_AND = 19;</code>
       */
      public static final int BIT_AND_VALUE = 19;
      /**
       * <code>BIT_XOR = 20;</code>
       */
      public static final int BIT_XOR_VALUE = 20;
      /**
       * <code>BIT_OR = 21;</code>
       */
      public static final int BIT_OR_VALUE = 21;
      /**
       * <code>AND = 22;</code>
       */
      public static final int AND_VALUE = 22;
      /**
       * <code>OR = 23;</code>
       */
      public static final int OR_VALUE = 23;
      /**
       * <code>ASG = 24;</code>
       */
      public static final int ASG_VALUE = 24;
      /**
       * <code>ASG_ADD = 25;</code>
       */
      public static final int ASG_ADD_VALUE = 25;
      /**
       * <code>ASG_SUB = 26;</code>
       */
      public static final int ASG_SUB_VALUE = 26;
      /**
       * <code>ASG_MUL = 27;</code>
       */
      public static final int ASG_MUL_VALUE = 27;
      /**
       * <code>ASG_DIV = 28;</code>
       */
      public static final int ASG_DIV_VALUE = 28;
      /**
       * <code>ASG_MOD = 29;</code>
       */
      public static final int ASG_MOD_VALUE = 29;
      /**
       * <code>ASG_SHL = 30;</code>
       */
      public static final int ASG_SHL_VALUE = 30;
      /**
       * <code>ASG_SHR = 31;</code>
       */
      public static final int ASG_SHR_VALUE = 31;
      /**
       * <code>ASG_SHRU = 32;</code>
       */
      public static final int ASG_SHRU_VALUE = 32;
      /**
       * <code>ASG_BIT_AND = 33;</code>
       */
      public static final int ASG_BIT_AND_VALUE = 33;
      /**
       * <code>ASG_BIT_OR = 34;</code>
       */
      public static final int ASG_BIT_OR_VALUE = 34;
      /**
       * <code>ASG_BIT_XOR = 35;</code>
       */
      public static final int ASG_BIT_XOR_VALUE = 35;
      /**
       * <code>COMMA = 36;</code>
       */
      public static final int COMMA_VALUE = 36;


      @java.lang.Override
      public final int getNumber() {
        return value;
      }

      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static Type valueOf(int value) {
        return forNumber(value);
      }

      public static Type forNumber(int value) {
        switch (value) {
          case 1: return MUL;
          case 2: return DIV;
          case 3: return MOD;
          case 4: return ADD;
          case 5: return SUB;
          case 6: return SHL;
          case 7: return SHR;
          case 8: return SHRU;
          case 9: return LT;
          case 10: return LTE;
          case 11: return GT;
          case 12: return GTE;
          case 13: return INSTANCEOF;
          case 14: return IN;
          case 15: return EQ;
          case 16: return NEQ;
          case 17: return REF_EQ;
          case 18: return REF_NEQ;
          case 19: return BIT_AND;
          case 20: return BIT_XOR;
          case 21: return BIT_OR;
          case 22: return AND;
          case 23: return OR;
          case 24: return ASG;
          case 25: return ASG_ADD;
          case 26: return ASG_SUB;
          case 27: return ASG_MUL;
          case 28: return ASG_DIV;
          case 29: return ASG_MOD;
          case 30: return ASG_SHL;
          case 31: return ASG_SHR;
          case 32: return ASG_SHRU;
          case 33: return ASG_BIT_AND;
          case 34: return ASG_BIT_OR;
          case 35: return ASG_BIT_XOR;
          case 36: return COMMA;
          default: return null;
        }
      }

      public static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Type>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<
          Type> internalValueMap =
            new org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Type>() {
              @java.lang.Override
              public Type findValueByNumber(int number) {
                return Type.forNumber(number);
              }
            };

      public static org.jetbrains.kotlin.protobuf.Internal.EnumVerifier 
          internalGetVerifier() {
        return TypeVerifier.INSTANCE;
      }

      private static final class TypeVerifier implements 
           org.jetbrains.kotlin.protobuf.Internal.EnumVerifier { 
              static final org.jetbrains.kotlin.protobuf.Internal.EnumVerifier           INSTANCE = new TypeVerifier();
              @java.lang.Override
              public boolean isInRange(int number) {
                return Type.forNumber(number) != null;
              }
            };

      private final int value;

      private Type(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:org.jetbrains.kotlin.serialization.js.ast.BinaryOperation.Type)
    }

    private int bitField0_;
    public static final int LEFT_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression left_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression left = 1 [features = { ... }</code>
     */
    @java.lang.Override
    public boolean hasLeft() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression left = 1 [features = { ... }</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getLeft() {
      return left_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : left_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression left = 1 [features = { ... }</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setLeft(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      left_ = value;
      bitField0_ |= 0x00000001;
      }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression left = 1 [features = { ... }</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeLeft(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      if (left_ != null &&
          left_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance()) {
        left_ =
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.newBuilder(left_).mergeFrom(value).buildPartial();
      } else {
        left_ = value;
      }
      bitField0_ |= 0x00000001;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression left = 1 [features = { ... }</code>
     */
    private void clearLeft() {  left_ = null;
      bitField0_ = (bitField0_ & ~0x00000001);
    }

    public static final int RIGHT_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression right_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression right = 2 [features = { ... }</code>
     */
    @java.lang.Override
    public boolean hasRight() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression right = 2 [features = { ... }</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getRight() {
      return right_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : right_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression right = 2 [features = { ... }</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setRight(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      right_ = value;
      bitField0_ |= 0x00000002;
      }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression right = 2 [features = { ... }</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeRight(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      if (right_ != null &&
          right_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance()) {
        right_ =
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.newBuilder(right_).mergeFrom(value).buildPartial();
      } else {
        right_ = value;
      }
      bitField0_ |= 0x00000002;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression right = 2 [features = { ... }</code>
     */
    private void clearRight() {  right_ = null;
      bitField0_ = (bitField0_ & ~0x00000002);
    }

    public static final int TYPE_FIELD_NUMBER = 3;
    private int type_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.BinaryOperation.Type type = 3 [features = { ... }</code>
     * @return Whether the type field is set.
     */
    @java.lang.Override
    public boolean hasType() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.BinaryOperation.Type type = 3 [features = { ... }</code>
     * @return The type.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation.Type getType() {
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation.Type result = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation.Type.forNumber(type_);
      return result == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation.Type.MUL : result;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.BinaryOperation.Type type = 3 [features = { ... }</code>
     * @param value The type to set.
     */
    private void setType(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation.Type value) {
      type_ = value.getNumber();
      bitField0_ |= 0x00000004;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.BinaryOperation.Type type = 3 [features = { ... }</code>
     */
    private void clearType() {
      bitField0_ = (bitField0_ & ~0x00000004);
      type_ = 1;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.BinaryOperation}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.BinaryOperation)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperationOrBuilder {
      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression left = 1 [features = { ... }</code>
       */
      @java.lang.Override
      public boolean hasLeft() {
        return instance.hasLeft();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression left = 1 [features = { ... }</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getLeft() {
        return instance.getLeft();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression left = 1 [features = { ... }</code>
       */
      public Builder setLeft(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        copyOnWrite();
        instance.setLeft(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression left = 1 [features = { ... }</code>
       */
      public Builder setLeft(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        copyOnWrite();
        instance.setLeft(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression left = 1 [features = { ... }</code>
       */
      public Builder mergeLeft(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        copyOnWrite();
        instance.mergeLeft(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression left = 1 [features = { ... }</code>
       */
      public Builder clearLeft() {  copyOnWrite();
        instance.clearLeft();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression right = 2 [features = { ... }</code>
       */
      @java.lang.Override
      public boolean hasRight() {
        return instance.hasRight();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression right = 2 [features = { ... }</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getRight() {
        return instance.getRight();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression right = 2 [features = { ... }</code>
       */
      public Builder setRight(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        copyOnWrite();
        instance.setRight(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression right = 2 [features = { ... }</code>
       */
      public Builder setRight(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        copyOnWrite();
        instance.setRight(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression right = 2 [features = { ... }</code>
       */
      public Builder mergeRight(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        copyOnWrite();
        instance.mergeRight(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression right = 2 [features = { ... }</code>
       */
      public Builder clearRight() {  copyOnWrite();
        instance.clearRight();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.BinaryOperation.Type type = 3 [features = { ... }</code>
       * @return Whether the type field is set.
       */
      @java.lang.Override
      public boolean hasType() {
        return instance.hasType();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.BinaryOperation.Type type = 3 [features = { ... }</code>
       * @return The type.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation.Type getType() {
        return instance.getType();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.BinaryOperation.Type type = 3 [features = { ... }</code>
       * @param value The enum numeric value on the wire for type to set.
       * @return This builder for chaining.
       */
      public Builder setType(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation.Type value) {
        copyOnWrite();
        instance.setType(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.BinaryOperation.Type type = 3 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearType() {
        copyOnWrite();
        instance.clearType();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.BinaryOperation)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "left_",
              "right_",
              "type_",
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation.Type.internalGetVerifier(),
            };
            java.lang.String info =
                "\u0004\u0003\u0000\u0001\u0001\u0003\u0003\u0000\u0000\u0003\u0001\u1509\u0000\u0002" +
                "\u1509\u0001\u0003\u1d0c\u0002";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.BinaryOperation)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation DEFAULT_INSTANCE;
    static {
      BinaryOperation defaultInstance = new BinaryOperation();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        BinaryOperation.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<BinaryOperation> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<BinaryOperation> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface UnaryOperationOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.UnaryOperation)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression operand = 1 [features = { ... }</code>
     * @return Whether the operand field is set.
     */
    boolean hasOperand();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression operand = 1 [features = { ... }</code>
     * @return The operand.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getOperand();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.UnaryOperation.Type type = 2 [features = { ... }</code>
     * @return Whether the type field is set.
     */
    boolean hasType();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.UnaryOperation.Type type = 2 [features = { ... }</code>
     * @return The type.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation.Type getType();

    /**
     * <code>bool postfix = 3 [features = { ... }</code>
     * @return Whether the postfix field is set.
     */
    boolean hasPostfix();
    /**
     * <code>bool postfix = 3 [features = { ... }</code>
     * @return The postfix.
     */
    boolean getPostfix();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.UnaryOperation}
   */
  public  static final class UnaryOperation extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          UnaryOperation, UnaryOperation.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.UnaryOperation)
      UnaryOperationOrBuilder {
    private UnaryOperation() {
      type_ = 1;
    }
    /**
     * Protobuf enum {@code org.jetbrains.kotlin.serialization.js.ast.UnaryOperation.Type}
     */
    public enum Type
        implements org.jetbrains.kotlin.protobuf.Internal.EnumLite {
      /**
       * <code>BIT_NOT = 1;</code>
       */
      BIT_NOT(1),
      /**
       * <code>DEC = 2;</code>
       */
      DEC(2),
      /**
       * <code>DELETE = 3;</code>
       */
      DELETE(3),
      /**
       * <code>INC = 4;</code>
       */
      INC(4),
      /**
       * <code>NEG = 5;</code>
       */
      NEG(5),
      /**
       * <code>POS = 6;</code>
       */
      POS(6),
      /**
       * <code>NOT = 7;</code>
       */
      NOT(7),
      /**
       * <code>TYPEOF = 8;</code>
       */
      TYPEOF(8),
      /**
       * <code>VOID = 9;</code>
       */
      VOID(9),
      ;

      /**
       * <code>BIT_NOT = 1;</code>
       */
      public static final int BIT_NOT_VALUE = 1;
      /**
       * <code>DEC = 2;</code>
       */
      public static final int DEC_VALUE = 2;
      /**
       * <code>DELETE = 3;</code>
       */
      public static final int DELETE_VALUE = 3;
      /**
       * <code>INC = 4;</code>
       */
      public static final int INC_VALUE = 4;
      /**
       * <code>NEG = 5;</code>
       */
      public static final int NEG_VALUE = 5;
      /**
       * <code>POS = 6;</code>
       */
      public static final int POS_VALUE = 6;
      /**
       * <code>NOT = 7;</code>
       */
      public static final int NOT_VALUE = 7;
      /**
       * <code>TYPEOF = 8;</code>
       */
      public static final int TYPEOF_VALUE = 8;
      /**
       * <code>VOID = 9;</code>
       */
      public static final int VOID_VALUE = 9;


      @java.lang.Override
      public final int getNumber() {
        return value;
      }

      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static Type valueOf(int value) {
        return forNumber(value);
      }

      public static Type forNumber(int value) {
        switch (value) {
          case 1: return BIT_NOT;
          case 2: return DEC;
          case 3: return DELETE;
          case 4: return INC;
          case 5: return NEG;
          case 6: return POS;
          case 7: return NOT;
          case 8: return TYPEOF;
          case 9: return VOID;
          default: return null;
        }
      }

      public static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Type>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<
          Type> internalValueMap =
            new org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Type>() {
              @java.lang.Override
              public Type findValueByNumber(int number) {
                return Type.forNumber(number);
              }
            };

      public static org.jetbrains.kotlin.protobuf.Internal.EnumVerifier 
          internalGetVerifier() {
        return TypeVerifier.INSTANCE;
      }

      private static final class TypeVerifier implements 
           org.jetbrains.kotlin.protobuf.Internal.EnumVerifier { 
              static final org.jetbrains.kotlin.protobuf.Internal.EnumVerifier           INSTANCE = new TypeVerifier();
              @java.lang.Override
              public boolean isInRange(int number) {
                return Type.forNumber(number) != null;
              }
            };

      private final int value;

      private Type(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:org.jetbrains.kotlin.serialization.js.ast.UnaryOperation.Type)
    }

    private int bitField0_;
    public static final int OPERAND_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression operand_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression operand = 1 [features = { ... }</code>
     */
    @java.lang.Override
    public boolean hasOperand() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression operand = 1 [features = { ... }</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getOperand() {
      return operand_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : operand_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression operand = 1 [features = { ... }</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setOperand(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      operand_ = value;
      bitField0_ |= 0x00000001;
      }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression operand = 1 [features = { ... }</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeOperand(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      if (operand_ != null &&
          operand_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance()) {
        operand_ =
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.newBuilder(operand_).mergeFrom(value).buildPartial();
      } else {
        operand_ = value;
      }
      bitField0_ |= 0x00000001;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression operand = 1 [features = { ... }</code>
     */
    private void clearOperand() {  operand_ = null;
      bitField0_ = (bitField0_ & ~0x00000001);
    }

    public static final int TYPE_FIELD_NUMBER = 2;
    private int type_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.UnaryOperation.Type type = 2 [features = { ... }</code>
     * @return Whether the type field is set.
     */
    @java.lang.Override
    public boolean hasType() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.UnaryOperation.Type type = 2 [features = { ... }</code>
     * @return The type.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation.Type getType() {
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation.Type result = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation.Type.forNumber(type_);
      return result == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation.Type.BIT_NOT : result;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.UnaryOperation.Type type = 2 [features = { ... }</code>
     * @param value The type to set.
     */
    private void setType(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation.Type value) {
      type_ = value.getNumber();
      bitField0_ |= 0x00000002;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.UnaryOperation.Type type = 2 [features = { ... }</code>
     */
    private void clearType() {
      bitField0_ = (bitField0_ & ~0x00000002);
      type_ = 1;
    }

    public static final int POSTFIX_FIELD_NUMBER = 3;
    private boolean postfix_;
    /**
     * <code>bool postfix = 3 [features = { ... }</code>
     * @return Whether the postfix field is set.
     */
    @java.lang.Override
    public boolean hasPostfix() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>bool postfix = 3 [features = { ... }</code>
     * @return The postfix.
     */
    @java.lang.Override
    public boolean getPostfix() {
      return postfix_;
    }
    /**
     * <code>bool postfix = 3 [features = { ... }</code>
     * @param value The postfix to set.
     */
    private void setPostfix(boolean value) {
      bitField0_ |= 0x00000004;
      postfix_ = value;
    }
    /**
     * <code>bool postfix = 3 [features = { ... }</code>
     */
    private void clearPostfix() {
      bitField0_ = (bitField0_ & ~0x00000004);
      postfix_ = false;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.UnaryOperation}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.UnaryOperation)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperationOrBuilder {
      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression operand = 1 [features = { ... }</code>
       */
      @java.lang.Override
      public boolean hasOperand() {
        return instance.hasOperand();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression operand = 1 [features = { ... }</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getOperand() {
        return instance.getOperand();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression operand = 1 [features = { ... }</code>
       */
      public Builder setOperand(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        copyOnWrite();
        instance.setOperand(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression operand = 1 [features = { ... }</code>
       */
      public Builder setOperand(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        copyOnWrite();
        instance.setOperand(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression operand = 1 [features = { ... }</code>
       */
      public Builder mergeOperand(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        copyOnWrite();
        instance.mergeOperand(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression operand = 1 [features = { ... }</code>
       */
      public Builder clearOperand() {  copyOnWrite();
        instance.clearOperand();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.UnaryOperation.Type type = 2 [features = { ... }</code>
       * @return Whether the type field is set.
       */
      @java.lang.Override
      public boolean hasType() {
        return instance.hasType();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.UnaryOperation.Type type = 2 [features = { ... }</code>
       * @return The type.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation.Type getType() {
        return instance.getType();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.UnaryOperation.Type type = 2 [features = { ... }</code>
       * @param value The enum numeric value on the wire for type to set.
       * @return This builder for chaining.
       */
      public Builder setType(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation.Type value) {
        copyOnWrite();
        instance.setType(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.UnaryOperation.Type type = 2 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearType() {
        copyOnWrite();
        instance.clearType();
        return this;
      }

      /**
       * <code>bool postfix = 3 [features = { ... }</code>
       * @return Whether the postfix field is set.
       */
      @java.lang.Override
      public boolean hasPostfix() {
        return instance.hasPostfix();
      }
      /**
       * <code>bool postfix = 3 [features = { ... }</code>
       * @return The postfix.
       */
      @java.lang.Override
      public boolean getPostfix() {
        return instance.getPostfix();
      }
      /**
       * <code>bool postfix = 3 [features = { ... }</code>
       * @param value The postfix to set.
       * @return This builder for chaining.
       */
      public Builder setPostfix(boolean value) {
        copyOnWrite();
        instance.setPostfix(value);
        return this;
      }
      /**
       * <code>bool postfix = 3 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearPostfix() {
        copyOnWrite();
        instance.clearPostfix();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.UnaryOperation)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "operand_",
              "type_",
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation.Type.internalGetVerifier(),
              "postfix_",
            };
            java.lang.String info =
                "\u0004\u0003\u0000\u0001\u0001\u0003\u0003\u0000\u0000\u0003\u0001\u1509\u0000\u0002" +
                "\u1d0c\u0001\u0003\u1507\u0002";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.UnaryOperation)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation DEFAULT_INSTANCE;
    static {
      UnaryOperation defaultInstance = new UnaryOperation();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        UnaryOperation.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<UnaryOperation> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<UnaryOperation> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ConditionalOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.Conditional)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression test_expression = 1 [features = { ... }</code>
     * @return Whether the testExpression field is set.
     */
    boolean hasTestExpression();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression test_expression = 1 [features = { ... }</code>
     * @return The testExpression.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getTestExpression();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression then_expression = 2 [features = { ... }</code>
     * @return Whether the thenExpression field is set.
     */
    boolean hasThenExpression();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression then_expression = 2 [features = { ... }</code>
     * @return The thenExpression.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getThenExpression();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression else_expression = 3 [features = { ... }</code>
     * @return Whether the elseExpression field is set.
     */
    boolean hasElseExpression();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression else_expression = 3 [features = { ... }</code>
     * @return The elseExpression.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getElseExpression();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Conditional}
   */
  public  static final class Conditional extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          Conditional, Conditional.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.Conditional)
      ConditionalOrBuilder {
    private Conditional() {
    }
    private int bitField0_;
    public static final int TEST_EXPRESSION_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression testExpression_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression test_expression = 1 [features = { ... }</code>
     */
    @java.lang.Override
    public boolean hasTestExpression() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression test_expression = 1 [features = { ... }</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getTestExpression() {
      return testExpression_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : testExpression_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression test_expression = 1 [features = { ... }</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setTestExpression(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      testExpression_ = value;
      bitField0_ |= 0x00000001;
      }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression test_expression = 1 [features = { ... }</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeTestExpression(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      if (testExpression_ != null &&
          testExpression_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance()) {
        testExpression_ =
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.newBuilder(testExpression_).mergeFrom(value).buildPartial();
      } else {
        testExpression_ = value;
      }
      bitField0_ |= 0x00000001;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression test_expression = 1 [features = { ... }</code>
     */
    private void clearTestExpression() {  testExpression_ = null;
      bitField0_ = (bitField0_ & ~0x00000001);
    }

    public static final int THEN_EXPRESSION_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression thenExpression_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression then_expression = 2 [features = { ... }</code>
     */
    @java.lang.Override
    public boolean hasThenExpression() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression then_expression = 2 [features = { ... }</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getThenExpression() {
      return thenExpression_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : thenExpression_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression then_expression = 2 [features = { ... }</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setThenExpression(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      thenExpression_ = value;
      bitField0_ |= 0x00000002;
      }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression then_expression = 2 [features = { ... }</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeThenExpression(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      if (thenExpression_ != null &&
          thenExpression_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance()) {
        thenExpression_ =
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.newBuilder(thenExpression_).mergeFrom(value).buildPartial();
      } else {
        thenExpression_ = value;
      }
      bitField0_ |= 0x00000002;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression then_expression = 2 [features = { ... }</code>
     */
    private void clearThenExpression() {  thenExpression_ = null;
      bitField0_ = (bitField0_ & ~0x00000002);
    }

    public static final int ELSE_EXPRESSION_FIELD_NUMBER = 3;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression elseExpression_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression else_expression = 3 [features = { ... }</code>
     */
    @java.lang.Override
    public boolean hasElseExpression() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression else_expression = 3 [features = { ... }</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getElseExpression() {
      return elseExpression_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : elseExpression_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression else_expression = 3 [features = { ... }</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setElseExpression(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      elseExpression_ = value;
      bitField0_ |= 0x00000004;
      }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression else_expression = 3 [features = { ... }</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeElseExpression(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      if (elseExpression_ != null &&
          elseExpression_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance()) {
        elseExpression_ =
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.newBuilder(elseExpression_).mergeFrom(value).buildPartial();
      } else {
        elseExpression_ = value;
      }
      bitField0_ |= 0x00000004;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression else_expression = 3 [features = { ... }</code>
     */
    private void clearElseExpression() {  elseExpression_ = null;
      bitField0_ = (bitField0_ & ~0x00000004);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Conditional}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.Conditional)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ConditionalOrBuilder {
      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression test_expression = 1 [features = { ... }</code>
       */
      @java.lang.Override
      public boolean hasTestExpression() {
        return instance.hasTestExpression();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression test_expression = 1 [features = { ... }</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getTestExpression() {
        return instance.getTestExpression();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression test_expression = 1 [features = { ... }</code>
       */
      public Builder setTestExpression(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        copyOnWrite();
        instance.setTestExpression(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression test_expression = 1 [features = { ... }</code>
       */
      public Builder setTestExpression(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        copyOnWrite();
        instance.setTestExpression(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression test_expression = 1 [features = { ... }</code>
       */
      public Builder mergeTestExpression(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        copyOnWrite();
        instance.mergeTestExpression(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression test_expression = 1 [features = { ... }</code>
       */
      public Builder clearTestExpression() {  copyOnWrite();
        instance.clearTestExpression();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression then_expression = 2 [features = { ... }</code>
       */
      @java.lang.Override
      public boolean hasThenExpression() {
        return instance.hasThenExpression();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression then_expression = 2 [features = { ... }</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getThenExpression() {
        return instance.getThenExpression();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression then_expression = 2 [features = { ... }</code>
       */
      public Builder setThenExpression(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        copyOnWrite();
        instance.setThenExpression(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression then_expression = 2 [features = { ... }</code>
       */
      public Builder setThenExpression(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        copyOnWrite();
        instance.setThenExpression(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression then_expression = 2 [features = { ... }</code>
       */
      public Builder mergeThenExpression(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        copyOnWrite();
        instance.mergeThenExpression(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression then_expression = 2 [features = { ... }</code>
       */
      public Builder clearThenExpression() {  copyOnWrite();
        instance.clearThenExpression();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression else_expression = 3 [features = { ... }</code>
       */
      @java.lang.Override
      public boolean hasElseExpression() {
        return instance.hasElseExpression();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression else_expression = 3 [features = { ... }</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getElseExpression() {
        return instance.getElseExpression();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression else_expression = 3 [features = { ... }</code>
       */
      public Builder setElseExpression(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        copyOnWrite();
        instance.setElseExpression(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression else_expression = 3 [features = { ... }</code>
       */
      public Builder setElseExpression(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        copyOnWrite();
        instance.setElseExpression(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression else_expression = 3 [features = { ... }</code>
       */
      public Builder mergeElseExpression(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        copyOnWrite();
        instance.mergeElseExpression(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression else_expression = 3 [features = { ... }</code>
       */
      public Builder clearElseExpression() {  copyOnWrite();
        instance.clearElseExpression();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.Conditional)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "testExpression_",
              "thenExpression_",
              "elseExpression_",
            };
            java.lang.String info =
                "\u0004\u0003\u0000\u0001\u0001\u0003\u0003\u0000\u0000\u0003\u0001\u1509\u0000\u0002" +
                "\u1509\u0001\u0003\u1509\u0002";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.Conditional)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional DEFAULT_INSTANCE;
    static {
      Conditional defaultInstance = new Conditional();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        Conditional.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<Conditional> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<Conditional> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ArrayAccessOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.ArrayAccess)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression array = 1 [features = { ... }</code>
     * @return Whether the array field is set.
     */
    boolean hasArray();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression array = 1 [features = { ... }</code>
     * @return The array.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getArray();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression index = 2 [features = { ... }</code>
     * @return Whether the index field is set.
     */
    boolean hasIndex();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression index = 2 [features = { ... }</code>
     * @return The index.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getIndex();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.ArrayAccess}
   */
  public  static final class ArrayAccess extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          ArrayAccess, ArrayAccess.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.ArrayAccess)
      ArrayAccessOrBuilder {
    private ArrayAccess() {
    }
    private int bitField0_;
    public static final int ARRAY_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression array_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression array = 1 [features = { ... }</code>
     */
    @java.lang.Override
    public boolean hasArray() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression array = 1 [features = { ... }</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getArray() {
      return array_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : array_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression array = 1 [features = { ... }</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setArray(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      array_ = value;
      bitField0_ |= 0x00000001;
      }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression array = 1 [features = { ... }</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeArray(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      if (array_ != null &&
          array_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance()) {
        array_ =
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.newBuilder(array_).mergeFrom(value).buildPartial();
      } else {
        array_ = value;
      }
      bitField0_ |= 0x00000001;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression array = 1 [features = { ... }</code>
     */
    private void clearArray() {  array_ = null;
      bitField0_ = (bitField0_ & ~0x00000001);
    }

    public static final int INDEX_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression index_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression index = 2 [features = { ... }</code>
     */
    @java.lang.Override
    public boolean hasIndex() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression index = 2 [features = { ... }</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getIndex() {
      return index_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : index_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression index = 2 [features = { ... }</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setIndex(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      index_ = value;
      bitField0_ |= 0x00000002;
      }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression index = 2 [features = { ... }</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeIndex(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      if (index_ != null &&
          index_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance()) {
        index_ =
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.newBuilder(index_).mergeFrom(value).buildPartial();
      } else {
        index_ = value;
      }
      bitField0_ |= 0x00000002;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression index = 2 [features = { ... }</code>
     */
    private void clearIndex() {  index_ = null;
      bitField0_ = (bitField0_ & ~0x00000002);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.ArrayAccess}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.ArrayAccess)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccessOrBuilder {
      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression array = 1 [features = { ... }</code>
       */
      @java.lang.Override
      public boolean hasArray() {
        return instance.hasArray();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression array = 1 [features = { ... }</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getArray() {
        return instance.getArray();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression array = 1 [features = { ... }</code>
       */
      public Builder setArray(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        copyOnWrite();
        instance.setArray(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression array = 1 [features = { ... }</code>
       */
      public Builder setArray(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        copyOnWrite();
        instance.setArray(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression array = 1 [features = { ... }</code>
       */
      public Builder mergeArray(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        copyOnWrite();
        instance.mergeArray(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression array = 1 [features = { ... }</code>
       */
      public Builder clearArray() {  copyOnWrite();
        instance.clearArray();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression index = 2 [features = { ... }</code>
       */
      @java.lang.Override
      public boolean hasIndex() {
        return instance.hasIndex();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression index = 2 [features = { ... }</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getIndex() {
        return instance.getIndex();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression index = 2 [features = { ... }</code>
       */
      public Builder setIndex(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        copyOnWrite();
        instance.setIndex(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression index = 2 [features = { ... }</code>
       */
      public Builder setIndex(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        copyOnWrite();
        instance.setIndex(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression index = 2 [features = { ... }</code>
       */
      public Builder mergeIndex(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        copyOnWrite();
        instance.mergeIndex(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression index = 2 [features = { ... }</code>
       */
      public Builder clearIndex() {  copyOnWrite();
        instance.clearIndex();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.ArrayAccess)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "array_",
              "index_",
            };
            java.lang.String info =
                "\u0004\u0002\u0000\u0001\u0001\u0002\u0002\u0000\u0000\u0002\u0001\u1509\u0000\u0002" +
                "\u1509\u0001";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.ArrayAccess)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess DEFAULT_INSTANCE;
    static {
      ArrayAccess defaultInstance = new ArrayAccess();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        ArrayAccess.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<ArrayAccess> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<ArrayAccess> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface NameReferenceOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.NameReference)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>int32 name_id = 1 [features = { ... }</code>
     * @return Whether the nameId field is set.
     */
    boolean hasNameId();
    /**
     * <code>int32 name_id = 1 [features = { ... }</code>
     * @return The nameId.
     */
    int getNameId();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 2;</code>
     * @return Whether the qualifier field is set.
     */
    boolean hasQualifier();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 2;</code>
     * @return The qualifier.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getQualifier();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.InlineStrategy inline_strategy = 3 [default = NOT_INLINE];</code>
     * @return Whether the inlineStrategy field is set.
     */
    boolean hasInlineStrategy();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.InlineStrategy inline_strategy = 3 [default = NOT_INLINE];</code>
     * @return The inlineStrategy.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineStrategy getInlineStrategy();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.NameReference}
   */
  public  static final class NameReference extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          NameReference, NameReference.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.NameReference)
      NameReferenceOrBuilder {
    private NameReference() {
      inlineStrategy_ = 2;
    }
    private int bitField0_;
    public static final int NAME_ID_FIELD_NUMBER = 1;
    private int nameId_;
    /**
     * <code>int32 name_id = 1 [features = { ... }</code>
     * @return Whether the nameId field is set.
     */
    @java.lang.Override
    public boolean hasNameId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>int32 name_id = 1 [features = { ... }</code>
     * @return The nameId.
     */
    @java.lang.Override
    public int getNameId() {
      return nameId_;
    }
    /**
     * <code>int32 name_id = 1 [features = { ... }</code>
     * @param value The nameId to set.
     */
    private void setNameId(int value) {
      bitField0_ |= 0x00000001;
      nameId_ = value;
    }
    /**
     * <code>int32 name_id = 1 [features = { ... }</code>
     */
    private void clearNameId() {
      bitField0_ = (bitField0_ & ~0x00000001);
      nameId_ = 0;
    }

    public static final int QUALIFIER_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression qualifier_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 2;</code>
     */
    @java.lang.Override
    public boolean hasQualifier() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 2;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getQualifier() {
      return qualifier_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : qualifier_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 2;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setQualifier(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      qualifier_ = value;
      bitField0_ |= 0x00000002;
      }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 2;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeQualifier(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      if (qualifier_ != null &&
          qualifier_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance()) {
        qualifier_ =
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.newBuilder(qualifier_).mergeFrom(value).buildPartial();
      } else {
        qualifier_ = value;
      }
      bitField0_ |= 0x00000002;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 2;</code>
     */
    private void clearQualifier() {  qualifier_ = null;
      bitField0_ = (bitField0_ & ~0x00000002);
    }

    public static final int INLINE_STRATEGY_FIELD_NUMBER = 3;
    private int inlineStrategy_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.InlineStrategy inline_strategy = 3 [default = NOT_INLINE];</code>
     * @return Whether the inlineStrategy field is set.
     */
    @java.lang.Override
    public boolean hasInlineStrategy() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.InlineStrategy inline_strategy = 3 [default = NOT_INLINE];</code>
     * @return The inlineStrategy.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineStrategy getInlineStrategy() {
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineStrategy result = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineStrategy.forNumber(inlineStrategy_);
      return result == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineStrategy.NOT_INLINE : result;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.InlineStrategy inline_strategy = 3 [default = NOT_INLINE];</code>
     * @param value The inlineStrategy to set.
     */
    private void setInlineStrategy(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineStrategy value) {
      inlineStrategy_ = value.getNumber();
      bitField0_ |= 0x00000004;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.InlineStrategy inline_strategy = 3 [default = NOT_INLINE];</code>
     */
    private void clearInlineStrategy() {
      bitField0_ = (bitField0_ & ~0x00000004);
      inlineStrategy_ = 2;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.NameReference}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.NameReference)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReferenceOrBuilder {
      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>int32 name_id = 1 [features = { ... }</code>
       * @return Whether the nameId field is set.
       */
      @java.lang.Override
      public boolean hasNameId() {
        return instance.hasNameId();
      }
      /**
       * <code>int32 name_id = 1 [features = { ... }</code>
       * @return The nameId.
       */
      @java.lang.Override
      public int getNameId() {
        return instance.getNameId();
      }
      /**
       * <code>int32 name_id = 1 [features = { ... }</code>
       * @param value The nameId to set.
       * @return This builder for chaining.
       */
      public Builder setNameId(int value) {
        copyOnWrite();
        instance.setNameId(value);
        return this;
      }
      /**
       * <code>int32 name_id = 1 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearNameId() {
        copyOnWrite();
        instance.clearNameId();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 2;</code>
       */
      @java.lang.Override
      public boolean hasQualifier() {
        return instance.hasQualifier();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 2;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getQualifier() {
        return instance.getQualifier();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 2;</code>
       */
      public Builder setQualifier(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        copyOnWrite();
        instance.setQualifier(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 2;</code>
       */
      public Builder setQualifier(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        copyOnWrite();
        instance.setQualifier(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 2;</code>
       */
      public Builder mergeQualifier(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        copyOnWrite();
        instance.mergeQualifier(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 2;</code>
       */
      public Builder clearQualifier() {  copyOnWrite();
        instance.clearQualifier();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.InlineStrategy inline_strategy = 3 [default = NOT_INLINE];</code>
       * @return Whether the inlineStrategy field is set.
       */
      @java.lang.Override
      public boolean hasInlineStrategy() {
        return instance.hasInlineStrategy();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.InlineStrategy inline_strategy = 3 [default = NOT_INLINE];</code>
       * @return The inlineStrategy.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineStrategy getInlineStrategy() {
        return instance.getInlineStrategy();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.InlineStrategy inline_strategy = 3 [default = NOT_INLINE];</code>
       * @param value The enum numeric value on the wire for inlineStrategy to set.
       * @return This builder for chaining.
       */
      public Builder setInlineStrategy(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineStrategy value) {
        copyOnWrite();
        instance.setInlineStrategy(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.InlineStrategy inline_strategy = 3 [default = NOT_INLINE];</code>
       * @return This builder for chaining.
       */
      public Builder clearInlineStrategy() {
        copyOnWrite();
        instance.clearInlineStrategy();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.NameReference)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "nameId_",
              "qualifier_",
              "inlineStrategy_",
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineStrategy.internalGetVerifier(),
            };
            java.lang.String info =
                "\u0004\u0003\u0000\u0001\u0001\u0003\u0003\u0000\u0000\u0002\u0001\u1504\u0000\u0002" +
                "\u1409\u0001\u0003\u180c\u0002";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.NameReference)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference DEFAULT_INSTANCE;
    static {
      NameReference defaultInstance = new NameReference();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        NameReference.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<NameReference> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<NameReference> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface PropertyReferenceOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.PropertyReference)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>int32 string_id = 1 [features = { ... }</code>
     * @return Whether the stringId field is set.
     */
    boolean hasStringId();
    /**
     * <code>int32 string_id = 1 [features = { ... }</code>
     * @return The stringId.
     */
    int getStringId();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 2;</code>
     * @return Whether the qualifier field is set.
     */
    boolean hasQualifier();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 2;</code>
     * @return The qualifier.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getQualifier();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.InlineStrategy inline_strategy = 3 [default = NOT_INLINE];</code>
     * @return Whether the inlineStrategy field is set.
     */
    boolean hasInlineStrategy();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.InlineStrategy inline_strategy = 3 [default = NOT_INLINE];</code>
     * @return The inlineStrategy.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineStrategy getInlineStrategy();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.PropertyReference}
   */
  public  static final class PropertyReference extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          PropertyReference, PropertyReference.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.PropertyReference)
      PropertyReferenceOrBuilder {
    private PropertyReference() {
      inlineStrategy_ = 2;
    }
    private int bitField0_;
    public static final int STRING_ID_FIELD_NUMBER = 1;
    private int stringId_;
    /**
     * <code>int32 string_id = 1 [features = { ... }</code>
     * @return Whether the stringId field is set.
     */
    @java.lang.Override
    public boolean hasStringId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>int32 string_id = 1 [features = { ... }</code>
     * @return The stringId.
     */
    @java.lang.Override
    public int getStringId() {
      return stringId_;
    }
    /**
     * <code>int32 string_id = 1 [features = { ... }</code>
     * @param value The stringId to set.
     */
    private void setStringId(int value) {
      bitField0_ |= 0x00000001;
      stringId_ = value;
    }
    /**
     * <code>int32 string_id = 1 [features = { ... }</code>
     */
    private void clearStringId() {
      bitField0_ = (bitField0_ & ~0x00000001);
      stringId_ = 0;
    }

    public static final int QUALIFIER_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression qualifier_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 2;</code>
     */
    @java.lang.Override
    public boolean hasQualifier() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 2;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getQualifier() {
      return qualifier_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : qualifier_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 2;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setQualifier(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      qualifier_ = value;
      bitField0_ |= 0x00000002;
      }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 2;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeQualifier(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      if (qualifier_ != null &&
          qualifier_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance()) {
        qualifier_ =
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.newBuilder(qualifier_).mergeFrom(value).buildPartial();
      } else {
        qualifier_ = value;
      }
      bitField0_ |= 0x00000002;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 2;</code>
     */
    private void clearQualifier() {  qualifier_ = null;
      bitField0_ = (bitField0_ & ~0x00000002);
    }

    public static final int INLINE_STRATEGY_FIELD_NUMBER = 3;
    private int inlineStrategy_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.InlineStrategy inline_strategy = 3 [default = NOT_INLINE];</code>
     * @return Whether the inlineStrategy field is set.
     */
    @java.lang.Override
    public boolean hasInlineStrategy() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.InlineStrategy inline_strategy = 3 [default = NOT_INLINE];</code>
     * @return The inlineStrategy.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineStrategy getInlineStrategy() {
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineStrategy result = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineStrategy.forNumber(inlineStrategy_);
      return result == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineStrategy.NOT_INLINE : result;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.InlineStrategy inline_strategy = 3 [default = NOT_INLINE];</code>
     * @param value The inlineStrategy to set.
     */
    private void setInlineStrategy(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineStrategy value) {
      inlineStrategy_ = value.getNumber();
      bitField0_ |= 0x00000004;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.InlineStrategy inline_strategy = 3 [default = NOT_INLINE];</code>
     */
    private void clearInlineStrategy() {
      bitField0_ = (bitField0_ & ~0x00000004);
      inlineStrategy_ = 2;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.PropertyReference}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.PropertyReference)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReferenceOrBuilder {
      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>int32 string_id = 1 [features = { ... }</code>
       * @return Whether the stringId field is set.
       */
      @java.lang.Override
      public boolean hasStringId() {
        return instance.hasStringId();
      }
      /**
       * <code>int32 string_id = 1 [features = { ... }</code>
       * @return The stringId.
       */
      @java.lang.Override
      public int getStringId() {
        return instance.getStringId();
      }
      /**
       * <code>int32 string_id = 1 [features = { ... }</code>
       * @param value The stringId to set.
       * @return This builder for chaining.
       */
      public Builder setStringId(int value) {
        copyOnWrite();
        instance.setStringId(value);
        return this;
      }
      /**
       * <code>int32 string_id = 1 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearStringId() {
        copyOnWrite();
        instance.clearStringId();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 2;</code>
       */
      @java.lang.Override
      public boolean hasQualifier() {
        return instance.hasQualifier();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 2;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getQualifier() {
        return instance.getQualifier();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 2;</code>
       */
      public Builder setQualifier(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        copyOnWrite();
        instance.setQualifier(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 2;</code>
       */
      public Builder setQualifier(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        copyOnWrite();
        instance.setQualifier(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 2;</code>
       */
      public Builder mergeQualifier(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        copyOnWrite();
        instance.mergeQualifier(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 2;</code>
       */
      public Builder clearQualifier() {  copyOnWrite();
        instance.clearQualifier();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.InlineStrategy inline_strategy = 3 [default = NOT_INLINE];</code>
       * @return Whether the inlineStrategy field is set.
       */
      @java.lang.Override
      public boolean hasInlineStrategy() {
        return instance.hasInlineStrategy();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.InlineStrategy inline_strategy = 3 [default = NOT_INLINE];</code>
       * @return The inlineStrategy.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineStrategy getInlineStrategy() {
        return instance.getInlineStrategy();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.InlineStrategy inline_strategy = 3 [default = NOT_INLINE];</code>
       * @param value The enum numeric value on the wire for inlineStrategy to set.
       * @return This builder for chaining.
       */
      public Builder setInlineStrategy(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineStrategy value) {
        copyOnWrite();
        instance.setInlineStrategy(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.InlineStrategy inline_strategy = 3 [default = NOT_INLINE];</code>
       * @return This builder for chaining.
       */
      public Builder clearInlineStrategy() {
        copyOnWrite();
        instance.clearInlineStrategy();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.PropertyReference)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "stringId_",
              "qualifier_",
              "inlineStrategy_",
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineStrategy.internalGetVerifier(),
            };
            java.lang.String info =
                "\u0004\u0003\u0000\u0001\u0001\u0003\u0003\u0000\u0000\u0002\u0001\u1504\u0000\u0002" +
                "\u1409\u0001\u0003\u180c\u0002";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.PropertyReference)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference DEFAULT_INSTANCE;
    static {
      PropertyReference defaultInstance = new PropertyReference();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        PropertyReference.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<PropertyReference> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<PropertyReference> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface InvocationOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.Invocation)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 1 [features = { ... }</code>
     * @return Whether the qualifier field is set.
     */
    boolean hasQualifier();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 1 [features = { ... }</code>
     * @return The qualifier.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getQualifier();

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
     */
    java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression> 
        getArgumentList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getArgument(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
     */
    int getArgumentCount();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.InlineStrategy inline_strategy = 3 [default = NOT_INLINE];</code>
     * @return Whether the inlineStrategy field is set.
     */
    boolean hasInlineStrategy();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.InlineStrategy inline_strategy = 3 [default = NOT_INLINE];</code>
     * @return The inlineStrategy.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineStrategy getInlineStrategy();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Invocation}
   */
  public  static final class Invocation extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          Invocation, Invocation.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.Invocation)
      InvocationOrBuilder {
    private Invocation() {
      argument_ = emptyProtobufList();
      inlineStrategy_ = 2;
    }
    private int bitField0_;
    public static final int QUALIFIER_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression qualifier_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 1 [features = { ... }</code>
     */
    @java.lang.Override
    public boolean hasQualifier() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 1 [features = { ... }</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getQualifier() {
      return qualifier_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : qualifier_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 1 [features = { ... }</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setQualifier(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      qualifier_ = value;
      bitField0_ |= 0x00000001;
      }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 1 [features = { ... }</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeQualifier(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      if (qualifier_ != null &&
          qualifier_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance()) {
        qualifier_ =
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.newBuilder(qualifier_).mergeFrom(value).buildPartial();
      } else {
        qualifier_ = value;
      }
      bitField0_ |= 0x00000001;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 1 [features = { ... }</code>
     */
    private void clearQualifier() {  qualifier_ = null;
      bitField0_ = (bitField0_ & ~0x00000001);
    }

    public static final int ARGUMENT_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression> argument_;
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression> getArgumentList() {
      return argument_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> 
        getArgumentOrBuilderList() {
      return argument_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
     */
    @java.lang.Override
    public int getArgumentCount() {
      return argument_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getArgument(int index) {
      return argument_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
     */
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getArgumentOrBuilder(
        int index) {
      return argument_.get(index);
    }
    private void ensureArgumentIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression> tmp = argument_;
      if (!tmp.isModifiable()) {
        argument_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setArgument(
        int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      ensureArgumentIsMutable();
      argument_.set(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addArgument(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      ensureArgumentIsMutable();
      argument_.add(value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addArgument(
        int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      ensureArgumentIsMutable();
      argument_.add(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
     */
    private void addAllArgument(
        java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression> values) {
      ensureArgumentIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, argument_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
     */
    private void clearArgument() {
      argument_ = emptyProtobufList();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
     */
    private void removeArgument(int index) {
      ensureArgumentIsMutable();
      argument_.remove(index);
    }

    public static final int INLINE_STRATEGY_FIELD_NUMBER = 3;
    private int inlineStrategy_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.InlineStrategy inline_strategy = 3 [default = NOT_INLINE];</code>
     * @return Whether the inlineStrategy field is set.
     */
    @java.lang.Override
    public boolean hasInlineStrategy() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.InlineStrategy inline_strategy = 3 [default = NOT_INLINE];</code>
     * @return The inlineStrategy.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineStrategy getInlineStrategy() {
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineStrategy result = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineStrategy.forNumber(inlineStrategy_);
      return result == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineStrategy.NOT_INLINE : result;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.InlineStrategy inline_strategy = 3 [default = NOT_INLINE];</code>
     * @param value The inlineStrategy to set.
     */
    private void setInlineStrategy(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineStrategy value) {
      inlineStrategy_ = value.getNumber();
      bitField0_ |= 0x00000002;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.InlineStrategy inline_strategy = 3 [default = NOT_INLINE];</code>
     */
    private void clearInlineStrategy() {
      bitField0_ = (bitField0_ & ~0x00000002);
      inlineStrategy_ = 2;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Invocation}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.Invocation)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InvocationOrBuilder {
      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 1 [features = { ... }</code>
       */
      @java.lang.Override
      public boolean hasQualifier() {
        return instance.hasQualifier();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 1 [features = { ... }</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getQualifier() {
        return instance.getQualifier();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 1 [features = { ... }</code>
       */
      public Builder setQualifier(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        copyOnWrite();
        instance.setQualifier(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 1 [features = { ... }</code>
       */
      public Builder setQualifier(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        copyOnWrite();
        instance.setQualifier(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 1 [features = { ... }</code>
       */
      public Builder mergeQualifier(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        copyOnWrite();
        instance.mergeQualifier(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 1 [features = { ... }</code>
       */
      public Builder clearQualifier() {  copyOnWrite();
        instance.clearQualifier();
        return this;
      }

      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression> getArgumentList() {
        return java.util.Collections.unmodifiableList(
            instance.getArgumentList());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
       */
      @java.lang.Override
      public int getArgumentCount() {
        return instance.getArgumentCount();
      }/**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getArgument(int index) {
        return instance.getArgument(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
       */
      public Builder setArgument(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        copyOnWrite();
        instance.setArgument(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
       */
      public Builder setArgument(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        copyOnWrite();
        instance.setArgument(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
       */
      public Builder addArgument(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        copyOnWrite();
        instance.addArgument(value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
       */
      public Builder addArgument(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        copyOnWrite();
        instance.addArgument(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
       */
      public Builder addArgument(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        copyOnWrite();
        instance.addArgument(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
       */
      public Builder addArgument(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        copyOnWrite();
        instance.addArgument(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
       */
      public Builder addAllArgument(
          java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression> values) {
        copyOnWrite();
        instance.addAllArgument(values);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
       */
      public Builder clearArgument() {
        copyOnWrite();
        instance.clearArgument();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
       */
      public Builder removeArgument(int index) {
        copyOnWrite();
        instance.removeArgument(index);
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.InlineStrategy inline_strategy = 3 [default = NOT_INLINE];</code>
       * @return Whether the inlineStrategy field is set.
       */
      @java.lang.Override
      public boolean hasInlineStrategy() {
        return instance.hasInlineStrategy();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.InlineStrategy inline_strategy = 3 [default = NOT_INLINE];</code>
       * @return The inlineStrategy.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineStrategy getInlineStrategy() {
        return instance.getInlineStrategy();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.InlineStrategy inline_strategy = 3 [default = NOT_INLINE];</code>
       * @param value The enum numeric value on the wire for inlineStrategy to set.
       * @return This builder for chaining.
       */
      public Builder setInlineStrategy(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineStrategy value) {
        copyOnWrite();
        instance.setInlineStrategy(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.InlineStrategy inline_strategy = 3 [default = NOT_INLINE];</code>
       * @return This builder for chaining.
       */
      public Builder clearInlineStrategy() {
        copyOnWrite();
        instance.clearInlineStrategy();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.Invocation)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "qualifier_",
              "argument_",
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.class,
              "inlineStrategy_",
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineStrategy.internalGetVerifier(),
            };
            java.lang.String info =
                "\u0004\u0003\u0000\u0001\u0001\u0003\u0003\u0000\u0001\u0002\u0001\u1509\u0000\u0002" +
                "\u041b\u0003\u180c\u0001";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.Invocation)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation DEFAULT_INSTANCE;
    static {
      Invocation defaultInstance = new Invocation();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        Invocation.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<Invocation> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<Invocation> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface InstantiationOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.Instantiation)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 1 [features = { ... }</code>
     * @return Whether the qualifier field is set.
     */
    boolean hasQualifier();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 1 [features = { ... }</code>
     * @return The qualifier.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getQualifier();

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
     */
    java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression> 
        getArgumentList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getArgument(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
     */
    int getArgumentCount();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Instantiation}
   */
  public  static final class Instantiation extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          Instantiation, Instantiation.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.Instantiation)
      InstantiationOrBuilder {
    private Instantiation() {
      argument_ = emptyProtobufList();
    }
    private int bitField0_;
    public static final int QUALIFIER_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression qualifier_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 1 [features = { ... }</code>
     */
    @java.lang.Override
    public boolean hasQualifier() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 1 [features = { ... }</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getQualifier() {
      return qualifier_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : qualifier_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 1 [features = { ... }</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setQualifier(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      qualifier_ = value;
      bitField0_ |= 0x00000001;
      }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 1 [features = { ... }</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeQualifier(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      if (qualifier_ != null &&
          qualifier_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance()) {
        qualifier_ =
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.newBuilder(qualifier_).mergeFrom(value).buildPartial();
      } else {
        qualifier_ = value;
      }
      bitField0_ |= 0x00000001;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 1 [features = { ... }</code>
     */
    private void clearQualifier() {  qualifier_ = null;
      bitField0_ = (bitField0_ & ~0x00000001);
    }

    public static final int ARGUMENT_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression> argument_;
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression> getArgumentList() {
      return argument_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> 
        getArgumentOrBuilderList() {
      return argument_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
     */
    @java.lang.Override
    public int getArgumentCount() {
      return argument_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getArgument(int index) {
      return argument_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
     */
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getArgumentOrBuilder(
        int index) {
      return argument_.get(index);
    }
    private void ensureArgumentIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression> tmp = argument_;
      if (!tmp.isModifiable()) {
        argument_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setArgument(
        int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      ensureArgumentIsMutable();
      argument_.set(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addArgument(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      ensureArgumentIsMutable();
      argument_.add(value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addArgument(
        int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      ensureArgumentIsMutable();
      argument_.add(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
     */
    private void addAllArgument(
        java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression> values) {
      ensureArgumentIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, argument_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
     */
    private void clearArgument() {
      argument_ = emptyProtobufList();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
     */
    private void removeArgument(int index) {
      ensureArgumentIsMutable();
      argument_.remove(index);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Instantiation}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.Instantiation)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InstantiationOrBuilder {
      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 1 [features = { ... }</code>
       */
      @java.lang.Override
      public boolean hasQualifier() {
        return instance.hasQualifier();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 1 [features = { ... }</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getQualifier() {
        return instance.getQualifier();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 1 [features = { ... }</code>
       */
      public Builder setQualifier(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        copyOnWrite();
        instance.setQualifier(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 1 [features = { ... }</code>
       */
      public Builder setQualifier(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        copyOnWrite();
        instance.setQualifier(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 1 [features = { ... }</code>
       */
      public Builder mergeQualifier(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        copyOnWrite();
        instance.mergeQualifier(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 1 [features = { ... }</code>
       */
      public Builder clearQualifier() {  copyOnWrite();
        instance.clearQualifier();
        return this;
      }

      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression> getArgumentList() {
        return java.util.Collections.unmodifiableList(
            instance.getArgumentList());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
       */
      @java.lang.Override
      public int getArgumentCount() {
        return instance.getArgumentCount();
      }/**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getArgument(int index) {
        return instance.getArgument(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
       */
      public Builder setArgument(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        copyOnWrite();
        instance.setArgument(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
       */
      public Builder setArgument(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        copyOnWrite();
        instance.setArgument(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
       */
      public Builder addArgument(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        copyOnWrite();
        instance.addArgument(value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
       */
      public Builder addArgument(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        copyOnWrite();
        instance.addArgument(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
       */
      public Builder addArgument(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        copyOnWrite();
        instance.addArgument(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
       */
      public Builder addArgument(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        copyOnWrite();
        instance.addArgument(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
       */
      public Builder addAllArgument(
          java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression> values) {
        copyOnWrite();
        instance.addAllArgument(values);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
       */
      public Builder clearArgument() {
        copyOnWrite();
        instance.clearArgument();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
       */
      public Builder removeArgument(int index) {
        copyOnWrite();
        instance.removeArgument(index);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.Instantiation)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "qualifier_",
              "argument_",
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.class,
            };
            java.lang.String info =
                "\u0004\u0002\u0000\u0001\u0001\u0002\u0002\u0000\u0001\u0002\u0001\u1509\u0000\u0002" +
                "\u041b";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.Instantiation)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation DEFAULT_INSTANCE;
    static {
      Instantiation defaultInstance = new Instantiation();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        Instantiation.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<Instantiation> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<Instantiation> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface StatementOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.Statement)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>int32 fileId = 1;</code>
     * @return Whether the fileId field is set.
     */
    boolean hasFileId();
    /**
     * <code>int32 fileId = 1;</code>
     * @return The fileId.
     */
    int getFileId();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 2;</code>
     * @return Whether the location field is set.
     */
    boolean hasLocation();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 2;</code>
     * @return The location.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location getLocation();

    /**
     * <code>bool synthetic = 3 [default = false];</code>
     * @return Whether the synthetic field is set.
     */
    boolean hasSynthetic();
    /**
     * <code>bool synthetic = 3 [default = false];</code>
     * @return The synthetic.
     */
    boolean getSynthetic();

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 4;</code>
     */
    java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment> 
        getBeforeCommentsList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 4;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment getBeforeComments(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 4;</code>
     */
    int getBeforeCommentsCount();

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 5;</code>
     */
    java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment> 
        getAfterCommentsList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 5;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment getAfterComments(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 5;</code>
     */
    int getAfterCommentsCount();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Return return_statement = 21;</code>
     * @return Whether the returnStatement field is set.
     */
    boolean hasReturnStatement();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Return return_statement = 21;</code>
     * @return The returnStatement.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return getReturnStatement();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Throw throw_statement = 22;</code>
     * @return Whether the throwStatement field is set.
     */
    boolean hasThrowStatement();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Throw throw_statement = 22;</code>
     * @return The throwStatement.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw getThrowStatement();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Break break_statement = 23;</code>
     * @return Whether the breakStatement field is set.
     */
    boolean hasBreakStatement();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Break break_statement = 23;</code>
     * @return The breakStatement.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break getBreakStatement();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Continue continue_statement = 24;</code>
     * @return Whether the continueStatement field is set.
     */
    boolean hasContinueStatement();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Continue continue_statement = 24;</code>
     * @return The continueStatement.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue getContinueStatement();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Debugger debugger = 25;</code>
     * @return Whether the debugger field is set.
     */
    boolean hasDebugger();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Debugger debugger = 25;</code>
     * @return The debugger.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger getDebugger();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.ExpressionStatement expression = 26;</code>
     * @return Whether the expression field is set.
     */
    boolean hasExpression();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.ExpressionStatement expression = 26;</code>
     * @return The expression.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement getExpression();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Vars vars = 27;</code>
     * @return Whether the vars field is set.
     */
    boolean hasVars();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Vars vars = 27;</code>
     * @return The vars.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars getVars();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Block block = 28;</code>
     * @return Whether the block field is set.
     */
    boolean hasBlock();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Block block = 28;</code>
     * @return The block.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block getBlock();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock composite_block = 29;</code>
     * @return Whether the compositeBlock field is set.
     */
    boolean hasCompositeBlock();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock composite_block = 29;</code>
     * @return The compositeBlock.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock getCompositeBlock();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Label label = 30;</code>
     * @return Whether the label field is set.
     */
    boolean hasLabel();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Label label = 30;</code>
     * @return The label.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label getLabel();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.If if_statement = 31;</code>
     * @return Whether the ifStatement field is set.
     */
    boolean hasIfStatement();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.If if_statement = 31;</code>
     * @return The ifStatement.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If getIfStatement();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Switch switch_statement = 32;</code>
     * @return Whether the switchStatement field is set.
     */
    boolean hasSwitchStatement();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Switch switch_statement = 32;</code>
     * @return The switchStatement.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch getSwitchStatement();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.While while_statement = 33;</code>
     * @return Whether the whileStatement field is set.
     */
    boolean hasWhileStatement();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.While while_statement = 33;</code>
     * @return The whileStatement.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While getWhileStatement();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.DoWhile do_while_statement = 34;</code>
     * @return Whether the doWhileStatement field is set.
     */
    boolean hasDoWhileStatement();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.DoWhile do_while_statement = 34;</code>
     * @return The doWhileStatement.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile getDoWhileStatement();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.For for_statement = 35;</code>
     * @return Whether the forStatement field is set.
     */
    boolean hasForStatement();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.For for_statement = 35;</code>
     * @return The forStatement.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For getForStatement();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.ForIn for_in_statement = 36;</code>
     * @return Whether the forInStatement field is set.
     */
    boolean hasForInStatement();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.ForIn for_in_statement = 36;</code>
     * @return The forInStatement.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn getForInStatement();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Try try_statement = 37;</code>
     * @return Whether the tryStatement field is set.
     */
    boolean hasTryStatement();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Try try_statement = 37;</code>
     * @return The tryStatement.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try getTryStatement();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Empty empty = 38;</code>
     * @return Whether the empty field is set.
     */
    boolean hasEmpty();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Empty empty = 38;</code>
     * @return The empty.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty getEmpty();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.SingleLineComment single_line_comment = 39;</code>
     * @return Whether the singleLineComment field is set.
     */
    boolean hasSingleLineComment();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.SingleLineComment single_line_comment = 39;</code>
     * @return The singleLineComment.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment getSingleLineComment();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.MultiLineComment multi_line_comment = 40;</code>
     * @return Whether the multiLineComment field is set.
     */
    boolean hasMultiLineComment();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.MultiLineComment multi_line_comment = 40;</code>
     * @return The multiLineComment.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment getMultiLineComment();

    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.StatementCase getStatementCase();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Statement}
   */
  public  static final class Statement extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          Statement, Statement.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.Statement)
      StatementOrBuilder {
    private Statement() {
      beforeComments_ = emptyProtobufList();
      afterComments_ = emptyProtobufList();
    }
    private int bitField0_;
    private int statementCase_ = 0;
    private java.lang.Object statement_;
    public enum StatementCase {
      RETURN_STATEMENT(21),
      THROW_STATEMENT(22),
      BREAK_STATEMENT(23),
      CONTINUE_STATEMENT(24),
      DEBUGGER(25),
      EXPRESSION(26),
      VARS(27),
      BLOCK(28),
      COMPOSITE_BLOCK(29),
      LABEL(30),
      IF_STATEMENT(31),
      SWITCH_STATEMENT(32),
      WHILE_STATEMENT(33),
      DO_WHILE_STATEMENT(34),
      FOR_STATEMENT(35),
      FOR_IN_STATEMENT(36),
      TRY_STATEMENT(37),
      EMPTY(38),
      SINGLE_LINE_COMMENT(39),
      MULTI_LINE_COMMENT(40),
      STATEMENT_NOT_SET(0);
      private final int value;
      private StatementCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static StatementCase valueOf(int value) {
        return forNumber(value);
      }

      public static StatementCase forNumber(int value) {
        switch (value) {
          case 21: return RETURN_STATEMENT;
          case 22: return THROW_STATEMENT;
          case 23: return BREAK_STATEMENT;
          case 24: return CONTINUE_STATEMENT;
          case 25: return DEBUGGER;
          case 26: return EXPRESSION;
          case 27: return VARS;
          case 28: return BLOCK;
          case 29: return COMPOSITE_BLOCK;
          case 30: return LABEL;
          case 31: return IF_STATEMENT;
          case 32: return SWITCH_STATEMENT;
          case 33: return WHILE_STATEMENT;
          case 34: return DO_WHILE_STATEMENT;
          case 35: return FOR_STATEMENT;
          case 36: return FOR_IN_STATEMENT;
          case 37: return TRY_STATEMENT;
          case 38: return EMPTY;
          case 39: return SINGLE_LINE_COMMENT;
          case 40: return MULTI_LINE_COMMENT;
          case 0: return STATEMENT_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    @java.lang.Override
    public StatementCase
    getStatementCase() {
      return StatementCase.forNumber(
          statementCase_);
    }

    private void clearStatement() {
      statementCase_ = 0;
      statement_ = null;
    }

    public static final int FILEID_FIELD_NUMBER = 1;
    private int fileId_;
    /**
     * <code>int32 fileId = 1;</code>
     * @return Whether the fileId field is set.
     */
    @java.lang.Override
    public boolean hasFileId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>int32 fileId = 1;</code>
     * @return The fileId.
     */
    @java.lang.Override
    public int getFileId() {
      return fileId_;
    }
    /**
     * <code>int32 fileId = 1;</code>
     * @param value The fileId to set.
     */
    private void setFileId(int value) {
      bitField0_ |= 0x00000001;
      fileId_ = value;
    }
    /**
     * <code>int32 fileId = 1;</code>
     */
    private void clearFileId() {
      bitField0_ = (bitField0_ & ~0x00000001);
      fileId_ = 0;
    }

    public static final int LOCATION_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location location_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 2;</code>
     */
    @java.lang.Override
    public boolean hasLocation() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 2;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location getLocation() {
      return location_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location.getDefaultInstance() : location_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 2;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setLocation(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location value) {
      value.getClass();  // minimal bytecode null check
      location_ = value;
      bitField0_ |= 0x00000002;
      }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 2;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeLocation(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location value) {
      value.getClass();  // minimal bytecode null check
      if (location_ != null &&
          location_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location.getDefaultInstance()) {
        location_ =
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location.newBuilder(location_).mergeFrom(value).buildPartial();
      } else {
        location_ = value;
      }
      bitField0_ |= 0x00000002;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 2;</code>
     */
    private void clearLocation() {  location_ = null;
      bitField0_ = (bitField0_ & ~0x00000002);
    }

    public static final int SYNTHETIC_FIELD_NUMBER = 3;
    private boolean synthetic_;
    /**
     * <code>bool synthetic = 3 [default = false];</code>
     * @return Whether the synthetic field is set.
     */
    @java.lang.Override
    public boolean hasSynthetic() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>bool synthetic = 3 [default = false];</code>
     * @return The synthetic.
     */
    @java.lang.Override
    public boolean getSynthetic() {
      return synthetic_;
    }
    /**
     * <code>bool synthetic = 3 [default = false];</code>
     * @param value The synthetic to set.
     */
    private void setSynthetic(boolean value) {
      bitField0_ |= 0x00000004;
      synthetic_ = value;
    }
    /**
     * <code>bool synthetic = 3 [default = false];</code>
     */
    private void clearSynthetic() {
      bitField0_ = (bitField0_ & ~0x00000004);
      synthetic_ = false;
    }

    public static final int BEFORE_COMMENTS_FIELD_NUMBER = 4;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment> beforeComments_;
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 4;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment> getBeforeCommentsList() {
      return beforeComments_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 4;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CommentOrBuilder> 
        getBeforeCommentsOrBuilderList() {
      return beforeComments_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 4;</code>
     */
    @java.lang.Override
    public int getBeforeCommentsCount() {
      return beforeComments_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 4;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment getBeforeComments(int index) {
      return beforeComments_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 4;</code>
     */
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CommentOrBuilder getBeforeCommentsOrBuilder(
        int index) {
      return beforeComments_.get(index);
    }
    private void ensureBeforeCommentsIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment> tmp = beforeComments_;
      if (!tmp.isModifiable()) {
        beforeComments_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 4;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setBeforeComments(
        int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment value) {
      value.getClass();  // minimal bytecode null check
      ensureBeforeCommentsIsMutable();
      beforeComments_.set(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 4;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addBeforeComments(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment value) {
      value.getClass();  // minimal bytecode null check
      ensureBeforeCommentsIsMutable();
      beforeComments_.add(value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 4;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addBeforeComments(
        int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment value) {
      value.getClass();  // minimal bytecode null check
      ensureBeforeCommentsIsMutable();
      beforeComments_.add(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 4;</code>
     */
    private void addAllBeforeComments(
        java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment> values) {
      ensureBeforeCommentsIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, beforeComments_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 4;</code>
     */
    private void clearBeforeComments() {
      beforeComments_ = emptyProtobufList();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 4;</code>
     */
    private void removeBeforeComments(int index) {
      ensureBeforeCommentsIsMutable();
      beforeComments_.remove(index);
    }

    public static final int AFTER_COMMENTS_FIELD_NUMBER = 5;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment> afterComments_;
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 5;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment> getAfterCommentsList() {
      return afterComments_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 5;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CommentOrBuilder> 
        getAfterCommentsOrBuilderList() {
      return afterComments_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 5;</code>
     */
    @java.lang.Override
    public int getAfterCommentsCount() {
      return afterComments_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 5;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment getAfterComments(int index) {
      return afterComments_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 5;</code>
     */
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CommentOrBuilder getAfterCommentsOrBuilder(
        int index) {
      return afterComments_.get(index);
    }
    private void ensureAfterCommentsIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment> tmp = afterComments_;
      if (!tmp.isModifiable()) {
        afterComments_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 5;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setAfterComments(
        int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment value) {
      value.getClass();  // minimal bytecode null check
      ensureAfterCommentsIsMutable();
      afterComments_.set(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 5;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addAfterComments(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment value) {
      value.getClass();  // minimal bytecode null check
      ensureAfterCommentsIsMutable();
      afterComments_.add(value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 5;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addAfterComments(
        int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment value) {
      value.getClass();  // minimal bytecode null check
      ensureAfterCommentsIsMutable();
      afterComments_.add(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 5;</code>
     */
    private void addAllAfterComments(
        java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment> values) {
      ensureAfterCommentsIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, afterComments_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 5;</code>
     */
    private void clearAfterComments() {
      afterComments_ = emptyProtobufList();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 5;</code>
     */
    private void removeAfterComments(int index) {
      ensureAfterCommentsIsMutable();
      afterComments_.remove(index);
    }

    public static final int RETURN_STATEMENT_FIELD_NUMBER = 21;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Return return_statement = 21;</code>
     */
    @java.lang.Override
    public boolean hasReturnStatement() {
      return statementCase_ == 21;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Return return_statement = 21;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return getReturnStatement() {
      if (statementCase_ == 21) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return) statement_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Return return_statement = 21;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setReturnStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return value) {
      value.getClass();  // minimal bytecode null check
      statement_ = value;
      statementCase_ = 21;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Return return_statement = 21;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void mergeReturnStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return value) {
      value.getClass();  // minimal bytecode null check
      if (statementCase_ == 21 &&
          statement_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return.getDefaultInstance()) {
        statement_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return) statement_)
            .mergeFrom(value).buildPartial();
      } else {
        statement_ = value;
      }
      statementCase_ = 21;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Return return_statement = 21;</code>
     */
    private void clearReturnStatement() {
      if (statementCase_ == 21) {
        statementCase_ = 0;
        statement_ = null;
      }
    }

    public static final int THROW_STATEMENT_FIELD_NUMBER = 22;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Throw throw_statement = 22;</code>
     */
    @java.lang.Override
    public boolean hasThrowStatement() {
      return statementCase_ == 22;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Throw throw_statement = 22;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw getThrowStatement() {
      if (statementCase_ == 22) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw) statement_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Throw throw_statement = 22;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setThrowStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw value) {
      value.getClass();  // minimal bytecode null check
      statement_ = value;
      statementCase_ = 22;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Throw throw_statement = 22;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void mergeThrowStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw value) {
      value.getClass();  // minimal bytecode null check
      if (statementCase_ == 22 &&
          statement_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw.getDefaultInstance()) {
        statement_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw) statement_)
            .mergeFrom(value).buildPartial();
      } else {
        statement_ = value;
      }
      statementCase_ = 22;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Throw throw_statement = 22;</code>
     */
    private void clearThrowStatement() {
      if (statementCase_ == 22) {
        statementCase_ = 0;
        statement_ = null;
      }
    }

    public static final int BREAK_STATEMENT_FIELD_NUMBER = 23;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Break break_statement = 23;</code>
     */
    @java.lang.Override
    public boolean hasBreakStatement() {
      return statementCase_ == 23;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Break break_statement = 23;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break getBreakStatement() {
      if (statementCase_ == 23) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break) statement_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Break break_statement = 23;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setBreakStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break value) {
      value.getClass();  // minimal bytecode null check
      statement_ = value;
      statementCase_ = 23;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Break break_statement = 23;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void mergeBreakStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break value) {
      value.getClass();  // minimal bytecode null check
      if (statementCase_ == 23 &&
          statement_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break.getDefaultInstance()) {
        statement_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break) statement_)
            .mergeFrom(value).buildPartial();
      } else {
        statement_ = value;
      }
      statementCase_ = 23;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Break break_statement = 23;</code>
     */
    private void clearBreakStatement() {
      if (statementCase_ == 23) {
        statementCase_ = 0;
        statement_ = null;
      }
    }

    public static final int CONTINUE_STATEMENT_FIELD_NUMBER = 24;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Continue continue_statement = 24;</code>
     */
    @java.lang.Override
    public boolean hasContinueStatement() {
      return statementCase_ == 24;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Continue continue_statement = 24;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue getContinueStatement() {
      if (statementCase_ == 24) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue) statement_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Continue continue_statement = 24;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setContinueStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue value) {
      value.getClass();  // minimal bytecode null check
      statement_ = value;
      statementCase_ = 24;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Continue continue_statement = 24;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void mergeContinueStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue value) {
      value.getClass();  // minimal bytecode null check
      if (statementCase_ == 24 &&
          statement_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue.getDefaultInstance()) {
        statement_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue) statement_)
            .mergeFrom(value).buildPartial();
      } else {
        statement_ = value;
      }
      statementCase_ = 24;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Continue continue_statement = 24;</code>
     */
    private void clearContinueStatement() {
      if (statementCase_ == 24) {
        statementCase_ = 0;
        statement_ = null;
      }
    }

    public static final int DEBUGGER_FIELD_NUMBER = 25;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Debugger debugger = 25;</code>
     */
    @java.lang.Override
    public boolean hasDebugger() {
      return statementCase_ == 25;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Debugger debugger = 25;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger getDebugger() {
      if (statementCase_ == 25) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger) statement_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Debugger debugger = 25;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setDebugger(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger value) {
      value.getClass();  // minimal bytecode null check
      statement_ = value;
      statementCase_ = 25;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Debugger debugger = 25;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void mergeDebugger(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger value) {
      value.getClass();  // minimal bytecode null check
      if (statementCase_ == 25 &&
          statement_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger.getDefaultInstance()) {
        statement_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger) statement_)
            .mergeFrom(value).buildPartial();
      } else {
        statement_ = value;
      }
      statementCase_ = 25;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Debugger debugger = 25;</code>
     */
    private void clearDebugger() {
      if (statementCase_ == 25) {
        statementCase_ = 0;
        statement_ = null;
      }
    }

    public static final int EXPRESSION_FIELD_NUMBER = 26;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.ExpressionStatement expression = 26;</code>
     */
    @java.lang.Override
    public boolean hasExpression() {
      return statementCase_ == 26;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.ExpressionStatement expression = 26;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement getExpression() {
      if (statementCase_ == 26) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement) statement_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.ExpressionStatement expression = 26;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setExpression(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement value) {
      value.getClass();  // minimal bytecode null check
      statement_ = value;
      statementCase_ = 26;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.ExpressionStatement expression = 26;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void mergeExpression(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement value) {
      value.getClass();  // minimal bytecode null check
      if (statementCase_ == 26 &&
          statement_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement.getDefaultInstance()) {
        statement_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement) statement_)
            .mergeFrom(value).buildPartial();
      } else {
        statement_ = value;
      }
      statementCase_ = 26;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.ExpressionStatement expression = 26;</code>
     */
    private void clearExpression() {
      if (statementCase_ == 26) {
        statementCase_ = 0;
        statement_ = null;
      }
    }

    public static final int VARS_FIELD_NUMBER = 27;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Vars vars = 27;</code>
     */
    @java.lang.Override
    public boolean hasVars() {
      return statementCase_ == 27;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Vars vars = 27;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars getVars() {
      if (statementCase_ == 27) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars) statement_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Vars vars = 27;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setVars(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars value) {
      value.getClass();  // minimal bytecode null check
      statement_ = value;
      statementCase_ = 27;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Vars vars = 27;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void mergeVars(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars value) {
      value.getClass();  // minimal bytecode null check
      if (statementCase_ == 27 &&
          statement_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars.getDefaultInstance()) {
        statement_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars) statement_)
            .mergeFrom(value).buildPartial();
      } else {
        statement_ = value;
      }
      statementCase_ = 27;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Vars vars = 27;</code>
     */
    private void clearVars() {
      if (statementCase_ == 27) {
        statementCase_ = 0;
        statement_ = null;
      }
    }

    public static final int BLOCK_FIELD_NUMBER = 28;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Block block = 28;</code>
     */
    @java.lang.Override
    public boolean hasBlock() {
      return statementCase_ == 28;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Block block = 28;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block getBlock() {
      if (statementCase_ == 28) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block) statement_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Block block = 28;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setBlock(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block value) {
      value.getClass();  // minimal bytecode null check
      statement_ = value;
      statementCase_ = 28;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Block block = 28;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void mergeBlock(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block value) {
      value.getClass();  // minimal bytecode null check
      if (statementCase_ == 28 &&
          statement_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block.getDefaultInstance()) {
        statement_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block) statement_)
            .mergeFrom(value).buildPartial();
      } else {
        statement_ = value;
      }
      statementCase_ = 28;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Block block = 28;</code>
     */
    private void clearBlock() {
      if (statementCase_ == 28) {
        statementCase_ = 0;
        statement_ = null;
      }
    }

    public static final int COMPOSITE_BLOCK_FIELD_NUMBER = 29;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock composite_block = 29;</code>
     */
    @java.lang.Override
    public boolean hasCompositeBlock() {
      return statementCase_ == 29;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock composite_block = 29;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock getCompositeBlock() {
      if (statementCase_ == 29) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock) statement_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock composite_block = 29;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setCompositeBlock(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock value) {
      value.getClass();  // minimal bytecode null check
      statement_ = value;
      statementCase_ = 29;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock composite_block = 29;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void mergeCompositeBlock(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock value) {
      value.getClass();  // minimal bytecode null check
      if (statementCase_ == 29 &&
          statement_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.getDefaultInstance()) {
        statement_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock) statement_)
            .mergeFrom(value).buildPartial();
      } else {
        statement_ = value;
      }
      statementCase_ = 29;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock composite_block = 29;</code>
     */
    private void clearCompositeBlock() {
      if (statementCase_ == 29) {
        statementCase_ = 0;
        statement_ = null;
      }
    }

    public static final int LABEL_FIELD_NUMBER = 30;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Label label = 30;</code>
     */
    @java.lang.Override
    public boolean hasLabel() {
      return statementCase_ == 30;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Label label = 30;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label getLabel() {
      if (statementCase_ == 30) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label) statement_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Label label = 30;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setLabel(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label value) {
      value.getClass();  // minimal bytecode null check
      statement_ = value;
      statementCase_ = 30;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Label label = 30;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void mergeLabel(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label value) {
      value.getClass();  // minimal bytecode null check
      if (statementCase_ == 30 &&
          statement_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label.getDefaultInstance()) {
        statement_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label) statement_)
            .mergeFrom(value).buildPartial();
      } else {
        statement_ = value;
      }
      statementCase_ = 30;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Label label = 30;</code>
     */
    private void clearLabel() {
      if (statementCase_ == 30) {
        statementCase_ = 0;
        statement_ = null;
      }
    }

    public static final int IF_STATEMENT_FIELD_NUMBER = 31;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.If if_statement = 31;</code>
     */
    @java.lang.Override
    public boolean hasIfStatement() {
      return statementCase_ == 31;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.If if_statement = 31;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If getIfStatement() {
      if (statementCase_ == 31) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If) statement_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.If if_statement = 31;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setIfStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If value) {
      value.getClass();  // minimal bytecode null check
      statement_ = value;
      statementCase_ = 31;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.If if_statement = 31;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void mergeIfStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If value) {
      value.getClass();  // minimal bytecode null check
      if (statementCase_ == 31 &&
          statement_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If.getDefaultInstance()) {
        statement_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If) statement_)
            .mergeFrom(value).buildPartial();
      } else {
        statement_ = value;
      }
      statementCase_ = 31;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.If if_statement = 31;</code>
     */
    private void clearIfStatement() {
      if (statementCase_ == 31) {
        statementCase_ = 0;
        statement_ = null;
      }
    }

    public static final int SWITCH_STATEMENT_FIELD_NUMBER = 32;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Switch switch_statement = 32;</code>
     */
    @java.lang.Override
    public boolean hasSwitchStatement() {
      return statementCase_ == 32;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Switch switch_statement = 32;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch getSwitchStatement() {
      if (statementCase_ == 32) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch) statement_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Switch switch_statement = 32;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setSwitchStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch value) {
      value.getClass();  // minimal bytecode null check
      statement_ = value;
      statementCase_ = 32;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Switch switch_statement = 32;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void mergeSwitchStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch value) {
      value.getClass();  // minimal bytecode null check
      if (statementCase_ == 32 &&
          statement_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch.getDefaultInstance()) {
        statement_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch) statement_)
            .mergeFrom(value).buildPartial();
      } else {
        statement_ = value;
      }
      statementCase_ = 32;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Switch switch_statement = 32;</code>
     */
    private void clearSwitchStatement() {
      if (statementCase_ == 32) {
        statementCase_ = 0;
        statement_ = null;
      }
    }

    public static final int WHILE_STATEMENT_FIELD_NUMBER = 33;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.While while_statement = 33;</code>
     */
    @java.lang.Override
    public boolean hasWhileStatement() {
      return statementCase_ == 33;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.While while_statement = 33;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While getWhileStatement() {
      if (statementCase_ == 33) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While) statement_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.While while_statement = 33;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setWhileStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While value) {
      value.getClass();  // minimal bytecode null check
      statement_ = value;
      statementCase_ = 33;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.While while_statement = 33;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void mergeWhileStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While value) {
      value.getClass();  // minimal bytecode null check
      if (statementCase_ == 33 &&
          statement_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While.getDefaultInstance()) {
        statement_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While) statement_)
            .mergeFrom(value).buildPartial();
      } else {
        statement_ = value;
      }
      statementCase_ = 33;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.While while_statement = 33;</code>
     */
    private void clearWhileStatement() {
      if (statementCase_ == 33) {
        statementCase_ = 0;
        statement_ = null;
      }
    }

    public static final int DO_WHILE_STATEMENT_FIELD_NUMBER = 34;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.DoWhile do_while_statement = 34;</code>
     */
    @java.lang.Override
    public boolean hasDoWhileStatement() {
      return statementCase_ == 34;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.DoWhile do_while_statement = 34;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile getDoWhileStatement() {
      if (statementCase_ == 34) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile) statement_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.DoWhile do_while_statement = 34;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setDoWhileStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile value) {
      value.getClass();  // minimal bytecode null check
      statement_ = value;
      statementCase_ = 34;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.DoWhile do_while_statement = 34;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void mergeDoWhileStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile value) {
      value.getClass();  // minimal bytecode null check
      if (statementCase_ == 34 &&
          statement_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile.getDefaultInstance()) {
        statement_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile) statement_)
            .mergeFrom(value).buildPartial();
      } else {
        statement_ = value;
      }
      statementCase_ = 34;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.DoWhile do_while_statement = 34;</code>
     */
    private void clearDoWhileStatement() {
      if (statementCase_ == 34) {
        statementCase_ = 0;
        statement_ = null;
      }
    }

    public static final int FOR_STATEMENT_FIELD_NUMBER = 35;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.For for_statement = 35;</code>
     */
    @java.lang.Override
    public boolean hasForStatement() {
      return statementCase_ == 35;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.For for_statement = 35;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For getForStatement() {
      if (statementCase_ == 35) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For) statement_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.For for_statement = 35;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setForStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For value) {
      value.getClass();  // minimal bytecode null check
      statement_ = value;
      statementCase_ = 35;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.For for_statement = 35;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void mergeForStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For value) {
      value.getClass();  // minimal bytecode null check
      if (statementCase_ == 35 &&
          statement_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For.getDefaultInstance()) {
        statement_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For) statement_)
            .mergeFrom(value).buildPartial();
      } else {
        statement_ = value;
      }
      statementCase_ = 35;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.For for_statement = 35;</code>
     */
    private void clearForStatement() {
      if (statementCase_ == 35) {
        statementCase_ = 0;
        statement_ = null;
      }
    }

    public static final int FOR_IN_STATEMENT_FIELD_NUMBER = 36;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.ForIn for_in_statement = 36;</code>
     */
    @java.lang.Override
    public boolean hasForInStatement() {
      return statementCase_ == 36;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.ForIn for_in_statement = 36;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn getForInStatement() {
      if (statementCase_ == 36) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn) statement_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.ForIn for_in_statement = 36;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setForInStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn value) {
      value.getClass();  // minimal bytecode null check
      statement_ = value;
      statementCase_ = 36;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.ForIn for_in_statement = 36;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void mergeForInStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn value) {
      value.getClass();  // minimal bytecode null check
      if (statementCase_ == 36 &&
          statement_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn.getDefaultInstance()) {
        statement_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn) statement_)
            .mergeFrom(value).buildPartial();
      } else {
        statement_ = value;
      }
      statementCase_ = 36;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.ForIn for_in_statement = 36;</code>
     */
    private void clearForInStatement() {
      if (statementCase_ == 36) {
        statementCase_ = 0;
        statement_ = null;
      }
    }

    public static final int TRY_STATEMENT_FIELD_NUMBER = 37;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Try try_statement = 37;</code>
     */
    @java.lang.Override
    public boolean hasTryStatement() {
      return statementCase_ == 37;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Try try_statement = 37;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try getTryStatement() {
      if (statementCase_ == 37) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try) statement_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Try try_statement = 37;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setTryStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try value) {
      value.getClass();  // minimal bytecode null check
      statement_ = value;
      statementCase_ = 37;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Try try_statement = 37;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void mergeTryStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try value) {
      value.getClass();  // minimal bytecode null check
      if (statementCase_ == 37 &&
          statement_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try.getDefaultInstance()) {
        statement_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try) statement_)
            .mergeFrom(value).buildPartial();
      } else {
        statement_ = value;
      }
      statementCase_ = 37;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Try try_statement = 37;</code>
     */
    private void clearTryStatement() {
      if (statementCase_ == 37) {
        statementCase_ = 0;
        statement_ = null;
      }
    }

    public static final int EMPTY_FIELD_NUMBER = 38;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Empty empty = 38;</code>
     */
    @java.lang.Override
    public boolean hasEmpty() {
      return statementCase_ == 38;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Empty empty = 38;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty getEmpty() {
      if (statementCase_ == 38) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty) statement_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Empty empty = 38;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setEmpty(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty value) {
      value.getClass();  // minimal bytecode null check
      statement_ = value;
      statementCase_ = 38;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Empty empty = 38;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void mergeEmpty(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty value) {
      value.getClass();  // minimal bytecode null check
      if (statementCase_ == 38 &&
          statement_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty.getDefaultInstance()) {
        statement_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty) statement_)
            .mergeFrom(value).buildPartial();
      } else {
        statement_ = value;
      }
      statementCase_ = 38;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Empty empty = 38;</code>
     */
    private void clearEmpty() {
      if (statementCase_ == 38) {
        statementCase_ = 0;
        statement_ = null;
      }
    }

    public static final int SINGLE_LINE_COMMENT_FIELD_NUMBER = 39;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.SingleLineComment single_line_comment = 39;</code>
     */
    @java.lang.Override
    public boolean hasSingleLineComment() {
      return statementCase_ == 39;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.SingleLineComment single_line_comment = 39;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment getSingleLineComment() {
      if (statementCase_ == 39) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment) statement_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.SingleLineComment single_line_comment = 39;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setSingleLineComment(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment value) {
      value.getClass();  // minimal bytecode null check
      statement_ = value;
      statementCase_ = 39;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.SingleLineComment single_line_comment = 39;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void mergeSingleLineComment(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment value) {
      value.getClass();  // minimal bytecode null check
      if (statementCase_ == 39 &&
          statement_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment.getDefaultInstance()) {
        statement_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment) statement_)
            .mergeFrom(value).buildPartial();
      } else {
        statement_ = value;
      }
      statementCase_ = 39;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.SingleLineComment single_line_comment = 39;</code>
     */
    private void clearSingleLineComment() {
      if (statementCase_ == 39) {
        statementCase_ = 0;
        statement_ = null;
      }
    }

    public static final int MULTI_LINE_COMMENT_FIELD_NUMBER = 40;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.MultiLineComment multi_line_comment = 40;</code>
     */
    @java.lang.Override
    public boolean hasMultiLineComment() {
      return statementCase_ == 40;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.MultiLineComment multi_line_comment = 40;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment getMultiLineComment() {
      if (statementCase_ == 40) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment) statement_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.MultiLineComment multi_line_comment = 40;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setMultiLineComment(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment value) {
      value.getClass();  // minimal bytecode null check
      statement_ = value;
      statementCase_ = 40;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.MultiLineComment multi_line_comment = 40;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void mergeMultiLineComment(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment value) {
      value.getClass();  // minimal bytecode null check
      if (statementCase_ == 40 &&
          statement_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment.getDefaultInstance()) {
        statement_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment) statement_)
            .mergeFrom(value).buildPartial();
      } else {
        statement_ = value;
      }
      statementCase_ = 40;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.MultiLineComment multi_line_comment = 40;</code>
     */
    private void clearMultiLineComment() {
      if (statementCase_ == 40) {
        statementCase_ = 0;
        statement_ = null;
      }
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Statement}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.Statement)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder {
      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }

      @java.lang.Override
      public StatementCase
          getStatementCase() {
        return instance.getStatementCase();
      }

      public Builder clearStatement() {
        copyOnWrite();
        instance.clearStatement();
        return this;
      }


      /**
       * <code>int32 fileId = 1;</code>
       * @return Whether the fileId field is set.
       */
      @java.lang.Override
      public boolean hasFileId() {
        return instance.hasFileId();
      }
      /**
       * <code>int32 fileId = 1;</code>
       * @return The fileId.
       */
      @java.lang.Override
      public int getFileId() {
        return instance.getFileId();
      }
      /**
       * <code>int32 fileId = 1;</code>
       * @param value The fileId to set.
       * @return This builder for chaining.
       */
      public Builder setFileId(int value) {
        copyOnWrite();
        instance.setFileId(value);
        return this;
      }
      /**
       * <code>int32 fileId = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearFileId() {
        copyOnWrite();
        instance.clearFileId();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 2;</code>
       */
      @java.lang.Override
      public boolean hasLocation() {
        return instance.hasLocation();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 2;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location getLocation() {
        return instance.getLocation();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 2;</code>
       */
      public Builder setLocation(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location value) {
        copyOnWrite();
        instance.setLocation(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 2;</code>
       */
      public Builder setLocation(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location.Builder builderForValue) {
        copyOnWrite();
        instance.setLocation(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 2;</code>
       */
      public Builder mergeLocation(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location value) {
        copyOnWrite();
        instance.mergeLocation(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 2;</code>
       */
      public Builder clearLocation() {  copyOnWrite();
        instance.clearLocation();
        return this;
      }

      /**
       * <code>bool synthetic = 3 [default = false];</code>
       * @return Whether the synthetic field is set.
       */
      @java.lang.Override
      public boolean hasSynthetic() {
        return instance.hasSynthetic();
      }
      /**
       * <code>bool synthetic = 3 [default = false];</code>
       * @return The synthetic.
       */
      @java.lang.Override
      public boolean getSynthetic() {
        return instance.getSynthetic();
      }
      /**
       * <code>bool synthetic = 3 [default = false];</code>
       * @param value The synthetic to set.
       * @return This builder for chaining.
       */
      public Builder setSynthetic(boolean value) {
        copyOnWrite();
        instance.setSynthetic(value);
        return this;
      }
      /**
       * <code>bool synthetic = 3 [default = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearSynthetic() {
        copyOnWrite();
        instance.clearSynthetic();
        return this;
      }

      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 4;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment> getBeforeCommentsList() {
        return java.util.Collections.unmodifiableList(
            instance.getBeforeCommentsList());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 4;</code>
       */
      @java.lang.Override
      public int getBeforeCommentsCount() {
        return instance.getBeforeCommentsCount();
      }/**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 4;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment getBeforeComments(int index) {
        return instance.getBeforeComments(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 4;</code>
       */
      public Builder setBeforeComments(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment value) {
        copyOnWrite();
        instance.setBeforeComments(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 4;</code>
       */
      public Builder setBeforeComments(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment.Builder builderForValue) {
        copyOnWrite();
        instance.setBeforeComments(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 4;</code>
       */
      public Builder addBeforeComments(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment value) {
        copyOnWrite();
        instance.addBeforeComments(value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 4;</code>
       */
      public Builder addBeforeComments(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment value) {
        copyOnWrite();
        instance.addBeforeComments(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 4;</code>
       */
      public Builder addBeforeComments(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment.Builder builderForValue) {
        copyOnWrite();
        instance.addBeforeComments(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 4;</code>
       */
      public Builder addBeforeComments(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment.Builder builderForValue) {
        copyOnWrite();
        instance.addBeforeComments(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 4;</code>
       */
      public Builder addAllBeforeComments(
          java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment> values) {
        copyOnWrite();
        instance.addAllBeforeComments(values);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 4;</code>
       */
      public Builder clearBeforeComments() {
        copyOnWrite();
        instance.clearBeforeComments();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 4;</code>
       */
      public Builder removeBeforeComments(int index) {
        copyOnWrite();
        instance.removeBeforeComments(index);
        return this;
      }

      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 5;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment> getAfterCommentsList() {
        return java.util.Collections.unmodifiableList(
            instance.getAfterCommentsList());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 5;</code>
       */
      @java.lang.Override
      public int getAfterCommentsCount() {
        return instance.getAfterCommentsCount();
      }/**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 5;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment getAfterComments(int index) {
        return instance.getAfterComments(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 5;</code>
       */
      public Builder setAfterComments(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment value) {
        copyOnWrite();
        instance.setAfterComments(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 5;</code>
       */
      public Builder setAfterComments(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment.Builder builderForValue) {
        copyOnWrite();
        instance.setAfterComments(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 5;</code>
       */
      public Builder addAfterComments(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment value) {
        copyOnWrite();
        instance.addAfterComments(value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 5;</code>
       */
      public Builder addAfterComments(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment value) {
        copyOnWrite();
        instance.addAfterComments(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 5;</code>
       */
      public Builder addAfterComments(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment.Builder builderForValue) {
        copyOnWrite();
        instance.addAfterComments(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 5;</code>
       */
      public Builder addAfterComments(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment.Builder builderForValue) {
        copyOnWrite();
        instance.addAfterComments(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 5;</code>
       */
      public Builder addAllAfterComments(
          java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment> values) {
        copyOnWrite();
        instance.addAllAfterComments(values);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 5;</code>
       */
      public Builder clearAfterComments() {
        copyOnWrite();
        instance.clearAfterComments();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 5;</code>
       */
      public Builder removeAfterComments(int index) {
        copyOnWrite();
        instance.removeAfterComments(index);
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Return return_statement = 21;</code>
       */
      @java.lang.Override
      public boolean hasReturnStatement() {
        return instance.hasReturnStatement();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Return return_statement = 21;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return getReturnStatement() {
        return instance.getReturnStatement();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Return return_statement = 21;</code>
       */
      public Builder setReturnStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return value) {
        copyOnWrite();
        instance.setReturnStatement(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Return return_statement = 21;</code>
       */
      public Builder setReturnStatement(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return.Builder builderForValue) {
        copyOnWrite();
        instance.setReturnStatement(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Return return_statement = 21;</code>
       */
      public Builder mergeReturnStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return value) {
        copyOnWrite();
        instance.mergeReturnStatement(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Return return_statement = 21;</code>
       */
      public Builder clearReturnStatement() {
        copyOnWrite();
        instance.clearReturnStatement();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Throw throw_statement = 22;</code>
       */
      @java.lang.Override
      public boolean hasThrowStatement() {
        return instance.hasThrowStatement();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Throw throw_statement = 22;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw getThrowStatement() {
        return instance.getThrowStatement();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Throw throw_statement = 22;</code>
       */
      public Builder setThrowStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw value) {
        copyOnWrite();
        instance.setThrowStatement(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Throw throw_statement = 22;</code>
       */
      public Builder setThrowStatement(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw.Builder builderForValue) {
        copyOnWrite();
        instance.setThrowStatement(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Throw throw_statement = 22;</code>
       */
      public Builder mergeThrowStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw value) {
        copyOnWrite();
        instance.mergeThrowStatement(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Throw throw_statement = 22;</code>
       */
      public Builder clearThrowStatement() {
        copyOnWrite();
        instance.clearThrowStatement();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Break break_statement = 23;</code>
       */
      @java.lang.Override
      public boolean hasBreakStatement() {
        return instance.hasBreakStatement();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Break break_statement = 23;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break getBreakStatement() {
        return instance.getBreakStatement();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Break break_statement = 23;</code>
       */
      public Builder setBreakStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break value) {
        copyOnWrite();
        instance.setBreakStatement(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Break break_statement = 23;</code>
       */
      public Builder setBreakStatement(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break.Builder builderForValue) {
        copyOnWrite();
        instance.setBreakStatement(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Break break_statement = 23;</code>
       */
      public Builder mergeBreakStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break value) {
        copyOnWrite();
        instance.mergeBreakStatement(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Break break_statement = 23;</code>
       */
      public Builder clearBreakStatement() {
        copyOnWrite();
        instance.clearBreakStatement();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Continue continue_statement = 24;</code>
       */
      @java.lang.Override
      public boolean hasContinueStatement() {
        return instance.hasContinueStatement();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Continue continue_statement = 24;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue getContinueStatement() {
        return instance.getContinueStatement();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Continue continue_statement = 24;</code>
       */
      public Builder setContinueStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue value) {
        copyOnWrite();
        instance.setContinueStatement(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Continue continue_statement = 24;</code>
       */
      public Builder setContinueStatement(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue.Builder builderForValue) {
        copyOnWrite();
        instance.setContinueStatement(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Continue continue_statement = 24;</code>
       */
      public Builder mergeContinueStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue value) {
        copyOnWrite();
        instance.mergeContinueStatement(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Continue continue_statement = 24;</code>
       */
      public Builder clearContinueStatement() {
        copyOnWrite();
        instance.clearContinueStatement();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Debugger debugger = 25;</code>
       */
      @java.lang.Override
      public boolean hasDebugger() {
        return instance.hasDebugger();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Debugger debugger = 25;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger getDebugger() {
        return instance.getDebugger();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Debugger debugger = 25;</code>
       */
      public Builder setDebugger(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger value) {
        copyOnWrite();
        instance.setDebugger(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Debugger debugger = 25;</code>
       */
      public Builder setDebugger(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger.Builder builderForValue) {
        copyOnWrite();
        instance.setDebugger(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Debugger debugger = 25;</code>
       */
      public Builder mergeDebugger(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger value) {
        copyOnWrite();
        instance.mergeDebugger(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Debugger debugger = 25;</code>
       */
      public Builder clearDebugger() {
        copyOnWrite();
        instance.clearDebugger();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ExpressionStatement expression = 26;</code>
       */
      @java.lang.Override
      public boolean hasExpression() {
        return instance.hasExpression();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ExpressionStatement expression = 26;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement getExpression() {
        return instance.getExpression();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ExpressionStatement expression = 26;</code>
       */
      public Builder setExpression(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement value) {
        copyOnWrite();
        instance.setExpression(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ExpressionStatement expression = 26;</code>
       */
      public Builder setExpression(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement.Builder builderForValue) {
        copyOnWrite();
        instance.setExpression(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ExpressionStatement expression = 26;</code>
       */
      public Builder mergeExpression(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement value) {
        copyOnWrite();
        instance.mergeExpression(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ExpressionStatement expression = 26;</code>
       */
      public Builder clearExpression() {
        copyOnWrite();
        instance.clearExpression();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Vars vars = 27;</code>
       */
      @java.lang.Override
      public boolean hasVars() {
        return instance.hasVars();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Vars vars = 27;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars getVars() {
        return instance.getVars();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Vars vars = 27;</code>
       */
      public Builder setVars(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars value) {
        copyOnWrite();
        instance.setVars(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Vars vars = 27;</code>
       */
      public Builder setVars(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars.Builder builderForValue) {
        copyOnWrite();
        instance.setVars(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Vars vars = 27;</code>
       */
      public Builder mergeVars(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars value) {
        copyOnWrite();
        instance.mergeVars(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Vars vars = 27;</code>
       */
      public Builder clearVars() {
        copyOnWrite();
        instance.clearVars();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Block block = 28;</code>
       */
      @java.lang.Override
      public boolean hasBlock() {
        return instance.hasBlock();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Block block = 28;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block getBlock() {
        return instance.getBlock();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Block block = 28;</code>
       */
      public Builder setBlock(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block value) {
        copyOnWrite();
        instance.setBlock(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Block block = 28;</code>
       */
      public Builder setBlock(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block.Builder builderForValue) {
        copyOnWrite();
        instance.setBlock(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Block block = 28;</code>
       */
      public Builder mergeBlock(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block value) {
        copyOnWrite();
        instance.mergeBlock(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Block block = 28;</code>
       */
      public Builder clearBlock() {
        copyOnWrite();
        instance.clearBlock();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock composite_block = 29;</code>
       */
      @java.lang.Override
      public boolean hasCompositeBlock() {
        return instance.hasCompositeBlock();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock composite_block = 29;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock getCompositeBlock() {
        return instance.getCompositeBlock();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock composite_block = 29;</code>
       */
      public Builder setCompositeBlock(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock value) {
        copyOnWrite();
        instance.setCompositeBlock(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock composite_block = 29;</code>
       */
      public Builder setCompositeBlock(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.Builder builderForValue) {
        copyOnWrite();
        instance.setCompositeBlock(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock composite_block = 29;</code>
       */
      public Builder mergeCompositeBlock(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock value) {
        copyOnWrite();
        instance.mergeCompositeBlock(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock composite_block = 29;</code>
       */
      public Builder clearCompositeBlock() {
        copyOnWrite();
        instance.clearCompositeBlock();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Label label = 30;</code>
       */
      @java.lang.Override
      public boolean hasLabel() {
        return instance.hasLabel();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Label label = 30;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label getLabel() {
        return instance.getLabel();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Label label = 30;</code>
       */
      public Builder setLabel(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label value) {
        copyOnWrite();
        instance.setLabel(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Label label = 30;</code>
       */
      public Builder setLabel(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label.Builder builderForValue) {
        copyOnWrite();
        instance.setLabel(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Label label = 30;</code>
       */
      public Builder mergeLabel(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label value) {
        copyOnWrite();
        instance.mergeLabel(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Label label = 30;</code>
       */
      public Builder clearLabel() {
        copyOnWrite();
        instance.clearLabel();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.If if_statement = 31;</code>
       */
      @java.lang.Override
      public boolean hasIfStatement() {
        return instance.hasIfStatement();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.If if_statement = 31;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If getIfStatement() {
        return instance.getIfStatement();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.If if_statement = 31;</code>
       */
      public Builder setIfStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If value) {
        copyOnWrite();
        instance.setIfStatement(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.If if_statement = 31;</code>
       */
      public Builder setIfStatement(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If.Builder builderForValue) {
        copyOnWrite();
        instance.setIfStatement(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.If if_statement = 31;</code>
       */
      public Builder mergeIfStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If value) {
        copyOnWrite();
        instance.mergeIfStatement(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.If if_statement = 31;</code>
       */
      public Builder clearIfStatement() {
        copyOnWrite();
        instance.clearIfStatement();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Switch switch_statement = 32;</code>
       */
      @java.lang.Override
      public boolean hasSwitchStatement() {
        return instance.hasSwitchStatement();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Switch switch_statement = 32;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch getSwitchStatement() {
        return instance.getSwitchStatement();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Switch switch_statement = 32;</code>
       */
      public Builder setSwitchStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch value) {
        copyOnWrite();
        instance.setSwitchStatement(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Switch switch_statement = 32;</code>
       */
      public Builder setSwitchStatement(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch.Builder builderForValue) {
        copyOnWrite();
        instance.setSwitchStatement(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Switch switch_statement = 32;</code>
       */
      public Builder mergeSwitchStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch value) {
        copyOnWrite();
        instance.mergeSwitchStatement(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Switch switch_statement = 32;</code>
       */
      public Builder clearSwitchStatement() {
        copyOnWrite();
        instance.clearSwitchStatement();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.While while_statement = 33;</code>
       */
      @java.lang.Override
      public boolean hasWhileStatement() {
        return instance.hasWhileStatement();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.While while_statement = 33;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While getWhileStatement() {
        return instance.getWhileStatement();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.While while_statement = 33;</code>
       */
      public Builder setWhileStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While value) {
        copyOnWrite();
        instance.setWhileStatement(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.While while_statement = 33;</code>
       */
      public Builder setWhileStatement(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While.Builder builderForValue) {
        copyOnWrite();
        instance.setWhileStatement(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.While while_statement = 33;</code>
       */
      public Builder mergeWhileStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While value) {
        copyOnWrite();
        instance.mergeWhileStatement(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.While while_statement = 33;</code>
       */
      public Builder clearWhileStatement() {
        copyOnWrite();
        instance.clearWhileStatement();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.DoWhile do_while_statement = 34;</code>
       */
      @java.lang.Override
      public boolean hasDoWhileStatement() {
        return instance.hasDoWhileStatement();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.DoWhile do_while_statement = 34;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile getDoWhileStatement() {
        return instance.getDoWhileStatement();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.DoWhile do_while_statement = 34;</code>
       */
      public Builder setDoWhileStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile value) {
        copyOnWrite();
        instance.setDoWhileStatement(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.DoWhile do_while_statement = 34;</code>
       */
      public Builder setDoWhileStatement(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile.Builder builderForValue) {
        copyOnWrite();
        instance.setDoWhileStatement(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.DoWhile do_while_statement = 34;</code>
       */
      public Builder mergeDoWhileStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile value) {
        copyOnWrite();
        instance.mergeDoWhileStatement(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.DoWhile do_while_statement = 34;</code>
       */
      public Builder clearDoWhileStatement() {
        copyOnWrite();
        instance.clearDoWhileStatement();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.For for_statement = 35;</code>
       */
      @java.lang.Override
      public boolean hasForStatement() {
        return instance.hasForStatement();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.For for_statement = 35;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For getForStatement() {
        return instance.getForStatement();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.For for_statement = 35;</code>
       */
      public Builder setForStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For value) {
        copyOnWrite();
        instance.setForStatement(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.For for_statement = 35;</code>
       */
      public Builder setForStatement(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For.Builder builderForValue) {
        copyOnWrite();
        instance.setForStatement(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.For for_statement = 35;</code>
       */
      public Builder mergeForStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For value) {
        copyOnWrite();
        instance.mergeForStatement(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.For for_statement = 35;</code>
       */
      public Builder clearForStatement() {
        copyOnWrite();
        instance.clearForStatement();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ForIn for_in_statement = 36;</code>
       */
      @java.lang.Override
      public boolean hasForInStatement() {
        return instance.hasForInStatement();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ForIn for_in_statement = 36;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn getForInStatement() {
        return instance.getForInStatement();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ForIn for_in_statement = 36;</code>
       */
      public Builder setForInStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn value) {
        copyOnWrite();
        instance.setForInStatement(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ForIn for_in_statement = 36;</code>
       */
      public Builder setForInStatement(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn.Builder builderForValue) {
        copyOnWrite();
        instance.setForInStatement(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ForIn for_in_statement = 36;</code>
       */
      public Builder mergeForInStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn value) {
        copyOnWrite();
        instance.mergeForInStatement(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ForIn for_in_statement = 36;</code>
       */
      public Builder clearForInStatement() {
        copyOnWrite();
        instance.clearForInStatement();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Try try_statement = 37;</code>
       */
      @java.lang.Override
      public boolean hasTryStatement() {
        return instance.hasTryStatement();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Try try_statement = 37;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try getTryStatement() {
        return instance.getTryStatement();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Try try_statement = 37;</code>
       */
      public Builder setTryStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try value) {
        copyOnWrite();
        instance.setTryStatement(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Try try_statement = 37;</code>
       */
      public Builder setTryStatement(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try.Builder builderForValue) {
        copyOnWrite();
        instance.setTryStatement(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Try try_statement = 37;</code>
       */
      public Builder mergeTryStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try value) {
        copyOnWrite();
        instance.mergeTryStatement(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Try try_statement = 37;</code>
       */
      public Builder clearTryStatement() {
        copyOnWrite();
        instance.clearTryStatement();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Empty empty = 38;</code>
       */
      @java.lang.Override
      public boolean hasEmpty() {
        return instance.hasEmpty();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Empty empty = 38;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty getEmpty() {
        return instance.getEmpty();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Empty empty = 38;</code>
       */
      public Builder setEmpty(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty value) {
        copyOnWrite();
        instance.setEmpty(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Empty empty = 38;</code>
       */
      public Builder setEmpty(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty.Builder builderForValue) {
        copyOnWrite();
        instance.setEmpty(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Empty empty = 38;</code>
       */
      public Builder mergeEmpty(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty value) {
        copyOnWrite();
        instance.mergeEmpty(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Empty empty = 38;</code>
       */
      public Builder clearEmpty() {
        copyOnWrite();
        instance.clearEmpty();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.SingleLineComment single_line_comment = 39;</code>
       */
      @java.lang.Override
      public boolean hasSingleLineComment() {
        return instance.hasSingleLineComment();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.SingleLineComment single_line_comment = 39;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment getSingleLineComment() {
        return instance.getSingleLineComment();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.SingleLineComment single_line_comment = 39;</code>
       */
      public Builder setSingleLineComment(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment value) {
        copyOnWrite();
        instance.setSingleLineComment(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.SingleLineComment single_line_comment = 39;</code>
       */
      public Builder setSingleLineComment(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment.Builder builderForValue) {
        copyOnWrite();
        instance.setSingleLineComment(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.SingleLineComment single_line_comment = 39;</code>
       */
      public Builder mergeSingleLineComment(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment value) {
        copyOnWrite();
        instance.mergeSingleLineComment(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.SingleLineComment single_line_comment = 39;</code>
       */
      public Builder clearSingleLineComment() {
        copyOnWrite();
        instance.clearSingleLineComment();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.MultiLineComment multi_line_comment = 40;</code>
       */
      @java.lang.Override
      public boolean hasMultiLineComment() {
        return instance.hasMultiLineComment();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.MultiLineComment multi_line_comment = 40;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment getMultiLineComment() {
        return instance.getMultiLineComment();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.MultiLineComment multi_line_comment = 40;</code>
       */
      public Builder setMultiLineComment(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment value) {
        copyOnWrite();
        instance.setMultiLineComment(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.MultiLineComment multi_line_comment = 40;</code>
       */
      public Builder setMultiLineComment(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment.Builder builderForValue) {
        copyOnWrite();
        instance.setMultiLineComment(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.MultiLineComment multi_line_comment = 40;</code>
       */
      public Builder mergeMultiLineComment(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment value) {
        copyOnWrite();
        instance.mergeMultiLineComment(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.MultiLineComment multi_line_comment = 40;</code>
       */
      public Builder clearMultiLineComment() {
        copyOnWrite();
        instance.clearMultiLineComment();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.Statement)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "statement_",
              "statementCase_",
              "bitField0_",
              "fileId_",
              "location_",
              "synthetic_",
              "beforeComments_",
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment.class,
              "afterComments_",
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment.class,
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return.class,
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw.class,
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break.class,
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue.class,
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger.class,
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement.class,
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars.class,
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block.class,
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.class,
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label.class,
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If.class,
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch.class,
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While.class,
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile.class,
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For.class,
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn.class,
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try.class,
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty.class,
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment.class,
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment.class,
            };
            java.lang.String info =
                "\u0004\u0019\u0001\u0001\u0001(\u0019\u0000\u0002\u0013\u0001\u1004\u0000\u0002\u1409" +
                "\u0001\u0003\u1007\u0002\u0004\u041b\u0005\u041b\u0015\u043c\u0000\u0016\u043c\u0000" +
                "\u0017<\u0000\u0018<\u0000\u0019<\u0000\u001a\u043c\u0000\u001b\u043c\u0000\u001c" +
                "\u043c\u0000\u001d\u043c\u0000\u001e\u043c\u0000\u001f\u043c\u0000 \u043c\u0000!" +
                "\u043c\u0000\"\u043c\u0000#\u043c\u0000$\u043c\u0000%\u043c\u0000&<\u0000\'\u043c" +
                "\u0000(\u043c\u0000";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.Statement)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement DEFAULT_INSTANCE;
    static {
      Statement defaultInstance = new Statement();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        Statement.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<Statement> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<Statement> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ReturnOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.Return)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression value = 1;</code>
     * @return Whether the value field is set.
     */
    boolean hasValue();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression value = 1;</code>
     * @return The value.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getValue();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Return}
   */
  public  static final class Return extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          Return, Return.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.Return)
      ReturnOrBuilder {
    private Return() {
    }
    private int bitField0_;
    public static final int VALUE_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression value = 1;</code>
     */
    @java.lang.Override
    public boolean hasValue() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression value = 1;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getValue() {
      return value_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : value_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression value = 1;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setValue(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      value_ = value;
      bitField0_ |= 0x00000001;
      }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression value = 1;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeValue(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      if (value_ != null &&
          value_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance()) {
        value_ =
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.newBuilder(value_).mergeFrom(value).buildPartial();
      } else {
        value_ = value;
      }
      bitField0_ |= 0x00000001;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression value = 1;</code>
     */
    private void clearValue() {  value_ = null;
      bitField0_ = (bitField0_ & ~0x00000001);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Return}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.Return)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ReturnOrBuilder {
      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression value = 1;</code>
       */
      @java.lang.Override
      public boolean hasValue() {
        return instance.hasValue();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression value = 1;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getValue() {
        return instance.getValue();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression value = 1;</code>
       */
      public Builder setValue(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        copyOnWrite();
        instance.setValue(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression value = 1;</code>
       */
      public Builder setValue(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        copyOnWrite();
        instance.setValue(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression value = 1;</code>
       */
      public Builder mergeValue(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        copyOnWrite();
        instance.mergeValue(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression value = 1;</code>
       */
      public Builder clearValue() {  copyOnWrite();
        instance.clearValue();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.Return)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "value_",
            };
            java.lang.String info =
                "\u0004\u0001\u0000\u0001\u0001\u0001\u0001\u0000\u0000\u0001\u0001\u1409\u0000";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.Return)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return DEFAULT_INSTANCE;
    static {
      Return defaultInstance = new Return();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        Return.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<Return> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<Return> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ThrowOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.Throw)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression exception = 1 [features = { ... }</code>
     * @return Whether the exception field is set.
     */
    boolean hasException();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression exception = 1 [features = { ... }</code>
     * @return The exception.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getException();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Throw}
   */
  public  static final class Throw extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          Throw, Throw.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.Throw)
      ThrowOrBuilder {
    private Throw() {
    }
    private int bitField0_;
    public static final int EXCEPTION_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression exception_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression exception = 1 [features = { ... }</code>
     */
    @java.lang.Override
    public boolean hasException() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression exception = 1 [features = { ... }</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getException() {
      return exception_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : exception_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression exception = 1 [features = { ... }</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setException(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      exception_ = value;
      bitField0_ |= 0x00000001;
      }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression exception = 1 [features = { ... }</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeException(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      if (exception_ != null &&
          exception_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance()) {
        exception_ =
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.newBuilder(exception_).mergeFrom(value).buildPartial();
      } else {
        exception_ = value;
      }
      bitField0_ |= 0x00000001;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression exception = 1 [features = { ... }</code>
     */
    private void clearException() {  exception_ = null;
      bitField0_ = (bitField0_ & ~0x00000001);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Throw}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.Throw)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThrowOrBuilder {
      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression exception = 1 [features = { ... }</code>
       */
      @java.lang.Override
      public boolean hasException() {
        return instance.hasException();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression exception = 1 [features = { ... }</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getException() {
        return instance.getException();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression exception = 1 [features = { ... }</code>
       */
      public Builder setException(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        copyOnWrite();
        instance.setException(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression exception = 1 [features = { ... }</code>
       */
      public Builder setException(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        copyOnWrite();
        instance.setException(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression exception = 1 [features = { ... }</code>
       */
      public Builder mergeException(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        copyOnWrite();
        instance.mergeException(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression exception = 1 [features = { ... }</code>
       */
      public Builder clearException() {  copyOnWrite();
        instance.clearException();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.Throw)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "exception_",
            };
            java.lang.String info =
                "\u0004\u0001\u0000\u0001\u0001\u0001\u0001\u0000\u0000\u0001\u0001\u1509\u0000";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.Throw)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw DEFAULT_INSTANCE;
    static {
      Throw defaultInstance = new Throw();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        Throw.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<Throw> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<Throw> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface BreakOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.Break)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>int32 label_id = 1;</code>
     * @return Whether the labelId field is set.
     */
    boolean hasLabelId();
    /**
     * <code>int32 label_id = 1;</code>
     * @return The labelId.
     */
    int getLabelId();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Break}
   */
  public  static final class Break extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          Break, Break.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.Break)
      BreakOrBuilder {
    private Break() {
    }
    private int bitField0_;
    public static final int LABEL_ID_FIELD_NUMBER = 1;
    private int labelId_;
    /**
     * <code>int32 label_id = 1;</code>
     * @return Whether the labelId field is set.
     */
    @java.lang.Override
    public boolean hasLabelId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>int32 label_id = 1;</code>
     * @return The labelId.
     */
    @java.lang.Override
    public int getLabelId() {
      return labelId_;
    }
    /**
     * <code>int32 label_id = 1;</code>
     * @param value The labelId to set.
     */
    private void setLabelId(int value) {
      bitField0_ |= 0x00000001;
      labelId_ = value;
    }
    /**
     * <code>int32 label_id = 1;</code>
     */
    private void clearLabelId() {
      bitField0_ = (bitField0_ & ~0x00000001);
      labelId_ = 0;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Break}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.Break)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BreakOrBuilder {
      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>int32 label_id = 1;</code>
       * @return Whether the labelId field is set.
       */
      @java.lang.Override
      public boolean hasLabelId() {
        return instance.hasLabelId();
      }
      /**
       * <code>int32 label_id = 1;</code>
       * @return The labelId.
       */
      @java.lang.Override
      public int getLabelId() {
        return instance.getLabelId();
      }
      /**
       * <code>int32 label_id = 1;</code>
       * @param value The labelId to set.
       * @return This builder for chaining.
       */
      public Builder setLabelId(int value) {
        copyOnWrite();
        instance.setLabelId(value);
        return this;
      }
      /**
       * <code>int32 label_id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearLabelId() {
        copyOnWrite();
        instance.clearLabelId();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.Break)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "labelId_",
            };
            java.lang.String info =
                "\u0004\u0001\u0000\u0001\u0001\u0001\u0001\u0000\u0000\u0000\u0001\u1004\u0000";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.Break)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break DEFAULT_INSTANCE;
    static {
      Break defaultInstance = new Break();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        Break.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<Break> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<Break> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ContinueOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.Continue)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>int32 label_id = 1;</code>
     * @return Whether the labelId field is set.
     */
    boolean hasLabelId();
    /**
     * <code>int32 label_id = 1;</code>
     * @return The labelId.
     */
    int getLabelId();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Continue}
   */
  public  static final class Continue extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          Continue, Continue.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.Continue)
      ContinueOrBuilder {
    private Continue() {
    }
    private int bitField0_;
    public static final int LABEL_ID_FIELD_NUMBER = 1;
    private int labelId_;
    /**
     * <code>int32 label_id = 1;</code>
     * @return Whether the labelId field is set.
     */
    @java.lang.Override
    public boolean hasLabelId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>int32 label_id = 1;</code>
     * @return The labelId.
     */
    @java.lang.Override
    public int getLabelId() {
      return labelId_;
    }
    /**
     * <code>int32 label_id = 1;</code>
     * @param value The labelId to set.
     */
    private void setLabelId(int value) {
      bitField0_ |= 0x00000001;
      labelId_ = value;
    }
    /**
     * <code>int32 label_id = 1;</code>
     */
    private void clearLabelId() {
      bitField0_ = (bitField0_ & ~0x00000001);
      labelId_ = 0;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Continue}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.Continue)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ContinueOrBuilder {
      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>int32 label_id = 1;</code>
       * @return Whether the labelId field is set.
       */
      @java.lang.Override
      public boolean hasLabelId() {
        return instance.hasLabelId();
      }
      /**
       * <code>int32 label_id = 1;</code>
       * @return The labelId.
       */
      @java.lang.Override
      public int getLabelId() {
        return instance.getLabelId();
      }
      /**
       * <code>int32 label_id = 1;</code>
       * @param value The labelId to set.
       * @return This builder for chaining.
       */
      public Builder setLabelId(int value) {
        copyOnWrite();
        instance.setLabelId(value);
        return this;
      }
      /**
       * <code>int32 label_id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearLabelId() {
        copyOnWrite();
        instance.clearLabelId();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.Continue)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "labelId_",
            };
            java.lang.String info =
                "\u0004\u0001\u0000\u0001\u0001\u0001\u0001\u0000\u0000\u0000\u0001\u1004\u0000";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.Continue)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue DEFAULT_INSTANCE;
    static {
      Continue defaultInstance = new Continue();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        Continue.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<Continue> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<Continue> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface DebuggerOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.Debugger)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Debugger}
   */
  public  static final class Debugger extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          Debugger, Debugger.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.Debugger)
      DebuggerOrBuilder {
    private Debugger() {
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Debugger}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.Debugger)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DebuggerOrBuilder {
      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.Debugger)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = null;java.lang.String info =
                "\u0004\u0000";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.Debugger)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger DEFAULT_INSTANCE;
    static {
      Debugger defaultInstance = new Debugger();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        Debugger.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<Debugger> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<Debugger> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ExpressionStatementOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.ExpressionStatement)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 1 [features = { ... }</code>
     * @return Whether the expression field is set.
     */
    boolean hasExpression();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 1 [features = { ... }</code>
     * @return The expression.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getExpression();

    /**
     * <code>int32 exported_tag_id = 2;</code>
     * @return Whether the exportedTagId field is set.
     */
    boolean hasExportedTagId();
    /**
     * <code>int32 exported_tag_id = 2;</code>
     * @return The exportedTagId.
     */
    int getExportedTagId();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.ExpressionStatement}
   */
  public  static final class ExpressionStatement extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          ExpressionStatement, ExpressionStatement.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.ExpressionStatement)
      ExpressionStatementOrBuilder {
    private ExpressionStatement() {
    }
    private int bitField0_;
    public static final int EXPRESSION_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression expression_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 1 [features = { ... }</code>
     */
    @java.lang.Override
    public boolean hasExpression() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 1 [features = { ... }</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getExpression() {
      return expression_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : expression_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 1 [features = { ... }</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setExpression(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      expression_ = value;
      bitField0_ |= 0x00000001;
      }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 1 [features = { ... }</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeExpression(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      if (expression_ != null &&
          expression_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance()) {
        expression_ =
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.newBuilder(expression_).mergeFrom(value).buildPartial();
      } else {
        expression_ = value;
      }
      bitField0_ |= 0x00000001;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 1 [features = { ... }</code>
     */
    private void clearExpression() {  expression_ = null;
      bitField0_ = (bitField0_ & ~0x00000001);
    }

    public static final int EXPORTED_TAG_ID_FIELD_NUMBER = 2;
    private int exportedTagId_;
    /**
     * <code>int32 exported_tag_id = 2;</code>
     * @return Whether the exportedTagId field is set.
     */
    @java.lang.Override
    public boolean hasExportedTagId() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>int32 exported_tag_id = 2;</code>
     * @return The exportedTagId.
     */
    @java.lang.Override
    public int getExportedTagId() {
      return exportedTagId_;
    }
    /**
     * <code>int32 exported_tag_id = 2;</code>
     * @param value The exportedTagId to set.
     */
    private void setExportedTagId(int value) {
      bitField0_ |= 0x00000002;
      exportedTagId_ = value;
    }
    /**
     * <code>int32 exported_tag_id = 2;</code>
     */
    private void clearExportedTagId() {
      bitField0_ = (bitField0_ & ~0x00000002);
      exportedTagId_ = 0;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.ExpressionStatement}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.ExpressionStatement)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatementOrBuilder {
      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 1 [features = { ... }</code>
       */
      @java.lang.Override
      public boolean hasExpression() {
        return instance.hasExpression();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 1 [features = { ... }</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getExpression() {
        return instance.getExpression();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 1 [features = { ... }</code>
       */
      public Builder setExpression(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        copyOnWrite();
        instance.setExpression(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 1 [features = { ... }</code>
       */
      public Builder setExpression(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        copyOnWrite();
        instance.setExpression(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 1 [features = { ... }</code>
       */
      public Builder mergeExpression(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        copyOnWrite();
        instance.mergeExpression(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 1 [features = { ... }</code>
       */
      public Builder clearExpression() {  copyOnWrite();
        instance.clearExpression();
        return this;
      }

      /**
       * <code>int32 exported_tag_id = 2;</code>
       * @return Whether the exportedTagId field is set.
       */
      @java.lang.Override
      public boolean hasExportedTagId() {
        return instance.hasExportedTagId();
      }
      /**
       * <code>int32 exported_tag_id = 2;</code>
       * @return The exportedTagId.
       */
      @java.lang.Override
      public int getExportedTagId() {
        return instance.getExportedTagId();
      }
      /**
       * <code>int32 exported_tag_id = 2;</code>
       * @param value The exportedTagId to set.
       * @return This builder for chaining.
       */
      public Builder setExportedTagId(int value) {
        copyOnWrite();
        instance.setExportedTagId(value);
        return this;
      }
      /**
       * <code>int32 exported_tag_id = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearExportedTagId() {
        copyOnWrite();
        instance.clearExportedTagId();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.ExpressionStatement)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "expression_",
              "exportedTagId_",
            };
            java.lang.String info =
                "\u0004\u0002\u0000\u0001\u0001\u0002\u0002\u0000\u0000\u0001\u0001\u1509\u0000\u0002" +
                "\u1004\u0001";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.ExpressionStatement)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement DEFAULT_INSTANCE;
    static {
      ExpressionStatement defaultInstance = new ExpressionStatement();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        ExpressionStatement.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<ExpressionStatement> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<ExpressionStatement> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface VarsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.Vars)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.VarDeclaration declaration = 1;</code>
     */
    java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration> 
        getDeclarationList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.VarDeclaration declaration = 1;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration getDeclaration(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.VarDeclaration declaration = 1;</code>
     */
    int getDeclarationCount();

    /**
     * <code>bool multiline = 2 [default = false];</code>
     * @return Whether the multiline field is set.
     */
    boolean hasMultiline();
    /**
     * <code>bool multiline = 2 [default = false];</code>
     * @return The multiline.
     */
    boolean getMultiline();

    /**
     * <code>int32 exported_package_id = 3;</code>
     * @return Whether the exportedPackageId field is set.
     */
    boolean hasExportedPackageId();
    /**
     * <code>int32 exported_package_id = 3;</code>
     * @return The exportedPackageId.
     */
    int getExportedPackageId();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Vars}
   */
  public  static final class Vars extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          Vars, Vars.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.Vars)
      VarsOrBuilder {
    private Vars() {
      declaration_ = emptyProtobufList();
    }
    private int bitField0_;
    public static final int DECLARATION_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration> declaration_;
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.VarDeclaration declaration = 1;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration> getDeclarationList() {
      return declaration_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.VarDeclaration declaration = 1;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclarationOrBuilder> 
        getDeclarationOrBuilderList() {
      return declaration_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.VarDeclaration declaration = 1;</code>
     */
    @java.lang.Override
    public int getDeclarationCount() {
      return declaration_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.VarDeclaration declaration = 1;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration getDeclaration(int index) {
      return declaration_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.VarDeclaration declaration = 1;</code>
     */
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclarationOrBuilder getDeclarationOrBuilder(
        int index) {
      return declaration_.get(index);
    }
    private void ensureDeclarationIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration> tmp = declaration_;
      if (!tmp.isModifiable()) {
        declaration_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.VarDeclaration declaration = 1;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setDeclaration(
        int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration value) {
      value.getClass();  // minimal bytecode null check
      ensureDeclarationIsMutable();
      declaration_.set(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.VarDeclaration declaration = 1;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addDeclaration(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration value) {
      value.getClass();  // minimal bytecode null check
      ensureDeclarationIsMutable();
      declaration_.add(value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.VarDeclaration declaration = 1;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addDeclaration(
        int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration value) {
      value.getClass();  // minimal bytecode null check
      ensureDeclarationIsMutable();
      declaration_.add(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.VarDeclaration declaration = 1;</code>
     */
    private void addAllDeclaration(
        java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration> values) {
      ensureDeclarationIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, declaration_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.VarDeclaration declaration = 1;</code>
     */
    private void clearDeclaration() {
      declaration_ = emptyProtobufList();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.VarDeclaration declaration = 1;</code>
     */
    private void removeDeclaration(int index) {
      ensureDeclarationIsMutable();
      declaration_.remove(index);
    }

    public static final int MULTILINE_FIELD_NUMBER = 2;
    private boolean multiline_;
    /**
     * <code>bool multiline = 2 [default = false];</code>
     * @return Whether the multiline field is set.
     */
    @java.lang.Override
    public boolean hasMultiline() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>bool multiline = 2 [default = false];</code>
     * @return The multiline.
     */
    @java.lang.Override
    public boolean getMultiline() {
      return multiline_;
    }
    /**
     * <code>bool multiline = 2 [default = false];</code>
     * @param value The multiline to set.
     */
    private void setMultiline(boolean value) {
      bitField0_ |= 0x00000001;
      multiline_ = value;
    }
    /**
     * <code>bool multiline = 2 [default = false];</code>
     */
    private void clearMultiline() {
      bitField0_ = (bitField0_ & ~0x00000001);
      multiline_ = false;
    }

    public static final int EXPORTED_PACKAGE_ID_FIELD_NUMBER = 3;
    private int exportedPackageId_;
    /**
     * <code>int32 exported_package_id = 3;</code>
     * @return Whether the exportedPackageId field is set.
     */
    @java.lang.Override
    public boolean hasExportedPackageId() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>int32 exported_package_id = 3;</code>
     * @return The exportedPackageId.
     */
    @java.lang.Override
    public int getExportedPackageId() {
      return exportedPackageId_;
    }
    /**
     * <code>int32 exported_package_id = 3;</code>
     * @param value The exportedPackageId to set.
     */
    private void setExportedPackageId(int value) {
      bitField0_ |= 0x00000002;
      exportedPackageId_ = value;
    }
    /**
     * <code>int32 exported_package_id = 3;</code>
     */
    private void clearExportedPackageId() {
      bitField0_ = (bitField0_ & ~0x00000002);
      exportedPackageId_ = 0;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Vars}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.Vars)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarsOrBuilder {
      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.VarDeclaration declaration = 1;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration> getDeclarationList() {
        return java.util.Collections.unmodifiableList(
            instance.getDeclarationList());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.VarDeclaration declaration = 1;</code>
       */
      @java.lang.Override
      public int getDeclarationCount() {
        return instance.getDeclarationCount();
      }/**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.VarDeclaration declaration = 1;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration getDeclaration(int index) {
        return instance.getDeclaration(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.VarDeclaration declaration = 1;</code>
       */
      public Builder setDeclaration(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration value) {
        copyOnWrite();
        instance.setDeclaration(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.VarDeclaration declaration = 1;</code>
       */
      public Builder setDeclaration(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration.Builder builderForValue) {
        copyOnWrite();
        instance.setDeclaration(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.VarDeclaration declaration = 1;</code>
       */
      public Builder addDeclaration(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration value) {
        copyOnWrite();
        instance.addDeclaration(value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.VarDeclaration declaration = 1;</code>
       */
      public Builder addDeclaration(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration value) {
        copyOnWrite();
        instance.addDeclaration(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.VarDeclaration declaration = 1;</code>
       */
      public Builder addDeclaration(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration.Builder builderForValue) {
        copyOnWrite();
        instance.addDeclaration(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.VarDeclaration declaration = 1;</code>
       */
      public Builder addDeclaration(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration.Builder builderForValue) {
        copyOnWrite();
        instance.addDeclaration(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.VarDeclaration declaration = 1;</code>
       */
      public Builder addAllDeclaration(
          java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration> values) {
        copyOnWrite();
        instance.addAllDeclaration(values);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.VarDeclaration declaration = 1;</code>
       */
      public Builder clearDeclaration() {
        copyOnWrite();
        instance.clearDeclaration();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.VarDeclaration declaration = 1;</code>
       */
      public Builder removeDeclaration(int index) {
        copyOnWrite();
        instance.removeDeclaration(index);
        return this;
      }

      /**
       * <code>bool multiline = 2 [default = false];</code>
       * @return Whether the multiline field is set.
       */
      @java.lang.Override
      public boolean hasMultiline() {
        return instance.hasMultiline();
      }
      /**
       * <code>bool multiline = 2 [default = false];</code>
       * @return The multiline.
       */
      @java.lang.Override
      public boolean getMultiline() {
        return instance.getMultiline();
      }
      /**
       * <code>bool multiline = 2 [default = false];</code>
       * @param value The multiline to set.
       * @return This builder for chaining.
       */
      public Builder setMultiline(boolean value) {
        copyOnWrite();
        instance.setMultiline(value);
        return this;
      }
      /**
       * <code>bool multiline = 2 [default = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearMultiline() {
        copyOnWrite();
        instance.clearMultiline();
        return this;
      }

      /**
       * <code>int32 exported_package_id = 3;</code>
       * @return Whether the exportedPackageId field is set.
       */
      @java.lang.Override
      public boolean hasExportedPackageId() {
        return instance.hasExportedPackageId();
      }
      /**
       * <code>int32 exported_package_id = 3;</code>
       * @return The exportedPackageId.
       */
      @java.lang.Override
      public int getExportedPackageId() {
        return instance.getExportedPackageId();
      }
      /**
       * <code>int32 exported_package_id = 3;</code>
       * @param value The exportedPackageId to set.
       * @return This builder for chaining.
       */
      public Builder setExportedPackageId(int value) {
        copyOnWrite();
        instance.setExportedPackageId(value);
        return this;
      }
      /**
       * <code>int32 exported_package_id = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearExportedPackageId() {
        copyOnWrite();
        instance.clearExportedPackageId();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.Vars)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "declaration_",
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration.class,
              "multiline_",
              "exportedPackageId_",
            };
            java.lang.String info =
                "\u0004\u0003\u0000\u0001\u0001\u0003\u0003\u0000\u0001\u0001\u0001\u041b\u0002\u1007" +
                "\u0000\u0003\u1004\u0001";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.Vars)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars DEFAULT_INSTANCE;
    static {
      Vars defaultInstance = new Vars();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        Vars.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<Vars> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<Vars> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface VarDeclarationOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.VarDeclaration)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>int32 name_id = 1 [features = { ... }</code>
     * @return Whether the nameId field is set.
     */
    boolean hasNameId();
    /**
     * <code>int32 name_id = 1 [features = { ... }</code>
     * @return The nameId.
     */
    int getNameId();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression initial_value = 2;</code>
     * @return Whether the initialValue field is set.
     */
    boolean hasInitialValue();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression initial_value = 2;</code>
     * @return The initialValue.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getInitialValue();

    /**
     * <code>int32 fileId = 3;</code>
     * @return Whether the fileId field is set.
     */
    boolean hasFileId();
    /**
     * <code>int32 fileId = 3;</code>
     * @return The fileId.
     */
    int getFileId();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 4;</code>
     * @return Whether the location field is set.
     */
    boolean hasLocation();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 4;</code>
     * @return The location.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location getLocation();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.VarDeclaration}
   */
  public  static final class VarDeclaration extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          VarDeclaration, VarDeclaration.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.VarDeclaration)
      VarDeclarationOrBuilder {
    private VarDeclaration() {
    }
    private int bitField0_;
    public static final int NAME_ID_FIELD_NUMBER = 1;
    private int nameId_;
    /**
     * <code>int32 name_id = 1 [features = { ... }</code>
     * @return Whether the nameId field is set.
     */
    @java.lang.Override
    public boolean hasNameId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>int32 name_id = 1 [features = { ... }</code>
     * @return The nameId.
     */
    @java.lang.Override
    public int getNameId() {
      return nameId_;
    }
    /**
     * <code>int32 name_id = 1 [features = { ... }</code>
     * @param value The nameId to set.
     */
    private void setNameId(int value) {
      bitField0_ |= 0x00000001;
      nameId_ = value;
    }
    /**
     * <code>int32 name_id = 1 [features = { ... }</code>
     */
    private void clearNameId() {
      bitField0_ = (bitField0_ & ~0x00000001);
      nameId_ = 0;
    }

    public static final int INITIAL_VALUE_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression initialValue_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression initial_value = 2;</code>
     */
    @java.lang.Override
    public boolean hasInitialValue() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression initial_value = 2;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getInitialValue() {
      return initialValue_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : initialValue_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression initial_value = 2;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setInitialValue(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      initialValue_ = value;
      bitField0_ |= 0x00000002;
      }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression initial_value = 2;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeInitialValue(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      if (initialValue_ != null &&
          initialValue_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance()) {
        initialValue_ =
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.newBuilder(initialValue_).mergeFrom(value).buildPartial();
      } else {
        initialValue_ = value;
      }
      bitField0_ |= 0x00000002;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression initial_value = 2;</code>
     */
    private void clearInitialValue() {  initialValue_ = null;
      bitField0_ = (bitField0_ & ~0x00000002);
    }

    public static final int FILEID_FIELD_NUMBER = 3;
    private int fileId_;
    /**
     * <code>int32 fileId = 3;</code>
     * @return Whether the fileId field is set.
     */
    @java.lang.Override
    public boolean hasFileId() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>int32 fileId = 3;</code>
     * @return The fileId.
     */
    @java.lang.Override
    public int getFileId() {
      return fileId_;
    }
    /**
     * <code>int32 fileId = 3;</code>
     * @param value The fileId to set.
     */
    private void setFileId(int value) {
      bitField0_ |= 0x00000004;
      fileId_ = value;
    }
    /**
     * <code>int32 fileId = 3;</code>
     */
    private void clearFileId() {
      bitField0_ = (bitField0_ & ~0x00000004);
      fileId_ = 0;
    }

    public static final int LOCATION_FIELD_NUMBER = 4;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location location_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 4;</code>
     */
    @java.lang.Override
    public boolean hasLocation() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 4;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location getLocation() {
      return location_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location.getDefaultInstance() : location_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 4;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setLocation(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location value) {
      value.getClass();  // minimal bytecode null check
      location_ = value;
      bitField0_ |= 0x00000008;
      }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 4;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeLocation(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location value) {
      value.getClass();  // minimal bytecode null check
      if (location_ != null &&
          location_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location.getDefaultInstance()) {
        location_ =
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location.newBuilder(location_).mergeFrom(value).buildPartial();
      } else {
        location_ = value;
      }
      bitField0_ |= 0x00000008;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 4;</code>
     */
    private void clearLocation() {  location_ = null;
      bitField0_ = (bitField0_ & ~0x00000008);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.VarDeclaration}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.VarDeclaration)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclarationOrBuilder {
      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>int32 name_id = 1 [features = { ... }</code>
       * @return Whether the nameId field is set.
       */
      @java.lang.Override
      public boolean hasNameId() {
        return instance.hasNameId();
      }
      /**
       * <code>int32 name_id = 1 [features = { ... }</code>
       * @return The nameId.
       */
      @java.lang.Override
      public int getNameId() {
        return instance.getNameId();
      }
      /**
       * <code>int32 name_id = 1 [features = { ... }</code>
       * @param value The nameId to set.
       * @return This builder for chaining.
       */
      public Builder setNameId(int value) {
        copyOnWrite();
        instance.setNameId(value);
        return this;
      }
      /**
       * <code>int32 name_id = 1 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearNameId() {
        copyOnWrite();
        instance.clearNameId();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression initial_value = 2;</code>
       */
      @java.lang.Override
      public boolean hasInitialValue() {
        return instance.hasInitialValue();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression initial_value = 2;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getInitialValue() {
        return instance.getInitialValue();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression initial_value = 2;</code>
       */
      public Builder setInitialValue(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        copyOnWrite();
        instance.setInitialValue(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression initial_value = 2;</code>
       */
      public Builder setInitialValue(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        copyOnWrite();
        instance.setInitialValue(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression initial_value = 2;</code>
       */
      public Builder mergeInitialValue(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        copyOnWrite();
        instance.mergeInitialValue(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression initial_value = 2;</code>
       */
      public Builder clearInitialValue() {  copyOnWrite();
        instance.clearInitialValue();
        return this;
      }

      /**
       * <code>int32 fileId = 3;</code>
       * @return Whether the fileId field is set.
       */
      @java.lang.Override
      public boolean hasFileId() {
        return instance.hasFileId();
      }
      /**
       * <code>int32 fileId = 3;</code>
       * @return The fileId.
       */
      @java.lang.Override
      public int getFileId() {
        return instance.getFileId();
      }
      /**
       * <code>int32 fileId = 3;</code>
       * @param value The fileId to set.
       * @return This builder for chaining.
       */
      public Builder setFileId(int value) {
        copyOnWrite();
        instance.setFileId(value);
        return this;
      }
      /**
       * <code>int32 fileId = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearFileId() {
        copyOnWrite();
        instance.clearFileId();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 4;</code>
       */
      @java.lang.Override
      public boolean hasLocation() {
        return instance.hasLocation();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 4;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location getLocation() {
        return instance.getLocation();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 4;</code>
       */
      public Builder setLocation(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location value) {
        copyOnWrite();
        instance.setLocation(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 4;</code>
       */
      public Builder setLocation(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location.Builder builderForValue) {
        copyOnWrite();
        instance.setLocation(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 4;</code>
       */
      public Builder mergeLocation(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location value) {
        copyOnWrite();
        instance.mergeLocation(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 4;</code>
       */
      public Builder clearLocation() {  copyOnWrite();
        instance.clearLocation();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.VarDeclaration)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "nameId_",
              "initialValue_",
              "fileId_",
              "location_",
            };
            java.lang.String info =
                "\u0004\u0004\u0000\u0001\u0001\u0004\u0004\u0000\u0000\u0003\u0001\u1504\u0000\u0002" +
                "\u1409\u0001\u0003\u1004\u0002\u0004\u1409\u0003";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.VarDeclaration)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration DEFAULT_INSTANCE;
    static {
      VarDeclaration defaultInstance = new VarDeclaration();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        VarDeclaration.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<VarDeclaration> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<VarDeclaration> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface BlockOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.Block)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
     */
    java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement> 
        getStatementList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getStatement(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
     */
    int getStatementCount();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Block}
   */
  public  static final class Block extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          Block, Block.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.Block)
      BlockOrBuilder {
    private Block() {
      statement_ = emptyProtobufList();
    }
    public static final int STATEMENT_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement> statement_;
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement> getStatementList() {
      return statement_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder> 
        getStatementOrBuilderList() {
      return statement_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
     */
    @java.lang.Override
    public int getStatementCount() {
      return statement_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getStatement(int index) {
      return statement_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
     */
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder getStatementOrBuilder(
        int index) {
      return statement_.get(index);
    }
    private void ensureStatementIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement> tmp = statement_;
      if (!tmp.isModifiable()) {
        statement_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setStatement(
        int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
      value.getClass();  // minimal bytecode null check
      ensureStatementIsMutable();
      statement_.set(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
      value.getClass();  // minimal bytecode null check
      ensureStatementIsMutable();
      statement_.add(value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addStatement(
        int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
      value.getClass();  // minimal bytecode null check
      ensureStatementIsMutable();
      statement_.add(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
     */
    private void addAllStatement(
        java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement> values) {
      ensureStatementIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, statement_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
     */
    private void clearStatement() {
      statement_ = emptyProtobufList();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
     */
    private void removeStatement(int index) {
      ensureStatementIsMutable();
      statement_.remove(index);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Block}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.Block)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BlockOrBuilder {
      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement> getStatementList() {
        return java.util.Collections.unmodifiableList(
            instance.getStatementList());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
       */
      @java.lang.Override
      public int getStatementCount() {
        return instance.getStatementCount();
      }/**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getStatement(int index) {
        return instance.getStatement(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
       */
      public Builder setStatement(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
        copyOnWrite();
        instance.setStatement(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
       */
      public Builder setStatement(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder builderForValue) {
        copyOnWrite();
        instance.setStatement(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
       */
      public Builder addStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
        copyOnWrite();
        instance.addStatement(value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
       */
      public Builder addStatement(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
        copyOnWrite();
        instance.addStatement(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
       */
      public Builder addStatement(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder builderForValue) {
        copyOnWrite();
        instance.addStatement(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
       */
      public Builder addStatement(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder builderForValue) {
        copyOnWrite();
        instance.addStatement(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
       */
      public Builder addAllStatement(
          java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement> values) {
        copyOnWrite();
        instance.addAllStatement(values);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
       */
      public Builder clearStatement() {
        copyOnWrite();
        instance.clearStatement();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
       */
      public Builder removeStatement(int index) {
        copyOnWrite();
        instance.removeStatement(index);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.Block)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "statement_",
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.class,
            };
            java.lang.String info =
                "\u0004\u0001\u0000\u0000\u0001\u0001\u0001\u0000\u0001\u0001\u0001\u041b";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.Block)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block DEFAULT_INSTANCE;
    static {
      Block defaultInstance = new Block();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        Block.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<Block> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<Block> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface CompositeBlockOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.CompositeBlock)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
     */
    java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement> 
        getStatementList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getStatement(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
     */
    int getStatementCount();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.CompositeBlock}
   */
  public  static final class CompositeBlock extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          CompositeBlock, CompositeBlock.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.CompositeBlock)
      CompositeBlockOrBuilder {
    private CompositeBlock() {
      statement_ = emptyProtobufList();
    }
    public static final int STATEMENT_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement> statement_;
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement> getStatementList() {
      return statement_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder> 
        getStatementOrBuilderList() {
      return statement_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
     */
    @java.lang.Override
    public int getStatementCount() {
      return statement_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getStatement(int index) {
      return statement_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
     */
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder getStatementOrBuilder(
        int index) {
      return statement_.get(index);
    }
    private void ensureStatementIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement> tmp = statement_;
      if (!tmp.isModifiable()) {
        statement_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setStatement(
        int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
      value.getClass();  // minimal bytecode null check
      ensureStatementIsMutable();
      statement_.set(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
      value.getClass();  // minimal bytecode null check
      ensureStatementIsMutable();
      statement_.add(value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addStatement(
        int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
      value.getClass();  // minimal bytecode null check
      ensureStatementIsMutable();
      statement_.add(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
     */
    private void addAllStatement(
        java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement> values) {
      ensureStatementIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, statement_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
     */
    private void clearStatement() {
      statement_ = emptyProtobufList();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
     */
    private void removeStatement(int index) {
      ensureStatementIsMutable();
      statement_.remove(index);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.CompositeBlock}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.CompositeBlock)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlockOrBuilder {
      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement> getStatementList() {
        return java.util.Collections.unmodifiableList(
            instance.getStatementList());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
       */
      @java.lang.Override
      public int getStatementCount() {
        return instance.getStatementCount();
      }/**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getStatement(int index) {
        return instance.getStatement(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
       */
      public Builder setStatement(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
        copyOnWrite();
        instance.setStatement(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
       */
      public Builder setStatement(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder builderForValue) {
        copyOnWrite();
        instance.setStatement(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
       */
      public Builder addStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
        copyOnWrite();
        instance.addStatement(value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
       */
      public Builder addStatement(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
        copyOnWrite();
        instance.addStatement(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
       */
      public Builder addStatement(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder builderForValue) {
        copyOnWrite();
        instance.addStatement(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
       */
      public Builder addStatement(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder builderForValue) {
        copyOnWrite();
        instance.addStatement(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
       */
      public Builder addAllStatement(
          java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement> values) {
        copyOnWrite();
        instance.addAllStatement(values);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
       */
      public Builder clearStatement() {
        copyOnWrite();
        instance.clearStatement();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
       */
      public Builder removeStatement(int index) {
        copyOnWrite();
        instance.removeStatement(index);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.CompositeBlock)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "statement_",
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.class,
            };
            java.lang.String info =
                "\u0004\u0001\u0000\u0000\u0001\u0001\u0001\u0000\u0001\u0001\u0001\u041b";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.CompositeBlock)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock DEFAULT_INSTANCE;
    static {
      CompositeBlock defaultInstance = new CompositeBlock();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        CompositeBlock.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<CompositeBlock> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<CompositeBlock> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface LabelOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.Label)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>int32 nameId = 1 [features = { ... }</code>
     * @return Whether the nameId field is set.
     */
    boolean hasNameId();
    /**
     * <code>int32 nameId = 1 [features = { ... }</code>
     * @return The nameId.
     */
    int getNameId();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement inner_statement = 2 [features = { ... }</code>
     * @return Whether the innerStatement field is set.
     */
    boolean hasInnerStatement();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement inner_statement = 2 [features = { ... }</code>
     * @return The innerStatement.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getInnerStatement();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Label}
   */
  public  static final class Label extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          Label, Label.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.Label)
      LabelOrBuilder {
    private Label() {
    }
    private int bitField0_;
    public static final int NAMEID_FIELD_NUMBER = 1;
    private int nameId_;
    /**
     * <code>int32 nameId = 1 [features = { ... }</code>
     * @return Whether the nameId field is set.
     */
    @java.lang.Override
    public boolean hasNameId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>int32 nameId = 1 [features = { ... }</code>
     * @return The nameId.
     */
    @java.lang.Override
    public int getNameId() {
      return nameId_;
    }
    /**
     * <code>int32 nameId = 1 [features = { ... }</code>
     * @param value The nameId to set.
     */
    private void setNameId(int value) {
      bitField0_ |= 0x00000001;
      nameId_ = value;
    }
    /**
     * <code>int32 nameId = 1 [features = { ... }</code>
     */
    private void clearNameId() {
      bitField0_ = (bitField0_ & ~0x00000001);
      nameId_ = 0;
    }

    public static final int INNER_STATEMENT_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement innerStatement_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement inner_statement = 2 [features = { ... }</code>
     */
    @java.lang.Override
    public boolean hasInnerStatement() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement inner_statement = 2 [features = { ... }</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getInnerStatement() {
      return innerStatement_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance() : innerStatement_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement inner_statement = 2 [features = { ... }</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setInnerStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
      value.getClass();  // minimal bytecode null check
      innerStatement_ = value;
      bitField0_ |= 0x00000002;
      }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement inner_statement = 2 [features = { ... }</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeInnerStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
      value.getClass();  // minimal bytecode null check
      if (innerStatement_ != null &&
          innerStatement_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance()) {
        innerStatement_ =
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.newBuilder(innerStatement_).mergeFrom(value).buildPartial();
      } else {
        innerStatement_ = value;
      }
      bitField0_ |= 0x00000002;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement inner_statement = 2 [features = { ... }</code>
     */
    private void clearInnerStatement() {  innerStatement_ = null;
      bitField0_ = (bitField0_ & ~0x00000002);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Label}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.Label)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LabelOrBuilder {
      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>int32 nameId = 1 [features = { ... }</code>
       * @return Whether the nameId field is set.
       */
      @java.lang.Override
      public boolean hasNameId() {
        return instance.hasNameId();
      }
      /**
       * <code>int32 nameId = 1 [features = { ... }</code>
       * @return The nameId.
       */
      @java.lang.Override
      public int getNameId() {
        return instance.getNameId();
      }
      /**
       * <code>int32 nameId = 1 [features = { ... }</code>
       * @param value The nameId to set.
       * @return This builder for chaining.
       */
      public Builder setNameId(int value) {
        copyOnWrite();
        instance.setNameId(value);
        return this;
      }
      /**
       * <code>int32 nameId = 1 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearNameId() {
        copyOnWrite();
        instance.clearNameId();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement inner_statement = 2 [features = { ... }</code>
       */
      @java.lang.Override
      public boolean hasInnerStatement() {
        return instance.hasInnerStatement();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement inner_statement = 2 [features = { ... }</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getInnerStatement() {
        return instance.getInnerStatement();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement inner_statement = 2 [features = { ... }</code>
       */
      public Builder setInnerStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
        copyOnWrite();
        instance.setInnerStatement(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement inner_statement = 2 [features = { ... }</code>
       */
      public Builder setInnerStatement(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder builderForValue) {
        copyOnWrite();
        instance.setInnerStatement(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement inner_statement = 2 [features = { ... }</code>
       */
      public Builder mergeInnerStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
        copyOnWrite();
        instance.mergeInnerStatement(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement inner_statement = 2 [features = { ... }</code>
       */
      public Builder clearInnerStatement() {  copyOnWrite();
        instance.clearInnerStatement();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.Label)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "nameId_",
              "innerStatement_",
            };
            java.lang.String info =
                "\u0004\u0002\u0000\u0001\u0001\u0002\u0002\u0000\u0000\u0002\u0001\u1504\u0000\u0002" +
                "\u1509\u0001";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.Label)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label DEFAULT_INSTANCE;
    static {
      Label defaultInstance = new Label();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        Label.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<Label> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<Label> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface IfOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.If)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
     * @return Whether the condition field is set.
     */
    boolean hasCondition();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
     * @return The condition.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getCondition();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement then_statement = 2 [features = { ... }</code>
     * @return Whether the thenStatement field is set.
     */
    boolean hasThenStatement();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement then_statement = 2 [features = { ... }</code>
     * @return The thenStatement.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getThenStatement();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement else_statement = 3;</code>
     * @return Whether the elseStatement field is set.
     */
    boolean hasElseStatement();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement else_statement = 3;</code>
     * @return The elseStatement.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getElseStatement();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.If}
   */
  public  static final class If extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          If, If.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.If)
      IfOrBuilder {
    private If() {
    }
    private int bitField0_;
    public static final int CONDITION_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression condition_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
     */
    @java.lang.Override
    public boolean hasCondition() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getCondition() {
      return condition_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : condition_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setCondition(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      condition_ = value;
      bitField0_ |= 0x00000001;
      }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeCondition(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      if (condition_ != null &&
          condition_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance()) {
        condition_ =
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.newBuilder(condition_).mergeFrom(value).buildPartial();
      } else {
        condition_ = value;
      }
      bitField0_ |= 0x00000001;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
     */
    private void clearCondition() {  condition_ = null;
      bitField0_ = (bitField0_ & ~0x00000001);
    }

    public static final int THEN_STATEMENT_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement thenStatement_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement then_statement = 2 [features = { ... }</code>
     */
    @java.lang.Override
    public boolean hasThenStatement() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement then_statement = 2 [features = { ... }</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getThenStatement() {
      return thenStatement_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance() : thenStatement_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement then_statement = 2 [features = { ... }</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setThenStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
      value.getClass();  // minimal bytecode null check
      thenStatement_ = value;
      bitField0_ |= 0x00000002;
      }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement then_statement = 2 [features = { ... }</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeThenStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
      value.getClass();  // minimal bytecode null check
      if (thenStatement_ != null &&
          thenStatement_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance()) {
        thenStatement_ =
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.newBuilder(thenStatement_).mergeFrom(value).buildPartial();
      } else {
        thenStatement_ = value;
      }
      bitField0_ |= 0x00000002;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement then_statement = 2 [features = { ... }</code>
     */
    private void clearThenStatement() {  thenStatement_ = null;
      bitField0_ = (bitField0_ & ~0x00000002);
    }

    public static final int ELSE_STATEMENT_FIELD_NUMBER = 3;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement elseStatement_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement else_statement = 3;</code>
     */
    @java.lang.Override
    public boolean hasElseStatement() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement else_statement = 3;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getElseStatement() {
      return elseStatement_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance() : elseStatement_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement else_statement = 3;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setElseStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
      value.getClass();  // minimal bytecode null check
      elseStatement_ = value;
      bitField0_ |= 0x00000004;
      }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement else_statement = 3;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeElseStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
      value.getClass();  // minimal bytecode null check
      if (elseStatement_ != null &&
          elseStatement_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance()) {
        elseStatement_ =
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.newBuilder(elseStatement_).mergeFrom(value).buildPartial();
      } else {
        elseStatement_ = value;
      }
      bitField0_ |= 0x00000004;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement else_statement = 3;</code>
     */
    private void clearElseStatement() {  elseStatement_ = null;
      bitField0_ = (bitField0_ & ~0x00000004);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.If}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.If)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IfOrBuilder {
      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
       */
      @java.lang.Override
      public boolean hasCondition() {
        return instance.hasCondition();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getCondition() {
        return instance.getCondition();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
       */
      public Builder setCondition(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        copyOnWrite();
        instance.setCondition(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
       */
      public Builder setCondition(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        copyOnWrite();
        instance.setCondition(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
       */
      public Builder mergeCondition(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        copyOnWrite();
        instance.mergeCondition(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
       */
      public Builder clearCondition() {  copyOnWrite();
        instance.clearCondition();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement then_statement = 2 [features = { ... }</code>
       */
      @java.lang.Override
      public boolean hasThenStatement() {
        return instance.hasThenStatement();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement then_statement = 2 [features = { ... }</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getThenStatement() {
        return instance.getThenStatement();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement then_statement = 2 [features = { ... }</code>
       */
      public Builder setThenStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
        copyOnWrite();
        instance.setThenStatement(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement then_statement = 2 [features = { ... }</code>
       */
      public Builder setThenStatement(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder builderForValue) {
        copyOnWrite();
        instance.setThenStatement(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement then_statement = 2 [features = { ... }</code>
       */
      public Builder mergeThenStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
        copyOnWrite();
        instance.mergeThenStatement(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement then_statement = 2 [features = { ... }</code>
       */
      public Builder clearThenStatement() {  copyOnWrite();
        instance.clearThenStatement();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement else_statement = 3;</code>
       */
      @java.lang.Override
      public boolean hasElseStatement() {
        return instance.hasElseStatement();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement else_statement = 3;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getElseStatement() {
        return instance.getElseStatement();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement else_statement = 3;</code>
       */
      public Builder setElseStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
        copyOnWrite();
        instance.setElseStatement(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement else_statement = 3;</code>
       */
      public Builder setElseStatement(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder builderForValue) {
        copyOnWrite();
        instance.setElseStatement(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement else_statement = 3;</code>
       */
      public Builder mergeElseStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
        copyOnWrite();
        instance.mergeElseStatement(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement else_statement = 3;</code>
       */
      public Builder clearElseStatement() {  copyOnWrite();
        instance.clearElseStatement();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.If)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "condition_",
              "thenStatement_",
              "elseStatement_",
            };
            java.lang.String info =
                "\u0004\u0003\u0000\u0001\u0001\u0003\u0003\u0000\u0000\u0003\u0001\u1509\u0000\u0002" +
                "\u1509\u0001\u0003\u1409\u0002";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.If)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If DEFAULT_INSTANCE;
    static {
      If defaultInstance = new If();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        If.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<If> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<If> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface SwitchOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.Switch)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 1 [features = { ... }</code>
     * @return Whether the expression field is set.
     */
    boolean hasExpression();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 1 [features = { ... }</code>
     * @return The expression.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getExpression();

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.SwitchEntry entry = 2;</code>
     */
    java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry> 
        getEntryList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.SwitchEntry entry = 2;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry getEntry(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.SwitchEntry entry = 2;</code>
     */
    int getEntryCount();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Switch}
   */
  public  static final class Switch extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          Switch, Switch.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.Switch)
      SwitchOrBuilder {
    private Switch() {
      entry_ = emptyProtobufList();
    }
    private int bitField0_;
    public static final int EXPRESSION_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression expression_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 1 [features = { ... }</code>
     */
    @java.lang.Override
    public boolean hasExpression() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 1 [features = { ... }</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getExpression() {
      return expression_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : expression_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 1 [features = { ... }</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setExpression(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      expression_ = value;
      bitField0_ |= 0x00000001;
      }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 1 [features = { ... }</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeExpression(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      if (expression_ != null &&
          expression_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance()) {
        expression_ =
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.newBuilder(expression_).mergeFrom(value).buildPartial();
      } else {
        expression_ = value;
      }
      bitField0_ |= 0x00000001;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 1 [features = { ... }</code>
     */
    private void clearExpression() {  expression_ = null;
      bitField0_ = (bitField0_ & ~0x00000001);
    }

    public static final int ENTRY_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry> entry_;
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.SwitchEntry entry = 2;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry> getEntryList() {
      return entry_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.SwitchEntry entry = 2;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntryOrBuilder> 
        getEntryOrBuilderList() {
      return entry_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.SwitchEntry entry = 2;</code>
     */
    @java.lang.Override
    public int getEntryCount() {
      return entry_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.SwitchEntry entry = 2;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry getEntry(int index) {
      return entry_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.SwitchEntry entry = 2;</code>
     */
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntryOrBuilder getEntryOrBuilder(
        int index) {
      return entry_.get(index);
    }
    private void ensureEntryIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry> tmp = entry_;
      if (!tmp.isModifiable()) {
        entry_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.SwitchEntry entry = 2;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setEntry(
        int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry value) {
      value.getClass();  // minimal bytecode null check
      ensureEntryIsMutable();
      entry_.set(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.SwitchEntry entry = 2;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addEntry(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry value) {
      value.getClass();  // minimal bytecode null check
      ensureEntryIsMutable();
      entry_.add(value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.SwitchEntry entry = 2;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addEntry(
        int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry value) {
      value.getClass();  // minimal bytecode null check
      ensureEntryIsMutable();
      entry_.add(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.SwitchEntry entry = 2;</code>
     */
    private void addAllEntry(
        java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry> values) {
      ensureEntryIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, entry_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.SwitchEntry entry = 2;</code>
     */
    private void clearEntry() {
      entry_ = emptyProtobufList();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.SwitchEntry entry = 2;</code>
     */
    private void removeEntry(int index) {
      ensureEntryIsMutable();
      entry_.remove(index);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Switch}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.Switch)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchOrBuilder {
      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 1 [features = { ... }</code>
       */
      @java.lang.Override
      public boolean hasExpression() {
        return instance.hasExpression();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 1 [features = { ... }</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getExpression() {
        return instance.getExpression();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 1 [features = { ... }</code>
       */
      public Builder setExpression(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        copyOnWrite();
        instance.setExpression(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 1 [features = { ... }</code>
       */
      public Builder setExpression(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        copyOnWrite();
        instance.setExpression(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 1 [features = { ... }</code>
       */
      public Builder mergeExpression(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        copyOnWrite();
        instance.mergeExpression(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 1 [features = { ... }</code>
       */
      public Builder clearExpression() {  copyOnWrite();
        instance.clearExpression();
        return this;
      }

      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.SwitchEntry entry = 2;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry> getEntryList() {
        return java.util.Collections.unmodifiableList(
            instance.getEntryList());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.SwitchEntry entry = 2;</code>
       */
      @java.lang.Override
      public int getEntryCount() {
        return instance.getEntryCount();
      }/**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.SwitchEntry entry = 2;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry getEntry(int index) {
        return instance.getEntry(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.SwitchEntry entry = 2;</code>
       */
      public Builder setEntry(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry value) {
        copyOnWrite();
        instance.setEntry(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.SwitchEntry entry = 2;</code>
       */
      public Builder setEntry(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry.Builder builderForValue) {
        copyOnWrite();
        instance.setEntry(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.SwitchEntry entry = 2;</code>
       */
      public Builder addEntry(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry value) {
        copyOnWrite();
        instance.addEntry(value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.SwitchEntry entry = 2;</code>
       */
      public Builder addEntry(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry value) {
        copyOnWrite();
        instance.addEntry(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.SwitchEntry entry = 2;</code>
       */
      public Builder addEntry(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry.Builder builderForValue) {
        copyOnWrite();
        instance.addEntry(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.SwitchEntry entry = 2;</code>
       */
      public Builder addEntry(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry.Builder builderForValue) {
        copyOnWrite();
        instance.addEntry(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.SwitchEntry entry = 2;</code>
       */
      public Builder addAllEntry(
          java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry> values) {
        copyOnWrite();
        instance.addAllEntry(values);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.SwitchEntry entry = 2;</code>
       */
      public Builder clearEntry() {
        copyOnWrite();
        instance.clearEntry();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.SwitchEntry entry = 2;</code>
       */
      public Builder removeEntry(int index) {
        copyOnWrite();
        instance.removeEntry(index);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.Switch)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "expression_",
              "entry_",
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry.class,
            };
            java.lang.String info =
                "\u0004\u0002\u0000\u0001\u0001\u0002\u0002\u0000\u0001\u0002\u0001\u1509\u0000\u0002" +
                "\u041b";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.Switch)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch DEFAULT_INSTANCE;
    static {
      Switch defaultInstance = new Switch();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        Switch.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<Switch> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<Switch> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface SwitchEntryOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.SwitchEntry)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression label = 1;</code>
     * @return Whether the label field is set.
     */
    boolean hasLabel();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression label = 1;</code>
     * @return The label.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getLabel();

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 2;</code>
     */
    java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement> 
        getStatementList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 2;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getStatement(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 2;</code>
     */
    int getStatementCount();

    /**
     * <code>int32 fileId = 3;</code>
     * @return Whether the fileId field is set.
     */
    boolean hasFileId();
    /**
     * <code>int32 fileId = 3;</code>
     * @return The fileId.
     */
    int getFileId();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 4;</code>
     * @return Whether the location field is set.
     */
    boolean hasLocation();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 4;</code>
     * @return The location.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location getLocation();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.SwitchEntry}
   */
  public  static final class SwitchEntry extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          SwitchEntry, SwitchEntry.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.SwitchEntry)
      SwitchEntryOrBuilder {
    private SwitchEntry() {
      statement_ = emptyProtobufList();
    }
    private int bitField0_;
    public static final int LABEL_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression label_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression label = 1;</code>
     */
    @java.lang.Override
    public boolean hasLabel() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression label = 1;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getLabel() {
      return label_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : label_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression label = 1;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setLabel(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      label_ = value;
      bitField0_ |= 0x00000001;
      }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression label = 1;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeLabel(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      if (label_ != null &&
          label_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance()) {
        label_ =
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.newBuilder(label_).mergeFrom(value).buildPartial();
      } else {
        label_ = value;
      }
      bitField0_ |= 0x00000001;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression label = 1;</code>
     */
    private void clearLabel() {  label_ = null;
      bitField0_ = (bitField0_ & ~0x00000001);
    }

    public static final int STATEMENT_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement> statement_;
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 2;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement> getStatementList() {
      return statement_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 2;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder> 
        getStatementOrBuilderList() {
      return statement_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 2;</code>
     */
    @java.lang.Override
    public int getStatementCount() {
      return statement_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 2;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getStatement(int index) {
      return statement_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 2;</code>
     */
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder getStatementOrBuilder(
        int index) {
      return statement_.get(index);
    }
    private void ensureStatementIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement> tmp = statement_;
      if (!tmp.isModifiable()) {
        statement_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 2;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setStatement(
        int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
      value.getClass();  // minimal bytecode null check
      ensureStatementIsMutable();
      statement_.set(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 2;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
      value.getClass();  // minimal bytecode null check
      ensureStatementIsMutable();
      statement_.add(value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 2;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addStatement(
        int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
      value.getClass();  // minimal bytecode null check
      ensureStatementIsMutable();
      statement_.add(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 2;</code>
     */
    private void addAllStatement(
        java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement> values) {
      ensureStatementIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, statement_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 2;</code>
     */
    private void clearStatement() {
      statement_ = emptyProtobufList();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 2;</code>
     */
    private void removeStatement(int index) {
      ensureStatementIsMutable();
      statement_.remove(index);
    }

    public static final int FILEID_FIELD_NUMBER = 3;
    private int fileId_;
    /**
     * <code>int32 fileId = 3;</code>
     * @return Whether the fileId field is set.
     */
    @java.lang.Override
    public boolean hasFileId() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>int32 fileId = 3;</code>
     * @return The fileId.
     */
    @java.lang.Override
    public int getFileId() {
      return fileId_;
    }
    /**
     * <code>int32 fileId = 3;</code>
     * @param value The fileId to set.
     */
    private void setFileId(int value) {
      bitField0_ |= 0x00000002;
      fileId_ = value;
    }
    /**
     * <code>int32 fileId = 3;</code>
     */
    private void clearFileId() {
      bitField0_ = (bitField0_ & ~0x00000002);
      fileId_ = 0;
    }

    public static final int LOCATION_FIELD_NUMBER = 4;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location location_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 4;</code>
     */
    @java.lang.Override
    public boolean hasLocation() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 4;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location getLocation() {
      return location_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location.getDefaultInstance() : location_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 4;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setLocation(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location value) {
      value.getClass();  // minimal bytecode null check
      location_ = value;
      bitField0_ |= 0x00000004;
      }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 4;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeLocation(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location value) {
      value.getClass();  // minimal bytecode null check
      if (location_ != null &&
          location_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location.getDefaultInstance()) {
        location_ =
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location.newBuilder(location_).mergeFrom(value).buildPartial();
      } else {
        location_ = value;
      }
      bitField0_ |= 0x00000004;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 4;</code>
     */
    private void clearLocation() {  location_ = null;
      bitField0_ = (bitField0_ & ~0x00000004);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.SwitchEntry}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.SwitchEntry)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntryOrBuilder {
      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression label = 1;</code>
       */
      @java.lang.Override
      public boolean hasLabel() {
        return instance.hasLabel();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression label = 1;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getLabel() {
        return instance.getLabel();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression label = 1;</code>
       */
      public Builder setLabel(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        copyOnWrite();
        instance.setLabel(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression label = 1;</code>
       */
      public Builder setLabel(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        copyOnWrite();
        instance.setLabel(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression label = 1;</code>
       */
      public Builder mergeLabel(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        copyOnWrite();
        instance.mergeLabel(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression label = 1;</code>
       */
      public Builder clearLabel() {  copyOnWrite();
        instance.clearLabel();
        return this;
      }

      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 2;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement> getStatementList() {
        return java.util.Collections.unmodifiableList(
            instance.getStatementList());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 2;</code>
       */
      @java.lang.Override
      public int getStatementCount() {
        return instance.getStatementCount();
      }/**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 2;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getStatement(int index) {
        return instance.getStatement(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 2;</code>
       */
      public Builder setStatement(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
        copyOnWrite();
        instance.setStatement(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 2;</code>
       */
      public Builder setStatement(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder builderForValue) {
        copyOnWrite();
        instance.setStatement(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 2;</code>
       */
      public Builder addStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
        copyOnWrite();
        instance.addStatement(value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 2;</code>
       */
      public Builder addStatement(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
        copyOnWrite();
        instance.addStatement(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 2;</code>
       */
      public Builder addStatement(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder builderForValue) {
        copyOnWrite();
        instance.addStatement(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 2;</code>
       */
      public Builder addStatement(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder builderForValue) {
        copyOnWrite();
        instance.addStatement(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 2;</code>
       */
      public Builder addAllStatement(
          java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement> values) {
        copyOnWrite();
        instance.addAllStatement(values);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 2;</code>
       */
      public Builder clearStatement() {
        copyOnWrite();
        instance.clearStatement();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 2;</code>
       */
      public Builder removeStatement(int index) {
        copyOnWrite();
        instance.removeStatement(index);
        return this;
      }

      /**
       * <code>int32 fileId = 3;</code>
       * @return Whether the fileId field is set.
       */
      @java.lang.Override
      public boolean hasFileId() {
        return instance.hasFileId();
      }
      /**
       * <code>int32 fileId = 3;</code>
       * @return The fileId.
       */
      @java.lang.Override
      public int getFileId() {
        return instance.getFileId();
      }
      /**
       * <code>int32 fileId = 3;</code>
       * @param value The fileId to set.
       * @return This builder for chaining.
       */
      public Builder setFileId(int value) {
        copyOnWrite();
        instance.setFileId(value);
        return this;
      }
      /**
       * <code>int32 fileId = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearFileId() {
        copyOnWrite();
        instance.clearFileId();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 4;</code>
       */
      @java.lang.Override
      public boolean hasLocation() {
        return instance.hasLocation();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 4;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location getLocation() {
        return instance.getLocation();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 4;</code>
       */
      public Builder setLocation(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location value) {
        copyOnWrite();
        instance.setLocation(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 4;</code>
       */
      public Builder setLocation(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location.Builder builderForValue) {
        copyOnWrite();
        instance.setLocation(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 4;</code>
       */
      public Builder mergeLocation(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location value) {
        copyOnWrite();
        instance.mergeLocation(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 4;</code>
       */
      public Builder clearLocation() {  copyOnWrite();
        instance.clearLocation();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.SwitchEntry)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "label_",
              "statement_",
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.class,
              "fileId_",
              "location_",
            };
            java.lang.String info =
                "\u0004\u0004\u0000\u0001\u0001\u0004\u0004\u0000\u0001\u0003\u0001\u1409\u0000\u0002" +
                "\u041b\u0003\u1004\u0001\u0004\u1409\u0002";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.SwitchEntry)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry DEFAULT_INSTANCE;
    static {
      SwitchEntry defaultInstance = new SwitchEntry();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        SwitchEntry.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<SwitchEntry> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<SwitchEntry> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface WhileOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.While)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
     * @return Whether the condition field is set.
     */
    boolean hasCondition();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
     * @return The condition.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getCondition();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
     * @return Whether the body field is set.
     */
    boolean hasBody();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
     * @return The body.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getBody();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.While}
   */
  public  static final class While extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          While, While.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.While)
      WhileOrBuilder {
    private While() {
    }
    private int bitField0_;
    public static final int CONDITION_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression condition_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
     */
    @java.lang.Override
    public boolean hasCondition() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getCondition() {
      return condition_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : condition_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setCondition(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      condition_ = value;
      bitField0_ |= 0x00000001;
      }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeCondition(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      if (condition_ != null &&
          condition_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance()) {
        condition_ =
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.newBuilder(condition_).mergeFrom(value).buildPartial();
      } else {
        condition_ = value;
      }
      bitField0_ |= 0x00000001;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
     */
    private void clearCondition() {  condition_ = null;
      bitField0_ = (bitField0_ & ~0x00000001);
    }

    public static final int BODY_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement body_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
     */
    @java.lang.Override
    public boolean hasBody() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getBody() {
      return body_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance() : body_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setBody(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
      value.getClass();  // minimal bytecode null check
      body_ = value;
      bitField0_ |= 0x00000002;
      }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeBody(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
      value.getClass();  // minimal bytecode null check
      if (body_ != null &&
          body_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance()) {
        body_ =
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.newBuilder(body_).mergeFrom(value).buildPartial();
      } else {
        body_ = value;
      }
      bitField0_ |= 0x00000002;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
     */
    private void clearBody() {  body_ = null;
      bitField0_ = (bitField0_ & ~0x00000002);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.While}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.While)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.WhileOrBuilder {
      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
       */
      @java.lang.Override
      public boolean hasCondition() {
        return instance.hasCondition();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getCondition() {
        return instance.getCondition();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
       */
      public Builder setCondition(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        copyOnWrite();
        instance.setCondition(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
       */
      public Builder setCondition(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        copyOnWrite();
        instance.setCondition(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
       */
      public Builder mergeCondition(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        copyOnWrite();
        instance.mergeCondition(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
       */
      public Builder clearCondition() {  copyOnWrite();
        instance.clearCondition();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
       */
      @java.lang.Override
      public boolean hasBody() {
        return instance.hasBody();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getBody() {
        return instance.getBody();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
       */
      public Builder setBody(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
        copyOnWrite();
        instance.setBody(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
       */
      public Builder setBody(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder builderForValue) {
        copyOnWrite();
        instance.setBody(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
       */
      public Builder mergeBody(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
        copyOnWrite();
        instance.mergeBody(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
       */
      public Builder clearBody() {  copyOnWrite();
        instance.clearBody();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.While)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "condition_",
              "body_",
            };
            java.lang.String info =
                "\u0004\u0002\u0000\u0001\u0001\u0002\u0002\u0000\u0000\u0002\u0001\u1509\u0000\u0002" +
                "\u1509\u0001";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.While)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While DEFAULT_INSTANCE;
    static {
      While defaultInstance = new While();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        While.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<While> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<While> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface DoWhileOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.DoWhile)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
     * @return Whether the condition field is set.
     */
    boolean hasCondition();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
     * @return The condition.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getCondition();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
     * @return Whether the body field is set.
     */
    boolean hasBody();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
     * @return The body.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getBody();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.DoWhile}
   */
  public  static final class DoWhile extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          DoWhile, DoWhile.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.DoWhile)
      DoWhileOrBuilder {
    private DoWhile() {
    }
    private int bitField0_;
    public static final int CONDITION_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression condition_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
     */
    @java.lang.Override
    public boolean hasCondition() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getCondition() {
      return condition_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : condition_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setCondition(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      condition_ = value;
      bitField0_ |= 0x00000001;
      }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeCondition(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      if (condition_ != null &&
          condition_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance()) {
        condition_ =
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.newBuilder(condition_).mergeFrom(value).buildPartial();
      } else {
        condition_ = value;
      }
      bitField0_ |= 0x00000001;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
     */
    private void clearCondition() {  condition_ = null;
      bitField0_ = (bitField0_ & ~0x00000001);
    }

    public static final int BODY_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement body_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
     */
    @java.lang.Override
    public boolean hasBody() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getBody() {
      return body_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance() : body_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setBody(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
      value.getClass();  // minimal bytecode null check
      body_ = value;
      bitField0_ |= 0x00000002;
      }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeBody(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
      value.getClass();  // minimal bytecode null check
      if (body_ != null &&
          body_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance()) {
        body_ =
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.newBuilder(body_).mergeFrom(value).buildPartial();
      } else {
        body_ = value;
      }
      bitField0_ |= 0x00000002;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
     */
    private void clearBody() {  body_ = null;
      bitField0_ = (bitField0_ & ~0x00000002);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.DoWhile}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.DoWhile)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhileOrBuilder {
      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
       */
      @java.lang.Override
      public boolean hasCondition() {
        return instance.hasCondition();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getCondition() {
        return instance.getCondition();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
       */
      public Builder setCondition(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        copyOnWrite();
        instance.setCondition(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
       */
      public Builder setCondition(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        copyOnWrite();
        instance.setCondition(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
       */
      public Builder mergeCondition(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        copyOnWrite();
        instance.mergeCondition(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
       */
      public Builder clearCondition() {  copyOnWrite();
        instance.clearCondition();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
       */
      @java.lang.Override
      public boolean hasBody() {
        return instance.hasBody();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getBody() {
        return instance.getBody();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
       */
      public Builder setBody(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
        copyOnWrite();
        instance.setBody(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
       */
      public Builder setBody(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder builderForValue) {
        copyOnWrite();
        instance.setBody(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
       */
      public Builder mergeBody(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
        copyOnWrite();
        instance.mergeBody(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
       */
      public Builder clearBody() {  copyOnWrite();
        instance.clearBody();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.DoWhile)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "condition_",
              "body_",
            };
            java.lang.String info =
                "\u0004\u0002\u0000\u0001\u0001\u0002\u0002\u0000\u0000\u0002\u0001\u1509\u0000\u0002" +
                "\u1509\u0001";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.DoWhile)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile DEFAULT_INSTANCE;
    static {
      DoWhile defaultInstance = new DoWhile();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        DoWhile.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<DoWhile> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<DoWhile> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ForOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.For)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement variables = 1;</code>
     * @return Whether the variables field is set.
     */
    boolean hasVariables();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement variables = 1;</code>
     * @return The variables.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getVariables();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2;</code>
     * @return Whether the expression field is set.
     */
    boolean hasExpression();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2;</code>
     * @return The expression.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getExpression();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.EmptyInit empty = 3;</code>
     * @return Whether the empty field is set.
     */
    boolean hasEmpty();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.EmptyInit empty = 3;</code>
     * @return The empty.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit getEmpty();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 4;</code>
     * @return Whether the condition field is set.
     */
    boolean hasCondition();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 4;</code>
     * @return The condition.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getCondition();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression increment = 5;</code>
     * @return Whether the increment field is set.
     */
    boolean hasIncrement();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression increment = 5;</code>
     * @return The increment.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getIncrement();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 6 [features = { ... }</code>
     * @return Whether the body field is set.
     */
    boolean hasBody();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 6 [features = { ... }</code>
     * @return The body.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getBody();

    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For.InitCase getInitCase();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.For}
   */
  public  static final class For extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          For, For.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.For)
      ForOrBuilder {
    private For() {
    }
    private int bitField0_;
    private int initCase_ = 0;
    private java.lang.Object init_;
    public enum InitCase {
      VARIABLES(1),
      EXPRESSION(2),
      EMPTY(3),
      INIT_NOT_SET(0);
      private final int value;
      private InitCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static InitCase valueOf(int value) {
        return forNumber(value);
      }

      public static InitCase forNumber(int value) {
        switch (value) {
          case 1: return VARIABLES;
          case 2: return EXPRESSION;
          case 3: return EMPTY;
          case 0: return INIT_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    @java.lang.Override
    public InitCase
    getInitCase() {
      return InitCase.forNumber(
          initCase_);
    }

    private void clearInit() {
      initCase_ = 0;
      init_ = null;
    }

    public static final int VARIABLES_FIELD_NUMBER = 1;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement variables = 1;</code>
     */
    @java.lang.Override
    public boolean hasVariables() {
      return initCase_ == 1;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement variables = 1;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getVariables() {
      if (initCase_ == 1) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement) init_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement variables = 1;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setVariables(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
      value.getClass();  // minimal bytecode null check
      init_ = value;
      initCase_ = 1;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement variables = 1;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void mergeVariables(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
      value.getClass();  // minimal bytecode null check
      if (initCase_ == 1 &&
          init_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance()) {
        init_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement) init_)
            .mergeFrom(value).buildPartial();
      } else {
        init_ = value;
      }
      initCase_ = 1;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement variables = 1;</code>
     */
    private void clearVariables() {
      if (initCase_ == 1) {
        initCase_ = 0;
        init_ = null;
      }
    }

    public static final int EXPRESSION_FIELD_NUMBER = 2;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2;</code>
     */
    @java.lang.Override
    public boolean hasExpression() {
      return initCase_ == 2;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getExpression() {
      if (initCase_ == 2) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression) init_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setExpression(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      init_ = value;
      initCase_ = 2;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void mergeExpression(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      if (initCase_ == 2 &&
          init_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance()) {
        init_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression) init_)
            .mergeFrom(value).buildPartial();
      } else {
        init_ = value;
      }
      initCase_ = 2;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2;</code>
     */
    private void clearExpression() {
      if (initCase_ == 2) {
        initCase_ = 0;
        init_ = null;
      }
    }

    public static final int EMPTY_FIELD_NUMBER = 3;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.EmptyInit empty = 3;</code>
     */
    @java.lang.Override
    public boolean hasEmpty() {
      return initCase_ == 3;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.EmptyInit empty = 3;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit getEmpty() {
      if (initCase_ == 3) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit) init_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.EmptyInit empty = 3;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setEmpty(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit value) {
      value.getClass();  // minimal bytecode null check
      init_ = value;
      initCase_ = 3;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.EmptyInit empty = 3;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void mergeEmpty(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit value) {
      value.getClass();  // minimal bytecode null check
      if (initCase_ == 3 &&
          init_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit.getDefaultInstance()) {
        init_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit) init_)
            .mergeFrom(value).buildPartial();
      } else {
        init_ = value;
      }
      initCase_ = 3;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.EmptyInit empty = 3;</code>
     */
    private void clearEmpty() {
      if (initCase_ == 3) {
        initCase_ = 0;
        init_ = null;
      }
    }

    public static final int CONDITION_FIELD_NUMBER = 4;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression condition_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 4;</code>
     */
    @java.lang.Override
    public boolean hasCondition() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 4;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getCondition() {
      return condition_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : condition_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 4;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setCondition(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      condition_ = value;
      bitField0_ |= 0x00000001;
      }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 4;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeCondition(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      if (condition_ != null &&
          condition_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance()) {
        condition_ =
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.newBuilder(condition_).mergeFrom(value).buildPartial();
      } else {
        condition_ = value;
      }
      bitField0_ |= 0x00000001;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 4;</code>
     */
    private void clearCondition() {  condition_ = null;
      bitField0_ = (bitField0_ & ~0x00000001);
    }

    public static final int INCREMENT_FIELD_NUMBER = 5;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression increment_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression increment = 5;</code>
     */
    @java.lang.Override
    public boolean hasIncrement() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression increment = 5;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getIncrement() {
      return increment_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : increment_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression increment = 5;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setIncrement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      increment_ = value;
      bitField0_ |= 0x00000002;
      }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression increment = 5;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeIncrement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      if (increment_ != null &&
          increment_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance()) {
        increment_ =
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.newBuilder(increment_).mergeFrom(value).buildPartial();
      } else {
        increment_ = value;
      }
      bitField0_ |= 0x00000002;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression increment = 5;</code>
     */
    private void clearIncrement() {  increment_ = null;
      bitField0_ = (bitField0_ & ~0x00000002);
    }

    public static final int BODY_FIELD_NUMBER = 6;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement body_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 6 [features = { ... }</code>
     */
    @java.lang.Override
    public boolean hasBody() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 6 [features = { ... }</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getBody() {
      return body_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance() : body_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 6 [features = { ... }</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setBody(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
      value.getClass();  // minimal bytecode null check
      body_ = value;
      bitField0_ |= 0x00000004;
      }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 6 [features = { ... }</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeBody(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
      value.getClass();  // minimal bytecode null check
      if (body_ != null &&
          body_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance()) {
        body_ =
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.newBuilder(body_).mergeFrom(value).buildPartial();
      } else {
        body_ = value;
      }
      bitField0_ |= 0x00000004;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 6 [features = { ... }</code>
     */
    private void clearBody() {  body_ = null;
      bitField0_ = (bitField0_ & ~0x00000004);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.For}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.For)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForOrBuilder {
      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }

      @java.lang.Override
      public InitCase
          getInitCase() {
        return instance.getInitCase();
      }

      public Builder clearInit() {
        copyOnWrite();
        instance.clearInit();
        return this;
      }


      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement variables = 1;</code>
       */
      @java.lang.Override
      public boolean hasVariables() {
        return instance.hasVariables();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement variables = 1;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getVariables() {
        return instance.getVariables();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement variables = 1;</code>
       */
      public Builder setVariables(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
        copyOnWrite();
        instance.setVariables(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement variables = 1;</code>
       */
      public Builder setVariables(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder builderForValue) {
        copyOnWrite();
        instance.setVariables(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement variables = 1;</code>
       */
      public Builder mergeVariables(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
        copyOnWrite();
        instance.mergeVariables(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement variables = 1;</code>
       */
      public Builder clearVariables() {
        copyOnWrite();
        instance.clearVariables();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2;</code>
       */
      @java.lang.Override
      public boolean hasExpression() {
        return instance.hasExpression();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getExpression() {
        return instance.getExpression();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2;</code>
       */
      public Builder setExpression(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        copyOnWrite();
        instance.setExpression(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2;</code>
       */
      public Builder setExpression(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        copyOnWrite();
        instance.setExpression(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2;</code>
       */
      public Builder mergeExpression(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        copyOnWrite();
        instance.mergeExpression(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2;</code>
       */
      public Builder clearExpression() {
        copyOnWrite();
        instance.clearExpression();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.EmptyInit empty = 3;</code>
       */
      @java.lang.Override
      public boolean hasEmpty() {
        return instance.hasEmpty();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.EmptyInit empty = 3;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit getEmpty() {
        return instance.getEmpty();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.EmptyInit empty = 3;</code>
       */
      public Builder setEmpty(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit value) {
        copyOnWrite();
        instance.setEmpty(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.EmptyInit empty = 3;</code>
       */
      public Builder setEmpty(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit.Builder builderForValue) {
        copyOnWrite();
        instance.setEmpty(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.EmptyInit empty = 3;</code>
       */
      public Builder mergeEmpty(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit value) {
        copyOnWrite();
        instance.mergeEmpty(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.EmptyInit empty = 3;</code>
       */
      public Builder clearEmpty() {
        copyOnWrite();
        instance.clearEmpty();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 4;</code>
       */
      @java.lang.Override
      public boolean hasCondition() {
        return instance.hasCondition();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 4;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getCondition() {
        return instance.getCondition();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 4;</code>
       */
      public Builder setCondition(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        copyOnWrite();
        instance.setCondition(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 4;</code>
       */
      public Builder setCondition(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        copyOnWrite();
        instance.setCondition(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 4;</code>
       */
      public Builder mergeCondition(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        copyOnWrite();
        instance.mergeCondition(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 4;</code>
       */
      public Builder clearCondition() {  copyOnWrite();
        instance.clearCondition();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression increment = 5;</code>
       */
      @java.lang.Override
      public boolean hasIncrement() {
        return instance.hasIncrement();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression increment = 5;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getIncrement() {
        return instance.getIncrement();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression increment = 5;</code>
       */
      public Builder setIncrement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        copyOnWrite();
        instance.setIncrement(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression increment = 5;</code>
       */
      public Builder setIncrement(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        copyOnWrite();
        instance.setIncrement(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression increment = 5;</code>
       */
      public Builder mergeIncrement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        copyOnWrite();
        instance.mergeIncrement(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression increment = 5;</code>
       */
      public Builder clearIncrement() {  copyOnWrite();
        instance.clearIncrement();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 6 [features = { ... }</code>
       */
      @java.lang.Override
      public boolean hasBody() {
        return instance.hasBody();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 6 [features = { ... }</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getBody() {
        return instance.getBody();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 6 [features = { ... }</code>
       */
      public Builder setBody(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
        copyOnWrite();
        instance.setBody(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 6 [features = { ... }</code>
       */
      public Builder setBody(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder builderForValue) {
        copyOnWrite();
        instance.setBody(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 6 [features = { ... }</code>
       */
      public Builder mergeBody(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
        copyOnWrite();
        instance.mergeBody(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 6 [features = { ... }</code>
       */
      public Builder clearBody() {  copyOnWrite();
        instance.clearBody();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.For)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "init_",
              "initCase_",
              "bitField0_",
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.class,
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.class,
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit.class,
              "condition_",
              "increment_",
              "body_",
            };
            java.lang.String info =
                "\u0004\u0006\u0001\u0001\u0001\u0006\u0006\u0000\u0000\u0005\u0001\u043c\u0000\u0002" +
                "\u043c\u0000\u0003<\u0000\u0004\u1409\u0000\u0005\u1409\u0001\u0006\u1509\u0002";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.For)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For DEFAULT_INSTANCE;
    static {
      For defaultInstance = new For();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        For.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<For> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<For> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface EmptyInitOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.EmptyInit)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.EmptyInit}
   */
  public  static final class EmptyInit extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          EmptyInit, EmptyInit.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.EmptyInit)
      EmptyInitOrBuilder {
    private EmptyInit() {
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.EmptyInit}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.EmptyInit)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInitOrBuilder {
      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.EmptyInit)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = null;java.lang.String info =
                "\u0004\u0000";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.EmptyInit)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit DEFAULT_INSTANCE;
    static {
      EmptyInit defaultInstance = new EmptyInit();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        EmptyInit.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<EmptyInit> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<EmptyInit> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ForInOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.ForIn)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>int32 nameId = 1;</code>
     * @return Whether the nameId field is set.
     */
    boolean hasNameId();
    /**
     * <code>int32 nameId = 1;</code>
     * @return The nameId.
     */
    int getNameId();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2;</code>
     * @return Whether the expression field is set.
     */
    boolean hasExpression();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2;</code>
     * @return The expression.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getExpression();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression iterable = 3 [features = { ... }</code>
     * @return Whether the iterable field is set.
     */
    boolean hasIterable();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression iterable = 3 [features = { ... }</code>
     * @return The iterable.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getIterable();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 4 [features = { ... }</code>
     * @return Whether the body field is set.
     */
    boolean hasBody();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 4 [features = { ... }</code>
     * @return The body.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getBody();

    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn.ValueCase getValueCase();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.ForIn}
   */
  public  static final class ForIn extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          ForIn, ForIn.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.ForIn)
      ForInOrBuilder {
    private ForIn() {
    }
    private int bitField0_;
    private int valueCase_ = 0;
    private java.lang.Object value_;
    public enum ValueCase {
      NAMEID(1),
      EXPRESSION(2),
      VALUE_NOT_SET(0);
      private final int value;
      private ValueCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ValueCase valueOf(int value) {
        return forNumber(value);
      }

      public static ValueCase forNumber(int value) {
        switch (value) {
          case 1: return NAMEID;
          case 2: return EXPRESSION;
          case 0: return VALUE_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    @java.lang.Override
    public ValueCase
    getValueCase() {
      return ValueCase.forNumber(
          valueCase_);
    }

    private void clearValue() {
      valueCase_ = 0;
      value_ = null;
    }

    public static final int NAMEID_FIELD_NUMBER = 1;
    /**
     * <code>int32 nameId = 1;</code>
     * @return Whether the nameId field is set.
     */
    @java.lang.Override
    public boolean hasNameId() {
      return valueCase_ == 1;
    }
    /**
     * <code>int32 nameId = 1;</code>
     * @return The nameId.
     */
    @java.lang.Override
    public int getNameId() {
      if (valueCase_ == 1) {
        return (java.lang.Integer) value_;
      }
      return 0;
    }
    /**
     * <code>int32 nameId = 1;</code>
     * @param value The nameId to set.
     */
    private void setNameId(int value) {
      valueCase_ = 1;
      value_ = value;
    }
    /**
     * <code>int32 nameId = 1;</code>
     */
    private void clearNameId() {
      if (valueCase_ == 1) {
        valueCase_ = 0;
        value_ = null;
      }
    }

    public static final int EXPRESSION_FIELD_NUMBER = 2;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2;</code>
     */
    @java.lang.Override
    public boolean hasExpression() {
      return valueCase_ == 2;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getExpression() {
      if (valueCase_ == 2) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression) value_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setExpression(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      value_ = value;
      valueCase_ = 2;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void mergeExpression(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      if (valueCase_ == 2 &&
          value_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance()) {
        value_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression) value_)
            .mergeFrom(value).buildPartial();
      } else {
        value_ = value;
      }
      valueCase_ = 2;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2;</code>
     */
    private void clearExpression() {
      if (valueCase_ == 2) {
        valueCase_ = 0;
        value_ = null;
      }
    }

    public static final int ITERABLE_FIELD_NUMBER = 3;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression iterable_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression iterable = 3 [features = { ... }</code>
     */
    @java.lang.Override
    public boolean hasIterable() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression iterable = 3 [features = { ... }</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getIterable() {
      return iterable_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : iterable_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression iterable = 3 [features = { ... }</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setIterable(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      iterable_ = value;
      bitField0_ |= 0x00000001;
      }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression iterable = 3 [features = { ... }</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeIterable(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      if (iterable_ != null &&
          iterable_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance()) {
        iterable_ =
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.newBuilder(iterable_).mergeFrom(value).buildPartial();
      } else {
        iterable_ = value;
      }
      bitField0_ |= 0x00000001;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression iterable = 3 [features = { ... }</code>
     */
    private void clearIterable() {  iterable_ = null;
      bitField0_ = (bitField0_ & ~0x00000001);
    }

    public static final int BODY_FIELD_NUMBER = 4;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement body_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 4 [features = { ... }</code>
     */
    @java.lang.Override
    public boolean hasBody() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 4 [features = { ... }</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getBody() {
      return body_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance() : body_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 4 [features = { ... }</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setBody(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
      value.getClass();  // minimal bytecode null check
      body_ = value;
      bitField0_ |= 0x00000002;
      }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 4 [features = { ... }</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeBody(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
      value.getClass();  // minimal bytecode null check
      if (body_ != null &&
          body_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance()) {
        body_ =
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.newBuilder(body_).mergeFrom(value).buildPartial();
      } else {
        body_ = value;
      }
      bitField0_ |= 0x00000002;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 4 [features = { ... }</code>
     */
    private void clearBody() {  body_ = null;
      bitField0_ = (bitField0_ & ~0x00000002);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.ForIn}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.ForIn)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForInOrBuilder {
      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }

      @java.lang.Override
      public ValueCase
          getValueCase() {
        return instance.getValueCase();
      }

      public Builder clearValue() {
        copyOnWrite();
        instance.clearValue();
        return this;
      }


      /**
       * <code>int32 nameId = 1;</code>
       * @return Whether the nameId field is set.
       */
      @java.lang.Override
      public boolean hasNameId() {
        return instance.hasNameId();
      }
      /**
       * <code>int32 nameId = 1;</code>
       * @return The nameId.
       */
      @java.lang.Override
      public int getNameId() {
        return instance.getNameId();
      }
      /**
       * <code>int32 nameId = 1;</code>
       * @param value The nameId to set.
       * @return This builder for chaining.
       */
      public Builder setNameId(int value) {
        copyOnWrite();
        instance.setNameId(value);
        return this;
      }
      /**
       * <code>int32 nameId = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearNameId() {
        copyOnWrite();
        instance.clearNameId();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2;</code>
       */
      @java.lang.Override
      public boolean hasExpression() {
        return instance.hasExpression();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getExpression() {
        return instance.getExpression();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2;</code>
       */
      public Builder setExpression(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        copyOnWrite();
        instance.setExpression(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2;</code>
       */
      public Builder setExpression(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        copyOnWrite();
        instance.setExpression(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2;</code>
       */
      public Builder mergeExpression(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        copyOnWrite();
        instance.mergeExpression(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2;</code>
       */
      public Builder clearExpression() {
        copyOnWrite();
        instance.clearExpression();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression iterable = 3 [features = { ... }</code>
       */
      @java.lang.Override
      public boolean hasIterable() {
        return instance.hasIterable();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression iterable = 3 [features = { ... }</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getIterable() {
        return instance.getIterable();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression iterable = 3 [features = { ... }</code>
       */
      public Builder setIterable(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        copyOnWrite();
        instance.setIterable(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression iterable = 3 [features = { ... }</code>
       */
      public Builder setIterable(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        copyOnWrite();
        instance.setIterable(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression iterable = 3 [features = { ... }</code>
       */
      public Builder mergeIterable(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        copyOnWrite();
        instance.mergeIterable(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression iterable = 3 [features = { ... }</code>
       */
      public Builder clearIterable() {  copyOnWrite();
        instance.clearIterable();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 4 [features = { ... }</code>
       */
      @java.lang.Override
      public boolean hasBody() {
        return instance.hasBody();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 4 [features = { ... }</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getBody() {
        return instance.getBody();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 4 [features = { ... }</code>
       */
      public Builder setBody(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
        copyOnWrite();
        instance.setBody(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 4 [features = { ... }</code>
       */
      public Builder setBody(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder builderForValue) {
        copyOnWrite();
        instance.setBody(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 4 [features = { ... }</code>
       */
      public Builder mergeBody(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
        copyOnWrite();
        instance.mergeBody(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 4 [features = { ... }</code>
       */
      public Builder clearBody() {  copyOnWrite();
        instance.clearBody();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.ForIn)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "value_",
              "valueCase_",
              "bitField0_",
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.class,
              "iterable_",
              "body_",
            };
            java.lang.String info =
                "\u0004\u0004\u0001\u0001\u0001\u0004\u0004\u0000\u0000\u0003\u00017\u0000\u0002\u043c" +
                "\u0000\u0003\u1509\u0000\u0004\u1509\u0001";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.ForIn)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn DEFAULT_INSTANCE;
    static {
      ForIn defaultInstance = new ForIn();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        ForIn.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<ForIn> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<ForIn> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface TryOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.Try)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement tryBlock = 1 [features = { ... }</code>
     * @return Whether the tryBlock field is set.
     */
    boolean hasTryBlock();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement tryBlock = 1 [features = { ... }</code>
     * @return The tryBlock.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getTryBlock();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Catch catchBlock = 2;</code>
     * @return Whether the catchBlock field is set.
     */
    boolean hasCatchBlock();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Catch catchBlock = 2;</code>
     * @return The catchBlock.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch getCatchBlock();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement finallyBlock = 3;</code>
     * @return Whether the finallyBlock field is set.
     */
    boolean hasFinallyBlock();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement finallyBlock = 3;</code>
     * @return The finallyBlock.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getFinallyBlock();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Try}
   */
  public  static final class Try extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          Try, Try.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.Try)
      TryOrBuilder {
    private Try() {
    }
    private int bitField0_;
    public static final int TRYBLOCK_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement tryBlock_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement tryBlock = 1 [features = { ... }</code>
     */
    @java.lang.Override
    public boolean hasTryBlock() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement tryBlock = 1 [features = { ... }</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getTryBlock() {
      return tryBlock_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance() : tryBlock_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement tryBlock = 1 [features = { ... }</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setTryBlock(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
      value.getClass();  // minimal bytecode null check
      tryBlock_ = value;
      bitField0_ |= 0x00000001;
      }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement tryBlock = 1 [features = { ... }</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeTryBlock(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
      value.getClass();  // minimal bytecode null check
      if (tryBlock_ != null &&
          tryBlock_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance()) {
        tryBlock_ =
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.newBuilder(tryBlock_).mergeFrom(value).buildPartial();
      } else {
        tryBlock_ = value;
      }
      bitField0_ |= 0x00000001;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement tryBlock = 1 [features = { ... }</code>
     */
    private void clearTryBlock() {  tryBlock_ = null;
      bitField0_ = (bitField0_ & ~0x00000001);
    }

    public static final int CATCHBLOCK_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch catchBlock_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Catch catchBlock = 2;</code>
     */
    @java.lang.Override
    public boolean hasCatchBlock() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Catch catchBlock = 2;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch getCatchBlock() {
      return catchBlock_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch.getDefaultInstance() : catchBlock_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Catch catchBlock = 2;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setCatchBlock(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch value) {
      value.getClass();  // minimal bytecode null check
      catchBlock_ = value;
      bitField0_ |= 0x00000002;
      }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Catch catchBlock = 2;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeCatchBlock(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch value) {
      value.getClass();  // minimal bytecode null check
      if (catchBlock_ != null &&
          catchBlock_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch.getDefaultInstance()) {
        catchBlock_ =
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch.newBuilder(catchBlock_).mergeFrom(value).buildPartial();
      } else {
        catchBlock_ = value;
      }
      bitField0_ |= 0x00000002;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Catch catchBlock = 2;</code>
     */
    private void clearCatchBlock() {  catchBlock_ = null;
      bitField0_ = (bitField0_ & ~0x00000002);
    }

    public static final int FINALLYBLOCK_FIELD_NUMBER = 3;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement finallyBlock_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement finallyBlock = 3;</code>
     */
    @java.lang.Override
    public boolean hasFinallyBlock() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement finallyBlock = 3;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getFinallyBlock() {
      return finallyBlock_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance() : finallyBlock_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement finallyBlock = 3;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setFinallyBlock(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
      value.getClass();  // minimal bytecode null check
      finallyBlock_ = value;
      bitField0_ |= 0x00000004;
      }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement finallyBlock = 3;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeFinallyBlock(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
      value.getClass();  // minimal bytecode null check
      if (finallyBlock_ != null &&
          finallyBlock_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance()) {
        finallyBlock_ =
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.newBuilder(finallyBlock_).mergeFrom(value).buildPartial();
      } else {
        finallyBlock_ = value;
      }
      bitField0_ |= 0x00000004;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement finallyBlock = 3;</code>
     */
    private void clearFinallyBlock() {  finallyBlock_ = null;
      bitField0_ = (bitField0_ & ~0x00000004);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Try}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.Try)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TryOrBuilder {
      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement tryBlock = 1 [features = { ... }</code>
       */
      @java.lang.Override
      public boolean hasTryBlock() {
        return instance.hasTryBlock();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement tryBlock = 1 [features = { ... }</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getTryBlock() {
        return instance.getTryBlock();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement tryBlock = 1 [features = { ... }</code>
       */
      public Builder setTryBlock(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
        copyOnWrite();
        instance.setTryBlock(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement tryBlock = 1 [features = { ... }</code>
       */
      public Builder setTryBlock(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder builderForValue) {
        copyOnWrite();
        instance.setTryBlock(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement tryBlock = 1 [features = { ... }</code>
       */
      public Builder mergeTryBlock(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
        copyOnWrite();
        instance.mergeTryBlock(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement tryBlock = 1 [features = { ... }</code>
       */
      public Builder clearTryBlock() {  copyOnWrite();
        instance.clearTryBlock();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Catch catchBlock = 2;</code>
       */
      @java.lang.Override
      public boolean hasCatchBlock() {
        return instance.hasCatchBlock();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Catch catchBlock = 2;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch getCatchBlock() {
        return instance.getCatchBlock();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Catch catchBlock = 2;</code>
       */
      public Builder setCatchBlock(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch value) {
        copyOnWrite();
        instance.setCatchBlock(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Catch catchBlock = 2;</code>
       */
      public Builder setCatchBlock(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch.Builder builderForValue) {
        copyOnWrite();
        instance.setCatchBlock(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Catch catchBlock = 2;</code>
       */
      public Builder mergeCatchBlock(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch value) {
        copyOnWrite();
        instance.mergeCatchBlock(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Catch catchBlock = 2;</code>
       */
      public Builder clearCatchBlock() {  copyOnWrite();
        instance.clearCatchBlock();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement finallyBlock = 3;</code>
       */
      @java.lang.Override
      public boolean hasFinallyBlock() {
        return instance.hasFinallyBlock();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement finallyBlock = 3;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getFinallyBlock() {
        return instance.getFinallyBlock();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement finallyBlock = 3;</code>
       */
      public Builder setFinallyBlock(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
        copyOnWrite();
        instance.setFinallyBlock(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement finallyBlock = 3;</code>
       */
      public Builder setFinallyBlock(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder builderForValue) {
        copyOnWrite();
        instance.setFinallyBlock(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement finallyBlock = 3;</code>
       */
      public Builder mergeFinallyBlock(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
        copyOnWrite();
        instance.mergeFinallyBlock(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement finallyBlock = 3;</code>
       */
      public Builder clearFinallyBlock() {  copyOnWrite();
        instance.clearFinallyBlock();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.Try)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "tryBlock_",
              "catchBlock_",
              "finallyBlock_",
            };
            java.lang.String info =
                "\u0004\u0003\u0000\u0001\u0001\u0003\u0003\u0000\u0000\u0003\u0001\u1509\u0000\u0002" +
                "\u1409\u0001\u0003\u1409\u0002";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.Try)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try DEFAULT_INSTANCE;
    static {
      Try defaultInstance = new Try();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        Try.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<Try> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<Try> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface CatchOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.Catch)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1 [features = { ... }</code>
     * @return Whether the parameter field is set.
     */
    boolean hasParameter();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1 [features = { ... }</code>
     * @return The parameter.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter getParameter();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
     * @return Whether the body field is set.
     */
    boolean hasBody();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
     * @return The body.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getBody();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Catch}
   */
  public  static final class Catch extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          Catch, Catch.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.Catch)
      CatchOrBuilder {
    private Catch() {
    }
    private int bitField0_;
    public static final int PARAMETER_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter parameter_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1 [features = { ... }</code>
     */
    @java.lang.Override
    public boolean hasParameter() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1 [features = { ... }</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter getParameter() {
      return parameter_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter.getDefaultInstance() : parameter_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1 [features = { ... }</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setParameter(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter value) {
      value.getClass();  // minimal bytecode null check
      parameter_ = value;
      bitField0_ |= 0x00000001;
      }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1 [features = { ... }</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeParameter(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter value) {
      value.getClass();  // minimal bytecode null check
      if (parameter_ != null &&
          parameter_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter.getDefaultInstance()) {
        parameter_ =
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter.newBuilder(parameter_).mergeFrom(value).buildPartial();
      } else {
        parameter_ = value;
      }
      bitField0_ |= 0x00000001;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1 [features = { ... }</code>
     */
    private void clearParameter() {  parameter_ = null;
      bitField0_ = (bitField0_ & ~0x00000001);
    }

    public static final int BODY_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement body_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
     */
    @java.lang.Override
    public boolean hasBody() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getBody() {
      return body_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance() : body_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setBody(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
      value.getClass();  // minimal bytecode null check
      body_ = value;
      bitField0_ |= 0x00000002;
      }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeBody(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
      value.getClass();  // minimal bytecode null check
      if (body_ != null &&
          body_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance()) {
        body_ =
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.newBuilder(body_).mergeFrom(value).buildPartial();
      } else {
        body_ = value;
      }
      bitField0_ |= 0x00000002;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
     */
    private void clearBody() {  body_ = null;
      bitField0_ = (bitField0_ & ~0x00000002);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Catch}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.Catch)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CatchOrBuilder {
      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1 [features = { ... }</code>
       */
      @java.lang.Override
      public boolean hasParameter() {
        return instance.hasParameter();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1 [features = { ... }</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter getParameter() {
        return instance.getParameter();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1 [features = { ... }</code>
       */
      public Builder setParameter(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter value) {
        copyOnWrite();
        instance.setParameter(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1 [features = { ... }</code>
       */
      public Builder setParameter(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter.Builder builderForValue) {
        copyOnWrite();
        instance.setParameter(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1 [features = { ... }</code>
       */
      public Builder mergeParameter(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter value) {
        copyOnWrite();
        instance.mergeParameter(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1 [features = { ... }</code>
       */
      public Builder clearParameter() {  copyOnWrite();
        instance.clearParameter();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
       */
      @java.lang.Override
      public boolean hasBody() {
        return instance.hasBody();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getBody() {
        return instance.getBody();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
       */
      public Builder setBody(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
        copyOnWrite();
        instance.setBody(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
       */
      public Builder setBody(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder builderForValue) {
        copyOnWrite();
        instance.setBody(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
       */
      public Builder mergeBody(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
        copyOnWrite();
        instance.mergeBody(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
       */
      public Builder clearBody() {  copyOnWrite();
        instance.clearBody();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.Catch)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "parameter_",
              "body_",
            };
            java.lang.String info =
                "\u0004\u0002\u0000\u0001\u0001\u0002\u0002\u0000\u0000\u0002\u0001\u1509\u0000\u0002" +
                "\u1509\u0001";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.Catch)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch DEFAULT_INSTANCE;
    static {
      Catch defaultInstance = new Catch();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        Catch.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<Catch> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<Catch> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface EmptyOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.Empty)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Empty}
   */
  public  static final class Empty extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          Empty, Empty.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.Empty)
      EmptyOrBuilder {
    private Empty() {
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Empty}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.Empty)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyOrBuilder {
      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.Empty)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = null;java.lang.String info =
                "\u0004\u0000";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.Empty)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty DEFAULT_INSTANCE;
    static {
      Empty defaultInstance = new Empty();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        Empty.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<Empty> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<Empty> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface SingleLineCommentOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.SingleLineComment)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>string message = 1 [features = { ... }</code>
     * @return Whether the message field is set.
     */
    boolean hasMessage();
    /**
     * <code>string message = 1 [features = { ... }</code>
     * @return The message.
     */
    java.lang.String getMessage();
    /**
     * <code>string message = 1 [features = { ... }</code>
     * @return The bytes for message.
     */
    org.jetbrains.kotlin.protobuf.ByteString
        getMessageBytes();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.SingleLineComment}
   */
  public  static final class SingleLineComment extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          SingleLineComment, SingleLineComment.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.SingleLineComment)
      SingleLineCommentOrBuilder {
    private SingleLineComment() {
      message_ = "";
    }
    private int bitField0_;
    public static final int MESSAGE_FIELD_NUMBER = 1;
    private java.lang.String message_;
    /**
     * <code>string message = 1 [features = { ... }</code>
     * @return Whether the message field is set.
     */
    @java.lang.Override
    public boolean hasMessage() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>string message = 1 [features = { ... }</code>
     * @return The message.
     */
    @java.lang.Override
    public java.lang.String getMessage() {
      return message_;
    }
    /**
     * <code>string message = 1 [features = { ... }</code>
     * @return The bytes for message.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.ByteString
        getMessageBytes() {
      return org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(message_);
    }
    /**
     * <code>string message = 1 [features = { ... }</code>
     * @param value The message to set.
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setMessage(
        java.lang.String value) {
      value.getClass();  // minimal bytecode null check
      bitField0_ |= 0x00000001;
      message_ = value;
    }
    /**
     * <code>string message = 1 [features = { ... }</code>
     */
    private void clearMessage() {
      bitField0_ = (bitField0_ & ~0x00000001);
      message_ = getDefaultInstance().getMessage();
    }
    /**
     * <code>string message = 1 [features = { ... }</code>
     * @param value The bytes for message to set.
     */
    private void setMessageBytes(
        org.jetbrains.kotlin.protobuf.ByteString value) {
      message_ = value.toStringUtf8();
      bitField0_ |= 0x00000001;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.SingleLineComment}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.SingleLineComment)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineCommentOrBuilder {
      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>string message = 1 [features = { ... }</code>
       * @return Whether the message field is set.
       */
      @java.lang.Override
      public boolean hasMessage() {
        return instance.hasMessage();
      }
      /**
       * <code>string message = 1 [features = { ... }</code>
       * @return The message.
       */
      @java.lang.Override
      public java.lang.String getMessage() {
        return instance.getMessage();
      }
      /**
       * <code>string message = 1 [features = { ... }</code>
       * @return The bytes for message.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.ByteString
          getMessageBytes() {
        return instance.getMessageBytes();
      }
      /**
       * <code>string message = 1 [features = { ... }</code>
       * @param value The message to set.
       * @return This builder for chaining.
       */
      public Builder setMessage(
          java.lang.String value) {
        copyOnWrite();
        instance.setMessage(value);
        return this;
      }
      /**
       * <code>string message = 1 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearMessage() {
        copyOnWrite();
        instance.clearMessage();
        return this;
      }
      /**
       * <code>string message = 1 [features = { ... }</code>
       * @param value The bytes for message to set.
       * @return This builder for chaining.
       */
      public Builder setMessageBytes(
          org.jetbrains.kotlin.protobuf.ByteString value) {
        copyOnWrite();
        instance.setMessageBytes(value);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.SingleLineComment)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "message_",
            };
            java.lang.String info =
                "\u0004\u0001\u0000\u0001\u0001\u0001\u0001\u0000\u0000\u0001\u0001\u1508\u0000";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.SingleLineComment)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment DEFAULT_INSTANCE;
    static {
      SingleLineComment defaultInstance = new SingleLineComment();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        SingleLineComment.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<SingleLineComment> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<SingleLineComment> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface MultiLineCommentOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.MultiLineComment)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>string message = 1 [features = { ... }</code>
     * @return Whether the message field is set.
     */
    boolean hasMessage();
    /**
     * <code>string message = 1 [features = { ... }</code>
     * @return The message.
     */
    java.lang.String getMessage();
    /**
     * <code>string message = 1 [features = { ... }</code>
     * @return The bytes for message.
     */
    org.jetbrains.kotlin.protobuf.ByteString
        getMessageBytes();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.MultiLineComment}
   */
  public  static final class MultiLineComment extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          MultiLineComment, MultiLineComment.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.MultiLineComment)
      MultiLineCommentOrBuilder {
    private MultiLineComment() {
      message_ = "";
    }
    private int bitField0_;
    public static final int MESSAGE_FIELD_NUMBER = 1;
    private java.lang.String message_;
    /**
     * <code>string message = 1 [features = { ... }</code>
     * @return Whether the message field is set.
     */
    @java.lang.Override
    public boolean hasMessage() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>string message = 1 [features = { ... }</code>
     * @return The message.
     */
    @java.lang.Override
    public java.lang.String getMessage() {
      return message_;
    }
    /**
     * <code>string message = 1 [features = { ... }</code>
     * @return The bytes for message.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.ByteString
        getMessageBytes() {
      return org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(message_);
    }
    /**
     * <code>string message = 1 [features = { ... }</code>
     * @param value The message to set.
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setMessage(
        java.lang.String value) {
      value.getClass();  // minimal bytecode null check
      bitField0_ |= 0x00000001;
      message_ = value;
    }
    /**
     * <code>string message = 1 [features = { ... }</code>
     */
    private void clearMessage() {
      bitField0_ = (bitField0_ & ~0x00000001);
      message_ = getDefaultInstance().getMessage();
    }
    /**
     * <code>string message = 1 [features = { ... }</code>
     * @param value The bytes for message to set.
     */
    private void setMessageBytes(
        org.jetbrains.kotlin.protobuf.ByteString value) {
      message_ = value.toStringUtf8();
      bitField0_ |= 0x00000001;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.MultiLineComment}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.MultiLineComment)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineCommentOrBuilder {
      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>string message = 1 [features = { ... }</code>
       * @return Whether the message field is set.
       */
      @java.lang.Override
      public boolean hasMessage() {
        return instance.hasMessage();
      }
      /**
       * <code>string message = 1 [features = { ... }</code>
       * @return The message.
       */
      @java.lang.Override
      public java.lang.String getMessage() {
        return instance.getMessage();
      }
      /**
       * <code>string message = 1 [features = { ... }</code>
       * @return The bytes for message.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.ByteString
          getMessageBytes() {
        return instance.getMessageBytes();
      }
      /**
       * <code>string message = 1 [features = { ... }</code>
       * @param value The message to set.
       * @return This builder for chaining.
       */
      public Builder setMessage(
          java.lang.String value) {
        copyOnWrite();
        instance.setMessage(value);
        return this;
      }
      /**
       * <code>string message = 1 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearMessage() {
        copyOnWrite();
        instance.clearMessage();
        return this;
      }
      /**
       * <code>string message = 1 [features = { ... }</code>
       * @param value The bytes for message to set.
       * @return This builder for chaining.
       */
      public Builder setMessageBytes(
          org.jetbrains.kotlin.protobuf.ByteString value) {
        copyOnWrite();
        instance.setMessageBytes(value);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.MultiLineComment)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "message_",
            };
            java.lang.String info =
                "\u0004\u0001\u0000\u0001\u0001\u0001\u0001\u0000\u0000\u0001\u0001\u1508\u0000";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.MultiLineComment)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment DEFAULT_INSTANCE;
    static {
      MultiLineComment defaultInstance = new MultiLineComment();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        MultiLineComment.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<MultiLineComment> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<MultiLineComment> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface FragmentOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.Fragment)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ImportedModule imported_module = 1;</code>
     */
    java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule> 
        getImportedModuleList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ImportedModule imported_module = 1;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule getImportedModule(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ImportedModule imported_module = 1;</code>
     */
    int getImportedModuleCount();

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Import import_entry = 2;</code>
     */
    java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import> 
        getImportEntryList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Import import_entry = 2;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import getImportEntry(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Import import_entry = 2;</code>
     */
    int getImportEntryCount();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock declaration_block = 3;</code>
     * @return Whether the declarationBlock field is set.
     */
    boolean hasDeclarationBlock();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock declaration_block = 3;</code>
     * @return The declarationBlock.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock getDeclarationBlock();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock export_block = 4;</code>
     * @return Whether the exportBlock field is set.
     */
    boolean hasExportBlock();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock export_block = 4;</code>
     * @return The exportBlock.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock getExportBlock();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock initializer_block = 5;</code>
     * @return Whether the initializerBlock field is set.
     */
    boolean hasInitializerBlock();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock initializer_block = 5;</code>
     * @return The initializerBlock.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock getInitializerBlock();

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.NameBinding name_binding = 6;</code>
     */
    java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding> 
        getNameBindingList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.NameBinding name_binding = 6;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding getNameBinding(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.NameBinding name_binding = 6;</code>
     */
    int getNameBindingCount();

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ClassModel class_model = 7;</code>
     */
    java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel> 
        getClassModelList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ClassModel class_model = 7;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel getClassModel(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ClassModel class_model = 7;</code>
     */
    int getClassModelCount();

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression module_expression = 8;</code>
     */
    java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression> 
        getModuleExpressionList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression module_expression = 8;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getModuleExpression(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression module_expression = 8;</code>
     */
    int getModuleExpressionCount();

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlineModule inline_module = 9;</code>
     */
    java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule> 
        getInlineModuleList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlineModule inline_module = 9;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule getInlineModule(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlineModule inline_module = 9;</code>
     */
    int getInlineModuleCount();

    /**
     * <code>string package_fqn = 10;</code>
     * @return Whether the packageFqn field is set.
     */
    boolean hasPackageFqn();
    /**
     * <code>string package_fqn = 10;</code>
     * @return The packageFqn.
     */
    java.lang.String getPackageFqn();
    /**
     * <code>string package_fqn = 10;</code>
     * @return The bytes for packageFqn.
     */
    org.jetbrains.kotlin.protobuf.ByteString
        getPackageFqnBytes();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement tests_invocation = 11;</code>
     * @return Whether the testsInvocation field is set.
     */
    boolean hasTestsInvocation();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement tests_invocation = 11;</code>
     * @return The testsInvocation.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getTestsInvocation();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement main_invocation = 12;</code>
     * @return Whether the mainInvocation field is set.
     */
    boolean hasMainInvocation();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement main_invocation = 12;</code>
     * @return The mainInvocation.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getMainInvocation();

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlinedLocalDeclarations inlined_local_declarations = 13;</code>
     */
    java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations> 
        getInlinedLocalDeclarationsList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlinedLocalDeclarations inlined_local_declarations = 13;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations getInlinedLocalDeclarations(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlinedLocalDeclarations inlined_local_declarations = 13;</code>
     */
    int getInlinedLocalDeclarationsCount();

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.IrClassModel ir_class_model = 14;</code>
     */
    java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel> 
        getIrClassModelList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.IrClassModel ir_class_model = 14;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel getIrClassModel(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.IrClassModel ir_class_model = 14;</code>
     */
    int getIrClassModelCount();

    /**
     * <code>string dts = 15;</code>
     * @return Whether the dts field is set.
     */
    boolean hasDts();
    /**
     * <code>string dts = 15;</code>
     * @return The dts.
     */
    java.lang.String getDts();
    /**
     * <code>string dts = 15;</code>
     * @return The bytes for dts.
     */
    org.jetbrains.kotlin.protobuf.ByteString
        getDtsBytes();

    /**
     * <code>int32 suite_function = 16;</code>
     * @return Whether the suiteFunction field is set.
     */
    boolean hasSuiteFunction();
    /**
     * <code>int32 suite_function = 16;</code>
     * @return The suiteFunction.
     */
    int getSuiteFunction();

    /**
     * <code>repeated int32 definitions = 17 [features = { ... }</code>
     * @return A list containing the definitions.
     */
    java.util.List<java.lang.Integer> getDefinitionsList();
    /**
     * <code>repeated int32 definitions = 17 [features = { ... }</code>
     * @return The count of definitions.
     */
    int getDefinitionsCount();
    /**
     * <code>repeated int32 definitions = 17 [features = { ... }</code>
     * @param index The index of the element to return.
     * @return The definitions at the given index.
     */
    int getDefinitions(int index);

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock polyfills = 18;</code>
     * @return Whether the polyfills field is set.
     */
    boolean hasPolyfills();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock polyfills = 18;</code>
     * @return The polyfills.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock getPolyfills();

    /**
     * <code>repeated int32 optionalCrossModuleImports = 19 [features = { ... }</code>
     * @return A list containing the optionalCrossModuleImports.
     */
    java.util.List<java.lang.Integer> getOptionalCrossModuleImportsList();
    /**
     * <code>repeated int32 optionalCrossModuleImports = 19 [features = { ... }</code>
     * @return The count of optionalCrossModuleImports.
     */
    int getOptionalCrossModuleImportsCount();
    /**
     * <code>repeated int32 optionalCrossModuleImports = 19 [features = { ... }</code>
     * @param index The index of the element to return.
     * @return The optionalCrossModuleImports at the given index.
     */
    int getOptionalCrossModuleImports(int index);
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Fragment}
   */
  public  static final class Fragment extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          Fragment, Fragment.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.Fragment)
      FragmentOrBuilder {
    private Fragment() {
      importedModule_ = emptyProtobufList();
      importEntry_ = emptyProtobufList();
      nameBinding_ = emptyProtobufList();
      classModel_ = emptyProtobufList();
      moduleExpression_ = emptyProtobufList();
      inlineModule_ = emptyProtobufList();
      packageFqn_ = "";
      inlinedLocalDeclarations_ = emptyProtobufList();
      irClassModel_ = emptyProtobufList();
      dts_ = "";
      definitions_ = emptyIntList();
      optionalCrossModuleImports_ = emptyIntList();
    }
    private int bitField0_;
    public static final int IMPORTED_MODULE_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule> importedModule_;
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ImportedModule imported_module = 1;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule> getImportedModuleList() {
      return importedModule_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ImportedModule imported_module = 1;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModuleOrBuilder> 
        getImportedModuleOrBuilderList() {
      return importedModule_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ImportedModule imported_module = 1;</code>
     */
    @java.lang.Override
    public int getImportedModuleCount() {
      return importedModule_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ImportedModule imported_module = 1;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule getImportedModule(int index) {
      return importedModule_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ImportedModule imported_module = 1;</code>
     */
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModuleOrBuilder getImportedModuleOrBuilder(
        int index) {
      return importedModule_.get(index);
    }
    private void ensureImportedModuleIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule> tmp = importedModule_;
      if (!tmp.isModifiable()) {
        importedModule_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ImportedModule imported_module = 1;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setImportedModule(
        int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule value) {
      value.getClass();  // minimal bytecode null check
      ensureImportedModuleIsMutable();
      importedModule_.set(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ImportedModule imported_module = 1;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addImportedModule(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule value) {
      value.getClass();  // minimal bytecode null check
      ensureImportedModuleIsMutable();
      importedModule_.add(value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ImportedModule imported_module = 1;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addImportedModule(
        int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule value) {
      value.getClass();  // minimal bytecode null check
      ensureImportedModuleIsMutable();
      importedModule_.add(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ImportedModule imported_module = 1;</code>
     */
    private void addAllImportedModule(
        java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule> values) {
      ensureImportedModuleIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, importedModule_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ImportedModule imported_module = 1;</code>
     */
    private void clearImportedModule() {
      importedModule_ = emptyProtobufList();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ImportedModule imported_module = 1;</code>
     */
    private void removeImportedModule(int index) {
      ensureImportedModuleIsMutable();
      importedModule_.remove(index);
    }

    public static final int IMPORT_ENTRY_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import> importEntry_;
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Import import_entry = 2;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import> getImportEntryList() {
      return importEntry_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Import import_entry = 2;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportOrBuilder> 
        getImportEntryOrBuilderList() {
      return importEntry_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Import import_entry = 2;</code>
     */
    @java.lang.Override
    public int getImportEntryCount() {
      return importEntry_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Import import_entry = 2;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import getImportEntry(int index) {
      return importEntry_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Import import_entry = 2;</code>
     */
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportOrBuilder getImportEntryOrBuilder(
        int index) {
      return importEntry_.get(index);
    }
    private void ensureImportEntryIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import> tmp = importEntry_;
      if (!tmp.isModifiable()) {
        importEntry_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Import import_entry = 2;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setImportEntry(
        int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import value) {
      value.getClass();  // minimal bytecode null check
      ensureImportEntryIsMutable();
      importEntry_.set(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Import import_entry = 2;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addImportEntry(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import value) {
      value.getClass();  // minimal bytecode null check
      ensureImportEntryIsMutable();
      importEntry_.add(value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Import import_entry = 2;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addImportEntry(
        int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import value) {
      value.getClass();  // minimal bytecode null check
      ensureImportEntryIsMutable();
      importEntry_.add(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Import import_entry = 2;</code>
     */
    private void addAllImportEntry(
        java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import> values) {
      ensureImportEntryIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, importEntry_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Import import_entry = 2;</code>
     */
    private void clearImportEntry() {
      importEntry_ = emptyProtobufList();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Import import_entry = 2;</code>
     */
    private void removeImportEntry(int index) {
      ensureImportEntryIsMutable();
      importEntry_.remove(index);
    }

    public static final int DECLARATION_BLOCK_FIELD_NUMBER = 3;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock declarationBlock_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock declaration_block = 3;</code>
     */
    @java.lang.Override
    public boolean hasDeclarationBlock() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock declaration_block = 3;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock getDeclarationBlock() {
      return declarationBlock_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.getDefaultInstance() : declarationBlock_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock declaration_block = 3;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setDeclarationBlock(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock value) {
      value.getClass();  // minimal bytecode null check
      declarationBlock_ = value;
      bitField0_ |= 0x00000001;
      }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock declaration_block = 3;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeDeclarationBlock(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock value) {
      value.getClass();  // minimal bytecode null check
      if (declarationBlock_ != null &&
          declarationBlock_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.getDefaultInstance()) {
        declarationBlock_ =
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.newBuilder(declarationBlock_).mergeFrom(value).buildPartial();
      } else {
        declarationBlock_ = value;
      }
      bitField0_ |= 0x00000001;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock declaration_block = 3;</code>
     */
    private void clearDeclarationBlock() {  declarationBlock_ = null;
      bitField0_ = (bitField0_ & ~0x00000001);
    }

    public static final int EXPORT_BLOCK_FIELD_NUMBER = 4;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock exportBlock_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock export_block = 4;</code>
     */
    @java.lang.Override
    public boolean hasExportBlock() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock export_block = 4;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock getExportBlock() {
      return exportBlock_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.getDefaultInstance() : exportBlock_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock export_block = 4;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setExportBlock(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock value) {
      value.getClass();  // minimal bytecode null check
      exportBlock_ = value;
      bitField0_ |= 0x00000002;
      }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock export_block = 4;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeExportBlock(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock value) {
      value.getClass();  // minimal bytecode null check
      if (exportBlock_ != null &&
          exportBlock_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.getDefaultInstance()) {
        exportBlock_ =
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.newBuilder(exportBlock_).mergeFrom(value).buildPartial();
      } else {
        exportBlock_ = value;
      }
      bitField0_ |= 0x00000002;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock export_block = 4;</code>
     */
    private void clearExportBlock() {  exportBlock_ = null;
      bitField0_ = (bitField0_ & ~0x00000002);
    }

    public static final int INITIALIZER_BLOCK_FIELD_NUMBER = 5;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock initializerBlock_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock initializer_block = 5;</code>
     */
    @java.lang.Override
    public boolean hasInitializerBlock() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock initializer_block = 5;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock getInitializerBlock() {
      return initializerBlock_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.getDefaultInstance() : initializerBlock_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock initializer_block = 5;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setInitializerBlock(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock value) {
      value.getClass();  // minimal bytecode null check
      initializerBlock_ = value;
      bitField0_ |= 0x00000004;
      }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock initializer_block = 5;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeInitializerBlock(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock value) {
      value.getClass();  // minimal bytecode null check
      if (initializerBlock_ != null &&
          initializerBlock_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.getDefaultInstance()) {
        initializerBlock_ =
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.newBuilder(initializerBlock_).mergeFrom(value).buildPartial();
      } else {
        initializerBlock_ = value;
      }
      bitField0_ |= 0x00000004;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock initializer_block = 5;</code>
     */
    private void clearInitializerBlock() {  initializerBlock_ = null;
      bitField0_ = (bitField0_ & ~0x00000004);
    }

    public static final int NAME_BINDING_FIELD_NUMBER = 6;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding> nameBinding_;
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.NameBinding name_binding = 6;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding> getNameBindingList() {
      return nameBinding_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.NameBinding name_binding = 6;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBindingOrBuilder> 
        getNameBindingOrBuilderList() {
      return nameBinding_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.NameBinding name_binding = 6;</code>
     */
    @java.lang.Override
    public int getNameBindingCount() {
      return nameBinding_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.NameBinding name_binding = 6;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding getNameBinding(int index) {
      return nameBinding_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.NameBinding name_binding = 6;</code>
     */
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBindingOrBuilder getNameBindingOrBuilder(
        int index) {
      return nameBinding_.get(index);
    }
    private void ensureNameBindingIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding> tmp = nameBinding_;
      if (!tmp.isModifiable()) {
        nameBinding_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.NameBinding name_binding = 6;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setNameBinding(
        int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding value) {
      value.getClass();  // minimal bytecode null check
      ensureNameBindingIsMutable();
      nameBinding_.set(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.NameBinding name_binding = 6;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addNameBinding(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding value) {
      value.getClass();  // minimal bytecode null check
      ensureNameBindingIsMutable();
      nameBinding_.add(value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.NameBinding name_binding = 6;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addNameBinding(
        int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding value) {
      value.getClass();  // minimal bytecode null check
      ensureNameBindingIsMutable();
      nameBinding_.add(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.NameBinding name_binding = 6;</code>
     */
    private void addAllNameBinding(
        java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding> values) {
      ensureNameBindingIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, nameBinding_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.NameBinding name_binding = 6;</code>
     */
    private void clearNameBinding() {
      nameBinding_ = emptyProtobufList();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.NameBinding name_binding = 6;</code>
     */
    private void removeNameBinding(int index) {
      ensureNameBindingIsMutable();
      nameBinding_.remove(index);
    }

    public static final int CLASS_MODEL_FIELD_NUMBER = 7;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel> classModel_;
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ClassModel class_model = 7;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel> getClassModelList() {
      return classModel_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ClassModel class_model = 7;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModelOrBuilder> 
        getClassModelOrBuilderList() {
      return classModel_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ClassModel class_model = 7;</code>
     */
    @java.lang.Override
    public int getClassModelCount() {
      return classModel_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ClassModel class_model = 7;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel getClassModel(int index) {
      return classModel_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ClassModel class_model = 7;</code>
     */
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModelOrBuilder getClassModelOrBuilder(
        int index) {
      return classModel_.get(index);
    }
    private void ensureClassModelIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel> tmp = classModel_;
      if (!tmp.isModifiable()) {
        classModel_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ClassModel class_model = 7;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setClassModel(
        int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel value) {
      value.getClass();  // minimal bytecode null check
      ensureClassModelIsMutable();
      classModel_.set(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ClassModel class_model = 7;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addClassModel(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel value) {
      value.getClass();  // minimal bytecode null check
      ensureClassModelIsMutable();
      classModel_.add(value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ClassModel class_model = 7;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addClassModel(
        int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel value) {
      value.getClass();  // minimal bytecode null check
      ensureClassModelIsMutable();
      classModel_.add(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ClassModel class_model = 7;</code>
     */
    private void addAllClassModel(
        java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel> values) {
      ensureClassModelIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, classModel_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ClassModel class_model = 7;</code>
     */
    private void clearClassModel() {
      classModel_ = emptyProtobufList();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ClassModel class_model = 7;</code>
     */
    private void removeClassModel(int index) {
      ensureClassModelIsMutable();
      classModel_.remove(index);
    }

    public static final int MODULE_EXPRESSION_FIELD_NUMBER = 8;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression> moduleExpression_;
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression module_expression = 8;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression> getModuleExpressionList() {
      return moduleExpression_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression module_expression = 8;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> 
        getModuleExpressionOrBuilderList() {
      return moduleExpression_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression module_expression = 8;</code>
     */
    @java.lang.Override
    public int getModuleExpressionCount() {
      return moduleExpression_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression module_expression = 8;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getModuleExpression(int index) {
      return moduleExpression_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression module_expression = 8;</code>
     */
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getModuleExpressionOrBuilder(
        int index) {
      return moduleExpression_.get(index);
    }
    private void ensureModuleExpressionIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression> tmp = moduleExpression_;
      if (!tmp.isModifiable()) {
        moduleExpression_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression module_expression = 8;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setModuleExpression(
        int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      ensureModuleExpressionIsMutable();
      moduleExpression_.set(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression module_expression = 8;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addModuleExpression(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      ensureModuleExpressionIsMutable();
      moduleExpression_.add(value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression module_expression = 8;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addModuleExpression(
        int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      ensureModuleExpressionIsMutable();
      moduleExpression_.add(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression module_expression = 8;</code>
     */
    private void addAllModuleExpression(
        java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression> values) {
      ensureModuleExpressionIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, moduleExpression_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression module_expression = 8;</code>
     */
    private void clearModuleExpression() {
      moduleExpression_ = emptyProtobufList();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression module_expression = 8;</code>
     */
    private void removeModuleExpression(int index) {
      ensureModuleExpressionIsMutable();
      moduleExpression_.remove(index);
    }

    public static final int INLINE_MODULE_FIELD_NUMBER = 9;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule> inlineModule_;
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlineModule inline_module = 9;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule> getInlineModuleList() {
      return inlineModule_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlineModule inline_module = 9;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModuleOrBuilder> 
        getInlineModuleOrBuilderList() {
      return inlineModule_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlineModule inline_module = 9;</code>
     */
    @java.lang.Override
    public int getInlineModuleCount() {
      return inlineModule_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlineModule inline_module = 9;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule getInlineModule(int index) {
      return inlineModule_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlineModule inline_module = 9;</code>
     */
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModuleOrBuilder getInlineModuleOrBuilder(
        int index) {
      return inlineModule_.get(index);
    }
    private void ensureInlineModuleIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule> tmp = inlineModule_;
      if (!tmp.isModifiable()) {
        inlineModule_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlineModule inline_module = 9;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setInlineModule(
        int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule value) {
      value.getClass();  // minimal bytecode null check
      ensureInlineModuleIsMutable();
      inlineModule_.set(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlineModule inline_module = 9;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addInlineModule(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule value) {
      value.getClass();  // minimal bytecode null check
      ensureInlineModuleIsMutable();
      inlineModule_.add(value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlineModule inline_module = 9;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addInlineModule(
        int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule value) {
      value.getClass();  // minimal bytecode null check
      ensureInlineModuleIsMutable();
      inlineModule_.add(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlineModule inline_module = 9;</code>
     */
    private void addAllInlineModule(
        java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule> values) {
      ensureInlineModuleIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, inlineModule_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlineModule inline_module = 9;</code>
     */
    private void clearInlineModule() {
      inlineModule_ = emptyProtobufList();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlineModule inline_module = 9;</code>
     */
    private void removeInlineModule(int index) {
      ensureInlineModuleIsMutable();
      inlineModule_.remove(index);
    }

    public static final int PACKAGE_FQN_FIELD_NUMBER = 10;
    private java.lang.String packageFqn_;
    /**
     * <code>string package_fqn = 10;</code>
     * @return Whether the packageFqn field is set.
     */
    @java.lang.Override
    public boolean hasPackageFqn() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <code>string package_fqn = 10;</code>
     * @return The packageFqn.
     */
    @java.lang.Override
    public java.lang.String getPackageFqn() {
      return packageFqn_;
    }
    /**
     * <code>string package_fqn = 10;</code>
     * @return The bytes for packageFqn.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.ByteString
        getPackageFqnBytes() {
      return org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(packageFqn_);
    }
    /**
     * <code>string package_fqn = 10;</code>
     * @param value The packageFqn to set.
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setPackageFqn(
        java.lang.String value) {
      value.getClass();  // minimal bytecode null check
      bitField0_ |= 0x00000008;
      packageFqn_ = value;
    }
    /**
     * <code>string package_fqn = 10;</code>
     */
    private void clearPackageFqn() {
      bitField0_ = (bitField0_ & ~0x00000008);
      packageFqn_ = getDefaultInstance().getPackageFqn();
    }
    /**
     * <code>string package_fqn = 10;</code>
     * @param value The bytes for packageFqn to set.
     */
    private void setPackageFqnBytes(
        org.jetbrains.kotlin.protobuf.ByteString value) {
      packageFqn_ = value.toStringUtf8();
      bitField0_ |= 0x00000008;
    }

    public static final int TESTS_INVOCATION_FIELD_NUMBER = 11;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement testsInvocation_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement tests_invocation = 11;</code>
     */
    @java.lang.Override
    public boolean hasTestsInvocation() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement tests_invocation = 11;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getTestsInvocation() {
      return testsInvocation_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance() : testsInvocation_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement tests_invocation = 11;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setTestsInvocation(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
      value.getClass();  // minimal bytecode null check
      testsInvocation_ = value;
      bitField0_ |= 0x00000010;
      }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement tests_invocation = 11;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeTestsInvocation(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
      value.getClass();  // minimal bytecode null check
      if (testsInvocation_ != null &&
          testsInvocation_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance()) {
        testsInvocation_ =
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.newBuilder(testsInvocation_).mergeFrom(value).buildPartial();
      } else {
        testsInvocation_ = value;
      }
      bitField0_ |= 0x00000010;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement tests_invocation = 11;</code>
     */
    private void clearTestsInvocation() {  testsInvocation_ = null;
      bitField0_ = (bitField0_ & ~0x00000010);
    }

    public static final int MAIN_INVOCATION_FIELD_NUMBER = 12;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement mainInvocation_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement main_invocation = 12;</code>
     */
    @java.lang.Override
    public boolean hasMainInvocation() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement main_invocation = 12;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getMainInvocation() {
      return mainInvocation_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance() : mainInvocation_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement main_invocation = 12;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setMainInvocation(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
      value.getClass();  // minimal bytecode null check
      mainInvocation_ = value;
      bitField0_ |= 0x00000020;
      }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement main_invocation = 12;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeMainInvocation(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
      value.getClass();  // minimal bytecode null check
      if (mainInvocation_ != null &&
          mainInvocation_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance()) {
        mainInvocation_ =
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.newBuilder(mainInvocation_).mergeFrom(value).buildPartial();
      } else {
        mainInvocation_ = value;
      }
      bitField0_ |= 0x00000020;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement main_invocation = 12;</code>
     */
    private void clearMainInvocation() {  mainInvocation_ = null;
      bitField0_ = (bitField0_ & ~0x00000020);
    }

    public static final int INLINED_LOCAL_DECLARATIONS_FIELD_NUMBER = 13;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations> inlinedLocalDeclarations_;
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlinedLocalDeclarations inlined_local_declarations = 13;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations> getInlinedLocalDeclarationsList() {
      return inlinedLocalDeclarations_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlinedLocalDeclarations inlined_local_declarations = 13;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarationsOrBuilder> 
        getInlinedLocalDeclarationsOrBuilderList() {
      return inlinedLocalDeclarations_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlinedLocalDeclarations inlined_local_declarations = 13;</code>
     */
    @java.lang.Override
    public int getInlinedLocalDeclarationsCount() {
      return inlinedLocalDeclarations_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlinedLocalDeclarations inlined_local_declarations = 13;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations getInlinedLocalDeclarations(int index) {
      return inlinedLocalDeclarations_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlinedLocalDeclarations inlined_local_declarations = 13;</code>
     */
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarationsOrBuilder getInlinedLocalDeclarationsOrBuilder(
        int index) {
      return inlinedLocalDeclarations_.get(index);
    }
    private void ensureInlinedLocalDeclarationsIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations> tmp = inlinedLocalDeclarations_;
      if (!tmp.isModifiable()) {
        inlinedLocalDeclarations_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlinedLocalDeclarations inlined_local_declarations = 13;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setInlinedLocalDeclarations(
        int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations value) {
      value.getClass();  // minimal bytecode null check
      ensureInlinedLocalDeclarationsIsMutable();
      inlinedLocalDeclarations_.set(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlinedLocalDeclarations inlined_local_declarations = 13;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addInlinedLocalDeclarations(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations value) {
      value.getClass();  // minimal bytecode null check
      ensureInlinedLocalDeclarationsIsMutable();
      inlinedLocalDeclarations_.add(value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlinedLocalDeclarations inlined_local_declarations = 13;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addInlinedLocalDeclarations(
        int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations value) {
      value.getClass();  // minimal bytecode null check
      ensureInlinedLocalDeclarationsIsMutable();
      inlinedLocalDeclarations_.add(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlinedLocalDeclarations inlined_local_declarations = 13;</code>
     */
    private void addAllInlinedLocalDeclarations(
        java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations> values) {
      ensureInlinedLocalDeclarationsIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, inlinedLocalDeclarations_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlinedLocalDeclarations inlined_local_declarations = 13;</code>
     */
    private void clearInlinedLocalDeclarations() {
      inlinedLocalDeclarations_ = emptyProtobufList();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlinedLocalDeclarations inlined_local_declarations = 13;</code>
     */
    private void removeInlinedLocalDeclarations(int index) {
      ensureInlinedLocalDeclarationsIsMutable();
      inlinedLocalDeclarations_.remove(index);
    }

    public static final int IR_CLASS_MODEL_FIELD_NUMBER = 14;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel> irClassModel_;
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.IrClassModel ir_class_model = 14;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel> getIrClassModelList() {
      return irClassModel_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.IrClassModel ir_class_model = 14;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModelOrBuilder> 
        getIrClassModelOrBuilderList() {
      return irClassModel_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.IrClassModel ir_class_model = 14;</code>
     */
    @java.lang.Override
    public int getIrClassModelCount() {
      return irClassModel_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.IrClassModel ir_class_model = 14;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel getIrClassModel(int index) {
      return irClassModel_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.IrClassModel ir_class_model = 14;</code>
     */
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModelOrBuilder getIrClassModelOrBuilder(
        int index) {
      return irClassModel_.get(index);
    }
    private void ensureIrClassModelIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel> tmp = irClassModel_;
      if (!tmp.isModifiable()) {
        irClassModel_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.IrClassModel ir_class_model = 14;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setIrClassModel(
        int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel value) {
      value.getClass();  // minimal bytecode null check
      ensureIrClassModelIsMutable();
      irClassModel_.set(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.IrClassModel ir_class_model = 14;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addIrClassModel(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel value) {
      value.getClass();  // minimal bytecode null check
      ensureIrClassModelIsMutable();
      irClassModel_.add(value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.IrClassModel ir_class_model = 14;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addIrClassModel(
        int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel value) {
      value.getClass();  // minimal bytecode null check
      ensureIrClassModelIsMutable();
      irClassModel_.add(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.IrClassModel ir_class_model = 14;</code>
     */
    private void addAllIrClassModel(
        java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel> values) {
      ensureIrClassModelIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, irClassModel_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.IrClassModel ir_class_model = 14;</code>
     */
    private void clearIrClassModel() {
      irClassModel_ = emptyProtobufList();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.IrClassModel ir_class_model = 14;</code>
     */
    private void removeIrClassModel(int index) {
      ensureIrClassModelIsMutable();
      irClassModel_.remove(index);
    }

    public static final int DTS_FIELD_NUMBER = 15;
    private java.lang.String dts_;
    /**
     * <code>string dts = 15;</code>
     * @return Whether the dts field is set.
     */
    @java.lang.Override
    public boolean hasDts() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <code>string dts = 15;</code>
     * @return The dts.
     */
    @java.lang.Override
    public java.lang.String getDts() {
      return dts_;
    }
    /**
     * <code>string dts = 15;</code>
     * @return The bytes for dts.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.ByteString
        getDtsBytes() {
      return org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(dts_);
    }
    /**
     * <code>string dts = 15;</code>
     * @param value The dts to set.
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setDts(
        java.lang.String value) {
      value.getClass();  // minimal bytecode null check
      bitField0_ |= 0x00000040;
      dts_ = value;
    }
    /**
     * <code>string dts = 15;</code>
     */
    private void clearDts() {
      bitField0_ = (bitField0_ & ~0x00000040);
      dts_ = getDefaultInstance().getDts();
    }
    /**
     * <code>string dts = 15;</code>
     * @param value The bytes for dts to set.
     */
    private void setDtsBytes(
        org.jetbrains.kotlin.protobuf.ByteString value) {
      dts_ = value.toStringUtf8();
      bitField0_ |= 0x00000040;
    }

    public static final int SUITE_FUNCTION_FIELD_NUMBER = 16;
    private int suiteFunction_;
    /**
     * <code>int32 suite_function = 16;</code>
     * @return Whether the suiteFunction field is set.
     */
    @java.lang.Override
    public boolean hasSuiteFunction() {
      return ((bitField0_ & 0x00000080) != 0);
    }
    /**
     * <code>int32 suite_function = 16;</code>
     * @return The suiteFunction.
     */
    @java.lang.Override
    public int getSuiteFunction() {
      return suiteFunction_;
    }
    /**
     * <code>int32 suite_function = 16;</code>
     * @param value The suiteFunction to set.
     */
    private void setSuiteFunction(int value) {
      bitField0_ |= 0x00000080;
      suiteFunction_ = value;
    }
    /**
     * <code>int32 suite_function = 16;</code>
     */
    private void clearSuiteFunction() {
      bitField0_ = (bitField0_ & ~0x00000080);
      suiteFunction_ = 0;
    }

    public static final int DEFINITIONS_FIELD_NUMBER = 17;
    private org.jetbrains.kotlin.protobuf.Internal.IntList definitions_;
    /**
     * <code>repeated int32 definitions = 17 [features = { ... }</code>
     * @return A list containing the definitions.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getDefinitionsList() {
      return definitions_;
    }
    /**
     * <code>repeated int32 definitions = 17 [features = { ... }</code>
     * @return The count of definitions.
     */
    @java.lang.Override
    public int getDefinitionsCount() {
      return definitions_.size();
    }
    /**
     * <code>repeated int32 definitions = 17 [features = { ... }</code>
     * @param index The index of the element to return.
     * @return The definitions at the given index.
     */
    @java.lang.Override
    public int getDefinitions(int index) {
      return definitions_.getInt(index);
    }
    private void ensureDefinitionsIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.IntList tmp = definitions_;
      if (!tmp.isModifiable()) {
        definitions_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated int32 definitions = 17 [features = { ... }</code>
     * @param index The index to set the value at.
     * @param value The definitions to set.
     */
    private void setDefinitions(
        int index, int value) {
      ensureDefinitionsIsMutable();
      definitions_.setInt(index, value);
    }
    /**
     * <code>repeated int32 definitions = 17 [features = { ... }</code>
     * @param value The definitions to add.
     */
    private void addDefinitions(int value) {
      ensureDefinitionsIsMutable();
      definitions_.addInt(value);
    }
    /**
     * <code>repeated int32 definitions = 17 [features = { ... }</code>
     * @param values The definitions to add.
     */
    private void addAllDefinitions(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureDefinitionsIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, definitions_);
    }
    /**
     * <code>repeated int32 definitions = 17 [features = { ... }</code>
     */
    private void clearDefinitions() {
      definitions_ = emptyIntList();
    }

    public static final int POLYFILLS_FIELD_NUMBER = 18;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock polyfills_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock polyfills = 18;</code>
     */
    @java.lang.Override
    public boolean hasPolyfills() {
      return ((bitField0_ & 0x00000100) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock polyfills = 18;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock getPolyfills() {
      return polyfills_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.getDefaultInstance() : polyfills_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock polyfills = 18;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setPolyfills(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock value) {
      value.getClass();  // minimal bytecode null check
      polyfills_ = value;
      bitField0_ |= 0x00000100;
      }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock polyfills = 18;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergePolyfills(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock value) {
      value.getClass();  // minimal bytecode null check
      if (polyfills_ != null &&
          polyfills_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.getDefaultInstance()) {
        polyfills_ =
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.newBuilder(polyfills_).mergeFrom(value).buildPartial();
      } else {
        polyfills_ = value;
      }
      bitField0_ |= 0x00000100;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock polyfills = 18;</code>
     */
    private void clearPolyfills() {  polyfills_ = null;
      bitField0_ = (bitField0_ & ~0x00000100);
    }

    public static final int OPTIONALCROSSMODULEIMPORTS_FIELD_NUMBER = 19;
    private org.jetbrains.kotlin.protobuf.Internal.IntList optionalCrossModuleImports_;
    /**
     * <code>repeated int32 optionalCrossModuleImports = 19 [features = { ... }</code>
     * @return A list containing the optionalCrossModuleImports.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getOptionalCrossModuleImportsList() {
      return optionalCrossModuleImports_;
    }
    /**
     * <code>repeated int32 optionalCrossModuleImports = 19 [features = { ... }</code>
     * @return The count of optionalCrossModuleImports.
     */
    @java.lang.Override
    public int getOptionalCrossModuleImportsCount() {
      return optionalCrossModuleImports_.size();
    }
    /**
     * <code>repeated int32 optionalCrossModuleImports = 19 [features = { ... }</code>
     * @param index The index of the element to return.
     * @return The optionalCrossModuleImports at the given index.
     */
    @java.lang.Override
    public int getOptionalCrossModuleImports(int index) {
      return optionalCrossModuleImports_.getInt(index);
    }
    private void ensureOptionalCrossModuleImportsIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.IntList tmp = optionalCrossModuleImports_;
      if (!tmp.isModifiable()) {
        optionalCrossModuleImports_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated int32 optionalCrossModuleImports = 19 [features = { ... }</code>
     * @param index The index to set the value at.
     * @param value The optionalCrossModuleImports to set.
     */
    private void setOptionalCrossModuleImports(
        int index, int value) {
      ensureOptionalCrossModuleImportsIsMutable();
      optionalCrossModuleImports_.setInt(index, value);
    }
    /**
     * <code>repeated int32 optionalCrossModuleImports = 19 [features = { ... }</code>
     * @param value The optionalCrossModuleImports to add.
     */
    private void addOptionalCrossModuleImports(int value) {
      ensureOptionalCrossModuleImportsIsMutable();
      optionalCrossModuleImports_.addInt(value);
    }
    /**
     * <code>repeated int32 optionalCrossModuleImports = 19 [features = { ... }</code>
     * @param values The optionalCrossModuleImports to add.
     */
    private void addAllOptionalCrossModuleImports(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureOptionalCrossModuleImportsIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, optionalCrossModuleImports_);
    }
    /**
     * <code>repeated int32 optionalCrossModuleImports = 19 [features = { ... }</code>
     */
    private void clearOptionalCrossModuleImports() {
      optionalCrossModuleImports_ = emptyIntList();
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Fragment}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.Fragment)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FragmentOrBuilder {
      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ImportedModule imported_module = 1;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule> getImportedModuleList() {
        return java.util.Collections.unmodifiableList(
            instance.getImportedModuleList());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ImportedModule imported_module = 1;</code>
       */
      @java.lang.Override
      public int getImportedModuleCount() {
        return instance.getImportedModuleCount();
      }/**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ImportedModule imported_module = 1;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule getImportedModule(int index) {
        return instance.getImportedModule(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ImportedModule imported_module = 1;</code>
       */
      public Builder setImportedModule(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule value) {
        copyOnWrite();
        instance.setImportedModule(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ImportedModule imported_module = 1;</code>
       */
      public Builder setImportedModule(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule.Builder builderForValue) {
        copyOnWrite();
        instance.setImportedModule(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ImportedModule imported_module = 1;</code>
       */
      public Builder addImportedModule(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule value) {
        copyOnWrite();
        instance.addImportedModule(value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ImportedModule imported_module = 1;</code>
       */
      public Builder addImportedModule(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule value) {
        copyOnWrite();
        instance.addImportedModule(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ImportedModule imported_module = 1;</code>
       */
      public Builder addImportedModule(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule.Builder builderForValue) {
        copyOnWrite();
        instance.addImportedModule(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ImportedModule imported_module = 1;</code>
       */
      public Builder addImportedModule(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule.Builder builderForValue) {
        copyOnWrite();
        instance.addImportedModule(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ImportedModule imported_module = 1;</code>
       */
      public Builder addAllImportedModule(
          java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule> values) {
        copyOnWrite();
        instance.addAllImportedModule(values);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ImportedModule imported_module = 1;</code>
       */
      public Builder clearImportedModule() {
        copyOnWrite();
        instance.clearImportedModule();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ImportedModule imported_module = 1;</code>
       */
      public Builder removeImportedModule(int index) {
        copyOnWrite();
        instance.removeImportedModule(index);
        return this;
      }

      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Import import_entry = 2;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import> getImportEntryList() {
        return java.util.Collections.unmodifiableList(
            instance.getImportEntryList());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Import import_entry = 2;</code>
       */
      @java.lang.Override
      public int getImportEntryCount() {
        return instance.getImportEntryCount();
      }/**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Import import_entry = 2;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import getImportEntry(int index) {
        return instance.getImportEntry(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Import import_entry = 2;</code>
       */
      public Builder setImportEntry(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import value) {
        copyOnWrite();
        instance.setImportEntry(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Import import_entry = 2;</code>
       */
      public Builder setImportEntry(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import.Builder builderForValue) {
        copyOnWrite();
        instance.setImportEntry(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Import import_entry = 2;</code>
       */
      public Builder addImportEntry(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import value) {
        copyOnWrite();
        instance.addImportEntry(value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Import import_entry = 2;</code>
       */
      public Builder addImportEntry(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import value) {
        copyOnWrite();
        instance.addImportEntry(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Import import_entry = 2;</code>
       */
      public Builder addImportEntry(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import.Builder builderForValue) {
        copyOnWrite();
        instance.addImportEntry(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Import import_entry = 2;</code>
       */
      public Builder addImportEntry(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import.Builder builderForValue) {
        copyOnWrite();
        instance.addImportEntry(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Import import_entry = 2;</code>
       */
      public Builder addAllImportEntry(
          java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import> values) {
        copyOnWrite();
        instance.addAllImportEntry(values);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Import import_entry = 2;</code>
       */
      public Builder clearImportEntry() {
        copyOnWrite();
        instance.clearImportEntry();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Import import_entry = 2;</code>
       */
      public Builder removeImportEntry(int index) {
        copyOnWrite();
        instance.removeImportEntry(index);
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock declaration_block = 3;</code>
       */
      @java.lang.Override
      public boolean hasDeclarationBlock() {
        return instance.hasDeclarationBlock();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock declaration_block = 3;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock getDeclarationBlock() {
        return instance.getDeclarationBlock();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock declaration_block = 3;</code>
       */
      public Builder setDeclarationBlock(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock value) {
        copyOnWrite();
        instance.setDeclarationBlock(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock declaration_block = 3;</code>
       */
      public Builder setDeclarationBlock(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.Builder builderForValue) {
        copyOnWrite();
        instance.setDeclarationBlock(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock declaration_block = 3;</code>
       */
      public Builder mergeDeclarationBlock(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock value) {
        copyOnWrite();
        instance.mergeDeclarationBlock(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock declaration_block = 3;</code>
       */
      public Builder clearDeclarationBlock() {  copyOnWrite();
        instance.clearDeclarationBlock();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock export_block = 4;</code>
       */
      @java.lang.Override
      public boolean hasExportBlock() {
        return instance.hasExportBlock();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock export_block = 4;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock getExportBlock() {
        return instance.getExportBlock();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock export_block = 4;</code>
       */
      public Builder setExportBlock(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock value) {
        copyOnWrite();
        instance.setExportBlock(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock export_block = 4;</code>
       */
      public Builder setExportBlock(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.Builder builderForValue) {
        copyOnWrite();
        instance.setExportBlock(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock export_block = 4;</code>
       */
      public Builder mergeExportBlock(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock value) {
        copyOnWrite();
        instance.mergeExportBlock(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock export_block = 4;</code>
       */
      public Builder clearExportBlock() {  copyOnWrite();
        instance.clearExportBlock();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock initializer_block = 5;</code>
       */
      @java.lang.Override
      public boolean hasInitializerBlock() {
        return instance.hasInitializerBlock();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock initializer_block = 5;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock getInitializerBlock() {
        return instance.getInitializerBlock();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock initializer_block = 5;</code>
       */
      public Builder setInitializerBlock(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock value) {
        copyOnWrite();
        instance.setInitializerBlock(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock initializer_block = 5;</code>
       */
      public Builder setInitializerBlock(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.Builder builderForValue) {
        copyOnWrite();
        instance.setInitializerBlock(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock initializer_block = 5;</code>
       */
      public Builder mergeInitializerBlock(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock value) {
        copyOnWrite();
        instance.mergeInitializerBlock(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock initializer_block = 5;</code>
       */
      public Builder clearInitializerBlock() {  copyOnWrite();
        instance.clearInitializerBlock();
        return this;
      }

      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.NameBinding name_binding = 6;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding> getNameBindingList() {
        return java.util.Collections.unmodifiableList(
            instance.getNameBindingList());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.NameBinding name_binding = 6;</code>
       */
      @java.lang.Override
      public int getNameBindingCount() {
        return instance.getNameBindingCount();
      }/**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.NameBinding name_binding = 6;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding getNameBinding(int index) {
        return instance.getNameBinding(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.NameBinding name_binding = 6;</code>
       */
      public Builder setNameBinding(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding value) {
        copyOnWrite();
        instance.setNameBinding(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.NameBinding name_binding = 6;</code>
       */
      public Builder setNameBinding(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding.Builder builderForValue) {
        copyOnWrite();
        instance.setNameBinding(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.NameBinding name_binding = 6;</code>
       */
      public Builder addNameBinding(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding value) {
        copyOnWrite();
        instance.addNameBinding(value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.NameBinding name_binding = 6;</code>
       */
      public Builder addNameBinding(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding value) {
        copyOnWrite();
        instance.addNameBinding(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.NameBinding name_binding = 6;</code>
       */
      public Builder addNameBinding(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding.Builder builderForValue) {
        copyOnWrite();
        instance.addNameBinding(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.NameBinding name_binding = 6;</code>
       */
      public Builder addNameBinding(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding.Builder builderForValue) {
        copyOnWrite();
        instance.addNameBinding(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.NameBinding name_binding = 6;</code>
       */
      public Builder addAllNameBinding(
          java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding> values) {
        copyOnWrite();
        instance.addAllNameBinding(values);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.NameBinding name_binding = 6;</code>
       */
      public Builder clearNameBinding() {
        copyOnWrite();
        instance.clearNameBinding();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.NameBinding name_binding = 6;</code>
       */
      public Builder removeNameBinding(int index) {
        copyOnWrite();
        instance.removeNameBinding(index);
        return this;
      }

      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ClassModel class_model = 7;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel> getClassModelList() {
        return java.util.Collections.unmodifiableList(
            instance.getClassModelList());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ClassModel class_model = 7;</code>
       */
      @java.lang.Override
      public int getClassModelCount() {
        return instance.getClassModelCount();
      }/**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ClassModel class_model = 7;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel getClassModel(int index) {
        return instance.getClassModel(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ClassModel class_model = 7;</code>
       */
      public Builder setClassModel(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel value) {
        copyOnWrite();
        instance.setClassModel(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ClassModel class_model = 7;</code>
       */
      public Builder setClassModel(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel.Builder builderForValue) {
        copyOnWrite();
        instance.setClassModel(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ClassModel class_model = 7;</code>
       */
      public Builder addClassModel(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel value) {
        copyOnWrite();
        instance.addClassModel(value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ClassModel class_model = 7;</code>
       */
      public Builder addClassModel(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel value) {
        copyOnWrite();
        instance.addClassModel(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ClassModel class_model = 7;</code>
       */
      public Builder addClassModel(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel.Builder builderForValue) {
        copyOnWrite();
        instance.addClassModel(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ClassModel class_model = 7;</code>
       */
      public Builder addClassModel(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel.Builder builderForValue) {
        copyOnWrite();
        instance.addClassModel(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ClassModel class_model = 7;</code>
       */
      public Builder addAllClassModel(
          java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel> values) {
        copyOnWrite();
        instance.addAllClassModel(values);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ClassModel class_model = 7;</code>
       */
      public Builder clearClassModel() {
        copyOnWrite();
        instance.clearClassModel();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ClassModel class_model = 7;</code>
       */
      public Builder removeClassModel(int index) {
        copyOnWrite();
        instance.removeClassModel(index);
        return this;
      }

      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression module_expression = 8;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression> getModuleExpressionList() {
        return java.util.Collections.unmodifiableList(
            instance.getModuleExpressionList());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression module_expression = 8;</code>
       */
      @java.lang.Override
      public int getModuleExpressionCount() {
        return instance.getModuleExpressionCount();
      }/**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression module_expression = 8;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getModuleExpression(int index) {
        return instance.getModuleExpression(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression module_expression = 8;</code>
       */
      public Builder setModuleExpression(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        copyOnWrite();
        instance.setModuleExpression(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression module_expression = 8;</code>
       */
      public Builder setModuleExpression(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        copyOnWrite();
        instance.setModuleExpression(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression module_expression = 8;</code>
       */
      public Builder addModuleExpression(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        copyOnWrite();
        instance.addModuleExpression(value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression module_expression = 8;</code>
       */
      public Builder addModuleExpression(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        copyOnWrite();
        instance.addModuleExpression(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression module_expression = 8;</code>
       */
      public Builder addModuleExpression(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        copyOnWrite();
        instance.addModuleExpression(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression module_expression = 8;</code>
       */
      public Builder addModuleExpression(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        copyOnWrite();
        instance.addModuleExpression(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression module_expression = 8;</code>
       */
      public Builder addAllModuleExpression(
          java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression> values) {
        copyOnWrite();
        instance.addAllModuleExpression(values);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression module_expression = 8;</code>
       */
      public Builder clearModuleExpression() {
        copyOnWrite();
        instance.clearModuleExpression();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression module_expression = 8;</code>
       */
      public Builder removeModuleExpression(int index) {
        copyOnWrite();
        instance.removeModuleExpression(index);
        return this;
      }

      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlineModule inline_module = 9;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule> getInlineModuleList() {
        return java.util.Collections.unmodifiableList(
            instance.getInlineModuleList());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlineModule inline_module = 9;</code>
       */
      @java.lang.Override
      public int getInlineModuleCount() {
        return instance.getInlineModuleCount();
      }/**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlineModule inline_module = 9;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule getInlineModule(int index) {
        return instance.getInlineModule(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlineModule inline_module = 9;</code>
       */
      public Builder setInlineModule(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule value) {
        copyOnWrite();
        instance.setInlineModule(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlineModule inline_module = 9;</code>
       */
      public Builder setInlineModule(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule.Builder builderForValue) {
        copyOnWrite();
        instance.setInlineModule(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlineModule inline_module = 9;</code>
       */
      public Builder addInlineModule(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule value) {
        copyOnWrite();
        instance.addInlineModule(value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlineModule inline_module = 9;</code>
       */
      public Builder addInlineModule(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule value) {
        copyOnWrite();
        instance.addInlineModule(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlineModule inline_module = 9;</code>
       */
      public Builder addInlineModule(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule.Builder builderForValue) {
        copyOnWrite();
        instance.addInlineModule(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlineModule inline_module = 9;</code>
       */
      public Builder addInlineModule(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule.Builder builderForValue) {
        copyOnWrite();
        instance.addInlineModule(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlineModule inline_module = 9;</code>
       */
      public Builder addAllInlineModule(
          java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule> values) {
        copyOnWrite();
        instance.addAllInlineModule(values);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlineModule inline_module = 9;</code>
       */
      public Builder clearInlineModule() {
        copyOnWrite();
        instance.clearInlineModule();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlineModule inline_module = 9;</code>
       */
      public Builder removeInlineModule(int index) {
        copyOnWrite();
        instance.removeInlineModule(index);
        return this;
      }

      /**
       * <code>string package_fqn = 10;</code>
       * @return Whether the packageFqn field is set.
       */
      @java.lang.Override
      public boolean hasPackageFqn() {
        return instance.hasPackageFqn();
      }
      /**
       * <code>string package_fqn = 10;</code>
       * @return The packageFqn.
       */
      @java.lang.Override
      public java.lang.String getPackageFqn() {
        return instance.getPackageFqn();
      }
      /**
       * <code>string package_fqn = 10;</code>
       * @return The bytes for packageFqn.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.ByteString
          getPackageFqnBytes() {
        return instance.getPackageFqnBytes();
      }
      /**
       * <code>string package_fqn = 10;</code>
       * @param value The packageFqn to set.
       * @return This builder for chaining.
       */
      public Builder setPackageFqn(
          java.lang.String value) {
        copyOnWrite();
        instance.setPackageFqn(value);
        return this;
      }
      /**
       * <code>string package_fqn = 10;</code>
       * @return This builder for chaining.
       */
      public Builder clearPackageFqn() {
        copyOnWrite();
        instance.clearPackageFqn();
        return this;
      }
      /**
       * <code>string package_fqn = 10;</code>
       * @param value The bytes for packageFqn to set.
       * @return This builder for chaining.
       */
      public Builder setPackageFqnBytes(
          org.jetbrains.kotlin.protobuf.ByteString value) {
        copyOnWrite();
        instance.setPackageFqnBytes(value);
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement tests_invocation = 11;</code>
       */
      @java.lang.Override
      public boolean hasTestsInvocation() {
        return instance.hasTestsInvocation();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement tests_invocation = 11;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getTestsInvocation() {
        return instance.getTestsInvocation();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement tests_invocation = 11;</code>
       */
      public Builder setTestsInvocation(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
        copyOnWrite();
        instance.setTestsInvocation(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement tests_invocation = 11;</code>
       */
      public Builder setTestsInvocation(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder builderForValue) {
        copyOnWrite();
        instance.setTestsInvocation(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement tests_invocation = 11;</code>
       */
      public Builder mergeTestsInvocation(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
        copyOnWrite();
        instance.mergeTestsInvocation(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement tests_invocation = 11;</code>
       */
      public Builder clearTestsInvocation() {  copyOnWrite();
        instance.clearTestsInvocation();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement main_invocation = 12;</code>
       */
      @java.lang.Override
      public boolean hasMainInvocation() {
        return instance.hasMainInvocation();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement main_invocation = 12;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getMainInvocation() {
        return instance.getMainInvocation();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement main_invocation = 12;</code>
       */
      public Builder setMainInvocation(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
        copyOnWrite();
        instance.setMainInvocation(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement main_invocation = 12;</code>
       */
      public Builder setMainInvocation(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder builderForValue) {
        copyOnWrite();
        instance.setMainInvocation(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement main_invocation = 12;</code>
       */
      public Builder mergeMainInvocation(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
        copyOnWrite();
        instance.mergeMainInvocation(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement main_invocation = 12;</code>
       */
      public Builder clearMainInvocation() {  copyOnWrite();
        instance.clearMainInvocation();
        return this;
      }

      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlinedLocalDeclarations inlined_local_declarations = 13;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations> getInlinedLocalDeclarationsList() {
        return java.util.Collections.unmodifiableList(
            instance.getInlinedLocalDeclarationsList());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlinedLocalDeclarations inlined_local_declarations = 13;</code>
       */
      @java.lang.Override
      public int getInlinedLocalDeclarationsCount() {
        return instance.getInlinedLocalDeclarationsCount();
      }/**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlinedLocalDeclarations inlined_local_declarations = 13;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations getInlinedLocalDeclarations(int index) {
        return instance.getInlinedLocalDeclarations(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlinedLocalDeclarations inlined_local_declarations = 13;</code>
       */
      public Builder setInlinedLocalDeclarations(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations value) {
        copyOnWrite();
        instance.setInlinedLocalDeclarations(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlinedLocalDeclarations inlined_local_declarations = 13;</code>
       */
      public Builder setInlinedLocalDeclarations(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations.Builder builderForValue) {
        copyOnWrite();
        instance.setInlinedLocalDeclarations(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlinedLocalDeclarations inlined_local_declarations = 13;</code>
       */
      public Builder addInlinedLocalDeclarations(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations value) {
        copyOnWrite();
        instance.addInlinedLocalDeclarations(value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlinedLocalDeclarations inlined_local_declarations = 13;</code>
       */
      public Builder addInlinedLocalDeclarations(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations value) {
        copyOnWrite();
        instance.addInlinedLocalDeclarations(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlinedLocalDeclarations inlined_local_declarations = 13;</code>
       */
      public Builder addInlinedLocalDeclarations(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations.Builder builderForValue) {
        copyOnWrite();
        instance.addInlinedLocalDeclarations(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlinedLocalDeclarations inlined_local_declarations = 13;</code>
       */
      public Builder addInlinedLocalDeclarations(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations.Builder builderForValue) {
        copyOnWrite();
        instance.addInlinedLocalDeclarations(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlinedLocalDeclarations inlined_local_declarations = 13;</code>
       */
      public Builder addAllInlinedLocalDeclarations(
          java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations> values) {
        copyOnWrite();
        instance.addAllInlinedLocalDeclarations(values);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlinedLocalDeclarations inlined_local_declarations = 13;</code>
       */
      public Builder clearInlinedLocalDeclarations() {
        copyOnWrite();
        instance.clearInlinedLocalDeclarations();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlinedLocalDeclarations inlined_local_declarations = 13;</code>
       */
      public Builder removeInlinedLocalDeclarations(int index) {
        copyOnWrite();
        instance.removeInlinedLocalDeclarations(index);
        return this;
      }

      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.IrClassModel ir_class_model = 14;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel> getIrClassModelList() {
        return java.util.Collections.unmodifiableList(
            instance.getIrClassModelList());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.IrClassModel ir_class_model = 14;</code>
       */
      @java.lang.Override
      public int getIrClassModelCount() {
        return instance.getIrClassModelCount();
      }/**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.IrClassModel ir_class_model = 14;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel getIrClassModel(int index) {
        return instance.getIrClassModel(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.IrClassModel ir_class_model = 14;</code>
       */
      public Builder setIrClassModel(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel value) {
        copyOnWrite();
        instance.setIrClassModel(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.IrClassModel ir_class_model = 14;</code>
       */
      public Builder setIrClassModel(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel.Builder builderForValue) {
        copyOnWrite();
        instance.setIrClassModel(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.IrClassModel ir_class_model = 14;</code>
       */
      public Builder addIrClassModel(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel value) {
        copyOnWrite();
        instance.addIrClassModel(value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.IrClassModel ir_class_model = 14;</code>
       */
      public Builder addIrClassModel(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel value) {
        copyOnWrite();
        instance.addIrClassModel(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.IrClassModel ir_class_model = 14;</code>
       */
      public Builder addIrClassModel(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel.Builder builderForValue) {
        copyOnWrite();
        instance.addIrClassModel(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.IrClassModel ir_class_model = 14;</code>
       */
      public Builder addIrClassModel(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel.Builder builderForValue) {
        copyOnWrite();
        instance.addIrClassModel(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.IrClassModel ir_class_model = 14;</code>
       */
      public Builder addAllIrClassModel(
          java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel> values) {
        copyOnWrite();
        instance.addAllIrClassModel(values);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.IrClassModel ir_class_model = 14;</code>
       */
      public Builder clearIrClassModel() {
        copyOnWrite();
        instance.clearIrClassModel();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.IrClassModel ir_class_model = 14;</code>
       */
      public Builder removeIrClassModel(int index) {
        copyOnWrite();
        instance.removeIrClassModel(index);
        return this;
      }

      /**
       * <code>string dts = 15;</code>
       * @return Whether the dts field is set.
       */
      @java.lang.Override
      public boolean hasDts() {
        return instance.hasDts();
      }
      /**
       * <code>string dts = 15;</code>
       * @return The dts.
       */
      @java.lang.Override
      public java.lang.String getDts() {
        return instance.getDts();
      }
      /**
       * <code>string dts = 15;</code>
       * @return The bytes for dts.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.ByteString
          getDtsBytes() {
        return instance.getDtsBytes();
      }
      /**
       * <code>string dts = 15;</code>
       * @param value The dts to set.
       * @return This builder for chaining.
       */
      public Builder setDts(
          java.lang.String value) {
        copyOnWrite();
        instance.setDts(value);
        return this;
      }
      /**
       * <code>string dts = 15;</code>
       * @return This builder for chaining.
       */
      public Builder clearDts() {
        copyOnWrite();
        instance.clearDts();
        return this;
      }
      /**
       * <code>string dts = 15;</code>
       * @param value The bytes for dts to set.
       * @return This builder for chaining.
       */
      public Builder setDtsBytes(
          org.jetbrains.kotlin.protobuf.ByteString value) {
        copyOnWrite();
        instance.setDtsBytes(value);
        return this;
      }

      /**
       * <code>int32 suite_function = 16;</code>
       * @return Whether the suiteFunction field is set.
       */
      @java.lang.Override
      public boolean hasSuiteFunction() {
        return instance.hasSuiteFunction();
      }
      /**
       * <code>int32 suite_function = 16;</code>
       * @return The suiteFunction.
       */
      @java.lang.Override
      public int getSuiteFunction() {
        return instance.getSuiteFunction();
      }
      /**
       * <code>int32 suite_function = 16;</code>
       * @param value The suiteFunction to set.
       * @return This builder for chaining.
       */
      public Builder setSuiteFunction(int value) {
        copyOnWrite();
        instance.setSuiteFunction(value);
        return this;
      }
      /**
       * <code>int32 suite_function = 16;</code>
       * @return This builder for chaining.
       */
      public Builder clearSuiteFunction() {
        copyOnWrite();
        instance.clearSuiteFunction();
        return this;
      }

      /**
       * <code>repeated int32 definitions = 17 [features = { ... }</code>
       * @return A list containing the definitions.
       */
      @java.lang.Override
      public java.util.List<java.lang.Integer>
          getDefinitionsList() {
        return java.util.Collections.unmodifiableList(
            instance.getDefinitionsList());
      }
      /**
       * <code>repeated int32 definitions = 17 [features = { ... }</code>
       * @return The count of definitions.
       */
      @java.lang.Override
      public int getDefinitionsCount() {
        return instance.getDefinitionsCount();
      }
      /**
       * <code>repeated int32 definitions = 17 [features = { ... }</code>
       * @param index The index of the element to return.
       * @return The definitions at the given index.
       */
      @java.lang.Override
      public int getDefinitions(int index) {
        return instance.getDefinitions(index);
      }
      /**
       * <code>repeated int32 definitions = 17 [features = { ... }</code>
       * @param value The definitions to set.
       * @return This builder for chaining.
       */
      public Builder setDefinitions(
          int index, int value) {
        copyOnWrite();
        instance.setDefinitions(index, value);
        return this;
      }
      /**
       * <code>repeated int32 definitions = 17 [features = { ... }</code>
       * @param value The definitions to add.
       * @return This builder for chaining.
       */
      public Builder addDefinitions(int value) {
        copyOnWrite();
        instance.addDefinitions(value);
        return this;
      }
      /**
       * <code>repeated int32 definitions = 17 [features = { ... }</code>
       * @param values The definitions to add.
       * @return This builder for chaining.
       */
      public Builder addAllDefinitions(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllDefinitions(values);
        return this;
      }
      /**
       * <code>repeated int32 definitions = 17 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearDefinitions() {
        copyOnWrite();
        instance.clearDefinitions();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock polyfills = 18;</code>
       */
      @java.lang.Override
      public boolean hasPolyfills() {
        return instance.hasPolyfills();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock polyfills = 18;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock getPolyfills() {
        return instance.getPolyfills();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock polyfills = 18;</code>
       */
      public Builder setPolyfills(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock value) {
        copyOnWrite();
        instance.setPolyfills(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock polyfills = 18;</code>
       */
      public Builder setPolyfills(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.Builder builderForValue) {
        copyOnWrite();
        instance.setPolyfills(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock polyfills = 18;</code>
       */
      public Builder mergePolyfills(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock value) {
        copyOnWrite();
        instance.mergePolyfills(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock polyfills = 18;</code>
       */
      public Builder clearPolyfills() {  copyOnWrite();
        instance.clearPolyfills();
        return this;
      }

      /**
       * <code>repeated int32 optionalCrossModuleImports = 19 [features = { ... }</code>
       * @return A list containing the optionalCrossModuleImports.
       */
      @java.lang.Override
      public java.util.List<java.lang.Integer>
          getOptionalCrossModuleImportsList() {
        return java.util.Collections.unmodifiableList(
            instance.getOptionalCrossModuleImportsList());
      }
      /**
       * <code>repeated int32 optionalCrossModuleImports = 19 [features = { ... }</code>
       * @return The count of optionalCrossModuleImports.
       */
      @java.lang.Override
      public int getOptionalCrossModuleImportsCount() {
        return instance.getOptionalCrossModuleImportsCount();
      }
      /**
       * <code>repeated int32 optionalCrossModuleImports = 19 [features = { ... }</code>
       * @param index The index of the element to return.
       * @return The optionalCrossModuleImports at the given index.
       */
      @java.lang.Override
      public int getOptionalCrossModuleImports(int index) {
        return instance.getOptionalCrossModuleImports(index);
      }
      /**
       * <code>repeated int32 optionalCrossModuleImports = 19 [features = { ... }</code>
       * @param value The optionalCrossModuleImports to set.
       * @return This builder for chaining.
       */
      public Builder setOptionalCrossModuleImports(
          int index, int value) {
        copyOnWrite();
        instance.setOptionalCrossModuleImports(index, value);
        return this;
      }
      /**
       * <code>repeated int32 optionalCrossModuleImports = 19 [features = { ... }</code>
       * @param value The optionalCrossModuleImports to add.
       * @return This builder for chaining.
       */
      public Builder addOptionalCrossModuleImports(int value) {
        copyOnWrite();
        instance.addOptionalCrossModuleImports(value);
        return this;
      }
      /**
       * <code>repeated int32 optionalCrossModuleImports = 19 [features = { ... }</code>
       * @param values The optionalCrossModuleImports to add.
       * @return This builder for chaining.
       */
      public Builder addAllOptionalCrossModuleImports(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllOptionalCrossModuleImports(values);
        return this;
      }
      /**
       * <code>repeated int32 optionalCrossModuleImports = 19 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearOptionalCrossModuleImports() {
        copyOnWrite();
        instance.clearOptionalCrossModuleImports();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.Fragment)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "importedModule_",
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule.class,
              "importEntry_",
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import.class,
              "declarationBlock_",
              "exportBlock_",
              "initializerBlock_",
              "nameBinding_",
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding.class,
              "classModel_",
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel.class,
              "moduleExpression_",
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.class,
              "inlineModule_",
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule.class,
              "packageFqn_",
              "testsInvocation_",
              "mainInvocation_",
              "inlinedLocalDeclarations_",
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations.class,
              "irClassModel_",
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel.class,
              "dts_",
              "suiteFunction_",
              "definitions_",
              "polyfills_",
              "optionalCrossModuleImports_",
            };
            java.lang.String info =
                "\u0004\u0013\u0000\u0001\u0001\u0013\u0013\u0000\n\u000e\u0001\u041b\u0002\u041b" +
                "\u0003\u1409\u0000\u0004\u1409\u0001\u0005\u1409\u0002\u0006\u041b\u0007\u041b\b" +
                "\u041b\t\u041b\n\u1008\u0003\u000b\u1409\u0004\f\u1409\u0005\r\u041b\u000e\u041b" +
                "\u000f\u1008\u0006\u0010\u1004\u0007\u0011\u0016\u0012\u1409\b\u0013\u0016";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.Fragment)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment DEFAULT_INSTANCE;
    static {
      Fragment defaultInstance = new Fragment();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        Fragment.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<Fragment> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<Fragment> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface InlinedLocalDeclarationsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.InlinedLocalDeclarations)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>int32 tag = 1 [features = { ... }</code>
     * @return Whether the tag field is set.
     */
    boolean hasTag();
    /**
     * <code>int32 tag = 1 [features = { ... }</code>
     * @return The tag.
     */
    int getTag();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock block = 2 [features = { ... }</code>
     * @return Whether the block field is set.
     */
    boolean hasBlock();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock block = 2 [features = { ... }</code>
     * @return The block.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock getBlock();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.InlinedLocalDeclarations}
   */
  public  static final class InlinedLocalDeclarations extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          InlinedLocalDeclarations, InlinedLocalDeclarations.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.InlinedLocalDeclarations)
      InlinedLocalDeclarationsOrBuilder {
    private InlinedLocalDeclarations() {
    }
    private int bitField0_;
    public static final int TAG_FIELD_NUMBER = 1;
    private int tag_;
    /**
     * <code>int32 tag = 1 [features = { ... }</code>
     * @return Whether the tag field is set.
     */
    @java.lang.Override
    public boolean hasTag() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>int32 tag = 1 [features = { ... }</code>
     * @return The tag.
     */
    @java.lang.Override
    public int getTag() {
      return tag_;
    }
    /**
     * <code>int32 tag = 1 [features = { ... }</code>
     * @param value The tag to set.
     */
    private void setTag(int value) {
      bitField0_ |= 0x00000001;
      tag_ = value;
    }
    /**
     * <code>int32 tag = 1 [features = { ... }</code>
     */
    private void clearTag() {
      bitField0_ = (bitField0_ & ~0x00000001);
      tag_ = 0;
    }

    public static final int BLOCK_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock block_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock block = 2 [features = { ... }</code>
     */
    @java.lang.Override
    public boolean hasBlock() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock block = 2 [features = { ... }</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock getBlock() {
      return block_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.getDefaultInstance() : block_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock block = 2 [features = { ... }</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setBlock(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock value) {
      value.getClass();  // minimal bytecode null check
      block_ = value;
      bitField0_ |= 0x00000002;
      }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock block = 2 [features = { ... }</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeBlock(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock value) {
      value.getClass();  // minimal bytecode null check
      if (block_ != null &&
          block_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.getDefaultInstance()) {
        block_ =
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.newBuilder(block_).mergeFrom(value).buildPartial();
      } else {
        block_ = value;
      }
      bitField0_ |= 0x00000002;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock block = 2 [features = { ... }</code>
     */
    private void clearBlock() {  block_ = null;
      bitField0_ = (bitField0_ & ~0x00000002);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.InlinedLocalDeclarations}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.InlinedLocalDeclarations)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarationsOrBuilder {
      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>int32 tag = 1 [features = { ... }</code>
       * @return Whether the tag field is set.
       */
      @java.lang.Override
      public boolean hasTag() {
        return instance.hasTag();
      }
      /**
       * <code>int32 tag = 1 [features = { ... }</code>
       * @return The tag.
       */
      @java.lang.Override
      public int getTag() {
        return instance.getTag();
      }
      /**
       * <code>int32 tag = 1 [features = { ... }</code>
       * @param value The tag to set.
       * @return This builder for chaining.
       */
      public Builder setTag(int value) {
        copyOnWrite();
        instance.setTag(value);
        return this;
      }
      /**
       * <code>int32 tag = 1 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearTag() {
        copyOnWrite();
        instance.clearTag();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock block = 2 [features = { ... }</code>
       */
      @java.lang.Override
      public boolean hasBlock() {
        return instance.hasBlock();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock block = 2 [features = { ... }</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock getBlock() {
        return instance.getBlock();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock block = 2 [features = { ... }</code>
       */
      public Builder setBlock(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock value) {
        copyOnWrite();
        instance.setBlock(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock block = 2 [features = { ... }</code>
       */
      public Builder setBlock(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.Builder builderForValue) {
        copyOnWrite();
        instance.setBlock(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock block = 2 [features = { ... }</code>
       */
      public Builder mergeBlock(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock value) {
        copyOnWrite();
        instance.mergeBlock(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock block = 2 [features = { ... }</code>
       */
      public Builder clearBlock() {  copyOnWrite();
        instance.clearBlock();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.InlinedLocalDeclarations)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "tag_",
              "block_",
            };
            java.lang.String info =
                "\u0004\u0002\u0000\u0001\u0001\u0002\u0002\u0000\u0000\u0002\u0001\u1504\u0000\u0002" +
                "\u1509\u0001";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.InlinedLocalDeclarations)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations DEFAULT_INSTANCE;
    static {
      InlinedLocalDeclarations defaultInstance = new InlinedLocalDeclarations();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        InlinedLocalDeclarations.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<InlinedLocalDeclarations> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<InlinedLocalDeclarations> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ImportedModuleOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.ImportedModule)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>int32 external_name_id = 1 [features = { ... }</code>
     * @return Whether the externalNameId field is set.
     */
    boolean hasExternalNameId();
    /**
     * <code>int32 external_name_id = 1 [features = { ... }</code>
     * @return The externalNameId.
     */
    int getExternalNameId();

    /**
     * <code>int32 internal_name_id = 2 [features = { ... }</code>
     * @return Whether the internalNameId field is set.
     */
    boolean hasInternalNameId();
    /**
     * <code>int32 internal_name_id = 2 [features = { ... }</code>
     * @return The internalNameId.
     */
    int getInternalNameId();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression plain_reference = 3;</code>
     * @return Whether the plainReference field is set.
     */
    boolean hasPlainReference();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression plain_reference = 3;</code>
     * @return The plainReference.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getPlainReference();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.ImportedModule}
   */
  public  static final class ImportedModule extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          ImportedModule, ImportedModule.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.ImportedModule)
      ImportedModuleOrBuilder {
    private ImportedModule() {
    }
    private int bitField0_;
    public static final int EXTERNAL_NAME_ID_FIELD_NUMBER = 1;
    private int externalNameId_;
    /**
     * <code>int32 external_name_id = 1 [features = { ... }</code>
     * @return Whether the externalNameId field is set.
     */
    @java.lang.Override
    public boolean hasExternalNameId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>int32 external_name_id = 1 [features = { ... }</code>
     * @return The externalNameId.
     */
    @java.lang.Override
    public int getExternalNameId() {
      return externalNameId_;
    }
    /**
     * <code>int32 external_name_id = 1 [features = { ... }</code>
     * @param value The externalNameId to set.
     */
    private void setExternalNameId(int value) {
      bitField0_ |= 0x00000001;
      externalNameId_ = value;
    }
    /**
     * <code>int32 external_name_id = 1 [features = { ... }</code>
     */
    private void clearExternalNameId() {
      bitField0_ = (bitField0_ & ~0x00000001);
      externalNameId_ = 0;
    }

    public static final int INTERNAL_NAME_ID_FIELD_NUMBER = 2;
    private int internalNameId_;
    /**
     * <code>int32 internal_name_id = 2 [features = { ... }</code>
     * @return Whether the internalNameId field is set.
     */
    @java.lang.Override
    public boolean hasInternalNameId() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>int32 internal_name_id = 2 [features = { ... }</code>
     * @return The internalNameId.
     */
    @java.lang.Override
    public int getInternalNameId() {
      return internalNameId_;
    }
    /**
     * <code>int32 internal_name_id = 2 [features = { ... }</code>
     * @param value The internalNameId to set.
     */
    private void setInternalNameId(int value) {
      bitField0_ |= 0x00000002;
      internalNameId_ = value;
    }
    /**
     * <code>int32 internal_name_id = 2 [features = { ... }</code>
     */
    private void clearInternalNameId() {
      bitField0_ = (bitField0_ & ~0x00000002);
      internalNameId_ = 0;
    }

    public static final int PLAIN_REFERENCE_FIELD_NUMBER = 3;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression plainReference_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression plain_reference = 3;</code>
     */
    @java.lang.Override
    public boolean hasPlainReference() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression plain_reference = 3;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getPlainReference() {
      return plainReference_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : plainReference_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression plain_reference = 3;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setPlainReference(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      plainReference_ = value;
      bitField0_ |= 0x00000004;
      }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression plain_reference = 3;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergePlainReference(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      if (plainReference_ != null &&
          plainReference_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance()) {
        plainReference_ =
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.newBuilder(plainReference_).mergeFrom(value).buildPartial();
      } else {
        plainReference_ = value;
      }
      bitField0_ |= 0x00000004;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression plain_reference = 3;</code>
     */
    private void clearPlainReference() {  plainReference_ = null;
      bitField0_ = (bitField0_ & ~0x00000004);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.ImportedModule}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.ImportedModule)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModuleOrBuilder {
      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>int32 external_name_id = 1 [features = { ... }</code>
       * @return Whether the externalNameId field is set.
       */
      @java.lang.Override
      public boolean hasExternalNameId() {
        return instance.hasExternalNameId();
      }
      /**
       * <code>int32 external_name_id = 1 [features = { ... }</code>
       * @return The externalNameId.
       */
      @java.lang.Override
      public int getExternalNameId() {
        return instance.getExternalNameId();
      }
      /**
       * <code>int32 external_name_id = 1 [features = { ... }</code>
       * @param value The externalNameId to set.
       * @return This builder for chaining.
       */
      public Builder setExternalNameId(int value) {
        copyOnWrite();
        instance.setExternalNameId(value);
        return this;
      }
      /**
       * <code>int32 external_name_id = 1 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearExternalNameId() {
        copyOnWrite();
        instance.clearExternalNameId();
        return this;
      }

      /**
       * <code>int32 internal_name_id = 2 [features = { ... }</code>
       * @return Whether the internalNameId field is set.
       */
      @java.lang.Override
      public boolean hasInternalNameId() {
        return instance.hasInternalNameId();
      }
      /**
       * <code>int32 internal_name_id = 2 [features = { ... }</code>
       * @return The internalNameId.
       */
      @java.lang.Override
      public int getInternalNameId() {
        return instance.getInternalNameId();
      }
      /**
       * <code>int32 internal_name_id = 2 [features = { ... }</code>
       * @param value The internalNameId to set.
       * @return This builder for chaining.
       */
      public Builder setInternalNameId(int value) {
        copyOnWrite();
        instance.setInternalNameId(value);
        return this;
      }
      /**
       * <code>int32 internal_name_id = 2 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearInternalNameId() {
        copyOnWrite();
        instance.clearInternalNameId();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression plain_reference = 3;</code>
       */
      @java.lang.Override
      public boolean hasPlainReference() {
        return instance.hasPlainReference();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression plain_reference = 3;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getPlainReference() {
        return instance.getPlainReference();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression plain_reference = 3;</code>
       */
      public Builder setPlainReference(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        copyOnWrite();
        instance.setPlainReference(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression plain_reference = 3;</code>
       */
      public Builder setPlainReference(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        copyOnWrite();
        instance.setPlainReference(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression plain_reference = 3;</code>
       */
      public Builder mergePlainReference(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        copyOnWrite();
        instance.mergePlainReference(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression plain_reference = 3;</code>
       */
      public Builder clearPlainReference() {  copyOnWrite();
        instance.clearPlainReference();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.ImportedModule)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "externalNameId_",
              "internalNameId_",
              "plainReference_",
            };
            java.lang.String info =
                "\u0004\u0003\u0000\u0001\u0001\u0003\u0003\u0000\u0000\u0003\u0001\u1504\u0000\u0002" +
                "\u1504\u0001\u0003\u1409\u0002";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.ImportedModule)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule DEFAULT_INSTANCE;
    static {
      ImportedModule defaultInstance = new ImportedModule();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        ImportedModule.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<ImportedModule> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<ImportedModule> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ImportOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.Import)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>int32 signature_id = 1 [features = { ... }</code>
     * @return Whether the signatureId field is set.
     */
    boolean hasSignatureId();
    /**
     * <code>int32 signature_id = 1 [features = { ... }</code>
     * @return The signatureId.
     */
    int getSignatureId();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2 [features = { ... }</code>
     * @return Whether the expression field is set.
     */
    boolean hasExpression();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2 [features = { ... }</code>
     * @return The expression.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getExpression();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Import}
   */
  public  static final class Import extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          Import, Import.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.Import)
      ImportOrBuilder {
    private Import() {
    }
    private int bitField0_;
    public static final int SIGNATURE_ID_FIELD_NUMBER = 1;
    private int signatureId_;
    /**
     * <code>int32 signature_id = 1 [features = { ... }</code>
     * @return Whether the signatureId field is set.
     */
    @java.lang.Override
    public boolean hasSignatureId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>int32 signature_id = 1 [features = { ... }</code>
     * @return The signatureId.
     */
    @java.lang.Override
    public int getSignatureId() {
      return signatureId_;
    }
    /**
     * <code>int32 signature_id = 1 [features = { ... }</code>
     * @param value The signatureId to set.
     */
    private void setSignatureId(int value) {
      bitField0_ |= 0x00000001;
      signatureId_ = value;
    }
    /**
     * <code>int32 signature_id = 1 [features = { ... }</code>
     */
    private void clearSignatureId() {
      bitField0_ = (bitField0_ & ~0x00000001);
      signatureId_ = 0;
    }

    public static final int EXPRESSION_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression expression_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2 [features = { ... }</code>
     */
    @java.lang.Override
    public boolean hasExpression() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2 [features = { ... }</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getExpression() {
      return expression_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : expression_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2 [features = { ... }</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setExpression(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      expression_ = value;
      bitField0_ |= 0x00000002;
      }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2 [features = { ... }</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeExpression(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      if (expression_ != null &&
          expression_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance()) {
        expression_ =
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.newBuilder(expression_).mergeFrom(value).buildPartial();
      } else {
        expression_ = value;
      }
      bitField0_ |= 0x00000002;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2 [features = { ... }</code>
     */
    private void clearExpression() {  expression_ = null;
      bitField0_ = (bitField0_ & ~0x00000002);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Import}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.Import)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportOrBuilder {
      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>int32 signature_id = 1 [features = { ... }</code>
       * @return Whether the signatureId field is set.
       */
      @java.lang.Override
      public boolean hasSignatureId() {
        return instance.hasSignatureId();
      }
      /**
       * <code>int32 signature_id = 1 [features = { ... }</code>
       * @return The signatureId.
       */
      @java.lang.Override
      public int getSignatureId() {
        return instance.getSignatureId();
      }
      /**
       * <code>int32 signature_id = 1 [features = { ... }</code>
       * @param value The signatureId to set.
       * @return This builder for chaining.
       */
      public Builder setSignatureId(int value) {
        copyOnWrite();
        instance.setSignatureId(value);
        return this;
      }
      /**
       * <code>int32 signature_id = 1 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearSignatureId() {
        copyOnWrite();
        instance.clearSignatureId();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2 [features = { ... }</code>
       */
      @java.lang.Override
      public boolean hasExpression() {
        return instance.hasExpression();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2 [features = { ... }</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getExpression() {
        return instance.getExpression();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2 [features = { ... }</code>
       */
      public Builder setExpression(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        copyOnWrite();
        instance.setExpression(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2 [features = { ... }</code>
       */
      public Builder setExpression(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        copyOnWrite();
        instance.setExpression(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2 [features = { ... }</code>
       */
      public Builder mergeExpression(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        copyOnWrite();
        instance.mergeExpression(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2 [features = { ... }</code>
       */
      public Builder clearExpression() {  copyOnWrite();
        instance.clearExpression();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.Import)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "signatureId_",
              "expression_",
            };
            java.lang.String info =
                "\u0004\u0002\u0000\u0001\u0001\u0002\u0002\u0000\u0000\u0002\u0001\u1504\u0000\u0002" +
                "\u1509\u0001";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.Import)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import DEFAULT_INSTANCE;
    static {
      Import defaultInstance = new Import();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        Import.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<Import> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<Import> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface NameBindingOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.NameBinding)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>int32 signature_id = 1 [features = { ... }</code>
     * @return Whether the signatureId field is set.
     */
    boolean hasSignatureId();
    /**
     * <code>int32 signature_id = 1 [features = { ... }</code>
     * @return The signatureId.
     */
    int getSignatureId();

    /**
     * <code>int32 nameId = 2 [features = { ... }</code>
     * @return Whether the nameId field is set.
     */
    boolean hasNameId();
    /**
     * <code>int32 nameId = 2 [features = { ... }</code>
     * @return The nameId.
     */
    int getNameId();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.NameBinding}
   */
  public  static final class NameBinding extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          NameBinding, NameBinding.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.NameBinding)
      NameBindingOrBuilder {
    private NameBinding() {
    }
    private int bitField0_;
    public static final int SIGNATURE_ID_FIELD_NUMBER = 1;
    private int signatureId_;
    /**
     * <code>int32 signature_id = 1 [features = { ... }</code>
     * @return Whether the signatureId field is set.
     */
    @java.lang.Override
    public boolean hasSignatureId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>int32 signature_id = 1 [features = { ... }</code>
     * @return The signatureId.
     */
    @java.lang.Override
    public int getSignatureId() {
      return signatureId_;
    }
    /**
     * <code>int32 signature_id = 1 [features = { ... }</code>
     * @param value The signatureId to set.
     */
    private void setSignatureId(int value) {
      bitField0_ |= 0x00000001;
      signatureId_ = value;
    }
    /**
     * <code>int32 signature_id = 1 [features = { ... }</code>
     */
    private void clearSignatureId() {
      bitField0_ = (bitField0_ & ~0x00000001);
      signatureId_ = 0;
    }

    public static final int NAMEID_FIELD_NUMBER = 2;
    private int nameId_;
    /**
     * <code>int32 nameId = 2 [features = { ... }</code>
     * @return Whether the nameId field is set.
     */
    @java.lang.Override
    public boolean hasNameId() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>int32 nameId = 2 [features = { ... }</code>
     * @return The nameId.
     */
    @java.lang.Override
    public int getNameId() {
      return nameId_;
    }
    /**
     * <code>int32 nameId = 2 [features = { ... }</code>
     * @param value The nameId to set.
     */
    private void setNameId(int value) {
      bitField0_ |= 0x00000002;
      nameId_ = value;
    }
    /**
     * <code>int32 nameId = 2 [features = { ... }</code>
     */
    private void clearNameId() {
      bitField0_ = (bitField0_ & ~0x00000002);
      nameId_ = 0;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.NameBinding}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.NameBinding)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBindingOrBuilder {
      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>int32 signature_id = 1 [features = { ... }</code>
       * @return Whether the signatureId field is set.
       */
      @java.lang.Override
      public boolean hasSignatureId() {
        return instance.hasSignatureId();
      }
      /**
       * <code>int32 signature_id = 1 [features = { ... }</code>
       * @return The signatureId.
       */
      @java.lang.Override
      public int getSignatureId() {
        return instance.getSignatureId();
      }
      /**
       * <code>int32 signature_id = 1 [features = { ... }</code>
       * @param value The signatureId to set.
       * @return This builder for chaining.
       */
      public Builder setSignatureId(int value) {
        copyOnWrite();
        instance.setSignatureId(value);
        return this;
      }
      /**
       * <code>int32 signature_id = 1 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearSignatureId() {
        copyOnWrite();
        instance.clearSignatureId();
        return this;
      }

      /**
       * <code>int32 nameId = 2 [features = { ... }</code>
       * @return Whether the nameId field is set.
       */
      @java.lang.Override
      public boolean hasNameId() {
        return instance.hasNameId();
      }
      /**
       * <code>int32 nameId = 2 [features = { ... }</code>
       * @return The nameId.
       */
      @java.lang.Override
      public int getNameId() {
        return instance.getNameId();
      }
      /**
       * <code>int32 nameId = 2 [features = { ... }</code>
       * @param value The nameId to set.
       * @return This builder for chaining.
       */
      public Builder setNameId(int value) {
        copyOnWrite();
        instance.setNameId(value);
        return this;
      }
      /**
       * <code>int32 nameId = 2 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearNameId() {
        copyOnWrite();
        instance.clearNameId();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.NameBinding)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "signatureId_",
              "nameId_",
            };
            java.lang.String info =
                "\u0004\u0002\u0000\u0001\u0001\u0002\u0002\u0000\u0000\u0002\u0001\u1504\u0000\u0002" +
                "\u1504\u0001";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.NameBinding)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding DEFAULT_INSTANCE;
    static {
      NameBinding defaultInstance = new NameBinding();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        NameBinding.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<NameBinding> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<NameBinding> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ClassModelOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.ClassModel)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>int32 name_id = 1 [features = { ... }</code>
     * @return Whether the nameId field is set.
     */
    boolean hasNameId();
    /**
     * <code>int32 name_id = 1 [features = { ... }</code>
     * @return The nameId.
     */
    int getNameId();

    /**
     * <code>int32 super_name_id = 2;</code>
     * @return Whether the superNameId field is set.
     */
    boolean hasSuperNameId();
    /**
     * <code>int32 super_name_id = 2;</code>
     * @return The superNameId.
     */
    int getSuperNameId();

    /**
     * <code>repeated int32 interface_name_id = 4 [features = { ... }</code>
     * @return A list containing the interfaceNameId.
     */
    java.util.List<java.lang.Integer> getInterfaceNameIdList();
    /**
     * <code>repeated int32 interface_name_id = 4 [features = { ... }</code>
     * @return The count of interfaceNameId.
     */
    int getInterfaceNameIdCount();
    /**
     * <code>repeated int32 interface_name_id = 4 [features = { ... }</code>
     * @param index The index of the element to return.
     * @return The interfaceNameId at the given index.
     */
    int getInterfaceNameId(int index);

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock post_declaration_block = 3;</code>
     * @return Whether the postDeclarationBlock field is set.
     */
    boolean hasPostDeclarationBlock();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock post_declaration_block = 3;</code>
     * @return The postDeclarationBlock.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock getPostDeclarationBlock();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.ClassModel}
   */
  public  static final class ClassModel extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          ClassModel, ClassModel.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.ClassModel)
      ClassModelOrBuilder {
    private ClassModel() {
      interfaceNameId_ = emptyIntList();
    }
    private int bitField0_;
    public static final int NAME_ID_FIELD_NUMBER = 1;
    private int nameId_;
    /**
     * <code>int32 name_id = 1 [features = { ... }</code>
     * @return Whether the nameId field is set.
     */
    @java.lang.Override
    public boolean hasNameId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>int32 name_id = 1 [features = { ... }</code>
     * @return The nameId.
     */
    @java.lang.Override
    public int getNameId() {
      return nameId_;
    }
    /**
     * <code>int32 name_id = 1 [features = { ... }</code>
     * @param value The nameId to set.
     */
    private void setNameId(int value) {
      bitField0_ |= 0x00000001;
      nameId_ = value;
    }
    /**
     * <code>int32 name_id = 1 [features = { ... }</code>
     */
    private void clearNameId() {
      bitField0_ = (bitField0_ & ~0x00000001);
      nameId_ = 0;
    }

    public static final int SUPER_NAME_ID_FIELD_NUMBER = 2;
    private int superNameId_;
    /**
     * <code>int32 super_name_id = 2;</code>
     * @return Whether the superNameId field is set.
     */
    @java.lang.Override
    public boolean hasSuperNameId() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>int32 super_name_id = 2;</code>
     * @return The superNameId.
     */
    @java.lang.Override
    public int getSuperNameId() {
      return superNameId_;
    }
    /**
     * <code>int32 super_name_id = 2;</code>
     * @param value The superNameId to set.
     */
    private void setSuperNameId(int value) {
      bitField0_ |= 0x00000002;
      superNameId_ = value;
    }
    /**
     * <code>int32 super_name_id = 2;</code>
     */
    private void clearSuperNameId() {
      bitField0_ = (bitField0_ & ~0x00000002);
      superNameId_ = 0;
    }

    public static final int INTERFACE_NAME_ID_FIELD_NUMBER = 4;
    private org.jetbrains.kotlin.protobuf.Internal.IntList interfaceNameId_;
    /**
     * <code>repeated int32 interface_name_id = 4 [features = { ... }</code>
     * @return A list containing the interfaceNameId.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getInterfaceNameIdList() {
      return interfaceNameId_;
    }
    /**
     * <code>repeated int32 interface_name_id = 4 [features = { ... }</code>
     * @return The count of interfaceNameId.
     */
    @java.lang.Override
    public int getInterfaceNameIdCount() {
      return interfaceNameId_.size();
    }
    /**
     * <code>repeated int32 interface_name_id = 4 [features = { ... }</code>
     * @param index The index of the element to return.
     * @return The interfaceNameId at the given index.
     */
    @java.lang.Override
    public int getInterfaceNameId(int index) {
      return interfaceNameId_.getInt(index);
    }
    private void ensureInterfaceNameIdIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.IntList tmp = interfaceNameId_;
      if (!tmp.isModifiable()) {
        interfaceNameId_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated int32 interface_name_id = 4 [features = { ... }</code>
     * @param index The index to set the value at.
     * @param value The interfaceNameId to set.
     */
    private void setInterfaceNameId(
        int index, int value) {
      ensureInterfaceNameIdIsMutable();
      interfaceNameId_.setInt(index, value);
    }
    /**
     * <code>repeated int32 interface_name_id = 4 [features = { ... }</code>
     * @param value The interfaceNameId to add.
     */
    private void addInterfaceNameId(int value) {
      ensureInterfaceNameIdIsMutable();
      interfaceNameId_.addInt(value);
    }
    /**
     * <code>repeated int32 interface_name_id = 4 [features = { ... }</code>
     * @param values The interfaceNameId to add.
     */
    private void addAllInterfaceNameId(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureInterfaceNameIdIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, interfaceNameId_);
    }
    /**
     * <code>repeated int32 interface_name_id = 4 [features = { ... }</code>
     */
    private void clearInterfaceNameId() {
      interfaceNameId_ = emptyIntList();
    }

    public static final int POST_DECLARATION_BLOCK_FIELD_NUMBER = 3;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock postDeclarationBlock_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock post_declaration_block = 3;</code>
     */
    @java.lang.Override
    public boolean hasPostDeclarationBlock() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock post_declaration_block = 3;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock getPostDeclarationBlock() {
      return postDeclarationBlock_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.getDefaultInstance() : postDeclarationBlock_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock post_declaration_block = 3;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setPostDeclarationBlock(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock value) {
      value.getClass();  // minimal bytecode null check
      postDeclarationBlock_ = value;
      bitField0_ |= 0x00000004;
      }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock post_declaration_block = 3;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergePostDeclarationBlock(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock value) {
      value.getClass();  // minimal bytecode null check
      if (postDeclarationBlock_ != null &&
          postDeclarationBlock_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.getDefaultInstance()) {
        postDeclarationBlock_ =
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.newBuilder(postDeclarationBlock_).mergeFrom(value).buildPartial();
      } else {
        postDeclarationBlock_ = value;
      }
      bitField0_ |= 0x00000004;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock post_declaration_block = 3;</code>
     */
    private void clearPostDeclarationBlock() {  postDeclarationBlock_ = null;
      bitField0_ = (bitField0_ & ~0x00000004);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.ClassModel}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.ClassModel)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModelOrBuilder {
      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>int32 name_id = 1 [features = { ... }</code>
       * @return Whether the nameId field is set.
       */
      @java.lang.Override
      public boolean hasNameId() {
        return instance.hasNameId();
      }
      /**
       * <code>int32 name_id = 1 [features = { ... }</code>
       * @return The nameId.
       */
      @java.lang.Override
      public int getNameId() {
        return instance.getNameId();
      }
      /**
       * <code>int32 name_id = 1 [features = { ... }</code>
       * @param value The nameId to set.
       * @return This builder for chaining.
       */
      public Builder setNameId(int value) {
        copyOnWrite();
        instance.setNameId(value);
        return this;
      }
      /**
       * <code>int32 name_id = 1 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearNameId() {
        copyOnWrite();
        instance.clearNameId();
        return this;
      }

      /**
       * <code>int32 super_name_id = 2;</code>
       * @return Whether the superNameId field is set.
       */
      @java.lang.Override
      public boolean hasSuperNameId() {
        return instance.hasSuperNameId();
      }
      /**
       * <code>int32 super_name_id = 2;</code>
       * @return The superNameId.
       */
      @java.lang.Override
      public int getSuperNameId() {
        return instance.getSuperNameId();
      }
      /**
       * <code>int32 super_name_id = 2;</code>
       * @param value The superNameId to set.
       * @return This builder for chaining.
       */
      public Builder setSuperNameId(int value) {
        copyOnWrite();
        instance.setSuperNameId(value);
        return this;
      }
      /**
       * <code>int32 super_name_id = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearSuperNameId() {
        copyOnWrite();
        instance.clearSuperNameId();
        return this;
      }

      /**
       * <code>repeated int32 interface_name_id = 4 [features = { ... }</code>
       * @return A list containing the interfaceNameId.
       */
      @java.lang.Override
      public java.util.List<java.lang.Integer>
          getInterfaceNameIdList() {
        return java.util.Collections.unmodifiableList(
            instance.getInterfaceNameIdList());
      }
      /**
       * <code>repeated int32 interface_name_id = 4 [features = { ... }</code>
       * @return The count of interfaceNameId.
       */
      @java.lang.Override
      public int getInterfaceNameIdCount() {
        return instance.getInterfaceNameIdCount();
      }
      /**
       * <code>repeated int32 interface_name_id = 4 [features = { ... }</code>
       * @param index The index of the element to return.
       * @return The interfaceNameId at the given index.
       */
      @java.lang.Override
      public int getInterfaceNameId(int index) {
        return instance.getInterfaceNameId(index);
      }
      /**
       * <code>repeated int32 interface_name_id = 4 [features = { ... }</code>
       * @param value The interfaceNameId to set.
       * @return This builder for chaining.
       */
      public Builder setInterfaceNameId(
          int index, int value) {
        copyOnWrite();
        instance.setInterfaceNameId(index, value);
        return this;
      }
      /**
       * <code>repeated int32 interface_name_id = 4 [features = { ... }</code>
       * @param value The interfaceNameId to add.
       * @return This builder for chaining.
       */
      public Builder addInterfaceNameId(int value) {
        copyOnWrite();
        instance.addInterfaceNameId(value);
        return this;
      }
      /**
       * <code>repeated int32 interface_name_id = 4 [features = { ... }</code>
       * @param values The interfaceNameId to add.
       * @return This builder for chaining.
       */
      public Builder addAllInterfaceNameId(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllInterfaceNameId(values);
        return this;
      }
      /**
       * <code>repeated int32 interface_name_id = 4 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearInterfaceNameId() {
        copyOnWrite();
        instance.clearInterfaceNameId();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock post_declaration_block = 3;</code>
       */
      @java.lang.Override
      public boolean hasPostDeclarationBlock() {
        return instance.hasPostDeclarationBlock();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock post_declaration_block = 3;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock getPostDeclarationBlock() {
        return instance.getPostDeclarationBlock();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock post_declaration_block = 3;</code>
       */
      public Builder setPostDeclarationBlock(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock value) {
        copyOnWrite();
        instance.setPostDeclarationBlock(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock post_declaration_block = 3;</code>
       */
      public Builder setPostDeclarationBlock(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.Builder builderForValue) {
        copyOnWrite();
        instance.setPostDeclarationBlock(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock post_declaration_block = 3;</code>
       */
      public Builder mergePostDeclarationBlock(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock value) {
        copyOnWrite();
        instance.mergePostDeclarationBlock(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock post_declaration_block = 3;</code>
       */
      public Builder clearPostDeclarationBlock() {  copyOnWrite();
        instance.clearPostDeclarationBlock();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.ClassModel)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "nameId_",
              "superNameId_",
              "postDeclarationBlock_",
              "interfaceNameId_",
            };
            java.lang.String info =
                "\u0004\u0004\u0000\u0001\u0001\u0004\u0004\u0000\u0001\u0002\u0001\u1504\u0000\u0002" +
                "\u1004\u0001\u0003\u1409\u0002\u0004\u0016";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.ClassModel)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel DEFAULT_INSTANCE;
    static {
      ClassModel defaultInstance = new ClassModel();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        ClassModel.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<ClassModel> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<ClassModel> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface IrClassModelOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.IrClassModel)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>int32 name_id = 1 [features = { ... }</code>
     * @return Whether the nameId field is set.
     */
    boolean hasNameId();
    /**
     * <code>int32 name_id = 1 [features = { ... }</code>
     * @return The nameId.
     */
    int getNameId();

    /**
     * <code>repeated int32 super_classes = 2 [features = { ... }</code>
     * @return A list containing the superClasses.
     */
    java.util.List<java.lang.Integer> getSuperClassesList();
    /**
     * <code>repeated int32 super_classes = 2 [features = { ... }</code>
     * @return The count of superClasses.
     */
    int getSuperClassesCount();
    /**
     * <code>repeated int32 super_classes = 2 [features = { ... }</code>
     * @param index The index of the element to return.
     * @return The superClasses at the given index.
     */
    int getSuperClasses(int index);

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock pre_declaration_block = 3;</code>
     * @return Whether the preDeclarationBlock field is set.
     */
    boolean hasPreDeclarationBlock();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock pre_declaration_block = 3;</code>
     * @return The preDeclarationBlock.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock getPreDeclarationBlock();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock post_declaration_block = 4;</code>
     * @return Whether the postDeclarationBlock field is set.
     */
    boolean hasPostDeclarationBlock();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock post_declaration_block = 4;</code>
     * @return The postDeclarationBlock.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock getPostDeclarationBlock();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.IrClassModel}
   */
  public  static final class IrClassModel extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          IrClassModel, IrClassModel.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.IrClassModel)
      IrClassModelOrBuilder {
    private IrClassModel() {
      superClasses_ = emptyIntList();
    }
    private int bitField0_;
    public static final int NAME_ID_FIELD_NUMBER = 1;
    private int nameId_;
    /**
     * <code>int32 name_id = 1 [features = { ... }</code>
     * @return Whether the nameId field is set.
     */
    @java.lang.Override
    public boolean hasNameId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>int32 name_id = 1 [features = { ... }</code>
     * @return The nameId.
     */
    @java.lang.Override
    public int getNameId() {
      return nameId_;
    }
    /**
     * <code>int32 name_id = 1 [features = { ... }</code>
     * @param value The nameId to set.
     */
    private void setNameId(int value) {
      bitField0_ |= 0x00000001;
      nameId_ = value;
    }
    /**
     * <code>int32 name_id = 1 [features = { ... }</code>
     */
    private void clearNameId() {
      bitField0_ = (bitField0_ & ~0x00000001);
      nameId_ = 0;
    }

    public static final int SUPER_CLASSES_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.protobuf.Internal.IntList superClasses_;
    /**
     * <code>repeated int32 super_classes = 2 [features = { ... }</code>
     * @return A list containing the superClasses.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getSuperClassesList() {
      return superClasses_;
    }
    /**
     * <code>repeated int32 super_classes = 2 [features = { ... }</code>
     * @return The count of superClasses.
     */
    @java.lang.Override
    public int getSuperClassesCount() {
      return superClasses_.size();
    }
    /**
     * <code>repeated int32 super_classes = 2 [features = { ... }</code>
     * @param index The index of the element to return.
     * @return The superClasses at the given index.
     */
    @java.lang.Override
    public int getSuperClasses(int index) {
      return superClasses_.getInt(index);
    }
    private void ensureSuperClassesIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.IntList tmp = superClasses_;
      if (!tmp.isModifiable()) {
        superClasses_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated int32 super_classes = 2 [features = { ... }</code>
     * @param index The index to set the value at.
     * @param value The superClasses to set.
     */
    private void setSuperClasses(
        int index, int value) {
      ensureSuperClassesIsMutable();
      superClasses_.setInt(index, value);
    }
    /**
     * <code>repeated int32 super_classes = 2 [features = { ... }</code>
     * @param value The superClasses to add.
     */
    private void addSuperClasses(int value) {
      ensureSuperClassesIsMutable();
      superClasses_.addInt(value);
    }
    /**
     * <code>repeated int32 super_classes = 2 [features = { ... }</code>
     * @param values The superClasses to add.
     */
    private void addAllSuperClasses(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureSuperClassesIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, superClasses_);
    }
    /**
     * <code>repeated int32 super_classes = 2 [features = { ... }</code>
     */
    private void clearSuperClasses() {
      superClasses_ = emptyIntList();
    }

    public static final int PRE_DECLARATION_BLOCK_FIELD_NUMBER = 3;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock preDeclarationBlock_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock pre_declaration_block = 3;</code>
     */
    @java.lang.Override
    public boolean hasPreDeclarationBlock() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock pre_declaration_block = 3;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock getPreDeclarationBlock() {
      return preDeclarationBlock_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.getDefaultInstance() : preDeclarationBlock_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock pre_declaration_block = 3;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setPreDeclarationBlock(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock value) {
      value.getClass();  // minimal bytecode null check
      preDeclarationBlock_ = value;
      bitField0_ |= 0x00000002;
      }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock pre_declaration_block = 3;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergePreDeclarationBlock(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock value) {
      value.getClass();  // minimal bytecode null check
      if (preDeclarationBlock_ != null &&
          preDeclarationBlock_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.getDefaultInstance()) {
        preDeclarationBlock_ =
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.newBuilder(preDeclarationBlock_).mergeFrom(value).buildPartial();
      } else {
        preDeclarationBlock_ = value;
      }
      bitField0_ |= 0x00000002;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock pre_declaration_block = 3;</code>
     */
    private void clearPreDeclarationBlock() {  preDeclarationBlock_ = null;
      bitField0_ = (bitField0_ & ~0x00000002);
    }

    public static final int POST_DECLARATION_BLOCK_FIELD_NUMBER = 4;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock postDeclarationBlock_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock post_declaration_block = 4;</code>
     */
    @java.lang.Override
    public boolean hasPostDeclarationBlock() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock post_declaration_block = 4;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock getPostDeclarationBlock() {
      return postDeclarationBlock_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.getDefaultInstance() : postDeclarationBlock_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock post_declaration_block = 4;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setPostDeclarationBlock(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock value) {
      value.getClass();  // minimal bytecode null check
      postDeclarationBlock_ = value;
      bitField0_ |= 0x00000004;
      }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock post_declaration_block = 4;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergePostDeclarationBlock(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock value) {
      value.getClass();  // minimal bytecode null check
      if (postDeclarationBlock_ != null &&
          postDeclarationBlock_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.getDefaultInstance()) {
        postDeclarationBlock_ =
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.newBuilder(postDeclarationBlock_).mergeFrom(value).buildPartial();
      } else {
        postDeclarationBlock_ = value;
      }
      bitField0_ |= 0x00000004;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock post_declaration_block = 4;</code>
     */
    private void clearPostDeclarationBlock() {  postDeclarationBlock_ = null;
      bitField0_ = (bitField0_ & ~0x00000004);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.IrClassModel}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.IrClassModel)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModelOrBuilder {
      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>int32 name_id = 1 [features = { ... }</code>
       * @return Whether the nameId field is set.
       */
      @java.lang.Override
      public boolean hasNameId() {
        return instance.hasNameId();
      }
      /**
       * <code>int32 name_id = 1 [features = { ... }</code>
       * @return The nameId.
       */
      @java.lang.Override
      public int getNameId() {
        return instance.getNameId();
      }
      /**
       * <code>int32 name_id = 1 [features = { ... }</code>
       * @param value The nameId to set.
       * @return This builder for chaining.
       */
      public Builder setNameId(int value) {
        copyOnWrite();
        instance.setNameId(value);
        return this;
      }
      /**
       * <code>int32 name_id = 1 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearNameId() {
        copyOnWrite();
        instance.clearNameId();
        return this;
      }

      /**
       * <code>repeated int32 super_classes = 2 [features = { ... }</code>
       * @return A list containing the superClasses.
       */
      @java.lang.Override
      public java.util.List<java.lang.Integer>
          getSuperClassesList() {
        return java.util.Collections.unmodifiableList(
            instance.getSuperClassesList());
      }
      /**
       * <code>repeated int32 super_classes = 2 [features = { ... }</code>
       * @return The count of superClasses.
       */
      @java.lang.Override
      public int getSuperClassesCount() {
        return instance.getSuperClassesCount();
      }
      /**
       * <code>repeated int32 super_classes = 2 [features = { ... }</code>
       * @param index The index of the element to return.
       * @return The superClasses at the given index.
       */
      @java.lang.Override
      public int getSuperClasses(int index) {
        return instance.getSuperClasses(index);
      }
      /**
       * <code>repeated int32 super_classes = 2 [features = { ... }</code>
       * @param value The superClasses to set.
       * @return This builder for chaining.
       */
      public Builder setSuperClasses(
          int index, int value) {
        copyOnWrite();
        instance.setSuperClasses(index, value);
        return this;
      }
      /**
       * <code>repeated int32 super_classes = 2 [features = { ... }</code>
       * @param value The superClasses to add.
       * @return This builder for chaining.
       */
      public Builder addSuperClasses(int value) {
        copyOnWrite();
        instance.addSuperClasses(value);
        return this;
      }
      /**
       * <code>repeated int32 super_classes = 2 [features = { ... }</code>
       * @param values The superClasses to add.
       * @return This builder for chaining.
       */
      public Builder addAllSuperClasses(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllSuperClasses(values);
        return this;
      }
      /**
       * <code>repeated int32 super_classes = 2 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearSuperClasses() {
        copyOnWrite();
        instance.clearSuperClasses();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock pre_declaration_block = 3;</code>
       */
      @java.lang.Override
      public boolean hasPreDeclarationBlock() {
        return instance.hasPreDeclarationBlock();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock pre_declaration_block = 3;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock getPreDeclarationBlock() {
        return instance.getPreDeclarationBlock();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock pre_declaration_block = 3;</code>
       */
      public Builder setPreDeclarationBlock(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock value) {
        copyOnWrite();
        instance.setPreDeclarationBlock(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock pre_declaration_block = 3;</code>
       */
      public Builder setPreDeclarationBlock(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.Builder builderForValue) {
        copyOnWrite();
        instance.setPreDeclarationBlock(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock pre_declaration_block = 3;</code>
       */
      public Builder mergePreDeclarationBlock(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock value) {
        copyOnWrite();
        instance.mergePreDeclarationBlock(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock pre_declaration_block = 3;</code>
       */
      public Builder clearPreDeclarationBlock() {  copyOnWrite();
        instance.clearPreDeclarationBlock();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock post_declaration_block = 4;</code>
       */
      @java.lang.Override
      public boolean hasPostDeclarationBlock() {
        return instance.hasPostDeclarationBlock();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock post_declaration_block = 4;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock getPostDeclarationBlock() {
        return instance.getPostDeclarationBlock();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock post_declaration_block = 4;</code>
       */
      public Builder setPostDeclarationBlock(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock value) {
        copyOnWrite();
        instance.setPostDeclarationBlock(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock post_declaration_block = 4;</code>
       */
      public Builder setPostDeclarationBlock(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.Builder builderForValue) {
        copyOnWrite();
        instance.setPostDeclarationBlock(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock post_declaration_block = 4;</code>
       */
      public Builder mergePostDeclarationBlock(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock value) {
        copyOnWrite();
        instance.mergePostDeclarationBlock(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock post_declaration_block = 4;</code>
       */
      public Builder clearPostDeclarationBlock() {  copyOnWrite();
        instance.clearPostDeclarationBlock();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.IrClassModel)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "nameId_",
              "superClasses_",
              "preDeclarationBlock_",
              "postDeclarationBlock_",
            };
            java.lang.String info =
                "\u0004\u0004\u0000\u0001\u0001\u0004\u0004\u0000\u0001\u0003\u0001\u1504\u0000\u0002" +
                "\u0016\u0003\u1409\u0001\u0004\u1409\u0002";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.IrClassModel)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel DEFAULT_INSTANCE;
    static {
      IrClassModel defaultInstance = new IrClassModel();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        IrClassModel.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<IrClassModel> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<IrClassModel> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface InlineModuleOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.InlineModule)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>int32 signature_id = 1 [features = { ... }</code>
     * @return Whether the signatureId field is set.
     */
    boolean hasSignatureId();
    /**
     * <code>int32 signature_id = 1 [features = { ... }</code>
     * @return The signatureId.
     */
    int getSignatureId();

    /**
     * <code>int32 expression_id = 2 [features = { ... }</code>
     * @return Whether the expressionId field is set.
     */
    boolean hasExpressionId();
    /**
     * <code>int32 expression_id = 2 [features = { ... }</code>
     * @return The expressionId.
     */
    int getExpressionId();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.InlineModule}
   */
  public  static final class InlineModule extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          InlineModule, InlineModule.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.InlineModule)
      InlineModuleOrBuilder {
    private InlineModule() {
    }
    private int bitField0_;
    public static final int SIGNATURE_ID_FIELD_NUMBER = 1;
    private int signatureId_;
    /**
     * <code>int32 signature_id = 1 [features = { ... }</code>
     * @return Whether the signatureId field is set.
     */
    @java.lang.Override
    public boolean hasSignatureId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>int32 signature_id = 1 [features = { ... }</code>
     * @return The signatureId.
     */
    @java.lang.Override
    public int getSignatureId() {
      return signatureId_;
    }
    /**
     * <code>int32 signature_id = 1 [features = { ... }</code>
     * @param value The signatureId to set.
     */
    private void setSignatureId(int value) {
      bitField0_ |= 0x00000001;
      signatureId_ = value;
    }
    /**
     * <code>int32 signature_id = 1 [features = { ... }</code>
     */
    private void clearSignatureId() {
      bitField0_ = (bitField0_ & ~0x00000001);
      signatureId_ = 0;
    }

    public static final int EXPRESSION_ID_FIELD_NUMBER = 2;
    private int expressionId_;
    /**
     * <code>int32 expression_id = 2 [features = { ... }</code>
     * @return Whether the expressionId field is set.
     */
    @java.lang.Override
    public boolean hasExpressionId() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>int32 expression_id = 2 [features = { ... }</code>
     * @return The expressionId.
     */
    @java.lang.Override
    public int getExpressionId() {
      return expressionId_;
    }
    /**
     * <code>int32 expression_id = 2 [features = { ... }</code>
     * @param value The expressionId to set.
     */
    private void setExpressionId(int value) {
      bitField0_ |= 0x00000002;
      expressionId_ = value;
    }
    /**
     * <code>int32 expression_id = 2 [features = { ... }</code>
     */
    private void clearExpressionId() {
      bitField0_ = (bitField0_ & ~0x00000002);
      expressionId_ = 0;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.InlineModule}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.InlineModule)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModuleOrBuilder {
      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>int32 signature_id = 1 [features = { ... }</code>
       * @return Whether the signatureId field is set.
       */
      @java.lang.Override
      public boolean hasSignatureId() {
        return instance.hasSignatureId();
      }
      /**
       * <code>int32 signature_id = 1 [features = { ... }</code>
       * @return The signatureId.
       */
      @java.lang.Override
      public int getSignatureId() {
        return instance.getSignatureId();
      }
      /**
       * <code>int32 signature_id = 1 [features = { ... }</code>
       * @param value The signatureId to set.
       * @return This builder for chaining.
       */
      public Builder setSignatureId(int value) {
        copyOnWrite();
        instance.setSignatureId(value);
        return this;
      }
      /**
       * <code>int32 signature_id = 1 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearSignatureId() {
        copyOnWrite();
        instance.clearSignatureId();
        return this;
      }

      /**
       * <code>int32 expression_id = 2 [features = { ... }</code>
       * @return Whether the expressionId field is set.
       */
      @java.lang.Override
      public boolean hasExpressionId() {
        return instance.hasExpressionId();
      }
      /**
       * <code>int32 expression_id = 2 [features = { ... }</code>
       * @return The expressionId.
       */
      @java.lang.Override
      public int getExpressionId() {
        return instance.getExpressionId();
      }
      /**
       * <code>int32 expression_id = 2 [features = { ... }</code>
       * @param value The expressionId to set.
       * @return This builder for chaining.
       */
      public Builder setExpressionId(int value) {
        copyOnWrite();
        instance.setExpressionId(value);
        return this;
      }
      /**
       * <code>int32 expression_id = 2 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearExpressionId() {
        copyOnWrite();
        instance.clearExpressionId();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.InlineModule)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "signatureId_",
              "expressionId_",
            };
            java.lang.String info =
                "\u0004\u0002\u0000\u0001\u0001\u0002\u0002\u0000\u0000\u0002\u0001\u1504\u0000\u0002" +
                "\u1504\u0001";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.InlineModule)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule DEFAULT_INSTANCE;
    static {
      InlineModule defaultInstance = new InlineModule();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        InlineModule.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<InlineModule> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<InlineModule> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface StringTableOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.StringTable)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>repeated string entry = 1;</code>
     * @return A list containing the entry.
     */
    java.util.List<java.lang.String>
        getEntryList();
    /**
     * <code>repeated string entry = 1;</code>
     * @return The count of entry.
     */
    int getEntryCount();
    /**
     * <code>repeated string entry = 1;</code>
     * @param index The index of the element to return.
     * @return The entry at the given index.
     */
    java.lang.String getEntry(int index);
    /**
     * <code>repeated string entry = 1;</code>
     * @param index The index of the element to return.
     * @return The entry at the given index.
     */
    org.jetbrains.kotlin.protobuf.ByteString
        getEntryBytes(int index);
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.StringTable}
   */
  public  static final class StringTable extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          StringTable, StringTable.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.StringTable)
      StringTableOrBuilder {
    private StringTable() {
      entry_ = org.jetbrains.kotlin.protobuf.GeneratedMessageLite.emptyProtobufList();
    }
    public static final int ENTRY_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<java.lang.String> entry_;
    /**
     * <code>repeated string entry = 1;</code>
     * @return A list containing the entry.
     */
    @java.lang.Override
    public java.util.List<java.lang.String> getEntryList() {
      return entry_;
    }
    /**
     * <code>repeated string entry = 1;</code>
     * @return The count of entry.
     */
    @java.lang.Override
    public int getEntryCount() {
      return entry_.size();
    }
    /**
     * <code>repeated string entry = 1;</code>
     * @param index The index of the element to return.
     * @return The entry at the given index.
     */
    @java.lang.Override
    public java.lang.String getEntry(int index) {
      return entry_.get(index);
    }
    /**
     * <code>repeated string entry = 1;</code>
     * @param index The index of the value to return.
     * @return The bytes of the entry at the given index.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.ByteString
        getEntryBytes(int index) {
      return org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
          entry_.get(index));
    }
    private void ensureEntryIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<java.lang.String> tmp =
          entry_;  if (!tmp.isModifiable()) {
        entry_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated string entry = 1;</code>
     * @param index The index to set the value at.
     * @param value The entry to set.
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setEntry(
        int index, java.lang.String value) {
      value.getClass();  // minimal bytecode null check
      ensureEntryIsMutable();
      entry_.set(index, value);
    }
    /**
     * <code>repeated string entry = 1;</code>
     * @param value The entry to add.
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addEntry(
        java.lang.String value) {
      value.getClass();  // minimal bytecode null check
      ensureEntryIsMutable();
      entry_.add(value);
    }
    /**
     * <code>repeated string entry = 1;</code>
     * @param values The entry to add.
     */
    private void addAllEntry(
        java.lang.Iterable<java.lang.String> values) {
      ensureEntryIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, entry_);
    }
    /**
     * <code>repeated string entry = 1;</code>
     */
    private void clearEntry() {
      entry_ = org.jetbrains.kotlin.protobuf.GeneratedMessageLite.emptyProtobufList();
    }
    /**
     * <code>repeated string entry = 1;</code>
     * @param value The bytes of the entry to add.
     */
    private void addEntryBytes(
        org.jetbrains.kotlin.protobuf.ByteString value) {
      ensureEntryIsMutable();
      entry_.add(value.toStringUtf8());
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.StringTable}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.StringTable)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTableOrBuilder {
      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>repeated string entry = 1;</code>
       * @return A list containing the entry.
       */
      @java.lang.Override
      public java.util.List<java.lang.String>
          getEntryList() {
        return java.util.Collections.unmodifiableList(
            instance.getEntryList());
      }
      /**
       * <code>repeated string entry = 1;</code>
       * @return The count of entry.
       */
      @java.lang.Override
      public int getEntryCount() {
        return instance.getEntryCount();
      }
      /**
       * <code>repeated string entry = 1;</code>
       * @param index The index of the element to return.
       * @return The entry at the given index.
       */
      @java.lang.Override
      public java.lang.String getEntry(int index) {
        return instance.getEntry(index);
      }
      /**
       * <code>repeated string entry = 1;</code>
       * @param index The index of the value to return.
       * @return The bytes of the entry at the given index.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.ByteString
          getEntryBytes(int index) {
        return instance.getEntryBytes(index);
      }
      /**
       * <code>repeated string entry = 1;</code>
       * @param index The index to set the value at.
       * @param value The entry to set.
       * @return This builder for chaining.
       */
      public Builder setEntry(
          int index, java.lang.String value) {
        copyOnWrite();
        instance.setEntry(index, value);
        return this;
      }
      /**
       * <code>repeated string entry = 1;</code>
       * @param value The entry to add.
       * @return This builder for chaining.
       */
      public Builder addEntry(
          java.lang.String value) {
        copyOnWrite();
        instance.addEntry(value);
        return this;
      }
      /**
       * <code>repeated string entry = 1;</code>
       * @param values The entry to add.
       * @return This builder for chaining.
       */
      public Builder addAllEntry(
          java.lang.Iterable<java.lang.String> values) {
        copyOnWrite();
        instance.addAllEntry(values);
        return this;
      }
      /**
       * <code>repeated string entry = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearEntry() {
        copyOnWrite();
        instance.clearEntry();
        return this;
      }
      /**
       * <code>repeated string entry = 1;</code>
       * @param value The bytes of the entry to add.
       * @return This builder for chaining.
       */
      public Builder addEntryBytes(
          org.jetbrains.kotlin.protobuf.ByteString value) {
        copyOnWrite();
        instance.addEntryBytes(value);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.StringTable)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "entry_",
            };
            java.lang.String info =
                "\u0004\u0001\u0000\u0000\u0001\u0001\u0001\u0000\u0001\u0000\u0001\u001a";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.StringTable)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable DEFAULT_INSTANCE;
    static {
      StringTable defaultInstance = new StringTable();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        StringTable.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<StringTable> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<StringTable> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface NameTableOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.NameTable)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Name entry = 1;</code>
     */
    java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name> 
        getEntryList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Name entry = 1;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name getEntry(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Name entry = 1;</code>
     */
    int getEntryCount();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.NameTable}
   */
  public  static final class NameTable extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          NameTable, NameTable.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.NameTable)
      NameTableOrBuilder {
    private NameTable() {
      entry_ = emptyProtobufList();
    }
    public static final int ENTRY_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name> entry_;
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Name entry = 1;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name> getEntryList() {
      return entry_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Name entry = 1;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameOrBuilder> 
        getEntryOrBuilderList() {
      return entry_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Name entry = 1;</code>
     */
    @java.lang.Override
    public int getEntryCount() {
      return entry_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Name entry = 1;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name getEntry(int index) {
      return entry_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Name entry = 1;</code>
     */
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameOrBuilder getEntryOrBuilder(
        int index) {
      return entry_.get(index);
    }
    private void ensureEntryIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name> tmp = entry_;
      if (!tmp.isModifiable()) {
        entry_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Name entry = 1;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setEntry(
        int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name value) {
      value.getClass();  // minimal bytecode null check
      ensureEntryIsMutable();
      entry_.set(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Name entry = 1;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addEntry(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name value) {
      value.getClass();  // minimal bytecode null check
      ensureEntryIsMutable();
      entry_.add(value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Name entry = 1;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addEntry(
        int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name value) {
      value.getClass();  // minimal bytecode null check
      ensureEntryIsMutable();
      entry_.add(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Name entry = 1;</code>
     */
    private void addAllEntry(
        java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name> values) {
      ensureEntryIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, entry_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Name entry = 1;</code>
     */
    private void clearEntry() {
      entry_ = emptyProtobufList();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Name entry = 1;</code>
     */
    private void removeEntry(int index) {
      ensureEntryIsMutable();
      entry_.remove(index);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.NameTable}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.NameTable)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTableOrBuilder {
      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Name entry = 1;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name> getEntryList() {
        return java.util.Collections.unmodifiableList(
            instance.getEntryList());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Name entry = 1;</code>
       */
      @java.lang.Override
      public int getEntryCount() {
        return instance.getEntryCount();
      }/**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Name entry = 1;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name getEntry(int index) {
        return instance.getEntry(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Name entry = 1;</code>
       */
      public Builder setEntry(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name value) {
        copyOnWrite();
        instance.setEntry(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Name entry = 1;</code>
       */
      public Builder setEntry(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name.Builder builderForValue) {
        copyOnWrite();
        instance.setEntry(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Name entry = 1;</code>
       */
      public Builder addEntry(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name value) {
        copyOnWrite();
        instance.addEntry(value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Name entry = 1;</code>
       */
      public Builder addEntry(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name value) {
        copyOnWrite();
        instance.addEntry(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Name entry = 1;</code>
       */
      public Builder addEntry(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name.Builder builderForValue) {
        copyOnWrite();
        instance.addEntry(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Name entry = 1;</code>
       */
      public Builder addEntry(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name.Builder builderForValue) {
        copyOnWrite();
        instance.addEntry(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Name entry = 1;</code>
       */
      public Builder addAllEntry(
          java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name> values) {
        copyOnWrite();
        instance.addAllEntry(values);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Name entry = 1;</code>
       */
      public Builder clearEntry() {
        copyOnWrite();
        instance.clearEntry();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Name entry = 1;</code>
       */
      public Builder removeEntry(int index) {
        copyOnWrite();
        instance.removeEntry(index);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.NameTable)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "entry_",
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name.class,
            };
            java.lang.String info =
                "\u0004\u0001\u0000\u0000\u0001\u0001\u0001\u0000\u0001\u0001\u0001\u041b";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.NameTable)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable DEFAULT_INSTANCE;
    static {
      NameTable defaultInstance = new NameTable();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        NameTable.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<NameTable> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<NameTable> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface NameOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.Name)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>bool temporary = 1 [features = { ... }</code>
     * @return Whether the temporary field is set.
     */
    boolean hasTemporary();
    /**
     * <code>bool temporary = 1 [features = { ... }</code>
     * @return The temporary.
     */
    boolean getTemporary();

    /**
     * <code>int32 identifier = 2;</code>
     * @return Whether the identifier field is set.
     */
    boolean hasIdentifier();
    /**
     * <code>int32 identifier = 2;</code>
     * @return The identifier.
     */
    int getIdentifier();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.LocalAlias local_name_id = 3;</code>
     * @return Whether the localNameId field is set.
     */
    boolean hasLocalNameId();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.LocalAlias local_name_id = 3;</code>
     * @return The localNameId.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias getLocalNameId();

    /**
     * <code>bool imported = 4 [default = false];</code>
     * @return Whether the imported field is set.
     */
    boolean hasImported();
    /**
     * <code>bool imported = 4 [default = false];</code>
     * @return The imported.
     */
    boolean getImported();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.SpecialFunction special_function = 5;</code>
     * @return Whether the specialFunction field is set.
     */
    boolean hasSpecialFunction();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.SpecialFunction special_function = 5;</code>
     * @return The specialFunction.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SpecialFunction getSpecialFunction();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Name}
   */
  public  static final class Name extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          Name, Name.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.Name)
      NameOrBuilder {
    private Name() {
      specialFunction_ = 1;
    }
    private int bitField0_;
    public static final int TEMPORARY_FIELD_NUMBER = 1;
    private boolean temporary_;
    /**
     * <code>bool temporary = 1 [features = { ... }</code>
     * @return Whether the temporary field is set.
     */
    @java.lang.Override
    public boolean hasTemporary() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>bool temporary = 1 [features = { ... }</code>
     * @return The temporary.
     */
    @java.lang.Override
    public boolean getTemporary() {
      return temporary_;
    }
    /**
     * <code>bool temporary = 1 [features = { ... }</code>
     * @param value The temporary to set.
     */
    private void setTemporary(boolean value) {
      bitField0_ |= 0x00000001;
      temporary_ = value;
    }
    /**
     * <code>bool temporary = 1 [features = { ... }</code>
     */
    private void clearTemporary() {
      bitField0_ = (bitField0_ & ~0x00000001);
      temporary_ = false;
    }

    public static final int IDENTIFIER_FIELD_NUMBER = 2;
    private int identifier_;
    /**
     * <code>int32 identifier = 2;</code>
     * @return Whether the identifier field is set.
     */
    @java.lang.Override
    public boolean hasIdentifier() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>int32 identifier = 2;</code>
     * @return The identifier.
     */
    @java.lang.Override
    public int getIdentifier() {
      return identifier_;
    }
    /**
     * <code>int32 identifier = 2;</code>
     * @param value The identifier to set.
     */
    private void setIdentifier(int value) {
      bitField0_ |= 0x00000002;
      identifier_ = value;
    }
    /**
     * <code>int32 identifier = 2;</code>
     */
    private void clearIdentifier() {
      bitField0_ = (bitField0_ & ~0x00000002);
      identifier_ = 0;
    }

    public static final int LOCAL_NAME_ID_FIELD_NUMBER = 3;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias localNameId_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.LocalAlias local_name_id = 3;</code>
     */
    @java.lang.Override
    public boolean hasLocalNameId() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.LocalAlias local_name_id = 3;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias getLocalNameId() {
      return localNameId_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias.getDefaultInstance() : localNameId_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.LocalAlias local_name_id = 3;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setLocalNameId(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias value) {
      value.getClass();  // minimal bytecode null check
      localNameId_ = value;
      bitField0_ |= 0x00000004;
      }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.LocalAlias local_name_id = 3;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeLocalNameId(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias value) {
      value.getClass();  // minimal bytecode null check
      if (localNameId_ != null &&
          localNameId_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias.getDefaultInstance()) {
        localNameId_ =
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias.newBuilder(localNameId_).mergeFrom(value).buildPartial();
      } else {
        localNameId_ = value;
      }
      bitField0_ |= 0x00000004;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.LocalAlias local_name_id = 3;</code>
     */
    private void clearLocalNameId() {  localNameId_ = null;
      bitField0_ = (bitField0_ & ~0x00000004);
    }

    public static final int IMPORTED_FIELD_NUMBER = 4;
    private boolean imported_;
    /**
     * <code>bool imported = 4 [default = false];</code>
     * @return Whether the imported field is set.
     */
    @java.lang.Override
    public boolean hasImported() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <code>bool imported = 4 [default = false];</code>
     * @return The imported.
     */
    @java.lang.Override
    public boolean getImported() {
      return imported_;
    }
    /**
     * <code>bool imported = 4 [default = false];</code>
     * @param value The imported to set.
     */
    private void setImported(boolean value) {
      bitField0_ |= 0x00000008;
      imported_ = value;
    }
    /**
     * <code>bool imported = 4 [default = false];</code>
     */
    private void clearImported() {
      bitField0_ = (bitField0_ & ~0x00000008);
      imported_ = false;
    }

    public static final int SPECIAL_FUNCTION_FIELD_NUMBER = 5;
    private int specialFunction_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.SpecialFunction special_function = 5;</code>
     * @return Whether the specialFunction field is set.
     */
    @java.lang.Override
    public boolean hasSpecialFunction() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.SpecialFunction special_function = 5;</code>
     * @return The specialFunction.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SpecialFunction getSpecialFunction() {
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SpecialFunction result = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SpecialFunction.forNumber(specialFunction_);
      return result == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SpecialFunction.DEFINE_INLINE_FUNCTION : result;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.SpecialFunction special_function = 5;</code>
     * @param value The specialFunction to set.
     */
    private void setSpecialFunction(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SpecialFunction value) {
      specialFunction_ = value.getNumber();
      bitField0_ |= 0x00000010;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.SpecialFunction special_function = 5;</code>
     */
    private void clearSpecialFunction() {
      bitField0_ = (bitField0_ & ~0x00000010);
      specialFunction_ = 1;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Name}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.Name)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameOrBuilder {
      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>bool temporary = 1 [features = { ... }</code>
       * @return Whether the temporary field is set.
       */
      @java.lang.Override
      public boolean hasTemporary() {
        return instance.hasTemporary();
      }
      /**
       * <code>bool temporary = 1 [features = { ... }</code>
       * @return The temporary.
       */
      @java.lang.Override
      public boolean getTemporary() {
        return instance.getTemporary();
      }
      /**
       * <code>bool temporary = 1 [features = { ... }</code>
       * @param value The temporary to set.
       * @return This builder for chaining.
       */
      public Builder setTemporary(boolean value) {
        copyOnWrite();
        instance.setTemporary(value);
        return this;
      }
      /**
       * <code>bool temporary = 1 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearTemporary() {
        copyOnWrite();
        instance.clearTemporary();
        return this;
      }

      /**
       * <code>int32 identifier = 2;</code>
       * @return Whether the identifier field is set.
       */
      @java.lang.Override
      public boolean hasIdentifier() {
        return instance.hasIdentifier();
      }
      /**
       * <code>int32 identifier = 2;</code>
       * @return The identifier.
       */
      @java.lang.Override
      public int getIdentifier() {
        return instance.getIdentifier();
      }
      /**
       * <code>int32 identifier = 2;</code>
       * @param value The identifier to set.
       * @return This builder for chaining.
       */
      public Builder setIdentifier(int value) {
        copyOnWrite();
        instance.setIdentifier(value);
        return this;
      }
      /**
       * <code>int32 identifier = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearIdentifier() {
        copyOnWrite();
        instance.clearIdentifier();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.LocalAlias local_name_id = 3;</code>
       */
      @java.lang.Override
      public boolean hasLocalNameId() {
        return instance.hasLocalNameId();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.LocalAlias local_name_id = 3;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias getLocalNameId() {
        return instance.getLocalNameId();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.LocalAlias local_name_id = 3;</code>
       */
      public Builder setLocalNameId(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias value) {
        copyOnWrite();
        instance.setLocalNameId(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.LocalAlias local_name_id = 3;</code>
       */
      public Builder setLocalNameId(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias.Builder builderForValue) {
        copyOnWrite();
        instance.setLocalNameId(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.LocalAlias local_name_id = 3;</code>
       */
      public Builder mergeLocalNameId(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias value) {
        copyOnWrite();
        instance.mergeLocalNameId(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.LocalAlias local_name_id = 3;</code>
       */
      public Builder clearLocalNameId() {  copyOnWrite();
        instance.clearLocalNameId();
        return this;
      }

      /**
       * <code>bool imported = 4 [default = false];</code>
       * @return Whether the imported field is set.
       */
      @java.lang.Override
      public boolean hasImported() {
        return instance.hasImported();
      }
      /**
       * <code>bool imported = 4 [default = false];</code>
       * @return The imported.
       */
      @java.lang.Override
      public boolean getImported() {
        return instance.getImported();
      }
      /**
       * <code>bool imported = 4 [default = false];</code>
       * @param value The imported to set.
       * @return This builder for chaining.
       */
      public Builder setImported(boolean value) {
        copyOnWrite();
        instance.setImported(value);
        return this;
      }
      /**
       * <code>bool imported = 4 [default = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearImported() {
        copyOnWrite();
        instance.clearImported();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.SpecialFunction special_function = 5;</code>
       * @return Whether the specialFunction field is set.
       */
      @java.lang.Override
      public boolean hasSpecialFunction() {
        return instance.hasSpecialFunction();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.SpecialFunction special_function = 5;</code>
       * @return The specialFunction.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SpecialFunction getSpecialFunction() {
        return instance.getSpecialFunction();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.SpecialFunction special_function = 5;</code>
       * @param value The enum numeric value on the wire for specialFunction to set.
       * @return This builder for chaining.
       */
      public Builder setSpecialFunction(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SpecialFunction value) {
        copyOnWrite();
        instance.setSpecialFunction(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.SpecialFunction special_function = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearSpecialFunction() {
        copyOnWrite();
        instance.clearSpecialFunction();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.Name)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "temporary_",
              "identifier_",
              "localNameId_",
              "imported_",
              "specialFunction_",
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SpecialFunction.internalGetVerifier(),
            };
            java.lang.String info =
                "\u0004\u0005\u0000\u0001\u0001\u0005\u0005\u0000\u0000\u0002\u0001\u1507\u0000\u0002" +
                "\u1004\u0001\u0003\u1409\u0002\u0004\u1007\u0003\u0005\u180c\u0004";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.Name)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name DEFAULT_INSTANCE;
    static {
      Name defaultInstance = new Name();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        Name.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<Name> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<Name> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface LocalAliasOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.LocalAlias)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>int32 local_name_id = 1 [features = { ... }</code>
     * @return Whether the localNameId field is set.
     */
    boolean hasLocalNameId();
    /**
     * <code>int32 local_name_id = 1 [features = { ... }</code>
     * @return The localNameId.
     */
    int getLocalNameId();

    /**
     * <code>int32 tag = 2;</code>
     * @return Whether the tag field is set.
     */
    boolean hasTag();
    /**
     * <code>int32 tag = 2;</code>
     * @return The tag.
     */
    int getTag();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.LocalAlias}
   */
  public  static final class LocalAlias extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          LocalAlias, LocalAlias.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.LocalAlias)
      LocalAliasOrBuilder {
    private LocalAlias() {
    }
    private int bitField0_;
    public static final int LOCAL_NAME_ID_FIELD_NUMBER = 1;
    private int localNameId_;
    /**
     * <code>int32 local_name_id = 1 [features = { ... }</code>
     * @return Whether the localNameId field is set.
     */
    @java.lang.Override
    public boolean hasLocalNameId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>int32 local_name_id = 1 [features = { ... }</code>
     * @return The localNameId.
     */
    @java.lang.Override
    public int getLocalNameId() {
      return localNameId_;
    }
    /**
     * <code>int32 local_name_id = 1 [features = { ... }</code>
     * @param value The localNameId to set.
     */
    private void setLocalNameId(int value) {
      bitField0_ |= 0x00000001;
      localNameId_ = value;
    }
    /**
     * <code>int32 local_name_id = 1 [features = { ... }</code>
     */
    private void clearLocalNameId() {
      bitField0_ = (bitField0_ & ~0x00000001);
      localNameId_ = 0;
    }

    public static final int TAG_FIELD_NUMBER = 2;
    private int tag_;
    /**
     * <code>int32 tag = 2;</code>
     * @return Whether the tag field is set.
     */
    @java.lang.Override
    public boolean hasTag() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>int32 tag = 2;</code>
     * @return The tag.
     */
    @java.lang.Override
    public int getTag() {
      return tag_;
    }
    /**
     * <code>int32 tag = 2;</code>
     * @param value The tag to set.
     */
    private void setTag(int value) {
      bitField0_ |= 0x00000002;
      tag_ = value;
    }
    /**
     * <code>int32 tag = 2;</code>
     */
    private void clearTag() {
      bitField0_ = (bitField0_ & ~0x00000002);
      tag_ = 0;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.LocalAlias}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.LocalAlias)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAliasOrBuilder {
      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>int32 local_name_id = 1 [features = { ... }</code>
       * @return Whether the localNameId field is set.
       */
      @java.lang.Override
      public boolean hasLocalNameId() {
        return instance.hasLocalNameId();
      }
      /**
       * <code>int32 local_name_id = 1 [features = { ... }</code>
       * @return The localNameId.
       */
      @java.lang.Override
      public int getLocalNameId() {
        return instance.getLocalNameId();
      }
      /**
       * <code>int32 local_name_id = 1 [features = { ... }</code>
       * @param value The localNameId to set.
       * @return This builder for chaining.
       */
      public Builder setLocalNameId(int value) {
        copyOnWrite();
        instance.setLocalNameId(value);
        return this;
      }
      /**
       * <code>int32 local_name_id = 1 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearLocalNameId() {
        copyOnWrite();
        instance.clearLocalNameId();
        return this;
      }

      /**
       * <code>int32 tag = 2;</code>
       * @return Whether the tag field is set.
       */
      @java.lang.Override
      public boolean hasTag() {
        return instance.hasTag();
      }
      /**
       * <code>int32 tag = 2;</code>
       * @return The tag.
       */
      @java.lang.Override
      public int getTag() {
        return instance.getTag();
      }
      /**
       * <code>int32 tag = 2;</code>
       * @param value The tag to set.
       * @return This builder for chaining.
       */
      public Builder setTag(int value) {
        copyOnWrite();
        instance.setTag(value);
        return this;
      }
      /**
       * <code>int32 tag = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearTag() {
        copyOnWrite();
        instance.clearTag();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.LocalAlias)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "localNameId_",
              "tag_",
            };
            java.lang.String info =
                "\u0004\u0002\u0000\u0001\u0001\u0002\u0002\u0000\u0000\u0001\u0001\u1504\u0000\u0002" +
                "\u1004\u0001";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.LocalAlias)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias DEFAULT_INSTANCE;
    static {
      LocalAlias defaultInstance = new LocalAlias();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        LocalAlias.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<LocalAlias> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<LocalAlias> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ChunkOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.Chunk)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.StringTable string_table = 1 [features = { ... }</code>
     * @return Whether the stringTable field is set.
     */
    boolean hasStringTable();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.StringTable string_table = 1 [features = { ... }</code>
     * @return The stringTable.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable getStringTable();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.NameTable name_table = 2 [features = { ... }</code>
     * @return Whether the nameTable field is set.
     */
    boolean hasNameTable();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.NameTable name_table = 2 [features = { ... }</code>
     * @return The nameTable.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable getNameTable();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Fragment fragment = 3 [features = { ... }</code>
     * @return Whether the fragment field is set.
     */
    boolean hasFragment();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Fragment fragment = 3 [features = { ... }</code>
     * @return The fragment.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment getFragment();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Chunk}
   */
  public  static final class Chunk extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          Chunk, Chunk.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.Chunk)
      ChunkOrBuilder {
    private Chunk() {
    }
    private int bitField0_;
    public static final int STRING_TABLE_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable stringTable_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.StringTable string_table = 1 [features = { ... }</code>
     */
    @java.lang.Override
    public boolean hasStringTable() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.StringTable string_table = 1 [features = { ... }</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable getStringTable() {
      return stringTable_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable.getDefaultInstance() : stringTable_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.StringTable string_table = 1 [features = { ... }</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setStringTable(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable value) {
      value.getClass();  // minimal bytecode null check
      stringTable_ = value;
      bitField0_ |= 0x00000001;
      }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.StringTable string_table = 1 [features = { ... }</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeStringTable(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable value) {
      value.getClass();  // minimal bytecode null check
      if (stringTable_ != null &&
          stringTable_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable.getDefaultInstance()) {
        stringTable_ =
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable.newBuilder(stringTable_).mergeFrom(value).buildPartial();
      } else {
        stringTable_ = value;
      }
      bitField0_ |= 0x00000001;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.StringTable string_table = 1 [features = { ... }</code>
     */
    private void clearStringTable() {  stringTable_ = null;
      bitField0_ = (bitField0_ & ~0x00000001);
    }

    public static final int NAME_TABLE_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable nameTable_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.NameTable name_table = 2 [features = { ... }</code>
     */
    @java.lang.Override
    public boolean hasNameTable() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.NameTable name_table = 2 [features = { ... }</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable getNameTable() {
      return nameTable_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable.getDefaultInstance() : nameTable_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.NameTable name_table = 2 [features = { ... }</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setNameTable(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable value) {
      value.getClass();  // minimal bytecode null check
      nameTable_ = value;
      bitField0_ |= 0x00000002;
      }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.NameTable name_table = 2 [features = { ... }</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeNameTable(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable value) {
      value.getClass();  // minimal bytecode null check
      if (nameTable_ != null &&
          nameTable_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable.getDefaultInstance()) {
        nameTable_ =
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable.newBuilder(nameTable_).mergeFrom(value).buildPartial();
      } else {
        nameTable_ = value;
      }
      bitField0_ |= 0x00000002;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.NameTable name_table = 2 [features = { ... }</code>
     */
    private void clearNameTable() {  nameTable_ = null;
      bitField0_ = (bitField0_ & ~0x00000002);
    }

    public static final int FRAGMENT_FIELD_NUMBER = 3;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment fragment_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Fragment fragment = 3 [features = { ... }</code>
     */
    @java.lang.Override
    public boolean hasFragment() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Fragment fragment = 3 [features = { ... }</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment getFragment() {
      return fragment_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment.getDefaultInstance() : fragment_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Fragment fragment = 3 [features = { ... }</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setFragment(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment value) {
      value.getClass();  // minimal bytecode null check
      fragment_ = value;
      bitField0_ |= 0x00000004;
      }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Fragment fragment = 3 [features = { ... }</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeFragment(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment value) {
      value.getClass();  // minimal bytecode null check
      if (fragment_ != null &&
          fragment_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment.getDefaultInstance()) {
        fragment_ =
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment.newBuilder(fragment_).mergeFrom(value).buildPartial();
      } else {
        fragment_ = value;
      }
      bitField0_ |= 0x00000004;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Fragment fragment = 3 [features = { ... }</code>
     */
    private void clearFragment() {  fragment_ = null;
      bitField0_ = (bitField0_ & ~0x00000004);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Chunk parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Chunk parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Chunk parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Chunk parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Chunk parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Chunk parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Chunk parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Chunk parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Chunk parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Chunk parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Chunk parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Chunk parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Chunk prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Chunk}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Chunk, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.Chunk)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ChunkOrBuilder {
      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Chunk.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.StringTable string_table = 1 [features = { ... }</code>
       */
      @java.lang.Override
      public boolean hasStringTable() {
        return instance.hasStringTable();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.StringTable string_table = 1 [features = { ... }</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable getStringTable() {
        return instance.getStringTable();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.StringTable string_table = 1 [features = { ... }</code>
       */
      public Builder setStringTable(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable value) {
        copyOnWrite();
        instance.setStringTable(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.StringTable string_table = 1 [features = { ... }</code>
       */
      public Builder setStringTable(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable.Builder builderForValue) {
        copyOnWrite();
        instance.setStringTable(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.StringTable string_table = 1 [features = { ... }</code>
       */
      public Builder mergeStringTable(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable value) {
        copyOnWrite();
        instance.mergeStringTable(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.StringTable string_table = 1 [features = { ... }</code>
       */
      public Builder clearStringTable() {  copyOnWrite();
        instance.clearStringTable();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.NameTable name_table = 2 [features = { ... }</code>
       */
      @java.lang.Override
      public boolean hasNameTable() {
        return instance.hasNameTable();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.NameTable name_table = 2 [features = { ... }</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable getNameTable() {
        return instance.getNameTable();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.NameTable name_table = 2 [features = { ... }</code>
       */
      public Builder setNameTable(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable value) {
        copyOnWrite();
        instance.setNameTable(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.NameTable name_table = 2 [features = { ... }</code>
       */
      public Builder setNameTable(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable.Builder builderForValue) {
        copyOnWrite();
        instance.setNameTable(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.NameTable name_table = 2 [features = { ... }</code>
       */
      public Builder mergeNameTable(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable value) {
        copyOnWrite();
        instance.mergeNameTable(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.NameTable name_table = 2 [features = { ... }</code>
       */
      public Builder clearNameTable() {  copyOnWrite();
        instance.clearNameTable();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Fragment fragment = 3 [features = { ... }</code>
       */
      @java.lang.Override
      public boolean hasFragment() {
        return instance.hasFragment();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Fragment fragment = 3 [features = { ... }</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment getFragment() {
        return instance.getFragment();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Fragment fragment = 3 [features = { ... }</code>
       */
      public Builder setFragment(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment value) {
        copyOnWrite();
        instance.setFragment(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Fragment fragment = 3 [features = { ... }</code>
       */
      public Builder setFragment(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment.Builder builderForValue) {
        copyOnWrite();
        instance.setFragment(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Fragment fragment = 3 [features = { ... }</code>
       */
      public Builder mergeFragment(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment value) {
        copyOnWrite();
        instance.mergeFragment(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Fragment fragment = 3 [features = { ... }</code>
       */
      public Builder clearFragment() {  copyOnWrite();
        instance.clearFragment();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.Chunk)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Chunk();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "stringTable_",
              "nameTable_",
              "fragment_",
            };
            java.lang.String info =
                "\u0004\u0003\u0000\u0001\u0001\u0003\u0003\u0000\u0000\u0003\u0001\u1509\u0000\u0002" +
                "\u1509\u0001\u0003\u1509\u0002";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Chunk> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Chunk.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Chunk>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.Chunk)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Chunk DEFAULT_INSTANCE;
    static {
      Chunk defaultInstance = new Chunk();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        Chunk.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Chunk getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<Chunk> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<Chunk> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface InlineDataOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.InlineData)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>repeated string inline_function_tags = 1;</code>
     * @return A list containing the inlineFunctionTags.
     */
    java.util.List<java.lang.String>
        getInlineFunctionTagsList();
    /**
     * <code>repeated string inline_function_tags = 1;</code>
     * @return The count of inlineFunctionTags.
     */
    int getInlineFunctionTagsCount();
    /**
     * <code>repeated string inline_function_tags = 1;</code>
     * @param index The index of the element to return.
     * @return The inlineFunctionTags at the given index.
     */
    java.lang.String getInlineFunctionTags(int index);
    /**
     * <code>repeated string inline_function_tags = 1;</code>
     * @param index The index of the element to return.
     * @return The inlineFunctionTags at the given index.
     */
    org.jetbrains.kotlin.protobuf.ByteString
        getInlineFunctionTagsBytes(int index);
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.InlineData}
   */
  public  static final class InlineData extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          InlineData, InlineData.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.InlineData)
      InlineDataOrBuilder {
    private InlineData() {
      inlineFunctionTags_ = org.jetbrains.kotlin.protobuf.GeneratedMessageLite.emptyProtobufList();
    }
    public static final int INLINE_FUNCTION_TAGS_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<java.lang.String> inlineFunctionTags_;
    /**
     * <code>repeated string inline_function_tags = 1;</code>
     * @return A list containing the inlineFunctionTags.
     */
    @java.lang.Override
    public java.util.List<java.lang.String> getInlineFunctionTagsList() {
      return inlineFunctionTags_;
    }
    /**
     * <code>repeated string inline_function_tags = 1;</code>
     * @return The count of inlineFunctionTags.
     */
    @java.lang.Override
    public int getInlineFunctionTagsCount() {
      return inlineFunctionTags_.size();
    }
    /**
     * <code>repeated string inline_function_tags = 1;</code>
     * @param index The index of the element to return.
     * @return The inlineFunctionTags at the given index.
     */
    @java.lang.Override
    public java.lang.String getInlineFunctionTags(int index) {
      return inlineFunctionTags_.get(index);
    }
    /**
     * <code>repeated string inline_function_tags = 1;</code>
     * @param index The index of the value to return.
     * @return The bytes of the inlineFunctionTags at the given index.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.ByteString
        getInlineFunctionTagsBytes(int index) {
      return org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
          inlineFunctionTags_.get(index));
    }
    private void ensureInlineFunctionTagsIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<java.lang.String> tmp =
          inlineFunctionTags_;  if (!tmp.isModifiable()) {
        inlineFunctionTags_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated string inline_function_tags = 1;</code>
     * @param index The index to set the value at.
     * @param value The inlineFunctionTags to set.
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setInlineFunctionTags(
        int index, java.lang.String value) {
      value.getClass();  // minimal bytecode null check
      ensureInlineFunctionTagsIsMutable();
      inlineFunctionTags_.set(index, value);
    }
    /**
     * <code>repeated string inline_function_tags = 1;</code>
     * @param value The inlineFunctionTags to add.
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addInlineFunctionTags(
        java.lang.String value) {
      value.getClass();  // minimal bytecode null check
      ensureInlineFunctionTagsIsMutable();
      inlineFunctionTags_.add(value);
    }
    /**
     * <code>repeated string inline_function_tags = 1;</code>
     * @param values The inlineFunctionTags to add.
     */
    private void addAllInlineFunctionTags(
        java.lang.Iterable<java.lang.String> values) {
      ensureInlineFunctionTagsIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, inlineFunctionTags_);
    }
    /**
     * <code>repeated string inline_function_tags = 1;</code>
     */
    private void clearInlineFunctionTags() {
      inlineFunctionTags_ = org.jetbrains.kotlin.protobuf.GeneratedMessageLite.emptyProtobufList();
    }
    /**
     * <code>repeated string inline_function_tags = 1;</code>
     * @param value The bytes of the inlineFunctionTags to add.
     */
    private void addInlineFunctionTagsBytes(
        org.jetbrains.kotlin.protobuf.ByteString value) {
      ensureInlineFunctionTagsIsMutable();
      inlineFunctionTags_.add(value.toStringUtf8());
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineData parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineData parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineData parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineData parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineData parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineData parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineData parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineData parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineData parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineData parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineData prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.InlineData}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineData, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.InlineData)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineDataOrBuilder {
      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineData.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>repeated string inline_function_tags = 1;</code>
       * @return A list containing the inlineFunctionTags.
       */
      @java.lang.Override
      public java.util.List<java.lang.String>
          getInlineFunctionTagsList() {
        return java.util.Collections.unmodifiableList(
            instance.getInlineFunctionTagsList());
      }
      /**
       * <code>repeated string inline_function_tags = 1;</code>
       * @return The count of inlineFunctionTags.
       */
      @java.lang.Override
      public int getInlineFunctionTagsCount() {
        return instance.getInlineFunctionTagsCount();
      }
      /**
       * <code>repeated string inline_function_tags = 1;</code>
       * @param index The index of the element to return.
       * @return The inlineFunctionTags at the given index.
       */
      @java.lang.Override
      public java.lang.String getInlineFunctionTags(int index) {
        return instance.getInlineFunctionTags(index);
      }
      /**
       * <code>repeated string inline_function_tags = 1;</code>
       * @param index The index of the value to return.
       * @return The bytes of the inlineFunctionTags at the given index.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.ByteString
          getInlineFunctionTagsBytes(int index) {
        return instance.getInlineFunctionTagsBytes(index);
      }
      /**
       * <code>repeated string inline_function_tags = 1;</code>
       * @param index The index to set the value at.
       * @param value The inlineFunctionTags to set.
       * @return This builder for chaining.
       */
      public Builder setInlineFunctionTags(
          int index, java.lang.String value) {
        copyOnWrite();
        instance.setInlineFunctionTags(index, value);
        return this;
      }
      /**
       * <code>repeated string inline_function_tags = 1;</code>
       * @param value The inlineFunctionTags to add.
       * @return This builder for chaining.
       */
      public Builder addInlineFunctionTags(
          java.lang.String value) {
        copyOnWrite();
        instance.addInlineFunctionTags(value);
        return this;
      }
      /**
       * <code>repeated string inline_function_tags = 1;</code>
       * @param values The inlineFunctionTags to add.
       * @return This builder for chaining.
       */
      public Builder addAllInlineFunctionTags(
          java.lang.Iterable<java.lang.String> values) {
        copyOnWrite();
        instance.addAllInlineFunctionTags(values);
        return this;
      }
      /**
       * <code>repeated string inline_function_tags = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearInlineFunctionTags() {
        copyOnWrite();
        instance.clearInlineFunctionTags();
        return this;
      }
      /**
       * <code>repeated string inline_function_tags = 1;</code>
       * @param value The bytes of the inlineFunctionTags to add.
       * @return This builder for chaining.
       */
      public Builder addInlineFunctionTagsBytes(
          org.jetbrains.kotlin.protobuf.ByteString value) {
        copyOnWrite();
        instance.addInlineFunctionTagsBytes(value);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.InlineData)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineData();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "inlineFunctionTags_",
            };
            java.lang.String info =
                "\u0004\u0001\u0000\u0000\u0001\u0001\u0001\u0000\u0001\u0000\u0001\u001a";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineData> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineData.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineData>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.InlineData)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineData DEFAULT_INSTANCE;
    static {
      InlineData defaultInstance = new InlineData();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        InlineData.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineData getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<InlineData> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<InlineData> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}