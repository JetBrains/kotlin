/full_viper_dump.kt:(86,87): info: Generated Viper text for f:
domain dom$Unit  {

  function dom$Unit$element(): dom$Unit
}

domain dom$Nullable[T]  {

  function dom$Nullable$null(): dom$Nullable[T]

  function dom$Nullable$nullable_of(x: T): dom$Nullable[T]

  function dom$Nullable$val_of(nx: dom$Nullable[T]): T

  axiom dom$Nullable$some_not_null {
    (forall x: T ::
      { (dom$Nullable$nullable_of(x): dom$Nullable[T]) }
      (dom$Nullable$nullable_of(x): dom$Nullable[T]) !=
      (dom$Nullable$null(): dom$Nullable[T]))
  }

  axiom dom$Nullable$val_of_nullable_of_val {
    (forall x: T ::
      { (dom$Nullable$val_of((dom$Nullable$nullable_of(x): dom$Nullable[T])): T) }
      (dom$Nullable$val_of((dom$Nullable$nullable_of(x): dom$Nullable[T])): T) ==
      x)
  }

  axiom dom$Nullable$nullable_of_val_of_nullable {
    (forall nx: dom$Nullable[T] ::
      { (dom$Nullable$nullable_of((dom$Nullable$val_of(nx): T)): dom$Nullable[T]) }
      nx != (dom$Nullable$null(): dom$Nullable[T]) ==>
      (dom$Nullable$nullable_of((dom$Nullable$val_of(nx): T)): dom$Nullable[T]) ==
      nx)
  }
}

field special$function_object_call_counter: Int

method special$invoke_function_object(anonymous$0: Ref)
  requires acc(anonymous$0.special$function_object_call_counter, write)
  ensures acc(anonymous$0.special$function_object_call_counter, write)
  ensures old(anonymous$0.special$function_object_call_counter) + 1 ==
    anonymous$0.special$function_object_call_counter


method global$pkg_$f() returns (ret$: dom$Unit)
{
}
