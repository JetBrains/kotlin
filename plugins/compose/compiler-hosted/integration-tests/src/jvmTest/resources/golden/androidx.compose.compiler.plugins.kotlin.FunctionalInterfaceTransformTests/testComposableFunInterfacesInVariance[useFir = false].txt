//
// Source
// ------------------------------------------

import androidx.compose.runtime.*

fun interface Consumer<T> {
    @Composable fun consume(t: T)
}

class Repro<T : Any> {
    fun test(consumer: Consumer<in T>) {}
}

fun test() {
    Repro<String>().test { string ->
        println(string)
    }
}

//
// Transformed IR
// ------------------------------------------

interface Consumer<T>  {
  @Composable
  abstract fun consume(t: T, %composer: Composer?, %changed: Int)
}
@StabilityInferred(parameters = 2)
class Repro<T: Any>  {
  fun test(consumer: Consumer<in T>) { }
  static val %stable: Int = 0
}
fun test() {
  Repro().test(<block>{
    class <no name provided> : Consumer<Any?> {
      @Composable
      override fun consume(string: String, %composer: Composer?, %changed: Int) {
        %composer.startReplaceGroup(<>)
        sourceInformation(%composer, "C(consume):Test.kt")
        if (isTraceInProgress()) {
          traceEventStart(<>, %changed, -1, <>)
        }
        println(string)
        if (isTraceInProgress()) {
          traceEventEnd()
        }
        %composer.endReplaceGroup()
      }
    }
    <no name provided>()
  })
}
