
RAW_FIR:
FILE: secondaryConstructor.kt
    public? final? [RAW_FIR] fun resolveMe(): R|kotlin/Unit| { LAZY_BLOCK }
    public? final? [RAW_FIR] fun receive([RAW_FIR] value: A): R|kotlin/Unit| { LAZY_BLOCK }
    public? final? [RAW_FIR] class A : R|kotlin/Any| {
        public? [RAW_FIR] [ContainingClassKey=A] constructor([RAW_FIR] x: Int): R|A| {
            super<R|kotlin/Any|>()
            [RAW_FIR] lval a: <implicit> = x#
        }

    }

IMPORTS:
FILE: secondaryConstructor.kt
    public? final? [RAW_FIR] fun resolveMe(): R|kotlin/Unit| { LAZY_BLOCK }
    public? final? [RAW_FIR] fun receive([RAW_FIR] value: A): R|kotlin/Unit| { LAZY_BLOCK }
    public? final? [RAW_FIR] class A : R|kotlin/Any| {
        public? [RAW_FIR] [ContainingClassKey=A] constructor([RAW_FIR] x: Int): R|A| {
            super<R|kotlin/Any|>()
            [RAW_FIR] lval a: <implicit> = x#
        }

    }

COMPILER_REQUIRED_ANNOTATIONS:
FILE: secondaryConstructor.kt
    public? final? [COMPILER_REQUIRED_ANNOTATIONS] fun resolveMe(): R|kotlin/Unit| { LAZY_BLOCK }
    public? final? [RAW_FIR] fun receive([RAW_FIR] value: A): R|kotlin/Unit| { LAZY_BLOCK }
    public? final? [RAW_FIR] class A : R|kotlin/Any| {
        public? [RAW_FIR] [ContainingClassKey=A] constructor([RAW_FIR] x: Int): R|A| {
            super<R|kotlin/Any|>()
            [RAW_FIR] lval a: <implicit> = x#
        }

    }

COMPANION_GENERATION:
FILE: secondaryConstructor.kt
    public? final? [COMPANION_GENERATION] fun resolveMe(): R|kotlin/Unit| { LAZY_BLOCK }
    public? final? [RAW_FIR] fun receive([RAW_FIR] value: A): R|kotlin/Unit| { LAZY_BLOCK }
    public? final? [RAW_FIR] class A : R|kotlin/Any| {
        public? [RAW_FIR] [ContainingClassKey=A] constructor([RAW_FIR] x: Int): R|A| {
            super<R|kotlin/Any|>()
            [RAW_FIR] lval a: <implicit> = x#
        }

    }

SUPER_TYPES:
FILE: secondaryConstructor.kt
    public? final? [SUPER_TYPES] fun resolveMe(): R|kotlin/Unit| { LAZY_BLOCK }
    public? final? [RAW_FIR] fun receive([RAW_FIR] value: A): R|kotlin/Unit| { LAZY_BLOCK }
    public? final? [RAW_FIR] class A : R|kotlin/Any| {
        public? [RAW_FIR] [ContainingClassKey=A] constructor([RAW_FIR] x: Int): R|A| {
            super<R|kotlin/Any|>()
            [RAW_FIR] lval a: <implicit> = x#
        }

    }

TYPES:
FILE: secondaryConstructor.kt
    public? final? [TYPES] fun resolveMe(): R|kotlin/Unit| { LAZY_BLOCK }
    public? final? [RAW_FIR] fun receive([RAW_FIR] value: A): R|kotlin/Unit| { LAZY_BLOCK }
    public? final? [RAW_FIR] class A : R|kotlin/Any| {
        public? [RAW_FIR] [ContainingClassKey=A] constructor([RAW_FIR] x: Int): R|A| {
            super<R|kotlin/Any|>()
            [RAW_FIR] lval a: <implicit> = x#
        }

    }

STATUS:
FILE: secondaryConstructor.kt
    public final [STATUS] fun resolveMe(): R|kotlin/Unit| { LAZY_BLOCK }
    public? final? [RAW_FIR] fun receive([RAW_FIR] value: A): R|kotlin/Unit| { LAZY_BLOCK }
    public? final? [RAW_FIR] class A : R|kotlin/Any| {
        public? [RAW_FIR] [ContainingClassKey=A] constructor([RAW_FIR] x: Int): R|A| {
            super<R|kotlin/Any|>()
            [RAW_FIR] lval a: <implicit> = x#
        }

    }

ARGUMENTS_OF_ANNOTATIONS:
FILE: secondaryConstructor.kt
    public final [ARGUMENTS_OF_ANNOTATIONS] fun resolveMe(): R|kotlin/Unit| { LAZY_BLOCK }
    public? final? [RAW_FIR] fun receive([RAW_FIR] value: A): R|kotlin/Unit| { LAZY_BLOCK }
    public? final? [RAW_FIR] class A : R|kotlin/Any| {
        public? [RAW_FIR] [ContainingClassKey=A] constructor([RAW_FIR] x: Int): R|A| {
            super<R|kotlin/Any|>()
            [RAW_FIR] lval a: <implicit> = x#
        }

    }

CONTRACTS:
FILE: secondaryConstructor.kt
    public final [CONTRACTS] fun resolveMe(): R|kotlin/Unit| {
        receive#(A#(IntegerLiteral(42)))
    }
    public? final? [RAW_FIR] fun receive([RAW_FIR] value: A): R|kotlin/Unit| { LAZY_BLOCK }
    public? final? [RAW_FIR] class A : R|kotlin/Any| {
        public? [RAW_FIR] [ContainingClassKey=A] constructor([RAW_FIR] x: Int): R|A| {
            super<R|kotlin/Any|>()
            [RAW_FIR] lval a: <implicit> = x#
        }

    }

IMPLICIT_TYPES_BODY_RESOLVE:
FILE: secondaryConstructor.kt
    public final [IMPLICIT_TYPES_BODY_RESOLVE] fun resolveMe(): R|kotlin/Unit| {
        receive#(A#(IntegerLiteral(42)))
    }
    public? final? [RAW_FIR] fun receive([RAW_FIR] value: A): R|kotlin/Unit| { LAZY_BLOCK }
    public? final? [RAW_FIR] class A : R|kotlin/Any| {
        public? [RAW_FIR] [ContainingClassKey=A] constructor([RAW_FIR] x: Int): R|A| {
            super<R|kotlin/Any|>()
            [RAW_FIR] lval a: <implicit> = x#
        }

    }

EXPECT_ACTUAL_MATCHING:
FILE: secondaryConstructor.kt
    public final [EXPECT_ACTUAL_MATCHING] fun resolveMe(): R|kotlin/Unit| {
        receive#(A#(IntegerLiteral(42)))
    }
    public? final? [RAW_FIR] fun receive([RAW_FIR] value: A): R|kotlin/Unit| { LAZY_BLOCK }
    public? final? [RAW_FIR] class A : R|kotlin/Any| {
        public? [RAW_FIR] [ContainingClassKey=A] constructor([RAW_FIR] x: Int): R|A| {
            super<R|kotlin/Any|>()
            [RAW_FIR] lval a: <implicit> = x#
        }

    }

BODY_RESOLVE:
FILE: secondaryConstructor.kt
    public final [BODY_RESOLVE] fun resolveMe(): R|kotlin/Unit| {
        R|/receive|(R|/A.A|(Int(42)))
    }
    public final [CONTRACTS] fun receive([CONTRACTS] value: R|A|): R|kotlin/Unit| {
    }
    public final [STATUS] class A : R|kotlin/Any| {
        public [STATUS] [ContainingClassKey=A] constructor([STATUS] x: R|kotlin/Int|): R|A| {
            super<R|kotlin/Any|>()
            [RAW_FIR] lval a: <implicit> = x#
        }

    }

FILE RAW TO BODY:
FILE: secondaryConstructor.kt
    public final [BODY_RESOLVE] fun resolveMe(): R|kotlin/Unit| {
        R|/receive|(R|/A.A|(Int(42)))
    }
    public final [BODY_RESOLVE] fun receive([BODY_RESOLVE] value: R|A|): R|kotlin/Unit| {
    }
    public final [BODY_RESOLVE] class A : R|kotlin/Any| {
        public [BODY_RESOLVE] [ContainingClassKey=A] constructor([BODY_RESOLVE] x: R|kotlin/Int|): R|A| {
            super<R|kotlin/Any|>()
            [BODY_RESOLVE] lval a: R|kotlin/Int| = R|<local>/x|
        }

    }
