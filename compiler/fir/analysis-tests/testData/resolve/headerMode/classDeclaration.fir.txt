FILE: classDeclaration.kt
    public final class A : R|kotlin/Any| {
        public constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

        public final fun funA(): R|kotlin/String|

        public final inline fun funB(): R|kotlin/String| {
            ^funB String(A.funB body)
        }

        @R|kotlin/OptIn|(markerClass = vararg(<getClass>(Q|kotlin/contracts/ExperimentalContracts|))) public final fun isNotNull(value: R|kotlin/Any?|): R|kotlin/Boolean|
            [R|Contract description]
             <
                Returns(TRUE) -> value != null
            >


        private final fun funC(): R|kotlin/String|

    }
    public abstract interface B : R|kotlin/Any| {
        public open fun funA(): R|kotlin/String|

        public abstract fun funB(): R|kotlin/String|

    }
    public final class C : R|B| {
        public constructor(): R|C| {
            super<R|kotlin/Any|>()
        }

        public open override fun funB(): R|kotlin/String|

    }
