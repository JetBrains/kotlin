RAW_FIR:
FILE: [ResolvedTo(RAW_FIR)] propertyGetterWithImplicitTypeScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-propertyGetterWithImplicitTypeScript.kts>
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] val prop: <implicit>
            public? [ResolvedTo(RAW_FIR)] get(): <implicit> { LAZY_BLOCK }


IMPORTS:
FILE: [ResolvedTo(IMPORTS)] propertyGetterWithImplicitTypeScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-propertyGetterWithImplicitTypeScript.kts>
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] val prop: <implicit>
            public? [ResolvedTo(RAW_FIR)] get(): <implicit> { LAZY_BLOCK }


COMPILER_REQUIRED_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] propertyGetterWithImplicitTypeScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-propertyGetterWithImplicitTypeScript.kts>
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] val prop: <implicit>
            public? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] get(): <implicit> { LAZY_BLOCK }


COMPANION_GENERATION:
FILE: [ResolvedTo(IMPORTS)] propertyGetterWithImplicitTypeScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-propertyGetterWithImplicitTypeScript.kts>
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(COMPANION_GENERATION)] val prop: <implicit>
            public? [ResolvedTo(COMPANION_GENERATION)] get(): <implicit> { LAZY_BLOCK }


SUPER_TYPES:
FILE: [ResolvedTo(IMPORTS)] propertyGetterWithImplicitTypeScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-propertyGetterWithImplicitTypeScript.kts>
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(SUPER_TYPES)] val prop: <implicit>
            public? [ResolvedTo(SUPER_TYPES)] get(): <implicit> { LAZY_BLOCK }


TYPES:
FILE: [ResolvedTo(IMPORTS)] propertyGetterWithImplicitTypeScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-propertyGetterWithImplicitTypeScript.kts>
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(TYPES)] val prop: <implicit>
            public? [ResolvedTo(TYPES)] get(): <implicit> { LAZY_BLOCK }


STATUS:
FILE: [ResolvedTo(IMPORTS)] propertyGetterWithImplicitTypeScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-propertyGetterWithImplicitTypeScript.kts>
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] val prop: <implicit>
            public [ResolvedTo(STATUS)] get(): <implicit> { LAZY_BLOCK }


EXPECT_ACTUAL_MATCHING:
FILE: [ResolvedTo(IMPORTS)] propertyGetterWithImplicitTypeScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-propertyGetterWithImplicitTypeScript.kts>
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(EXPECT_ACTUAL_MATCHING)] val prop: <implicit>
            public [ResolvedTo(EXPECT_ACTUAL_MATCHING)] get(): <implicit> { LAZY_BLOCK }


CONTRACTS:
FILE: [ResolvedTo(IMPORTS)] propertyGetterWithImplicitTypeScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(TYPES)] <script-propertyGetterWithImplicitTypeScript.kts>
        [ResolvedTo(TYPES)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(CONTRACTS)] val prop: <implicit>
            public [ResolvedTo(CONTRACTS)] get(): <implicit> {
                ^ IntegerLiteral(42)
            }


IMPLICIT_TYPES_BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] propertyGetterWithImplicitTypeScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(TYPES)] <script-propertyGetterWithImplicitTypeScript.kts>
        [ResolvedTo(TYPES)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] val prop: R|kotlin/Int|
            public [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] get(): R|kotlin/Int| {
                ^ Int(42)
            }


CONSTANT_EVALUATION:
FILE: [ResolvedTo(IMPORTS)] propertyGetterWithImplicitTypeScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(TYPES)] <script-propertyGetterWithImplicitTypeScript.kts>
        [ResolvedTo(TYPES)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(CONSTANT_EVALUATION)] val prop: R|kotlin/Int|
            public [ResolvedTo(CONSTANT_EVALUATION)] get(): R|kotlin/Int| {
                ^ Int(42)
            }


ANNOTATION_ARGUMENTS:
FILE: [ResolvedTo(IMPORTS)] propertyGetterWithImplicitTypeScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(TYPES)] <script-propertyGetterWithImplicitTypeScript.kts>
        [ResolvedTo(TYPES)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(ANNOTATION_ARGUMENTS)] val prop: R|kotlin/Int|
            public [ResolvedTo(ANNOTATION_ARGUMENTS)] get(): R|kotlin/Int| {
                ^ Int(42)
            }


BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] propertyGetterWithImplicitTypeScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(TYPES)] <script-propertyGetterWithImplicitTypeScript.kts>
        [ResolvedTo(TYPES)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(BODY_RESOLVE)] val prop: R|kotlin/Int|
            public [ResolvedTo(BODY_RESOLVE)] get(): R|kotlin/Int| {
                ^ Int(42)
            }


FILE RAW TO BODY:
FILE: [ResolvedTo(BODY_RESOLVE)] propertyGetterWithImplicitTypeScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] <script-propertyGetterWithImplicitTypeScript.kts>
        [ResolvedTo(BODY_RESOLVE)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(BODY_RESOLVE)] val prop: R|kotlin/Int|
            public [ResolvedTo(BODY_RESOLVE)] get(): R|kotlin/Int| {
                ^ Int(42)
            }
