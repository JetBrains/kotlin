package

public fun testFunVsExt(/*0*/ x: X): kotlin.Unit
public fun testMixed(/*0*/ x: X, /*1*/ y: X): kotlin.Unit
public fun testMixed(/*0*/ x: X, /*1*/ y: kotlin.Int): kotlin.Unit
public fun testMixed(/*0*/ x: kotlin.Int, /*1*/ y: X): kotlin.Unit
public fun testMixed(/*0*/ x: kotlin.Int, /*1*/ y: kotlin.Int): kotlin.Unit
public fun testNewType(/*0*/ name: Name): kotlin.Unit
public fun testNewType(/*0*/ s: Str): kotlin.Unit
public fun </*0*/ T : kotlin.Number> testNonGenericVsGeneric(/*0*/ x: X, /*1*/ y: T): kotlin.Unit
public fun testNonGenericVsGeneric(/*0*/ x: X, /*1*/ y: kotlin.Number): kotlin.Unit
public fun testNullableVsNonNull1(/*0*/ s: Str): kotlin.Unit
public fun testNullableVsNonNull1(/*0*/ s: Str?): kotlin.Unit
public fun testNullableVsNonNull2(/*0*/ ns: NStr): kotlin.Unit
public fun testNullableVsNonNull2(/*0*/ ns: NStr?): kotlin.Unit
public fun testSimple(/*0*/ x: X): kotlin.Unit
public fun testSimple(/*0*/ z: Z): kotlin.Unit
public fun X.testFunVsExt(): kotlin.Unit

public final class C</*0*/ TC : kotlin.Number> {
    public constructor C</*0*/ TC : kotlin.Number>()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final fun </*0*/ T : kotlin.Number> testNonGenericVsGeneric(/*0*/ x: X, /*1*/ y: T): kotlin.Unit
    public final fun testNonGenericVsGeneric(/*0*/ x: X, /*1*/ y: TC): kotlin.Unit
    public final fun testNonGenericVsGeneric(/*0*/ x: X, /*1*/ y: kotlin.Number): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public final inline class NStr {
    public constructor NStr(/*0*/ str: kotlin.String?)
    public final val str: kotlin.String?
    public open override /*1*/ /*synthesized*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*synthesized*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*synthesized*/ fun toString(): kotlin.String
}

public final inline class Name {
    public constructor Name(/*0*/ name: kotlin.String)
    public final val name: kotlin.String
    public open override /*1*/ /*synthesized*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*synthesized*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*synthesized*/ fun toString(): kotlin.String
}

public final inline class Str {
    public constructor Str(/*0*/ str: kotlin.String)
    public final val str: kotlin.String
    public open override /*1*/ /*synthesized*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*synthesized*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*synthesized*/ fun toString(): kotlin.String
}

public final inline class X {
    public constructor X(/*0*/ x: kotlin.Int)
    public final val x: kotlin.Int
    public open override /*1*/ /*synthesized*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*synthesized*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*synthesized*/ fun toString(): kotlin.String
}

public final inline class Z {
    public constructor Z(/*0*/ x: kotlin.Int)
    public final val x: kotlin.Int
    public open override /*1*/ /*synthesized*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*synthesized*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*synthesized*/ fun toString(): kotlin.String
}
