CONTRACTS:
TARGET: @R|java/lang/Override|() public open [ResolvedTo(CONTRACTS)] [DeferredCallableCopyReturnTypeKey=DelegatingDeferredReturnTypeWithSubstitution(deferredCalc=Deferred for Enhancement (Overriddens with Implicit Types), substitutor={T -> T})] fun <[ResolvedTo(BODY_RESOLVE)] T : R|ft<kotlin/collections/MutableList<@R|Anno|(value = Int(3))  kotlin/String!>, kotlin/collections/List<@R|Anno|(value = Int(3))  kotlin/String!>?>|> defaultMethod([ResolvedTo(BODY_RESOLVE)] p: R|@EnhancedNullability kotlin/collections/List<@EnhancedNullability @R|Anno|(value = Int(3))  kotlin/String>|): <implicit>

FILE: [ResolvedTo(IMPORTS)] main.kt
    @R|kotlin/annotation/Target|[Types](Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.TYPE|) public final [ResolvedTo(STATUS)] annotation class Anno : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/Anno.value] value: Int): R|Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val value: Int = R|<local>/value|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): Int

    }
    public final const [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] val firstConst: R|kotlin/Int| = Int(1)
        public [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] get(): R|kotlin/Int|
    public final const [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] val secondConst: R|kotlin/Int| = Int(2)
        public [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] get(): R|kotlin/Int|
    public abstract [ResolvedTo(STATUS)] interface BaseKotlinInterface : R|kotlin/Any| {
        public open [ResolvedTo(STATUS)] fun <[ResolvedTo(STATUS)] T> defaultMethod([ResolvedTo(STATUS)] p: R|kotlin/collections/List<T>|): <implicit> { LAZY_BLOCK }

    }
    public final [ResolvedTo(STATUS)] class LeafKotlinClass : R|JavaExtension| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=LeafKotlinClass] constructor(): R|LeafKotlinClass| {
            LAZY_super<<implicit>>
        }

    }

IMPLICIT_TYPES_BODY_RESOLVE:
TARGET: @R|java/lang/Override|() public open [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] fun <[ResolvedTo(BODY_RESOLVE)] T : R|ft<kotlin/collections/MutableList<@R|Anno|(value = Int(3))  kotlin/String!>, kotlin/collections/List<@R|Anno|(value = Int(3))  kotlin/String!>?>|> defaultMethod([ResolvedTo(BODY_RESOLVE)] p: R|@EnhancedNullability kotlin/collections/List<@EnhancedNullability @R|Anno|(value = Int(3))  kotlin/String>|): R|@EnhancedNullability kotlin/collections/List<@R|Anno|(value = Int(3))  kotlin/String!>|

FILE: [ResolvedTo(IMPORTS)] main.kt
    @R|kotlin/annotation/Target|[Types](Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.TYPE|) public final [ResolvedTo(STATUS)] annotation class Anno : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/Anno.value] value: Int): R|Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val value: Int = R|<local>/value|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): Int

    }
    public final const [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] val firstConst: R|kotlin/Int| = Int(1)
        public [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] get(): R|kotlin/Int|
    public final const [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] val secondConst: R|kotlin/Int| = Int(2)
        public [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] get(): R|kotlin/Int|
    public abstract [ResolvedTo(STATUS)] interface BaseKotlinInterface : R|kotlin/Any| {
        public open [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] fun <[ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] T> defaultMethod([ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] p: R|kotlin/collections/List<T>|): R|kotlin/collections/List<T>| {
            ^defaultMethod R|<local>/p|
        }

    }
    public final [ResolvedTo(STATUS)] class LeafKotlinClass : R|JavaExtension| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=LeafKotlinClass] constructor(): R|LeafKotlinClass| {
            LAZY_super<<implicit>>
        }

    }

CONSTANT_EVALUATION:
TARGET: @R|java/lang/Override|() public open [ResolvedTo(CONSTANT_EVALUATION)] fun <[ResolvedTo(BODY_RESOLVE)] T : R|ft<kotlin/collections/MutableList<@R|Anno|(value = Int(3))  kotlin/String!>, kotlin/collections/List<@R|Anno|(value = Int(3))  kotlin/String!>?>|> defaultMethod([ResolvedTo(BODY_RESOLVE)] p: R|@EnhancedNullability kotlin/collections/List<@EnhancedNullability @R|Anno|(value = Int(3))  kotlin/String>|): R|@EnhancedNullability kotlin/collections/List<@R|Anno|(value = Int(3))  kotlin/String!>|

FILE: [ResolvedTo(IMPORTS)] main.kt
    @R|kotlin/annotation/Target|[Types](Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.TYPE|) public final [ResolvedTo(STATUS)] annotation class Anno : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/Anno.value] value: Int): R|Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val value: Int = R|<local>/value|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): Int

    }
    public final const [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] val firstConst: R|kotlin/Int| = Int(1)
        public [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] get(): R|kotlin/Int|
    public final const [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] val secondConst: R|kotlin/Int| = Int(2)
        public [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] get(): R|kotlin/Int|
    public abstract [ResolvedTo(STATUS)] interface BaseKotlinInterface : R|kotlin/Any| {
        public open [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] fun <[ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] T> defaultMethod([ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] p: R|kotlin/collections/List<T>|): R|kotlin/collections/List<T>| {
            ^defaultMethod R|<local>/p|
        }

    }
    public final [ResolvedTo(STATUS)] class LeafKotlinClass : R|JavaExtension| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=LeafKotlinClass] constructor(): R|LeafKotlinClass| {
            LAZY_super<<implicit>>
        }

    }

ANNOTATION_ARGUMENTS:
TARGET: @R|java/lang/Override|() public open [ResolvedTo(ANNOTATION_ARGUMENTS)] fun <[ResolvedTo(BODY_RESOLVE)] T : R|ft<kotlin/collections/MutableList<@R|Anno|(value = Int(3))  kotlin/String!>, kotlin/collections/List<@R|Anno|(value = Int(3))  kotlin/String!>?>|> defaultMethod([ResolvedTo(BODY_RESOLVE)] p: R|@EnhancedNullability kotlin/collections/List<@EnhancedNullability @R|Anno|(value = Int(3))  kotlin/String>|): R|@EnhancedNullability kotlin/collections/List<@R|Anno|(value = Int(3))  kotlin/String!>|

FILE: [ResolvedTo(IMPORTS)] main.kt
    @R|kotlin/annotation/Target|[Types](Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.TYPE|) public final [ResolvedTo(STATUS)] annotation class Anno : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/Anno.value] value: Int): R|Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val value: Int = R|<local>/value|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): Int

    }
    public final const [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] val firstConst: R|kotlin/Int| = Int(1)
        public [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] get(): R|kotlin/Int|
    public final const [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] val secondConst: R|kotlin/Int| = Int(2)
        public [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] get(): R|kotlin/Int|
    public abstract [ResolvedTo(STATUS)] interface BaseKotlinInterface : R|kotlin/Any| {
        public open [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] fun <[ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] T> defaultMethod([ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] p: R|kotlin/collections/List<T>|): R|kotlin/collections/List<T>| {
            ^defaultMethod R|<local>/p|
        }

    }
    public final [ResolvedTo(STATUS)] class LeafKotlinClass : R|JavaExtension| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=LeafKotlinClass] constructor(): R|LeafKotlinClass| {
            LAZY_super<<implicit>>
        }

    }

BODY_RESOLVE:
TARGET: @R|java/lang/Override|() public open [ResolvedTo(BODY_RESOLVE)] fun <[ResolvedTo(BODY_RESOLVE)] T : R|ft<kotlin/collections/MutableList<@R|Anno|(value = Int(3))  kotlin/String!>, kotlin/collections/List<@R|Anno|(value = Int(3))  kotlin/String!>?>|> defaultMethod([ResolvedTo(BODY_RESOLVE)] p: R|@EnhancedNullability kotlin/collections/List<@EnhancedNullability @R|Anno|(value = Int(3))  kotlin/String>|): R|@EnhancedNullability kotlin/collections/List<@R|Anno|(value = Int(3))  kotlin/String!>|

FILE: [ResolvedTo(IMPORTS)] main.kt
    @R|kotlin/annotation/Target|[Types](Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.TYPE|) public final [ResolvedTo(STATUS)] annotation class Anno : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/Anno.value] value: Int): R|Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val value: Int = R|<local>/value|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): Int

    }
    public final const [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] val firstConst: R|kotlin/Int| = Int(1)
        public [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] get(): R|kotlin/Int|
    public final const [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] val secondConst: R|kotlin/Int| = Int(2)
        public [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] get(): R|kotlin/Int|
    public abstract [ResolvedTo(STATUS)] interface BaseKotlinInterface : R|kotlin/Any| {
        public open [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] fun <[ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] T> defaultMethod([ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] p: R|kotlin/collections/List<T>|): R|kotlin/collections/List<T>| {
            ^defaultMethod R|<local>/p|
        }

    }
    public final [ResolvedTo(STATUS)] class LeafKotlinClass : R|JavaExtension| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=LeafKotlinClass] constructor(): R|LeafKotlinClass| {
            LAZY_super<<implicit>>
        }

    }

FILE RAW TO BODY:
FILE: [ResolvedTo(BODY_RESOLVE)] main.kt
    @R|kotlin/annotation/Target|[Types](allowedTargets = vararg(Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.TYPE|)) public final [ResolvedTo(BODY_RESOLVE)] annotation class Anno : R|kotlin/Annotation| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Anno] constructor([ResolvedTo(BODY_RESOLVE)] [CorrespondingProperty=/Anno.value] value: R|kotlin/Int|): R|Anno| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(BODY_RESOLVE)] [IsFromPrimaryConstructor=true] val value: R|kotlin/Int| = R|<local>/value|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Anno] get(): R|kotlin/Int|

    }
    public final const [ResolvedTo(BODY_RESOLVE)] [EvaluatedValue=Int(1)] val firstConst: R|kotlin/Int| = Int(1)
        public [ResolvedTo(BODY_RESOLVE)] get(): R|kotlin/Int|
    public final const [ResolvedTo(BODY_RESOLVE)] [EvaluatedValue=Int(2)] val secondConst: R|kotlin/Int| = Int(2)
        public [ResolvedTo(BODY_RESOLVE)] get(): R|kotlin/Int|
    public abstract [ResolvedTo(BODY_RESOLVE)] interface BaseKotlinInterface : R|kotlin/Any| {
        public open [ResolvedTo(BODY_RESOLVE)] fun <[ResolvedTo(BODY_RESOLVE)] T> defaultMethod([ResolvedTo(BODY_RESOLVE)] p: R|kotlin/collections/List<T>|): R|kotlin/collections/List<T>| {
            ^defaultMethod R|<local>/p|
        }

    }
    public final [ResolvedTo(BODY_RESOLVE)] class LeafKotlinClass : R|JavaExtension| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=LeafKotlinClass] constructor(): R|LeafKotlinClass| {
            super<R|kotlin/Any|>()
        }

    }
