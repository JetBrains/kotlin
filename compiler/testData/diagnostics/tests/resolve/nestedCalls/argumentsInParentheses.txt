package

internal fun fooInt(/*0*/ l: Foo<kotlin.Int>): Foo<kotlin.Int>
internal fun test(/*0*/ bar: Bar, /*1*/ a: A): kotlin.Unit

internal final class A {
    public constructor A()
    internal final val bar: Bar
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

internal final class Bar {
    public constructor Bar()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    internal final fun </*0*/ T> invoke(): Foo<T>
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

internal interface Foo</*0*/ T> {
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}
