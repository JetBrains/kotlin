package test

internal final enum class E : kotlin.Enum<test.E> {
    public enum entry CAKE : test.E {
        /*primary*/ private constructor CAKE()
        public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: test.E): kotlin.Int
        public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
        public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
    }

    /*primary*/ private constructor E()
    public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: test.E): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
    public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int

    // Static members
    public final /*synthesized*/ fun valueOf(/*0*/ value: kotlin.String): test.E
    public final /*synthesized*/ fun values(): kotlin.Array<test.E>
}

kotlin.annotation.annotation() internal final class EnumAnno : kotlin.Annotation {
    /*primary*/ public constructor EnumAnno(/*0*/ value: test.E)
    internal final val value: test.E
        internal final fun <get-value>(): test.E
}

public final class EnumArgumentWithCustomToString {
    /*primary*/ public constructor EnumArgumentWithCustomToString()
    test.EnumAnno(value = E.CAKE) test.EnumArrayAnno(value = {E.CAKE, E.CAKE}) internal final fun annotated(): kotlin.Unit
}

kotlin.annotation.annotation() internal final class EnumArrayAnno : kotlin.Annotation {
    /*primary*/ public constructor EnumArrayAnno(/*0*/ vararg value: test.E /*kotlin.Array<out test.E>*/)
    internal final val value: kotlin.Array<out test.E>
        internal final fun <get-value>(): kotlin.Array<out test.E>
}
