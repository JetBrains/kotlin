RAW_FIR:
FILE: [ResolvedTo(RAW_FIR)] hierarchyWithOverrideScript.kts
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-hierarchyWithOverrideScript.kts>
        [ResolvedTo(RAW_FIR)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-hierarchyWithOverrideScript.kts>] interface Foo1 : R|kotlin/Any| {
            public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun bar(): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] val str: String
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo1] get(): String

        }

        public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-hierarchyWithOverrideScript.kts>] interface Foo2 : Foo1 {
            public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo2] get(): Boolean

        }

        public abstract [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-hierarchyWithOverrideScript.kts>] class Usage : Foo2 {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Usage] constructor(): R|Usage| {
                LAZY_super<<implicit>>
            }

            public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

        }


IMPORTS:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverrideScript.kts
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-hierarchyWithOverrideScript.kts>
        [ResolvedTo(RAW_FIR)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-hierarchyWithOverrideScript.kts>] interface Foo1 : R|kotlin/Any| {
            public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun bar(): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] val str: String
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo1] get(): String

        }

        public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-hierarchyWithOverrideScript.kts>] interface Foo2 : Foo1 {
            public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo2] get(): Boolean

        }

        public abstract [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-hierarchyWithOverrideScript.kts>] class Usage : Foo2 {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Usage] constructor(): R|Usage| {
                LAZY_super<<implicit>>
            }

            public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

        }


COMPILER_REQUIRED_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverrideScript.kts
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-hierarchyWithOverrideScript.kts>
        [ResolvedTo(RAW_FIR)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-hierarchyWithOverrideScript.kts>] interface Foo1 : R|kotlin/Any| {
            public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun bar(): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] val str: String
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo1] get(): String

        }

        public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-hierarchyWithOverrideScript.kts>] interface Foo2 : Foo1 {
            public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo2] get(): Boolean

        }

        public abstract [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] [ContainingScriptKey=FirScriptSymbol <script-hierarchyWithOverrideScript.kts>] class Usage : Foo2 {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Usage] constructor(): R|Usage| {
                LAZY_super<<implicit>>
            }

            public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

        }


COMPANION_GENERATION:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverrideScript.kts
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-hierarchyWithOverrideScript.kts>
        [ResolvedTo(RAW_FIR)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-hierarchyWithOverrideScript.kts>] interface Foo1 : R|kotlin/Any| {
            public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun bar(): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] val str: String
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo1] get(): String

        }

        public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-hierarchyWithOverrideScript.kts>] interface Foo2 : Foo1 {
            public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo2] get(): Boolean

        }

        public abstract [ResolvedTo(COMPANION_GENERATION)] [ContainingScriptKey=FirScriptSymbol <script-hierarchyWithOverrideScript.kts>] class Usage : Foo2 {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Usage] constructor(): R|Usage| {
                LAZY_super<<implicit>>
            }

            public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

        }


SUPER_TYPES:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverrideScript.kts
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-hierarchyWithOverrideScript.kts>
        [ResolvedTo(RAW_FIR)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final? [ResolvedTo(SUPER_TYPES)] [ContainingScriptKey=FirScriptSymbol <script-hierarchyWithOverrideScript.kts>] interface Foo1 : R|kotlin/Any| {
            public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun bar(): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] val str: String
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo1] get(): String

        }

        public final? [ResolvedTo(SUPER_TYPES)] [ContainingScriptKey=FirScriptSymbol <script-hierarchyWithOverrideScript.kts>] interface Foo2 : R|Foo1| {
            public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo2] get(): Boolean

        }

        public abstract [ResolvedTo(SUPER_TYPES)] [ContainingScriptKey=FirScriptSymbol <script-hierarchyWithOverrideScript.kts>] class Usage : R|Foo2| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Usage] constructor(): R|Usage| {
                LAZY_super<<implicit>>
            }

            public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

        }


TYPES:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverrideScript.kts
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-hierarchyWithOverrideScript.kts>
        [ResolvedTo(RAW_FIR)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final? [ResolvedTo(SUPER_TYPES)] [ContainingScriptKey=FirScriptSymbol <script-hierarchyWithOverrideScript.kts>] interface Foo1 : R|kotlin/Any| {
            public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun bar(): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] val str: String
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo1] get(): String

        }

        public final? [ResolvedTo(SUPER_TYPES)] [ContainingScriptKey=FirScriptSymbol <script-hierarchyWithOverrideScript.kts>] interface Foo2 : R|Foo1| {
            public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo2] get(): Boolean

        }

        public abstract [ResolvedTo(TYPES)] [ContainingScriptKey=FirScriptSymbol <script-hierarchyWithOverrideScript.kts>] class Usage : R|Foo2| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Usage] constructor(): R|Usage| {
                LAZY_super<<implicit>>
            }

            public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

        }


STATUS:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverrideScript.kts
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-hierarchyWithOverrideScript.kts>
        [ResolvedTo(RAW_FIR)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final? [ResolvedTo(SUPER_TYPES)] [ContainingScriptKey=FirScriptSymbol <script-hierarchyWithOverrideScript.kts>] interface Foo1 : R|kotlin/Any| {
            public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun bar(): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] val str: String
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo1] get(): String

        }

        public final? [ResolvedTo(SUPER_TYPES)] [ContainingScriptKey=FirScriptSymbol <script-hierarchyWithOverrideScript.kts>] interface Foo2 : R|Foo1| {
            public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo2] get(): Boolean

        }

        public abstract [ResolvedTo(STATUS)] [ContainingScriptKey=FirScriptSymbol <script-hierarchyWithOverrideScript.kts>] class Usage : R|Foo2| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Usage] constructor(): R|Usage| {
                LAZY_super<<implicit>>
            }

            public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

        }


EXPECT_ACTUAL_MATCHING:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverrideScript.kts
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-hierarchyWithOverrideScript.kts>
        [ResolvedTo(RAW_FIR)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final? [ResolvedTo(SUPER_TYPES)] [ContainingScriptKey=FirScriptSymbol <script-hierarchyWithOverrideScript.kts>] interface Foo1 : R|kotlin/Any| {
            public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun bar(): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] val str: String
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo1] get(): String

        }

        public final? [ResolvedTo(SUPER_TYPES)] [ContainingScriptKey=FirScriptSymbol <script-hierarchyWithOverrideScript.kts>] interface Foo2 : R|Foo1| {
            public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo2] get(): Boolean

        }

        public abstract [ResolvedTo(EXPECT_ACTUAL_MATCHING)] [ContainingScriptKey=FirScriptSymbol <script-hierarchyWithOverrideScript.kts>] class Usage : R|Foo2| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Usage] constructor(): R|Usage| {
                LAZY_super<<implicit>>
            }

            public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

        }


CONTRACTS:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverrideScript.kts
    SCRIPT: [ResolvedTo(TYPES)] <script-hierarchyWithOverrideScript.kts>
        [ResolvedTo(TYPES)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(TYPES)] lval args: R|kotlin/Array<kotlin/String>|

        public final? [ResolvedTo(SUPER_TYPES)] [ContainingScriptKey=FirScriptSymbol <script-hierarchyWithOverrideScript.kts>] interface Foo1 : R|kotlin/Any| {
            public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun bar(): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] val str: String
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo1] get(): String

        }

        public final? [ResolvedTo(SUPER_TYPES)] [ContainingScriptKey=FirScriptSymbol <script-hierarchyWithOverrideScript.kts>] interface Foo2 : R|Foo1| {
            public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo2] get(): Boolean

        }

        public abstract [ResolvedTo(CONTRACTS)] [ContainingScriptKey=FirScriptSymbol <script-hierarchyWithOverrideScript.kts>] class Usage : R|Foo2| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Usage] constructor(): R|Usage| {
                LAZY_super<<implicit>>
            }

            public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

        }


IMPLICIT_TYPES_BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverrideScript.kts
    SCRIPT: [ResolvedTo(TYPES)] <script-hierarchyWithOverrideScript.kts>
        [ResolvedTo(TYPES)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(TYPES)] lval args: R|kotlin/Array<kotlin/String>|

        public final? [ResolvedTo(SUPER_TYPES)] [ContainingScriptKey=FirScriptSymbol <script-hierarchyWithOverrideScript.kts>] interface Foo1 : R|kotlin/Any| {
            public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun bar(): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] val str: String
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo1] get(): String

        }

        public final? [ResolvedTo(SUPER_TYPES)] [ContainingScriptKey=FirScriptSymbol <script-hierarchyWithOverrideScript.kts>] interface Foo2 : R|Foo1| {
            public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo2] get(): Boolean

        }

        public abstract [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] [ContainingScriptKey=FirScriptSymbol <script-hierarchyWithOverrideScript.kts>] class Usage : R|Foo2| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Usage] constructor(): R|Usage| {
                LAZY_super<<implicit>>
            }

            public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

        }


CONSTANT_EVALUATION:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverrideScript.kts
    SCRIPT: [ResolvedTo(TYPES)] <script-hierarchyWithOverrideScript.kts>
        [ResolvedTo(TYPES)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(TYPES)] lval args: R|kotlin/Array<kotlin/String>|

        public final? [ResolvedTo(SUPER_TYPES)] [ContainingScriptKey=FirScriptSymbol <script-hierarchyWithOverrideScript.kts>] interface Foo1 : R|kotlin/Any| {
            public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun bar(): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] val str: String
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo1] get(): String

        }

        public final? [ResolvedTo(SUPER_TYPES)] [ContainingScriptKey=FirScriptSymbol <script-hierarchyWithOverrideScript.kts>] interface Foo2 : R|Foo1| {
            public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo2] get(): Boolean

        }

        public abstract [ResolvedTo(CONSTANT_EVALUATION)] [ContainingScriptKey=FirScriptSymbol <script-hierarchyWithOverrideScript.kts>] class Usage : R|Foo2| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Usage] constructor(): R|Usage| {
                LAZY_super<<implicit>>
            }

            public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

        }


ANNOTATION_ARGUMENTS:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverrideScript.kts
    SCRIPT: [ResolvedTo(TYPES)] <script-hierarchyWithOverrideScript.kts>
        [ResolvedTo(TYPES)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(TYPES)] lval args: R|kotlin/Array<kotlin/String>|

        public final? [ResolvedTo(SUPER_TYPES)] [ContainingScriptKey=FirScriptSymbol <script-hierarchyWithOverrideScript.kts>] interface Foo1 : R|kotlin/Any| {
            public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun bar(): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] val str: String
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo1] get(): String

        }

        public final? [ResolvedTo(SUPER_TYPES)] [ContainingScriptKey=FirScriptSymbol <script-hierarchyWithOverrideScript.kts>] interface Foo2 : R|Foo1| {
            public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo2] get(): Boolean

        }

        public abstract [ResolvedTo(ANNOTATION_ARGUMENTS)] [ContainingScriptKey=FirScriptSymbol <script-hierarchyWithOverrideScript.kts>] class Usage : R|Foo2| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Usage] constructor(): R|Usage| {
                LAZY_super<<implicit>>
            }

            public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

        }


BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverrideScript.kts
    SCRIPT: [ResolvedTo(TYPES)] <script-hierarchyWithOverrideScript.kts>
        [ResolvedTo(TYPES)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(TYPES)] lval args: R|kotlin/Array<kotlin/String>|

        public abstract [ResolvedTo(STATUS)] [ContainingScriptKey=FirScriptSymbol <script-hierarchyWithOverrideScript.kts>] interface Foo1 : R|kotlin/Any| {
            public abstract [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] fun bar(): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] val str: R|kotlin/String|
                public [ResolvedTo(STATUS)] [ContainingClassKey=Foo1] get(): R|kotlin/String|

        }

        public abstract [ResolvedTo(STATUS)] [ContainingScriptKey=FirScriptSymbol <script-hierarchyWithOverrideScript.kts>] interface Foo2 : R|Foo1| {
            public abstract [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] fun bar([ResolvedTo(STATUS)] s: R|kotlin/String|): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] val isBoo: R|kotlin/Boolean|
                public [ResolvedTo(STATUS)] [ContainingClassKey=Foo2] get(): R|kotlin/Boolean|

        }

        public abstract [ResolvedTo(BODY_RESOLVE)] [ContainingScriptKey=FirScriptSymbol <script-hierarchyWithOverrideScript.kts>] class Usage : R|Foo2| {
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Usage] constructor(): R|Usage| {
                super<R|kotlin/Any|>()
            }

            public open override [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

        }


FILE RAW TO BODY:
FILE: [ResolvedTo(BODY_RESOLVE)] hierarchyWithOverrideScript.kts
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] <script-hierarchyWithOverrideScript.kts>
        [ResolvedTo(BODY_RESOLVE)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(BODY_RESOLVE)] lval args: R|kotlin/Array<kotlin/String>|

        public abstract [ResolvedTo(BODY_RESOLVE)] [ContainingScriptKey=FirScriptSymbol <script-hierarchyWithOverrideScript.kts>] interface Foo1 : R|kotlin/Any| {
            public abstract [ResolvedTo(BODY_RESOLVE)] fun foo(): R|kotlin/Unit|

            public abstract [ResolvedTo(BODY_RESOLVE)] fun bar(): R|kotlin/Unit|

            public abstract [ResolvedTo(BODY_RESOLVE)] val str: R|kotlin/String|
                public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Foo1] get(): R|kotlin/String|

        }

        public abstract [ResolvedTo(BODY_RESOLVE)] [ContainingScriptKey=FirScriptSymbol <script-hierarchyWithOverrideScript.kts>] interface Foo2 : R|Foo1| {
            public abstract [ResolvedTo(BODY_RESOLVE)] fun foo([ResolvedTo(BODY_RESOLVE)] i: R|kotlin/Int|): R|kotlin/Unit|

            public abstract [ResolvedTo(BODY_RESOLVE)] fun bar([ResolvedTo(BODY_RESOLVE)] s: R|kotlin/String|): R|kotlin/Unit|

            public abstract [ResolvedTo(BODY_RESOLVE)] val isBoo: R|kotlin/Boolean|
                public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Foo2] get(): R|kotlin/Boolean|

        }

        public abstract [ResolvedTo(BODY_RESOLVE)] [ContainingScriptKey=FirScriptSymbol <script-hierarchyWithOverrideScript.kts>] class Usage : R|Foo2| {
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Usage] constructor(): R|Usage| {
                super<R|kotlin/Any|>()
            }

            public open override [ResolvedTo(BODY_RESOLVE)] fun foo(): R|kotlin/Unit| {
            }

        }

