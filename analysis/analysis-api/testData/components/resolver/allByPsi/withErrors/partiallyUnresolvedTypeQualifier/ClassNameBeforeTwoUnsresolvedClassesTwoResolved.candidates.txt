KtFile: 'ClassNameBeforeTwoUnsresolvedClassesTwoResolved.kt'
  NO_CANDIDATES

KtPackageDirective(0,0): ''
  NO_CANDIDATES

KtImportList(0,0): ''
  NO_CANDIDATES

KtClass(1,28): 'class Foo {'
  NO_CANDIDATES

KtClassBody(11,28): '{'
  NO_CANDIDATES

KtClass(17,26): 'class Bar'
  NO_CANDIDATES

KtClass(30,74): 'class C {'
  NO_CANDIDATES

KtClassBody(38,74): '{'
  NO_CANDIDATES

KtProperty(44,72): 'val prop: Foo.Bar.Baz.Bazzzz'
  NO_CANDIDATES

KtTypeReference(54,72): 'Foo.Bar.Baz.Bazzzz'
  NO_CANDIDATES

KtUserType(54,72): 'Foo.Bar.Baz.Bazzzz'
  NO_CANDIDATES

KtUserType(54,65): 'Foo.Bar.Baz'
  NO_CANDIDATES

KtUserType(54,61): 'Foo.Bar'
  NO_CANDIDATES

KtUserType(54,57): 'Foo'
  NO_CANDIDATES

KtNameReferenceExpression(54,57): 'Foo'
  NO_CANDIDATES

KtNameReferenceExpression(58,61): 'Bar'
  NO_CANDIDATES

KtNameReferenceExpression(62,65): 'Baz'
  NO_CANDIDATES

KtNameReferenceExpression(66,72): 'Bazzzz'
  NO_CANDIDATES

KtNamedFunction(76,131): 'fun testFun() {'
  NO_CANDIDATES

KtParameterList(87,89): '()'
  NO_CANDIDATES

KtBlockExpression(90,131): '{'
  NO_CANDIDATES

KtProperty(96,129): 'val localProp: Foo.Bar.Baz.Bazzzz'
  NO_CANDIDATES

KtTypeReference(111,129): 'Foo.Bar.Baz.Bazzzz'
  NO_CANDIDATES

KtUserType(111,129): 'Foo.Bar.Baz.Bazzzz'
  NO_CANDIDATES

KtUserType(111,122): 'Foo.Bar.Baz'
  NO_CANDIDATES

KtUserType(111,118): 'Foo.Bar'
  NO_CANDIDATES

KtUserType(111,114): 'Foo'
  NO_CANDIDATES

KtNameReferenceExpression(111,114): 'Foo'
  NO_CANDIDATES

KtNameReferenceExpression(115,118): 'Bar'
  NO_CANDIDATES

KtNameReferenceExpression(119,122): 'Baz'
  NO_CANDIDATES

KtNameReferenceExpression(123,129): 'Bazzzz'
  NO_CANDIDATES

KtNamedFunction(133,169): 'fun <T> take(action: (T) -> Unit) {}'
  NO_CANDIDATES

KtTypeParameterList(137,140): '<T>'
  NO_CANDIDATES

KtTypeParameter(138,139): 'T'
  NO_CANDIDATES

KtParameterList(145,166): '(action: (T) -> Unit)'
  NO_CANDIDATES

KtParameter(146,165): 'action: (T) -> Unit'
  NO_CANDIDATES

KtTypeReference(154,165): '(T) -> Unit'
  NO_CANDIDATES

KtFunctionType(154,165): '(T) -> Unit'
  NO_CANDIDATES

KtParameterList(154,157): '(T)'
  NO_CANDIDATES

KtParameter(155,156): 'T'
  NO_CANDIDATES

KtTypeReference(155,156): 'T'
  NO_CANDIDATES

KtUserType(155,156): 'T'
  NO_CANDIDATES

KtNameReferenceExpression(155,156): 'T'
  NO_CANDIDATES

KtTypeReference(161,165): 'Unit'
  NO_CANDIDATES

KtUserType(161,165): 'Unit'
  NO_CANDIDATES

KtNameReferenceExpression(161,165): 'Unit'
  NO_CANDIDATES

KtBlockExpression(167,169): '{}'
  NO_CANDIDATES

KtProperty(171,229): 'val prop = take {'
  NO_CANDIDATES

KtCallExpression(182,229): 'take {'
  KaInapplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        {
            lambdaParam: Foo.Bar.Baz.Bazzzz ->
        } -> (KaVariableSignature:
          name = action
          receiverType = null
          returnType = kotlin.Function1<ERROR CLASS: Cannot infer argument for type parameter T, kotlin.Unit>
          symbol = action: kotlin.Function1<T, kotlin.Unit>
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = /take(action: kotlin.Function1<T, kotlin.Unit>): kotlin.Unit
          valueParameters = [
            KaVariableSignature:
              name = action
              receiverType = null
              returnType = kotlin.Function1<ERROR CLASS: Cannot infer argument for type parameter T, kotlin.Unit>
              symbol = action: kotlin.Function1<T, kotlin.Unit>
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = /take
      typeArgumentsMapping = {
        T -> (ERROR CLASS: Cannot infer argument for type parameter T)
      }
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is 'Function1<ERROR CLASS: Symbol not found for Foo.Bar.Baz.Bazzzz, Unit>', but 'Function1<uninferred T (of fun <T> take), Unit>' was expected.>
    isInBestCandidates = true

KtNameReferenceExpression(182,186): 'take'
  KaInapplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        {
            lambdaParam: Foo.Bar.Baz.Bazzzz ->
        } -> (KaVariableSignature:
          name = action
          receiverType = null
          returnType = kotlin.Function1<ERROR CLASS: Cannot infer argument for type parameter T, kotlin.Unit>
          symbol = action: kotlin.Function1<T, kotlin.Unit>
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = /take(action: kotlin.Function1<T, kotlin.Unit>): kotlin.Unit
          valueParameters = [
            KaVariableSignature:
              name = action
              receiverType = null
              returnType = kotlin.Function1<ERROR CLASS: Cannot infer argument for type parameter T, kotlin.Unit>
              symbol = action: kotlin.Function1<T, kotlin.Unit>
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = /take
      typeArgumentsMapping = {
        T -> (ERROR CLASS: Cannot infer argument for type parameter T)
      }
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is 'Function1<ERROR CLASS: Symbol not found for Foo.Bar.Baz.Bazzzz, Unit>', but 'Function1<uninferred T (of fun <T> take), Unit>' was expected.>
    isInBestCandidates = true

KtLambdaArgument(187,229): '{'
  NO_CANDIDATES

KtLambdaExpression(187,229): '{'
  NO_CANDIDATES

KtFunctionLiteral(187,229): '{'
  NO_CANDIDATES

KtParameterList(193,224): 'lambdaParam: Foo.Bar.Baz.Bazzzz'
  NO_CANDIDATES

KtParameter(193,224): 'lambdaParam: Foo.Bar.Baz.Bazzzz'
  NO_CANDIDATES

KtTypeReference(206,224): 'Foo.Bar.Baz.Bazzzz'
  NO_CANDIDATES

KtUserType(206,224): 'Foo.Bar.Baz.Bazzzz'
  NO_CANDIDATES

KtUserType(206,217): 'Foo.Bar.Baz'
  NO_CANDIDATES

KtUserType(206,213): 'Foo.Bar'
  NO_CANDIDATES

KtUserType(206,209): 'Foo'
  NO_CANDIDATES

KtNameReferenceExpression(206,209): 'Foo'
  NO_CANDIDATES

KtNameReferenceExpression(210,213): 'Bar'
  NO_CANDIDATES

KtNameReferenceExpression(214,217): 'Baz'
  NO_CANDIDATES

KtNameReferenceExpression(218,224): 'Bazzzz'
  NO_CANDIDATES

KtBlockExpression(228,228): ''
  NO_CANDIDATES