RAW_FIR:
FILE: [ResolvedTo(RAW_FIR)] functionInsideFileAnnotation.kt
    @FILE:Anno[Unresolved](LAZY_EXPRESSION)
    @Target[Unresolved](LAZY_EXPRESSION) public final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=one/Anno.s] s: String): R|one/Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val s: String = R|<local>/s|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

    }
    public? final? [ResolvedTo(RAW_FIR)] fun topLevelFunction([ResolvedTo(RAW_FIR)] l: Long): <implicit> { LAZY_BLOCK }

IMPORTS:
FILE: [ResolvedTo(IMPORTS)] functionInsideFileAnnotation.kt
    @FILE:Anno[Unresolved](LAZY_EXPRESSION)
    @Target[Unresolved](LAZY_EXPRESSION) public final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=one/Anno.s] s: String): R|one/Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val s: String = R|<local>/s|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

    }
    public? final? [ResolvedTo(RAW_FIR)] fun topLevelFunction([ResolvedTo(RAW_FIR)] l: Long): <implicit> { LAZY_BLOCK }

COMPILER_REQUIRED_ANNOTATIONS:
FILE: [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] functionInsideFileAnnotation.kt
    @FILE:Anno[Unresolved](LAZY_EXPRESSION)
    @Target[Unresolved](LAZY_EXPRESSION) public final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=one/Anno.s] s: String): R|one/Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val s: String = R|<local>/s|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

    }
    public? final? [ResolvedTo(RAW_FIR)] fun topLevelFunction([ResolvedTo(RAW_FIR)] l: Long): <implicit> { LAZY_BLOCK }

COMPANION_GENERATION:
FILE: [ResolvedTo(COMPANION_GENERATION)] functionInsideFileAnnotation.kt
    @FILE:Anno[Unresolved](LAZY_EXPRESSION)
    @Target[Unresolved](LAZY_EXPRESSION) public final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=one/Anno.s] s: String): R|one/Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val s: String = R|<local>/s|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

    }
    public? final? [ResolvedTo(RAW_FIR)] fun topLevelFunction([ResolvedTo(RAW_FIR)] l: Long): <implicit> { LAZY_BLOCK }

SUPER_TYPES:
FILE: [ResolvedTo(SUPER_TYPES)] functionInsideFileAnnotation.kt
    @FILE:Anno[Unresolved](LAZY_EXPRESSION)
    @Target[Unresolved](LAZY_EXPRESSION) public final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=one/Anno.s] s: String): R|one/Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val s: String = R|<local>/s|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

    }
    public? final? [ResolvedTo(RAW_FIR)] fun topLevelFunction([ResolvedTo(RAW_FIR)] l: Long): <implicit> { LAZY_BLOCK }

TYPES:
FILE: [ResolvedTo(TYPES)] functionInsideFileAnnotation.kt
    @FILE:R|one/Anno|[Types](LAZY_EXPRESSION)
    @R|kotlin/annotation/Target|[CompilerRequiredAnnotations](Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.FILE|) public final? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] annotation class Anno : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=one/Anno.s] s: String): R|one/Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val s: String = R|<local>/s|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

    }
    public? final? [ResolvedTo(RAW_FIR)] fun topLevelFunction([ResolvedTo(RAW_FIR)] l: Long): <implicit> { LAZY_BLOCK }

STATUS:
FILE: [ResolvedTo(STATUS)] functionInsideFileAnnotation.kt
    @FILE:R|one/Anno|[Types](LAZY_EXPRESSION)
    @R|kotlin/annotation/Target|[CompilerRequiredAnnotations](Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.FILE|) public final? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] annotation class Anno : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=one/Anno.s] s: String): R|one/Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val s: String = R|<local>/s|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

    }
    public? final? [ResolvedTo(RAW_FIR)] fun topLevelFunction([ResolvedTo(RAW_FIR)] l: Long): <implicit> { LAZY_BLOCK }

EXPECT_ACTUAL_MATCHING:
FILE: [ResolvedTo(EXPECT_ACTUAL_MATCHING)] functionInsideFileAnnotation.kt
    @FILE:R|one/Anno|[Types](LAZY_EXPRESSION)
    @R|kotlin/annotation/Target|[CompilerRequiredAnnotations](Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.FILE|) public final? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] annotation class Anno : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=one/Anno.s] s: String): R|one/Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val s: String = R|<local>/s|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

    }
    public? final? [ResolvedTo(RAW_FIR)] fun topLevelFunction([ResolvedTo(RAW_FIR)] l: Long): <implicit> { LAZY_BLOCK }

CONTRACTS:
FILE: [ResolvedTo(CONTRACTS)] functionInsideFileAnnotation.kt
    @FILE:R|one/Anno|[Types](LAZY_EXPRESSION)
    @R|kotlin/annotation/Target|[CompilerRequiredAnnotations](Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.FILE|) public final? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] annotation class Anno : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=one/Anno.s] s: String): R|one/Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val s: String = R|<local>/s|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

    }
    public? final? [ResolvedTo(RAW_FIR)] fun topLevelFunction([ResolvedTo(RAW_FIR)] l: Long): <implicit> { LAZY_BLOCK }

IMPLICIT_TYPES_BODY_RESOLVE:
FILE: [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] functionInsideFileAnnotation.kt
    @FILE:R|one/Anno|[Types](LAZY_EXPRESSION)
    @R|kotlin/annotation/Target|[CompilerRequiredAnnotations](Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.FILE|) public final? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] annotation class Anno : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=one/Anno.s] s: String): R|one/Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val s: String = R|<local>/s|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

    }
    public? final? [ResolvedTo(RAW_FIR)] fun topLevelFunction([ResolvedTo(RAW_FIR)] l: Long): <implicit> { LAZY_BLOCK }

CONSTANT_EVALUATION:
FILE: [ResolvedTo(CONSTANT_EVALUATION)] functionInsideFileAnnotation.kt
    @FILE:R|one/Anno|[Types](LAZY_EXPRESSION)
    @R|kotlin/annotation/Target|[CompilerRequiredAnnotations](Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.FILE|) public final? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] annotation class Anno : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=one/Anno.s] s: String): R|one/Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val s: String = R|<local>/s|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

    }
    public? final? [ResolvedTo(RAW_FIR)] fun topLevelFunction([ResolvedTo(RAW_FIR)] l: Long): <implicit> { LAZY_BLOCK }

ANNOTATION_ARGUMENTS:
FILE: [ResolvedTo(ANNOTATION_ARGUMENTS)] functionInsideFileAnnotation.kt
    @FILE:R|one/Anno|[Types](s = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=kotlin/String] fun <anonymous>(): R|kotlin/Int| <inline=Unknown>  {
        [ResolvedTo(RAW_FIR)] lval s: R|kotlin/Int| = String(str)
        ^ R|<local>/s|
    }
    )
    @R|kotlin/annotation/Target|[Types](Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.FILE|) public final [ResolvedTo(STATUS)] annotation class Anno : R|kotlin/Annotation| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Anno] constructor([ResolvedTo(STATUS)] [CorrespondingProperty=one/Anno.s] s: R|kotlin/String|): R|one/Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public final [ResolvedTo(STATUS)] [IsFromPrimaryConstructor=true] val s: R|kotlin/String| = R|<local>/s|
            public [ResolvedTo(STATUS)] [ContainingClassKey=Anno] get(): R|kotlin/String|

    }
    public? final? [ResolvedTo(RAW_FIR)] fun topLevelFunction([ResolvedTo(RAW_FIR)] l: Long): <implicit> { LAZY_BLOCK }

BODY_RESOLVE:
FILE: [ResolvedTo(BODY_RESOLVE)] functionInsideFileAnnotation.kt
    @FILE:R|one/Anno|[Types](s = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=kotlin/String] fun <anonymous>(): R|kotlin/Int| <inline=Unknown>  {
        [ResolvedTo(RAW_FIR)] lval s: R|kotlin/Int| = String(str)
        ^ R|<local>/s|
    }
    )
    @R|kotlin/annotation/Target|[Types](Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.FILE|) public final [ResolvedTo(STATUS)] annotation class Anno : R|kotlin/Annotation| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Anno] constructor([ResolvedTo(STATUS)] [CorrespondingProperty=one/Anno.s] s: R|kotlin/String|): R|one/Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public final [ResolvedTo(STATUS)] [IsFromPrimaryConstructor=true] val s: R|kotlin/String| = R|<local>/s|
            public [ResolvedTo(STATUS)] [ContainingClassKey=Anno] get(): R|kotlin/String|

    }
    public? final? [ResolvedTo(RAW_FIR)] fun topLevelFunction([ResolvedTo(RAW_FIR)] l: Long): <implicit> { LAZY_BLOCK }

FILE RAW TO BODY:
FILE: [ResolvedTo(BODY_RESOLVE)] functionInsideFileAnnotation.kt
    @FILE:R|one/Anno|[Types](s = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=kotlin/String] fun <anonymous>(): R|kotlin/Int| <inline=Unknown>  {
        [ResolvedTo(RAW_FIR)] lval s: R|kotlin/Int| = String(str)
        ^ R|<local>/s|
    }
    )
    @R|kotlin/annotation/Target|[Types](allowedTargets = vararg(Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.FILE|)) public final [ResolvedTo(BODY_RESOLVE)] annotation class Anno : R|kotlin/Annotation| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Anno] constructor([ResolvedTo(BODY_RESOLVE)] [CorrespondingProperty=one/Anno.s] s: R|kotlin/String|): R|one/Anno| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(BODY_RESOLVE)] [IsFromPrimaryConstructor=true] val s: R|kotlin/String| = R|<local>/s|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Anno] get(): R|kotlin/String|

    }
    public final [ResolvedTo(BODY_RESOLVE)] fun topLevelFunction([ResolvedTo(BODY_RESOLVE)] l: R|kotlin/Long|): R|kotlin/Int| {
        ^topLevelFunction Int(0)
    }
