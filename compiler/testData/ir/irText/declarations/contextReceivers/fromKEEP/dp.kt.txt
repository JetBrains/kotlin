class View {
  val coefficient: Int
    field = 42
    get

  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

}

fun box(): String {
  with<View, Nothing>(receiver = View(), block = local fun View.<anonymous>(): Nothing {
    when {
      EQEQ(arg0 = map<Int, Int>(/* <this> = listOf<Int>(elements = [1, 2, 10]), */ transform = local fun <anonymous>(it: Int): Int {
        return <get-dp>(/* $context_receiver_0 = $this$with, <this> = it */)
      }
), arg1 = listOf<Int>(elements = [42, 84, 420])) -> { // BLOCK
        return "OK"
      }
    }
    return "fail"
  }
)
}

val Int.dp: Int
  context($context_receiver_0: View)
  get(): Int {
    return $context_receiver_0.<get-coefficient>().times(other = <this>)
  }

