KtFile: 'main.kt'
  NO_CANDIDATES

KtPackageDirective(0,0): ''
  NO_CANDIDATES

KtImportList(0,0): ''
  NO_CANDIDATES

KtClass(28,205): 'sealed class MyClass {'
  NO_CANDIDATES

KtDeclarationModifierList(28,34): 'sealed'
  NO_CANDIDATES

KtClassBody(49,205): '{'
  NO_CANDIDATES

KtObjectDeclaration(55,148): 'companion object {'
  NO_CANDIDATES

KtDeclarationModifierList(55,64): 'companion'
  NO_CANDIDATES

KtClassBody(72,148): '{'
  NO_CANDIDATES

KtProperty(82,107): 'val FOO: MyClass = TODO()'
  NO_CANDIDATES

KtTypeReference(91,98): 'MyClass'
  NO_CANDIDATES

KtUserType(91,98): 'MyClass'
  NO_CANDIDATES

KtNameReferenceExpression(91,98): 'MyClass'
  NO_CANDIDATES

KtCallExpression(101,107): 'TODO()'
  KaApplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {}
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Nothing
          symbol = kotlin/TODO(): kotlin.Nothing
          valueParameters = []
          contextParameters = []
          callableId = kotlin/TODO
      typeArgumentsMapping = {}
    isInBestCandidates = true

  KaInapplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {}
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Nothing
          symbol = kotlin/TODO(reason: kotlin.String): kotlin.Nothing
          valueParameters = [
            KaVariableSignature:
              name = reason
              receiverType = null
              returnType = kotlin.String
              symbol = reason: kotlin.String
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = kotlin/TODO
      typeArgumentsMapping = {}
    diagnostic = ERROR<NO_VALUE_FOR_PARAMETER: No value passed for parameter 'reason'.>
    isInBestCandidates = false

KtNameReferenceExpression(101,105): 'TODO'
  KaApplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {}
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Nothing
          symbol = kotlin/TODO(): kotlin.Nothing
          valueParameters = []
          contextParameters = []
          callableId = kotlin/TODO
      typeArgumentsMapping = {}
    isInBestCandidates = true

  KaInapplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {}
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Nothing
          symbol = kotlin/TODO(reason: kotlin.String): kotlin.Nothing
          valueParameters = [
            KaVariableSignature:
              name = reason
              receiverType = null
              returnType = kotlin.String
              symbol = reason: kotlin.String
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = kotlin/TODO
      typeArgumentsMapping = {}
    diagnostic = ERROR<NO_VALUE_FOR_PARAMETER: No value passed for parameter 'reason'.>
    isInBestCandidates = false

KtValueArgumentList(105,107): '()'
  NO_CANDIDATES

KtProperty(116,142): 'val FOR_TYPE_MISMATCH = ""'
  NO_CANDIDATES

KtStringTemplateExpression(140,142): '""'
  NO_CANDIDATES

KtObjectDeclaration(154,176): 'object Bar : MyClass()'
  NO_CANDIDATES

KtSuperTypeList(167,176): 'MyClass()'
  NO_CANDIDATES

KtSuperTypeCallEntry(167,176): 'MyClass()'
  KaApplicableCallCandidateInfo:
    candidate = KaDelegatedConstructorCall:
      argumentMapping = {}
      kind = SUPER_CALL
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = MyClass
          symbol = <constructor>(): MyClass
          valueParameters = []
          contextParameters = []
          callableId = null
      typeArgumentsMapping = {}
    isInBestCandidates = true

KtConstructorCalleeExpression(167,174): 'MyClass'
  KaApplicableCallCandidateInfo:
    candidate = KaDelegatedConstructorCall:
      argumentMapping = {}
      kind = SUPER_CALL
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = MyClass
          symbol = <constructor>(): MyClass
          valueParameters = []
          contextParameters = []
          callableId = null
      typeArgumentsMapping = {}
    isInBestCandidates = true

KtTypeReference(167,174): 'MyClass'
  NO_CANDIDATES

KtUserType(167,174): 'MyClass'
  NO_CANDIDATES

KtNameReferenceExpression(167,174): 'MyClass'
  NO_CANDIDATES

KtValueArgumentList(174,176): '()'
  NO_CANDIDATES

KtObjectDeclaration(181,203): 'object ForTypeMismatch'
  NO_CANDIDATES

KtNamedFunction(207,231): 'fun expectInt(x: Int) {}'
  NO_CANDIDATES

KtParameterList(220,228): '(x: Int)'
  NO_CANDIDATES

KtParameter(221,227): 'x: Int'
  NO_CANDIDATES

KtTypeReference(224,227): 'Int'
  NO_CANDIDATES

KtUserType(224,227): 'Int'
  NO_CANDIDATES

KtNameReferenceExpression(224,227): 'Int'
  NO_CANDIDATES

KtBlockExpression(229,231): '{}'
  NO_CANDIDATES

KtNamedFunction(233,265): 'fun expectMyClass(x: MyClass) {}'
  NO_CANDIDATES

KtParameterList(250,262): '(x: MyClass)'
  NO_CANDIDATES

KtParameter(251,261): 'x: MyClass'
  NO_CANDIDATES

KtTypeReference(254,261): 'MyClass'
  NO_CANDIDATES

KtUserType(254,261): 'MyClass'
  NO_CANDIDATES

KtNameReferenceExpression(254,261): 'MyClass'
  NO_CANDIDATES

KtBlockExpression(263,265): '{}'
  NO_CANDIDATES

KtNamedFunction(267,295): 'fun <X> id(x: X): X = TODO()'
  NO_CANDIDATES

KtTypeParameterList(271,274): '<X>'
  NO_CANDIDATES

KtTypeParameter(272,273): 'X'
  NO_CANDIDATES

KtParameterList(277,283): '(x: X)'
  NO_CANDIDATES

KtParameter(278,282): 'x: X'
  NO_CANDIDATES

KtTypeReference(281,282): 'X'
  NO_CANDIDATES

KtUserType(281,282): 'X'
  NO_CANDIDATES

KtNameReferenceExpression(281,282): 'X'
  NO_CANDIDATES

KtTypeReference(285,286): 'X'
  NO_CANDIDATES

KtUserType(285,286): 'X'
  NO_CANDIDATES

KtNameReferenceExpression(285,286): 'X'
  NO_CANDIDATES

KtCallExpression(289,295): 'TODO()'
  KaApplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {}
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Nothing
          symbol = kotlin/TODO(): kotlin.Nothing
          valueParameters = []
          contextParameters = []
          callableId = kotlin/TODO
      typeArgumentsMapping = {}
    isInBestCandidates = true

  KaInapplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {}
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Nothing
          symbol = kotlin/TODO(reason: kotlin.String): kotlin.Nothing
          valueParameters = [
            KaVariableSignature:
              name = reason
              receiverType = null
              returnType = kotlin.String
              symbol = reason: kotlin.String
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = kotlin/TODO
      typeArgumentsMapping = {}
    diagnostic = ERROR<NO_VALUE_FOR_PARAMETER: No value passed for parameter 'reason'.>
    isInBestCandidates = false

KtNameReferenceExpression(289,293): 'TODO'
  KaApplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {}
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Nothing
          symbol = kotlin/TODO(): kotlin.Nothing
          valueParameters = []
          contextParameters = []
          callableId = kotlin/TODO
      typeArgumentsMapping = {}
    isInBestCandidates = true

  KaInapplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {}
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Nothing
          symbol = kotlin/TODO(reason: kotlin.String): kotlin.Nothing
          valueParameters = [
            KaVariableSignature:
              name = reason
              receiverType = null
              returnType = kotlin.String
              symbol = reason: kotlin.String
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = kotlin/TODO
      typeArgumentsMapping = {}
    diagnostic = ERROR<NO_VALUE_FOR_PARAMETER: No value passed for parameter 'reason'.>
    isInBestCandidates = false

KtValueArgumentList(293,295): '()'
  NO_CANDIDATES

KtNamedFunction(297,640): 'fun MyClass.foo() {'
  NO_CANDIDATES

KtTypeReference(301,308): 'MyClass'
  NO_CANDIDATES

KtUserType(301,308): 'MyClass'
  NO_CANDIDATES

KtNameReferenceExpression(301,308): 'MyClass'
  NO_CANDIDATES

KtParameterList(312,314): '()'
  NO_CANDIDATES

KtBlockExpression(315,640): '{'
  NO_CANDIDATES

KtCallExpression(321,341): 'expectInt(MAX_VALUE)'
  KaApplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        MAX_VALUE -> (KaVariableSignature:
          name = x
          receiverType = null
          returnType = kotlin.Int
          symbol = x: kotlin.Int
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = /expectInt(x: kotlin.Int): kotlin.Unit
          valueParameters = [
            KaVariableSignature:
              name = x
              receiverType = null
              returnType = kotlin.Int
              symbol = x: kotlin.Int
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = /expectInt
      typeArgumentsMapping = {}
    isInBestCandidates = true

KtNameReferenceExpression(321,330): 'expectInt'
  KaApplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        MAX_VALUE -> (KaVariableSignature:
          name = x
          receiverType = null
          returnType = kotlin.Int
          symbol = x: kotlin.Int
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = /expectInt(x: kotlin.Int): kotlin.Unit
          valueParameters = [
            KaVariableSignature:
              name = x
              receiverType = null
              returnType = kotlin.Int
              symbol = x: kotlin.Int
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = /expectInt
      typeArgumentsMapping = {}
    isInBestCandidates = true

KtValueArgumentList(330,341): '(MAX_VALUE)'
  NO_CANDIDATES

KtValueArgument(331,340): 'MAX_VALUE'
  NO_CANDIDATES

KtNameReferenceExpression(331,340): 'MAX_VALUE'
  KaApplicableCallCandidateInfo:
    candidate = KaSimpleVariableAccessCall:
      isContextSensitive = true
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = KaExplicitReceiverValue:
          expression = MAX_VALUE
          isSafeNavigation = false
          type = kotlin.Int.Companion
        extensionReceiver = null
        signature = KaVariableSignature:
          name = MAX_VALUE
          receiverType = null
          returnType = kotlin.Int
          symbol = val MAX_VALUE: kotlin.Int
          contextParameters = []
          callableId = kotlin/Int.Companion.MAX_VALUE
      simpleAccess = Read
      typeArgumentsMapping = {}
    isInBestCandidates = true

KtCallExpression(347,365): 'expectMyClass(FOO)'
  KaApplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        FOO -> (KaVariableSignature:
          name = x
          receiverType = null
          returnType = MyClass
          symbol = x: MyClass
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = /expectMyClass(x: MyClass): kotlin.Unit
          valueParameters = [
            KaVariableSignature:
              name = x
              receiverType = null
              returnType = MyClass
              symbol = x: MyClass
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = /expectMyClass
      typeArgumentsMapping = {}
    isInBestCandidates = true

KtNameReferenceExpression(347,360): 'expectMyClass'
  KaApplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        FOO -> (KaVariableSignature:
          name = x
          receiverType = null
          returnType = MyClass
          symbol = x: MyClass
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = /expectMyClass(x: MyClass): kotlin.Unit
          valueParameters = [
            KaVariableSignature:
              name = x
              receiverType = null
              returnType = MyClass
              symbol = x: MyClass
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = /expectMyClass
      typeArgumentsMapping = {}
    isInBestCandidates = true

KtValueArgumentList(360,365): '(FOO)'
  NO_CANDIDATES

KtValueArgument(361,364): 'FOO'
  NO_CANDIDATES

KtNameReferenceExpression(361,364): 'FOO'
  KaApplicableCallCandidateInfo:
    candidate = KaSimpleVariableAccessCall:
      isContextSensitive = true
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = KaExplicitReceiverValue:
          expression = FOO
          isSafeNavigation = false
          type = MyClass.Companion
        extensionReceiver = null
        signature = KaVariableSignature:
          name = FOO
          receiverType = null
          returnType = MyClass
          symbol = val FOO: MyClass
          contextParameters = []
          callableId = /MyClass.Companion.FOO
      simpleAccess = Read
      typeArgumentsMapping = {}
    isInBestCandidates = true

KtCallExpression(370,392): 'expectMyClass(id(FOO))'
  KaApplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        id(FOO) -> (KaVariableSignature:
          name = x
          receiverType = null
          returnType = MyClass
          symbol = x: MyClass
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = /expectMyClass(x: MyClass): kotlin.Unit
          valueParameters = [
            KaVariableSignature:
              name = x
              receiverType = null
              returnType = MyClass
              symbol = x: MyClass
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = /expectMyClass
      typeArgumentsMapping = {}
    isInBestCandidates = true

KtNameReferenceExpression(370,383): 'expectMyClass'
  KaApplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        id(FOO) -> (KaVariableSignature:
          name = x
          receiverType = null
          returnType = MyClass
          symbol = x: MyClass
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = /expectMyClass(x: MyClass): kotlin.Unit
          valueParameters = [
            KaVariableSignature:
              name = x
              receiverType = null
              returnType = MyClass
              symbol = x: MyClass
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = /expectMyClass
      typeArgumentsMapping = {}
    isInBestCandidates = true

KtValueArgumentList(383,392): '(id(FOO))'
  NO_CANDIDATES

KtValueArgument(384,391): 'id(FOO)'
  NO_CANDIDATES

KtCallExpression(384,391): 'id(FOO)'
  KaApplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        FOO -> (KaVariableSignature:
          name = x
          receiverType = null
          returnType = MyClass
          symbol = x: X
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = MyClass
          symbol = /id(x: X): X
          valueParameters = [
            KaVariableSignature:
              name = x
              receiverType = null
              returnType = MyClass
              symbol = x: X
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = /id
      typeArgumentsMapping = {
        X -> (MyClass)
      }
    isInBestCandidates = true

KtNameReferenceExpression(384,386): 'id'
  KaApplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        FOO -> (KaVariableSignature:
          name = x
          receiverType = null
          returnType = MyClass
          symbol = x: X
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = MyClass
          symbol = /id(x: X): X
          valueParameters = [
            KaVariableSignature:
              name = x
              receiverType = null
              returnType = MyClass
              symbol = x: X
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = /id
      typeArgumentsMapping = {
        X -> (MyClass)
      }
    isInBestCandidates = true

KtValueArgumentList(386,391): '(FOO)'
  NO_CANDIDATES

KtValueArgument(387,390): 'FOO'
  NO_CANDIDATES

KtNameReferenceExpression(387,390): 'FOO'
  KaApplicableCallCandidateInfo:
    candidate = KaSimpleVariableAccessCall:
      isContextSensitive = true
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = KaExplicitReceiverValue:
          expression = FOO
          isSafeNavigation = false
          type = MyClass.Companion
        extensionReceiver = null
        signature = KaVariableSignature:
          name = FOO
          receiverType = null
          returnType = MyClass
          symbol = val FOO: MyClass
          contextParameters = []
          callableId = /MyClass.Companion.FOO
      simpleAccess = Read
      typeArgumentsMapping = {}
    isInBestCandidates = true

KtCallExpression(398,430): 'expectMyClass(FOR_TYPE_MISMATCH)'
  KaInapplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        FOR_TYPE_MISMATCH -> (KaVariableSignature:
          name = x
          receiverType = null
          returnType = MyClass
          symbol = x: MyClass
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = /expectMyClass(x: MyClass): kotlin.Unit
          valueParameters = [
            KaVariableSignature:
              name = x
              receiverType = null
              returnType = MyClass
              symbol = x: MyClass
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = /expectMyClass
      typeArgumentsMapping = {}
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is 'String', but 'MyClass' was expected.>
    isInBestCandidates = true

KtNameReferenceExpression(398,411): 'expectMyClass'
  KaInapplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        FOR_TYPE_MISMATCH -> (KaVariableSignature:
          name = x
          receiverType = null
          returnType = MyClass
          symbol = x: MyClass
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = /expectMyClass(x: MyClass): kotlin.Unit
          valueParameters = [
            KaVariableSignature:
              name = x
              receiverType = null
              returnType = MyClass
              symbol = x: MyClass
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = /expectMyClass
      typeArgumentsMapping = {}
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is 'String', but 'MyClass' was expected.>
    isInBestCandidates = true

KtValueArgumentList(411,430): '(FOR_TYPE_MISMATCH)'
  NO_CANDIDATES

KtValueArgument(412,429): 'FOR_TYPE_MISMATCH'
  NO_CANDIDATES

KtNameReferenceExpression(412,429): 'FOR_TYPE_MISMATCH'
  KaApplicableCallCandidateInfo:
    candidate = KaSimpleVariableAccessCall:
      isContextSensitive = true
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = KaExplicitReceiverValue:
          expression = FOR_TYPE_MISMATCH
          isSafeNavigation = false
          type = MyClass.Companion
        extensionReceiver = null
        signature = KaVariableSignature:
          name = FOR_TYPE_MISMATCH
          receiverType = null
          returnType = kotlin.String
          symbol = val FOR_TYPE_MISMATCH: kotlin.String
          contextParameters = []
          callableId = /MyClass.Companion.FOR_TYPE_MISMATCH
      simpleAccess = Read
      typeArgumentsMapping = {}
    isInBestCandidates = true

KtCallExpression(435,471): 'expectMyClass(id(FOR_TYPE_MISMATCH))'
  KaInapplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        id(FOR_TYPE_MISMATCH) -> (KaVariableSignature:
          name = x
          receiverType = null
          returnType = MyClass
          symbol = x: MyClass
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = /expectMyClass(x: MyClass): kotlin.Unit
          valueParameters = [
            KaVariableSignature:
              name = x
              receiverType = null
              returnType = MyClass
              symbol = x: MyClass
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = /expectMyClass
      typeArgumentsMapping = {}
    diagnostic = ERROR<INAPPLICABLE_CANDIDATE: Inapplicable candidate(s): fun expectMyClass(x: MyClass): Unit>
    isInBestCandidates = true

KtNameReferenceExpression(435,448): 'expectMyClass'
  KaInapplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        id(FOR_TYPE_MISMATCH) -> (KaVariableSignature:
          name = x
          receiverType = null
          returnType = MyClass
          symbol = x: MyClass
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = /expectMyClass(x: MyClass): kotlin.Unit
          valueParameters = [
            KaVariableSignature:
              name = x
              receiverType = null
              returnType = MyClass
              symbol = x: MyClass
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = /expectMyClass
      typeArgumentsMapping = {}
    diagnostic = ERROR<INAPPLICABLE_CANDIDATE: Inapplicable candidate(s): fun expectMyClass(x: MyClass): Unit>
    isInBestCandidates = true

KtValueArgumentList(448,471): '(id(FOR_TYPE_MISMATCH))'
  NO_CANDIDATES

KtValueArgument(449,470): 'id(FOR_TYPE_MISMATCH)'
  NO_CANDIDATES

KtCallExpression(449,470): 'id(FOR_TYPE_MISMATCH)'
  KaInapplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        FOR_TYPE_MISMATCH -> (KaVariableSignature:
          name = x
          receiverType = null
          returnType = MyClass
          symbol = x: X
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = MyClass
          symbol = /id(x: X): X
          valueParameters = [
            KaVariableSignature:
              name = x
              receiverType = null
              returnType = MyClass
              symbol = x: X
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = /id
      typeArgumentsMapping = {
        X -> (MyClass)
      }
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is 'String', but 'MyClass' was expected.>
    isInBestCandidates = true

KtNameReferenceExpression(449,451): 'id'
  KaInapplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        FOR_TYPE_MISMATCH -> (KaVariableSignature:
          name = x
          receiverType = null
          returnType = MyClass
          symbol = x: X
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = MyClass
          symbol = /id(x: X): X
          valueParameters = [
            KaVariableSignature:
              name = x
              receiverType = null
              returnType = MyClass
              symbol = x: X
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = /id
      typeArgumentsMapping = {
        X -> (MyClass)
      }
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is 'String', but 'MyClass' was expected.>
    isInBestCandidates = true

KtValueArgumentList(451,470): '(FOR_TYPE_MISMATCH)'
  NO_CANDIDATES

KtValueArgument(452,469): 'FOR_TYPE_MISMATCH'
  NO_CANDIDATES

KtNameReferenceExpression(452,469): 'FOR_TYPE_MISMATCH'
  KaApplicableCallCandidateInfo:
    candidate = KaSimpleVariableAccessCall:
      isContextSensitive = true
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = KaExplicitReceiverValue:
          expression = FOR_TYPE_MISMATCH
          isSafeNavigation = false
          type = MyClass.Companion
        extensionReceiver = null
        signature = KaVariableSignature:
          name = FOR_TYPE_MISMATCH
          receiverType = null
          returnType = kotlin.String
          symbol = val FOR_TYPE_MISMATCH: kotlin.String
          contextParameters = []
          callableId = /MyClass.Companion.FOR_TYPE_MISMATCH
      simpleAccess = Read
      typeArgumentsMapping = {}
    isInBestCandidates = true

KtCallExpression(477,495): 'expectMyClass(Bar)'
  KaApplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        Bar -> (KaVariableSignature:
          name = x
          receiverType = null
          returnType = MyClass
          symbol = x: MyClass
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = /expectMyClass(x: MyClass): kotlin.Unit
          valueParameters = [
            KaVariableSignature:
              name = x
              receiverType = null
              returnType = MyClass
              symbol = x: MyClass
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = /expectMyClass
      typeArgumentsMapping = {}
    isInBestCandidates = true

KtNameReferenceExpression(477,490): 'expectMyClass'
  KaApplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        Bar -> (KaVariableSignature:
          name = x
          receiverType = null
          returnType = MyClass
          symbol = x: MyClass
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = /expectMyClass(x: MyClass): kotlin.Unit
          valueParameters = [
            KaVariableSignature:
              name = x
              receiverType = null
              returnType = MyClass
              symbol = x: MyClass
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = /expectMyClass
      typeArgumentsMapping = {}
    isInBestCandidates = true

KtValueArgumentList(490,495): '(Bar)'
  NO_CANDIDATES

KtValueArgument(491,494): 'Bar'
  NO_CANDIDATES

KtNameReferenceExpression(491,494): 'Bar'
  KaInapplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {}
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = MyClass.Bar
          symbol = <constructor>(): MyClass.Bar
          valueParameters = []
          contextParameters = []
          callableId = null
      typeArgumentsMapping = {}
    diagnostic = ERROR<OTHER_ERROR: Inapplicable candidate>
    isInBestCandidates = false

KtCallExpression(500,522): 'expectMyClass(id(Bar))'
  KaApplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        id(Bar) -> (KaVariableSignature:
          name = x
          receiverType = null
          returnType = MyClass
          symbol = x: MyClass
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = /expectMyClass(x: MyClass): kotlin.Unit
          valueParameters = [
            KaVariableSignature:
              name = x
              receiverType = null
              returnType = MyClass
              symbol = x: MyClass
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = /expectMyClass
      typeArgumentsMapping = {}
    isInBestCandidates = true

KtNameReferenceExpression(500,513): 'expectMyClass'
  KaApplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        id(Bar) -> (KaVariableSignature:
          name = x
          receiverType = null
          returnType = MyClass
          symbol = x: MyClass
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = /expectMyClass(x: MyClass): kotlin.Unit
          valueParameters = [
            KaVariableSignature:
              name = x
              receiverType = null
              returnType = MyClass
              symbol = x: MyClass
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = /expectMyClass
      typeArgumentsMapping = {}
    isInBestCandidates = true

KtValueArgumentList(513,522): '(id(Bar))'
  NO_CANDIDATES

KtValueArgument(514,521): 'id(Bar)'
  NO_CANDIDATES

KtCallExpression(514,521): 'id(Bar)'
  KaApplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        Bar -> (KaVariableSignature:
          name = x
          receiverType = null
          returnType = MyClass
          symbol = x: X
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = MyClass
          symbol = /id(x: X): X
          valueParameters = [
            KaVariableSignature:
              name = x
              receiverType = null
              returnType = MyClass
              symbol = x: X
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = /id
      typeArgumentsMapping = {
        X -> (MyClass)
      }
    isInBestCandidates = true

KtNameReferenceExpression(514,516): 'id'
  KaApplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        Bar -> (KaVariableSignature:
          name = x
          receiverType = null
          returnType = MyClass
          symbol = x: X
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = MyClass
          symbol = /id(x: X): X
          valueParameters = [
            KaVariableSignature:
              name = x
              receiverType = null
              returnType = MyClass
              symbol = x: X
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = /id
      typeArgumentsMapping = {
        X -> (MyClass)
      }
    isInBestCandidates = true

KtValueArgumentList(516,521): '(Bar)'
  NO_CANDIDATES

KtValueArgument(517,520): 'Bar'
  NO_CANDIDATES

KtNameReferenceExpression(517,520): 'Bar'
  KaInapplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {}
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = MyClass.Bar
          symbol = <constructor>(): MyClass.Bar
          valueParameters = []
          contextParameters = []
          callableId = null
      typeArgumentsMapping = {}
    diagnostic = ERROR<OTHER_ERROR: Inapplicable candidate>
    isInBestCandidates = false

KtCallExpression(528,558): 'expectMyClass(ForTypeMismatch)'
  KaInapplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        ForTypeMismatch -> (KaVariableSignature:
          name = x
          receiverType = null
          returnType = MyClass
          symbol = x: MyClass
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = /expectMyClass(x: MyClass): kotlin.Unit
          valueParameters = [
            KaVariableSignature:
              name = x
              receiverType = null
              returnType = MyClass
              symbol = x: MyClass
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = /expectMyClass
      typeArgumentsMapping = {}
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is 'MyClass.ForTypeMismatch', but 'MyClass' was expected.>
    isInBestCandidates = true

KtNameReferenceExpression(528,541): 'expectMyClass'
  KaInapplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        ForTypeMismatch -> (KaVariableSignature:
          name = x
          receiverType = null
          returnType = MyClass
          symbol = x: MyClass
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = /expectMyClass(x: MyClass): kotlin.Unit
          valueParameters = [
            KaVariableSignature:
              name = x
              receiverType = null
              returnType = MyClass
              symbol = x: MyClass
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = /expectMyClass
      typeArgumentsMapping = {}
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is 'MyClass.ForTypeMismatch', but 'MyClass' was expected.>
    isInBestCandidates = true

KtValueArgumentList(541,558): '(ForTypeMismatch)'
  NO_CANDIDATES

KtValueArgument(542,557): 'ForTypeMismatch'
  NO_CANDIDATES

KtNameReferenceExpression(542,557): 'ForTypeMismatch'
  KaInapplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {}
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = MyClass.ForTypeMismatch
          symbol = <constructor>(): MyClass.ForTypeMismatch
          valueParameters = []
          contextParameters = []
          callableId = null
      typeArgumentsMapping = {}
    diagnostic = ERROR<OTHER_ERROR: Inapplicable candidate>
    isInBestCandidates = false

KtCallExpression(563,597): 'expectMyClass(id(ForTypeMismatch))'
  KaInapplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        id(ForTypeMismatch) -> (KaVariableSignature:
          name = x
          receiverType = null
          returnType = MyClass
          symbol = x: MyClass
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = /expectMyClass(x: MyClass): kotlin.Unit
          valueParameters = [
            KaVariableSignature:
              name = x
              receiverType = null
              returnType = MyClass
              symbol = x: MyClass
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = /expectMyClass
      typeArgumentsMapping = {}
    diagnostic = ERROR<INAPPLICABLE_CANDIDATE: Inapplicable candidate(s): fun expectMyClass(x: MyClass): Unit>
    isInBestCandidates = true

KtNameReferenceExpression(563,576): 'expectMyClass'
  KaInapplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        id(ForTypeMismatch) -> (KaVariableSignature:
          name = x
          receiverType = null
          returnType = MyClass
          symbol = x: MyClass
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = /expectMyClass(x: MyClass): kotlin.Unit
          valueParameters = [
            KaVariableSignature:
              name = x
              receiverType = null
              returnType = MyClass
              symbol = x: MyClass
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = /expectMyClass
      typeArgumentsMapping = {}
    diagnostic = ERROR<INAPPLICABLE_CANDIDATE: Inapplicable candidate(s): fun expectMyClass(x: MyClass): Unit>
    isInBestCandidates = true

KtValueArgumentList(576,597): '(id(ForTypeMismatch))'
  NO_CANDIDATES

KtValueArgument(577,596): 'id(ForTypeMismatch)'
  NO_CANDIDATES

KtCallExpression(577,596): 'id(ForTypeMismatch)'
  KaInapplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        ForTypeMismatch -> (KaVariableSignature:
          name = x
          receiverType = null
          returnType = MyClass
          symbol = x: X
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = MyClass
          symbol = /id(x: X): X
          valueParameters = [
            KaVariableSignature:
              name = x
              receiverType = null
              returnType = MyClass
              symbol = x: X
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = /id
      typeArgumentsMapping = {
        X -> (MyClass)
      }
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is 'MyClass.ForTypeMismatch', but 'MyClass' was expected.>
    isInBestCandidates = true

KtNameReferenceExpression(577,579): 'id'
  KaInapplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        ForTypeMismatch -> (KaVariableSignature:
          name = x
          receiverType = null
          returnType = MyClass
          symbol = x: X
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = MyClass
          symbol = /id(x: X): X
          valueParameters = [
            KaVariableSignature:
              name = x
              receiverType = null
              returnType = MyClass
              symbol = x: X
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = /id
      typeArgumentsMapping = {
        X -> (MyClass)
      }
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is 'MyClass.ForTypeMismatch', but 'MyClass' was expected.>
    isInBestCandidates = true

KtValueArgumentList(579,596): '(ForTypeMismatch)'
  NO_CANDIDATES

KtValueArgument(580,595): 'ForTypeMismatch'
  NO_CANDIDATES

KtNameReferenceExpression(580,595): 'ForTypeMismatch'
  KaInapplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {}
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = MyClass.ForTypeMismatch
          symbol = <constructor>(): MyClass.ForTypeMismatch
          valueParameters = []
          contextParameters = []
          callableId = null
      typeArgumentsMapping = {}
    diagnostic = ERROR<OTHER_ERROR: Inapplicable candidate>
    isInBestCandidates = false

KtDotQualifiedExpression(603,638): 'JavaClass.expectJavaClass(INSTANCE)'
  KaApplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        INSTANCE -> (KaVariableSignature:
          name = j
          receiverType = null
          returnType = JavaClass!
          symbol = j: JavaClass!
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = KaExplicitReceiverValue:
          expression = JavaClass
          isSafeNavigation = false
          type = kotlin.Unit
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = /JavaClass.expectJavaClass(j: JavaClass!): kotlin.Unit
          valueParameters = [
            KaVariableSignature:
              name = j
              receiverType = null
              returnType = JavaClass!
              symbol = j: JavaClass!
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = /JavaClass.expectJavaClass
      typeArgumentsMapping = {}
    isInBestCandidates = true

KtNameReferenceExpression(603,612): 'JavaClass'
  KaInapplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {}
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = JavaClass
          symbol = <constructor>(): JavaClass
          valueParameters = []
          contextParameters = []
          callableId = null
      typeArgumentsMapping = {}
    diagnostic = ERROR<OTHER_ERROR: Inapplicable candidate>
    isInBestCandidates = false

KtCallExpression(613,638): 'expectJavaClass(INSTANCE)'
  KaApplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        INSTANCE -> (KaVariableSignature:
          name = j
          receiverType = null
          returnType = JavaClass!
          symbol = j: JavaClass!
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = KaExplicitReceiverValue:
          expression = JavaClass
          isSafeNavigation = false
          type = kotlin.Unit
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = /JavaClass.expectJavaClass(j: JavaClass!): kotlin.Unit
          valueParameters = [
            KaVariableSignature:
              name = j
              receiverType = null
              returnType = JavaClass!
              symbol = j: JavaClass!
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = /JavaClass.expectJavaClass
      typeArgumentsMapping = {}
    isInBestCandidates = true

KtNameReferenceExpression(613,628): 'expectJavaClass'
  KaApplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        INSTANCE -> (KaVariableSignature:
          name = j
          receiverType = null
          returnType = JavaClass!
          symbol = j: JavaClass!
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = KaExplicitReceiverValue:
          expression = JavaClass
          isSafeNavigation = false
          type = kotlin.Unit
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = /JavaClass.expectJavaClass(j: JavaClass!): kotlin.Unit
          valueParameters = [
            KaVariableSignature:
              name = j
              receiverType = null
              returnType = JavaClass!
              symbol = j: JavaClass!
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = /JavaClass.expectJavaClass
      typeArgumentsMapping = {}
    isInBestCandidates = true

KtValueArgumentList(628,638): '(INSTANCE)'
  NO_CANDIDATES

KtValueArgument(629,637): 'INSTANCE'
  NO_CANDIDATES

KtNameReferenceExpression(629,637): 'INSTANCE'
  KaApplicableCallCandidateInfo:
    candidate = KaSimpleVariableAccessCall:
      isContextSensitive = true
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = KaExplicitReceiverValue:
          expression = INSTANCE
          isSafeNavigation = false
          type = kotlin.Unit
        extensionReceiver = null
        signature = KaVariableSignature:
          name = INSTANCE
          receiverType = null
          returnType = JavaClass!
          symbol = var INSTANCE: JavaClass!
          contextParameters = []
          callableId = /JavaClass.INSTANCE
      simpleAccess = Read
      typeArgumentsMapping = {}
    isInBestCandidates = true