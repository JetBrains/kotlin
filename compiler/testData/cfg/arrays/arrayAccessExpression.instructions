== Ab ==
abstract class Ab {
    abstract fun getArray() : Array<Int>
}
---------------------
L0:
  1 <START>
L1:
    <END>      NEXT:[<SINK>]
error:
    <ERROR>    PREV:[]
sink:
    <SINK>     PREV:[<ERROR>, <END>]
=====================
== getArray ==
abstract fun getArray() : Array<Int>
---------------------
L0:
  1 <START>
L1:
    <END>      NEXT:[<SINK>]
error:
    <ERROR>    PREV:[]
sink:
    <SINK>     PREV:[<ERROR>, <END>]
=====================
== test ==
fun test(ab: Ab) {
    ab.getArray()[1]
}
---------------------
L0:
  1 <START>
    v(ab: Ab)
    w(ab)
  2 mark({ ab.getArray()[1] })
    mark(ab.getArray()[1])
    mark(ab.getArray())
    mark(getArray())
    r(ab)
    call(getArray, getArray)
    r(1)
    call(ab.getArray()[1], get)
L1:
  1 <END>                          NEXT:[<SINK>]
error:
    <ERROR>                        PREV:[]
sink:
    <SINK>                         PREV:[<ERROR>, <END>]
=====================
