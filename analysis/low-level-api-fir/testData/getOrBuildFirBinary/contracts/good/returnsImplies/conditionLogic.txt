KT element: KtClass
KT element text:
public final class Foo public constructor() {
    public final fun test1(x: kotlin.String?): kotlin.Any? { contract { /* compiled contract */ }; /* compiled code */ }

    public final fun test2(x: kotlin.String?): kotlin.Any? { contract { /* compiled contract */ }; /* compiled code */ }

    public final fun test3(x: kotlin.String?): kotlin.Any? { contract { /* compiled contract */ }; /* compiled code */ }

    public final fun test4(x: kotlin.String?, y: kotlin.String?): kotlin.Any? { contract { /* compiled contract */ }; /* compiled code */ }

    public final fun test5(x: kotlin.Any?): kotlin.Any? { contract { /* compiled contract */ }; /* compiled code */ }

    public final fun test6(x: kotlin.Any?): kotlin.Any? { contract { /* compiled contract */ }; /* compiled code */ }

    public final fun test7(x: kotlin.Any?): kotlin.Any? { contract { /* compiled contract */ }; /* compiled code */ }

    public final fun test8(x: kotlin.Any?): kotlin.Any? { contract { /* compiled contract */ }; /* compiled code */ }

    public final fun test9(x: kotlin.Any?): kotlin.Any? { contract { /* compiled contract */ }; /* compiled code */ }

    public final fun test10(x: kotlin.Any?): kotlin.Any? { contract { /* compiled contract */ }; /* compiled code */ }

    public final fun test11(x: kotlin.Any?): kotlin.Any? { contract { /* compiled contract */ }; /* compiled code */ }

    public final fun test12(x: kotlin.Any?): kotlin.Any? { contract { /* compiled contract */ }; /* compiled code */ }

    public final fun test13(x: kotlin.Any?): kotlin.Any? { contract { /* compiled contract */ }; /* compiled code */ }
}
FIR element: FirRegularClassImpl
FIR source kind: KtRealSourceElementKind

FIR element rendered:
public final [ResolvedTo(BODY_RESOLVE)] class Foo : R|kotlin/Any| {
    public final [ResolvedTo(BODY_RESOLVE)] fun test1([ResolvedTo(BODY_RESOLVE)] x: R|kotlin/String?|): R|kotlin/Any?|
        [R|Contract description]
         <
            Returns(NOT_NULL) -> x != null
        >


    public final [ResolvedTo(BODY_RESOLVE)] fun test10([ResolvedTo(BODY_RESOLVE)] x: R|kotlin/Any?|): R|kotlin/Any?|
        [R|Contract description]
         <
            Returns(TRUE) -> x is kotlin/Comparable<*> || x is kotlin/CharSequence
        >


    public final [ResolvedTo(BODY_RESOLVE)] fun test11([ResolvedTo(BODY_RESOLVE)] x: R|kotlin/Any?|): R|kotlin/Any?|
        [R|Contract description]
         <
            Returns(TRUE) -> x is kotlin/Comparable<*> && x is kotlin/CharSequence
        >


    public final [ResolvedTo(BODY_RESOLVE)] fun test12([ResolvedTo(BODY_RESOLVE)] x: R|kotlin/Any?|): R|kotlin/Any?|
        [R|Contract description]
         <
            Returns(TRUE) -> x is kotlin/Comparable<*> && x is kotlin/CharSequence || x is kotlin/Number
        >


    public final [ResolvedTo(BODY_RESOLVE)] fun test13([ResolvedTo(BODY_RESOLVE)] x: R|kotlin/Any?|): R|kotlin/Any?|
        [R|Contract description]
         <
            Returns(TRUE) -> x is kotlin/Comparable<*> || x !is kotlin/CharSequence && x !is kotlin/Number
        >


    public final [ResolvedTo(BODY_RESOLVE)] fun test2([ResolvedTo(BODY_RESOLVE)] x: R|kotlin/String?|): R|kotlin/Any?|
        [R|Contract description]
         <
            Returns(NOT_NULL) -> x is kotlin/String
        >


    public final [ResolvedTo(BODY_RESOLVE)] fun test3([ResolvedTo(BODY_RESOLVE)] x: R|kotlin/String?|): R|kotlin/Any?|
        [R|Contract description]
         <
            Returns(NOT_NULL) -> x !is kotlin/String
        >


    public final [ResolvedTo(BODY_RESOLVE)] fun test4([ResolvedTo(BODY_RESOLVE)] x: R|kotlin/String?|, [ResolvedTo(BODY_RESOLVE)] y: R|kotlin/String?|): R|kotlin/Any?|
        [R|Contract description]
         <
            Returns(TRUE) -> x != null && y != null
        >


    public final [ResolvedTo(BODY_RESOLVE)] fun test5([ResolvedTo(BODY_RESOLVE)] x: R|kotlin/Any?|): R|kotlin/Any?|
        [R|Contract description]
         <
            Returns(TRUE) -> x != null || x is kotlin/Any
        >


    public final [ResolvedTo(BODY_RESOLVE)] fun test6([ResolvedTo(BODY_RESOLVE)] x: R|kotlin/Any?|): R|kotlin/Any?|
        [R|Contract description]
         <
            Returns(TRUE) -> x is kotlin/String? && x != null
        >


    public final [ResolvedTo(BODY_RESOLVE)] fun test7([ResolvedTo(BODY_RESOLVE)] x: R|kotlin/Any?|): R|kotlin/Any?|
        [R|Contract description]
         <
            Returns(TRUE) -> x is kotlin/String? && x != null || x is kotlin/Int
        >


    public final [ResolvedTo(BODY_RESOLVE)] fun test8([ResolvedTo(BODY_RESOLVE)] x: R|kotlin/Any?|): R|kotlin/Any?|
        [R|Contract description]
         <
            Returns(TRUE) -> x is kotlin/String || x is kotlin/Int
        >


    public final [ResolvedTo(BODY_RESOLVE)] fun test9([ResolvedTo(BODY_RESOLVE)] x: R|kotlin/Any?|): R|kotlin/Any?|
        [R|Contract description]
         <
            Returns(TRUE) -> x is kotlin/String || x is kotlin/Int
        >


    public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Foo] constructor(): R|Foo|

}
