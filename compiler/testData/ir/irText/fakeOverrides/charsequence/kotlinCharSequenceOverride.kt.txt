abstract class A : CharSequence {
  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

}

abstract class B : Java1 {
  constructor() /* primary */ {
    super/*Java1*/()
    /* <init>() */

  }

}

class C : B {
  override val length: Int
    field = length
    override get

  constructor(length: Int) /* primary */ {
    super/*B*/()
    /* <init>() */

  }

  override operator fun get(index: Int): Char {
    return '1'
  }

}

abstract class D : Java1, Java2 {
  constructor() /* primary */ {
    super/*Java1*/()
    /* <init>() */

  }

}

class E : Java1, Java2 {
  constructor() /* primary */ {
    super/*Java1*/()
    /* <init>() */

  }

  override operator fun get(index: Int): Char {
    return '1'
  }

  override val length: Int
    override get(): Int {
      return 10
    }

}

abstract class F : KotlinInterface, CharSequence, CharSequence {
  override val length: Int
    field = length
    override get

  constructor(length: Int) /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  override fun chars(): IntStream {
    return CHECK_NOT_NULL<Nothing>(arg0 = null)
  }

  override fun codePoints(): IntStream {
    return CHECK_NOT_NULL<Nothing>(arg0 = null)
  }

  override operator fun get(index: Int): Char {
    return '1'
  }

  override fun subSequence(startIndex: Int, endIndex: Int): CharSequence {
    return CHECK_NOT_NULL<Nothing>(arg0 = null)
  }

}

abstract class G : Java1, KotlinInterface {
  constructor() /* primary */ {
    super/*Java1*/()
    /* <init>() */

  }

}

class H : Java1, KotlinInterface {
  constructor() /* primary */ {
    super/*Java1*/()
    /* <init>() */

  }

  override operator fun get(index: Any): Char {
    return '2'
  }

  override operator fun get(index: Int): Char {
    return '1'
  }

  override val length: Int
    override get(): Int {
      return 10
    }

}

abstract class I : CharSequence, CharSequence {
  override val length: Int
    field = length
    override get

  constructor(length: Int) /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  override fun chars(): IntStream {
    return CHECK_NOT_NULL<Nothing>(arg0 = null)
  }

  override fun codePoints(): IntStream {
    return CHECK_NOT_NULL<Nothing>(arg0 = null)
  }

  override operator fun get(index: Int): Char {
    return 'a'
  }

  override fun subSequence(startIndex: Int, endIndex: Int): CharSequence {
    return CHECK_NOT_NULL<Nothing>(arg0 = null)
  }

}

interface KotlinInterface {
  abstract fun get(index: Any): Char

}

fun test(b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I) {
  b.<get-length>() /*~> Unit */
  b.get(index = 1) /*~> Unit */
  b.get(index = 1) /*~> Unit */
  b.subSequence(startIndex = 1, endIndex = 2) /*~> Unit */
  c.<get-length>() /*~> Unit */
  c.get(index = 1) /*~> Unit */
  c.subSequence(startIndex = 1, endIndex = 2) /*~> Unit */
  d.<get-length>() /*~> Unit */
  d.get(index = 1) /*~> Unit */
  d.chars() /*~> Unit */
  e.<get-length>() /*~> Unit */
  e.get(index = 1) /*~> Unit */
  e.subSequence(startIndex = 1, endIndex = 2) /*~> Unit */
  f.<get-length>() /*~> Unit */
  f.length() /*~> Unit */
  f.get(index = 1) /*~> Unit */
  f.get(index = 1.2) /*~> Unit */
  g.<get-length>() /*~> Unit */
  g.get(index = 1) /*~> Unit */
  g.subSequence(startIndex = 1, endIndex = 2) /*~> Unit */
  h.<get-length>() /*~> Unit */
  h.get(index = 1) /*~> Unit */
  h.get(index = 1.2) /*~> Unit */
  h.subSequence(startIndex = 1, endIndex = 2) /*~> Unit */
  i.<get-length>() /*~> Unit */
  i.length() /*~> Unit */
  i.subSequence(startIndex = 1, endIndex = 2) /*~> Unit */
  i.get(index = 1) /*~> Unit */
}
