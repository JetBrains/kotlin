package

internal fun zz(/*0*/ b: Baz): kotlin.Int

internal interface Bar</*0*/ Q> : Foo<Q> {
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    internal open override /*1*/ /*fake_override*/ fun quux(/*0*/ p: Q, /*1*/ q: kotlin.Int = ...): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

internal abstract class Baz : Bar<kotlin.String> {
    public constructor Baz()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    internal open override /*1*/ /*fake_override*/ fun quux(/*0*/ p: kotlin.String, /*1*/ q: kotlin.Int = ...): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

internal interface Foo</*0*/ P> {
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    internal open fun quux(/*0*/ p: P, /*1*/ q: kotlin.Int = ...): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}
