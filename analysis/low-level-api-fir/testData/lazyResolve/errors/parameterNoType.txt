RAW_FIR:
FILE: [ResolvedTo(RAW_FIR)] parameterNoType.kt
    public sealed [ResolvedTo(RAW_FIR)] class A : R|kotlin/Any| {
        protected [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<R|kotlin/Any|>
        }

        internal abstract [ResolvedTo(RAW_FIR)] fun absFun([ResolvedTo(RAW_FIR)] xx: <ERROR TYPE REF: Incomplete code>): R|kotlin/Unit|

    }

IMPORTS:
FILE: [ResolvedTo(IMPORTS)] parameterNoType.kt
    public sealed [ResolvedTo(RAW_FIR)] class A : R|kotlin/Any| {
        protected [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<R|kotlin/Any|>
        }

        internal abstract [ResolvedTo(RAW_FIR)] fun absFun([ResolvedTo(RAW_FIR)] xx: <ERROR TYPE REF: Incomplete code>): R|kotlin/Unit|

    }

COMPILER_REQUIRED_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] parameterNoType.kt
    public sealed [ResolvedTo(RAW_FIR)] class A : R|kotlin/Any| {
        protected [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<R|kotlin/Any|>
        }

        internal abstract [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] fun absFun([ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] xx: <ERROR TYPE REF: Incomplete code>): R|kotlin/Unit|

    }

COMPANION_GENERATION:
FILE: [ResolvedTo(IMPORTS)] parameterNoType.kt
    public sealed [ResolvedTo(RAW_FIR)] class A : R|kotlin/Any| {
        protected [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<R|kotlin/Any|>
        }

        internal abstract [ResolvedTo(COMPANION_GENERATION)] fun absFun([ResolvedTo(COMPANION_GENERATION)] xx: <ERROR TYPE REF: Incomplete code>): R|kotlin/Unit|

    }

SUPER_TYPES:
FILE: [ResolvedTo(IMPORTS)] parameterNoType.kt
    public sealed [ResolvedTo(SUPER_TYPES)] class A : R|kotlin/Any| {
        protected [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<R|kotlin/Any|>
        }

        internal abstract [ResolvedTo(SUPER_TYPES)] fun absFun([ResolvedTo(SUPER_TYPES)] xx: <ERROR TYPE REF: Incomplete code>): R|kotlin/Unit|

    }

TYPES:
FILE: [ResolvedTo(IMPORTS)] parameterNoType.kt
    public sealed [ResolvedTo(TYPES)] class A : R|kotlin/Any| {
        protected [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<R|kotlin/Any|>
        }

        internal abstract [ResolvedTo(TYPES)] fun absFun([ResolvedTo(TYPES)] xx: <ERROR TYPE REF: Incomplete code>): R|kotlin/Unit|

    }

STATUS:
FILE: [ResolvedTo(IMPORTS)] parameterNoType.kt
    public sealed [ResolvedTo(STATUS)] class A : R|kotlin/Any| {
        protected [ResolvedTo(STATUS)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<R|kotlin/Any|>
        }

        internal abstract [ResolvedTo(STATUS)] fun absFun([ResolvedTo(STATUS)] xx: <ERROR TYPE REF: Incomplete code>): R|kotlin/Unit|

    }

EXPECT_ACTUAL_MATCHING:
FILE: [ResolvedTo(IMPORTS)] parameterNoType.kt
    public sealed [ResolvedTo(STATUS)] class A : R|kotlin/Any| {
        protected [ResolvedTo(STATUS)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<R|kotlin/Any|>
        }

        internal abstract [ResolvedTo(EXPECT_ACTUAL_MATCHING)] fun absFun([ResolvedTo(EXPECT_ACTUAL_MATCHING)] xx: <ERROR TYPE REF: Incomplete code>): R|kotlin/Unit|

    }

CONTRACTS:
FILE: [ResolvedTo(IMPORTS)] parameterNoType.kt
    public sealed [ResolvedTo(STATUS)] class A : R|kotlin/Any| {
        protected [ResolvedTo(STATUS)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<R|kotlin/Any|>
        }

        internal abstract [ResolvedTo(CONTRACTS)] fun absFun([ResolvedTo(CONTRACTS)] xx: <ERROR TYPE REF: Incomplete code>): R|kotlin/Unit|

    }

IMPLICIT_TYPES_BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] parameterNoType.kt
    public sealed [ResolvedTo(STATUS)] class A : R|kotlin/Any| {
        protected [ResolvedTo(STATUS)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<R|kotlin/Any|>
        }

        internal abstract [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] fun absFun([ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] xx: <ERROR TYPE REF: Incomplete code>): R|kotlin/Unit|

    }

CONSTANT_EVALUATION:
FILE: [ResolvedTo(IMPORTS)] parameterNoType.kt
    public sealed [ResolvedTo(STATUS)] class A : R|kotlin/Any| {
        protected [ResolvedTo(STATUS)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<R|kotlin/Any|>
        }

        internal abstract [ResolvedTo(CONSTANT_EVALUATION)] fun absFun([ResolvedTo(CONSTANT_EVALUATION)] xx: <ERROR TYPE REF: Incomplete code>): R|kotlin/Unit|

    }

ANNOTATION_ARGUMENTS:
FILE: [ResolvedTo(IMPORTS)] parameterNoType.kt
    public sealed [ResolvedTo(STATUS)] class A : R|kotlin/Any| {
        protected [ResolvedTo(STATUS)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<R|kotlin/Any|>
        }

        internal abstract [ResolvedTo(ANNOTATION_ARGUMENTS)] fun absFun([ResolvedTo(ANNOTATION_ARGUMENTS)] xx: <ERROR TYPE REF: Incomplete code>): R|kotlin/Unit|

    }

BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] parameterNoType.kt
    public sealed [ResolvedTo(STATUS)] class A : R|kotlin/Any| {
        protected [ResolvedTo(STATUS)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<R|kotlin/Any|>
        }

        internal abstract [ResolvedTo(BODY_RESOLVE)] fun absFun([ResolvedTo(BODY_RESOLVE)] xx: <ERROR TYPE REF: Incomplete code>): R|kotlin/Unit|

    }

FILE RAW TO BODY:
FILE: [ResolvedTo(BODY_RESOLVE)] parameterNoType.kt
    public sealed [ResolvedTo(BODY_RESOLVE)] class A : R|kotlin/Any| {
        protected [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=A] constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

        internal abstract [ResolvedTo(BODY_RESOLVE)] fun absFun([ResolvedTo(BODY_RESOLVE)] xx: <ERROR TYPE REF: Incomplete code>): R|kotlin/Unit|

    }
