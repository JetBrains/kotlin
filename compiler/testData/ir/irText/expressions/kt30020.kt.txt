abstract class AML : MutableList<Int> {
  inner class Inner {
    constructor() /* primary */ {
      super/*Any*/()
      /* <init>() */

    }

    fun testOuterThis() {
      plusAssign<Int>(/* <this> = <this>, */ element = 300)
    }

  }

  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  fun testExplicitThis() {
    plusAssign<Int>(/* <this> = <this>, */ element = 200)
  }

}

interface X {
  abstract fun f(): MutableList<Any>

  abstract val xs: MutableList<Any>
    abstract get

}

fun test(x: X, nx: X?) {
  { // BLOCK
    val tmp_0: X = x
    plusAssign<Int>(/* <this> = tmp_0.<get-xs>(), */ element = 1)
  }
  plusAssign<Int>(/* <this> = x.f(), */ element = 2)
  plusAssign<Int>(/* <this> = x.<get-xs>() as MutableList<Int>, */ element = 3)
  plusAssign<Int>(/* <this> = x.f() as MutableList<Int>, */ element = 4)
  plusAssign<Int>(/* <this> = CHECK_NOT_NULL<MutableList<Any>>(arg0 = { // BLOCK
    val tmp_1: X? = nx
    when {
      EQEQ(arg0 = tmp_1, arg1 = null) -> null
      else -> tmp_1.<get-xs>()
    }
  }), */ element = 5)
  plusAssign<Int>(/* <this> = CHECK_NOT_NULL<MutableList<Any>>(arg0 = { // BLOCK
    val tmp_2: X? = nx
    when {
      EQEQ(arg0 = tmp_2, arg1 = null) -> null
      else -> tmp_2.f()
    }
  }), */ element = 6)
}

fun MutableList<Any>.testExtensionReceiver() {
  plusAssign<Int>(/* <this> = <this>, */ element = 100)
}

