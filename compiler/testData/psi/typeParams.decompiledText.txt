// IntelliJ API Decompiler stub source generated from a class file
// Implementation of methods is not available

package test

public final class TypeParams<in T1 : kotlin.Any, out T2 : kotlin.String, T3 : (kotlin.Int) -> kotlin.Int, T4, T5, T6 : T5, T7 : T6> public constructor() where T1 : kotlin.Cloneable?, T1 : java.io.Serializable {
    public final val <G1> G1.withOwnParam: G1 /* compiled code */ /* hasBackingField: false */
        public final get() { /* compiled code */ }

    public final val <G1 : kotlin.Int?> G1.withOwnBoundedParam: G1 /* compiled code */ /* hasBackingField: false */
        public final get() { /* compiled code */ }

    public final val <G1 : T4> G1.withOwnBoundedParamByOther: G1 /* compiled code */ /* hasBackingField: false */
        public final get() { /* compiled code */ }

    public final val useSomeParam: T2 /* compiled code */ /* hasBackingField: false */
        public final get() { /* compiled code */ }

    public final fun useParams(p1: T1, p2: (T2) -> kotlin.Unit, p3: T3, p4: T4, P5: T5): kotlin.Unit { /* compiled code */ }

    public final fun useParamsInOtherOrder(p1: T3, p2: T3, p3: T1, p4: T5, P5: T1): kotlin.Unit { /* compiled code */ }

    public final fun useParamsInTypeArg(p1: kotlin.collections.List<T1>, p2: kotlin.collections.Map<T4?, T5?>, p3: T4.(T2, T3) -> T1): kotlin.Unit { /* compiled code */ }

    public final fun <G1, G2, G3> withOwnParams(p1: G1, p2: G2, p3: G3, p4: T1, p5: (T2) -> kotlin.Unit): kotlin.Unit { /* compiled code */ }

    public final fun <G1, G2 : G1, G3 : kotlin.String, G4 : G1> withOwnParamsAndTypeConstraints(p1: G1, p2: G2, p3: G3, p4: T1, p5: (T2) -> kotlin.Unit): kotlin.Unit where G3 : java.io.Serializable? { /* compiled code */ }

    public final fun <T1, T2, T3> withOwnParamsClashing(p1: T1, p2: T2, p3: T3, p4: T4, p5: T5): kotlin.Unit { /* compiled code */ }

    public final fun <T1> T1.withOwnParamExtension(p: T1): kotlin.Unit { /* compiled code */ }

    public final inline fun <reified G, reified T> f(g: G, body: (G) -> T): T { /* compiled code */ }
}
