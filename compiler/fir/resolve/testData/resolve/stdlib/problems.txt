FILE: problems.kt
    public final val sb: R|java/lang/StringBuilder| = R|java/lang/StringBuilder.StringBuilder|()
        public get(): R|java/lang/StringBuilder|
    public final val o: R|kotlin/Any| = object : R|kotlin/Any| {
        private constructor(): R|kotlin/Any| {
            super<R|kotlin/Any|>()
        }

        public final val name: R|kotlin/String| = String(123)
            public get(): R|kotlin/String|

        public final fun test(): R|kotlin/Unit| {
            <Unresolved name: name>#
        }

    }

        public get(): R|kotlin/Any|
    public final fun test(): R|kotlin/Unit| {
        local final class Local : R|kotlin/Any| {
            public constructor(): R|Local| {
                super<R|kotlin/Any|>()
            }

        }

        <Unresolved name: Local>#()
    }
    public final val R|kotlin/Any|.bar: R|kotlin/String|
        public get(): R|kotlin/String| {
            ^ String(456)
        }
    public final val R|kotlin/String|.bar: R|kotlin/String|
        public get(): R|kotlin/String| {
            ^ String(987)
        }
    public final val t: <ERROR TYPE REF: Ambiguity: bar, [/bar, /bar]> = String().<Ambiguity: bar, [/bar, /bar]>#
        public get(): <ERROR TYPE REF: Ambiguity: bar, [/bar, /bar]>
    public final val p: R|kotlin/Pair<kotlin/Int, kotlin/String>| = R|kotlin/Pair.Pair|<R|kotlin/Int|, R|kotlin/String|>(Int(0), String())
        public get(): R|kotlin/Pair<kotlin/Int, kotlin/String>|
    public final class Base<T> : R|kotlin/Any| {
        public constructor<T>(x: R|T|): R|Base<T>| {
            super<R|kotlin/Any|>()
        }

        public final val x: R|T| = R|<local>/x|
            public get(): R|T|

    }
    public final class Derived : R|Base<kotlin/Int>| {
        public constructor(): R|Derived| {
            super<R|Base<kotlin/Int>|>(Int(10))
        }

    }
    public final val xx: R|kotlin/Int| = R|/Derived.Derived|().R|/Base.x|.R|kotlin/Int.plus|(Int(1))
        public get(): R|kotlin/Int|
    public final val t: R|kotlin/Nothing| = throw R|java/lang/AssertionError.AssertionError|(String())
        public get(): R|kotlin/Nothing|
    public abstract interface A : R|kotlin/Any| {
    }
    public abstract interface B : R|kotlin/Any| {
    }
    public abstract interface C : R|A| {
    }
    public final class BC : R|B|, R|C| {
        public constructor(): R|BC| {
            super<R|kotlin/Any|>()
        }

    }
    public final fun R|C|.analyze(): R|kotlin/Unit| {
    }
    public final inline fun <reified T : R|A|, R|B|> R|T|.analyze(): R|kotlin/Unit| {
    }
    public final fun testAnalyze(): R|kotlin/Unit| {
        R|/BC.BC|().<Ambiguity: analyze, [/analyze, /analyze]>#()
    }
