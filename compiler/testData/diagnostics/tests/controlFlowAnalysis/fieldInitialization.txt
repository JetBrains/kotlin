package

@kotlin.contracts.ExperimentalContracts public inline fun crossinlineMe(/*0*/ crossinline block: () -> kotlin.Unit): kotlin.Unit
    CallsInPlace(block, EXACTLY_ONCE)

@kotlin.contracts.ExperimentalContracts public inline fun inlineMe(/*0*/ block: () -> kotlin.Unit): kotlin.Unit
    CallsInPlace(block, EXACTLY_ONCE)

@kotlin.Suppress(names = {"NOTHING_TO_INLINE"}) @kotlin.contracts.ExperimentalContracts public inline fun noinlineMe(/*0*/ noinline block: () -> kotlin.Unit): kotlin.Unit
    CallsInPlace(block, EXACTLY_ONCE)

@kotlin.contracts.ExperimentalContracts public fun notinline(/*0*/ block: () -> kotlin.Unit): kotlin.Unit
    CallsInPlace(block, EXACTLY_ONCE)

@kotlin.contracts.ExperimentalContracts public final class Test {
    public constructor Test()
    public final val a: kotlin.String
    public final val b: kotlin.String
    public final val c: kotlin.String
    public final val d: kotlin.String
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

@kotlin.contracts.ExperimentalContracts public final class Test1 {
    public constructor Test1()
    public final val a: kotlin.String = ""
    public final val b: kotlin.String = ""
    public final val c: kotlin.String = ""
    public final val d: kotlin.String = ""
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

@kotlin.contracts.ExperimentalContracts public final class Test2 {
    public constructor Test2()
    public final val a: kotlin.String = ""
    public final val b: kotlin.String = ""
    public final val c: kotlin.String = ""
    public final val d: kotlin.String = ""
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

@kotlin.contracts.ExperimentalContracts public final class Test4 {
    public constructor Test4()
    public final val a: kotlin.String = ""
    public final val b: kotlin.String = ""
    public final val c: kotlin.String = ""
    public final val d: kotlin.String = ""
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

@kotlin.contracts.ExperimentalContracts public final class Test5 {
    public constructor Test5()
    public final val a: kotlin.String
    public final val aInit: kotlin.Unit
    public final val b: kotlin.String
    public final val bInit: kotlin.Unit
    public final val c: kotlin.String
    public final val cInit: kotlin.Unit
    public final val d: kotlin.String
    public final val dInit: kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}
