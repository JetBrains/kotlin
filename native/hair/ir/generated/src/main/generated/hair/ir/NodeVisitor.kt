package hair.ir

import hair.ir.nodes.*

abstract class NodeVisitor<R> : BuiltinNodeVisitor<R>() {
    open fun visitNoValue(node: NoValue): R = visitNode(node)
    open fun visitPlaceholder(node: Placeholder): R = visitNode(node)
    open fun visitUse(node: Use): R = visitSpinal(node)
    open fun visitProxyProjection(node: ProxyProjection): R = visitNode(node)
    open fun visitGoto(node: Goto): R = visitSingleExit(node)
    open fun visitIf(node: If): R = visitTwoExits(node)
    open fun visitHalt(node: Halt): R = visitNoExit(node)
    open fun visitBlock(node: Block): R = visitControlMerge(node)
    open fun visitBBlock(node: BBlock): R = visitBlock(node)
    open fun visitXBlock(node: XBlock): R = visitBlock(node)
    open fun visitThrow(node: Throw): R = visitThrowExit(node)
    open fun visitCatch(node: Catch): R = visitNode(node)
    open fun visitVarOp(node: VarOp): R = visitSpinal(node)
    open fun visitReadVar(node: ReadVar): R = visitVarOp(node)
    open fun visitAssignVar(node: AssignVar): R = visitVarOp(node)
    open fun visitPhi(node: Phi): R = visitNode(node)
    open fun visitParam(node: Param): R = visitNode(node)
    open fun visitConstInt(node: ConstInt): R = visitNode(node)
    open fun visitConstFloat(node: ConstFloat): R = visitNode(node)
    open fun visitArithmeticOp(node: ArithmeticOp): R = visitNode(node)
    open fun visitBinaryOp(node: BinaryOp): R = visitArithmeticOp(node)
    open fun visitAdd(node: Add): R = visitBinaryOp(node)
    open fun visitSub(node: Sub): R = visitBinaryOp(node)
    open fun visitMul(node: Mul): R = visitBinaryOp(node)
    open fun visitDiv(node: Div): R = visitBinaryOp(node)
    open fun visitRem(node: Rem): R = visitBinaryOp(node)
    open fun visitAnd(node: And): R = visitBinaryOp(node)
    open fun visitOr(node: Or): R = visitBinaryOp(node)
    open fun visitXor(node: Xor): R = visitBinaryOp(node)
    open fun visitShl(node: Shl): R = visitBinaryOp(node)
    open fun visitShr(node: Shr): R = visitBinaryOp(node)
    open fun visitUshr(node: Ushr): R = visitBinaryOp(node)
    open fun visitNew(node: New): R = visitSpinal(node)
    open fun visitPinnedMemoryOp(node: PinnedMemoryOp): R = visitSpinal(node)
    open fun visitPinnedInstanceFieldOp(node: PinnedInstanceFieldOp): R = visitPinnedMemoryOp(node)
    open fun visitPinnedGlobalFieldOp(node: PinnedGlobalFieldOp): R = visitPinnedMemoryOp(node)
    open fun visitReadFieldPinned(node: ReadFieldPinned): R = visitPinnedInstanceFieldOp(node)
    open fun visitReadGlobalPinned(node: ReadGlobalPinned): R = visitPinnedGlobalFieldOp(node)
    open fun visitWriteField(node: WriteField): R = visitPinnedInstanceFieldOp(node)
    open fun visitWriteGlobal(node: WriteGlobal): R = visitPinnedGlobalFieldOp(node)
    open fun visitFloatingMemoryRead(node: FloatingMemoryRead): R = visitNode(node)
    open fun visitReadFieldFloating(node: ReadFieldFloating): R = visitFloatingMemoryRead(node)
    open fun visitReadGlobalFloating(node: ReadGlobalFloating): R = visitFloatingMemoryRead(node)
    open fun visitIsInstance(node: IsInstance): R = visitSpinal(node)
    open fun visitCast(node: Cast): R = visitSpinal(node)
    open fun visitIndistinctMemory(node: IndistinctMemory): R = visitNode(node)
    open fun visitUnknown(node: Unknown): R = visitNode(node)
    open fun visitEscape(node: Escape): R = visitProxyProjection(node)
    open fun visitOverwrite(node: Overwrite): R = visitProxyProjection(node)
    open fun visitNeqFilter(node: NeqFilter): R = visitProxyProjection(node)
    open fun visitStaticCall(node: StaticCall): R = visitThrowingSpinal(node)
    open fun visitReturn(node: Return): R = visitNoExit(node)
}
