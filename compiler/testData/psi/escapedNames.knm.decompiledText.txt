// IntelliJ API Decompiler stub source generated from a class file
// Implementation of methods is not available

package `one two`.`three four`

public typealias `Top Level TypeAlias`<`Type Parameter`> = `one two`.`three four`.`Top Level Class`<`Type Parameter`>

@kotlin.annotation.Target public final annotation class `Annotation Class` public constructor() : kotlin.Annotation {
}

@`one two`.`three four`.`Annotation Class` public final class `Top Level Class`<`Type Parameter` : `one two`.`three four`.`Top Level Object`.`Member Level Interface`> {
    public constructor(`parameter name`: `one two`.`three four`.`Top Level Object`) { /* compiled code */ }

    public final var `one two`.`three four`.`Top Level Class`<`Type Parameter`> /* from: `one two`.`three four`.`Top Level Class`.`Member Level TypeAlias`<`Type Parameter`> */.`member property`: `one two`.`three four`.`Top Level Class`<`Type Parameter`>? /* compiled code */
        public final get() { /* compiled code */ }
        public final set(value: `one two`.`three four`.`Top Level Class`<`Type Parameter`>?) { /* compiled code */ }

    context(`context name`: `one two`.`three four`.`Top Level Class`<`Type Parameter`> /* from: `one two`.`three four`.`Top Level Class`.`Member Level TypeAlias`<`Type Parameter`> */) public final fun `one two`.`three four`.`Top Level Object`.`Member Level Interface`.`member function`(`parameter name`: `one two`.`three four`.`Top Level Class`<`Type Parameter`>): kotlin.Unit { /* compiled code */ }

    @`one two`.`three four`.`Annotation Class` public typealias `Member Level TypeAlias`<T> = `one two`.`three four`.`Top Level Class`<T>
}

public interface `Top Level Interface` {
}

public object `Top Level Object` : `one two`.`three four`.`Top Level Interface` {
    public interface `Member Level Interface` {
    }
}

@`one two`.`three four`.`Annotation Class` public final enum class `Enum Class` private constructor() : kotlin.Enum<`one two`.`three four`.`Enum Class`> {
    @`one two`.`three four`.`Annotation Class` `Enum Entry`;
}
