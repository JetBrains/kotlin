/*
 * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.idea.inspections;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.util.KtTestUtil;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@RunWith(JUnit3RunnerWithInners.class)
public class HLLocalInspectionTestGenerated extends AbstractHLLocalInspectionTest {
    @TestMetadata("idea/testData/inspectionsLocal/redundantVisibilityModifier")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class RedundantVisibilityModifier extends AbstractHLLocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        public void testAllFilesPresentInRedundantVisibilityModifier() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("idea/testData/inspectionsLocal/redundantVisibilityModifier"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), null, true);
        }

        @TestMetadata("internalInPrivateClass.kt")
        public void testInternalInPrivateClass() throws Exception {
            runTest("idea/testData/inspectionsLocal/redundantVisibilityModifier/internalInPrivateClass.kt");
        }

        @TestMetadata("overridePropertySetter.kt")
        public void testOverridePropertySetter() throws Exception {
            runTest("idea/testData/inspectionsLocal/redundantVisibilityModifier/overridePropertySetter.kt");
        }

        @TestMetadata("publicOverrideProtectedSetter.kt")
        public void testPublicOverrideProtectedSetter() throws Exception {
            runTest("idea/testData/inspectionsLocal/redundantVisibilityModifier/publicOverrideProtectedSetter.kt");
        }

        @TestMetadata("publicOverrideProtectedSetter2.kt")
        public void testPublicOverrideProtectedSetter2() throws Exception {
            runTest("idea/testData/inspectionsLocal/redundantVisibilityModifier/publicOverrideProtectedSetter2.kt");
        }

        @TestMetadata("publicOverrideProtectedSetter3.kt")
        public void testPublicOverrideProtectedSetter3() throws Exception {
            runTest("idea/testData/inspectionsLocal/redundantVisibilityModifier/publicOverrideProtectedSetter3.kt");
        }

        @TestMetadata("publicOverrideProtectedSetter4.kt")
        public void testPublicOverrideProtectedSetter4() throws Exception {
            runTest("idea/testData/inspectionsLocal/redundantVisibilityModifier/publicOverrideProtectedSetter4.kt");
        }

        @TestMetadata("publicOverrideProtectedSetter5.kt")
        public void testPublicOverrideProtectedSetter5() throws Exception {
            runTest("idea/testData/inspectionsLocal/redundantVisibilityModifier/publicOverrideProtectedSetter5.kt");
        }

        @TestMetadata("publicOverrideProtectedSetter6.kt")
        public void testPublicOverrideProtectedSetter6() throws Exception {
            runTest("idea/testData/inspectionsLocal/redundantVisibilityModifier/publicOverrideProtectedSetter6.kt");
        }
    }

    @TestMetadata("idea/idea-fir/testData/inspectionsLocal")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class InspectionsLocal extends AbstractHLLocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        public void testAllFilesPresentInInspectionsLocal() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("idea/idea-fir/testData/inspectionsLocal"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), null, true);
        }

        @TestMetadata("idea/idea-fir/testData/inspectionsLocal/redundantVisibilityModifierFir")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class RedundantVisibilityModifierFir extends AbstractHLLocalInspectionTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            public void testAllFilesPresentInRedundantVisibilityModifierFir() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("idea/idea-fir/testData/inspectionsLocal/redundantVisibilityModifierFir"), Pattern.compile("^([\\w\\-_]+)\\.(kt|kts)$"), null, true);
            }

            @TestMetadata("publicFunInPublicClass.kt")
            public void testPublicFunInPublicClass() throws Exception {
                runTest("idea/idea-fir/testData/inspectionsLocal/redundantVisibilityModifierFir/publicFunInPublicClass.kt");
            }

            @TestMetadata("publicValInPublicClass.kt")
            public void testPublicValInPublicClass() throws Exception {
                runTest("idea/idea-fir/testData/inspectionsLocal/redundantVisibilityModifierFir/publicValInPublicClass.kt");
            }
        }
    }
}
