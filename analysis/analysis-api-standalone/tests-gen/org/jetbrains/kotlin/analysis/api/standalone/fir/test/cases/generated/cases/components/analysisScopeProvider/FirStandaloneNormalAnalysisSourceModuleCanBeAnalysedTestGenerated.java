/*
 * Copyright 2010-2024 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.analysis.api.standalone.fir.test.cases.generated.cases.components.analysisScopeProvider;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.util.KtTestUtil;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.kotlin.analysis.api.standalone.fir.test.configurators.AnalysisApiFirStandaloneModeTestConfiguratorFactory;
import org.jetbrains.kotlin.analysis.test.framework.test.configurators.AnalysisApiTestConfiguratorFactoryData;
import org.jetbrains.kotlin.analysis.test.framework.test.configurators.AnalysisApiTestConfigurator;
import org.jetbrains.kotlin.analysis.test.framework.test.configurators.TestModuleKind;
import org.jetbrains.kotlin.analysis.test.framework.test.configurators.FrontendKind;
import org.jetbrains.kotlin.analysis.test.framework.test.configurators.AnalysisSessionMode;
import org.jetbrains.kotlin.analysis.test.framework.test.configurators.AnalysisApiMode;
import org.jetbrains.kotlin.analysis.api.impl.base.test.cases.components.analysisScopeProvider.AbstractCanBeAnalysedTest;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.analysis.api.GenerateAnalysisApiTestsKt}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("analysis/analysis-api/testData/components/analysisScopeProvider/canBeAnalysed")
@TestDataPath("$PROJECT_ROOT")
public class FirStandaloneNormalAnalysisSourceModuleCanBeAnalysedTestGenerated extends AbstractCanBeAnalysedTest {
  @NotNull
  @Override
  public AnalysisApiTestConfigurator getConfigurator() {
    return AnalysisApiFirStandaloneModeTestConfiguratorFactory.INSTANCE.createConfigurator(
      new AnalysisApiTestConfiguratorFactoryData(
        FrontendKind.Fir,
        TestModuleKind.Source,
        AnalysisSessionMode.Normal,
        AnalysisApiMode.Standalone
      )
    );
  }

  @Test
  public void testAllFilesPresentInCanBeAnalysed() {
    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("analysis/analysis-api/testData/components/analysisScopeProvider/canBeAnalysed"), Pattern.compile("^(.+)\\.kt$"), null, true);
  }

  @Test
  @TestMetadata("appSourceElement_dependencyLibraryModule.kt")
  public void testAppSourceElement_dependencyLibraryModule() {
    runTest("analysis/analysis-api/testData/components/analysisScopeProvider/canBeAnalysed/appSourceElement_dependencyLibraryModule.kt");
  }

  @Test
  @TestMetadata("appSourceElement_dependencySourceModule.kt")
  public void testAppSourceElement_dependencySourceModule() {
    runTest("analysis/analysis-api/testData/components/analysisScopeProvider/canBeAnalysed/appSourceElement_dependencySourceModule.kt");
  }

  @Test
  @TestMetadata("appSourceElement_transitiveDependencyLibraryModule.kt")
  public void testAppSourceElement_transitiveDependencyLibraryModule() {
    runTest("analysis/analysis-api/testData/components/analysisScopeProvider/canBeAnalysed/appSourceElement_transitiveDependencyLibraryModule.kt");
  }

  @Test
  @TestMetadata("appSourceElement_transitiveDependencySourceModule.kt")
  public void testAppSourceElement_transitiveDependencySourceModule() {
    runTest("analysis/analysis-api/testData/components/analysisScopeProvider/canBeAnalysed/appSourceElement_transitiveDependencySourceModule.kt");
  }

  @Test
  @TestMetadata("appSourceElement_unrelatedLibraryModule.kt")
  public void testAppSourceElement_unrelatedLibraryModule() {
    runTest("analysis/analysis-api/testData/components/analysisScopeProvider/canBeAnalysed/appSourceElement_unrelatedLibraryModule.kt");
  }

  @Test
  @TestMetadata("appSourceElement_unrelatedSourceModule.kt")
  public void testAppSourceElement_unrelatedSourceModule() {
    runTest("analysis/analysis-api/testData/components/analysisScopeProvider/canBeAnalysed/appSourceElement_unrelatedSourceModule.kt");
  }

  @Test
  @TestMetadata("blockCodeFragmentElement_contextSourceModule.kt")
  public void testBlockCodeFragmentElement_contextSourceModule() {
    runTest("analysis/analysis-api/testData/components/analysisScopeProvider/canBeAnalysed/blockCodeFragmentElement_contextSourceModule.kt");
  }

  @Test
  @TestMetadata("dependencyLibraryElement_appSourceModule.kt")
  public void testDependencyLibraryElement_appSourceModule() {
    runTest("analysis/analysis-api/testData/components/analysisScopeProvider/canBeAnalysed/dependencyLibraryElement_appSourceModule.kt");
  }

  @Test
  @TestMetadata("dependencySourceElement_appSourceModule.kt")
  public void testDependencySourceElement_appSourceModule() {
    runTest("analysis/analysis-api/testData/components/analysisScopeProvider/canBeAnalysed/dependencySourceElement_appSourceModule.kt");
  }

  @Test
  @TestMetadata("expressionCodeFragmentElement_contextSourceModule.kt")
  public void testExpressionCodeFragmentElement_contextSourceModule() {
    runTest("analysis/analysis-api/testData/components/analysisScopeProvider/canBeAnalysed/expressionCodeFragmentElement_contextSourceModule.kt");
  }

  @Test
  @TestMetadata("transitiveDependencyLibraryElement_appSourceModule.kt")
  public void testTransitiveDependencyLibraryElement_appSourceModule() {
    runTest("analysis/analysis-api/testData/components/analysisScopeProvider/canBeAnalysed/transitiveDependencyLibraryElement_appSourceModule.kt");
  }

  @Test
  @TestMetadata("transitiveDependencySourceElement_appSourceModule.kt")
  public void testTransitiveDependencySourceElement_appSourceModule() {
    runTest("analysis/analysis-api/testData/components/analysisScopeProvider/canBeAnalysed/transitiveDependencySourceElement_appSourceModule.kt");
  }
}
