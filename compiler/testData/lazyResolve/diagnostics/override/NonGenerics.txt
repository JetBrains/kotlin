namespace <root>

// <namespace name="override">
namespace override

// <namespace name="normal">
namespace normal

internal abstract class override.normal.MyAbstractClass : jet.Any {
    public final /*constructor*/ fun <init>(): override.normal.MyAbstractClass
    internal abstract fun bar(): jet.Tuple0
    internal abstract val prr: jet.Tuple0
}
internal final class override.normal.MyChildClass : override.normal.MyClass {
    public final /*constructor*/ fun <init>(): override.normal.MyChildClass
    internal open override /*1*/ fun bar(): jet.Tuple0
    internal open override /*1*/ fun foo(): jet.Tuple0
    internal open override /*1*/ val pr: jet.Tuple0
    internal open override /*1*/ val prr: jet.Tuple0
}
internal final class override.normal.MyChildClass1 : override.normal.MyClass {
    public final /*constructor*/ fun <init>(): override.normal.MyChildClass1
    internal open override /*1*/ fun bar(): jet.Tuple0
    internal final override /*1*/ fun foo(): jet.Tuple0
    internal final override /*1*/ val pr: jet.Tuple0
    internal open override /*1*/ val prr: jet.Tuple0
}
internal open class override.normal.MyClass : override.normal.MyTrait, override.normal.MyAbstractClass {
    public final /*constructor*/ fun <init>(): override.normal.MyClass
    internal open override /*1*/ fun bar(): jet.Tuple0
    internal open override /*1*/ fun foo(): jet.Tuple0
    internal open override /*1*/ val pr: jet.Tuple0
    internal open override /*1*/ val prr: jet.Tuple0
}
internal final class override.normal.MyIllegalClass : override.normal.MyTrait, override.normal.MyAbstractClass {
    public final /*constructor*/ fun <init>(): override.normal.MyIllegalClass
    internal abstract override /*1*/ fun bar(): jet.Tuple0
    internal abstract override /*1*/ fun foo(): jet.Tuple0
    internal abstract override /*1*/ val pr: jet.Tuple0
    internal abstract override /*1*/ val prr: jet.Tuple0
}
internal final class override.normal.MyIllegalClass2 : override.normal.MyTrait, override.normal.MyAbstractClass {
    public final /*constructor*/ fun <init>(): override.normal.MyIllegalClass2
    internal abstract override /*1*/ fun bar(): jet.Tuple0
    internal open override /*1*/ fun foo(): jet.Tuple0
    internal open override /*1*/ val pr: jet.Tuple0
    internal open override /*1*/ val prr: jet.Tuple0
}
internal final class override.normal.MyIllegalClass3 : override.normal.MyTrait, override.normal.MyAbstractClass {
    public final /*constructor*/ fun <init>(): override.normal.MyIllegalClass3
    internal open override /*1*/ fun bar(): jet.Tuple0
    internal abstract override /*1*/ fun foo(): jet.Tuple0
    internal open override /*1*/ val pr: jet.Tuple0
    internal open override /*1*/ val prr: jet.Tuple0
}
internal final class override.normal.MyIllegalClass4 : override.normal.MyTrait, override.normal.MyAbstractClass {
    public final /*constructor*/ fun <init>(): override.normal.MyIllegalClass4
    internal abstract override /*1*/ fun bar(): jet.Tuple0
    internal final override /*1*/ fun foo(): jet.Tuple0
    internal open fun other(): jet.Tuple0
    internal open val otherPr: jet.Int
    internal final override /*1*/ val pr: jet.Tuple0
    internal abstract override /*1*/ val prr: jet.Tuple0
}
internal abstract trait override.normal.MyTrait : jet.Any {
    internal abstract fun foo(): jet.Tuple0
    internal abstract val pr: jet.Tuple0
}
// </namespace name="normal">
// </namespace name="override">
