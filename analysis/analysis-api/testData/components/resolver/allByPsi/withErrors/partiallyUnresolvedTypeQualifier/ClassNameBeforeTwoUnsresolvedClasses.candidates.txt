KtFile: 'ClassNameBeforeTwoUnsresolvedClasses.kt'
  NO_CANDIDATES

KtPackageDirective(0,0): ''
  NO_CANDIDATES

KtImportList(0,0): ''
  NO_CANDIDATES

KtClass(1,10): 'class Foo'
  NO_CANDIDATES

KtClass(12,49): 'class C {'
  NO_CANDIDATES

KtClassBody(20,49): '{'
  NO_CANDIDATES

KtProperty(26,47): 'val prop: Foo.Bar.Baz'
  NO_CANDIDATES

KtTypeReference(36,47): 'Foo.Bar.Baz'
  NO_CANDIDATES

KtUserType(36,47): 'Foo.Bar.Baz'
  NO_CANDIDATES

KtUserType(36,43): 'Foo.Bar'
  NO_CANDIDATES

KtUserType(36,39): 'Foo'
  NO_CANDIDATES

KtNameReferenceExpression(36,39): 'Foo'
  NO_CANDIDATES

KtNameReferenceExpression(40,43): 'Bar'
  NO_CANDIDATES

KtNameReferenceExpression(44,47): 'Baz'
  NO_CANDIDATES

KtNamedFunction(51,99): 'fun testFun() {'
  NO_CANDIDATES

KtParameterList(62,64): '()'
  NO_CANDIDATES

KtBlockExpression(65,99): '{'
  NO_CANDIDATES

KtProperty(71,97): 'val localProp: Foo.Bar.Baz'
  NO_CANDIDATES

KtTypeReference(86,97): 'Foo.Bar.Baz'
  NO_CANDIDATES

KtUserType(86,97): 'Foo.Bar.Baz'
  NO_CANDIDATES

KtUserType(86,93): 'Foo.Bar'
  NO_CANDIDATES

KtUserType(86,89): 'Foo'
  NO_CANDIDATES

KtNameReferenceExpression(86,89): 'Foo'
  NO_CANDIDATES

KtNameReferenceExpression(90,93): 'Bar'
  NO_CANDIDATES

KtNameReferenceExpression(94,97): 'Baz'
  NO_CANDIDATES

KtNamedFunction(101,137): 'fun <T> take(action: (T) -> Unit) {}'
  NO_CANDIDATES

KtTypeParameterList(105,108): '<T>'
  NO_CANDIDATES

KtTypeParameter(106,107): 'T'
  NO_CANDIDATES

KtParameterList(113,134): '(action: (T) -> Unit)'
  NO_CANDIDATES

KtParameter(114,133): 'action: (T) -> Unit'
  NO_CANDIDATES

KtTypeReference(122,133): '(T) -> Unit'
  NO_CANDIDATES

KtFunctionType(122,133): '(T) -> Unit'
  NO_CANDIDATES

KtParameterList(122,125): '(T)'
  NO_CANDIDATES

KtParameter(123,124): 'T'
  NO_CANDIDATES

KtTypeReference(123,124): 'T'
  NO_CANDIDATES

KtUserType(123,124): 'T'
  NO_CANDIDATES

KtNameReferenceExpression(123,124): 'T'
  NO_CANDIDATES

KtTypeReference(129,133): 'Unit'
  NO_CANDIDATES

KtUserType(129,133): 'Unit'
  NO_CANDIDATES

KtNameReferenceExpression(129,133): 'Unit'
  NO_CANDIDATES

KtBlockExpression(135,137): '{}'
  NO_CANDIDATES

KtProperty(139,190): 'val prop = take {'
  NO_CANDIDATES

KtCallExpression(150,190): 'take {'
  KaInapplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        {
            lambdaParam: Foo.Bar.Baz ->
        } -> (KaVariableSignature:
          name = action
          receiverType = null
          returnType = (ERROR CLASS: Cannot infer argument for type parameter T) -> kotlin.Unit
          symbol = action: (T) -> kotlin.Unit
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = /take(action: (T) -> kotlin.Unit): kotlin.Unit
          valueParameters = [
            KaVariableSignature:
              name = action
              receiverType = null
              returnType = (ERROR CLASS: Cannot infer argument for type parameter T) -> kotlin.Unit
              symbol = action: (T) -> kotlin.Unit
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = /take
      typeArgumentsMapping = {
        T -> (ERROR CLASS: Cannot infer argument for type parameter T)
      }
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is '(??? (Unresolved qualified name: Foo.Bar.Baz)) -> Unit', but '(uninferred T (of fun <T> take)) -> Unit' was expected.>
    isInBestCandidates = true

KtNameReferenceExpression(150,154): 'take'
  KaInapplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        {
            lambdaParam: Foo.Bar.Baz ->
        } -> (KaVariableSignature:
          name = action
          receiverType = null
          returnType = (ERROR CLASS: Cannot infer argument for type parameter T) -> kotlin.Unit
          symbol = action: (T) -> kotlin.Unit
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = /take(action: (T) -> kotlin.Unit): kotlin.Unit
          valueParameters = [
            KaVariableSignature:
              name = action
              receiverType = null
              returnType = (ERROR CLASS: Cannot infer argument for type parameter T) -> kotlin.Unit
              symbol = action: (T) -> kotlin.Unit
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = /take
      typeArgumentsMapping = {
        T -> (ERROR CLASS: Cannot infer argument for type parameter T)
      }
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is '(??? (Unresolved qualified name: Foo.Bar.Baz)) -> Unit', but '(uninferred T (of fun <T> take)) -> Unit' was expected.>
    isInBestCandidates = true

KtLambdaArgument(155,190): '{'
  NO_CANDIDATES

KtLambdaExpression(155,190): '{'
  NO_CANDIDATES

KtFunctionLiteral(155,190): '{'
  NO_CANDIDATES

KtParameterList(161,185): 'lambdaParam: Foo.Bar.Baz'
  NO_CANDIDATES

KtParameter(161,185): 'lambdaParam: Foo.Bar.Baz'
  NO_CANDIDATES

KtTypeReference(174,185): 'Foo.Bar.Baz'
  NO_CANDIDATES

KtUserType(174,185): 'Foo.Bar.Baz'
  NO_CANDIDATES

KtUserType(174,181): 'Foo.Bar'
  NO_CANDIDATES

KtUserType(174,177): 'Foo'
  NO_CANDIDATES

KtNameReferenceExpression(174,177): 'Foo'
  NO_CANDIDATES

KtNameReferenceExpression(178,181): 'Bar'
  NO_CANDIDATES

KtNameReferenceExpression(182,185): 'Baz'
  NO_CANDIDATES

KtBlockExpression(189,189): ''
  NO_CANDIDATES