//
// Source
// ------------------------------------------

import androidx.compose.runtime.Composable
import androidx.compose.runtime.NonRestartableComposable
import androidx.compose.runtime.ReadOnlyComposable


@Composable fun MaybeStable.example(x: Int) {
    used(this)
    used(x)
}
val example: @Composable MaybeStable.(Int) -> Unit = {
    used(this)
    used(it)
}

//
// Transformed IR
// ------------------------------------------

@Composable
fun MaybeStable.example(x: Int, %composer: Composer?, %changed: Int) {
  %composer = %composer.startRestartGroup(<>)
  sourceInformation(%composer, "C(example):Test.kt")
  val %dirty = %changed
  if (%changed and 0b0110 == 0) {
    %dirty = %dirty or if (if (%changed and 0b1000 == 0) {
      %composer.changed(<this>)
    } else {
      %composer.changedInstance(<this>)
    }
    ) 0b0100 else 0b0010
  }
  if (%changed and 0b00110000 == 0) {
    %dirty = %dirty or if (%composer.changed(x)) 0b00100000 else 0b00010000
  }
  if (%dirty and 0b00010011 != 0b00010010 || !%composer.skipping) {
    if (isTraceInProgress()) {
      traceEventStart(<>, %dirty, -1, <>)
    }
    used(<this>)
    used(x)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    %composer.skipToGroupEnd()
  }
  %composer.endRestartGroup()?.updateScope { %composer: Composer?, %force: Int ->
    example(x, %composer, updateChangedFlags(%changed or 0b0001))
  }
}
val example: @[ExtensionFunctionType] Function4<MaybeStable, Int, Composer, Int, Unit> = ComposableSingletons%TestKt.lambda-1
internal object ComposableSingletons%TestKt {
  val lambda-1: @[ExtensionFunctionType] Function4<MaybeStable, Int, Composer, Int, Unit> = composableLambdaInstance(<>, false) { it: Int, %composer: Composer?, %changed: Int ->
    sourceInformation(%composer, "C:Test.kt")
    val %dirty = %changed
    if (%changed and 0b0110 == 0) {
      %dirty = %dirty or if (if (%changed and 0b1000 == 0) {
        %composer.changed(<this>)
      } else {
        %composer.changedInstance(<this>)
      }
      ) 0b0100 else 0b0010
    }
    if (%changed and 0b00110000 == 0) {
      %dirty = %dirty or if (%composer.changed(it)) 0b00100000 else 0b00010000
    }
    if (%dirty and 0b10010011 != 0b10010010 || !%composer.skipping) {
      if (isTraceInProgress()) {
        traceEventStart(<>, %dirty, -1, <>)
      }
      used(<this>)
      used(it)
      if (isTraceInProgress()) {
        traceEventEnd()
      }
    } else {
      %composer.skipToGroupEnd()
    }
  }
}
