//
// Source
// ------------------------------------------

import androidx.compose.runtime.Composable

@Composable
fun Test(foo: Foo): Int =
  Consume { foo.value }

//
// Transformed IR
// ------------------------------------------

@Composable
fun Test(foo: Foo, %composer: Composer?, %changed: Int): Int {
  sourceInformationMarkerStart(%composer, <>, "C(Test)<{>,<Consum...>:Test.kt")
  if (isTraceInProgress()) {
    traceEventStart(<>, %changed, -1, <>)
  }
  val tmp0 = Consume(<block>{
    sourceInformationMarkerStart(%composer, <>, "CC(remember):Test.kt#9igjgp")
    val tmp1_group = %composer.cache(%changed and 0b1110 xor 0b0110 > 4 && %composer.changed(foo) || %changed and 0b0110 == 0b0100) {
      {
        foo.value
      }
    }
    sourceInformationMarkerEnd(%composer)
    tmp1_group
  }, %composer, 0)
  if (isTraceInProgress()) {
    traceEventEnd()
  }
  sourceInformationMarkerEnd(%composer)
  return tmp0
}
