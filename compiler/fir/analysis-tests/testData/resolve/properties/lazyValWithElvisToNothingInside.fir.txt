FILE: lazyValWithElvisToNothingInside.kt
    public abstract interface A : R|kotlin/Any| {
        public abstract val list: R|kotlin/collections/List<kotlin/String>|
            public get(): R|kotlin/collections/List<kotlin/String>|

    }
    public final fun getA(): R|A?| {
        ^getA Null(null)
    }
    public final val x: R|kotlin/collections/Map<kotlin/String, kotlin/String>|by R|kotlin/lazy|<R|kotlin/collections/Map<kotlin/String, kotlin/String>|>(<L> = lazy@fun <anonymous>(): R|kotlin/collections/Map<kotlin/String, kotlin/String>| <inline=NoInline>  {
        ^ R|/getA|() ?: R|kotlin/error|(String(error)).R|/A.list|.R|kotlin/collections/associateBy|<R|kotlin/String|, R|kotlin/String|>(<L> = associateBy@fun <anonymous>(it: R|kotlin/String|): R|kotlin/String| <inline=Inline, kind=UNKNOWN>  {
            ^ R|<local>/it|
        }
        )
    }
    )
        public get(): R|kotlin/collections/Map<kotlin/String, kotlin/String>| {
            ^ D|/x|.<CS errors: kotlin/getValue>#<R|kotlin/collections/Map<kotlin/String, kotlin/String>|>(Null(null), ::R|/x|)
        }
