class A : Java2 {
  constructor() /* primary */ {
    super/*Java2*/()
    /* <init>() */

  }

}

class B : Java2 {
  val a: Int
    field = 10
    get

  constructor() /* primary */ {
    super/*Java2*/()
    /* <init>() */

  }

  fun bar(): Int {
    return 10
  }

  fun foo(t: Int) {
  }

}

class C : Java3 {
  constructor() /* primary */ {
    super/*Java3*/()
    /* <init>() */

  }

}

class D : Java3 {
  val a: Int
    field = 10
    get

  constructor() /* primary */ {
    super/*Java3*/()
    /* <init>() */

  }

  fun bar(): Any {
    return 10
  }

  fun foo(t: Any) {
  }

}

abstract class E : Java4 {
  constructor() /* primary */ {
    super/*Java4*/()
    /* <init>() */

  }

}

class F : Java4 {
  override val a: Int
    field = a
    override get

  constructor(a: Int) /* primary */ {
    super/*Java4*/()
    /* <init>() */

  }

  override fun bar(): Int {
    return 10
  }

  override fun foo(t: Int) {
  }

}

class G : Java5 {
  constructor() /* primary */ {
    super/*Java5*/()
    /* <init>() */

  }

}

class H : Java5 {
  constructor() /* primary */ {
    super/*Java5*/()
    /* <init>() */

  }

  override fun bar(): Int {
    return 10
  }

  override fun foo(t: Int) {
  }

  override val a: Int
    override get(): Int {
      return 10
    }

}

interface KotlinInterface : Java1 {
}

interface KotlinInterface2 : Java1 {
  fun bar(): Int {
    return 10
  }

  fun foo(t: Int) {
  }

  abstract val a: Int
    abstract get

}

fun test(a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H) {
  b.<get-a>() /*~> Unit */
  b.foo(t = 1)
  b.bar() /*~> Unit */
  d.<get-a>() /*~> Unit */
  d.foo(t = "")
  d.bar() /*~> Unit */
  e.<get-a>() /*~> Unit */
  e.bar() /*~> Unit */
  e.foo(t = 1)
  f.<get-a>() /*~> Unit */
  f.foo(t = 1)
  f.bar() /*~> Unit */
  g.<get-a>() /*~> Unit */
  g.foo(t = 1)
  g.bar() /*~> Unit */
  h.<get-a>() /*~> Unit */
  h.foo(t = 1)
  h.bar() /*~> Unit */
}
