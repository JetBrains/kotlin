KtFile: 'ClassNameBeforeOneUnsresolvedClassWithDot.kt'
  NO_CANDIDATES

KtPackageDirective(0,0): ''
  NO_CANDIDATES

KtImportList(0,0): ''
  NO_CANDIDATES

KtClass(1,10): 'class Foo'
  NO_CANDIDATES

KtClass(12,46): 'class C {'
  NO_CANDIDATES

KtClassBody(20,46): '{'
  NO_CANDIDATES

KtProperty(26,44): 'val prop: Foo.Bar.'
  NO_CANDIDATES

KtTypeReference(36,44): 'Foo.Bar.'
  NO_CANDIDATES

KtUserType(36,44): 'Foo.Bar.'
  NO_CANDIDATES

KtUserType(36,43): 'Foo.Bar'
  NO_CANDIDATES

KtUserType(36,39): 'Foo'
  NO_CANDIDATES

KtNameReferenceExpression(36,39): 'Foo'
  NO_CANDIDATES

KtNameReferenceExpression(40,43): 'Bar'
  NO_CANDIDATES

KtNamedFunction(48,93): 'fun testFun() {'
  NO_CANDIDATES

KtParameterList(59,61): '()'
  NO_CANDIDATES

KtBlockExpression(62,93): '{'
  NO_CANDIDATES

KtProperty(68,91): 'val localProp: Foo.Bar.'
  NO_CANDIDATES

KtTypeReference(83,91): 'Foo.Bar.'
  NO_CANDIDATES

KtUserType(83,91): 'Foo.Bar.'
  NO_CANDIDATES

KtUserType(83,90): 'Foo.Bar'
  NO_CANDIDATES

KtUserType(83,86): 'Foo'
  NO_CANDIDATES

KtNameReferenceExpression(83,86): 'Foo'
  NO_CANDIDATES

KtNameReferenceExpression(87,90): 'Bar'
  NO_CANDIDATES

KtNamedFunction(95,131): 'fun <T> take(action: (T) -> Unit) {}'
  NO_CANDIDATES

KtTypeParameterList(99,102): '<T>'
  NO_CANDIDATES

KtTypeParameter(100,101): 'T'
  NO_CANDIDATES

KtParameterList(107,128): '(action: (T) -> Unit)'
  NO_CANDIDATES

KtParameter(108,127): 'action: (T) -> Unit'
  NO_CANDIDATES

KtTypeReference(116,127): '(T) -> Unit'
  NO_CANDIDATES

KtFunctionType(116,127): '(T) -> Unit'
  NO_CANDIDATES

KtParameterList(116,119): '(T)'
  NO_CANDIDATES

KtParameter(117,118): 'T'
  NO_CANDIDATES

KtTypeReference(117,118): 'T'
  NO_CANDIDATES

KtUserType(117,118): 'T'
  NO_CANDIDATES

KtNameReferenceExpression(117,118): 'T'
  NO_CANDIDATES

KtTypeReference(123,127): 'Unit'
  NO_CANDIDATES

KtUserType(123,127): 'Unit'
  NO_CANDIDATES

KtNameReferenceExpression(123,127): 'Unit'
  NO_CANDIDATES

KtBlockExpression(129,131): '{}'
  NO_CANDIDATES

KtProperty(133,181): 'val prop = take {'
  NO_CANDIDATES

KtCallExpression(144,181): 'take {'
  KaInapplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        {
            lambdaParam: Foo.Bar. ->
        } -> (KaVariableSignature:
          name = action
          receiverType = null
          returnType = kotlin.Function1<ERROR CLASS: Cannot infer argument for type parameter T, kotlin.Unit>
          symbol = action: kotlin.Function1<T, kotlin.Unit>
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = /take(action: kotlin.Function1<T, kotlin.Unit>): kotlin.Unit
          valueParameters = [
            KaVariableSignature:
              name = action
              receiverType = null
              returnType = kotlin.Function1<ERROR CLASS: Cannot infer argument for type parameter T, kotlin.Unit>
              symbol = action: kotlin.Function1<T, kotlin.Unit>
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = /take
      typeArgumentsMapping = {
        T -> (ERROR CLASS: Cannot infer argument for type parameter T)
      }
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is 'Function1<ERROR CLASS: Incomplete user type, Unit>', but 'Function1<uninferred T (of fun <T> take), Unit>' was expected.>
    isInBestCandidates = true

KtNameReferenceExpression(144,148): 'take'
  KaInapplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        {
            lambdaParam: Foo.Bar. ->
        } -> (KaVariableSignature:
          name = action
          receiverType = null
          returnType = kotlin.Function1<ERROR CLASS: Cannot infer argument for type parameter T, kotlin.Unit>
          symbol = action: kotlin.Function1<T, kotlin.Unit>
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = /take(action: kotlin.Function1<T, kotlin.Unit>): kotlin.Unit
          valueParameters = [
            KaVariableSignature:
              name = action
              receiverType = null
              returnType = kotlin.Function1<ERROR CLASS: Cannot infer argument for type parameter T, kotlin.Unit>
              symbol = action: kotlin.Function1<T, kotlin.Unit>
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = /take
      typeArgumentsMapping = {
        T -> (ERROR CLASS: Cannot infer argument for type parameter T)
      }
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is 'Function1<ERROR CLASS: Incomplete user type, Unit>', but 'Function1<uninferred T (of fun <T> take), Unit>' was expected.>
    isInBestCandidates = true

KtLambdaArgument(149,181): '{'
  NO_CANDIDATES

KtLambdaExpression(149,181): '{'
  NO_CANDIDATES

KtFunctionLiteral(149,181): '{'
  NO_CANDIDATES

KtParameterList(155,176): 'lambdaParam: Foo.Bar.'
  NO_CANDIDATES

KtParameter(155,176): 'lambdaParam: Foo.Bar.'
  NO_CANDIDATES

KtTypeReference(168,176): 'Foo.Bar.'
  NO_CANDIDATES

KtUserType(168,176): 'Foo.Bar.'
  NO_CANDIDATES

KtUserType(168,175): 'Foo.Bar'
  NO_CANDIDATES

KtUserType(168,171): 'Foo'
  NO_CANDIDATES

KtNameReferenceExpression(168,171): 'Foo'
  NO_CANDIDATES

KtNameReferenceExpression(172,175): 'Bar'
  NO_CANDIDATES

KtBlockExpression(180,180): ''
  NO_CANDIDATES