<idea-plugin>
  <application-components>
    <component>
      <implementation-class>org.jetbrains.kotlin.idea.versions.KotlinUpdatePluginComponent</implementation-class>
    </component>
  </application-components>

  <actions>
    <action id="Kotlin.NewFile" class="org.jetbrains.kotlin.idea.actions.NewKotlinFileAction">
      <add-to-group group-id="NewGroup" anchor="after" relative-to-action="NewGroup1"/>
    </action>
    <action id="Kotlin.NewScript" class="org.jetbrains.kotlin.idea.actions.NewKotlinScriptAction">
      <add-to-group group-id="NewGroup" anchor="before" relative-to-action="NewFromTemplate"/>
    </action>
    <action id="Kotlin.NewWorksheet" class="org.jetbrains.kotlin.idea.actions.NewKotlinWorksheetAction">
      <add-to-group group-id="NewGroup" anchor="before" relative-to-action="NewFromTemplate"/>
    </action>

    <group id = "ConvertJavaToKotlinGroup">
      <separator/>
      <action id="ConvertJavaToKotlin" class="org.jetbrains.kotlin.idea.actions.JavaToKotlinAction">
        <keyboard-shortcut keymap="$default" first-keystroke="control alt shift K"/>
      </action>
      <add-to-group group-id="CodeMenu" anchor="last"/>
      <add-to-group group-id="ProjectViewPopupMenu" anchor="last"/>
      <add-to-group group-id="EditorTabPopupMenu" anchor="last"/>
    </group>

    <group id="KotlinToolsGroup" popup="true" icon="/org/jetbrains/kotlin/idea/icons/kotlin13.png"
           class="org.jetbrains.kotlin.idea.actions.KotlinActionGroup">
      <add-to-group group-id="ToolsMenu" anchor="last"/>
    </group>

    <action id="KotlinConfigureUpdates" class="org.jetbrains.kotlin.idea.actions.ConfigurePluginUpdatesAction">
      <add-to-group group-id="KotlinToolsGroup"/>
    </action>

    <action id="DecompileKotlinToJava" class="org.jetbrains.kotlin.idea.actions.DecompileKotlinToJavaAction">
      <add-to-group group-id="KotlinToolsGroup"/>
    </action>

    <action id="CopyKotlinProjectInformation" class="org.jetbrains.kotlin.idea.actions.internal.CopyKotlinProjectOverviewAction">
    </action>

    <action id="KotlinCodeMigration" class="org.jetbrains.kotlin.idea.migration.CodeMigrationAction">
      <!-- TODO: Not assigned to any group because there should be a panel for filling migration options -->
    </action>

    <action id="KotlinCodeMigrationToggle" class="org.jetbrains.kotlin.idea.migration.CodeMigrationToggleAction">
      <add-to-group group-id="KotlinToolsGroup"/>
    </action>

    <action id="ExtractFunction" class="org.jetbrains.kotlin.idea.refactoring.introduce.extractFunction.ExtractFunctionAction"
            use-shortcut-of="ExtractMethod">
      <add-to-group group-id="IntroduceActionsGroup" anchor="after" relative-to-action="ExtractMethod"/>
    </action>

    <action id="IntroduceProperty" class="org.jetbrains.kotlin.idea.refactoring.introduce.introduceProperty.IntroducePropertyAction"
            use-shortcut-of="IntroduceField">
      <add-to-group group-id="IntroduceActionsGroup" anchor="after" relative-to-action="IntroduceField"/>
    </action>

    <group id="InternalKotlin" internal="true">
      <separator/>

      <action id="DumbModeTremble" class="org.jetbrains.kotlin.idea.actions.internal.DumbModeTrembleAction"/>

    <group id="KotlinRefactoringTesting" popup="true">
      <action id="TestMoveRefactiringAction"
              class="org.jetbrains.kotlin.idea.actions.internal.refactoringTesting.MoveRefactoringAction"/>
    </group>

      <group id="KotlinInternalGroup" popup="true">
        <group id="KotlinCompletionBenchmarkGroup" popup="true">
          <action id="TopLevelCompletionBenchmarkAction"
                  class="org.jetbrains.kotlin.idea.actions.internal.benchmark.TopLevelCompletionBenchmarkAction"/>

          <action id="LocalCompletionBenchmarkAction"
                  class="org.jetbrains.kotlin.idea.actions.internal.benchmark.LocalCompletionBenchmarkAction"/>
        </group>

        <action id="HighlightingBenchmarkAction"
                class="org.jetbrains.kotlin.idea.actions.internal.benchmark.HighlightingBenchmarkAction"/>

        <action id="CacheResetOnProcessCanceledToggleAction"
                class="org.jetbrains.kotlin.idea.actions.internal.CacheResetOnProcessCanceledToggleAction"/>

        <action id="CheckComponentsUsageSearchAction" class="org.jetbrains.kotlin.idea.actions.internal.CheckComponentsUsageSearchAction"/>

        <action id="FindImplicitNothingAction" class="org.jetbrains.kotlin.idea.actions.internal.FindImplicitNothingAction"/>

        <action id="PrintOutNotPropertyMatches" class="org.jetbrains.kotlin.idea.actions.internal.SearchNotPropertyCandidatesAction"/>

        <action id="StoredExceptionsThrowToggleAction" class="org.jetbrains.kotlin.idea.actions.internal.StoredExceptionsThrowToggleAction"/>

        <action id="MultiplatformCompositeAnalysisToggleAction" class="org.jetbrains.kotlin.idea.actions.internal.MultiplatformCompositeAnalysisToggleAction"/>

        <action id="CopyAsDiagnosticTest" class="org.jetbrains.kotlin.idea.actions.internal.CopyAsDiagnosticTestAction"/>

        <action id="KotlinFormattingSettingsStatusAction" class="org.jetbrains.kotlin.idea.actions.internal.KotlinFormattingSettingsStatusAction"/>

        <!--        <action id="ShowFirAction" class="org.jetbrains.kotlin.idea.actions.internal.ShowFirAction"
                text="Show RAW FIR Explorer"/> -->
      </group>
      <separator/>

      <add-to-group group-id="Internal" anchor="last"/>
    </group>

    <action id="KotlinThrowException" class="org.jetbrains.kotlin.idea.actions.internal.KotlinThrowExceptionAction"/>

    <action id="ExtractFunctionToScope" class="org.jetbrains.kotlin.idea.refactoring.introduce.extractFunction.ExtractFunctionToScopeAction">
      <keyboard-shortcut keymap="$default" first-keystroke="control alt shift M"/>
      <add-to-group group-id="IntroduceActionsGroup" anchor="after" relative-to-action="ExtractFunction"/>
    </action>

    <action id="IntroduceTypeParameter" class="org.jetbrains.kotlin.idea.refactoring.introduce.introduceTypeParameter.IntroduceTypeParameterAction">
      <add-to-group group-id="IntroduceActionsGroup" anchor="after" relative-to-action="ExtractFunctionToScope"/>
    </action>

    <action id="IntroduceTypeAlias" class="org.jetbrains.kotlin.idea.refactoring.introduce.introduceTypeAlias.IntroduceTypeAliasAction">
      <keyboard-shortcut keymap="$default" first-keystroke="control alt shift A"/>
      <add-to-group group-id="IntroduceActionsGroup" anchor="after" relative-to-action="IntroduceTypeParameter"/>
    </action>

    <action id="KotlinShellExecute" class="com.intellij.openapi.actionSystem.EmptyAction">
      <keyboard-shortcut first-keystroke="control ENTER" keymap="$default"/>
    </action>

    <group id="KotlinGenerateGroup">
      <action id="KotlinGenerateTestMethod"
              class="org.jetbrains.kotlin.idea.actions.generate.KotlinGenerateTestSupportActionBase$Test"/>
      <action id="KotlinGenerateSetUpMethod"
              class="org.jetbrains.kotlin.idea.actions.generate.KotlinGenerateTestSupportActionBase$SetUp"/>
      <action id="KotlinGenerateTearDownMethod"
              class="org.jetbrains.kotlin.idea.actions.generate.KotlinGenerateTestSupportActionBase$TearDown"/>
      <action id="KotlinGenerateDataMethod"
              class="org.jetbrains.kotlin.idea.actions.generate.KotlinGenerateTestSupportActionBase$Data"/>
      <separator />
      <action id="KotlinGenerateSecondaryConstructor"
              class="org.jetbrains.kotlin.idea.actions.generate.KotlinGenerateSecondaryConstructorAction"/>
      <action id="KotlinGenerateEqualsAndHashCode"
              class="org.jetbrains.kotlin.idea.actions.generate.KotlinGenerateEqualsAndHashcodeAction"/>
      <action id="KotlinGenerateToString"
              class="org.jetbrains.kotlin.idea.actions.generate.KotlinGenerateToStringAction"/>

      <add-to-group group-id="GenerateGroup" anchor="first"/>
    </group>

    <action id="Kotlin.RunScratch" class="org.jetbrains.kotlin.idea.scratch.actions.RunScratchAction">
      <keyboard-shortcut first-keystroke="control alt W" keymap="$default"/>
      <add-to-group group-id="RunContextPopupGroup" anchor="last"/>
    </action>
    <action id="Kotlin.ClearScratch" class="org.jetbrains.kotlin.idea.scratch.actions.ClearScratchAction">
    </action>
    <action id="Kotlin.StopScratch" class="org.jetbrains.kotlin.idea.scratch.actions.StopScratchAction">
    </action>
  </actions>

  <extensions defaultExtensionNs="com.intellij">
    <applicationService serviceInterface="org.jetbrains.kotlin.idea.KotlinIconProviderService"
                        serviceImplementation="org.jetbrains.kotlin.idea.KotlinIdeFileIconProviderService"/>

    <applicationService serviceInterface="org.jetbrains.kotlin.psi.stubs.elements.StubIndexService"
                        serviceImplementation="org.jetbrains.kotlin.idea.stubindex.IdeStubIndexService"/>

    <applicationService serviceInterface="org.jetbrains.kotlin.psi.KotlinReferenceProvidersService"
                        serviceImplementation="org.jetbrains.kotlin.idea.references.KtIdeReferenceProviderService"/>

    <applicationService serviceImplementation="org.jetbrains.kotlin.load.kotlin.KotlinBinaryClassCache"/>

    <applicationService serviceImplementation="org.jetbrains.kotlin.idea.quickfix.QuickFixes"/>

    <applicationService serviceInterface="org.jetbrains.kotlin.idea.caches.FileAttributeService"
                        serviceImplementation="org.jetbrains.kotlin.idea.caches.FileAttributeServiceImpl"/>

    <applicationService serviceImplementation="org.jetbrains.kotlin.idea.KotlinPluginUpdater"/>

    <applicationService serviceInterface="org.jetbrains.kotlin.psi.KotlinDeclarationNavigationPolicy"
                        serviceImplementation="org.jetbrains.kotlin.idea.decompiler.navigation.KotlinDeclarationNavigationPolicyImpl"/>

    <!-- since 192 use light service @Service instead of this declaration -->
    <applicationService serviceImplementation="org.jetbrains.kotlin.idea.caches.IDEKotlinBinaryClassCache"/>

    <!-- since 192 use light service @Service instead of this declaration -->
    <applicationService serviceImplementation="org.jetbrains.kotlin.idea.core.formatter.KotlinCodeStyleSettings$KotlinCodeStyleSettingsHolder"/>

    <projectService serviceInterface="org.jetbrains.kotlin.idea.util.ImportInsertHelper"
                    serviceImplementation="org.jetbrains.kotlin.idea.util.ImportInsertHelperImpl"/>

    <projectService serviceInterface="org.jetbrains.kotlin.analyzer.KotlinModificationTrackerService"
                    serviceImplementation="org.jetbrains.kotlin.idea.caches.trackers.KotlinIDEModificationTrackerService"/>

    <projectService serviceInterface="org.jetbrains.kotlin.caches.resolve.KotlinCacheService"
                    serviceImplementation="org.jetbrains.kotlin.idea.caches.resolve.KotlinCacheServiceImpl"/>

    <projectService serviceInterface="org.jetbrains.kotlin.idea.fir.FirIdeResolveStateService"
                    serviceImplementation="org.jetbrains.kotlin.idea.fir.FirIdeResolveStateServiceImpl"/>

    <projectService serviceInterface="org.jetbrains.kotlin.load.kotlin.MetadataFinderFactory"
                    serviceImplementation="org.jetbrains.kotlin.idea.vfilefinder.IDEVirtualFileFinderFactory"/>

    <projectService serviceInterface="org.jetbrains.kotlin.load.kotlin.VirtualFileFinderFactory"
                    serviceImplementation="org.jetbrains.kotlin.idea.vfilefinder.IDEVirtualFileFinderFactory"/>

    <projectService serviceInterface="org.jetbrains.kotlin.load.kotlin.ModuleVisibilityManager"
                    serviceImplementation="org.jetbrains.kotlin.idea.util.IdeModuleVisibilityManagerImpl"/>

    <projectService serviceInterface="org.jetbrains.kotlin.resolve.jvm.modules.JavaModuleResolver"
                    serviceImplementation="org.jetbrains.kotlin.idea.modules.IdeJavaModuleResolver"/>

    <projectService serviceInterface="org.jetbrains.kotlin.resolve.ModuleAnnotationsResolver"
                    serviceImplementation="org.jetbrains.kotlin.idea.compiler.IdeModuleAnnotationsResolver"/>

    <projectService serviceInterface="org.jetbrains.kotlin.asJava.LightClassGenerationSupport"
                    serviceImplementation="org.jetbrains.kotlin.idea.caches.resolve.IDELightClassGenerationSupport"/>

    <projectService serviceInterface="org.jetbrains.kotlin.asJava.KotlinAsJavaSupport"
                    serviceImplementation="org.jetbrains.kotlin.idea.caches.resolve.IDEKotlinAsJavaSupport"/>

    <projectService serviceInterface="org.jetbrains.kotlin.psi.KtFileClassProvider"
                    serviceImplementation="org.jetbrains.kotlin.idea.caches.resolve.KtFileClassProviderImpl"/>

    <projectService serviceInterface="org.jetbrains.kotlin.resolve.CodeAnalyzerInitializer"
                    serviceImplementation="org.jetbrains.kotlin.resolve.DummyCodeAnalyzerInitializer"/>

    <projectService serviceInterface="org.jetbrains.kotlin.scripting.definitions.ScriptDefinitionProvider"
                    serviceImplementation="org.jetbrains.kotlin.idea.core.script.ScriptDefinitionsManager"/>

    <projectService serviceInterface="org.jetbrains.kotlin.scripting.definitions.ScriptDependenciesProvider"
                    serviceImplementation="org.jetbrains.kotlin.idea.core.script.IdeScriptDependenciesProvider"/>

    <projectService serviceInterface="org.jetbrains.kotlin.idea.core.script.ScriptConfigurationManager"
                    serviceImplementation="org.jetbrains.kotlin.idea.core.script.configuration.DefaultScriptConfigurationManager"/>

    <projectService serviceInterface="org.jetbrains.kotlin.scripting.resolve.ScriptReportSink"
                    serviceImplementation="org.jetbrains.kotlin.idea.core.script.IdeScriptReportSink"/>

    <projectService serviceImplementation="org.jetbrains.kotlin.idea.compiler.configuration.KotlinCommonCompilerArgumentsHolder"/>

    <projectService serviceImplementation="org.jetbrains.kotlin.idea.compiler.configuration.Kotlin2JvmCompilerArgumentsHolder"/>

    <projectService serviceImplementation="org.jetbrains.kotlin.idea.compiler.configuration.Kotlin2JsCompilerArgumentsHolder"/>

    <projectService serviceImplementation="org.jetbrains.kotlin.idea.compiler.configuration.KotlinCompilerSettings"/>

    <projectService serviceImplementation="org.jetbrains.kotlin.idea.parameterInfo.custom.KotlinCodeHintsModel"/>

    <projectService serviceImplementation="org.jetbrains.kotlin.idea.compiler.configuration.KotlinCompilerWorkspaceSettings"/>

    <projectService serviceImplementation="org.jetbrains.kotlin.asJava.classes.FacadeCache"/>

    <projectService serviceInterface="org.jetbrains.kotlin.resolve.lazy.declarations.DeclarationProviderFactoryService"
                    serviceImplementation="org.jetbrains.kotlin.idea.stubindex.resolve.PluginDeclarationProviderFactoryService"/>

    <projectService serviceImplementation="org.jetbrains.kotlin.idea.stubindex.SubpackagesIndexService"/>

    <projectService serviceImplementation="org.jetbrains.kotlin.idea.caches.project.LibraryModificationTracker"/>

    <projectService serviceImplementation="org.jetbrains.kotlin.idea.core.script.ScriptDependenciesModificationTracker"/>

    <projectService serviceImplementation="org.jetbrains.kotlin.idea.completion.CompletionBindingContextProvider"/>

    <projectService serviceImplementation="org.jetbrains.kotlin.resolve.jvm.KotlinJavaPsiFacade"/>

    <projectService serviceImplementation="org.jetbrains.kotlin.idea.caches.lightClasses.ClsJavaStubByVirtualFileCache"/>

    <projectService serviceInterface="org.jetbrains.kotlin.asJava.classes.LightClassInheritanceHelper"
                    serviceImplementation="org.jetbrains.kotlin.idea.caches.lightClasses.IdeLightClassInheritanceHelper"/>

    <projectService serviceInterface="org.jetbrains.kotlin.config.KotlinFacetSettingsProvider"
                    serviceImplementation="org.jetbrains.kotlin.idea.facet.KotlinFacetSettingsProviderImpl"/>

    <projectService serviceInterface="org.jetbrains.kotlin.idea.framework.LibraryEffectiveKindProvider"
                    serviceImplementation="org.jetbrains.kotlin.idea.framework.LibraryEffectiveKindProviderImpl"/>

    <projectService serviceInterface="org.jetbrains.kotlin.idea.core.NotPropertiesService"
                    serviceImplementation="org.jetbrains.kotlin.idea.intentions.NotPropertiesServiceImpl"/>

    <projectService serviceInterface="org.jetbrains.kotlin.idea.kdoc.SampleResolutionService"
                    serviceImplementation="org.jetbrains.kotlin.idea.kdoc.IdeSampleResolutionService"/>

    <projectService serviceImplementation="org.jetbrains.kotlin.idea.caches.PerModulePackageCacheService"/>

    <projectService serviceInterface="org.jetbrains.kotlin.idea.caches.project.LibraryDependenciesCache"
                    serviceImplementation="org.jetbrains.kotlin.idea.caches.project.LibraryDependenciesCacheImpl"/>

    <projectService serviceInterface="org.jetbrains.kotlin.idea.caches.project.SdkInfoCache"
                    serviceImplementation="org.jetbrains.kotlin.idea.caches.project.SdkInfoCacheImpl"/>

    <projectService serviceImplementation="org.jetbrains.kotlin.idea.caches.resolve.IdePackageOracleFactory"/>

    <projectService serviceImplementation="org.jetbrains.kotlin.idea.core.util.ProjectJob"/>

    <projectService serviceInterface="org.jetbrains.kotlin.resolve.lazy.ProbablyNothingCallableNames"
                    serviceImplementation="org.jetbrains.kotlin.idea.project.ProbablyNothingCallableNamesImpl"/>

    <projectService serviceInterface="org.jetbrains.kotlin.resolve.lazy.ProbablyContractedCallableNames"
                    serviceImplementation="org.jetbrains.kotlin.idea.project.ProbablyContractedCallableNamesImpl"/>

    <projectService serviceImplementation="org.jetbrains.kotlin.idea.core.script.settings.KotlinScriptingSettings"/>

    <projectService serviceInterface="org.jetbrains.kotlin.idea.debugger.StackFrameInterceptor"
                    serviceImplementation="org.jetbrains.kotlin.idea.debugger.coroutine.CoroutineStackFrameInterceptor"/>

    <projectService serviceInterface="org.jetbrains.kotlin.idea.debugger.coroutine.DebuggerListener"
                    serviceImplementation="org.jetbrains.kotlin.idea.debugger.coroutine.CoroutineDebuggerListener"/>

    <errorHandler implementation="org.jetbrains.kotlin.idea.reporter.KotlinReportSubmitter"/>

    <registryKey
        key="kotlin.dispatch.thread.resolve.check"
        description="Whether to enable the check for resolve activated from the write action"
        defaultValue="false"
        restartRequired="false"/>

    <internalFileTemplate name="Kotlin File"/>
    <internalFileTemplate name="Kotlin Class"/>
    <internalFileTemplate name="Kotlin Enum"/>
    <internalFileTemplate name="Kotlin Interface"/>
    <internalFileTemplate name="Kotlin Worksheet"/>
    <internalFileTemplate name="Kotlin Script"/>

    <gotoSymbolContributor implementation="org.jetbrains.kotlin.idea.goto.KotlinGotoSymbolContributor"/>
    <gotoClassContributor implementation="org.jetbrains.kotlin.idea.goto.KotlinGotoClassContributor"/>
    <searchEverywhereClassifier implementation="org.jetbrains.kotlin.idea.goto.KotlinSearchEverywhereClassifier"/>
    <lang.importOptimizer language="kotlin" implementationClass="org.jetbrains.kotlin.idea.imports.KotlinImportOptimizer"/>
    <lang.namesValidator language="kotlin" implementationClass="org.jetbrains.kotlin.idea.refactoring.KotlinNamesValidator"/>

    <fileTypeFactory implementation="org.jetbrains.kotlin.idea.core.KotlinFileTypeFactory"/>
    <fileTypeFactory implementation="org.jetbrains.kotlin.idea.KotlinJavaScriptMetaFileTypeFactory"/>
    <fileTypeFactory implementation="org.jetbrains.kotlin.idea.KotlinBuiltInFileTypeFactory"/>
    <fileTypeFactory implementation="org.jetbrains.kotlin.idea.KotlinModuleFileFactory"/>

    <compileServer.plugin classpath="jps/kotlin-jps-plugin.jar;kotlin-stdlib.jar;kotlin-reflect.jar;kotlin-plugin.jar"/>
    <compiler.task execute="BEFORE" implementation="org.jetbrains.kotlin.idea.internal.makeBackup.MakeBackupCompileTask"/>
    <jps.plugin />

    <library.type implementation="org.jetbrains.kotlin.idea.framework.CommonLibraryType"/>
    <lang.syntaxHighlighterFactory key="kotlin" implementationClass="org.jetbrains.kotlin.idea.highlighter.KotlinSyntaxHighlighterFactory"/>
    <syntaxHighlighter factoryClass="org.jetbrains.kotlin.idea.decompiler.builtIns.KotlinSyntaxHighlighterProviderForDecompiledBuiltIns"/>
    <lang.braceMatcher language="kotlin" implementationClass="org.jetbrains.kotlin.idea.KotlinPairMatcher"/>
    <lang.parserDefinition language="kotlin" implementationClass="org.jetbrains.kotlin.parsing.KotlinParserDefinition"/>
    <lang.commenter language="kotlin" implementationClass="org.jetbrains.kotlin.idea.KotlinCommenter"/>
    <lang.psiStructureViewFactory language="kotlin" implementationClass="org.jetbrains.kotlin.idea.structureView.KotlinStructureViewFactory"/>
    <structureViewBuilder order="first" key="CLASS" factoryClass="org.jetbrains.kotlin.idea.structureView.KtClsStructureViewBuilderProvider"/>
    <editorNotificationProvider implementation="org.jetbrains.kotlin.idea.script.configuration.MultipleScriptDefinitionsChecker"/>
    <editor.linePainter order="first" implementation="org.jetbrains.kotlin.idea.parameterInfo.custom.ReturnHintLinePainter"/>

    <lang.foldingBuilder language="kotlin" implementationClass="org.jetbrains.kotlin.idea.KotlinFoldingBuilder"/>
    <lang.formatter language="kotlin" implementationClass="org.jetbrains.kotlin.idea.formatter.KotlinFormattingModelBuilder"/>
    <preFormatProcessor implementation="org.jetbrains.kotlin.idea.formatter.KotlinPreFormatProcessor"/>
    <postFormatProcessor implementation="org.jetbrains.kotlin.idea.formatter.TrailingCommaPostFormatProcessor"/>
    <lang.findUsagesProvider language="kotlin" implementationClass="org.jetbrains.kotlin.idea.findUsages.KotlinFindUsagesProvider"/>
    <lang.elementManipulator forClass="org.jetbrains.kotlin.psi.KtStringTemplateExpression"
                             implementationClass="org.jetbrains.kotlin.psi.psiUtil.KtStringTemplateExpressionManipulator"/>
    <fileStructureGroupRuleProvider implementation="org.jetbrains.kotlin.idea.findUsages.KotlinDeclarationGroupRuleProvider"/>
    <fileStructureGroupRuleProvider implementation="org.jetbrains.kotlin.idea.findUsages.KotlinDeclarationSecondLevelGroupRuleProvider"/>
    <importFilteringRule implementation="org.jetbrains.kotlin.idea.findUsages.KotlinImportFilteringRule"/>
    <lang.refactoringSupport language="kotlin" implementationClass="org.jetbrains.kotlin.idea.refactoring.KotlinRefactoringSupportProvider"/>
    <lang.surroundDescriptor language="kotlin"
                             implementationClass="org.jetbrains.kotlin.idea.codeInsight.surroundWith.expression.KotlinExpressionSurroundDescriptor"/>
    <lang.surroundDescriptor language="kotlin"
                             implementationClass="org.jetbrains.kotlin.idea.codeInsight.surroundWith.statement.KotlinStatementSurroundDescriptor"/>
    <lang.unwrapDescriptor language="kotlin" implementationClass="org.jetbrains.kotlin.idea.codeInsight.unwrap.KotlinUnwrapDescriptor"/>
    <quoteHandler fileType="Kotlin" className="org.jetbrains.kotlin.idea.editor.KotlinQuoteHandler"/>
    <refactoring.helper implementation="org.jetbrains.kotlin.idea.codeInsight.KotlinRefactoringHelperForDelayedRequests"/>
    <refactoring.helper implementation="org.jetbrains.kotlin.idea.codeInsight.KotlinOptimizeImportsRefactoringHelper"/>
    <refactoring.moveHandler
        id="kotlin.moveFilesOrDirectories"
        implementation="org.jetbrains.kotlin.idea.refactoring.move.moveFilesOrDirectories.KotlinMoveFilesOrDirectoriesHandler"
        order="first"/>
    <refactoring.moveHandler
        id="kotlin.moveTopLevelDeclarations"
        implementation="org.jetbrains.kotlin.idea.refactoring.move.moveDeclarations.MoveKotlinDeclarationsHandler"
        order="first,before kotlin.moveFilesOrDirectories"/>
    <refactoring.moveHandler
        id="kotlinAwareJavaMoveClassesOrPackagesHandler"
        implementation="org.jetbrains.kotlin.idea.refactoring.move.moveClassesOrPackages.KotlinAwareJavaMoveClassesOrPackagesHandler"
        order="first" />
    <moveFileHandler implementation="org.jetbrains.kotlin.idea.refactoring.move.moveFilesOrDirectories.MoveKotlinFileHandler" />
    <moveFileHandler
        implementation="org.jetbrains.kotlin.idea.refactoring.move.moveFilesOrDirectories.FqNameFixingMoveJavaFileHandler"
        order="before java" />
    <refactoring.moveDirectoryWithClassesHelper
        implementation="org.jetbrains.kotlin.idea.refactoring.move.moveFilesOrDirectories.KotlinMoveDirectoryWithClassesHelper"
        order="first" />
    <refactoring.moveClassHandler
        implementation="org.jetbrains.kotlin.idea.refactoring.move.moveFilesOrDirectories.MoveKotlinClassHandler"
        order="first"/>
    <refactoring.moveClassHandler
        implementation="org.jetbrains.kotlin.idea.refactoring.move.moveFilesOrDirectories.MoveKotlinAliasClassHandler"
        order="first"/>
    <refactoring.moveMemberHandler language="kotlin"
                                   implementationClass="org.jetbrains.kotlin.idea.refactoring.move.MoveKotlinMemberHandler"/>
    <refactoring.moveInnerClassUsagesHandler
        implementationClass="org.jetbrains.kotlin.idea.refactoring.move.MoveJavaInnerClassKotlinUsagesHandler"
        language="kotlin" />
    <refactoring.copyHandler
        id="kotlinClass"
        implementation="org.jetbrains.kotlin.idea.refactoring.copy.CopyKotlinDeclarationsHandler"
        order="first" />
    <refactoring.changeSignatureUsageProcessor
        implementation="org.jetbrains.kotlin.idea.refactoring.changeSignature.KotlinChangeSignatureUsageProcessor"
        order="after javaProcessor" />
    <refactoring.introduceParameterMethodUsagesProcessor
        implementation="org.jetbrains.kotlin.idea.refactoring.introduce.introduceParameter.KotlinIntroduceParameterMethodUsageProcessor"/>
    <inlineActionHandler implementation="org.jetbrains.kotlin.idea.refactoring.inline.KotlinInlineValHandler"/>
    <inlineActionHandler implementation="org.jetbrains.kotlin.idea.refactoring.inline.KotlinInlineFunctionHandler"/>
    <inlineActionHandler implementation="org.jetbrains.kotlin.idea.refactoring.inline.KotlinInlineTypeAliasHandler"/>
    <treeStructureProvider implementation="org.jetbrains.kotlin.idea.projectView.KotlinSelectInProjectViewProvider"/>
    <treeStructureProvider implementation="org.jetbrains.kotlin.idea.projectView.KotlinExpandNodeProjectViewProvider" order="last"/>

    <colorSettingsPage implementation="org.jetbrains.kotlin.idea.highlighter.KotlinColorSettingsPage"/>
    <additionalTextAttributes scheme="Default" file="colorScheme/Default_Kotlin.xml"/>
    <additionalTextAttributes scheme="Darcula" file="colorScheme/Darcula_Kotlin.xml"/>

    <codeStyleSettingsProvider implementation="org.jetbrains.kotlin.idea.formatter.KotlinGenerationSettingsProvider"/>
    <codeStyleSettingsProvider implementation="org.jetbrains.kotlin.idea.formatter.KotlinCodeStyleSettingsProvider"/>
    <langCodeStyleSettingsProvider implementation="org.jetbrains.kotlin.idea.formatter.KotlinLanguageCodeStyleSettingsProvider"/>
    <predefinedCodeStyle implementation="org.jetbrains.kotlin.idea.formatter.KotlinStyleGuideCodeStyle"/>
    <predefinedCodeStyle implementation="org.jetbrains.kotlin.idea.formatter.KotlinObsoleteCodeStyle"/>

    <projectConfigurable instance="org.jetbrains.kotlin.idea.compiler.configuration.KotlinCompilerConfigurableTab"
                         id="project.kotlinCompiler"
                         displayName="Kotlin Compiler"
                         parentId="project.propCompiler"/>

    <applicationConfigurable groupId="language" displayName="Kotlin" id="preferences.language.Kotlin"
                             instance="org.jetbrains.kotlin.idea.configuration.KotlinLanguageConfiguration"/>

    <projectConfigurable groupId="language" displayName="Kotlin Scripting" id="preferences.language.Kotlin.scripting"
                         instance="org.jetbrains.kotlin.idea.script.configuration.KotlinScriptingSettingsConfigurable"
                         parentId="preferences.language.Kotlin"/>

    <qualifiedNameProvider implementation="org.jetbrains.kotlin.idea.actions.KotlinQualifiedNameProvider"/>

    <codeInsight.parameterInfo language="kotlin" implementationClass="org.jetbrains.kotlin.idea.parameterInfo.KotlinFunctionParameterInfoHandler"/>
    <codeInsight.parameterInfo language="kotlin" implementationClass="org.jetbrains.kotlin.idea.parameterInfo.KotlinLambdaParameterInfoHandler"/>
    <codeInsight.parameterInfo language="kotlin" implementationClass="org.jetbrains.kotlin.idea.parameterInfo.KotlinArrayAccessParameterInfoHandler"/>
    <codeInsight.parameterInfo language="kotlin" implementationClass="org.jetbrains.kotlin.idea.parameterInfo.KotlinClassTypeArgumentInfoHandler"/>
    <codeInsight.parameterInfo language="kotlin" implementationClass="org.jetbrains.kotlin.idea.parameterInfo.KotlinFunctionTypeArgumentInfoHandler"/>
    <codeInsight.parameterNameHints language="kotlin" implementationClass="org.jetbrains.kotlin.idea.parameterInfo.KotlinInlayParameterHintsProvider"/>

    <codeInsight.gotoSuper language="kotlin" implementationClass="org.jetbrains.kotlin.idea.codeInsight.GotoSuperActionHandler"/>

    <codeInsight.template.postfixTemplateProvider language="kotlin"
                                                  implementationClass="org.jetbrains.kotlin.idea.codeInsight.postfix.KtPostfixTemplateProvider"/>

    <codeInsight.linkHandler prefix="#kotlinClass/" handlerClass="org.jetbrains.kotlin.idea.highlighter.markers.KotlinClassTooltipLinkHandler"/>

    <codeInsight.nonBlockingContextChecker implementation="org.jetbrains.kotlin.idea.inspections.blockingCallsDetection.CoroutineNonBlockingContextChecker"/>

    <defaultHighlightingSettingProvider language="kotlin" implementation="org.jetbrains.kotlin.idea.highlighter.KotlinDefaultHighlightingSettingsProvider"/>

    <typeDeclarationProvider implementation="org.jetbrains.kotlin.idea.codeInsight.KotlinTypeDeclarationProvider"/>

    <completion.contributor language="kotlin"
                            id="KotlinCompletionContributor"
                            order="first"
                            implementationClass="org.jetbrains.kotlin.idea.completion.KotlinCompletionContributor"/>
    <completion.contributor language="kotlin"
                            implementationClass="org.jetbrains.kotlin.idea.completion.KDocCompletionContributor"/>

    <completion.confidence language="kotlin" implementationClass="com.intellij.codeInsight.completion.UnfocusedNameIdentifier"/>
    <completion.confidence language="kotlin" implementationClass="com.intellij.codeInsight.completion.AlwaysFocusLookup" order="last"/>
    <completion.confidence language="kotlin" implementationClass="org.jetbrains.kotlin.idea.completion.confidence.EnableAutopopupInStringTemplate"/>
    <completion.confidence language="kotlin" implementationClass="com.intellij.codeInsight.completion.SkipAutopopupInStrings"/>

    <lookup.charFilter implementation="org.jetbrains.kotlin.idea.completion.KotlinCompletionCharFilter"/>
    <lookup.actionProvider implementation="org.jetbrains.kotlin.idea.completion.KotlinExcludeFromCompletionLookupActionProvider"/>

    <statistician key="completion" implementationClass="org.jetbrains.kotlin.idea.completion.KotlinCompletionStatistician"/>
    <statistician key="proximity" implementationClass="org.jetbrains.kotlin.idea.completion.KotlinProximityStatistician"/>

    <weigher key="completion" implementationClass="org.jetbrains.kotlin.idea.completion.KotlinLookupElementProximityWeigher" id="kotlin.proximity" order="after proximity"/>

    <psi.referenceContributor
        id="kotlinFilePathReferenceContributor"
        language="kotlin"
        implementation="org.jetbrains.kotlin.idea.references.KotlinFilePathReferenceContributor"/>

    <psi.treeChangePreprocessor implementation="org.jetbrains.kotlin.idea.caches.KotlinPackageStatementPsiTreeChangePreprocessor"/>

    <renamePsiElementProcessor id="KotlinAwareJavaGetter"
                               implementation="org.jetbrains.kotlin.idea.refactoring.rename.KotlinAwareJavaGetterRenameProcessor"
                               order="first"/>
    <renamePsiElementProcessor id="KotlinClass"
                               implementation="org.jetbrains.kotlin.idea.refactoring.rename.RenameKotlinClassifierProcessor"
                               order="first"/>
    <renamePsiElementProcessor implementation="org.jetbrains.kotlin.idea.refactoring.rename.RenameKotlinFunctionProcessor"
                               id="KotlinFunction"
                               order="first"/>
    <renamePsiElementProcessor implementation="org.jetbrains.kotlin.idea.refactoring.rename.RenameKotlinPropertyProcessor"
                               id="KotlinProperty"
                               order="first"/>
    <renamePsiElementProcessor implementation="org.jetbrains.kotlin.idea.refactoring.rename.RenameKotlinParameterProcessor"
                               id="KotlinParameter"
                               order="first"/>
    <renamePsiElementProcessor implementation="org.jetbrains.kotlin.idea.refactoring.rename.RenameKotlinFileProcessor"
                               id="KotlinFile"
                               order="first"/>
    <renamePsiElementProcessor implementation="org.jetbrains.kotlin.idea.refactoring.rename.RenameKotlinTypeParameterProcessor"
                               id="KotlinTypeParameter"/>
    <renamePsiElementProcessor implementation="org.jetbrains.kotlin.idea.refactoring.rename.RenameJavaSyntheticPropertyHandler$Processor"
                               id="JavaSyntheticPropertyFromKotlin"/>
    <renameHandler implementation="org.jetbrains.kotlin.idea.refactoring.rename.KotlinRenameDispatcherHandler"/>
    <renameHandler implementation="org.jetbrains.kotlin.idea.refactoring.rename.KotlinDirectoryAsPackageRenameHandler"/>
    <automaticRenamerFactory implementation="org.jetbrains.kotlin.idea.refactoring.rename.AutomaticVariableRenamerFactory"/>
    <automaticRenamerFactory implementation="org.jetbrains.kotlin.idea.refactoring.rename.AutomaticVariableRenamerFactoryForJavaClass"/>
    <automaticRenamerFactory implementation="org.jetbrains.kotlin.idea.refactoring.rename.AutomaticVariableInJavaRenamerFactory"/>
    <automaticRenamerFactory implementation="org.jetbrains.kotlin.idea.refactoring.rename.AutomaticInheritorRenamerFactory"/>
    <automaticRenamerFactory implementation="org.jetbrains.kotlin.idea.refactoring.rename.AutomaticOverloadsRenamerFactory"/>
    <automaticRenamerFactory implementation="org.jetbrains.kotlin.idea.refactoring.rename.KotlinAutomaticTestRenamerFactory"/>
    <automaticRenamerFactory implementation="org.jetbrains.kotlin.idea.refactoring.rename.AutomaticParameterRenamerFactory"/>
    <vetoRenameCondition implementation="org.jetbrains.kotlin.idea.refactoring.KotlinVetoRenameCondition"/>
    <renameInputValidator implementation="org.jetbrains.kotlin.idea.refactoring.rename.KotlinDeclarationRenameInputValidator"/>
    <rename.inplace.resolveSnapshotProvider
        language="kotlin"
        implementationClass="org.jetbrains.kotlin.idea.refactoring.rename.KotlinResolveSnapshotProvider"/>

    <spellchecker.support implementationClass="org.jetbrains.kotlin.idea.codeInsight.spellchecker.KotlinSpellcheckingStrategy" language="kotlin"/>

    <liveTemplateContext implementation="org.jetbrains.kotlin.idea.liveTemplates.KotlinTemplateContextType$Generic"/>
    <liveTemplateContext implementation="org.jetbrains.kotlin.idea.liveTemplates.KotlinTemplateContextType$TopLevel"/>
    <liveTemplateContext implementation="org.jetbrains.kotlin.idea.liveTemplates.KotlinTemplateContextType$Statement"/>
    <liveTemplateContext implementation="org.jetbrains.kotlin.idea.liveTemplates.KotlinTemplateContextType$Class"/>
    <liveTemplateContext implementation="org.jetbrains.kotlin.idea.liveTemplates.KotlinTemplateContextType$Expression"/>
    <liveTemplateContext implementation="org.jetbrains.kotlin.idea.liveTemplates.KotlinTemplateContextType$Comment"/>
    <liveTemplateContext implementation="org.jetbrains.kotlin.idea.liveTemplates.KotlinTemplateContextType$ObjectDeclaration"/>
    <defaultLiveTemplatesProvider implementation="org.jetbrains.kotlin.idea.liveTemplates.KotlinLiveTemplatesProvider"/>
    <liveTemplateMacro implementation="org.jetbrains.kotlin.idea.liveTemplates.macro.AnyVariableMacro"/>
    <liveTemplateMacro implementation="org.jetbrains.kotlin.idea.liveTemplates.macro.SuitableVariableMacro"/>
    <liveTemplateMacro implementation="org.jetbrains.kotlin.idea.liveTemplates.macro.FunctionParametersMacro"/>
    <liveTemplateMacro implementation="org.jetbrains.kotlin.idea.liveTemplates.macro.AnonymousSuperMacro"/>
    <liveTemplateMacro implementation="org.jetbrains.kotlin.idea.liveTemplates.macro.SuggestVariableNameMacro"/>
    <liveTemplateMacro implementation="org.jetbrains.kotlin.idea.liveTemplates.macro.KotlinClassNameMacro"/>
    <liveTemplateMacro implementation="org.jetbrains.kotlin.idea.liveTemplates.macro.KotlinFunctionNameMacro"/>
    <liveTemplateMacro implementation="org.jetbrains.kotlin.idea.liveTemplates.macro.KotlinPackageNameMacro"/>
    <liveTemplateMacro implementation="org.jetbrains.kotlin.idea.liveTemplates.macro.KotlinMainArgumentsMacro"/>
    <liveTemplateOptionalProcessor implementation="org.jetbrains.kotlin.idea.liveTemplates.KotlinShortenFQNamesProcessor"/>

    <annotator language="kotlin" implementationClass="org.jetbrains.kotlin.idea.highlighter.KotlinPsiCheckerAndHighlightingUpdater"/>
    <highlightRangeExtension implementation="org.jetbrains.kotlin.idea.highlighter.KotlinPsiChecker"/>
    <daemon.changeLocalityDetector implementation="org.jetbrains.kotlin.idea.highlighter.KotlinChangeLocalityDetector"/>

    <annotator language="kotlin" implementationClass="org.jetbrains.kotlin.idea.highlighter.DebugInfoAnnotator"/>
    <annotator language="kotlin" implementationClass="org.jetbrains.kotlin.idea.highlighter.DuplicateJvmSignatureAnnotator"/>
    <problemHighlightFilter implementation="org.jetbrains.kotlin.idea.highlighter.KotlinProblemHighlightFilter"/>

    <highlightVisitor implementation="org.jetbrains.kotlin.idea.highlighter.KotlinRainbowVisitor"/>

    <annotator language="JAVA" implementationClass="org.jetbrains.kotlin.idea.java.UnimplementedKotlinInterfaceMemberAnnotator"/>

    <extendWordSelectionHandler implementation="org.jetbrains.kotlin.idea.editor.wordSelection.KotlinStatementGroupSelectioner"/>
    <extendWordSelectionHandler implementation="org.jetbrains.kotlin.idea.editor.wordSelection.KotlinCodeBlockSelectioner"/>
    <extendWordSelectionHandler implementation="org.jetbrains.kotlin.idea.editor.wordSelection.KotlinDocCommentSelectioner"/>
    <extendWordSelectionHandler implementation="org.jetbrains.kotlin.idea.editor.wordSelection.KotlinCallExpressionWithLambdaSelectioner"/>
    <extendWordSelectionHandler implementation="org.jetbrains.kotlin.idea.editor.wordSelection.KotlinDeclarationSelectioner"/>
    <extendWordSelectionHandler implementation="org.jetbrains.kotlin.idea.editor.wordSelection.KotlinListSelectioner"/>
    <extendWordSelectionHandler implementation="org.jetbrains.kotlin.idea.editor.wordSelection.KotlinStringLiteralSelectioner"/>
    <extendWordSelectionHandler implementation="org.jetbrains.kotlin.idea.editor.wordSelection.KotlinInvokedExpressionSelectioner"/>
    <extendWordSelectionHandler implementation="org.jetbrains.kotlin.idea.editor.wordSelection.KotlinTypeSelectioner"/>
    <extendWordSelectionHandler implementation="org.jetbrains.kotlin.idea.editor.wordSelection.KotlinSuperTypeSelectioner"/>
    <extendWordSelectionHandler implementation="org.jetbrains.kotlin.idea.editor.wordSelection.KotlinBracketsSelectioner"/>
    <extendWordSelectionHandler implementation="org.jetbrains.kotlin.idea.editor.wordSelection.KotlinLabeledReturnSelectioner"/>
    <extendWordSelectionHandler implementation="org.jetbrains.kotlin.idea.editor.wordSelection.KotlinClassMemberSelectioner"/>
    <extendWordSelectionHandler implementation="org.jetbrains.kotlin.idea.editor.wordSelection.KotlinEscapedIdentifierSelectioner"/>
    <basicWordSelectionFilter implementation="org.jetbrains.kotlin.idea.editor.wordSelection.KotlinWordSelectionFilter"/>

    <typedHandler implementation="org.jetbrains.kotlin.idea.editor.KotlinTypedHandler"/>
    <typedHandler implementation="org.jetbrains.kotlin.idea.kdoc.KDocTypedHandler"/>
    <typedHandler implementation="org.jetbrains.kotlin.idea.editor.KotlinRawStringTypedHandler"/>
    <enterHandlerDelegate implementation="org.jetbrains.kotlin.idea.editor.KotlinEnterHandler"
                          id="KotlinEnterHandler" order="before EnterBetweenBracesHandler"/>
    <enterHandlerDelegate implementation="org.jetbrains.kotlin.idea.editor.KotlinMultilineStringEnterHandler"
                          id="KotlinMultilineStringEnterHandler" order="before EnterBetweenBracesHandler"/>
    <lang.smartEnterProcessor language="kotlin" implementationClass="org.jetbrains.kotlin.idea.editor.KotlinSmartEnterHandler"/>
    <backspaceHandlerDelegate implementation="org.jetbrains.kotlin.idea.editor.KotlinBackspaceHandler"/>
    <backspaceHandlerDelegate implementation="org.jetbrains.kotlin.idea.editor.KotlinStringTemplateBackspaceHandler"/>
    <backspaceHandlerDelegate implementation="org.jetbrains.kotlin.idea.editor.KotlinRawStringBackspaceHandler"/>

    <copyPastePostProcessor implementation="org.jetbrains.kotlin.idea.conversion.copy.ConvertJavaCopyPasteProcessor"/>
    <copyPastePostProcessor implementation="org.jetbrains.kotlin.idea.conversion.copy.ConvertTextJavaCopyPasteProcessor"/>
    <copyPastePostProcessor implementation="org.jetbrains.kotlin.idea.codeInsight.KotlinCopyPasteReferenceProcessor"/>
    <copyPastePreProcessor implementation="org.jetbrains.kotlin.idea.editor.KotlinLiteralCopyPasteProcessor"/>
    <copyPastePostProcessor implementation="org.jetbrains.kotlin.idea.refactoring.cutPaste.MoveDeclarationsCopyPasteProcessor"/>

    <filePasteProvider implementation="org.jetbrains.kotlin.idea.conversion.copy.KotlinFilePasteProvider" order="first"/>

    <breadcrumbsInfoProvider implementation="org.jetbrains.kotlin.idea.codeInsight.KotlinBreadcrumbsInfoProvider"/>

    <lang.documentationProvider language="JAVA" implementationClass="org.jetbrains.kotlin.idea.KotlinDocumentationProvider" order="first"/>
    <documentationProvider implementation="org.jetbrains.kotlin.idea.KotlinDocumentationProvider"/>

    <codeInsight.lineMarkerProvider language="kotlin" implementationClass="org.jetbrains.kotlin.idea.highlighter.markers.KotlinLineMarkerProvider"/>
    <codeInsight.lineMarkerProvider language="kotlin" implementationClass="org.jetbrains.kotlin.idea.highlighter.KotlinRecursiveCallLineMarkerProvider"/>
    <codeInsight.lineMarkerProvider language="kotlin" implementationClass="org.jetbrains.kotlin.idea.highlighter.KotlinSuspendCallLineMarkerProvider"/>
    <runLineMarkerContributor language="kotlin" implementationClass="org.jetbrains.kotlin.idea.highlighter.KotlinRunLineMarkerContributor"/>
    <runLineMarkerContributor language="kotlin" implementationClass="org.jetbrains.kotlin.idea.highlighter.KotlinTestRunLineMarkerContributor"/>

    <iconProvider implementation="org.jetbrains.kotlin.idea.KotlinIconProvider"/>

    <itemPresentationProvider implementationClass="org.jetbrains.kotlin.idea.presentation.KtFunctionPresenter"
                              forClass="org.jetbrains.kotlin.psi.KtFunction"/>
    <itemPresentationProvider implementationClass="org.jetbrains.kotlin.idea.presentation.KtDefaultDeclarationPresenter"
                              forClass="org.jetbrains.kotlin.psi.KtClass"/>
    <itemPresentationProvider implementationClass="org.jetbrains.kotlin.idea.presentation.KtDefaultDeclarationPresenter"
                              forClass="org.jetbrains.kotlin.psi.KtObjectDeclaration"/>
    <itemPresentationProvider implementationClass="org.jetbrains.kotlin.idea.presentation.KtDefaultDeclarationPresenter"
                              forClass="org.jetbrains.kotlin.psi.KtProperty"/>
    <itemPresentationProvider implementationClass="org.jetbrains.kotlin.idea.presentation.KtDefaultDeclarationPresenter"
                              forClass="org.jetbrains.kotlin.psi.KtParameter"/>
    <itemPresentationProvider implementationClass="org.jetbrains.kotlin.idea.presentation.KtDefaultDeclarationPresenter"
                              forClass="org.jetbrains.kotlin.psi.KtTypeAlias"/>

    <gotoTargetRendererProvider id="JetGotoTargetRenderProvider" implementation="org.jetbrains.kotlin.idea.KotlinGotoTargetRenderProvider"
                                order="first"/>
    <elementDescriptionProvider
        implementation="org.jetbrains.kotlin.idea.findUsages.KotlinElementDescriptionProvider"
        order="first"/>
    <elementDescriptionProvider
        implementation="org.jetbrains.kotlin.idea.findUsages.KotlinNonCodeSearchElementDescriptionProvider"/>
    <highlightUsagesHandlerFactory implementation="org.jetbrains.kotlin.idea.highlighter.KotlinHighlightExitPointsHandlerFactory"/>
    <highlightUsagesHandlerFactory implementation="org.jetbrains.kotlin.idea.highlighter.KotlinHighlightImplicitItHandlerFactory"/>
    <findUsagesHandlerFactory implementation="org.jetbrains.kotlin.idea.findUsages.KotlinFindUsagesHandlerFactory"/>
    <usageTypeProvider implementation="org.jetbrains.kotlin.idea.findUsages.KotlinUsageTypeProvider"/>

    <refactoring.safeDeleteProcessor
        id="kotlinProcessor"
        implementation="org.jetbrains.kotlin.idea.refactoring.safeDelete.KotlinSafeDeleteProcessor"
        order="before javaProcessor"/>
    <refactoring.safeDelete.JavaSafeDeleteDelegate
        id="kotlinJavaSafeDeleteDelegate"
        language="kotlin"
        implementationClass="org.jetbrains.kotlin.idea.refactoring.safeDelete.KotlinJavaSafeDeleteDelegate"/>

    <codeInsight.implementMethod language="kotlin" implementationClass="org.jetbrains.kotlin.idea.core.overrideImplement.ImplementMembersHandler"/>
    <codeInsight.overrideMethod language="kotlin" implementationClass="org.jetbrains.kotlin.idea.core.overrideImplement.OverrideMembersHandler"/>

    <typeHierarchyProvider language="kotlin" implementationClass="org.jetbrains.kotlin.idea.hierarchy.KotlinTypeHierarchyProviderBySuperTypeCallEntry"/>
    <typeHierarchyProvider language="kotlin" implementationClass="org.jetbrains.kotlin.idea.hierarchy.KotlinTypeHierarchyProvider"/>
    <typeHierarchyProvider language="JAVA" implementationClass="org.jetbrains.kotlin.idea.hierarchy.KotlinTypeHierarchyProviderBySuperTypeCallEntry" order="last"/>
    <callHierarchyProvider
        language="kotlin"
        implementationClass="org.jetbrains.kotlin.idea.hierarchy.calls.KotlinCallHierarchyProvider" />
    <hierarchy.referenceProcessor implementation="org.jetbrains.kotlin.idea.hierarchy.calls.KotlinCallReferenceProcessor"/>
    <methodHierarchyProvider
        language="kotlin"
        implementationClass="org.jetbrains.kotlin.idea.hierarchy.overrides.KotlinOverrideHierarchyProvider" />

    <java.elementFinder implementation="org.jetbrains.kotlin.asJava.finder.JavaElementFinder"/>
    <java.elementFinder implementation="org.jetbrains.kotlin.idea.core.script.KotlinScriptDependenciesClassFinder"/>
    <java.shortNamesCache implementation="org.jetbrains.kotlin.idea.caches.KotlinShortNamesCache"/>

    <stubElementTypeHolder class="org.jetbrains.kotlin.psi.stubs.elements.KtStubElementTypes"/>
    <stubIndex implementation="org.jetbrains.kotlin.idea.stubindex.KotlinExactPackagesIndex"/>
    <stubIndex implementation="org.jetbrains.kotlin.idea.stubindex.KotlinTopLevelClassByPackageIndex"/>
    <stubIndex implementation="org.jetbrains.kotlin.idea.stubindex.KotlinTopLevelFunctionByPackageIndex"/>
    <stubIndex implementation="org.jetbrains.kotlin.idea.stubindex.KotlinTopLevelPropertyByPackageIndex"/>
    <stubIndex implementation="org.jetbrains.kotlin.idea.stubindex.KotlinTopLevelTypeAliasByPackageIndex"/>
    <stubIndex implementation="org.jetbrains.kotlin.idea.stubindex.KotlinClassShortNameIndex"/>
    <stubIndex implementation="org.jetbrains.kotlin.idea.stubindex.KotlinFullClassNameIndex"/>
    <stubIndex implementation="org.jetbrains.kotlin.idea.stubindex.KotlinPropertyShortNameIndex"/>
    <stubIndex implementation="org.jetbrains.kotlin.idea.stubindex.KotlinFunctionShortNameIndex"/>
    <stubIndex implementation="org.jetbrains.kotlin.idea.stubindex.KotlinTypeAliasShortNameIndex"/>
    <stubIndex implementation="org.jetbrains.kotlin.idea.stubindex.KotlinSuperClassIndex"/>
    <stubIndex implementation="org.jetbrains.kotlin.idea.stubindex.KotlinTopLevelFunctionFqnNameIndex"/>
    <stubIndex implementation="org.jetbrains.kotlin.idea.stubindex.KotlinTopLevelPropertyFqnNameIndex"/>
    <stubIndex implementation="org.jetbrains.kotlin.idea.stubindex.KotlinTopLevelTypeAliasFqNameIndex"/>
    <stubIndex implementation="org.jetbrains.kotlin.idea.stubindex.KotlinTopLevelExtensionsByReceiverTypeIndex"/>
    <stubIndex implementation="org.jetbrains.kotlin.idea.stubindex.KotlinAnnotationsIndex"/>
    <stubIndex implementation="org.jetbrains.kotlin.idea.stubindex.KotlinProbablyNothingFunctionShortNameIndex"/>
    <stubIndex implementation="org.jetbrains.kotlin.idea.stubindex.KotlinProbablyNothingPropertyShortNameIndex"/>
    <stubIndex implementation="org.jetbrains.kotlin.idea.stubindex.KotlinProbablyContractedFunctionShortNameIndex"/>
    <stubIndex implementation="org.jetbrains.kotlin.idea.stubindex.KotlinFileFacadeFqNameIndex"/>
    <stubIndex implementation="org.jetbrains.kotlin.idea.stubindex.KotlinFilePartClassIndex"/>
    <stubIndex implementation="org.jetbrains.kotlin.idea.stubindex.KotlinFileFacadeClassByPackageIndex"/>
    <stubIndex implementation="org.jetbrains.kotlin.idea.stubindex.KotlinFileFacadeShortNameIndex"/>
    <stubIndex implementation="org.jetbrains.kotlin.idea.stubindex.KotlinMultifileClassPartIndex"/>
    <stubIndex implementation="org.jetbrains.kotlin.idea.stubindex.KotlinScriptFqnIndex"/>
    <stubIndex implementation="org.jetbrains.kotlin.idea.stubindex.KotlinTypeAliasByExpansionShortNameIndex"/>
    <stubIndex implementation="org.jetbrains.kotlin.idea.stubindex.KotlinOverridableInternalMembersShortNameIndex"/>

    <psi.classFileDecompiler implementation="org.jetbrains.kotlin.idea.decompiler.classFile.KotlinClassFileDecompiler"/>
    <psi.classFileDecompiler implementation="org.jetbrains.kotlin.idea.decompiler.js.KotlinJavaScriptMetaFileDecompiler"/>
    <psi.classFileDecompiler implementation="org.jetbrains.kotlin.idea.decompiler.builtIns.KotlinBuiltInDecompiler"/>

    <fileBasedIndex implementation="org.jetbrains.kotlin.idea.versions.KotlinJvmMetadataVersionIndex"/>
    <fileBasedIndex implementation="org.jetbrains.kotlin.idea.versions.KotlinJsMetadataVersionIndex"/>
    <fileBasedIndex implementation="org.jetbrains.kotlin.idea.vfilefinder.KotlinClassFileIndex"/>
    <fileBasedIndex implementation="org.jetbrains.kotlin.idea.vfilefinder.KotlinJavaScriptMetaFileIndex"/>
    <fileBasedIndex implementation="org.jetbrains.kotlin.idea.vfilefinder.KotlinMetadataFileIndex"/>
    <fileBasedIndex implementation="org.jetbrains.kotlin.idea.vfilefinder.KotlinMetadataFilePackageIndex"/>
    <fileBasedIndex implementation="org.jetbrains.kotlin.idea.vfilefinder.KotlinModuleMappingIndex"/>
    <fileBasedIndex implementation="org.jetbrains.kotlin.idea.vfilefinder.KotlinPackageSourcesMemberNamesIndex"/>
    <fileBasedIndex implementation="org.jetbrains.kotlin.idea.vfilefinder.KotlinJvmModuleAnnotationsIndex"/>

    <idIndexer filetype="Kotlin" implementationClass="org.jetbrains.kotlin.idea.search.KotlinIdIndexer"/>
    <todoIndexer filetype="Kotlin" implementationClass="org.jetbrains.kotlin.idea.search.KotlinTodoIndexer"/>
    <indexPatternBuilder implementation="org.jetbrains.kotlin.idea.search.KotlinIndexPatternBuilder"/>

    <attachSourcesProvider implementation="org.jetbrains.kotlin.idea.actions.DecompileKotlinToJavaActionProvider"/>

    <gotoDeclarationHandler implementation="org.jetbrains.kotlin.idea.search.ideaExtensions.KotlinImportAliasGotoDeclarationHandler"/>
    <referencesSearch implementation="org.jetbrains.kotlin.idea.search.ideaExtensions.KotlinReferencesSearcher"/>
    <referencesSearch implementation="org.jetbrains.kotlin.idea.search.ideaExtensions.KotlinAliasedImportedElementSearcher"/>
    <directClassInheritorsSearch implementation="org.jetbrains.kotlin.idea.search.ideaExtensions.KotlinDirectInheritorsSearcher"/>
    <overridingMethodsSearch implementation="org.jetbrains.kotlin.idea.search.ideaExtensions.KotlinOverridingMethodsWithGenericsSearcher"/>
    <definitionsScopedSearch implementation="org.jetbrains.kotlin.idea.search.ideaExtensions.KotlinDefinitionsSearcher"/>
    <annotatedElementsSearch implementation="org.jetbrains.kotlin.idea.search.ideaExtensions.KotlinAnnotatedElementsSearcher"/>
    <classesWithAnnotatedMembersSearch implementation="org.jetbrains.kotlin.idea.search.ideaExtensions.KotlinClassesWithAnnotatedMembersSearcher"/>
    <methodReferencesSearch implementation="org.jetbrains.kotlin.idea.search.ideaExtensions.KotlinPropertyAccessorsReferenceSearcher"/>
    <methodReferencesSearch implementation="org.jetbrains.kotlin.idea.search.ideaExtensions.KotlinConstructorDelegationCallReferenceSearcher"/>
    <methodReferencesSearch implementation="org.jetbrains.kotlin.idea.search.ideaExtensions.KotlinOverridingMethodReferenceSearcher"/>
    <methodReferencesSearch implementation="org.jetbrains.kotlin.idea.search.ideaExtensions.KotlinConventionMethodReferencesSearcher"/>
    <methodReferencesSearch implementation="org.jetbrains.kotlin.idea.search.ideaExtensions.DefaultAnnotationMethodKotlinImplicitReferenceSearcher"/>

    <readWriteAccessDetector implementation="org.jetbrains.kotlin.idea.search.ideaExtensions.KotlinReadWriteAccessDetector" id="kotlin"/>

    <applicationService serviceImplementation="org.jetbrains.kotlin.idea.editor.KotlinEditorOptions"/>

    <editorSmartKeysConfigurable instance="org.jetbrains.kotlin.idea.editor.KotlinEditorOptionsConfigurable"/>

    <applicationService serviceImplementation="org.jetbrains.kotlin.idea.refactoring.KotlinRefactoringSettings"/>

    <statementUpDownMover id="jetExpression"
                          implementation="org.jetbrains.kotlin.idea.codeInsight.upDownMover.KotlinExpressionMover"
                          order="before declaration" />

    <statementUpDownMover id="jetDeclaration"
                          implementation="org.jetbrains.kotlin.idea.codeInsight.upDownMover.KotlinDeclarationMover"
                          order="before jetExpression" />

    <moveLeftRightHandler language="kotlin" implementationClass="org.jetbrains.kotlin.idea.codeInsight.KotlinMoveLeftRightHandler"/>

    <joinLinesHandler implementation="org.jetbrains.kotlin.idea.joinLines.JoinDeclarationAndAssignmentHandler"/>
    <joinLinesHandler implementation="org.jetbrains.kotlin.idea.joinLines.JoinInitializerAndIfToElvisHandler"/>
    <joinLinesHandler implementation="org.jetbrains.kotlin.idea.joinLines.JoinBlockIntoSingleStatementHandler"/>
    <joinLinesHandler implementation="org.jetbrains.kotlin.idea.joinLines.JoinStatementsAddSemicolonHandler"/>
    <joinLinesHandler implementation="org.jetbrains.kotlin.idea.joinLines.JoinToStringTemplateHandler"/>
    <joinLinesHandler implementation="org.jetbrains.kotlin.idea.joinLines.JoinWithTrailingCommaHandler"/>

    <targetElementEvaluator
        language="kotlin"
        implementationClass="org.jetbrains.kotlin.idea.search.ideaExtensions.KotlinTargetElementEvaluator" />

    <targetElementUtilExtender implementation="org.jetbrains.kotlin.idea.search.ideaExtensions.KotlinTargetElementEvaluator"/>

    <refactoring.pullUpHelperFactory
        language="kotlin"
        implementationClass="org.jetbrains.kotlin.idea.refactoring.pullUp.KotlinPullUpHelperFactory"/>
    <refactoring.pullUpHelperFactory
        language="JAVA"
        order="first"
        implementationClass="org.jetbrains.kotlin.idea.refactoring.pullUp.JavaToKotlinPullUpHelperFactory"/>

    <lang.refactoringSupport.classMembersRefactoringSupport
        language="kotlin"
        implementationClass="org.jetbrains.kotlin.idea.refactoring.memberInfo.KotlinClassMembersRefactoringSupport"/>

    <refactoring.pushDown
        language="kotlin"
        implementationClass="org.jetbrains.kotlin.idea.refactoring.pushDown.JavaToKotlinPushDownDelegate"/>

    <problemFileHighlightFilter implementation="org.jetbrains.kotlin.idea.projectView.KotlinProblemFileHighlightFilter"/>

    <codeInsight.typeInfo language="kotlin" implementationClass="org.jetbrains.kotlin.idea.codeInsight.KotlinExpressionTypeProvider"/>

    <testCreator language="kotlin" implementationClass="org.jetbrains.kotlin.idea.testIntegration.KotlinTestCreator"/>
    <testFinder implementation="org.jetbrains.kotlin.idea.testIntegration.KotlinTestFinder"/>

    <constantExpressionEvaluator
        language="kotlin"
        implementationClass="org.jetbrains.kotlin.idea.KotlinLightConstantExpressionEvaluator"/>

    <annotationSupport language="kotlin" implementationClass="com.intellij.psi.impl.source.tree.java.JavaAnnotationSupport"/>

    <createFromTemplateHandler implementation="org.jetbrains.kotlin.idea.actions.KotlinCreateFromTemplateHandler"/>
    <defaultTemplatePropertiesProvider implementation="org.jetbrains.kotlin.idea.actions.KotlinDefaultTemplatePropertiesProvider" order="last"/>

    <nameSuggestionProvider implementation="org.jetbrains.kotlin.idea.core.KotlinNameSuggestionProvider"/>

    <usageToPsiElementProvider implementation="org.jetbrains.kotlin.idea.codeInsight.KotlinUsageToPsiElementProvider"/>

    <facetType implementation="org.jetbrains.kotlin.idea.facet.KotlinFacetTypeImpl"/>

    <lang.sliceProvider language="kotlin" implementationClass="org.jetbrains.kotlin.idea.slicer.KotlinSliceProvider"/>

    <usageContextPanelProvider implementation="org.jetbrains.kotlin.idea.slicer.KotlinUsageContextDataInflowPanel$Provider"/>
    <usageContextPanelProvider implementation="org.jetbrains.kotlin.idea.slicer.KotlinUsageContextDataOutflowPanel$Provider"/>

    <gotoRelatedProvider implementation="org.jetbrains.kotlin.idea.goto.KotlinExpectOrActualGotoRelatedProvider"/>

    <declarationRangeHandler key="org.jetbrains.kotlin.psi.KtClassOrObject"
                             implementationClass="org.jetbrains.kotlin.idea.codeInsight.KotlinClassDeclarationRangeHandler"/>

    <declarationRangeHandler key="org.jetbrains.kotlin.psi.KtDeclarationWithBody"
                             implementationClass="org.jetbrains.kotlin.idea.codeInsight.KotlinFunDeclarationRangeHandler"/>

    <lang.jvm.actions.jvmElementActionsFactory implementation="org.jetbrains.kotlin.idea.quickfix.crossLanguage.KotlinElementActionsFactory"/>

    <resolveScopeEnlarger implementation="org.jetbrains.kotlin.idea.CommonModuleResolveScopeEnlarger"/>

    <sdkType implementation="org.jetbrains.kotlin.idea.framework.KotlinSdkType"/>

    <postStartupActivity implementation="org.jetbrains.kotlin.idea.framework.CreateKotlinSdkActivity"/>

    <postStartupActivity implementation="org.jetbrains.kotlin.idea.statistics.KotlinGradleFUSLogger"/>

    <moduleConfigurationEditorProvider implementation="org.jetbrains.kotlin.idea.roots.ui.NonJvmKotlinModuleEditorsProvider"/>

    <projectStructure.sourceRootEditHandler implementation="org.jetbrains.kotlin.idea.roots.ui.KotlinModuleSourceRootEditHandler$Source"/>
    <projectStructure.sourceRootEditHandler implementation="org.jetbrains.kotlin.idea.roots.ui.KotlinModuleSourceRootEditHandler$TestSource"/>
    <projectStructure.sourceRootEditHandler implementation="org.jetbrains.kotlin.idea.roots.ui.KotlinModuleSourceRootEditHandler$Resource"/>
    <projectStructure.sourceRootEditHandler implementation="org.jetbrains.kotlin.idea.roots.ui.KotlinModuleSourceRootEditHandler$TestResource"/>

    <project.converterProvider implementation="org.jetbrains.kotlin.idea.roots.KotlinNonJvmSourceRootConverterProvider"/>

    <orderEnumerationHandlerFactory implementation="org.jetbrains.kotlin.idea.roots.KotlinNonJvmOrderEnumerationHandler$Factory"/>

    <lang.substitutor language="kotlin" order="last" implementationClass="org.jetbrains.kotlin.idea.KotlinLanguageSubstitutor"/>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ImportMemberIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ImportAllMembersIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.SpecifyTypeExplicitlyIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.SpecifyTypeExplicitlyInDestructuringAssignmentIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.RemoveExplicitTypeIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ConvertToBlockBodyIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.conventionNameCalls.ReplaceContainsIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.conventionNameCalls.ReplaceInvokeIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.conventionNameCalls.ReplaceCallWithUnaryOperatorIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.branchedTransformations.intentions.FoldIfToReturnAsymmetricallyIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.branchedTransformations.intentions.UnfoldAssignmentToIfIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.branchedTransformations.intentions.UnfoldPropertyToIfIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.branchedTransformations.intentions.UnfoldAssignmentToWhenIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.branchedTransformations.intentions.UnfoldPropertyToWhenIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.branchedTransformations.intentions.UnfoldReturnToIfIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.branchedTransformations.intentions.UnfoldReturnToWhenIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.branchedTransformations.intentions.DoubleBangToIfThenIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.branchedTransformations.intentions.ElvisToIfThenIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.branchedTransformations.intentions.SafeAccessToIfThenIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.branchedTransformations.intentions.IfToWhenIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.branchedTransformations.intentions.WhenToIfIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.branchedTransformations.intentions.FlattenWhenIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.branchedTransformations.intentions.EliminateWhenSubjectIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.RemoveUnnecessaryParenthesesIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.RemoveExplicitTypeArgumentsIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.RemoveExplicitSuperQualifierIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.InsertCurlyBracesToTemplateIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.MoveLambdaInsideParenthesesIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.InsertExplicitTypeArgumentsIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.declarations.SplitPropertyDeclarationIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.declarations.ConvertMemberToExtensionIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ReconstructTypeInCastOrIsIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.InfixCallToOrdinaryIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ToInfixCallIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ReplaceExplicitFunctionLiteralParamWithItIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ReplaceItWithExplicitFunctionLiteralParamIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.RemoveBracesIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.AddBracesIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ConvertBinaryExpressionWithDemorgansLawIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.SimplifyBooleanWithConstantsIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.AddForLoopIndicesIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.RemoveForLoopIndicesIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.loopToCallChain.UseWithIndexIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.SwapBinaryExpressionIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.SwapStringEqualsIgnoreCaseIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.SplitIfIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ReplaceWithOrdinaryAssignmentIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.SpecifyExplicitLambdaSignatureIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.RemoveExplicitLambdaParameterTypesIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ConvertForEachToForLoopIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ConvertToForEachFunctionCallIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ConvertToStringTemplateIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ConvertToRawStringTemplateIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.OperatorToFunctionIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ConvertToConcatenatedStringIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ConvertFunctionToPropertyIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ConvertPropertyToFunctionIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ConvertReceiverToParameterIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ConvertParameterToReceiverIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ConvertPropertyInitializerToGetterIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.InvertIfConditionIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.refactoring.move.changePackage.ChangePackageIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.refactoring.move.moveDeclarations.ExtractDeclarationFromCurrentFileIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ChangeVisibilityModifierIntention$Public</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ChangeVisibilityModifierIntention$Private</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ChangeVisibilityModifierIntention$Protected</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ChangeVisibilityModifierIntention$Internal</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.AddNameToArgumentIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.AddNamesToFollowingArgumentsIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ReplaceUnderscoreWithParameterNameIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.AddJvmOverloadsIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.AddJvmStaticIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.RemoveArgumentNameIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.IterateExpressionIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.UsePropertyAccessSyntaxIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.quickfix.AddConstModifierIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.IntroduceBackingPropertyIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.JoinDeclarationAndAssignmentIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.testIntegration.KotlinCreateTestIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ObjectLiteralToLambdaIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.DestructureIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.AnonymousFunctionToLambdaIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ImplementAbstractMemberIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ImplementAbstractMemberAsConstructorParameterIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.AddValVarToConstructorParameterAction$Intention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.MoveMemberToCompanionObjectIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.MoveMemberOutOfCompanionObjectIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.CreateKotlinSubClassIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ToRawStringLiteralIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.TrailingCommaIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ToOrdinaryStringLiteralIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.IntroduceVariableIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.IntroduceImportAliasIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.RemoveSingleExpressionStringTemplateIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ReplaceUntilWithRangeToIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.RemoveEmptyParenthesesFromLambdaCallIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ConvertCamelCaseTestFunctionToSpacedIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ConvertSnakeCaseTestFunctionToSpacedIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.copyConcatenatedStringToClipboard.CopyConcatenatedStringToClipboardIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.RemoveConstructorKeywordIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ConvertPrimaryConstructorToSecondaryIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ConvertSecondaryConstructorToPrimaryIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ReplaceSizeCheckWithIsNotEmptyIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ReplaceSizeZeroCheckWithIsEmptyIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.RemoveEmptyClassBodyIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ConvertEnumToSealedClassIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ConvertSealedClassToEnumIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.RemoveRedundantCallsOfConversionMethodsIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.RemoveEmptyPrimaryConstructorIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.RemoveEmptySecondaryConstructorBodyIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ConvertTryFinallyToUseCallIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.AddNamesToCallArgumentsIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ConvertFunctionTypeParameterToReceiverIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ConvertFunctionTypeReceiverToParameterIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ConvertRangeCheckToTwoComparisonsIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.RenameFileToMatchClassIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ConvertObjectLiteralToClassIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.MergeIfsIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.MergeElseIfIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.AddMissingDestructuringIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ConvertToApplyIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ConvertToAlsoIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ConvertToWithIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ConvertToRunIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.MovePropertyToClassBodyIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.MovePropertyToConstructorIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.AddOpenModifierIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ValToObjectIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ChopParameterListIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ChopArgumentListIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.NullableBooleanEqualityCheckToElvisIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ReplaceAddWithPlusAssignIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.AddPropertyAccessorsIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.AddPropertyGetterIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.AddPropertySetterIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.MoveMemberToTopLevelIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ConvertUnsafeCastCallToUnsafeCastIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ConvertUnsafeCastToUnsafeCastCallIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.RemoveLabeledReturnInLambdaIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.AddLabeledReturnInLambdaIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.AddAnnotationUseSiteTargetIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.JoinParameterListIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.JoinArgumentListIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ConvertLineCommentToBlockCommentIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ConvertBlockCommentToLineCommentIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.IndentRawStringIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ConvertVarargParameterToArrayIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ConvertArrayParameterToVarargIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.LambdaToAnonymousFunctionIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.AddWhenRemainingBranchesIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ConvertPropertyGetterToInitializerIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.SamConversionToAnonymousObjectIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.AddThrowsAnnotationIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ConvertNullablePropertyToLateinitIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ConvertLateinitPropertyToNullableIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.parameterInfo.custom.DisableReturnLambdaHintOptionAction</className>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.AddUnderscoresToNumericLiteralIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ReplaceMapGetOrDefaultIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.RemoveUnderscoresFromNumericLiteralIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.RenameClassToContainingFileNameIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ConvertCollectionConstructorToFunction</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ConvertOrdinaryPropertyToLazyIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ConvertLazyPropertyToOrdinaryIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ConvertLambdaToMultiLineIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ConvertLambdaToSingleLineIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <lang.inspectionSuppressor language="kotlin" implementationClass="org.jetbrains.kotlin.idea.inspections.KotlinInspectionSuppressor"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.intentions.ObjectLiteralToLambdaInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="INFO"
                     language="kotlin"
                     key="inspection.object.literal.to.lambda.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.SimplifyAssertNotNullInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="INFORMATION"
                     language="kotlin"
                     key="inspection.simplify.assert.not.null.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.ReformatInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="false"
                     level="WEAK WARNING"
                     language="kotlin"
                     runForWholeFile="true"
                     key="inspection.reformat.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.ReplaceCollectionCountWithSizeInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="false"
                     level="WEAK WARNING"
                     language="kotlin"
                     key="inspection.replace.collection.count.with.size.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.DeprecatedCallableAddReplaceWithInspection"
                     groupPath="Kotlin"
                     groupName="Other problems"
                     enabledByDefault="true"
                     level="INFO"
                     language="kotlin"
                     key="inspection.deprecated.callable.add.replace.with.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.intentions.ConvertToStringTemplateInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="INFO"
                     language="kotlin"
                     key="inspection.convert.to.string.template.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.conventionNameCalls.ReplaceGetOrSetInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="INFO"
                     language="kotlin"
                     key="inspection.replace.get.or.set.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.ReplaceManualRangeWithIndicesCallsInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="INFO"
                     language="kotlin"
                     key="inspection.replace.manual.range.with.indices.calls.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.branchedTransformations.IfThenToElvisInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="INFO"
                     language="kotlin"
                     key="inspection.if.then.to.elvis.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.branchedTransformations.IfThenToSafeAccessInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="INFO"
                     language="kotlin"
                     key="inspection.if.then.to.safe.access.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.FoldInitializerAndIfToElvisInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="INFO"
                     language="kotlin"
                     key="inspection.fold.initializer.and.if.to.elvis.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.intentions.RemoveExplicitTypeArgumentsInspection"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
                     key="inspection.remove.explicit.type.arguments.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.intentions.RemoveExplicitSuperQualifierInspection"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     cleanupTool="true"
                     level="WEAK WARNING"
                     language="kotlin"
                     key="inspection.remove.explicit.super.qualifier.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.SimplifyNegatedBinaryExpressionInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
                     key="inspection.simplify.negated.binary.expression.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.ReplaceWithOperatorAssignmentInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
                     key="inspection.replace.with.operator.assignment.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.branchedTransformations.IntroduceWhenSubjectInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
                     key="inspection.introduce.when.subject.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.RemoveCurlyBracesFromTemplateInspection"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
                     key="inspection.remove.curly.braces.from.template.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.intentions.SimplifyBooleanWithConstantsInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
                     key="inspection.simplify.boolean.with.constants.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.intentions.UsePropertyAccessSyntaxInspection"
                     shortName="UsePropertyAccessSyntax"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     cleanupTool="true"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
                     key="inspection.use.property.access.syntax.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.UnusedSymbolInspection"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     level="WARNING"
                     runForWholeFile="true"
                     language="kotlin"
                     suppressId="unused"
                     key="inspection.unused.symbol.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.UnusedReceiverParameterInspection"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
                     suppressId="unused"
                     key="inspection.unused.receiver.parameter.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.KotlinUnusedImportInspection"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     level="WARNING"
                     runForWholeFile="true"
                     language="kotlin"
                     suppressId="UnusedImport"
                     key="inspection.kotlin.unused.import.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.RedundantSamConstructorInspection"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
                     key="inspection.redundant.sam.constructor.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.UnsafeCastFromDynamicInspection"
                     groupPath="Kotlin"
                     groupName="Probable bugs"
                     enabledByDefault="true"
                     level="INFO"
                     language="kotlin"
                     key="inspection.unsafe.cast.from.dynamic.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.OverridingDeprecatedMemberInspection"
                     shortName="OverridingDeprecatedMember"
                     groupPath="Kotlin"
                     groupName="Other problems"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
                     key="inspection.overriding.deprecated.member.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.kdoc.KDocUnresolvedReferenceInspection"
                     groupPath="Kotlin"
                     groupName="Probable bugs"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
                     key="inspection.k.doc.unresolved.reference.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.kdoc.KDocMissingDocumentationInspection"
                     groupPath="Kotlin"
                     groupName="Other problems"
                     enabledByDefault="false"
                     level="WARNING"
                     language="kotlin"
                     runForWholeFile="true"
                     key="inspection.k.doc.missing.documentation.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.refactoring.move.changePackage.PackageDirectoryMismatchInspection"
                     groupPath="Kotlin"
                     groupName="Java interop issues"
                     enabledByDefault="true"
                     level="INFO"
                     language="kotlin"
                     key="inspection.package.directory.mismatch.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.KotlinCleanupInspection"
                     shortName="KotlinDeprecation"
                     groupPath="Kotlin"
                     groupName="Migration"
                     enabledByDefault="true"
                     cleanupTool="true"
                     level="WARNING"
                     language="kotlin"
                     key="inspection.kotlin.deprecation.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.intentions.RemoveForLoopIndicesInspection"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
                     key="inspection.remove.for.loop.indices.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.intentions.loopToCallChain.LoopToCallChainInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="INFORMATION"
                     key="inspection.loop.to.call.chain.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.intentions.loopToCallChain.UseWithIndexInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="INFO"
                     key="inspection.use.with.index.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.ConflictingExtensionPropertyInspection"
                     groupPath="Kotlin"
                     groupName="Probable bugs"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
                     key="inspection.conflicting.extension.property.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.EqualsOrHashCodeInspection"
                     groupPath="Kotlin"
                     groupName="Probable bugs"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
                     key="inspection.equals.or.hash.code.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.RedundantVisibilityModifierInspection"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     cleanupTool="true"
                     level="WARNING"
                     language="kotlin"
                     key="inspection.redundant.visibility.modifier.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.intentions.DestructureInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="false"
                     cleanupTool="false"
                     level="INFO"
                     language="kotlin"
                     key="inspection.destructure.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.CanBeValInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
                     key="inspection.can.be.val.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.ArrayInDataClassInspection"
                     groupPath="Kotlin"
                     groupName="Probable bugs"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
                     key="inspection.array.in.data.class.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.ProtectedInFinalInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
                     key="inspection.protected.in.final.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.AddVarianceModifierInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="INFORMATION"
                     language="kotlin"
                     key="inspection.add.variance.modifier.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.substring.ReplaceSubstringWithDropLastInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="INFORMATION"
                     language="kotlin"
                     key="inspection.replace.substring.with.drop.last.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.substring.ReplaceSubstringWithTakeInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="INFORMATION"
                     language="kotlin"
                     key="inspection.replace.substring.with.take.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.substring.ReplaceSubstringWithIndexingOperationInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="INFORMATION"
                     language="kotlin"
                     key="inspection.replace.substring.with.indexing.operation.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.substring.ReplaceSubstringWithSubstringAfterInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="INFORMATION"
                     language="kotlin"
                     key="inspection.replace.substring.with.substring.after.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.substring.ReplaceSubstringWithSubstringBeforeInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="INFORMATION"
                     language="kotlin"
                     key="inspection.replace.substring.with.substring.before.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.CanBeParameterInspection"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
                     key="inspection.can.be.parameter.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.RedundantModalityModifierInspection"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     cleanupTool="true"
                     level="WARNING"
                     language="kotlin"
                     key="inspection.redundant.modality.modifier.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.RedundantSemicolonInspection"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     cleanupTool="true"
                     level="WARNING"
                     language="kotlin"
                     key="inspection.redundant.semicolon.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.RedundantUnitReturnTypeInspection"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     cleanupTool="true"
                     level="WARNING"
                     language="kotlin"
                     key="inspection.redundant.unit.return.type.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.RedundantIfInspection"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     cleanupTool="true"
                     level="WEAK WARNING"
                     language="kotlin"
                     key="inspection.redundant.if.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.LeakingThisInspection"
                     groupPath="Kotlin"
                     groupName="Probable bugs"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
                     key="inspection.leaking.this.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.HasPlatformTypeInspection"
                     groupPath="Kotlin"
                     groupName="Java interop issues"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
                     key="inspection.has.platform.type.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.CanBePrimaryConstructorPropertyInspection"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
                     key="inspection.can.be.primary.constructor.property.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.intentions.ConvertLambdaToReferenceInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="INFORMATION"
                     language="kotlin"
                     key="inspection.convert.lambda.to.reference.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.intentions.ConvertReferenceToLambdaInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="INFORMATION"
                     language="kotlin"
                     key="inspection.convert.reference.to.lambda.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.RemoveSetterParameterTypeInspection"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
                     key="inspection.remove.setter.parameter.type.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.conventionNameCalls.ReplaceCallWithBinaryOperatorInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
                     key="inspection.replace.call.with.binary.operator.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.intentions.RemoveSingleExpressionStringTemplateInspection"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
                     key="inspection.remove.single.expression.string.template.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.RemoveToStringInStringTemplateInspection"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     cleanupTool="true"
                     level="WEAK WARNING"
                     language="kotlin"
                     key="inspection.remove.to.string.in.string.template.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.intentions.RemoveEmptyParenthesesFromLambdaCallInspection"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     cleanupTool="true"
                     level="INFO"
                     language="kotlin"
                     key="inspection.remove.empty.parentheses.from.lambda.call.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.ReplaceArrayEqualityOpWithArraysEqualsInspection"
                     groupPath="Kotlin"
                     groupName="Probable bugs"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
                     key="inspection.replace.array.equality.op.with.arrays.equals.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.SimpleRedundantLetInspection"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
                     key="inspection.simple.redundant.let.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.ComplexRedundantLetInspection"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     level="INFO"
                     language="kotlin"
                     key="inspection.complex.redundant.let.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.intentions.ConvertSecondaryConstructorToPrimaryInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
                     key="inspection.convert.secondary.constructor.to.primary.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.intentions.ReplaceSizeCheckWithIsNotEmptyInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
                     key="inspection.replace.size.check.with.is.not.empty.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.intentions.ReplaceSizeZeroCheckWithIsEmptyInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
                     key="inspection.replace.size.zero.check.with.is.empty.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.intentions.RemoveEmptyClassBodyInspection"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     cleanupTool="true"
                     level="INFO"
                     language="kotlin"
                     key="inspection.remove.empty.class.body.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.intentions.RemoveRedundantCallsOfConversionMethodsInspection"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
                     key="inspection.remove.redundant.calls.of.conversion.methods.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.intentions.RemoveEmptyPrimaryConstructorInspection"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     cleanupTool="true"
                     level="WEAK WARNING"
                     language="kotlin"
                     key="inspection.remove.empty.primary.constructor.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.intentions.RemoveEmptySecondaryConstructorBodyInspection"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     cleanupTool="true"
                     level="WEAK WARNING"
                     language="kotlin"
                     key="inspection.remove.empty.secondary.constructor.body.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.intentions.JoinDeclarationAndAssignmentInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
                     key="inspection.join.declaration.and.assignment.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.intentions.ConvertTryFinallyToUseCallInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
                     key="inspection.convert.try.finally.to.use.call.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.ConvertTwoComparisonsToRangeCheckInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="INFO"
                     language="kotlin"
                     key="inspection.convert.two.comparisons.to.range.check.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.ConvertNaNEqualityInspection"
                     groupPath="Kotlin"
                     groupName="Probable bugs"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
                     key="inspection.convert.na.n.equality.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.UnusedEqualsInspection"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
                     key="inspection.unused.equals.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.ReplaceWithEnumMapInspection"
                     groupPath="Kotlin"
                     groupName="Other problems"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
                     key="inspection.replace.with.enum.map.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.DataClassPrivateConstructorInspection"
                     groupPath="Kotlin"
                     groupName="Probable bugs"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
                     key="inspection.data.class.private.constructor.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.DestructuringWrongNameInspection"
                     groupPath="Kotlin"
                     groupName="Probable bugs"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
                     key="inspection.destructuring.wrong.name.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.UnusedLambdaExpressionBodyInspection"
                     groupPath="Kotlin"
                     groupName="Probable bugs"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
                     key="inspection.unused.lambda.expression.body.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.KotlinInternalInJavaInspection"
                     groupPath="Kotlin"
                     groupName="Java interop issues"
                     enabledByDefault="true"
                     level="ERROR"
                     language="JAVA"
                     key="inspection.kotlin.internal.in.java.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.MoveSuspiciousCallableReferenceIntoParenthesesInspection"
                     groupPath="Kotlin"
                     groupName="Probable bugs"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
                     key="inspection.move.suspicious.callable.reference.into.parentheses.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.CopyWithoutNamedArgumentsInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
                     key="inspection.copy.without.named.arguments.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.ReplaceArrayOfWithLiteralInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
                     key="inspection.replace.array.of.with.literal.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.RecursivePropertyAccessorInspection"
                     groupPath="Kotlin"
                     groupName="Probable bugs"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
                     key="inspection.recursive.property.accessor.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.ReplaceRangeToWithUntilInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
                     key="inspection.replace.range.to.with.until.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.MemberVisibilityCanBePrivateInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="INFO"
                     language="kotlin"
                     key="inspection.member.visibility.can.be.private.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.NullableBooleanElvisInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     cleanupTool="true"
                     level="INFO"
                     language="kotlin"
                     key="inspection.nullable.boolean.elvis.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.WrapUnaryOperatorInspection"
                     groupPath="Kotlin"
                     groupName="Probable bugs"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
                     key="inspection.wrap.unary.operator.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.EmptyRangeInspection"
                     groupPath="Kotlin"
                     groupName="Probable bugs"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
                     key="inspection.empty.range.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.RemoveRedundantSpreadOperatorInspection"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
                     key="inspection.remove.redundant.spread.operator.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.collections.UselessCallOnNotNullInspection"
                     groupPath="Kotlin"
                     groupName="Probable bugs"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
                     key="inspection.useless.call.on.not.null.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.RedundantExplicitTypeInspection"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
                     key="inspection.redundant.explicit.type.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.collections.UselessCallOnCollectionInspection"
                     groupPath="Kotlin"
                     groupName="Probable bugs"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
                     key="inspection.useless.call.on.collection.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.collections.SimplifiableCallChainInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
                     key="inspection.simplifiable.call.chain.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.UseExpressionBodyInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="INFORMATION"
                     language="kotlin"
                     key="inspection.use.expression.body.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.LiftReturnOrAssignmentInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="INFO"
                     language="kotlin"
                     key="inspection.lift.return.or.assignment.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.CascadeIfInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="INFO"
                     language="kotlin"
                     key="inspection.cascade.if.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.NullChecksToSafeCallInspection"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
                     key="inspection.null.checks.to.safe.call.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.ConstantConditionIfInspection"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
                     key="inspection.constant.condition.if.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.UnnecessaryVariableInspection"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
                     key="inspection.unnecessary.variable.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.KotlinDoubleNegationInspection"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     cleanupTool="true"
                     level="WEAK WARNING"
                     language="kotlin"
                     suppressId="DoubleNegation"
                     key="inspection.kotlin.double.negation.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.WhenWithOnlyElseInspection"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="false"
                     level="WEAK WARNING"
                     language="kotlin"
                     key="inspection.when.with.only.else.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.RedundantLambdaArrowInspection"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
                     key="inspection.redundant.lambda.arrow.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.ClassNameInspection"
                     language="kotlin"
                     groupPath="Kotlin"
                     groupName="Naming conventions"
                     enabledByDefault="true"
                     level="WEAK WARNING" key="inspection.class.name.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.EnumEntryNameInspection"
                     language="kotlin"
                     groupPath="Kotlin"
                     groupName="Naming conventions"
                     enabledByDefault="true"
                     level="WEAK WARNING" key="inspection.enum.entry.name.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.FunctionNameInspection"
                     language="kotlin"
                     groupPath="Kotlin"
                     groupName="Naming conventions"
                     enabledByDefault="true"
                     level="WEAK WARNING" key="inspection.function.name.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.TestFunctionNameInspection"
                     language="kotlin"
                     groupPath="Kotlin"
                     groupName="Naming conventions"
                     enabledByDefault="true"
                     level="WEAK WARNING" key="inspection.test.function.name.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.PropertyNameInspection"
                     language="kotlin"
                     groupPath="Kotlin"
                     groupName="Naming conventions"
                     enabledByDefault="true"
                     level="WEAK WARNING" key="inspection.property.name.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.ObjectPropertyNameInspection"
                     language="kotlin"
                     groupPath="Kotlin"
                     groupName="Naming conventions"
                     enabledByDefault="true"
                     level="WEAK WARNING" key="inspection.object.property.name.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.PrivatePropertyNameInspection"
                     language="kotlin"
                     groupPath="Kotlin"
                     groupName="Naming conventions"
                     enabledByDefault="true"
                     level="WEAK WARNING" key="inspection.private.property.name.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.ConstPropertyNameInspection"
                     language="kotlin"
                     groupPath="Kotlin"
                     groupName="Naming conventions"
                     enabledByDefault="true"
                     level="WEAK WARNING" key="inspection.const.property.name.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.LocalVariableNameInspection"
                     language="kotlin"
                     groupPath="Kotlin"
                     groupName="Naming conventions"
                     enabledByDefault="true"
                     level="WEAK WARNING" key="inspection.local.variable.name.display.name" bundle="messages.KotlinBundle"/>

    <globalInspection implementationClass="org.jetbrains.kotlin.idea.inspections.PackageNameInspection"
                      language="kotlin"
                      groupPath="Kotlin"
                      groupName="Naming conventions"
                      enabledByDefault="true"
                      level="WEAK WARNING" key="inspection.package.name.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.KotlinRedundantOverrideInspection"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     cleanupTool="true"
                     level="WEAK WARNING"
                     language="kotlin"
                     suppressId="RedundantOverride"
                     key="inspection.kotlin.redundant.override.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.SuspiciousEqualsCombination"
                     groupPath="Kotlin"
                     groupName="Probable bugs"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
                     key="inspection.suspicious.equals.combination.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.RedundantGetterInspection"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     cleanupTool="true"
                     level="WEAK WARNING"
                     language="kotlin" key="inspection.redundant.getter.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.RemoveRedundantBackticksInspection"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin" key="inspection.remove.redundant.backticks.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.RemoveRedundantQualifierNameInspection"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin" key="inspection.remove.redundant.qualifier.name.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.RedundantSetterInspection"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     cleanupTool="true"
                     level="WEAK WARNING"
                     language="kotlin"
                     key="inspection.redundant.setter.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.MigrateDiagnosticSuppressionInspection"
                     groupPath="Kotlin"
                     groupName="Other problems"
                     enabledByDefault="true"
                     cleanupTool="true"
                     level="WARNING"
                     language="kotlin"
                     key="inspection.migrate.diagnostic.suppression.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.ExplicitThisInspection"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     level="INFORMATION"
                     language="kotlin"
                     key="inspection.explicit.this.display.name" bundle="messages.KotlinBundle"/>


    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.ImplicitThisInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="INFORMATION"
                     language="kotlin"
                     key="inspection.implicit.this.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.RedundantUnitExpressionInspection"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
                     key="inspection.redundant.unit.expression.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.SelfAssignmentInspection"
                     groupPath="Kotlin"
                     groupName="Probable bugs"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
                     key="inspection.self.assignment.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.ImplicitNullableNothingTypeInspection"
                     groupPath="Kotlin"
                     groupName="Probable bugs"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
                     key="inspection.implicit.nullable.nothing.type.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.SimplifyWhenWithBooleanConstantConditionInspection"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
                     key="inspection.simplify.when.with.boolean.constant.condition.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.JavaCollectionsStaticMethodInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
                     key="inspection.java.collections.static.method.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.JavaCollectionsStaticMethodOnImmutableListInspection"
                     groupPath="Kotlin"
                     groupName="Java interop issues"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
                     key="inspection.java.collections.static.method.on.immutable.list.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.RecursiveEqualsCallInspection"
                     groupPath="Kotlin"
                     groupName="Probable bugs"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
                     key="inspection.recursive.equals.call.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.ReplaceToWithInfixFormInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
                     key="inspection.replace.to.with.infix.form.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.ReplacePutWithAssignmentInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
                     key="inspection.replace.put.with.assignment.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.RedundantSuspendModifierInspection"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
                     key="inspection.redundant.suspend.modifier.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.SortModifiersInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
                     cleanupTool="true"
                     key="inspection.sort.modifiers.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.MayBeConstantInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
                     key="inspection.may.be.constant.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.TrailingCommaInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
                     key="inspection.trailing.comma.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.FakeJvmFieldConstantInspection"
                     groupPath="Kotlin"
                     groupName="Java interop issues"
                     enabledByDefault="true"
                     level="WARNING"
                     language="JAVA"
                     key="inspection.fake.jvm.field.constant.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.RedundantObjectTypeCheckInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="INFORMATION"
                     language="kotlin"
                     key="inspection.redundant.object.type.check.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.ScopeFunctionConversionInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="INFORMATION"
                     language="kotlin"
                     key="inspection.scope.function.conversion.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.PlatformExtensionReceiverOfInlineInspection"
                     groupPath="Kotlin"
                     groupName="Java interop issues"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
                     key="inspection.platform.extension.receiver.of.inline.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.RedundantNotNullExtensionReceiverOfInlineInspection"
                     groupPath="Kotlin"
                     groupName="Java interop issues"
                     enabledByDefault="false"
                     level="INFORMATION"
                     language="kotlin"
                     key="inspection.redundant.not.null.extension.receiver.of.inline.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.ConvertPairConstructorToToFunctionInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="INFORMATION"
                     language="kotlin"
                     key="inspection.convert.pair.constructor.to.to.function.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.RedundantCompanionReferenceInspection"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
                     key="inspection.redundant.companion.reference.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.PublicApiImplicitTypeInspection"
                     groupPath="Kotlin"
                     groupName="Other problems"
                     enabledByDefault="false"
                     level="WEAK WARNING"
                     language="kotlin"
                     key="inspection.public.api.implicit.type.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.CanSealedSubClassBeObjectInspection"
                     groupPath="Kotlin"
                     groupName="Probable bugs"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
                     key="inspection.can.sealed.sub.class.be.object.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.MoveLambdaOutsideParenthesesInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
                     key="inspection.move.lambda.outside.parentheses.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.MoveVariableDeclarationIntoWhenInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
                     key="inspection.move.variable.declaration.into.when.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.MainFunctionReturnUnitInspection"
                     groupPath="Kotlin"
                     groupName="Probable bugs"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
                     key="inspection.main.function.return.unit.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.coroutines.RedundantAsyncInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
                     key="inspection.redundant.async.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.coroutines.DeferredResultUnusedInspection"
                     groupPath="Kotlin"
                     groupName="Probable bugs"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
                     key="inspection.deferred.result.unused.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.ReplaceStringFormatWithLiteralInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="INFORMATION"
                     language="kotlin"
                     key="inspection.replace.string.format.with.literal.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.ForEachParameterNotUsedInspection"
                     groupPath="Kotlin"
                     groupName="Probable bugs"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
                     key="inspection.for.each.parameter.not.used.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.NestedLambdaShadowedImplicitParameterInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
                     key="inspection.nested.lambda.shadowed.implicit.parameter.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.ReplaceToStringWithStringTemplateInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="INFORMATION"
                     language="kotlin"
                     key="inspection.replace.to.string.with.string.template.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.migration.FromClosedRangeMigrationInspection"
                     groupPath="Kotlin"
                     groupName="Migration"
                     enabledByDefault="false"
                     level="WEAK WARNING"
                     language="kotlin"
                     key="inspection.from.closed.range.migration.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.migration.ProhibitTypeParametersForLocalVariablesMigrationInspection"
                     groupPath="Kotlin"
                     groupName="Migration"
                     enabledByDefault="false"
                     cleanupTool="true"
                     level="ERROR"
                     language="kotlin"
                     key="inspection.prohibit.type.parameters.for.local.variables.migration.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.migration.ProhibitJvmOverloadsOnConstructorsOfAnnotationClassesMigrationInspection"
                     groupPath="Kotlin"
                     groupName="Migration"
                     enabledByDefault="false"
                     cleanupTool="true"
                     level="ERROR"
                     language="kotlin"
                     key="inspection.prohibit.jvm.overloads.on.constructors.of.annotation.classes.migration.display.name"
                     bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.migration.RestrictReturnStatementTargetMigrationInspection"
                     groupPath="Kotlin"
                     groupName="Migration"
                     enabledByDefault="false"
                     cleanupTool="true"
                     level="ERROR"
                     language="kotlin"
                     key="inspection.restrict.return.statement.target.migration.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.migration.RedundantLabelMigrationInspection"
                     groupPath="Kotlin"
                     groupName="Migration"
                     enabledByDefault="false"
                     cleanupTool="true"
                     level="WEAK WARNING"
                     language="kotlin"
                     key="inspection.redundant.label.migration.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.migration.ProhibitUseSiteTargetAnnotationsOnSuperTypesMigrationInspection"
                     groupPath="Kotlin"
                     groupName="Migration"
                     enabledByDefault="false"
                     cleanupTool="true"
                     level="ERROR"
                     language="kotlin"
                     key="inspection.prohibit.use.site.target.annotations.on.super.types.migration.display.name"
                     bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.migration.ProhibitRepeatedUseSiteTargetAnnotationsMigrationInspection"
                     groupPath="Kotlin"
                     groupName="Migration"
                     enabledByDefault="false"
                     cleanupTool="true"
                     level="ERROR"
                     language="kotlin"
                     key="inspection.prohibit.repeated.use.site.target.annotations.migration.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.migration.WarningOnMainUnusedParameterMigrationInspection"
                     groupPath="Kotlin"
                     groupName="Migration"
                     enabledByDefault="false"
                     cleanupTool="true"
                     level="WEAK WARNING"
                     language="kotlin"
                     key="inspection.warning.on.main.unused.parameter.migration.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.migration.ObsoleteExperimentalCoroutinesInspection"
                     groupPath="Kotlin"
                     groupName="Migration"
                     enabledByDefault="true"
                     cleanupTool="true"
                     level="ERROR"
                     language="kotlin"
                     key="inspection.obsolete.experimental.coroutines.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.RedundantWithInspection"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
                     key="inspection.redundant.with.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.collections.ConvertCallChainIntoSequenceInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="INFO"
                     language="kotlin"
                     key="inspection.convert.call.chain.into.sequence.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.SuspiciousAsDynamicInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
                     key="inspection.suspicious.as.dynamic.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.ReplaceAssertBooleanWithAssertEqualityInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
                     key="inspection.replace.assert.boolean.with.assert.equality.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.RedundantReturnLabelInspection"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
                     key="inspection.redundant.return.label.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.coroutines.DirectUseOfResultTypeInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="false"
                     level="WEAK WARNING"
                     language="kotlin"
                     key="inspection.direct.use.of.result.type.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.coroutines.RedundantRunCatchingInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
                     key="inspection.redundant.run.catching.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.collections.SimplifiableCallInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
                     key="inspection.simplifiable.call.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.SafeCastWithReturnInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
                     key="inspection.safe.cast.with.return.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.RemoveEmptyParenthesesFromAnnotationEntryInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
                     key="inspection.remove.empty.parentheses.from.annotation.entry.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.OptionalExpectationInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="INFORMATION"
                     language="kotlin"
                     key="inspection.optional.expectation.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.UnlabeledReturnInsideLambdaInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="INFORMATION"
                     language="kotlin"
                     key="inspection.unlabeled.return.inside.lambda.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.SetterBackingFieldAssignmentInspection"
                     groupPath="Kotlin"
                     groupName="Probable bugs"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
                     key="inspection.setter.backing.field.assignment.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.SuspiciousVarPropertyInspection"
                     groupPath="Kotlin"
                     groupName="Probable bugs"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
                     key="inspection.suspicious.var.property.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.UnusedMainParameterInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="false"
                     level="WEAK WARNING"
                     language="kotlin"
                     key="inspection.unused.main.parameter.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.DelegationToVarPropertyInspection"
                     groupPath="Kotlin"
                     groupName="Probable bugs"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
                     key="inspection.delegation.to.var.property.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.MapGetWithNotNullAssertionOperatorInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="INFO"
                     language="kotlin"
                     key="inspection.map.get.with.not.null.assertion.operator.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.coroutines.DeferredIsResultInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
                     key="inspection.deferred.is.result.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.RedundantElseInIfInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="INFORMATION"
                     language="kotlin"
                     key="inspection.redundant.else.in.if.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.SuspiciousCollectionReassignmentInspection"
                     groupPath="Kotlin"
                     groupName="Probable bugs"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
                     key="inspection.suspicious.collection.reassignment.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.BooleanLiteralArgumentInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="INFO"
                     language="kotlin"
                     key="inspection.boolean.literal.argument.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.coroutines.SuspendFunctionOnCoroutineScopeInspection"
                     groupPath="Kotlin"
                     groupName="Probable bugs"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
                     key="inspection.suspend.function.on.coroutine.scope.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.FunctionWithLambdaExpressionBodyInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
                     key="inspection.function.with.lambda.expression.body.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.ReplaceNegatedIsEmptyWithIsNotEmptyInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
                     key="inspection.replace.negated.is.empty.with.is.not.empty.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.RedundantEnumConstructorInvocationInspection"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
                     key="inspection.redundant.enum.constructor.invocation.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.ReplaceRangeStartEndInclusiveWithFirstLastInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
                     key="inspection.replace.range.start.end.inclusive.with.first.last.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.RedundantRequireNotNullCallInspection"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
                     key="inspection.redundant.require.not.null.call.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.KotlinThrowableNotThrownInspection"
                     groupPath="Kotlin"
                     groupName="Probable bugs"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
                     suppressId="ThrowableNotThrown"
                     key="inspection.kotlin.throwable.not.thrown.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.JavaMapForEachInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
                     key="inspection.java.map.for.each.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.ReplaceAssociateFunctionInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
                     key="inspection.replace.associate.function.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.KotlinCovariantEqualsInspection"
                     groupPath="Kotlin"
                     groupName="Probable bugs"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
                     suppressId="CovariantEquals"
                     key="inspection.kotlin.covariant.equals.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.ReplaceNotNullAssertionWithElvisReturnInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="false"
                     level="WEAK WARNING"
                     language="kotlin"
                     key="inspection.replace.not.null.assertion.with.elvis.return.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.SelfReferenceConstructorParameterInspection"
                     groupPath="Kotlin"
                     groupName="Probable bugs"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
                     key="inspection.self.reference.constructor.parameter.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.jdk2k.ReplaceJavaStaticMethodWithKotlinAnalogInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
                     key="inspection.replace.java.static.method.with.kotlin.analog.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.ControlFlowWithEmptyBodyInspection"
                     groupPath="Kotlin"
                     groupName="Probable bugs"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
                     key="inspection.control.flow.with.empty.body.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.AddOperatorModifierInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="INFORMATION"
                     language="kotlin"
                     key="inspection.add.operator.modifier.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.RedundantEmptyInitializerBlockInspection"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     level="INFO"
                     language="kotlin"
                     key="inspection.redundant.empty.initializer.block.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.KotlinEqualsBetweenInconvertibleTypesInspection"
                     groupPath="Kotlin"
                     groupName="Probable bugs"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
                     suppressId="EqualsBetweenInconvertibleTypes"
                     key="inspection.kotlin.equals.between.inconvertible.types.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.LateinitVarOverridesLateinitVarInspection"
                     groupPath="Kotlin"
                     groupName="Probable bugs"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
                     key="inspection.lateinit.var.overrides.lateinit.var.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.ReplaceGuardClauseWithFunctionCallInspection"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="INFORMATION"
                     language="kotlin"
                     key="inspection.replace.guard.clause.with.function.call.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.UnusedUnaryOperatorInspection"
                     groupPath="Kotlin"
                     groupName="Probable bugs"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
                     key="inspection.unused.unary.operator.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.RedundantInnerClassModifierInspection"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
                     key="inspection.redundant.inner.class.modifier.display.name" bundle="messages.KotlinBundle"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.RedundantElvisReturnNullInspection"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
                     key="inspection.redundant.elvis.return.null.display.name" bundle="messages.KotlinBundle"/>

    <projectService serviceImplementation="org.jetbrains.kotlin.idea.codeInsight.KotlinCodeInsightWorkspaceSettings"/>

    <applicationService serviceImplementation="org.jetbrains.kotlin.idea.codeInsight.KotlinCodeInsightSettings"/>

    <referenceImporter implementation="org.jetbrains.kotlin.idea.quickfix.KotlinReferenceImporter"/>
    <autoImportOptionsProvider instance="org.jetbrains.kotlin.idea.codeInsight.KotlinCodeInsightWorkspaceSettingsProvider"/>

    <fileType.fileViewProviderFactory filetype="KJSM" implementationClass="com.intellij.psi.ClassFileViewProviderFactory"/>
    <filetype.stubBuilder filetype="KJSM" implementationClass="com.intellij.psi.impl.compiled.ClassFileStubBuilder"/>
    <filetype.decompiler filetype="KJSM" implementationClass="com.intellij.psi.impl.compiled.ClassFileDecompiler"/>

    <fileType.fileViewProviderFactory filetype="kotlin_builtins" implementationClass="com.intellij.psi.ClassFileViewProviderFactory"/>
    <filetype.stubBuilder filetype="kotlin_builtins" implementationClass="com.intellij.psi.impl.compiled.ClassFileStubBuilder"/>
    <filetype.decompiler filetype="kotlin_builtins" implementationClass="com.intellij.psi.impl.compiled.ClassFileDecompiler"/>

    <pathMacroExpandableProtocol protocol="kotlin-js-meta"/>

    <deadCode implementation="org.jetbrains.kotlin.idea.inspections.KotlinJUnitStaticEntryPoint"/>

    <!--kotlin script specific extensions-->
    <java.shortNamesCache implementation="org.jetbrains.kotlin.idea.core.script.dependencies.JavaClassesInScriptDependenciesShortNameCache"/>
    <indexedRootsProvider implementation="org.jetbrains.kotlin.idea.core.script.dependencies.KotlinScriptDependenciesIndexableSetContributor"/>
    <psi.clsCustomNavigationPolicy implementation="org.jetbrains.kotlin.idea.core.script.dependencies.ScriptDependencySourceNavigationPolicyForJavaClasses"/>
    <resolveScopeProvider implementation="org.jetbrains.kotlin.idea.core.script.dependencies.KotlinScriptResolveScopeProvider"/>
    <resolveScopeProvider implementation="org.jetbrains.kotlin.idea.core.script.dependencies.ScriptDependenciesResolveScopeProvider"/>

    <checkinHandlerFactory implementation="org.jetbrains.kotlin.idea.vcs.BunchFileCheckInHandlerFactory"/>
    <stripTrailingSpacesFilterFactory implementation="org.jetbrains.kotlin.idea.editor.KotlinStripTrailingSpacesFilterFactory"/>

    <navbar implementation="org.jetbrains.kotlin.idea.navigationToolbar.KotlinNavBarModelExtension" order="first"/>
  </extensions>

  <extensions defaultExtensionNs="org.jetbrains.kotlin">
    <idePlatformKind implementation="org.jetbrains.kotlin.platform.impl.JvmIdePlatformKind"/>
    <idePlatformKind implementation="org.jetbrains.kotlin.platform.impl.JsIdePlatformKind"/>

    <idePlatformKindTooling implementation="org.jetbrains.kotlin.idea.core.platform.impl.JvmIdePlatformKindTooling"/>
    <idePlatformKindTooling implementation="org.jetbrains.kotlin.idea.core.platform.impl.JsIdePlatformKindTooling"/>
  </extensions>
  <resource-bundle>messages.KotlinBundle</resource-bundle>

</idea-plugin>
