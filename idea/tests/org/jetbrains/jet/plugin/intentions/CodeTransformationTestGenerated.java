/*
 * Copyright 2010-2014 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.jet.plugin.intentions;

import junit.framework.Assert;
import junit.framework.Test;
import junit.framework.TestSuite;

import java.io.File;
import java.util.regex.Pattern;
import org.jetbrains.jet.JetTestUtils;
import org.jetbrains.jet.test.InnerTestClasses;
import org.jetbrains.jet.test.TestMetadata;

import org.jetbrains.jet.plugin.intentions.AbstractCodeTransformationTest;

/** This class is generated by {@link org.jetbrains.jet.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@InnerTestClasses({CodeTransformationTestGenerated.IfToAssignment.class, CodeTransformationTestGenerated.IfToReturn.class, CodeTransformationTestGenerated.IfToReturnAsymmetrically.class, CodeTransformationTestGenerated.WhenToAssignment.class, CodeTransformationTestGenerated.WhenToReturn.class, CodeTransformationTestGenerated.AssignmentToIf.class, CodeTransformationTestGenerated.AssignmentToWhen.class, CodeTransformationTestGenerated.PropertyToIf.class, CodeTransformationTestGenerated.PropertyToWhen.class, CodeTransformationTestGenerated.ReturnToIf.class, CodeTransformationTestGenerated.ReturnToWhen.class, CodeTransformationTestGenerated.IfToWhen.class, CodeTransformationTestGenerated.WhenToIf.class, CodeTransformationTestGenerated.Flatten.class, CodeTransformationTestGenerated.Merge.class, CodeTransformationTestGenerated.IntroduceSubject.class, CodeTransformationTestGenerated.EliminateSubject.class, CodeTransformationTestGenerated.Split.class, CodeTransformationTestGenerated.Join.class, CodeTransformationTestGenerated.ConvertMemberToExtension.class, CodeTransformationTestGenerated.ReconstructedType.class, CodeTransformationTestGenerated.RemoveUnnecessaryParentheses.class, CodeTransformationTestGenerated.ReplaceWithDotQualifiedMethodCall.class, CodeTransformationTestGenerated.ReplaceWithInfixFunctionCall.class})
@InnerTestClasses({CodeTransformationTestGenerated.RemoveCurlyBracesFromTemplate.class, CodeTransformationTestGenerated.InsertCurlyBracesToTemplate.class, CodeTransformationTestGenerated.MoveLambdaInsideParenthesis.class})
@InnerTestClasses({CodeTransformationTestGenerated.MoveLambdaInsideParenthesis.class, CodeTransformationTestGenerated.MoveLambdaOutsideParenthesis.class})
public class CodeTransformationTestGenerated extends AbstractCodeTransformationTest {
    @TestMetadata("idea/testData/intentions/moveLambdaInsideParenthesis")
    public static class MoveLambdaInsideParenthesis extends AbstractCodeTransformationTest {
        public void testAllFilesPresentInMoveLambdaInsideParenthesis() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/moveLambdaInsideParenthesis"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("inapplicable1.kt")
        public void testInapplicable1() throws Exception {
            doTestMoveLambdaInsideParenthesis("idea/testData/intentions/moveLambdaInsideParenthesis/inapplicable1.kt");
        }
        
        @TestMetadata("inapplicable2.kt")
        public void testInapplicable2() throws Exception {
            doTestMoveLambdaInsideParenthesis("idea/testData/intentions/moveLambdaInsideParenthesis/inapplicable2.kt");
        }
        
        @TestMetadata("moveLambda1.kt")
        public void testMoveLambda1() throws Exception {
            doTestMoveLambdaInsideParenthesis("idea/testData/intentions/moveLambdaInsideParenthesis/moveLambda1.kt");
        }
        
        @TestMetadata("moveLambda2.kt")
        public void testMoveLambda2() throws Exception {
            doTestMoveLambdaInsideParenthesis("idea/testData/intentions/moveLambdaInsideParenthesis/moveLambda2.kt");
        }
        
        @TestMetadata("moveLambda3.kt")
        public void testMoveLambda3() throws Exception {
            doTestMoveLambdaInsideParenthesis("idea/testData/intentions/moveLambdaInsideParenthesis/moveLambda3.kt");
        }
        
        @TestMetadata("moveLambda4.kt")
        public void testMoveLambda4() throws Exception {
            doTestMoveLambdaInsideParenthesis("idea/testData/intentions/moveLambdaInsideParenthesis/moveLambda4.kt");
        }
        
        @TestMetadata("moveLambda5.kt")
        public void testMoveLambda5() throws Exception {
            doTestMoveLambdaInsideParenthesis("idea/testData/intentions/moveLambdaInsideParenthesis/moveLambda5.kt");
        }
        
        @TestMetadata("moveLambda6.kt")
        public void testMoveLambda6() throws Exception {
            doTestMoveLambdaInsideParenthesis("idea/testData/intentions/moveLambdaInsideParenthesis/moveLambda6.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/moveLambdaOutsideParenthesis")
    public static class MoveLambdaOutsideParenthesis extends AbstractCodeTransformationTest {
        public void testAllFilesPresentInMoveLambdaOutsideParenthesis() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/moveLambdaOutsideParenthesis"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("inapplicable1.kt")
        public void testInapplicable1() throws Exception {
            doTestMoveLambdaOutsideParenthesis("idea/testData/intentions/moveLambdaOutsideParenthesis/inapplicable1.kt");
        }
        
        @TestMetadata("inapplicable2.kt")
        public void testInapplicable2() throws Exception {
            doTestMoveLambdaOutsideParenthesis("idea/testData/intentions/moveLambdaOutsideParenthesis/inapplicable2.kt");
        }
        
        @TestMetadata("inapplicable3.kt")
        public void testInapplicable3() throws Exception {
            doTestMoveLambdaOutsideParenthesis("idea/testData/intentions/moveLambdaOutsideParenthesis/inapplicable3.kt");
        }
        
        @TestMetadata("moveLambda1.kt")
        public void testMoveLambda1() throws Exception {
            doTestMoveLambdaOutsideParenthesis("idea/testData/intentions/moveLambdaOutsideParenthesis/moveLambda1.kt");
        }
        
        @TestMetadata("moveLambda2.kt")
        public void testMoveLambda2() throws Exception {
            doTestMoveLambdaOutsideParenthesis("idea/testData/intentions/moveLambdaOutsideParenthesis/moveLambda2.kt");
        }
        
        @TestMetadata("moveLambda3.kt")
        public void testMoveLambda3() throws Exception {
            doTestMoveLambdaOutsideParenthesis("idea/testData/intentions/moveLambdaOutsideParenthesis/moveLambda3.kt");
        }
        
        @TestMetadata("moveLambda4.kt")
        public void testMoveLambda4() throws Exception {
            doTestMoveLambdaOutsideParenthesis("idea/testData/intentions/moveLambdaOutsideParenthesis/moveLambda4.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/replaceWithInfixFunctionCall")
    public static class ReplaceWithInfixFunctionCall extends AbstractCodeTransformationTest {
        public void testAllFilesPresentInReplaceWithInfixFunctionCall() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/intentions/replaceWithInfixFunctionCall"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("binaryExpressionArgument.kt")
        public void testBinaryExpressionArgument() throws Exception {
            doTestReplaceWithInfixFunctionCall("idea/testData/intentions/replaceWithInfixFunctionCall/binaryExpressionArgument.kt");
        }
        
        @TestMetadata("doubleFunctionCall.kt")
        public void testDoubleFunctionCall() throws Exception {
            doTestReplaceWithInfixFunctionCall("idea/testData/intentions/replaceWithInfixFunctionCall/doubleFunctionCall.kt");
        }
        
        @TestMetadata("doubleFunctionCallWithoutParentheses.kt")
        public void testDoubleFunctionCallWithoutParentheses() throws Exception {
            doTestReplaceWithInfixFunctionCall("idea/testData/intentions/replaceWithInfixFunctionCall/doubleFunctionCallWithoutParentheses.kt");
        }
        
        @TestMetadata("firstParameterLabeled.kt")
        public void testFirstParameterLabeled() throws Exception {
            doTestReplaceWithInfixFunctionCall("idea/testData/intentions/replaceWithInfixFunctionCall/firstParameterLabeled.kt");
        }
        
        @TestMetadata("functionLiteralArgument.kt")
        public void testFunctionLiteralArgument() throws Exception {
            doTestReplaceWithInfixFunctionCall("idea/testData/intentions/replaceWithInfixFunctionCall/functionLiteralArgument.kt");
        }
        
        @TestMetadata("functionSafeCall.kt")
        public void testFunctionSafeCall() throws Exception {
            doTestReplaceWithInfixFunctionCall("idea/testData/intentions/replaceWithInfixFunctionCall/functionSafeCall.kt");
        }
        
        @TestMetadata("multipleArguments.kt")
        public void testMultipleArguments() throws Exception {
            doTestReplaceWithInfixFunctionCall("idea/testData/intentions/replaceWithInfixFunctionCall/multipleArguments.kt");
        }
        
        @TestMetadata("namedArgument.kt")
        public void testNamedArgument() throws Exception {
            doTestReplaceWithInfixFunctionCall("idea/testData/intentions/replaceWithInfixFunctionCall/namedArgument.kt");
        }
        
        @TestMetadata("nullAssertedReceiver.kt")
        public void testNullAssertedReceiver() throws Exception {
            doTestReplaceWithInfixFunctionCall("idea/testData/intentions/replaceWithInfixFunctionCall/nullAssertedReceiver.kt");
        }
        
        @TestMetadata("propertyAccess.kt")
        public void testPropertyAccess() throws Exception {
            doTestReplaceWithInfixFunctionCall("idea/testData/intentions/replaceWithInfixFunctionCall/propertyAccess.kt");
        }
        
        @TestMetadata("secondParameterLabeled.kt")
        public void testSecondParameterLabeled() throws Exception {
            doTestReplaceWithInfixFunctionCall("idea/testData/intentions/replaceWithInfixFunctionCall/secondParameterLabeled.kt");
        }
        
        @TestMetadata("simpleArgumentAndFunctionLiteralArgument.kt")
        public void testSimpleArgumentAndFunctionLiteralArgument() throws Exception {
            doTestReplaceWithInfixFunctionCall("idea/testData/intentions/replaceWithInfixFunctionCall/simpleArgumentAndFunctionLiteralArgument.kt");
        }
        
        @TestMetadata("simpleMethodCall.kt")
        public void testSimpleMethodCall() throws Exception {
            doTestReplaceWithInfixFunctionCall("idea/testData/intentions/replaceWithInfixFunctionCall/simpleMethodCall.kt");
        }
        
        @TestMetadata("zeroArguments.kt")
        public void testZeroArguments() throws Exception {
            doTestReplaceWithInfixFunctionCall("idea/testData/intentions/replaceWithInfixFunctionCall/zeroArguments.kt");
        }
        
    }
    
    public static Test suite() {
        TestSuite suite = new TestSuite("CodeTransformationTestGenerated");
<<<<<<< HEAD
<<<<<<< HEAD
        suite.addTestSuite(IfToAssignment.class);
        suite.addTestSuite(IfToReturn.class);
        suite.addTestSuite(IfToReturnAsymmetrically.class);
        suite.addTestSuite(WhenToAssignment.class);
        suite.addTestSuite(WhenToReturn.class);
        suite.addTestSuite(AssignmentToIf.class);
        suite.addTestSuite(AssignmentToWhen.class);
        suite.addTestSuite(PropertyToIf.class);
        suite.addTestSuite(PropertyToWhen.class);
        suite.addTestSuite(ReturnToIf.class);
        suite.addTestSuite(ReturnToWhen.class);
        suite.addTestSuite(IfToWhen.class);
        suite.addTestSuite(WhenToIf.class);
        suite.addTestSuite(Flatten.class);
        suite.addTestSuite(Merge.class);
        suite.addTestSuite(IntroduceSubject.class);
        suite.addTestSuite(EliminateSubject.class);
        suite.addTestSuite(Split.class);
        suite.addTestSuite(Join.class);
        suite.addTestSuite(ConvertMemberToExtension.class);
        suite.addTestSuite(ReconstructedType.class);
        suite.addTestSuite(RemoveUnnecessaryParentheses.class);
        suite.addTestSuite(ReplaceWithDotQualifiedMethodCall.class);
        suite.addTestSuite(ReplaceWithInfixFunctionCall.class);
        suite.addTestSuite(RemoveCurlyBracesFromTemplate.class);
        suite.addTestSuite(InsertCurlyBracesToTemplate.class);
        suite.addTestSuite(MoveLambdaInsideParenthesis.class);
        suite.addTestSuite(MoveLambdaOutsideParenthesis.class);
        return suite;
    }
}
