/*
 * Copyright 2010-2024 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.incremental;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.util.KtTestUtil;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.GenerateTestsKt}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("jps/jps-plugin/testData/incremental/multiModule/common")
@TestDataPath("$PROJECT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public class IncrementalK1JsKlibMultiModuleCompilerRunnerTestGenerated extends AbstractIncrementalK1JsKlibMultiModuleCompilerRunnerTest {
  private void runTest(String testDataFilePath) {
    KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
  }

  public void testAllFilesPresentInCommon() {
    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("jps/jps-plugin/testData/incremental/multiModule/common"), Pattern.compile("^([^\\.]+)$"), null, true);
  }

  @TestMetadata("classAdded")
  public void testClassAdded() {
    runTest("jps/jps-plugin/testData/incremental/multiModule/common/classAdded/");
  }

  @TestMetadata("classRemoved")
  public void testClassRemoved() {
    runTest("jps/jps-plugin/testData/incremental/multiModule/common/classRemoved/");
  }

  @TestMetadata("constantValueChanged")
  public void testConstantValueChanged() {
    runTest("jps/jps-plugin/testData/incremental/multiModule/common/constantValueChanged/");
  }

  @TestMetadata("copyFileToAnotherModule")
  public void testCopyFileToAnotherModule() {
    runTest("jps/jps-plugin/testData/incremental/multiModule/common/copyFileToAnotherModule/");
  }

  @TestMetadata("defaultArgumentInConstructorRemoved")
  public void testDefaultArgumentInConstructorRemoved() {
    runTest("jps/jps-plugin/testData/incremental/multiModule/common/defaultArgumentInConstructorRemoved/");
  }

  @TestMetadata("defaultParameterAdded")
  public void testDefaultParameterAdded() {
    runTest("jps/jps-plugin/testData/incremental/multiModule/common/defaultParameterAdded/");
  }

  @TestMetadata("defaultParameterAddedForTopLevelFun")
  public void testDefaultParameterAddedForTopLevelFun() {
    runTest("jps/jps-plugin/testData/incremental/multiModule/common/defaultParameterAddedForTopLevelFun/");
  }

  @TestMetadata("defaultParameterRemoved")
  public void testDefaultParameterRemoved() {
    runTest("jps/jps-plugin/testData/incremental/multiModule/common/defaultParameterRemoved/");
  }

  @TestMetadata("defaultParameterRemovedForTopLevelFun")
  public void testDefaultParameterRemovedForTopLevelFun() {
    runTest("jps/jps-plugin/testData/incremental/multiModule/common/defaultParameterRemovedForTopLevelFun/");
  }

  @TestMetadata("defaultValueInConstructorRemoved")
  public void testDefaultValueInConstructorRemoved() {
    runTest("jps/jps-plugin/testData/incremental/multiModule/common/defaultValueInConstructorRemoved/");
  }

  @TestMetadata("duplicatedClass")
  public void testDuplicatedClass() {
    runTest("jps/jps-plugin/testData/incremental/multiModule/common/duplicatedClass/");
  }

  @TestMetadata("exportedDependency")
  public void testExportedDependency() {
    runTest("jps/jps-plugin/testData/incremental/multiModule/common/exportedDependency/");
  }

  @TestMetadata("functionFromDifferentPackageChanged")
  public void testFunctionFromDifferentPackageChanged() {
    runTest("jps/jps-plugin/testData/incremental/multiModule/common/functionFromDifferentPackageChanged/");
  }

  @TestMetadata("inlineFunctionInlined")
  public void testInlineFunctionInlined() {
    runTest("jps/jps-plugin/testData/incremental/multiModule/common/inlineFunctionInlined/");
  }

  @TestMetadata("inlineFunctionTwoPackageParts")
  public void testInlineFunctionTwoPackageParts() {
    runTest("jps/jps-plugin/testData/incremental/multiModule/common/inlineFunctionTwoPackageParts/");
  }

  @TestMetadata("moveFileToAnotherModule")
  public void testMoveFileToAnotherModule() {
    runTest("jps/jps-plugin/testData/incremental/multiModule/common/moveFileToAnotherModule/");
  }

  @TestMetadata("simple")
  public void testSimple() {
    runTest("jps/jps-plugin/testData/incremental/multiModule/common/simple/");
  }

  @TestMetadata("simpleDependency")
  public void testSimpleDependency() {
    runTest("jps/jps-plugin/testData/incremental/multiModule/common/simpleDependency/");
  }

  @TestMetadata("simpleDependencyErrorOnAccessToInternal1")
  public void testSimpleDependencyErrorOnAccessToInternal1() {
    runTest("jps/jps-plugin/testData/incremental/multiModule/common/simpleDependencyErrorOnAccessToInternal1/");
  }

  @TestMetadata("simpleDependencyErrorOnAccessToInternal2")
  public void testSimpleDependencyErrorOnAccessToInternal2() {
    runTest("jps/jps-plugin/testData/incremental/multiModule/common/simpleDependencyErrorOnAccessToInternal2/");
  }

  @TestMetadata("simpleDependencyUnchanged")
  public void testSimpleDependencyUnchanged() {
    runTest("jps/jps-plugin/testData/incremental/multiModule/common/simpleDependencyUnchanged/");
  }

  @TestMetadata("transitiveDependency")
  public void testTransitiveDependency() {
    runTest("jps/jps-plugin/testData/incremental/multiModule/common/transitiveDependency/");
  }

  @TestMetadata("transitiveInlining")
  public void testTransitiveInlining() {
    runTest("jps/jps-plugin/testData/incremental/multiModule/common/transitiveInlining/");
  }

  @TestMetadata("twoDependants")
  public void testTwoDependants() {
    runTest("jps/jps-plugin/testData/incremental/multiModule/common/twoDependants/");
  }

  @TestMetadata("jps/jps-plugin/testData/incremental/multiModule/common/classAdded")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class ClassAdded extends AbstractIncrementalK1JsKlibMultiModuleCompilerRunnerTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
    }

    public void testAllFilesPresentInClassAdded() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("jps/jps-plugin/testData/incremental/multiModule/common/classAdded"), Pattern.compile("^([^\\.]+)$"), null, true);
    }
  }

  @TestMetadata("jps/jps-plugin/testData/incremental/multiModule/common/classRemoved")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class ClassRemoved extends AbstractIncrementalK1JsKlibMultiModuleCompilerRunnerTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
    }

    public void testAllFilesPresentInClassRemoved() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("jps/jps-plugin/testData/incremental/multiModule/common/classRemoved"), Pattern.compile("^([^\\.]+)$"), null, true);
    }
  }

  @TestMetadata("jps/jps-plugin/testData/incremental/multiModule/common/constantValueChanged")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class ConstantValueChanged extends AbstractIncrementalK1JsKlibMultiModuleCompilerRunnerTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
    }

    public void testAllFilesPresentInConstantValueChanged() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("jps/jps-plugin/testData/incremental/multiModule/common/constantValueChanged"), Pattern.compile("^([^\\.]+)$"), null, true);
    }
  }

  @TestMetadata("jps/jps-plugin/testData/incremental/multiModule/common/copyFileToAnotherModule")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class CopyFileToAnotherModule extends AbstractIncrementalK1JsKlibMultiModuleCompilerRunnerTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
    }

    public void testAllFilesPresentInCopyFileToAnotherModule() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("jps/jps-plugin/testData/incremental/multiModule/common/copyFileToAnotherModule"), Pattern.compile("^([^\\.]+)$"), null, true);
    }
  }

  @TestMetadata("jps/jps-plugin/testData/incremental/multiModule/common/defaultArgumentInConstructorRemoved")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class DefaultArgumentInConstructorRemoved extends AbstractIncrementalK1JsKlibMultiModuleCompilerRunnerTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
    }

    public void testAllFilesPresentInDefaultArgumentInConstructorRemoved() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("jps/jps-plugin/testData/incremental/multiModule/common/defaultArgumentInConstructorRemoved"), Pattern.compile("^([^\\.]+)$"), null, true);
    }
  }

  @TestMetadata("jps/jps-plugin/testData/incremental/multiModule/common/defaultParameterAdded")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class DefaultParameterAdded extends AbstractIncrementalK1JsKlibMultiModuleCompilerRunnerTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
    }

    public void testAllFilesPresentInDefaultParameterAdded() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("jps/jps-plugin/testData/incremental/multiModule/common/defaultParameterAdded"), Pattern.compile("^([^\\.]+)$"), null, true);
    }
  }

  @TestMetadata("jps/jps-plugin/testData/incremental/multiModule/common/defaultParameterAddedForTopLevelFun")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class DefaultParameterAddedForTopLevelFun extends AbstractIncrementalK1JsKlibMultiModuleCompilerRunnerTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
    }

    public void testAllFilesPresentInDefaultParameterAddedForTopLevelFun() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("jps/jps-plugin/testData/incremental/multiModule/common/defaultParameterAddedForTopLevelFun"), Pattern.compile("^([^\\.]+)$"), null, true);
    }
  }

  @TestMetadata("jps/jps-plugin/testData/incremental/multiModule/common/defaultParameterRemoved")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class DefaultParameterRemoved extends AbstractIncrementalK1JsKlibMultiModuleCompilerRunnerTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
    }

    public void testAllFilesPresentInDefaultParameterRemoved() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("jps/jps-plugin/testData/incremental/multiModule/common/defaultParameterRemoved"), Pattern.compile("^([^\\.]+)$"), null, true);
    }
  }

  @TestMetadata("jps/jps-plugin/testData/incremental/multiModule/common/defaultParameterRemovedForTopLevelFun")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class DefaultParameterRemovedForTopLevelFun extends AbstractIncrementalK1JsKlibMultiModuleCompilerRunnerTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
    }

    public void testAllFilesPresentInDefaultParameterRemovedForTopLevelFun() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("jps/jps-plugin/testData/incremental/multiModule/common/defaultParameterRemovedForTopLevelFun"), Pattern.compile("^([^\\.]+)$"), null, true);
    }
  }

  @TestMetadata("jps/jps-plugin/testData/incremental/multiModule/common/defaultValueInConstructorRemoved")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class DefaultValueInConstructorRemoved extends AbstractIncrementalK1JsKlibMultiModuleCompilerRunnerTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
    }

    public void testAllFilesPresentInDefaultValueInConstructorRemoved() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("jps/jps-plugin/testData/incremental/multiModule/common/defaultValueInConstructorRemoved"), Pattern.compile("^([^\\.]+)$"), null, true);
    }
  }

  @TestMetadata("jps/jps-plugin/testData/incremental/multiModule/common/duplicatedClass")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class DuplicatedClass extends AbstractIncrementalK1JsKlibMultiModuleCompilerRunnerTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
    }

    public void testAllFilesPresentInDuplicatedClass() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("jps/jps-plugin/testData/incremental/multiModule/common/duplicatedClass"), Pattern.compile("^([^\\.]+)$"), null, true);
    }
  }

  @TestMetadata("jps/jps-plugin/testData/incremental/multiModule/common/exportedDependency")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class ExportedDependency extends AbstractIncrementalK1JsKlibMultiModuleCompilerRunnerTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
    }

    public void testAllFilesPresentInExportedDependency() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("jps/jps-plugin/testData/incremental/multiModule/common/exportedDependency"), Pattern.compile("^([^\\.]+)$"), null, true);
    }
  }

  @TestMetadata("jps/jps-plugin/testData/incremental/multiModule/common/functionFromDifferentPackageChanged")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class FunctionFromDifferentPackageChanged extends AbstractIncrementalK1JsKlibMultiModuleCompilerRunnerTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
    }

    public void testAllFilesPresentInFunctionFromDifferentPackageChanged() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("jps/jps-plugin/testData/incremental/multiModule/common/functionFromDifferentPackageChanged"), Pattern.compile("^([^\\.]+)$"), null, true);
    }
  }

  @TestMetadata("jps/jps-plugin/testData/incremental/multiModule/common/inlineFunctionInlined")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class InlineFunctionInlined extends AbstractIncrementalK1JsKlibMultiModuleCompilerRunnerTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
    }

    public void testAllFilesPresentInInlineFunctionInlined() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("jps/jps-plugin/testData/incremental/multiModule/common/inlineFunctionInlined"), Pattern.compile("^([^\\.]+)$"), null, true);
    }
  }

  @TestMetadata("jps/jps-plugin/testData/incremental/multiModule/common/inlineFunctionTwoPackageParts")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class InlineFunctionTwoPackageParts extends AbstractIncrementalK1JsKlibMultiModuleCompilerRunnerTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
    }

    public void testAllFilesPresentInInlineFunctionTwoPackageParts() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("jps/jps-plugin/testData/incremental/multiModule/common/inlineFunctionTwoPackageParts"), Pattern.compile("^([^\\.]+)$"), null, true);
    }
  }

  @TestMetadata("jps/jps-plugin/testData/incremental/multiModule/common/moveFileToAnotherModule")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class MoveFileToAnotherModule extends AbstractIncrementalK1JsKlibMultiModuleCompilerRunnerTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
    }

    public void testAllFilesPresentInMoveFileToAnotherModule() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("jps/jps-plugin/testData/incremental/multiModule/common/moveFileToAnotherModule"), Pattern.compile("^([^\\.]+)$"), null, true);
    }
  }

  @TestMetadata("jps/jps-plugin/testData/incremental/multiModule/common/simple")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Simple extends AbstractIncrementalK1JsKlibMultiModuleCompilerRunnerTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
    }

    public void testAllFilesPresentInSimple() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("jps/jps-plugin/testData/incremental/multiModule/common/simple"), Pattern.compile("^([^\\.]+)$"), null, true);
    }
  }

  @TestMetadata("jps/jps-plugin/testData/incremental/multiModule/common/simpleDependency")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class SimpleDependency extends AbstractIncrementalK1JsKlibMultiModuleCompilerRunnerTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
    }

    public void testAllFilesPresentInSimpleDependency() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("jps/jps-plugin/testData/incremental/multiModule/common/simpleDependency"), Pattern.compile("^([^\\.]+)$"), null, true);
    }
  }

  @TestMetadata("jps/jps-plugin/testData/incremental/multiModule/common/simpleDependencyErrorOnAccessToInternal1")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class SimpleDependencyErrorOnAccessToInternal1 extends AbstractIncrementalK1JsKlibMultiModuleCompilerRunnerTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
    }

    public void testAllFilesPresentInSimpleDependencyErrorOnAccessToInternal1() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("jps/jps-plugin/testData/incremental/multiModule/common/simpleDependencyErrorOnAccessToInternal1"), Pattern.compile("^([^\\.]+)$"), null, true);
    }
  }

  @TestMetadata("jps/jps-plugin/testData/incremental/multiModule/common/simpleDependencyErrorOnAccessToInternal2")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class SimpleDependencyErrorOnAccessToInternal2 extends AbstractIncrementalK1JsKlibMultiModuleCompilerRunnerTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
    }

    public void testAllFilesPresentInSimpleDependencyErrorOnAccessToInternal2() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("jps/jps-plugin/testData/incremental/multiModule/common/simpleDependencyErrorOnAccessToInternal2"), Pattern.compile("^([^\\.]+)$"), null, true);
    }
  }

  @TestMetadata("jps/jps-plugin/testData/incremental/multiModule/common/simpleDependencyUnchanged")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class SimpleDependencyUnchanged extends AbstractIncrementalK1JsKlibMultiModuleCompilerRunnerTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
    }

    public void testAllFilesPresentInSimpleDependencyUnchanged() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("jps/jps-plugin/testData/incremental/multiModule/common/simpleDependencyUnchanged"), Pattern.compile("^([^\\.]+)$"), null, true);
    }
  }

  @TestMetadata("jps/jps-plugin/testData/incremental/multiModule/common/transitiveDependency")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class TransitiveDependency extends AbstractIncrementalK1JsKlibMultiModuleCompilerRunnerTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
    }

    public void testAllFilesPresentInTransitiveDependency() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("jps/jps-plugin/testData/incremental/multiModule/common/transitiveDependency"), Pattern.compile("^([^\\.]+)$"), null, true);
    }
  }

  @TestMetadata("jps/jps-plugin/testData/incremental/multiModule/common/transitiveInlining")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class TransitiveInlining extends AbstractIncrementalK1JsKlibMultiModuleCompilerRunnerTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
    }

    public void testAllFilesPresentInTransitiveInlining() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("jps/jps-plugin/testData/incremental/multiModule/common/transitiveInlining"), Pattern.compile("^([^\\.]+)$"), null, true);
    }
  }

  @TestMetadata("jps/jps-plugin/testData/incremental/multiModule/common/twoDependants")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class TwoDependants extends AbstractIncrementalK1JsKlibMultiModuleCompilerRunnerTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
    }

    public void testAllFilesPresentInTwoDependants() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("jps/jps-plugin/testData/incremental/multiModule/common/twoDependants"), Pattern.compile("^([^\\.]+)$"), null, true);
    }
  }
}
