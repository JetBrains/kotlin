namespace <root>

// <namespace name="example">
namespace example

internal final class example.A</*0*/ E : jet.Any?> : example.C, example.T {
    public final /*constructor*/ fun </*0*/ E : jet.Any?><init>(): example.A<E>
    internal final override /*1*/ fun bar(): jet.Tuple0
    internal final class example.A.B : example.T {
        public final /*constructor*/ fun <init>(): example.A.B
        internal open override /*1*/ fun foo(): jet.Tuple0
        internal final fun test(): jet.Tuple0
    }
    internal open override /*1*/ fun foo(): jet.Tuple0
    internal final fun test(): jet.Tuple0
}
internal final class example.A1 : jet.Any {
    public final /*constructor*/ fun <init>(): example.A1
    internal final fun test(): jet.Tuple0
}
internal open class example.C : jet.Any {
    public final /*constructor*/ fun <init>(): example.C
    internal final fun bar(): jet.Tuple0
}
internal final class example.CG : example.G<jet.Int> {
    public final /*constructor*/ fun <init>(): example.CG
    internal open override /*1*/ fun foo(): jet.Tuple0
    internal final fun test(): jet.Tuple0
}
internal final class example.ERROR</*0*/ E : jet.Any?> {
    public final /*constructor*/ fun </*0*/ E : jet.Any?><init>(): example.ERROR<E>
    internal final fun test(): jet.Tuple0
}
internal abstract trait example.G</*0*/ T : jet.Any?> : jet.Any {
    internal open fun foo(): jet.Tuple0
}
internal abstract trait example.T : jet.Any {
    internal open fun foo(): jet.Tuple0
}
internal final fun any(/*0*/ a: jet.Any): jet.Tuple0
internal final fun foo(): jet.Tuple0
internal final fun notAnExpression(): jet.Tuple0
// </namespace name="example">
