// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: compiler/ir/serialization.common/src/KotlinIr.proto
// Protobuf Java Version: 4.29.3

package org.jetbrains.kotlin.backend.common.serialization.proto;

/**
 * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter}
 */
public final class IrValueParameter extends
    org.jetbrains.kotlin.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter)
    IrValueParameterOrBuilder {
private static final long serialVersionUID = 0L;
  static {
    org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 29,
      /* patch= */ 3,
      /* suffix= */ "",
      IrValueParameter.class.getName());
  }
  // Use IrValueParameter.newBuilder() to construct.
  private IrValueParameter(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
  }
  private IrValueParameter() {
  }

  public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return org.jetbrains.kotlin.backend.common.serialization.proto.KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_IrValueParameter_descriptor;
  }

  @java.lang.Override
  protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.jetbrains.kotlin.backend.common.serialization.proto.KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_IrValueParameter_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter.class, org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter.Builder.class);
  }

  private int bitField0_;
  public static final int BASE_FIELD_NUMBER = 1;
  private org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base_;
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1 [features = { ... }</code>
   * @return Whether the base field is set.
   */
  @java.lang.Override
  public boolean hasBase() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1 [features = { ... }</code>
   * @return The base.
   */
  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase getBase() {
    return base_ == null ? org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase.getDefaultInstance() : base_;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1 [features = { ... }</code>
   */
  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBaseOrBuilder getBaseOrBuilder() {
    return base_ == null ? org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase.getDefaultInstance() : base_;
  }

  public static final int NAME_TYPE_FIELD_NUMBER = 2;
  private long nameType_ = 0L;
  /**
   * <code>int64 name_type = 2 [features = { ... }</code>
   * @return Whether the nameType field is set.
   */
  @java.lang.Override
  public boolean hasNameType() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <code>int64 name_type = 2 [features = { ... }</code>
   * @return The nameType.
   */
  @java.lang.Override
  public long getNameType() {
    return nameType_;
  }

  public static final int VARARG_ELEMENT_TYPE_FIELD_NUMBER = 3;
  private int varargElementType_ = 0;
  /**
   * <code>int32 vararg_element_type = 3;</code>
   * @return Whether the varargElementType field is set.
   */
  @java.lang.Override
  public boolean hasVarargElementType() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   * <code>int32 vararg_element_type = 3;</code>
   * @return The varargElementType.
   */
  @java.lang.Override
  public int getVarargElementType() {
    return varargElementType_;
  }

  public static final int DEFAULT_VALUE_FIELD_NUMBER = 4;
  private int defaultValue_ = 0;
  /**
   * <code>int32 default_value = 4;</code>
   * @return Whether the defaultValue field is set.
   */
  @java.lang.Override
  public boolean hasDefaultValue() {
    return ((bitField0_ & 0x00000008) != 0);
  }
  /**
   * <code>int32 default_value = 4;</code>
   * @return The defaultValue.
   */
  @java.lang.Override
  public int getDefaultValue() {
    return defaultValue_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    if (!hasBase()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!hasNameType()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!getBase().isInitialized()) {
      memoizedIsInitialized = 0;
      return false;
    }
    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeMessage(1, getBase());
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      output.writeInt64(2, nameType_);
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      output.writeInt32(3, varargElementType_);
    }
    if (((bitField0_ & 0x00000008) != 0)) {
      output.writeInt32(4, defaultValue_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) != 0)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeMessageSize(1, getBase());
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeInt64Size(2, nameType_);
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeInt32Size(3, varargElementType_);
    }
    if (((bitField0_ & 0x00000008) != 0)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeInt32Size(4, defaultValue_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter)) {
      return super.equals(obj);
    }
    org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter other = (org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter) obj;

    if (hasBase() != other.hasBase()) return false;
    if (hasBase()) {
      if (!getBase()
          .equals(other.getBase())) return false;
    }
    if (hasNameType() != other.hasNameType()) return false;
    if (hasNameType()) {
      if (getNameType()
          != other.getNameType()) return false;
    }
    if (hasVarargElementType() != other.hasVarargElementType()) return false;
    if (hasVarargElementType()) {
      if (getVarargElementType()
          != other.getVarargElementType()) return false;
    }
    if (hasDefaultValue() != other.hasDefaultValue()) return false;
    if (hasDefaultValue()) {
      if (getDefaultValue()
          != other.getDefaultValue()) return false;
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasBase()) {
      hash = (37 * hash) + BASE_FIELD_NUMBER;
      hash = (53 * hash) + getBase().hashCode();
    }
    if (hasNameType()) {
      hash = (37 * hash) + NAME_TYPE_FIELD_NUMBER;
      hash = (53 * hash) + org.jetbrains.kotlin.protobuf.Internal.hashLong(
          getNameType());
    }
    if (hasVarargElementType()) {
      hash = (37 * hash) + VARARG_ELEMENT_TYPE_FIELD_NUMBER;
      hash = (53 * hash) + getVarargElementType();
    }
    if (hasDefaultValue()) {
      hash = (37 * hash) + DEFAULT_VALUE_FIELD_NUMBER;
      hash = (53 * hash) + getDefaultValue();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter parseFrom(
      java.nio.ByteBuffer data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter parseFrom(
      java.nio.ByteBuffer data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter parseFrom(byte[] data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter parseFrom(
      byte[] data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter parseFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter parseDelimitedFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter}
   */
  public static final class Builder extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter)
      org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameterOrBuilder {
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.backend.common.serialization.proto.KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_IrValueParameter_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.backend.common.serialization.proto.KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_IrValueParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter.class, org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter.Builder.class);
    }

    // Construct using org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (org.jetbrains.kotlin.protobuf.GeneratedMessage
              .alwaysUseFieldBuilders) {
        getBaseFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      base_ = null;
      if (baseBuilder_ != null) {
        baseBuilder_.dispose();
        baseBuilder_ = null;
      }
      nameType_ = 0L;
      varargElementType_ = 0;
      defaultValue_ = 0;
      return this;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return org.jetbrains.kotlin.backend.common.serialization.proto.KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_IrValueParameter_descriptor;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter getDefaultInstanceForType() {
      return org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter.getDefaultInstance();
    }

    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter build() {
      org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter buildPartial() {
      org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter result = new org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter result) {
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.base_ = baseBuilder_ == null
            ? base_
            : baseBuilder_.build();
        to_bitField0_ |= 0x00000001;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.nameType_ = nameType_;
        to_bitField0_ |= 0x00000002;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.varargElementType_ = varargElementType_;
        to_bitField0_ |= 0x00000004;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.defaultValue_ = defaultValue_;
        to_bitField0_ |= 0x00000008;
      }
      result.bitField0_ |= to_bitField0_;
    }

    @java.lang.Override
    public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
      if (other instanceof org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter) {
        return mergeFrom((org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter other) {
      if (other == org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter.getDefaultInstance()) return this;
      if (other.hasBase()) {
        mergeBase(other.getBase());
      }
      if (other.hasNameType()) {
        setNameType(other.getNameType());
      }
      if (other.hasVarargElementType()) {
        setVarargElementType(other.getVarargElementType());
      }
      if (other.hasDefaultValue()) {
        setDefaultValue(other.getDefaultValue());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      if (!hasBase()) {
        return false;
      }
      if (!hasNameType()) {
        return false;
      }
      if (!getBase().isInitialized()) {
        return false;
      }
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getBaseFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 16: {
              nameType_ = input.readInt64();
              bitField0_ |= 0x00000002;
              break;
            } // case 16
            case 24: {
              varargElementType_ = input.readInt32();
              bitField0_ |= 0x00000004;
              break;
            } // case 24
            case 32: {
              defaultValue_ = input.readInt32();
              bitField0_ |= 0x00000008;
              break;
            } // case 32
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base_;
    private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
        org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase, org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase.Builder, org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBaseOrBuilder> baseBuilder_;
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1 [features = { ... }</code>
     * @return Whether the base field is set.
     */
    public boolean hasBase() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1 [features = { ... }</code>
     * @return The base.
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase getBase() {
      if (baseBuilder_ == null) {
        return base_ == null ? org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase.getDefaultInstance() : base_;
      } else {
        return baseBuilder_.getMessage();
      }
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1 [features = { ... }</code>
     */
    public Builder setBase(org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase value) {
      if (baseBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        base_ = value;
      } else {
        baseBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1 [features = { ... }</code>
     */
    public Builder setBase(
        org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase.Builder builderForValue) {
      if (baseBuilder_ == null) {
        base_ = builderForValue.build();
      } else {
        baseBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1 [features = { ... }</code>
     */
    public Builder mergeBase(org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase value) {
      if (baseBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0) &&
          base_ != null &&
          base_ != org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase.getDefaultInstance()) {
          getBaseBuilder().mergeFrom(value);
        } else {
          base_ = value;
        }
      } else {
        baseBuilder_.mergeFrom(value);
      }
      if (base_ != null) {
        bitField0_ |= 0x00000001;
        onChanged();
      }
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1 [features = { ... }</code>
     */
    public Builder clearBase() {
      bitField0_ = (bitField0_ & ~0x00000001);
      base_ = null;
      if (baseBuilder_ != null) {
        baseBuilder_.dispose();
        baseBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1 [features = { ... }</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase.Builder getBaseBuilder() {
      bitField0_ |= 0x00000001;
      onChanged();
      return getBaseFieldBuilder().getBuilder();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1 [features = { ... }</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBaseOrBuilder getBaseOrBuilder() {
      if (baseBuilder_ != null) {
        return baseBuilder_.getMessageOrBuilder();
      } else {
        return base_ == null ?
            org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase.getDefaultInstance() : base_;
      }
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1 [features = { ... }</code>
     */
    private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
        org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase, org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase.Builder, org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBaseOrBuilder> 
        getBaseFieldBuilder() {
      if (baseBuilder_ == null) {
        baseBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
            org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase, org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase.Builder, org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBaseOrBuilder>(
                getBase(),
                getParentForChildren(),
                isClean());
        base_ = null;
      }
      return baseBuilder_;
    }

    private long nameType_ ;
    /**
     * <code>int64 name_type = 2 [features = { ... }</code>
     * @return Whether the nameType field is set.
     */
    @java.lang.Override
    public boolean hasNameType() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>int64 name_type = 2 [features = { ... }</code>
     * @return The nameType.
     */
    @java.lang.Override
    public long getNameType() {
      return nameType_;
    }
    /**
     * <code>int64 name_type = 2 [features = { ... }</code>
     * @param value The nameType to set.
     * @return This builder for chaining.
     */
    public Builder setNameType(long value) {

      nameType_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <code>int64 name_type = 2 [features = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearNameType() {
      bitField0_ = (bitField0_ & ~0x00000002);
      nameType_ = 0L;
      onChanged();
      return this;
    }

    private int varargElementType_ ;
    /**
     * <code>int32 vararg_element_type = 3;</code>
     * @return Whether the varargElementType field is set.
     */
    @java.lang.Override
    public boolean hasVarargElementType() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>int32 vararg_element_type = 3;</code>
     * @return The varargElementType.
     */
    @java.lang.Override
    public int getVarargElementType() {
      return varargElementType_;
    }
    /**
     * <code>int32 vararg_element_type = 3;</code>
     * @param value The varargElementType to set.
     * @return This builder for chaining.
     */
    public Builder setVarargElementType(int value) {

      varargElementType_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <code>int32 vararg_element_type = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearVarargElementType() {
      bitField0_ = (bitField0_ & ~0x00000004);
      varargElementType_ = 0;
      onChanged();
      return this;
    }

    private int defaultValue_ ;
    /**
     * <code>int32 default_value = 4;</code>
     * @return Whether the defaultValue field is set.
     */
    @java.lang.Override
    public boolean hasDefaultValue() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <code>int32 default_value = 4;</code>
     * @return The defaultValue.
     */
    @java.lang.Override
    public int getDefaultValue() {
      return defaultValue_;
    }
    /**
     * <code>int32 default_value = 4;</code>
     * @param value The defaultValue to set.
     * @return This builder for chaining.
     */
    public Builder setDefaultValue(int value) {

      defaultValue_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <code>int32 default_value = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearDefaultValue() {
      bitField0_ = (bitField0_ & ~0x00000008);
      defaultValue_ = 0;
      onChanged();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter)
  }

  // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter)
  private static final org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter();
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final org.jetbrains.kotlin.protobuf.Parser<IrValueParameter>
      PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<IrValueParameter>() {
    @java.lang.Override
    public IrValueParameter parsePartialFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static org.jetbrains.kotlin.protobuf.Parser<IrValueParameter> parser() {
    return PARSER;
  }

  @java.lang.Override
  public org.jetbrains.kotlin.protobuf.Parser<IrValueParameter> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}
