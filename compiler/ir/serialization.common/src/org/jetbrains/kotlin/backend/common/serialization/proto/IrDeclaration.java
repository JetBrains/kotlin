// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: compiler/ir/serialization.common/src/KotlinIr.proto

package org.jetbrains.kotlin.backend.common.serialization.proto;

/**
 * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration}
 */
public final class IrDeclaration extends
    org.jetbrains.kotlin.protobuf.GeneratedMessageLite implements
    // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration)
    IrDeclarationOrBuilder {
  // Use IrDeclaration.newBuilder() to construct.
  private IrDeclaration(org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder builder) {
    super(builder);
    this.unknownFields = builder.getUnknownFields();
  }
  private IrDeclaration(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.ByteString.EMPTY;}

  private static final IrDeclaration defaultInstance;
  public static IrDeclaration getDefaultInstance() {
    return defaultInstance;
  }

  public IrDeclaration getDefaultInstanceForType() {
    return defaultInstance;
  }

  private final org.jetbrains.kotlin.protobuf.ByteString unknownFields;
  private IrDeclaration(
      org.jetbrains.kotlin.protobuf.CodedInputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    initFields();
    int mutable_bitField0_ = 0;
    org.jetbrains.kotlin.protobuf.ByteString.Output unknownFieldsOutput =
        org.jetbrains.kotlin.protobuf.ByteString.newOutput();
    org.jetbrains.kotlin.protobuf.CodedOutputStream unknownFieldsCodedOutput =
        org.jetbrains.kotlin.protobuf.CodedOutputStream.newInstance(
            unknownFieldsOutput);
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                   extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
          case 10: {
            org.jetbrains.kotlin.backend.common.serialization.proto.IrAnonymousInit.Builder subBuilder = null;
            if (declaratorCase_ == 1) {
              subBuilder = ((org.jetbrains.kotlin.backend.common.serialization.proto.IrAnonymousInit) declarator_).toBuilder();
            }
            declarator_ = input.readMessage(org.jetbrains.kotlin.backend.common.serialization.proto.IrAnonymousInit.PARSER, extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((org.jetbrains.kotlin.backend.common.serialization.proto.IrAnonymousInit) declarator_);
              declarator_ = subBuilder.buildPartial();
            }
            declaratorCase_ = 1;
            break;
          }
          case 18: {
            org.jetbrains.kotlin.backend.common.serialization.proto.IrClass.Builder subBuilder = null;
            if (declaratorCase_ == 2) {
              subBuilder = ((org.jetbrains.kotlin.backend.common.serialization.proto.IrClass) declarator_).toBuilder();
            }
            declarator_ = input.readMessage(org.jetbrains.kotlin.backend.common.serialization.proto.IrClass.PARSER, extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((org.jetbrains.kotlin.backend.common.serialization.proto.IrClass) declarator_);
              declarator_ = subBuilder.buildPartial();
            }
            declaratorCase_ = 2;
            break;
          }
          case 26: {
            org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructor.Builder subBuilder = null;
            if (declaratorCase_ == 3) {
              subBuilder = ((org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructor) declarator_).toBuilder();
            }
            declarator_ = input.readMessage(org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructor.PARSER, extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructor) declarator_);
              declarator_ = subBuilder.buildPartial();
            }
            declaratorCase_ = 3;
            break;
          }
          case 34: {
            org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry.Builder subBuilder = null;
            if (declaratorCase_ == 4) {
              subBuilder = ((org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry) declarator_).toBuilder();
            }
            declarator_ = input.readMessage(org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry.PARSER, extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry) declarator_);
              declarator_ = subBuilder.buildPartial();
            }
            declaratorCase_ = 4;
            break;
          }
          case 42: {
            org.jetbrains.kotlin.backend.common.serialization.proto.IrField.Builder subBuilder = null;
            if (declaratorCase_ == 5) {
              subBuilder = ((org.jetbrains.kotlin.backend.common.serialization.proto.IrField) declarator_).toBuilder();
            }
            declarator_ = input.readMessage(org.jetbrains.kotlin.backend.common.serialization.proto.IrField.PARSER, extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((org.jetbrains.kotlin.backend.common.serialization.proto.IrField) declarator_);
              declarator_ = subBuilder.buildPartial();
            }
            declaratorCase_ = 5;
            break;
          }
          case 50: {
            org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction.Builder subBuilder = null;
            if (declaratorCase_ == 6) {
              subBuilder = ((org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction) declarator_).toBuilder();
            }
            declarator_ = input.readMessage(org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction.PARSER, extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction) declarator_);
              declarator_ = subBuilder.buildPartial();
            }
            declaratorCase_ = 6;
            break;
          }
          case 58: {
            org.jetbrains.kotlin.backend.common.serialization.proto.IrProperty.Builder subBuilder = null;
            if (declaratorCase_ == 7) {
              subBuilder = ((org.jetbrains.kotlin.backend.common.serialization.proto.IrProperty) declarator_).toBuilder();
            }
            declarator_ = input.readMessage(org.jetbrains.kotlin.backend.common.serialization.proto.IrProperty.PARSER, extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((org.jetbrains.kotlin.backend.common.serialization.proto.IrProperty) declarator_);
              declarator_ = subBuilder.buildPartial();
            }
            declaratorCase_ = 7;
            break;
          }
          case 66: {
            org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameter.Builder subBuilder = null;
            if (declaratorCase_ == 8) {
              subBuilder = ((org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameter) declarator_).toBuilder();
            }
            declarator_ = input.readMessage(org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameter.PARSER, extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameter) declarator_);
              declarator_ = subBuilder.buildPartial();
            }
            declaratorCase_ = 8;
            break;
          }
          case 74: {
            org.jetbrains.kotlin.backend.common.serialization.proto.IrVariable.Builder subBuilder = null;
            if (declaratorCase_ == 9) {
              subBuilder = ((org.jetbrains.kotlin.backend.common.serialization.proto.IrVariable) declarator_).toBuilder();
            }
            declarator_ = input.readMessage(org.jetbrains.kotlin.backend.common.serialization.proto.IrVariable.PARSER, extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((org.jetbrains.kotlin.backend.common.serialization.proto.IrVariable) declarator_);
              declarator_ = subBuilder.buildPartial();
            }
            declaratorCase_ = 9;
            break;
          }
          case 82: {
            org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter.Builder subBuilder = null;
            if (declaratorCase_ == 10) {
              subBuilder = ((org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter) declarator_).toBuilder();
            }
            declarator_ = input.readMessage(org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter.PARSER, extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter) declarator_);
              declarator_ = subBuilder.buildPartial();
            }
            declaratorCase_ = 10;
            break;
          }
          case 90: {
            org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedProperty.Builder subBuilder = null;
            if (declaratorCase_ == 11) {
              subBuilder = ((org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedProperty) declarator_).toBuilder();
            }
            declarator_ = input.readMessage(org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedProperty.PARSER, extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedProperty) declarator_);
              declarator_ = subBuilder.buildPartial();
            }
            declaratorCase_ = 11;
            break;
          }
          case 98: {
            org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeAlias.Builder subBuilder = null;
            if (declaratorCase_ == 12) {
              subBuilder = ((org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeAlias) declarator_).toBuilder();
            }
            declarator_ = input.readMessage(org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeAlias.PARSER, extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeAlias) declarator_);
              declarator_ = subBuilder.buildPartial();
            }
            declaratorCase_ = 12;
            break;
          }
        }
      }
    } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
          e.getMessage()).setUnfinishedMessage(this);
    } finally {
      try {
        unknownFieldsCodedOutput.flush();
      } catch (java.io.IOException e) {
      // Should not happen
      } finally {
        unknownFields = unknownFieldsOutput.toByteString();
      }
      makeExtensionsImmutable();
    }
  }
  public static org.jetbrains.kotlin.protobuf.Parser<IrDeclaration> PARSER =
      new org.jetbrains.kotlin.protobuf.AbstractParser<IrDeclaration>() {
    public IrDeclaration parsePartialFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return new IrDeclaration(input, extensionRegistry);
    }
  };

  @java.lang.Override
  public org.jetbrains.kotlin.protobuf.Parser<IrDeclaration> getParserForType() {
    return PARSER;
  }

  private int bitField0_;
  private int declaratorCase_ = 0;
  private java.lang.Object declarator_;
  public enum DeclaratorCase
      implements org.jetbrains.kotlin.protobuf.Internal.EnumLite {
    IR_ANONYMOUS_INIT(1),
    IR_CLASS(2),
    IR_CONSTRUCTOR(3),
    IR_ENUM_ENTRY(4),
    IR_FIELD(5),
    IR_FUNCTION(6),
    IR_PROPERTY(7),
    IR_TYPE_PARAMETER(8),
    IR_VARIABLE(9),
    IR_VALUE_PARAMETER(10),
    IR_LOCAL_DELEGATED_PROPERTY(11),
    IR_TYPE_ALIAS(12),
    DECLARATOR_NOT_SET(0);
    private int value = 0;
    private DeclaratorCase(int value) {
      this.value = value;
    }
    public static DeclaratorCase valueOf(int value) {
      switch (value) {
        case 1: return IR_ANONYMOUS_INIT;
        case 2: return IR_CLASS;
        case 3: return IR_CONSTRUCTOR;
        case 4: return IR_ENUM_ENTRY;
        case 5: return IR_FIELD;
        case 6: return IR_FUNCTION;
        case 7: return IR_PROPERTY;
        case 8: return IR_TYPE_PARAMETER;
        case 9: return IR_VARIABLE;
        case 10: return IR_VALUE_PARAMETER;
        case 11: return IR_LOCAL_DELEGATED_PROPERTY;
        case 12: return IR_TYPE_ALIAS;
        case 0: return DECLARATOR_NOT_SET;
        default: throw new java.lang.IllegalArgumentException(
          "Value is undefined for this oneof enum.");
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public DeclaratorCase
  getDeclaratorCase() {
    return DeclaratorCase.valueOf(
        declaratorCase_);
  }

  public static final int IR_ANONYMOUS_INIT_FIELD_NUMBER = 1;
  /**
   * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrAnonymousInit ir_anonymous_init = 1;</code>
   */
  public boolean hasIrAnonymousInit() {
    return declaratorCase_ == 1;
  }
  /**
   * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrAnonymousInit ir_anonymous_init = 1;</code>
   */
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrAnonymousInit getIrAnonymousInit() {
    if (declaratorCase_ == 1) {
       return (org.jetbrains.kotlin.backend.common.serialization.proto.IrAnonymousInit) declarator_;
    }
    return org.jetbrains.kotlin.backend.common.serialization.proto.IrAnonymousInit.getDefaultInstance();
  }

  public static final int IR_CLASS_FIELD_NUMBER = 2;
  /**
   * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrClass ir_class = 2;</code>
   */
  public boolean hasIrClass() {
    return declaratorCase_ == 2;
  }
  /**
   * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrClass ir_class = 2;</code>
   */
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrClass getIrClass() {
    if (declaratorCase_ == 2) {
       return (org.jetbrains.kotlin.backend.common.serialization.proto.IrClass) declarator_;
    }
    return org.jetbrains.kotlin.backend.common.serialization.proto.IrClass.getDefaultInstance();
  }

  public static final int IR_CONSTRUCTOR_FIELD_NUMBER = 3;
  /**
   * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructor ir_constructor = 3;</code>
   */
  public boolean hasIrConstructor() {
    return declaratorCase_ == 3;
  }
  /**
   * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructor ir_constructor = 3;</code>
   */
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructor getIrConstructor() {
    if (declaratorCase_ == 3) {
       return (org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructor) declarator_;
    }
    return org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructor.getDefaultInstance();
  }

  public static final int IR_ENUM_ENTRY_FIELD_NUMBER = 4;
  /**
   * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry ir_enum_entry = 4;</code>
   */
  public boolean hasIrEnumEntry() {
    return declaratorCase_ == 4;
  }
  /**
   * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry ir_enum_entry = 4;</code>
   */
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry getIrEnumEntry() {
    if (declaratorCase_ == 4) {
       return (org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry) declarator_;
    }
    return org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry.getDefaultInstance();
  }

  public static final int IR_FIELD_FIELD_NUMBER = 5;
  /**
   * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrField ir_field = 5;</code>
   */
  public boolean hasIrField() {
    return declaratorCase_ == 5;
  }
  /**
   * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrField ir_field = 5;</code>
   */
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrField getIrField() {
    if (declaratorCase_ == 5) {
       return (org.jetbrains.kotlin.backend.common.serialization.proto.IrField) declarator_;
    }
    return org.jetbrains.kotlin.backend.common.serialization.proto.IrField.getDefaultInstance();
  }

  public static final int IR_FUNCTION_FIELD_NUMBER = 6;
  /**
   * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction ir_function = 6;</code>
   */
  public boolean hasIrFunction() {
    return declaratorCase_ == 6;
  }
  /**
   * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction ir_function = 6;</code>
   */
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction getIrFunction() {
    if (declaratorCase_ == 6) {
       return (org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction) declarator_;
    }
    return org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction.getDefaultInstance();
  }

  public static final int IR_PROPERTY_FIELD_NUMBER = 7;
  /**
   * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrProperty ir_property = 7;</code>
   */
  public boolean hasIrProperty() {
    return declaratorCase_ == 7;
  }
  /**
   * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrProperty ir_property = 7;</code>
   */
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrProperty getIrProperty() {
    if (declaratorCase_ == 7) {
       return (org.jetbrains.kotlin.backend.common.serialization.proto.IrProperty) declarator_;
    }
    return org.jetbrains.kotlin.backend.common.serialization.proto.IrProperty.getDefaultInstance();
  }

  public static final int IR_TYPE_PARAMETER_FIELD_NUMBER = 8;
  /**
   * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameter ir_type_parameter = 8;</code>
   */
  public boolean hasIrTypeParameter() {
    return declaratorCase_ == 8;
  }
  /**
   * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameter ir_type_parameter = 8;</code>
   */
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameter getIrTypeParameter() {
    if (declaratorCase_ == 8) {
       return (org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameter) declarator_;
    }
    return org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameter.getDefaultInstance();
  }

  public static final int IR_VARIABLE_FIELD_NUMBER = 9;
  /**
   * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrVariable ir_variable = 9;</code>
   */
  public boolean hasIrVariable() {
    return declaratorCase_ == 9;
  }
  /**
   * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrVariable ir_variable = 9;</code>
   */
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrVariable getIrVariable() {
    if (declaratorCase_ == 9) {
       return (org.jetbrains.kotlin.backend.common.serialization.proto.IrVariable) declarator_;
    }
    return org.jetbrains.kotlin.backend.common.serialization.proto.IrVariable.getDefaultInstance();
  }

  public static final int IR_VALUE_PARAMETER_FIELD_NUMBER = 10;
  /**
   * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter ir_value_parameter = 10;</code>
   */
  public boolean hasIrValueParameter() {
    return declaratorCase_ == 10;
  }
  /**
   * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter ir_value_parameter = 10;</code>
   */
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter getIrValueParameter() {
    if (declaratorCase_ == 10) {
       return (org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter) declarator_;
    }
    return org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter.getDefaultInstance();
  }

  public static final int IR_LOCAL_DELEGATED_PROPERTY_FIELD_NUMBER = 11;
  /**
   * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedProperty ir_local_delegated_property = 11;</code>
   */
  public boolean hasIrLocalDelegatedProperty() {
    return declaratorCase_ == 11;
  }
  /**
   * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedProperty ir_local_delegated_property = 11;</code>
   */
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedProperty getIrLocalDelegatedProperty() {
    if (declaratorCase_ == 11) {
       return (org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedProperty) declarator_;
    }
    return org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedProperty.getDefaultInstance();
  }

  public static final int IR_TYPE_ALIAS_FIELD_NUMBER = 12;
  /**
   * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeAlias ir_type_alias = 12;</code>
   */
  public boolean hasIrTypeAlias() {
    return declaratorCase_ == 12;
  }
  /**
   * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeAlias ir_type_alias = 12;</code>
   */
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeAlias getIrTypeAlias() {
    if (declaratorCase_ == 12) {
       return (org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeAlias) declarator_;
    }
    return org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeAlias.getDefaultInstance();
  }

  private void initFields() {
  }
  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    if (hasIrAnonymousInit()) {
      if (!getIrAnonymousInit().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
    }
    if (hasIrClass()) {
      if (!getIrClass().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
    }
    if (hasIrConstructor()) {
      if (!getIrConstructor().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
    }
    if (hasIrEnumEntry()) {
      if (!getIrEnumEntry().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
    }
    if (hasIrField()) {
      if (!getIrField().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
    }
    if (hasIrFunction()) {
      if (!getIrFunction().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
    }
    if (hasIrProperty()) {
      if (!getIrProperty().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
    }
    if (hasIrTypeParameter()) {
      if (!getIrTypeParameter().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
    }
    if (hasIrVariable()) {
      if (!getIrVariable().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
    }
    if (hasIrValueParameter()) {
      if (!getIrValueParameter().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
    }
    if (hasIrLocalDelegatedProperty()) {
      if (!getIrLocalDelegatedProperty().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
    }
    if (hasIrTypeAlias()) {
      if (!getIrTypeAlias().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
    }
    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    getSerializedSize();
    if (declaratorCase_ == 1) {
      output.writeMessage(1, (org.jetbrains.kotlin.backend.common.serialization.proto.IrAnonymousInit) declarator_);
    }
    if (declaratorCase_ == 2) {
      output.writeMessage(2, (org.jetbrains.kotlin.backend.common.serialization.proto.IrClass) declarator_);
    }
    if (declaratorCase_ == 3) {
      output.writeMessage(3, (org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructor) declarator_);
    }
    if (declaratorCase_ == 4) {
      output.writeMessage(4, (org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry) declarator_);
    }
    if (declaratorCase_ == 5) {
      output.writeMessage(5, (org.jetbrains.kotlin.backend.common.serialization.proto.IrField) declarator_);
    }
    if (declaratorCase_ == 6) {
      output.writeMessage(6, (org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction) declarator_);
    }
    if (declaratorCase_ == 7) {
      output.writeMessage(7, (org.jetbrains.kotlin.backend.common.serialization.proto.IrProperty) declarator_);
    }
    if (declaratorCase_ == 8) {
      output.writeMessage(8, (org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameter) declarator_);
    }
    if (declaratorCase_ == 9) {
      output.writeMessage(9, (org.jetbrains.kotlin.backend.common.serialization.proto.IrVariable) declarator_);
    }
    if (declaratorCase_ == 10) {
      output.writeMessage(10, (org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter) declarator_);
    }
    if (declaratorCase_ == 11) {
      output.writeMessage(11, (org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedProperty) declarator_);
    }
    if (declaratorCase_ == 12) {
      output.writeMessage(12, (org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeAlias) declarator_);
    }
    output.writeRawBytes(unknownFields);
  }

  private int memoizedSerializedSize = -1;
  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (declaratorCase_ == 1) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeMessageSize(1, (org.jetbrains.kotlin.backend.common.serialization.proto.IrAnonymousInit) declarator_);
    }
    if (declaratorCase_ == 2) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeMessageSize(2, (org.jetbrains.kotlin.backend.common.serialization.proto.IrClass) declarator_);
    }
    if (declaratorCase_ == 3) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeMessageSize(3, (org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructor) declarator_);
    }
    if (declaratorCase_ == 4) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeMessageSize(4, (org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry) declarator_);
    }
    if (declaratorCase_ == 5) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeMessageSize(5, (org.jetbrains.kotlin.backend.common.serialization.proto.IrField) declarator_);
    }
    if (declaratorCase_ == 6) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeMessageSize(6, (org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction) declarator_);
    }
    if (declaratorCase_ == 7) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeMessageSize(7, (org.jetbrains.kotlin.backend.common.serialization.proto.IrProperty) declarator_);
    }
    if (declaratorCase_ == 8) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeMessageSize(8, (org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameter) declarator_);
    }
    if (declaratorCase_ == 9) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeMessageSize(9, (org.jetbrains.kotlin.backend.common.serialization.proto.IrVariable) declarator_);
    }
    if (declaratorCase_ == 10) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeMessageSize(10, (org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter) declarator_);
    }
    if (declaratorCase_ == 11) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeMessageSize(11, (org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedProperty) declarator_);
    }
    if (declaratorCase_ == 12) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeMessageSize(12, (org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeAlias) declarator_);
    }
    size += unknownFields.size();
    memoizedSerializedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @java.lang.Override
  protected java.lang.Object writeReplace()
      throws java.io.ObjectStreamException {
    return super.writeReplace();
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration parseFrom(byte[] data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration parseFrom(
      byte[] data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration parseFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration parseDelimitedFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }

  public static Builder newBuilder() { return Builder.create(); }
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder(org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration prototype) {
    return newBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() { return newBuilder(this); }

  /**
   * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration}
   */
  public static final class Builder extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
        org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration, Builder>
      implements
      // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration)
      org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationOrBuilder {
    // Construct using org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private void maybeForceBuilderInitialization() {
    }
    private static Builder create() {
      return new Builder();
    }

    public Builder clear() {
      super.clear();
      declaratorCase_ = 0;
      declarator_ = null;
      return this;
    }

    public Builder clone() {
      return create().mergeFrom(buildPartial());
    }

    public org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration getDefaultInstanceForType() {
      return org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration.getDefaultInstance();
    }

    public org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration build() {
      org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration buildPartial() {
      org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration result = new org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (declaratorCase_ == 1) {
        result.declarator_ = declarator_;
      }
      if (declaratorCase_ == 2) {
        result.declarator_ = declarator_;
      }
      if (declaratorCase_ == 3) {
        result.declarator_ = declarator_;
      }
      if (declaratorCase_ == 4) {
        result.declarator_ = declarator_;
      }
      if (declaratorCase_ == 5) {
        result.declarator_ = declarator_;
      }
      if (declaratorCase_ == 6) {
        result.declarator_ = declarator_;
      }
      if (declaratorCase_ == 7) {
        result.declarator_ = declarator_;
      }
      if (declaratorCase_ == 8) {
        result.declarator_ = declarator_;
      }
      if (declaratorCase_ == 9) {
        result.declarator_ = declarator_;
      }
      if (declaratorCase_ == 10) {
        result.declarator_ = declarator_;
      }
      if (declaratorCase_ == 11) {
        result.declarator_ = declarator_;
      }
      if (declaratorCase_ == 12) {
        result.declarator_ = declarator_;
      }
      result.bitField0_ = to_bitField0_;
      result.declaratorCase_ = declaratorCase_;
      return result;
    }

    public Builder mergeFrom(org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration other) {
      if (other == org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration.getDefaultInstance()) return this;
      switch (other.getDeclaratorCase()) {
        case IR_ANONYMOUS_INIT: {
          mergeIrAnonymousInit(other.getIrAnonymousInit());
          break;
        }
        case IR_CLASS: {
          mergeIrClass(other.getIrClass());
          break;
        }
        case IR_CONSTRUCTOR: {
          mergeIrConstructor(other.getIrConstructor());
          break;
        }
        case IR_ENUM_ENTRY: {
          mergeIrEnumEntry(other.getIrEnumEntry());
          break;
        }
        case IR_FIELD: {
          mergeIrField(other.getIrField());
          break;
        }
        case IR_FUNCTION: {
          mergeIrFunction(other.getIrFunction());
          break;
        }
        case IR_PROPERTY: {
          mergeIrProperty(other.getIrProperty());
          break;
        }
        case IR_TYPE_PARAMETER: {
          mergeIrTypeParameter(other.getIrTypeParameter());
          break;
        }
        case IR_VARIABLE: {
          mergeIrVariable(other.getIrVariable());
          break;
        }
        case IR_VALUE_PARAMETER: {
          mergeIrValueParameter(other.getIrValueParameter());
          break;
        }
        case IR_LOCAL_DELEGATED_PROPERTY: {
          mergeIrLocalDelegatedProperty(other.getIrLocalDelegatedProperty());
          break;
        }
        case IR_TYPE_ALIAS: {
          mergeIrTypeAlias(other.getIrTypeAlias());
          break;
        }
        case DECLARATOR_NOT_SET: {
          break;
        }
      }
      setUnknownFields(
          getUnknownFields().concat(other.unknownFields));
      return this;
    }

    public final boolean isInitialized() {
      if (hasIrAnonymousInit()) {
        if (!getIrAnonymousInit().isInitialized()) {
          
          return false;
        }
      }
      if (hasIrClass()) {
        if (!getIrClass().isInitialized()) {
          
          return false;
        }
      }
      if (hasIrConstructor()) {
        if (!getIrConstructor().isInitialized()) {
          
          return false;
        }
      }
      if (hasIrEnumEntry()) {
        if (!getIrEnumEntry().isInitialized()) {
          
          return false;
        }
      }
      if (hasIrField()) {
        if (!getIrField().isInitialized()) {
          
          return false;
        }
      }
      if (hasIrFunction()) {
        if (!getIrFunction().isInitialized()) {
          
          return false;
        }
      }
      if (hasIrProperty()) {
        if (!getIrProperty().isInitialized()) {
          
          return false;
        }
      }
      if (hasIrTypeParameter()) {
        if (!getIrTypeParameter().isInitialized()) {
          
          return false;
        }
      }
      if (hasIrVariable()) {
        if (!getIrVariable().isInitialized()) {
          
          return false;
        }
      }
      if (hasIrValueParameter()) {
        if (!getIrValueParameter().isInitialized()) {
          
          return false;
        }
      }
      if (hasIrLocalDelegatedProperty()) {
        if (!getIrLocalDelegatedProperty().isInitialized()) {
          
          return false;
        }
      }
      if (hasIrTypeAlias()) {
        if (!getIrTypeAlias().isInitialized()) {
          
          return false;
        }
      }
      return true;
    }

    public Builder mergeFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration) e.getUnfinishedMessage();
        throw e;
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int declaratorCase_ = 0;
    private java.lang.Object declarator_;
    public DeclaratorCase
        getDeclaratorCase() {
      return DeclaratorCase.valueOf(
          declaratorCase_);
    }

    public Builder clearDeclarator() {
      declaratorCase_ = 0;
      declarator_ = null;
      return this;
    }

    private int bitField0_;

    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrAnonymousInit ir_anonymous_init = 1;</code>
     */
    public boolean hasIrAnonymousInit() {
      return declaratorCase_ == 1;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrAnonymousInit ir_anonymous_init = 1;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrAnonymousInit getIrAnonymousInit() {
      if (declaratorCase_ == 1) {
        return (org.jetbrains.kotlin.backend.common.serialization.proto.IrAnonymousInit) declarator_;
      }
      return org.jetbrains.kotlin.backend.common.serialization.proto.IrAnonymousInit.getDefaultInstance();
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrAnonymousInit ir_anonymous_init = 1;</code>
     */
    public Builder setIrAnonymousInit(org.jetbrains.kotlin.backend.common.serialization.proto.IrAnonymousInit value) {
      if (value == null) {
        throw new NullPointerException();
      }
      declarator_ = value;

      declaratorCase_ = 1;
      return this;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrAnonymousInit ir_anonymous_init = 1;</code>
     */
    public Builder setIrAnonymousInit(
        org.jetbrains.kotlin.backend.common.serialization.proto.IrAnonymousInit.Builder builderForValue) {
      declarator_ = builderForValue.build();

      declaratorCase_ = 1;
      return this;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrAnonymousInit ir_anonymous_init = 1;</code>
     */
    public Builder mergeIrAnonymousInit(org.jetbrains.kotlin.backend.common.serialization.proto.IrAnonymousInit value) {
      if (declaratorCase_ == 1 &&
          declarator_ != org.jetbrains.kotlin.backend.common.serialization.proto.IrAnonymousInit.getDefaultInstance()) {
        declarator_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrAnonymousInit.newBuilder((org.jetbrains.kotlin.backend.common.serialization.proto.IrAnonymousInit) declarator_)
            .mergeFrom(value).buildPartial();
      } else {
        declarator_ = value;
      }

      declaratorCase_ = 1;
      return this;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrAnonymousInit ir_anonymous_init = 1;</code>
     */
    public Builder clearIrAnonymousInit() {
      if (declaratorCase_ == 1) {
        declaratorCase_ = 0;
        declarator_ = null;
        
      }
      return this;
    }

    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrClass ir_class = 2;</code>
     */
    public boolean hasIrClass() {
      return declaratorCase_ == 2;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrClass ir_class = 2;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrClass getIrClass() {
      if (declaratorCase_ == 2) {
        return (org.jetbrains.kotlin.backend.common.serialization.proto.IrClass) declarator_;
      }
      return org.jetbrains.kotlin.backend.common.serialization.proto.IrClass.getDefaultInstance();
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrClass ir_class = 2;</code>
     */
    public Builder setIrClass(org.jetbrains.kotlin.backend.common.serialization.proto.IrClass value) {
      if (value == null) {
        throw new NullPointerException();
      }
      declarator_ = value;

      declaratorCase_ = 2;
      return this;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrClass ir_class = 2;</code>
     */
    public Builder setIrClass(
        org.jetbrains.kotlin.backend.common.serialization.proto.IrClass.Builder builderForValue) {
      declarator_ = builderForValue.build();

      declaratorCase_ = 2;
      return this;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrClass ir_class = 2;</code>
     */
    public Builder mergeIrClass(org.jetbrains.kotlin.backend.common.serialization.proto.IrClass value) {
      if (declaratorCase_ == 2 &&
          declarator_ != org.jetbrains.kotlin.backend.common.serialization.proto.IrClass.getDefaultInstance()) {
        declarator_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrClass.newBuilder((org.jetbrains.kotlin.backend.common.serialization.proto.IrClass) declarator_)
            .mergeFrom(value).buildPartial();
      } else {
        declarator_ = value;
      }

      declaratorCase_ = 2;
      return this;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrClass ir_class = 2;</code>
     */
    public Builder clearIrClass() {
      if (declaratorCase_ == 2) {
        declaratorCase_ = 0;
        declarator_ = null;
        
      }
      return this;
    }

    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructor ir_constructor = 3;</code>
     */
    public boolean hasIrConstructor() {
      return declaratorCase_ == 3;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructor ir_constructor = 3;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructor getIrConstructor() {
      if (declaratorCase_ == 3) {
        return (org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructor) declarator_;
      }
      return org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructor.getDefaultInstance();
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructor ir_constructor = 3;</code>
     */
    public Builder setIrConstructor(org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructor value) {
      if (value == null) {
        throw new NullPointerException();
      }
      declarator_ = value;

      declaratorCase_ = 3;
      return this;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructor ir_constructor = 3;</code>
     */
    public Builder setIrConstructor(
        org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructor.Builder builderForValue) {
      declarator_ = builderForValue.build();

      declaratorCase_ = 3;
      return this;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructor ir_constructor = 3;</code>
     */
    public Builder mergeIrConstructor(org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructor value) {
      if (declaratorCase_ == 3 &&
          declarator_ != org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructor.getDefaultInstance()) {
        declarator_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructor.newBuilder((org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructor) declarator_)
            .mergeFrom(value).buildPartial();
      } else {
        declarator_ = value;
      }

      declaratorCase_ = 3;
      return this;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructor ir_constructor = 3;</code>
     */
    public Builder clearIrConstructor() {
      if (declaratorCase_ == 3) {
        declaratorCase_ = 0;
        declarator_ = null;
        
      }
      return this;
    }

    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry ir_enum_entry = 4;</code>
     */
    public boolean hasIrEnumEntry() {
      return declaratorCase_ == 4;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry ir_enum_entry = 4;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry getIrEnumEntry() {
      if (declaratorCase_ == 4) {
        return (org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry) declarator_;
      }
      return org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry.getDefaultInstance();
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry ir_enum_entry = 4;</code>
     */
    public Builder setIrEnumEntry(org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry value) {
      if (value == null) {
        throw new NullPointerException();
      }
      declarator_ = value;

      declaratorCase_ = 4;
      return this;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry ir_enum_entry = 4;</code>
     */
    public Builder setIrEnumEntry(
        org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry.Builder builderForValue) {
      declarator_ = builderForValue.build();

      declaratorCase_ = 4;
      return this;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry ir_enum_entry = 4;</code>
     */
    public Builder mergeIrEnumEntry(org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry value) {
      if (declaratorCase_ == 4 &&
          declarator_ != org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry.getDefaultInstance()) {
        declarator_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry.newBuilder((org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry) declarator_)
            .mergeFrom(value).buildPartial();
      } else {
        declarator_ = value;
      }

      declaratorCase_ = 4;
      return this;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry ir_enum_entry = 4;</code>
     */
    public Builder clearIrEnumEntry() {
      if (declaratorCase_ == 4) {
        declaratorCase_ = 0;
        declarator_ = null;
        
      }
      return this;
    }

    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrField ir_field = 5;</code>
     */
    public boolean hasIrField() {
      return declaratorCase_ == 5;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrField ir_field = 5;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrField getIrField() {
      if (declaratorCase_ == 5) {
        return (org.jetbrains.kotlin.backend.common.serialization.proto.IrField) declarator_;
      }
      return org.jetbrains.kotlin.backend.common.serialization.proto.IrField.getDefaultInstance();
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrField ir_field = 5;</code>
     */
    public Builder setIrField(org.jetbrains.kotlin.backend.common.serialization.proto.IrField value) {
      if (value == null) {
        throw new NullPointerException();
      }
      declarator_ = value;

      declaratorCase_ = 5;
      return this;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrField ir_field = 5;</code>
     */
    public Builder setIrField(
        org.jetbrains.kotlin.backend.common.serialization.proto.IrField.Builder builderForValue) {
      declarator_ = builderForValue.build();

      declaratorCase_ = 5;
      return this;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrField ir_field = 5;</code>
     */
    public Builder mergeIrField(org.jetbrains.kotlin.backend.common.serialization.proto.IrField value) {
      if (declaratorCase_ == 5 &&
          declarator_ != org.jetbrains.kotlin.backend.common.serialization.proto.IrField.getDefaultInstance()) {
        declarator_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrField.newBuilder((org.jetbrains.kotlin.backend.common.serialization.proto.IrField) declarator_)
            .mergeFrom(value).buildPartial();
      } else {
        declarator_ = value;
      }

      declaratorCase_ = 5;
      return this;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrField ir_field = 5;</code>
     */
    public Builder clearIrField() {
      if (declaratorCase_ == 5) {
        declaratorCase_ = 0;
        declarator_ = null;
        
      }
      return this;
    }

    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction ir_function = 6;</code>
     */
    public boolean hasIrFunction() {
      return declaratorCase_ == 6;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction ir_function = 6;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction getIrFunction() {
      if (declaratorCase_ == 6) {
        return (org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction) declarator_;
      }
      return org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction.getDefaultInstance();
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction ir_function = 6;</code>
     */
    public Builder setIrFunction(org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction value) {
      if (value == null) {
        throw new NullPointerException();
      }
      declarator_ = value;

      declaratorCase_ = 6;
      return this;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction ir_function = 6;</code>
     */
    public Builder setIrFunction(
        org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction.Builder builderForValue) {
      declarator_ = builderForValue.build();

      declaratorCase_ = 6;
      return this;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction ir_function = 6;</code>
     */
    public Builder mergeIrFunction(org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction value) {
      if (declaratorCase_ == 6 &&
          declarator_ != org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction.getDefaultInstance()) {
        declarator_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction.newBuilder((org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction) declarator_)
            .mergeFrom(value).buildPartial();
      } else {
        declarator_ = value;
      }

      declaratorCase_ = 6;
      return this;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction ir_function = 6;</code>
     */
    public Builder clearIrFunction() {
      if (declaratorCase_ == 6) {
        declaratorCase_ = 0;
        declarator_ = null;
        
      }
      return this;
    }

    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrProperty ir_property = 7;</code>
     */
    public boolean hasIrProperty() {
      return declaratorCase_ == 7;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrProperty ir_property = 7;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrProperty getIrProperty() {
      if (declaratorCase_ == 7) {
        return (org.jetbrains.kotlin.backend.common.serialization.proto.IrProperty) declarator_;
      }
      return org.jetbrains.kotlin.backend.common.serialization.proto.IrProperty.getDefaultInstance();
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrProperty ir_property = 7;</code>
     */
    public Builder setIrProperty(org.jetbrains.kotlin.backend.common.serialization.proto.IrProperty value) {
      if (value == null) {
        throw new NullPointerException();
      }
      declarator_ = value;

      declaratorCase_ = 7;
      return this;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrProperty ir_property = 7;</code>
     */
    public Builder setIrProperty(
        org.jetbrains.kotlin.backend.common.serialization.proto.IrProperty.Builder builderForValue) {
      declarator_ = builderForValue.build();

      declaratorCase_ = 7;
      return this;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrProperty ir_property = 7;</code>
     */
    public Builder mergeIrProperty(org.jetbrains.kotlin.backend.common.serialization.proto.IrProperty value) {
      if (declaratorCase_ == 7 &&
          declarator_ != org.jetbrains.kotlin.backend.common.serialization.proto.IrProperty.getDefaultInstance()) {
        declarator_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrProperty.newBuilder((org.jetbrains.kotlin.backend.common.serialization.proto.IrProperty) declarator_)
            .mergeFrom(value).buildPartial();
      } else {
        declarator_ = value;
      }

      declaratorCase_ = 7;
      return this;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrProperty ir_property = 7;</code>
     */
    public Builder clearIrProperty() {
      if (declaratorCase_ == 7) {
        declaratorCase_ = 0;
        declarator_ = null;
        
      }
      return this;
    }

    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameter ir_type_parameter = 8;</code>
     */
    public boolean hasIrTypeParameter() {
      return declaratorCase_ == 8;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameter ir_type_parameter = 8;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameter getIrTypeParameter() {
      if (declaratorCase_ == 8) {
        return (org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameter) declarator_;
      }
      return org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameter.getDefaultInstance();
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameter ir_type_parameter = 8;</code>
     */
    public Builder setIrTypeParameter(org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameter value) {
      if (value == null) {
        throw new NullPointerException();
      }
      declarator_ = value;

      declaratorCase_ = 8;
      return this;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameter ir_type_parameter = 8;</code>
     */
    public Builder setIrTypeParameter(
        org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameter.Builder builderForValue) {
      declarator_ = builderForValue.build();

      declaratorCase_ = 8;
      return this;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameter ir_type_parameter = 8;</code>
     */
    public Builder mergeIrTypeParameter(org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameter value) {
      if (declaratorCase_ == 8 &&
          declarator_ != org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameter.getDefaultInstance()) {
        declarator_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameter.newBuilder((org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameter) declarator_)
            .mergeFrom(value).buildPartial();
      } else {
        declarator_ = value;
      }

      declaratorCase_ = 8;
      return this;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameter ir_type_parameter = 8;</code>
     */
    public Builder clearIrTypeParameter() {
      if (declaratorCase_ == 8) {
        declaratorCase_ = 0;
        declarator_ = null;
        
      }
      return this;
    }

    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrVariable ir_variable = 9;</code>
     */
    public boolean hasIrVariable() {
      return declaratorCase_ == 9;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrVariable ir_variable = 9;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrVariable getIrVariable() {
      if (declaratorCase_ == 9) {
        return (org.jetbrains.kotlin.backend.common.serialization.proto.IrVariable) declarator_;
      }
      return org.jetbrains.kotlin.backend.common.serialization.proto.IrVariable.getDefaultInstance();
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrVariable ir_variable = 9;</code>
     */
    public Builder setIrVariable(org.jetbrains.kotlin.backend.common.serialization.proto.IrVariable value) {
      if (value == null) {
        throw new NullPointerException();
      }
      declarator_ = value;

      declaratorCase_ = 9;
      return this;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrVariable ir_variable = 9;</code>
     */
    public Builder setIrVariable(
        org.jetbrains.kotlin.backend.common.serialization.proto.IrVariable.Builder builderForValue) {
      declarator_ = builderForValue.build();

      declaratorCase_ = 9;
      return this;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrVariable ir_variable = 9;</code>
     */
    public Builder mergeIrVariable(org.jetbrains.kotlin.backend.common.serialization.proto.IrVariable value) {
      if (declaratorCase_ == 9 &&
          declarator_ != org.jetbrains.kotlin.backend.common.serialization.proto.IrVariable.getDefaultInstance()) {
        declarator_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrVariable.newBuilder((org.jetbrains.kotlin.backend.common.serialization.proto.IrVariable) declarator_)
            .mergeFrom(value).buildPartial();
      } else {
        declarator_ = value;
      }

      declaratorCase_ = 9;
      return this;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrVariable ir_variable = 9;</code>
     */
    public Builder clearIrVariable() {
      if (declaratorCase_ == 9) {
        declaratorCase_ = 0;
        declarator_ = null;
        
      }
      return this;
    }

    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter ir_value_parameter = 10;</code>
     */
    public boolean hasIrValueParameter() {
      return declaratorCase_ == 10;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter ir_value_parameter = 10;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter getIrValueParameter() {
      if (declaratorCase_ == 10) {
        return (org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter) declarator_;
      }
      return org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter.getDefaultInstance();
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter ir_value_parameter = 10;</code>
     */
    public Builder setIrValueParameter(org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter value) {
      if (value == null) {
        throw new NullPointerException();
      }
      declarator_ = value;

      declaratorCase_ = 10;
      return this;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter ir_value_parameter = 10;</code>
     */
    public Builder setIrValueParameter(
        org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter.Builder builderForValue) {
      declarator_ = builderForValue.build();

      declaratorCase_ = 10;
      return this;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter ir_value_parameter = 10;</code>
     */
    public Builder mergeIrValueParameter(org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter value) {
      if (declaratorCase_ == 10 &&
          declarator_ != org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter.getDefaultInstance()) {
        declarator_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter.newBuilder((org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter) declarator_)
            .mergeFrom(value).buildPartial();
      } else {
        declarator_ = value;
      }

      declaratorCase_ = 10;
      return this;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter ir_value_parameter = 10;</code>
     */
    public Builder clearIrValueParameter() {
      if (declaratorCase_ == 10) {
        declaratorCase_ = 0;
        declarator_ = null;
        
      }
      return this;
    }

    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedProperty ir_local_delegated_property = 11;</code>
     */
    public boolean hasIrLocalDelegatedProperty() {
      return declaratorCase_ == 11;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedProperty ir_local_delegated_property = 11;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedProperty getIrLocalDelegatedProperty() {
      if (declaratorCase_ == 11) {
        return (org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedProperty) declarator_;
      }
      return org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedProperty.getDefaultInstance();
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedProperty ir_local_delegated_property = 11;</code>
     */
    public Builder setIrLocalDelegatedProperty(org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedProperty value) {
      if (value == null) {
        throw new NullPointerException();
      }
      declarator_ = value;

      declaratorCase_ = 11;
      return this;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedProperty ir_local_delegated_property = 11;</code>
     */
    public Builder setIrLocalDelegatedProperty(
        org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedProperty.Builder builderForValue) {
      declarator_ = builderForValue.build();

      declaratorCase_ = 11;
      return this;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedProperty ir_local_delegated_property = 11;</code>
     */
    public Builder mergeIrLocalDelegatedProperty(org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedProperty value) {
      if (declaratorCase_ == 11 &&
          declarator_ != org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedProperty.getDefaultInstance()) {
        declarator_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedProperty.newBuilder((org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedProperty) declarator_)
            .mergeFrom(value).buildPartial();
      } else {
        declarator_ = value;
      }

      declaratorCase_ = 11;
      return this;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedProperty ir_local_delegated_property = 11;</code>
     */
    public Builder clearIrLocalDelegatedProperty() {
      if (declaratorCase_ == 11) {
        declaratorCase_ = 0;
        declarator_ = null;
        
      }
      return this;
    }

    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeAlias ir_type_alias = 12;</code>
     */
    public boolean hasIrTypeAlias() {
      return declaratorCase_ == 12;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeAlias ir_type_alias = 12;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeAlias getIrTypeAlias() {
      if (declaratorCase_ == 12) {
        return (org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeAlias) declarator_;
      }
      return org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeAlias.getDefaultInstance();
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeAlias ir_type_alias = 12;</code>
     */
    public Builder setIrTypeAlias(org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeAlias value) {
      if (value == null) {
        throw new NullPointerException();
      }
      declarator_ = value;

      declaratorCase_ = 12;
      return this;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeAlias ir_type_alias = 12;</code>
     */
    public Builder setIrTypeAlias(
        org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeAlias.Builder builderForValue) {
      declarator_ = builderForValue.build();

      declaratorCase_ = 12;
      return this;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeAlias ir_type_alias = 12;</code>
     */
    public Builder mergeIrTypeAlias(org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeAlias value) {
      if (declaratorCase_ == 12 &&
          declarator_ != org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeAlias.getDefaultInstance()) {
        declarator_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeAlias.newBuilder((org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeAlias) declarator_)
            .mergeFrom(value).buildPartial();
      } else {
        declarator_ = value;
      }

      declaratorCase_ = 12;
      return this;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeAlias ir_type_alias = 12;</code>
     */
    public Builder clearIrTypeAlias() {
      if (declaratorCase_ == 12) {
        declaratorCase_ = 0;
        declarator_ = null;
        
      }
      return this;
    }

    // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration)
  }

  static {
    defaultInstance = new IrDeclaration(true);
    defaultInstance.initFields();
  }

  // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration)
}
