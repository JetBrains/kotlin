class A : Java2 {
  constructor() /* primary */ {
    super/*Java2*/()
    /* <init>() */

  }

}

class B : Java2 {
  constructor() /* primary */ {
    super/*Java2*/()
    /* <init>() */

  }

  override fun bar3(): MutableList<*> {
    return mutableListOf<String>(elements = ["3"])
  }

  override fun foo3(a: MutableList<*>?) {
  }

}

class C : Java3 {
  constructor() /* primary */ {
    super/*Java3*/()
    /* <init>() */

  }

}

class D : Java3 {
  constructor() /* primary */ {
    super/*Java3*/()
    /* <init>() */

  }

  override fun bar2(): MutableList<in Number> {
    return mutableListOf<Number>(elements = [1])
  }

  override fun foo2(a: MutableList<in Number>) {
  }

}

fun test(a: A, b: B, c: C, d: D) {
  a.foo(a = mutableListOf<Int>(elements = [1]))
  a.foo(a = null)
  a.bar() /*~> Unit */
  a.foo2(a = mutableListOf<@FlexibleNullability Number?>(elements = [1]))
  a.foo2(a = null)
  a.bar2() /*~> Unit */
  a.foo3(a = mutableListOf<Int>(elements = [1]))
  a.foo3(a = null)
  a.bar3() /*~> Unit */
  b.foo(a = mutableListOf<Int>(elements = [1]))
  b.foo(a = null)
  b.bar() /*~> Unit */
  b.foo2(a = mutableListOf<@FlexibleNullability Number?>(elements = [1]))
  b.foo2(a = null)
  b.bar2() /*~> Unit */
  b.foo3(a = mutableListOf<Int>(elements = [1]))
  b.foo3(a = null)
  b.bar3() /*~> Unit */
  c.foo(a = mutableListOf<Int>(elements = [1]))
  c.foo(a = null)
  c.bar() /*~> Unit */
  c.foo2(a = mutableListOf<@FlexibleNullability Number?>(elements = [1]))
  c.foo2(a = null)
  c.bar2() /*~> Unit */
  c.foo3(a = mutableListOf<Int>(elements = [1]))
  c.foo3(a = null)
  c.bar3() /*~> Unit */
  d.foo(a = mutableListOf<Int>(elements = [1]))
  d.foo(a = null)
  d.bar() /*~> Unit */
  d.foo2(a = mutableListOf<Number>(elements = [1]))
  d.bar2() /*~> Unit */
  d.foo3(a = mutableListOf<Int>(elements = [1]))
  d.foo3(a = null)
  d.bar3() /*~> Unit */
}
