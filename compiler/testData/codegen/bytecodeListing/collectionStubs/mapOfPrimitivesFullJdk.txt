@kotlin.Metadata
public abstract class IntIntMap {
    // source: 'mapOfPrimitivesFullJdk.kt'
    public method <init>(): void
    public method clear(): void
    public method compute(p0: java.lang.Integer, p1: java.util.function.BiFunction): java.lang.Integer
    public synthetic method compute(p0: java.lang.Object, p1: java.util.function.BiFunction): java.lang.Object
    public method computeIfAbsent(p0: java.lang.Integer, p1: java.util.function.Function): java.lang.Integer
    public synthetic method computeIfAbsent(p0: java.lang.Object, p1: java.util.function.Function): java.lang.Object
    public method computeIfPresent(p0: java.lang.Integer, p1: java.util.function.BiFunction): java.lang.Integer
    public synthetic method computeIfPresent(p0: java.lang.Object, p1: java.util.function.BiFunction): java.lang.Object
    public abstract method containsKey(p0: int): boolean
    public bridge final method containsKey(p0: java.lang.Object): boolean
    public abstract method containsValue(p0: int): boolean
    public bridge final method containsValue(p0: java.lang.Object): boolean
    public bridge final method entrySet(): java.util.Set
    public abstract method get(p0: int): java.lang.Integer
    public bridge final method get(p0: java.lang.Object): java.lang.Object
    public abstract method getEntries(): java.util.Set
    public abstract method getKeys(): java.util.Set
    public abstract method getSize(): int
    public abstract method getValues(): java.util.Collection
    public bridge final method keySet(): java.util.Set
    public method merge(p0: java.lang.Integer, p1: java.lang.Integer, p2: java.util.function.BiFunction): java.lang.Integer
    public synthetic method merge(p0: java.lang.Object, p1: java.lang.Object, p2: java.util.function.BiFunction): java.lang.Object
    public method put(p0: int, p1: int): java.lang.Integer
    public synthetic method put(p0: java.lang.Object, p1: java.lang.Object): java.lang.Object
    public method putAll(p0: java.util.Map): void
    public method putIfAbsent(p0: java.lang.Integer, p1: java.lang.Integer): java.lang.Integer
    public synthetic method putIfAbsent(p0: java.lang.Object, p1: java.lang.Object): java.lang.Object
    public method remove(p0: java.lang.Object): java.lang.Object
    public method remove(p0: java.lang.Object, p1: java.lang.Object): boolean
    public method replace(p0: java.lang.Integer, p1: java.lang.Integer): java.lang.Integer
    public method replace(p0: java.lang.Integer, p1: java.lang.Integer, p2: java.lang.Integer): boolean
    public synthetic method replace(p0: java.lang.Object, p1: java.lang.Object): java.lang.Object
    public synthetic method replace(p0: java.lang.Object, p1: java.lang.Object, p2: java.lang.Object): boolean
    public method replaceAll(p0: java.util.function.BiFunction): void
    public bridge final method size(): int
    public bridge final method values(): java.util.Collection
}
