public open class EnumArgumentWithCustomToString : R|kotlin/Any| {
    @R|test/EnumArgumentWithCustomToString.EnumAnno|(value = R|test/EnumArgumentWithCustomToString.E.CAKE|()) @R|test/EnumArgumentWithCustomToString.EnumArrayAnno|(value = <implicitArrayOf>(R|test/EnumArgumentWithCustomToString.E.CAKE|(), R|test/EnumArgumentWithCustomToString.E.CAKE|())) public/*package*/ open fun annotated(): R|kotlin/Unit|

    public constructor(): R|test/EnumArgumentWithCustomToString|

    public final enum class E : R|kotlin/Enum<test/EnumArgumentWithCustomToString.E!>| {
        public final static enum entry CAKE: R|@EnhancedNullability test/EnumArgumentWithCustomToString.E|
        public final static fun values(): R|kotlin/Array<test/EnumArgumentWithCustomToString.E>| {
        }

        public final static fun valueOf(value: R|kotlin/String|): R|test/EnumArgumentWithCustomToString.E| {
        }

        public final static val entries: R|kotlin/enums/EnumEntries<test/EnumArgumentWithCustomToString.E>|
            public get(): R|kotlin/enums/EnumEntries<test/EnumArgumentWithCustomToString.E>|

    }
    public final annotation class EnumAnno : R|kotlin/Annotation| {
        public constructor(value: R|test/EnumArgumentWithCustomToString.E|): R|test/EnumArgumentWithCustomToString.EnumAnno|

    }
    public final annotation class EnumArrayAnno : R|kotlin/Annotation| {
        public constructor(vararg value: R|kotlin/Array<test/EnumArgumentWithCustomToString.E>|): R|test/EnumArgumentWithCustomToString.EnumArrayAnno|

    }
}
