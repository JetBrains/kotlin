FILE: jumps.kt
    public final fun test_1(x: R|kotlin/Int?|): R|kotlin/Unit| {
        lval y: R|kotlin/Int| = when () {
            ==(R|<local>/x|, Null(null)) ->  {
                throw R|kotlin/KotlinNullPointerException.KotlinNullPointerException|()
            }
            else ->  {
                R|<local>/x|
            }
        }

        R|<local>/y|.R|kotlin/Int.inc|()
    }
    public final fun test_2(x: R|kotlin/Int?|): R|kotlin/Unit| {
        lval y: R|kotlin/Int?| = when () {
            ==(R|<local>/x|, Null(null)) ->  {
                R|<local>/x|
            }
            else ->  {
                R|<local>/x|
            }
        }

        R|<local>/y|.<Ambiguity: inc, [kotlin/inc, kotlin/inc]>#()
    }
    public final fun test_3(x: R|kotlin/Int?|): R|kotlin/Unit| {
        while(Boolean(true)) {
            (R|<local>/x| as R|kotlin/Int|)
            break@@@[Boolean(true)]
        }

        R|<local>/x|.R|kotlin/Int.inc|()
    }
    public final fun test_4(x: R|kotlin/Int?|): R|kotlin/Unit| {
        do {
            (R|<local>/x| as R|kotlin/Int|)
            break@@@[Boolean(true)]
        }
        while(Boolean(true))
        R|<local>/x|.R|kotlin/Int.inc|()
    }
    public final fun test_5(b: R|kotlin/Boolean|): R|kotlin/Unit| {
        while(R|<local>/b|) {
            when () {
                R|<local>/b| ->  {
                    continue@@@[R|<local>/b|]
                }
                else ->  {
                }
            }

        }

    }
    public final fun run(block: R|kotlin/Function0<kotlin/Unit>|): R|kotlin/Unit| {
        R|<local>/block|.R|FakeOverride<kotlin/Function0.invoke: R|kotlin/Unit|>|()
    }
    public final fun test_6(): R|kotlin/Unit| {
        R|/run|(<L> = run@fun <anonymous>(): R|kotlin/Unit| <kind=EXACTLY_ONCE>  {
            ^@run Unit
        }
        )
    }
