namespace <root>

// <namespace name="foobar">
namespace foobar

// <namespace name="a">
namespace a

internal final val a: java.util.List<jet.Int>?
internal final val a1: [ERROR : List<Int>]
internal final val b: java.util.List<jet.Int>?
internal final val b1: [ERROR : util.List<Int>]
// </namespace name="a">
internal abstract class foobar.Collection</*0*/ E : jet.Any?> : jet.Iterable<E> {
    public final /*constructor*/ fun </*0*/ E : jet.Any?><init>(): foobar.Collection<E>
    internal final fun </*0*/ O : jet.Any?>iterate(/*0*/ iteratee: foobar.Iteratee<E, O>): O
    public abstract override /*1*/ fun iterator(): jet.Iterator<E>
}
internal abstract class foobar.Foo</*0*/ T : jet.Any?> : jet.Any {
    public final /*constructor*/ fun </*0*/ T : jet.Any?><init>(): foobar.Foo<T>
    internal abstract val x: T
}
internal abstract class foobar.Iteratee</*0*/ in I : jet.Any?, /*1*/ out O : jet.Any?> : jet.Any {
    public final /*constructor*/ fun </*0*/ in I : jet.Any?, /*1*/ out O : jet.Any?><init>(): foobar.Iteratee<I, O>
    internal abstract fun done(): O
    internal abstract val isDone: jet.Boolean
    internal abstract fun process(/*0*/ item: I): foobar.Iteratee<I, O>
    internal abstract val result: O
}
internal final class foobar.StrangeIterateeImpl</*0*/ in I : jet.Any?, /*1*/ out O : jet.Any?> : foobar.Iteratee<I, O> {
    public final /*constructor*/ fun </*0*/ in I : jet.Any?, /*1*/ out O : jet.Any?><init>(/*0*/ obj: O): foobar.StrangeIterateeImpl<I, O>
    internal open override /*1*/ fun done(): O
    internal open override /*1*/ val isDone: jet.Boolean
    internal final val obj: O
    internal open override /*1*/ fun process(/*0*/ item: I): foobar.Iteratee<I, O>
    internal open override /*1*/ val result: O
}
internal abstract class foobar.Sum : foobar.Iteratee<jet.Int, jet.Int> {
    public final /*constructor*/ fun <init>(): foobar.Sum
    internal abstract override /*1*/ fun done(): jet.Int
    internal abstract override /*1*/ val isDone: jet.Boolean
    internal open override /*1*/ fun process(/*0*/ item: jet.Int): foobar.Iteratee<jet.Int, jet.Int>
    internal abstract override /*1*/ val result: jet.Int
}
internal final val x1: java.util.List<jet.Int>?
internal final val y1: java.util.List<jet.Int>?
internal final fun </*0*/ O : jet.Any?>done(/*0*/ result: O): foobar.Iteratee<jet.Any?, O>
// </namespace name="foobar">
