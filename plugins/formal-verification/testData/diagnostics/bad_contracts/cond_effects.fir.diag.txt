/cond_effects.kt:(121,146): info: Generated Viper text for compoundConditionalEffect:
method f$compoundConditionalEffect$TF$T$Boolean(p$b: Ref)
  returns (ret$0: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$unitType())
  ensures true ==> df$rt$boolFromRef(p$b) && false
{
  inhale df$rt$isSubtype(df$rt$typeOf(p$b), df$rt$boolType())
  ret$0 := df$rt$unitValue()
  label lbl$ret$0
}

/cond_effects.kt:(190,220): warning: Cannot verify that if the function returns then (b && false).

/cond_effects.kt:(271,287): info: Generated Viper text for mayReturnNonNull:
method f$mayReturnNonNull$TF$Any(p$x: Ref) returns (ret$0: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$nullable(df$rt$anyType()))
  ensures ret$0 == df$rt$nullValue() ==>
    df$rt$isSubtype(df$rt$typeOf(p$x), df$rt$intType())
{
  inhale df$rt$isSubtype(df$rt$typeOf(p$x), df$rt$nullable(df$rt$anyType()))
  ret$0 := p$x
  goto lbl$ret$0
  label lbl$ret$0
}

/cond_effects.kt:(328,360): warning: Cannot verify that if a null value is returned then x is Int.

/cond_effects.kt:(424,437): info: Generated Viper text for mayReturnNull:
method f$mayReturnNull$TF$Any(p$x: Ref) returns (ret$0: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$nullable(df$rt$anyType()))
  ensures ret$0 != df$rt$nullValue() ==>
    df$rt$isSubtype(df$rt$typeOf(p$x), df$rt$intType())
{
  inhale df$rt$isSubtype(df$rt$typeOf(p$x), df$rt$nullable(df$rt$anyType()))
  ret$0 := p$x
  goto lbl$ret$0
  label lbl$ret$0
}

/cond_effects.kt:(478,513): warning: Cannot verify that if a non-null value is returned then x is Int.

/cond_effects.kt:(723,741): info: Generated Viper text for isNullOrEmptyWrong:
method f$isNullOrEmptyWrong$TF$c$pkg$kotlin$CharSequence(p$seq: Ref)
  returns (ret$0: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$boolType())
  ensures df$rt$boolFromRef(ret$0) == false ==> p$seq != df$rt$nullValue()
{
  inhale df$rt$isSubtype(df$rt$typeOf(p$seq), df$rt$nullable(df$rt$T$c$pkg$kotlin$CharSequence()))
  inhale p$seq != df$rt$nullValue() ==>
    acc(p$pkg$kotlin$c$CharSequence$shared(p$seq), wildcard)
  if (!(p$seq == df$rt$nullValue())) {
    var anon$0: Ref
    var anon$1: Ref
    anon$1 := pg$public$length(p$seq)
    anon$0 := anon$1
    inhale df$rt$isSubtype(df$rt$typeOf(anon$0), df$rt$intType())
    ret$0 := sp$notBool(df$rt$boolToRef(df$rt$intFromRef(anon$0) == 0))
  } else {
    ret$0 := df$rt$boolToRef(false)}
  goto lbl$ret$0
  label lbl$ret$0
}

method pg$public$length(this: Ref) returns (ret: Ref)


/cond_effects.kt:(796,832): warning: Cannot verify that if a false value is returned then seq != null.

/cond_effects.kt:(925,942): info: Generated Viper text for recursiveContract:
field bf$length: Ref

method f$recursiveContract$TF$T$Int$Any(p$n: Ref, p$x: Ref)
  returns (ret$0: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$boolType())
  ensures df$rt$boolFromRef(ret$0) == true ==>
    df$rt$isSubtype(df$rt$typeOf(p$x), df$rt$T$c$pkg$kotlin$String())
{
  inhale df$rt$isSubtype(df$rt$typeOf(p$n), df$rt$intType())
  inhale df$rt$isSubtype(df$rt$typeOf(p$x), df$rt$nullable(df$rt$anyType()))
  if (df$rt$intFromRef(p$n) == 0) {
    ret$0 := df$rt$boolToRef(df$rt$isSubtype(df$rt$typeOf(p$x), df$rt$intType()))
  } else {
    ret$0 := f$recursiveContract$TF$T$Int$Any(sp$minusInts(p$n, df$rt$intToRef(1)),
      p$x)}
  goto lbl$ret$0
  label lbl$ret$0
}

method pg$public$length(this: Ref) returns (ret: Ref)


/cond_effects.kt:(994,1029): warning: Cannot verify that if a true value is returned then x is String.
