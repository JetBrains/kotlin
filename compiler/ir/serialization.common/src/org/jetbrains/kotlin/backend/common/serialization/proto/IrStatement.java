// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: compiler/ir/serialization.common/src/KotlinIr.proto
// Protobuf Java Version: 4.29.3

package org.jetbrains.kotlin.backend.common.serialization.proto;

/**
 * <pre>
 * Let's try to map IrElement as well as IrStatement to IrStatement.
 * </pre>
 *
 * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement}
 */
public final class IrStatement extends
    org.jetbrains.kotlin.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement)
    IrStatementOrBuilder {
private static final long serialVersionUID = 0L;
  static {
    org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 29,
      /* patch= */ 3,
      /* suffix= */ "",
      IrStatement.class.getName());
  }
  // Use IrStatement.newBuilder() to construct.
  private IrStatement(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
  }
  private IrStatement() {
  }

  public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return org.jetbrains.kotlin.backend.common.serialization.proto.KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_IrStatement_descriptor;
  }

  @java.lang.Override
  protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.jetbrains.kotlin.backend.common.serialization.proto.KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_IrStatement_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement.class, org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement.Builder.class);
  }

  private int bitField0_;
  private int statementCase_ = 0;
  @SuppressWarnings("serial")
  private java.lang.Object statement_;
  public enum StatementCase
      implements org.jetbrains.kotlin.protobuf.Internal.EnumLite,
          org.jetbrains.kotlin.protobuf.AbstractMessage.InternalOneOfEnum {
    DECLARATION(2),
    EXPRESSION(3),
    BLOCK_BODY(4),
    BRANCH(5),
    CATCH(6),
    SYNTHETIC_BODY(7),
    STATEMENT_NOT_SET(0);
    private final int value;
    private StatementCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static StatementCase valueOf(int value) {
      return forNumber(value);
    }

    public static StatementCase forNumber(int value) {
      switch (value) {
        case 2: return DECLARATION;
        case 3: return EXPRESSION;
        case 4: return BLOCK_BODY;
        case 5: return BRANCH;
        case 6: return CATCH;
        case 7: return SYNTHETIC_BODY;
        case 0: return STATEMENT_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public StatementCase
  getStatementCase() {
    return StatementCase.forNumber(
        statementCase_);
  }

  public static final int COORDINATES_FIELD_NUMBER = 1;
  private long coordinates_ = 0L;
  /**
   * <code>int64 coordinates = 1 [features = { ... }</code>
   * @return Whether the coordinates field is set.
   */
  @java.lang.Override
  public boolean hasCoordinates() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <code>int64 coordinates = 1 [features = { ... }</code>
   * @return The coordinates.
   */
  @java.lang.Override
  public long getCoordinates() {
    return coordinates_;
  }

  public static final int DECLARATION_FIELD_NUMBER = 2;
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 2;</code>
   * @return Whether the declaration field is set.
   */
  @java.lang.Override
  public boolean hasDeclaration() {
    return statementCase_ == 2;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 2;</code>
   * @return The declaration.
   */
  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration getDeclaration() {
    if (statementCase_ == 2) {
       return (org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration) statement_;
    }
    return org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration.getDefaultInstance();
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 2;</code>
   */
  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationOrBuilder getDeclarationOrBuilder() {
    if (statementCase_ == 2) {
       return (org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration) statement_;
    }
    return org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration.getDefaultInstance();
  }

  public static final int EXPRESSION_FIELD_NUMBER = 3;
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 3;</code>
   * @return Whether the expression field is set.
   */
  @java.lang.Override
  public boolean hasExpression() {
    return statementCase_ == 3;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 3;</code>
   * @return The expression.
   */
  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression getExpression() {
    if (statementCase_ == 3) {
       return (org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression) statement_;
    }
    return org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.getDefaultInstance();
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 3;</code>
   */
  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrExpressionOrBuilder getExpressionOrBuilder() {
    if (statementCase_ == 3) {
       return (org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression) statement_;
    }
    return org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.getDefaultInstance();
  }

  public static final int BLOCK_BODY_FIELD_NUMBER = 4;
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrBlockBody block_body = 4;</code>
   * @return Whether the blockBody field is set.
   */
  @java.lang.Override
  public boolean hasBlockBody() {
    return statementCase_ == 4;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrBlockBody block_body = 4;</code>
   * @return The blockBody.
   */
  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrBlockBody getBlockBody() {
    if (statementCase_ == 4) {
       return (org.jetbrains.kotlin.backend.common.serialization.proto.IrBlockBody) statement_;
    }
    return org.jetbrains.kotlin.backend.common.serialization.proto.IrBlockBody.getDefaultInstance();
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrBlockBody block_body = 4;</code>
   */
  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrBlockBodyOrBuilder getBlockBodyOrBuilder() {
    if (statementCase_ == 4) {
       return (org.jetbrains.kotlin.backend.common.serialization.proto.IrBlockBody) statement_;
    }
    return org.jetbrains.kotlin.backend.common.serialization.proto.IrBlockBody.getDefaultInstance();
  }

  public static final int BRANCH_FIELD_NUMBER = 5;
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrBranch branch = 5;</code>
   * @return Whether the branch field is set.
   */
  @java.lang.Override
  public boolean hasBranch() {
    return statementCase_ == 5;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrBranch branch = 5;</code>
   * @return The branch.
   */
  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrBranch getBranch() {
    if (statementCase_ == 5) {
       return (org.jetbrains.kotlin.backend.common.serialization.proto.IrBranch) statement_;
    }
    return org.jetbrains.kotlin.backend.common.serialization.proto.IrBranch.getDefaultInstance();
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrBranch branch = 5;</code>
   */
  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrBranchOrBuilder getBranchOrBuilder() {
    if (statementCase_ == 5) {
       return (org.jetbrains.kotlin.backend.common.serialization.proto.IrBranch) statement_;
    }
    return org.jetbrains.kotlin.backend.common.serialization.proto.IrBranch.getDefaultInstance();
  }

  public static final int CATCH_FIELD_NUMBER = 6;
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrCatch catch = 6;</code>
   * @return Whether the catch field is set.
   */
  @java.lang.Override
  public boolean hasCatch() {
    return statementCase_ == 6;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrCatch catch = 6;</code>
   * @return The catch.
   */
  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrCatch getCatch() {
    if (statementCase_ == 6) {
       return (org.jetbrains.kotlin.backend.common.serialization.proto.IrCatch) statement_;
    }
    return org.jetbrains.kotlin.backend.common.serialization.proto.IrCatch.getDefaultInstance();
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrCatch catch = 6;</code>
   */
  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrCatchOrBuilder getCatchOrBuilder() {
    if (statementCase_ == 6) {
       return (org.jetbrains.kotlin.backend.common.serialization.proto.IrCatch) statement_;
    }
    return org.jetbrains.kotlin.backend.common.serialization.proto.IrCatch.getDefaultInstance();
  }

  public static final int SYNTHETIC_BODY_FIELD_NUMBER = 7;
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrSyntheticBody synthetic_body = 7;</code>
   * @return Whether the syntheticBody field is set.
   */
  @java.lang.Override
  public boolean hasSyntheticBody() {
    return statementCase_ == 7;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrSyntheticBody synthetic_body = 7;</code>
   * @return The syntheticBody.
   */
  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrSyntheticBody getSyntheticBody() {
    if (statementCase_ == 7) {
       return (org.jetbrains.kotlin.backend.common.serialization.proto.IrSyntheticBody) statement_;
    }
    return org.jetbrains.kotlin.backend.common.serialization.proto.IrSyntheticBody.getDefaultInstance();
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrSyntheticBody synthetic_body = 7;</code>
   */
  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrSyntheticBodyOrBuilder getSyntheticBodyOrBuilder() {
    if (statementCase_ == 7) {
       return (org.jetbrains.kotlin.backend.common.serialization.proto.IrSyntheticBody) statement_;
    }
    return org.jetbrains.kotlin.backend.common.serialization.proto.IrSyntheticBody.getDefaultInstance();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    if (!hasCoordinates()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (hasDeclaration()) {
      if (!getDeclaration().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
    }
    if (hasExpression()) {
      if (!getExpression().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
    }
    if (hasBlockBody()) {
      if (!getBlockBody().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
    }
    if (hasBranch()) {
      if (!getBranch().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
    }
    if (hasCatch()) {
      if (!getCatch().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
    }
    if (hasSyntheticBody()) {
      if (!getSyntheticBody().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
    }
    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeInt64(1, coordinates_);
    }
    if (statementCase_ == 2) {
      output.writeMessage(2, (org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration) statement_);
    }
    if (statementCase_ == 3) {
      output.writeMessage(3, (org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression) statement_);
    }
    if (statementCase_ == 4) {
      output.writeMessage(4, (org.jetbrains.kotlin.backend.common.serialization.proto.IrBlockBody) statement_);
    }
    if (statementCase_ == 5) {
      output.writeMessage(5, (org.jetbrains.kotlin.backend.common.serialization.proto.IrBranch) statement_);
    }
    if (statementCase_ == 6) {
      output.writeMessage(6, (org.jetbrains.kotlin.backend.common.serialization.proto.IrCatch) statement_);
    }
    if (statementCase_ == 7) {
      output.writeMessage(7, (org.jetbrains.kotlin.backend.common.serialization.proto.IrSyntheticBody) statement_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) != 0)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeInt64Size(1, coordinates_);
    }
    if (statementCase_ == 2) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeMessageSize(2, (org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration) statement_);
    }
    if (statementCase_ == 3) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeMessageSize(3, (org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression) statement_);
    }
    if (statementCase_ == 4) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeMessageSize(4, (org.jetbrains.kotlin.backend.common.serialization.proto.IrBlockBody) statement_);
    }
    if (statementCase_ == 5) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeMessageSize(5, (org.jetbrains.kotlin.backend.common.serialization.proto.IrBranch) statement_);
    }
    if (statementCase_ == 6) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeMessageSize(6, (org.jetbrains.kotlin.backend.common.serialization.proto.IrCatch) statement_);
    }
    if (statementCase_ == 7) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeMessageSize(7, (org.jetbrains.kotlin.backend.common.serialization.proto.IrSyntheticBody) statement_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement)) {
      return super.equals(obj);
    }
    org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement other = (org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement) obj;

    if (hasCoordinates() != other.hasCoordinates()) return false;
    if (hasCoordinates()) {
      if (getCoordinates()
          != other.getCoordinates()) return false;
    }
    if (!getStatementCase().equals(other.getStatementCase())) return false;
    switch (statementCase_) {
      case 2:
        if (!getDeclaration()
            .equals(other.getDeclaration())) return false;
        break;
      case 3:
        if (!getExpression()
            .equals(other.getExpression())) return false;
        break;
      case 4:
        if (!getBlockBody()
            .equals(other.getBlockBody())) return false;
        break;
      case 5:
        if (!getBranch()
            .equals(other.getBranch())) return false;
        break;
      case 6:
        if (!getCatch()
            .equals(other.getCatch())) return false;
        break;
      case 7:
        if (!getSyntheticBody()
            .equals(other.getSyntheticBody())) return false;
        break;
      case 0:
      default:
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasCoordinates()) {
      hash = (37 * hash) + COORDINATES_FIELD_NUMBER;
      hash = (53 * hash) + org.jetbrains.kotlin.protobuf.Internal.hashLong(
          getCoordinates());
    }
    switch (statementCase_) {
      case 2:
        hash = (37 * hash) + DECLARATION_FIELD_NUMBER;
        hash = (53 * hash) + getDeclaration().hashCode();
        break;
      case 3:
        hash = (37 * hash) + EXPRESSION_FIELD_NUMBER;
        hash = (53 * hash) + getExpression().hashCode();
        break;
      case 4:
        hash = (37 * hash) + BLOCK_BODY_FIELD_NUMBER;
        hash = (53 * hash) + getBlockBody().hashCode();
        break;
      case 5:
        hash = (37 * hash) + BRANCH_FIELD_NUMBER;
        hash = (53 * hash) + getBranch().hashCode();
        break;
      case 6:
        hash = (37 * hash) + CATCH_FIELD_NUMBER;
        hash = (53 * hash) + getCatch().hashCode();
        break;
      case 7:
        hash = (37 * hash) + SYNTHETIC_BODY_FIELD_NUMBER;
        hash = (53 * hash) + getSyntheticBody().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement parseFrom(
      java.nio.ByteBuffer data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement parseFrom(
      java.nio.ByteBuffer data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement parseFrom(byte[] data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement parseFrom(
      byte[] data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement parseFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement parseDelimitedFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Let's try to map IrElement as well as IrStatement to IrStatement.
   * </pre>
   *
   * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement}
   */
  public static final class Builder extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement)
      org.jetbrains.kotlin.backend.common.serialization.proto.IrStatementOrBuilder {
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.backend.common.serialization.proto.KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_IrStatement_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.backend.common.serialization.proto.KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_IrStatement_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement.class, org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement.Builder.class);
    }

    // Construct using org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement.newBuilder()
    private Builder() {

    }

    private Builder(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      coordinates_ = 0L;
      if (declarationBuilder_ != null) {
        declarationBuilder_.clear();
      }
      if (expressionBuilder_ != null) {
        expressionBuilder_.clear();
      }
      if (blockBodyBuilder_ != null) {
        blockBodyBuilder_.clear();
      }
      if (branchBuilder_ != null) {
        branchBuilder_.clear();
      }
      if (catchBuilder_ != null) {
        catchBuilder_.clear();
      }
      if (syntheticBodyBuilder_ != null) {
        syntheticBodyBuilder_.clear();
      }
      statementCase_ = 0;
      statement_ = null;
      return this;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return org.jetbrains.kotlin.backend.common.serialization.proto.KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_IrStatement_descriptor;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement getDefaultInstanceForType() {
      return org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement.getDefaultInstance();
    }

    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement build() {
      org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement buildPartial() {
      org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement result = new org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      buildPartialOneofs(result);
      onBuilt();
      return result;
    }

    private void buildPartial0(org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement result) {
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.coordinates_ = coordinates_;
        to_bitField0_ |= 0x00000001;
      }
      result.bitField0_ |= to_bitField0_;
    }

    private void buildPartialOneofs(org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement result) {
      result.statementCase_ = statementCase_;
      result.statement_ = this.statement_;
      if (statementCase_ == 2 &&
          declarationBuilder_ != null) {
        result.statement_ = declarationBuilder_.build();
      }
      if (statementCase_ == 3 &&
          expressionBuilder_ != null) {
        result.statement_ = expressionBuilder_.build();
      }
      if (statementCase_ == 4 &&
          blockBodyBuilder_ != null) {
        result.statement_ = blockBodyBuilder_.build();
      }
      if (statementCase_ == 5 &&
          branchBuilder_ != null) {
        result.statement_ = branchBuilder_.build();
      }
      if (statementCase_ == 6 &&
          catchBuilder_ != null) {
        result.statement_ = catchBuilder_.build();
      }
      if (statementCase_ == 7 &&
          syntheticBodyBuilder_ != null) {
        result.statement_ = syntheticBodyBuilder_.build();
      }
    }

    @java.lang.Override
    public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
      if (other instanceof org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement) {
        return mergeFrom((org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement other) {
      if (other == org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement.getDefaultInstance()) return this;
      if (other.hasCoordinates()) {
        setCoordinates(other.getCoordinates());
      }
      switch (other.getStatementCase()) {
        case DECLARATION: {
          mergeDeclaration(other.getDeclaration());
          break;
        }
        case EXPRESSION: {
          mergeExpression(other.getExpression());
          break;
        }
        case BLOCK_BODY: {
          mergeBlockBody(other.getBlockBody());
          break;
        }
        case BRANCH: {
          mergeBranch(other.getBranch());
          break;
        }
        case CATCH: {
          mergeCatch(other.getCatch());
          break;
        }
        case SYNTHETIC_BODY: {
          mergeSyntheticBody(other.getSyntheticBody());
          break;
        }
        case STATEMENT_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      if (!hasCoordinates()) {
        return false;
      }
      if (hasDeclaration()) {
        if (!getDeclaration().isInitialized()) {
          return false;
        }
      }
      if (hasExpression()) {
        if (!getExpression().isInitialized()) {
          return false;
        }
      }
      if (hasBlockBody()) {
        if (!getBlockBody().isInitialized()) {
          return false;
        }
      }
      if (hasBranch()) {
        if (!getBranch().isInitialized()) {
          return false;
        }
      }
      if (hasCatch()) {
        if (!getCatch().isInitialized()) {
          return false;
        }
      }
      if (hasSyntheticBody()) {
        if (!getSyntheticBody().isInitialized()) {
          return false;
        }
      }
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              coordinates_ = input.readInt64();
              bitField0_ |= 0x00000001;
              break;
            } // case 8
            case 18: {
              input.readMessage(
                  getDeclarationFieldBuilder().getBuilder(),
                  extensionRegistry);
              statementCase_ = 2;
              break;
            } // case 18
            case 26: {
              input.readMessage(
                  getExpressionFieldBuilder().getBuilder(),
                  extensionRegistry);
              statementCase_ = 3;
              break;
            } // case 26
            case 34: {
              input.readMessage(
                  getBlockBodyFieldBuilder().getBuilder(),
                  extensionRegistry);
              statementCase_ = 4;
              break;
            } // case 34
            case 42: {
              input.readMessage(
                  getBranchFieldBuilder().getBuilder(),
                  extensionRegistry);
              statementCase_ = 5;
              break;
            } // case 42
            case 50: {
              input.readMessage(
                  getCatchFieldBuilder().getBuilder(),
                  extensionRegistry);
              statementCase_ = 6;
              break;
            } // case 50
            case 58: {
              input.readMessage(
                  getSyntheticBodyFieldBuilder().getBuilder(),
                  extensionRegistry);
              statementCase_ = 7;
              break;
            } // case 58
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int statementCase_ = 0;
    private java.lang.Object statement_;
    public StatementCase
        getStatementCase() {
      return StatementCase.forNumber(
          statementCase_);
    }

    public Builder clearStatement() {
      statementCase_ = 0;
      statement_ = null;
      onChanged();
      return this;
    }

    private int bitField0_;

    private long coordinates_ ;
    /**
     * <code>int64 coordinates = 1 [features = { ... }</code>
     * @return Whether the coordinates field is set.
     */
    @java.lang.Override
    public boolean hasCoordinates() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>int64 coordinates = 1 [features = { ... }</code>
     * @return The coordinates.
     */
    @java.lang.Override
    public long getCoordinates() {
      return coordinates_;
    }
    /**
     * <code>int64 coordinates = 1 [features = { ... }</code>
     * @param value The coordinates to set.
     * @return This builder for chaining.
     */
    public Builder setCoordinates(long value) {

      coordinates_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <code>int64 coordinates = 1 [features = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearCoordinates() {
      bitField0_ = (bitField0_ & ~0x00000001);
      coordinates_ = 0L;
      onChanged();
      return this;
    }

    private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
        org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration, org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration.Builder, org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationOrBuilder> declarationBuilder_;
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 2;</code>
     * @return Whether the declaration field is set.
     */
    @java.lang.Override
    public boolean hasDeclaration() {
      return statementCase_ == 2;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 2;</code>
     * @return The declaration.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration getDeclaration() {
      if (declarationBuilder_ == null) {
        if (statementCase_ == 2) {
          return (org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration) statement_;
        }
        return org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration.getDefaultInstance();
      } else {
        if (statementCase_ == 2) {
          return declarationBuilder_.getMessage();
        }
        return org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration.getDefaultInstance();
      }
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 2;</code>
     */
    public Builder setDeclaration(org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration value) {
      if (declarationBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        statement_ = value;
        onChanged();
      } else {
        declarationBuilder_.setMessage(value);
      }
      statementCase_ = 2;
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 2;</code>
     */
    public Builder setDeclaration(
        org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration.Builder builderForValue) {
      if (declarationBuilder_ == null) {
        statement_ = builderForValue.build();
        onChanged();
      } else {
        declarationBuilder_.setMessage(builderForValue.build());
      }
      statementCase_ = 2;
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 2;</code>
     */
    public Builder mergeDeclaration(org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration value) {
      if (declarationBuilder_ == null) {
        if (statementCase_ == 2 &&
            statement_ != org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration.getDefaultInstance()) {
          statement_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration.newBuilder((org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration) statement_)
              .mergeFrom(value).buildPartial();
        } else {
          statement_ = value;
        }
        onChanged();
      } else {
        if (statementCase_ == 2) {
          declarationBuilder_.mergeFrom(value);
        } else {
          declarationBuilder_.setMessage(value);
        }
      }
      statementCase_ = 2;
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 2;</code>
     */
    public Builder clearDeclaration() {
      if (declarationBuilder_ == null) {
        if (statementCase_ == 2) {
          statementCase_ = 0;
          statement_ = null;
          onChanged();
        }
      } else {
        if (statementCase_ == 2) {
          statementCase_ = 0;
          statement_ = null;
        }
        declarationBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 2;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration.Builder getDeclarationBuilder() {
      return getDeclarationFieldBuilder().getBuilder();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 2;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationOrBuilder getDeclarationOrBuilder() {
      if ((statementCase_ == 2) && (declarationBuilder_ != null)) {
        return declarationBuilder_.getMessageOrBuilder();
      } else {
        if (statementCase_ == 2) {
          return (org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration) statement_;
        }
        return org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration.getDefaultInstance();
      }
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 2;</code>
     */
    private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
        org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration, org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration.Builder, org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationOrBuilder> 
        getDeclarationFieldBuilder() {
      if (declarationBuilder_ == null) {
        if (!(statementCase_ == 2)) {
          statement_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration.getDefaultInstance();
        }
        declarationBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
            org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration, org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration.Builder, org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationOrBuilder>(
                (org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration) statement_,
                getParentForChildren(),
                isClean());
        statement_ = null;
      }
      statementCase_ = 2;
      onChanged();
      return declarationBuilder_;
    }

    private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
        org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression, org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.Builder, org.jetbrains.kotlin.backend.common.serialization.proto.IrExpressionOrBuilder> expressionBuilder_;
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 3;</code>
     * @return Whether the expression field is set.
     */
    @java.lang.Override
    public boolean hasExpression() {
      return statementCase_ == 3;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 3;</code>
     * @return The expression.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression getExpression() {
      if (expressionBuilder_ == null) {
        if (statementCase_ == 3) {
          return (org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression) statement_;
        }
        return org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.getDefaultInstance();
      } else {
        if (statementCase_ == 3) {
          return expressionBuilder_.getMessage();
        }
        return org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.getDefaultInstance();
      }
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 3;</code>
     */
    public Builder setExpression(org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression value) {
      if (expressionBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        statement_ = value;
        onChanged();
      } else {
        expressionBuilder_.setMessage(value);
      }
      statementCase_ = 3;
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 3;</code>
     */
    public Builder setExpression(
        org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.Builder builderForValue) {
      if (expressionBuilder_ == null) {
        statement_ = builderForValue.build();
        onChanged();
      } else {
        expressionBuilder_.setMessage(builderForValue.build());
      }
      statementCase_ = 3;
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 3;</code>
     */
    public Builder mergeExpression(org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression value) {
      if (expressionBuilder_ == null) {
        if (statementCase_ == 3 &&
            statement_ != org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.getDefaultInstance()) {
          statement_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.newBuilder((org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression) statement_)
              .mergeFrom(value).buildPartial();
        } else {
          statement_ = value;
        }
        onChanged();
      } else {
        if (statementCase_ == 3) {
          expressionBuilder_.mergeFrom(value);
        } else {
          expressionBuilder_.setMessage(value);
        }
      }
      statementCase_ = 3;
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 3;</code>
     */
    public Builder clearExpression() {
      if (expressionBuilder_ == null) {
        if (statementCase_ == 3) {
          statementCase_ = 0;
          statement_ = null;
          onChanged();
        }
      } else {
        if (statementCase_ == 3) {
          statementCase_ = 0;
          statement_ = null;
        }
        expressionBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 3;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.Builder getExpressionBuilder() {
      return getExpressionFieldBuilder().getBuilder();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 3;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrExpressionOrBuilder getExpressionOrBuilder() {
      if ((statementCase_ == 3) && (expressionBuilder_ != null)) {
        return expressionBuilder_.getMessageOrBuilder();
      } else {
        if (statementCase_ == 3) {
          return (org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression) statement_;
        }
        return org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.getDefaultInstance();
      }
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 3;</code>
     */
    private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
        org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression, org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.Builder, org.jetbrains.kotlin.backend.common.serialization.proto.IrExpressionOrBuilder> 
        getExpressionFieldBuilder() {
      if (expressionBuilder_ == null) {
        if (!(statementCase_ == 3)) {
          statement_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.getDefaultInstance();
        }
        expressionBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
            org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression, org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.Builder, org.jetbrains.kotlin.backend.common.serialization.proto.IrExpressionOrBuilder>(
                (org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression) statement_,
                getParentForChildren(),
                isClean());
        statement_ = null;
      }
      statementCase_ = 3;
      onChanged();
      return expressionBuilder_;
    }

    private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
        org.jetbrains.kotlin.backend.common.serialization.proto.IrBlockBody, org.jetbrains.kotlin.backend.common.serialization.proto.IrBlockBody.Builder, org.jetbrains.kotlin.backend.common.serialization.proto.IrBlockBodyOrBuilder> blockBodyBuilder_;
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrBlockBody block_body = 4;</code>
     * @return Whether the blockBody field is set.
     */
    @java.lang.Override
    public boolean hasBlockBody() {
      return statementCase_ == 4;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrBlockBody block_body = 4;</code>
     * @return The blockBody.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrBlockBody getBlockBody() {
      if (blockBodyBuilder_ == null) {
        if (statementCase_ == 4) {
          return (org.jetbrains.kotlin.backend.common.serialization.proto.IrBlockBody) statement_;
        }
        return org.jetbrains.kotlin.backend.common.serialization.proto.IrBlockBody.getDefaultInstance();
      } else {
        if (statementCase_ == 4) {
          return blockBodyBuilder_.getMessage();
        }
        return org.jetbrains.kotlin.backend.common.serialization.proto.IrBlockBody.getDefaultInstance();
      }
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrBlockBody block_body = 4;</code>
     */
    public Builder setBlockBody(org.jetbrains.kotlin.backend.common.serialization.proto.IrBlockBody value) {
      if (blockBodyBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        statement_ = value;
        onChanged();
      } else {
        blockBodyBuilder_.setMessage(value);
      }
      statementCase_ = 4;
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrBlockBody block_body = 4;</code>
     */
    public Builder setBlockBody(
        org.jetbrains.kotlin.backend.common.serialization.proto.IrBlockBody.Builder builderForValue) {
      if (blockBodyBuilder_ == null) {
        statement_ = builderForValue.build();
        onChanged();
      } else {
        blockBodyBuilder_.setMessage(builderForValue.build());
      }
      statementCase_ = 4;
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrBlockBody block_body = 4;</code>
     */
    public Builder mergeBlockBody(org.jetbrains.kotlin.backend.common.serialization.proto.IrBlockBody value) {
      if (blockBodyBuilder_ == null) {
        if (statementCase_ == 4 &&
            statement_ != org.jetbrains.kotlin.backend.common.serialization.proto.IrBlockBody.getDefaultInstance()) {
          statement_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrBlockBody.newBuilder((org.jetbrains.kotlin.backend.common.serialization.proto.IrBlockBody) statement_)
              .mergeFrom(value).buildPartial();
        } else {
          statement_ = value;
        }
        onChanged();
      } else {
        if (statementCase_ == 4) {
          blockBodyBuilder_.mergeFrom(value);
        } else {
          blockBodyBuilder_.setMessage(value);
        }
      }
      statementCase_ = 4;
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrBlockBody block_body = 4;</code>
     */
    public Builder clearBlockBody() {
      if (blockBodyBuilder_ == null) {
        if (statementCase_ == 4) {
          statementCase_ = 0;
          statement_ = null;
          onChanged();
        }
      } else {
        if (statementCase_ == 4) {
          statementCase_ = 0;
          statement_ = null;
        }
        blockBodyBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrBlockBody block_body = 4;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrBlockBody.Builder getBlockBodyBuilder() {
      return getBlockBodyFieldBuilder().getBuilder();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrBlockBody block_body = 4;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrBlockBodyOrBuilder getBlockBodyOrBuilder() {
      if ((statementCase_ == 4) && (blockBodyBuilder_ != null)) {
        return blockBodyBuilder_.getMessageOrBuilder();
      } else {
        if (statementCase_ == 4) {
          return (org.jetbrains.kotlin.backend.common.serialization.proto.IrBlockBody) statement_;
        }
        return org.jetbrains.kotlin.backend.common.serialization.proto.IrBlockBody.getDefaultInstance();
      }
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrBlockBody block_body = 4;</code>
     */
    private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
        org.jetbrains.kotlin.backend.common.serialization.proto.IrBlockBody, org.jetbrains.kotlin.backend.common.serialization.proto.IrBlockBody.Builder, org.jetbrains.kotlin.backend.common.serialization.proto.IrBlockBodyOrBuilder> 
        getBlockBodyFieldBuilder() {
      if (blockBodyBuilder_ == null) {
        if (!(statementCase_ == 4)) {
          statement_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrBlockBody.getDefaultInstance();
        }
        blockBodyBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
            org.jetbrains.kotlin.backend.common.serialization.proto.IrBlockBody, org.jetbrains.kotlin.backend.common.serialization.proto.IrBlockBody.Builder, org.jetbrains.kotlin.backend.common.serialization.proto.IrBlockBodyOrBuilder>(
                (org.jetbrains.kotlin.backend.common.serialization.proto.IrBlockBody) statement_,
                getParentForChildren(),
                isClean());
        statement_ = null;
      }
      statementCase_ = 4;
      onChanged();
      return blockBodyBuilder_;
    }

    private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
        org.jetbrains.kotlin.backend.common.serialization.proto.IrBranch, org.jetbrains.kotlin.backend.common.serialization.proto.IrBranch.Builder, org.jetbrains.kotlin.backend.common.serialization.proto.IrBranchOrBuilder> branchBuilder_;
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrBranch branch = 5;</code>
     * @return Whether the branch field is set.
     */
    @java.lang.Override
    public boolean hasBranch() {
      return statementCase_ == 5;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrBranch branch = 5;</code>
     * @return The branch.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrBranch getBranch() {
      if (branchBuilder_ == null) {
        if (statementCase_ == 5) {
          return (org.jetbrains.kotlin.backend.common.serialization.proto.IrBranch) statement_;
        }
        return org.jetbrains.kotlin.backend.common.serialization.proto.IrBranch.getDefaultInstance();
      } else {
        if (statementCase_ == 5) {
          return branchBuilder_.getMessage();
        }
        return org.jetbrains.kotlin.backend.common.serialization.proto.IrBranch.getDefaultInstance();
      }
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrBranch branch = 5;</code>
     */
    public Builder setBranch(org.jetbrains.kotlin.backend.common.serialization.proto.IrBranch value) {
      if (branchBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        statement_ = value;
        onChanged();
      } else {
        branchBuilder_.setMessage(value);
      }
      statementCase_ = 5;
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrBranch branch = 5;</code>
     */
    public Builder setBranch(
        org.jetbrains.kotlin.backend.common.serialization.proto.IrBranch.Builder builderForValue) {
      if (branchBuilder_ == null) {
        statement_ = builderForValue.build();
        onChanged();
      } else {
        branchBuilder_.setMessage(builderForValue.build());
      }
      statementCase_ = 5;
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrBranch branch = 5;</code>
     */
    public Builder mergeBranch(org.jetbrains.kotlin.backend.common.serialization.proto.IrBranch value) {
      if (branchBuilder_ == null) {
        if (statementCase_ == 5 &&
            statement_ != org.jetbrains.kotlin.backend.common.serialization.proto.IrBranch.getDefaultInstance()) {
          statement_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrBranch.newBuilder((org.jetbrains.kotlin.backend.common.serialization.proto.IrBranch) statement_)
              .mergeFrom(value).buildPartial();
        } else {
          statement_ = value;
        }
        onChanged();
      } else {
        if (statementCase_ == 5) {
          branchBuilder_.mergeFrom(value);
        } else {
          branchBuilder_.setMessage(value);
        }
      }
      statementCase_ = 5;
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrBranch branch = 5;</code>
     */
    public Builder clearBranch() {
      if (branchBuilder_ == null) {
        if (statementCase_ == 5) {
          statementCase_ = 0;
          statement_ = null;
          onChanged();
        }
      } else {
        if (statementCase_ == 5) {
          statementCase_ = 0;
          statement_ = null;
        }
        branchBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrBranch branch = 5;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrBranch.Builder getBranchBuilder() {
      return getBranchFieldBuilder().getBuilder();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrBranch branch = 5;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrBranchOrBuilder getBranchOrBuilder() {
      if ((statementCase_ == 5) && (branchBuilder_ != null)) {
        return branchBuilder_.getMessageOrBuilder();
      } else {
        if (statementCase_ == 5) {
          return (org.jetbrains.kotlin.backend.common.serialization.proto.IrBranch) statement_;
        }
        return org.jetbrains.kotlin.backend.common.serialization.proto.IrBranch.getDefaultInstance();
      }
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrBranch branch = 5;</code>
     */
    private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
        org.jetbrains.kotlin.backend.common.serialization.proto.IrBranch, org.jetbrains.kotlin.backend.common.serialization.proto.IrBranch.Builder, org.jetbrains.kotlin.backend.common.serialization.proto.IrBranchOrBuilder> 
        getBranchFieldBuilder() {
      if (branchBuilder_ == null) {
        if (!(statementCase_ == 5)) {
          statement_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrBranch.getDefaultInstance();
        }
        branchBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
            org.jetbrains.kotlin.backend.common.serialization.proto.IrBranch, org.jetbrains.kotlin.backend.common.serialization.proto.IrBranch.Builder, org.jetbrains.kotlin.backend.common.serialization.proto.IrBranchOrBuilder>(
                (org.jetbrains.kotlin.backend.common.serialization.proto.IrBranch) statement_,
                getParentForChildren(),
                isClean());
        statement_ = null;
      }
      statementCase_ = 5;
      onChanged();
      return branchBuilder_;
    }

    private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
        org.jetbrains.kotlin.backend.common.serialization.proto.IrCatch, org.jetbrains.kotlin.backend.common.serialization.proto.IrCatch.Builder, org.jetbrains.kotlin.backend.common.serialization.proto.IrCatchOrBuilder> catchBuilder_;
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrCatch catch = 6;</code>
     * @return Whether the catch field is set.
     */
    @java.lang.Override
    public boolean hasCatch() {
      return statementCase_ == 6;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrCatch catch = 6;</code>
     * @return The catch.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrCatch getCatch() {
      if (catchBuilder_ == null) {
        if (statementCase_ == 6) {
          return (org.jetbrains.kotlin.backend.common.serialization.proto.IrCatch) statement_;
        }
        return org.jetbrains.kotlin.backend.common.serialization.proto.IrCatch.getDefaultInstance();
      } else {
        if (statementCase_ == 6) {
          return catchBuilder_.getMessage();
        }
        return org.jetbrains.kotlin.backend.common.serialization.proto.IrCatch.getDefaultInstance();
      }
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrCatch catch = 6;</code>
     */
    public Builder setCatch(org.jetbrains.kotlin.backend.common.serialization.proto.IrCatch value) {
      if (catchBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        statement_ = value;
        onChanged();
      } else {
        catchBuilder_.setMessage(value);
      }
      statementCase_ = 6;
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrCatch catch = 6;</code>
     */
    public Builder setCatch(
        org.jetbrains.kotlin.backend.common.serialization.proto.IrCatch.Builder builderForValue) {
      if (catchBuilder_ == null) {
        statement_ = builderForValue.build();
        onChanged();
      } else {
        catchBuilder_.setMessage(builderForValue.build());
      }
      statementCase_ = 6;
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrCatch catch = 6;</code>
     */
    public Builder mergeCatch(org.jetbrains.kotlin.backend.common.serialization.proto.IrCatch value) {
      if (catchBuilder_ == null) {
        if (statementCase_ == 6 &&
            statement_ != org.jetbrains.kotlin.backend.common.serialization.proto.IrCatch.getDefaultInstance()) {
          statement_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrCatch.newBuilder((org.jetbrains.kotlin.backend.common.serialization.proto.IrCatch) statement_)
              .mergeFrom(value).buildPartial();
        } else {
          statement_ = value;
        }
        onChanged();
      } else {
        if (statementCase_ == 6) {
          catchBuilder_.mergeFrom(value);
        } else {
          catchBuilder_.setMessage(value);
        }
      }
      statementCase_ = 6;
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrCatch catch = 6;</code>
     */
    public Builder clearCatch() {
      if (catchBuilder_ == null) {
        if (statementCase_ == 6) {
          statementCase_ = 0;
          statement_ = null;
          onChanged();
        }
      } else {
        if (statementCase_ == 6) {
          statementCase_ = 0;
          statement_ = null;
        }
        catchBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrCatch catch = 6;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrCatch.Builder getCatchBuilder() {
      return getCatchFieldBuilder().getBuilder();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrCatch catch = 6;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrCatchOrBuilder getCatchOrBuilder() {
      if ((statementCase_ == 6) && (catchBuilder_ != null)) {
        return catchBuilder_.getMessageOrBuilder();
      } else {
        if (statementCase_ == 6) {
          return (org.jetbrains.kotlin.backend.common.serialization.proto.IrCatch) statement_;
        }
        return org.jetbrains.kotlin.backend.common.serialization.proto.IrCatch.getDefaultInstance();
      }
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrCatch catch = 6;</code>
     */
    private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
        org.jetbrains.kotlin.backend.common.serialization.proto.IrCatch, org.jetbrains.kotlin.backend.common.serialization.proto.IrCatch.Builder, org.jetbrains.kotlin.backend.common.serialization.proto.IrCatchOrBuilder> 
        getCatchFieldBuilder() {
      if (catchBuilder_ == null) {
        if (!(statementCase_ == 6)) {
          statement_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrCatch.getDefaultInstance();
        }
        catchBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
            org.jetbrains.kotlin.backend.common.serialization.proto.IrCatch, org.jetbrains.kotlin.backend.common.serialization.proto.IrCatch.Builder, org.jetbrains.kotlin.backend.common.serialization.proto.IrCatchOrBuilder>(
                (org.jetbrains.kotlin.backend.common.serialization.proto.IrCatch) statement_,
                getParentForChildren(),
                isClean());
        statement_ = null;
      }
      statementCase_ = 6;
      onChanged();
      return catchBuilder_;
    }

    private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
        org.jetbrains.kotlin.backend.common.serialization.proto.IrSyntheticBody, org.jetbrains.kotlin.backend.common.serialization.proto.IrSyntheticBody.Builder, org.jetbrains.kotlin.backend.common.serialization.proto.IrSyntheticBodyOrBuilder> syntheticBodyBuilder_;
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrSyntheticBody synthetic_body = 7;</code>
     * @return Whether the syntheticBody field is set.
     */
    @java.lang.Override
    public boolean hasSyntheticBody() {
      return statementCase_ == 7;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrSyntheticBody synthetic_body = 7;</code>
     * @return The syntheticBody.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrSyntheticBody getSyntheticBody() {
      if (syntheticBodyBuilder_ == null) {
        if (statementCase_ == 7) {
          return (org.jetbrains.kotlin.backend.common.serialization.proto.IrSyntheticBody) statement_;
        }
        return org.jetbrains.kotlin.backend.common.serialization.proto.IrSyntheticBody.getDefaultInstance();
      } else {
        if (statementCase_ == 7) {
          return syntheticBodyBuilder_.getMessage();
        }
        return org.jetbrains.kotlin.backend.common.serialization.proto.IrSyntheticBody.getDefaultInstance();
      }
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrSyntheticBody synthetic_body = 7;</code>
     */
    public Builder setSyntheticBody(org.jetbrains.kotlin.backend.common.serialization.proto.IrSyntheticBody value) {
      if (syntheticBodyBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        statement_ = value;
        onChanged();
      } else {
        syntheticBodyBuilder_.setMessage(value);
      }
      statementCase_ = 7;
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrSyntheticBody synthetic_body = 7;</code>
     */
    public Builder setSyntheticBody(
        org.jetbrains.kotlin.backend.common.serialization.proto.IrSyntheticBody.Builder builderForValue) {
      if (syntheticBodyBuilder_ == null) {
        statement_ = builderForValue.build();
        onChanged();
      } else {
        syntheticBodyBuilder_.setMessage(builderForValue.build());
      }
      statementCase_ = 7;
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrSyntheticBody synthetic_body = 7;</code>
     */
    public Builder mergeSyntheticBody(org.jetbrains.kotlin.backend.common.serialization.proto.IrSyntheticBody value) {
      if (syntheticBodyBuilder_ == null) {
        if (statementCase_ == 7 &&
            statement_ != org.jetbrains.kotlin.backend.common.serialization.proto.IrSyntheticBody.getDefaultInstance()) {
          statement_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrSyntheticBody.newBuilder((org.jetbrains.kotlin.backend.common.serialization.proto.IrSyntheticBody) statement_)
              .mergeFrom(value).buildPartial();
        } else {
          statement_ = value;
        }
        onChanged();
      } else {
        if (statementCase_ == 7) {
          syntheticBodyBuilder_.mergeFrom(value);
        } else {
          syntheticBodyBuilder_.setMessage(value);
        }
      }
      statementCase_ = 7;
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrSyntheticBody synthetic_body = 7;</code>
     */
    public Builder clearSyntheticBody() {
      if (syntheticBodyBuilder_ == null) {
        if (statementCase_ == 7) {
          statementCase_ = 0;
          statement_ = null;
          onChanged();
        }
      } else {
        if (statementCase_ == 7) {
          statementCase_ = 0;
          statement_ = null;
        }
        syntheticBodyBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrSyntheticBody synthetic_body = 7;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrSyntheticBody.Builder getSyntheticBodyBuilder() {
      return getSyntheticBodyFieldBuilder().getBuilder();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrSyntheticBody synthetic_body = 7;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrSyntheticBodyOrBuilder getSyntheticBodyOrBuilder() {
      if ((statementCase_ == 7) && (syntheticBodyBuilder_ != null)) {
        return syntheticBodyBuilder_.getMessageOrBuilder();
      } else {
        if (statementCase_ == 7) {
          return (org.jetbrains.kotlin.backend.common.serialization.proto.IrSyntheticBody) statement_;
        }
        return org.jetbrains.kotlin.backend.common.serialization.proto.IrSyntheticBody.getDefaultInstance();
      }
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrSyntheticBody synthetic_body = 7;</code>
     */
    private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
        org.jetbrains.kotlin.backend.common.serialization.proto.IrSyntheticBody, org.jetbrains.kotlin.backend.common.serialization.proto.IrSyntheticBody.Builder, org.jetbrains.kotlin.backend.common.serialization.proto.IrSyntheticBodyOrBuilder> 
        getSyntheticBodyFieldBuilder() {
      if (syntheticBodyBuilder_ == null) {
        if (!(statementCase_ == 7)) {
          statement_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrSyntheticBody.getDefaultInstance();
        }
        syntheticBodyBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
            org.jetbrains.kotlin.backend.common.serialization.proto.IrSyntheticBody, org.jetbrains.kotlin.backend.common.serialization.proto.IrSyntheticBody.Builder, org.jetbrains.kotlin.backend.common.serialization.proto.IrSyntheticBodyOrBuilder>(
                (org.jetbrains.kotlin.backend.common.serialization.proto.IrSyntheticBody) statement_,
                getParentForChildren(),
                isClean());
        statement_ = null;
      }
      statementCase_ = 7;
      onChanged();
      return syntheticBodyBuilder_;
    }

    // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement)
  }

  // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement)
  private static final org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement();
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final org.jetbrains.kotlin.protobuf.Parser<IrStatement>
      PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<IrStatement>() {
    @java.lang.Override
    public IrStatement parsePartialFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static org.jetbrains.kotlin.protobuf.Parser<IrStatement> parser() {
    return PARSER;
  }

  @java.lang.Override
  public org.jetbrains.kotlin.protobuf.Parser<IrStatement> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}
