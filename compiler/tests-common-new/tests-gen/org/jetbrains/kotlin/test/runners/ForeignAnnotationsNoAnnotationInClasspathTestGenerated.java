/*
 * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.test.runners;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.util.KtTestUtil;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link GenerateNewCompilerTests.kt}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
public class ForeignAnnotationsNoAnnotationInClasspathTestGenerated extends AbstractForeignAnnotationsNoAnnotationInClasspathTest {
    @Nested
    @TestMetadata("compiler/testData/foreignAnnotations/tests")
    @TestDataPath("$PROJECT_ROOT")
    public class Tests {
        @Test
        public void testAllFilesPresentInTests() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/foreignAnnotations/tests"), Pattern.compile("^(.+)\\.kt$"), null, true);
        }

        @Test
        @TestMetadata("androidRecently.kt")
        public void testAndroidRecently() throws Exception {
            runTest("compiler/testData/foreignAnnotations/tests/androidRecently.kt");
        }

        @Test
        @TestMetadata("androidSdk.kt")
        public void testAndroidSdk() throws Exception {
            runTest("compiler/testData/foreignAnnotations/tests/androidSdk.kt");
        }

        @Test
        @TestMetadata("android_support.kt")
        public void testAndroid_support() throws Exception {
            runTest("compiler/testData/foreignAnnotations/tests/android_support.kt");
        }

        @Test
        @TestMetadata("androidx.kt")
        public void testAndroidx() throws Exception {
            runTest("compiler/testData/foreignAnnotations/tests/androidx.kt");
        }

        @Test
        @TestMetadata("aosp.kt")
        public void testAosp() throws Exception {
            runTest("compiler/testData/foreignAnnotations/tests/aosp.kt");
        }

        @Test
        @TestMetadata("checkerFramework.kt")
        public void testCheckerFramework() throws Exception {
            runTest("compiler/testData/foreignAnnotations/tests/checkerFramework.kt");
        }

        @Test
        @TestMetadata("eclipse.kt")
        public void testEclipse() throws Exception {
            runTest("compiler/testData/foreignAnnotations/tests/eclipse.kt");
        }

        @Test
        @TestMetadata("findBugsSimple.kt")
        public void testFindBugsSimple() throws Exception {
            runTest("compiler/testData/foreignAnnotations/tests/findBugsSimple.kt");
        }

        @Test
        @TestMetadata("irrelevantQualifierNicknames.kt")
        public void testIrrelevantQualifierNicknames() throws Exception {
            runTest("compiler/testData/foreignAnnotations/tests/irrelevantQualifierNicknames.kt");
        }

        @Test
        @TestMetadata("lombokSimple.kt")
        public void testLombokSimple() throws Exception {
            runTest("compiler/testData/foreignAnnotations/tests/lombokSimple.kt");
        }

        @Test
        @TestMetadata("rxjava.kt")
        public void testRxjava() throws Exception {
            runTest("compiler/testData/foreignAnnotations/tests/rxjava.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/foreignAnnotations/tests/jsr305")
        @TestDataPath("$PROJECT_ROOT")
        public class Jsr305 {
            @Test
            public void testAllFilesPresentInJsr305() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/foreignAnnotations/tests/jsr305"), Pattern.compile("^(.+)\\.kt$"), null, true);
            }

            @Test
            @TestMetadata("nonNullNever.kt")
            public void testNonNullNever() throws Exception {
                runTest("compiler/testData/foreignAnnotations/tests/jsr305/nonNullNever.kt");
            }

            @Test
            @TestMetadata("nullabilityNicknames.kt")
            public void testNullabilityNicknames() throws Exception {
                runTest("compiler/testData/foreignAnnotations/tests/jsr305/nullabilityNicknames.kt");
            }

            @Test
            @TestMetadata("simple.kt")
            public void testSimple() throws Exception {
                runTest("compiler/testData/foreignAnnotations/tests/jsr305/simple.kt");
            }

            @Test
            @TestMetadata("strange.kt")
            public void testStrange() throws Exception {
                runTest("compiler/testData/foreignAnnotations/tests/jsr305/strange.kt");
            }

            @Nested
            @TestMetadata("compiler/testData/foreignAnnotations/tests/jsr305/ignore")
            @TestDataPath("$PROJECT_ROOT")
            public class Ignore {
                @Test
                public void testAllFilesPresentInIgnore() throws Exception {
                    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/foreignAnnotations/tests/jsr305/ignore"), Pattern.compile("^(.+)\\.kt$"), null, true);
                }

                @Test
                @TestMetadata("parametersAreNonnullByDefault.kt")
                public void testParametersAreNonnullByDefault() throws Exception {
                    runTest("compiler/testData/foreignAnnotations/tests/jsr305/ignore/parametersAreNonnullByDefault.kt");
                }
            }

            @Nested
            @TestMetadata("compiler/testData/foreignAnnotations/tests/jsr305/nullabilityWarnings")
            @TestDataPath("$PROJECT_ROOT")
            public class NullabilityWarnings {
                @Test
                public void testAllFilesPresentInNullabilityWarnings() throws Exception {
                    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/foreignAnnotations/tests/jsr305/nullabilityWarnings"), Pattern.compile("^(.+)\\.kt$"), null, true);
                }

                @Test
                @TestMetadata("elvis.kt")
                public void testElvis() throws Exception {
                    runTest("compiler/testData/foreignAnnotations/tests/jsr305/nullabilityWarnings/elvis.kt");
                }

                @Test
                @TestMetadata("localInference.kt")
                public void testLocalInference() throws Exception {
                    runTest("compiler/testData/foreignAnnotations/tests/jsr305/nullabilityWarnings/localInference.kt");
                }

                @Test
                @TestMetadata("nullabilityGenerics.kt")
                public void testNullabilityGenerics() throws Exception {
                    runTest("compiler/testData/foreignAnnotations/tests/jsr305/nullabilityWarnings/nullabilityGenerics.kt");
                }

                @Test
                @TestMetadata("nullabilityNicknames.kt")
                public void testNullabilityNicknames() throws Exception {
                    runTest("compiler/testData/foreignAnnotations/tests/jsr305/nullabilityWarnings/nullabilityNicknames.kt");
                }

                @Test
                @TestMetadata("safeCalls.kt")
                public void testSafeCalls() throws Exception {
                    runTest("compiler/testData/foreignAnnotations/tests/jsr305/nullabilityWarnings/safeCalls.kt");
                }

                @Test
                @TestMetadata("simple.kt")
                public void testSimple() throws Exception {
                    runTest("compiler/testData/foreignAnnotations/tests/jsr305/nullabilityWarnings/simple.kt");
                }

                @Test
                @TestMetadata("strange.kt")
                public void testStrange() throws Exception {
                    runTest("compiler/testData/foreignAnnotations/tests/jsr305/nullabilityWarnings/strange.kt");
                }

                @Nested
                @TestMetadata("compiler/testData/foreignAnnotations/tests/jsr305/nullabilityWarnings/fromPlatformTypes")
                @TestDataPath("$PROJECT_ROOT")
                public class FromPlatformTypes {
                    @Test
                    public void testAllFilesPresentInFromPlatformTypes() throws Exception {
                        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/foreignAnnotations/tests/jsr305/nullabilityWarnings/fromPlatformTypes"), Pattern.compile("^(.+)\\.kt$"), null, true);
                    }

                    @Test
                    @TestMetadata("arithmetic.kt")
                    public void testArithmetic() throws Exception {
                        runTest("compiler/testData/foreignAnnotations/tests/jsr305/nullabilityWarnings/fromPlatformTypes/arithmetic.kt");
                    }

                    @Test
                    @TestMetadata("array.kt")
                    public void testArray() throws Exception {
                        runTest("compiler/testData/foreignAnnotations/tests/jsr305/nullabilityWarnings/fromPlatformTypes/array.kt");
                    }

                    @Test
                    @TestMetadata("assignToVar.kt")
                    public void testAssignToVar() throws Exception {
                        runTest("compiler/testData/foreignAnnotations/tests/jsr305/nullabilityWarnings/fromPlatformTypes/assignToVar.kt");
                    }

                    @Test
                    @TestMetadata("conditions.kt")
                    public void testConditions() throws Exception {
                        runTest("compiler/testData/foreignAnnotations/tests/jsr305/nullabilityWarnings/fromPlatformTypes/conditions.kt");
                    }

                    @Test
                    @TestMetadata("dataFlowInfo.kt")
                    public void testDataFlowInfo() throws Exception {
                        runTest("compiler/testData/foreignAnnotations/tests/jsr305/nullabilityWarnings/fromPlatformTypes/dataFlowInfo.kt");
                    }

                    @Test
                    @TestMetadata("defaultParameters.kt")
                    public void testDefaultParameters() throws Exception {
                        runTest("compiler/testData/foreignAnnotations/tests/jsr305/nullabilityWarnings/fromPlatformTypes/defaultParameters.kt");
                    }

                    @Test
                    @TestMetadata("delegatedProperties.kt")
                    public void testDelegatedProperties() throws Exception {
                        runTest("compiler/testData/foreignAnnotations/tests/jsr305/nullabilityWarnings/fromPlatformTypes/delegatedProperties.kt");
                    }

                    @Test
                    @TestMetadata("delegation.kt")
                    public void testDelegation() throws Exception {
                        runTest("compiler/testData/foreignAnnotations/tests/jsr305/nullabilityWarnings/fromPlatformTypes/delegation.kt");
                    }

                    @Test
                    @TestMetadata("derefenceExtension.kt")
                    public void testDerefenceExtension() throws Exception {
                        runTest("compiler/testData/foreignAnnotations/tests/jsr305/nullabilityWarnings/fromPlatformTypes/derefenceExtension.kt");
                    }

                    @Test
                    @TestMetadata("derefenceMember.kt")
                    public void testDerefenceMember() throws Exception {
                        runTest("compiler/testData/foreignAnnotations/tests/jsr305/nullabilityWarnings/fromPlatformTypes/derefenceMember.kt");
                    }

                    @Test
                    @TestMetadata("expectedType.kt")
                    public void testExpectedType() throws Exception {
                        runTest("compiler/testData/foreignAnnotations/tests/jsr305/nullabilityWarnings/fromPlatformTypes/expectedType.kt");
                    }

                    @Test
                    @TestMetadata("for.kt")
                    public void testFor() throws Exception {
                        runTest("compiler/testData/foreignAnnotations/tests/jsr305/nullabilityWarnings/fromPlatformTypes/for.kt");
                    }

                    @Test
                    @TestMetadata("functionArguments.kt")
                    public void testFunctionArguments() throws Exception {
                        runTest("compiler/testData/foreignAnnotations/tests/jsr305/nullabilityWarnings/fromPlatformTypes/functionArguments.kt");
                    }

                    @Test
                    @TestMetadata("invoke.kt")
                    public void testInvoke() throws Exception {
                        runTest("compiler/testData/foreignAnnotations/tests/jsr305/nullabilityWarnings/fromPlatformTypes/invoke.kt");
                    }

                    @Test
                    @TestMetadata("kt6829.kt")
                    public void testKt6829() throws Exception {
                        runTest("compiler/testData/foreignAnnotations/tests/jsr305/nullabilityWarnings/fromPlatformTypes/kt6829.kt");
                    }

                    @Test
                    @TestMetadata("multiDeclaration.kt")
                    public void testMultiDeclaration() throws Exception {
                        runTest("compiler/testData/foreignAnnotations/tests/jsr305/nullabilityWarnings/fromPlatformTypes/multiDeclaration.kt");
                    }

                    @Test
                    @TestMetadata("passToJava.kt")
                    public void testPassToJava() throws Exception {
                        runTest("compiler/testData/foreignAnnotations/tests/jsr305/nullabilityWarnings/fromPlatformTypes/passToJava.kt");
                    }

                    @Test
                    @TestMetadata("primitiveArray.kt")
                    public void testPrimitiveArray() throws Exception {
                        runTest("compiler/testData/foreignAnnotations/tests/jsr305/nullabilityWarnings/fromPlatformTypes/primitiveArray.kt");
                    }

                    @Test
                    @TestMetadata("throw.kt")
                    public void testThrow() throws Exception {
                        runTest("compiler/testData/foreignAnnotations/tests/jsr305/nullabilityWarnings/fromPlatformTypes/throw.kt");
                    }

                    @Test
                    @TestMetadata("uselessElvisRightIsNull.kt")
                    public void testUselessElvisRightIsNull() throws Exception {
                        runTest("compiler/testData/foreignAnnotations/tests/jsr305/nullabilityWarnings/fromPlatformTypes/uselessElvisRightIsNull.kt");
                    }
                }

                @Nested
                @TestMetadata("compiler/testData/foreignAnnotations/tests/jsr305/nullabilityWarnings/typeQualifierDefault")
                @TestDataPath("$PROJECT_ROOT")
                public class TypeQualifierDefault {
                    @Test
                    public void testAllFilesPresentInTypeQualifierDefault() throws Exception {
                        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/foreignAnnotations/tests/jsr305/nullabilityWarnings/typeQualifierDefault"), Pattern.compile("^(.+)\\.kt$"), null, true);
                    }

                    @Test
                    @TestMetadata("equalsOnNonNull.kt")
                    public void testEqualsOnNonNull() throws Exception {
                        runTest("compiler/testData/foreignAnnotations/tests/jsr305/nullabilityWarnings/typeQualifierDefault/equalsOnNonNull.kt");
                    }

                    @Test
                    @TestMetadata("fieldsAreNullable.kt")
                    public void testFieldsAreNullable() throws Exception {
                        runTest("compiler/testData/foreignAnnotations/tests/jsr305/nullabilityWarnings/typeQualifierDefault/fieldsAreNullable.kt");
                    }

                    @Test
                    @TestMetadata("nullabilityFromOverridden.kt")
                    public void testNullabilityFromOverridden() throws Exception {
                        runTest("compiler/testData/foreignAnnotations/tests/jsr305/nullabilityWarnings/typeQualifierDefault/nullabilityFromOverridden.kt");
                    }

                    @Test
                    @TestMetadata("overridingDefaultQualifier.kt")
                    public void testOverridingDefaultQualifier() throws Exception {
                        runTest("compiler/testData/foreignAnnotations/tests/jsr305/nullabilityWarnings/typeQualifierDefault/overridingDefaultQualifier.kt");
                    }

                    @Test
                    @TestMetadata("parametersAreNonnullByDefault.kt")
                    public void testParametersAreNonnullByDefault() throws Exception {
                        runTest("compiler/testData/foreignAnnotations/tests/jsr305/nullabilityWarnings/typeQualifierDefault/parametersAreNonnullByDefault.kt");
                    }

                    @Test
                    @TestMetadata("parametersAreNonnullByDefaultPackage.kt")
                    public void testParametersAreNonnullByDefaultPackage() throws Exception {
                        runTest("compiler/testData/foreignAnnotations/tests/jsr305/nullabilityWarnings/typeQualifierDefault/parametersAreNonnullByDefaultPackage.kt");
                    }

                    @Test
                    @TestMetadata("springNullable.kt")
                    public void testSpringNullable() throws Exception {
                        runTest("compiler/testData/foreignAnnotations/tests/jsr305/nullabilityWarnings/typeQualifierDefault/springNullable.kt");
                    }

                    @Test
                    @TestMetadata("springNullablePackage.kt")
                    public void testSpringNullablePackage() throws Exception {
                        runTest("compiler/testData/foreignAnnotations/tests/jsr305/nullabilityWarnings/typeQualifierDefault/springNullablePackage.kt");
                    }
                }
            }

            @Nested
            @TestMetadata("compiler/testData/foreignAnnotations/tests/jsr305/typeQualifierDefault")
            @TestDataPath("$PROJECT_ROOT")
            public class TypeQualifierDefault {
                @Test
                public void testAllFilesPresentInTypeQualifierDefault() throws Exception {
                    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/foreignAnnotations/tests/jsr305/typeQualifierDefault"), Pattern.compile("^(.+)\\.kt$"), null, true);
                }

                @Test
                @TestMetadata("fieldsAreNullable.kt")
                public void testFieldsAreNullable() throws Exception {
                    runTest("compiler/testData/foreignAnnotations/tests/jsr305/typeQualifierDefault/fieldsAreNullable.kt");
                }

                @Test
                @TestMetadata("forceFlexibility.kt")
                public void testForceFlexibility() throws Exception {
                    runTest("compiler/testData/foreignAnnotations/tests/jsr305/typeQualifierDefault/forceFlexibility.kt");
                }

                @Test
                @TestMetadata("forceFlexibleOverOverrides.kt")
                public void testForceFlexibleOverOverrides() throws Exception {
                    runTest("compiler/testData/foreignAnnotations/tests/jsr305/typeQualifierDefault/forceFlexibleOverOverrides.kt");
                }

                @Test
                @TestMetadata("nullabilityFromOverridden.kt")
                public void testNullabilityFromOverridden() throws Exception {
                    runTest("compiler/testData/foreignAnnotations/tests/jsr305/typeQualifierDefault/nullabilityFromOverridden.kt");
                }

                @Test
                @TestMetadata("overridingDefaultQualifier.kt")
                public void testOverridingDefaultQualifier() throws Exception {
                    runTest("compiler/testData/foreignAnnotations/tests/jsr305/typeQualifierDefault/overridingDefaultQualifier.kt");
                }

                @Test
                @TestMetadata("parametersAreNonnullByDefault.kt")
                public void testParametersAreNonnullByDefault() throws Exception {
                    runTest("compiler/testData/foreignAnnotations/tests/jsr305/typeQualifierDefault/parametersAreNonnullByDefault.kt");
                }

                @Test
                @TestMetadata("parametersAreNonnullByDefaultPackage.kt")
                public void testParametersAreNonnullByDefaultPackage() throws Exception {
                    runTest("compiler/testData/foreignAnnotations/tests/jsr305/typeQualifierDefault/parametersAreNonnullByDefaultPackage.kt");
                }

                @Test
                @TestMetadata("springNullable.kt")
                public void testSpringNullable() throws Exception {
                    runTest("compiler/testData/foreignAnnotations/tests/jsr305/typeQualifierDefault/springNullable.kt");
                }

                @Test
                @TestMetadata("springNullablePackage.kt")
                public void testSpringNullablePackage() throws Exception {
                    runTest("compiler/testData/foreignAnnotations/tests/jsr305/typeQualifierDefault/springNullablePackage.kt");
                }
            }
        }

        @Nested
        @TestMetadata("compiler/testData/foreignAnnotations/tests/jsr305NullabilityWarnings")
        @TestDataPath("$PROJECT_ROOT")
        public class Jsr305NullabilityWarnings {
            @Test
            public void testAllFilesPresentInJsr305NullabilityWarnings() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/foreignAnnotations/tests/jsr305NullabilityWarnings"), Pattern.compile("^(.+)\\.kt$"), null, true);
            }

            @Nested
            @TestMetadata("compiler/testData/foreignAnnotations/tests/jsr305NullabilityWarnings/migration")
            @TestDataPath("$PROJECT_ROOT")
            public class Migration {
                @Test
                public void testAllFilesPresentInMigration() throws Exception {
                    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/foreignAnnotations/tests/jsr305NullabilityWarnings/migration"), Pattern.compile("^(.+)\\.kt$"), null, true);
                }

                @Test
                @TestMetadata("customMigration.kt")
                public void testCustomMigration() throws Exception {
                    runTest("compiler/testData/foreignAnnotations/tests/jsr305NullabilityWarnings/migration/customMigration.kt");
                }

                @Test
                @TestMetadata("globalIgnore.kt")
                public void testGlobalIgnore() throws Exception {
                    runTest("compiler/testData/foreignAnnotations/tests/jsr305NullabilityWarnings/migration/globalIgnore.kt");
                }

                @Test
                @TestMetadata("globalWarningMigrationIgnore.kt")
                public void testGlobalWarningMigrationIgnore() throws Exception {
                    runTest("compiler/testData/foreignAnnotations/tests/jsr305NullabilityWarnings/migration/globalWarningMigrationIgnore.kt");
                }

                @Test
                @TestMetadata("migrationError.kt")
                public void testMigrationError() throws Exception {
                    runTest("compiler/testData/foreignAnnotations/tests/jsr305NullabilityWarnings/migration/migrationError.kt");
                }

                @Test
                @TestMetadata("migrationIgnore.kt")
                public void testMigrationIgnore() throws Exception {
                    runTest("compiler/testData/foreignAnnotations/tests/jsr305NullabilityWarnings/migration/migrationIgnore.kt");
                }

                @Test
                @TestMetadata("migrationWarning.kt")
                public void testMigrationWarning() throws Exception {
                    runTest("compiler/testData/foreignAnnotations/tests/jsr305NullabilityWarnings/migration/migrationWarning.kt");
                }

                @Test
                @TestMetadata("overrideConflicts.kt")
                public void testOverrideConflicts() throws Exception {
                    runTest("compiler/testData/foreignAnnotations/tests/jsr305NullabilityWarnings/migration/overrideConflicts.kt");
                }

                @Test
                @TestMetadata("specialCollision.kt")
                public void testSpecialCollision() throws Exception {
                    runTest("compiler/testData/foreignAnnotations/tests/jsr305NullabilityWarnings/migration/specialCollision.kt");
                }

                @Test
                @TestMetadata("stateRefinement.kt")
                public void testStateRefinement() throws Exception {
                    runTest("compiler/testData/foreignAnnotations/tests/jsr305NullabilityWarnings/migration/stateRefinement.kt");
                }
            }
        }

        @Nested
        @TestMetadata("compiler/testData/foreignAnnotations/tests/typeQualifierDefault")
        @TestDataPath("$PROJECT_ROOT")
        public class TypeQualifierDefault {
            @Test
            public void testAllFilesPresentInTypeQualifierDefault() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/foreignAnnotations/tests/typeQualifierDefault"), Pattern.compile("^(.+)\\.kt$"), null, true);
            }

            @Test
            @TestMetadata("defaultAndNicknameMigrationPolicy.kt")
            public void testDefaultAndNicknameMigrationPolicy() throws Exception {
                runTest("compiler/testData/foreignAnnotations/tests/typeQualifierDefault/defaultAndNicknameMigrationPolicy.kt");
            }
        }
    }

    @Nested
    @TestMetadata("compiler/testData/foreignAnnotations/java8Tests")
    @TestDataPath("$PROJECT_ROOT")
    public class Java8Tests {
        @Test
        public void testAllFilesPresentInJava8Tests() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/foreignAnnotations/java8Tests"), Pattern.compile("^(.+)\\.kt$"), null, true, "jspecify", "typeEnhancementOnCompiledJava");
        }

        @Test
        @TestMetadata("checkerFramework.kt")
        public void testCheckerFramework() throws Exception {
            runTest("compiler/testData/foreignAnnotations/java8Tests/checkerFramework.kt");
        }

        @Test
        @TestMetadata("eclipse.kt")
        public void testEclipse() throws Exception {
            runTest("compiler/testData/foreignAnnotations/java8Tests/eclipse.kt");
        }

        @Test
        @TestMetadata("typeUseOnObject.kt")
        public void testTypeUseOnObject() throws Exception {
            runTest("compiler/testData/foreignAnnotations/java8Tests/typeUseOnObject.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/foreignAnnotations/java8Tests/jsr305")
        @TestDataPath("$PROJECT_ROOT")
        public class Jsr305 {
            @Test
            public void testAllFilesPresentInJsr305() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/foreignAnnotations/java8Tests/jsr305"), Pattern.compile("^(.+)\\.kt$"), null, true);
            }

            @Test
            @TestMetadata("defaultAnnotationAppliedToType.kt")
            public void testDefaultAnnotationAppliedToType() throws Exception {
                runTest("compiler/testData/foreignAnnotations/java8Tests/jsr305/defaultAnnotationAppliedToType.kt");
            }

            @Test
            @TestMetadata("defaultAnnotationAppliedToTypeForCompiledJava.kt")
            public void testDefaultAnnotationAppliedToTypeForCompiledJava() throws Exception {
                runTest("compiler/testData/foreignAnnotations/java8Tests/jsr305/defaultAnnotationAppliedToTypeForCompiledJava.kt");
            }

            @Test
            @TestMetadata("springNullableWithTypeUse.kt")
            public void testSpringNullableWithTypeUse() throws Exception {
                runTest("compiler/testData/foreignAnnotations/java8Tests/jsr305/springNullableWithTypeUse.kt");
            }

            @Test
            @TestMetadata("typeArguments.kt")
            public void testTypeArguments() throws Exception {
                runTest("compiler/testData/foreignAnnotations/java8Tests/jsr305/typeArguments.kt");
            }

            @Test
            @TestMetadata("typeUseVsMethodConflict.kt")
            public void testTypeUseVsMethodConflict() throws Exception {
                runTest("compiler/testData/foreignAnnotations/java8Tests/jsr305/typeUseVsMethodConflict.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/foreignAnnotations/java8Tests/typeEnhancement")
        @TestDataPath("$PROJECT_ROOT")
        public class TypeEnhancement {
            @Test
            public void testAllFilesPresentInTypeEnhancement() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/foreignAnnotations/java8Tests/typeEnhancement"), Pattern.compile("^(.+)\\.kt$"), null, true);
            }

            @Test
            @TestMetadata("annotatedTypeArguments.kt")
            public void testAnnotatedTypeArguments() throws Exception {
                runTest("compiler/testData/foreignAnnotations/java8Tests/typeEnhancement/annotatedTypeArguments.kt");
            }

            @Test
            @TestMetadata("methodWithTypeParameter.kt")
            public void testMethodWithTypeParameter() throws Exception {
                runTest("compiler/testData/foreignAnnotations/java8Tests/typeEnhancement/methodWithTypeParameter.kt");
            }

            @Test
            @TestMetadata("notNullVarargsOverrides.kt")
            public void testNotNullVarargsOverrides() throws Exception {
                runTest("compiler/testData/foreignAnnotations/java8Tests/typeEnhancement/notNullVarargsOverrides.kt");
            }

            @Test
            @TestMetadata("nullableVarargsOverrides.kt")
            public void testNullableVarargsOverrides() throws Exception {
                runTest("compiler/testData/foreignAnnotations/java8Tests/typeEnhancement/nullableVarargsOverrides.kt");
            }

            @Test
            @TestMetadata("returnTypeDifferentConstructor.kt")
            public void testReturnTypeDifferentConstructor() throws Exception {
                runTest("compiler/testData/foreignAnnotations/java8Tests/typeEnhancement/returnTypeDifferentConstructor.kt");
            }

            @Test
            @TestMetadata("returnTypeOverrideInKotlin.kt")
            public void testReturnTypeOverrideInKotlin() throws Exception {
                runTest("compiler/testData/foreignAnnotations/java8Tests/typeEnhancement/returnTypeOverrideInKotlin.kt");
            }

            @Test
            @TestMetadata("simple.kt")
            public void testSimple() throws Exception {
                runTest("compiler/testData/foreignAnnotations/java8Tests/typeEnhancement/simple.kt");
            }
        }
    }
}
