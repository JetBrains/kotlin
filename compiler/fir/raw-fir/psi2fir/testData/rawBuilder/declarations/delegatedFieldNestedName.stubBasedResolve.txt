FILE: [ResolvedTo(ANNOTATION_ARGUMENTS)] delegatedFieldNestedName.kt
    @R|kotlin/annotation/Target|[Types](allowedTargets = vararg(Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.TYPE|)) public final [ResolvedTo(BODY_RESOLVE)] annotation class Anno : R|kotlin/Annotation| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Anno] constructor([ResolvedTo(BODY_RESOLVE)] [CorrespondingProperty=second/Anno.i] i: R|kotlin/Int|): R|second/Anno| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(BODY_RESOLVE)] [IsFromPrimaryConstructor=true] val i: R|kotlin/Int| = R|<local>/i|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Anno] get(): R|kotlin/Int|

    }
    public abstract [ResolvedTo(BODY_RESOLVE)] interface Base<[ResolvedTo(BODY_RESOLVE)] A> : R|kotlin/Any| {
        public open [ResolvedTo(ANNOTATION_ARGUMENTS)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

    }
    public abstract [ResolvedTo(BODY_RESOLVE)] interface Second<[ResolvedTo(BODY_RESOLVE)] T> : R|kotlin/Any| {
    }
    public final const [ResolvedTo(CONTRACTS)] val outer: <implicit> = LAZY_EXPRESSION
        public [ResolvedTo(CONTRACTS)] get(): <implicit>
    public final const [ResolvedTo(CONTRACTS)] val inner: <implicit> = LAZY_EXPRESSION
        public [ResolvedTo(CONTRACTS)] get(): <implicit>
    public final [ResolvedTo(CONSTANT_EVALUATION)] [DelegateFieldsMapKey={0=FirFieldSymbol second/MyClass.$$delegate_0, 1=FirFieldSymbol second/MyClass.$$delegate_1}] class MyClass : R|@R|second/Anno|(LAZY_EXPRESSION)  second/Base<@R|second/Anno|(LAZY_EXPRESSION)  second/Base<@R|second/Anno|(LAZY_EXPRESSION)  kotlin/Int>>|, R|@R|second/Anno|(LAZY_EXPRESSION)  second/Second<@R|second/Anno|(LAZY_EXPRESSION)  kotlin/String>| {
        public [ResolvedTo(CONSTANT_EVALUATION)] [ContainingClassKey=MyClass] constructor(): R|second/MyClass| {
            LAZY_super<<implicit>>
        }

        private final [ResolvedTo(CONSTANT_EVALUATION)] field $$delegate_0: R|@R|second/Anno|(LAZY_EXPRESSION)  second/Base<@R|second/Anno|(LAZY_EXPRESSION)  second/Base<@R|second/Anno|(LAZY_EXPRESSION)  kotlin/Int>>| = LAZY_EXPRESSION

        private final [ResolvedTo(CONSTANT_EVALUATION)] field $$delegate_1: R|@R|second/Anno|(LAZY_EXPRESSION)  second/Second<@R|second/Anno|(LAZY_EXPRESSION)  kotlin/String>| = LAZY_EXPRESSION

        public final companion [ResolvedTo(CONSTANT_EVALUATION)] object Companion : R|@R|second/Anno|(LAZY_EXPRESSION)  second/Base<@R|second/Anno|(LAZY_EXPRESSION)  second/Base<@R|second/Anno|(LAZY_EXPRESSION)  kotlin/Int>>| {
            private [ResolvedTo(CONSTANT_EVALUATION)] [ContainingClassKey=Companion] constructor(): R|second/MyClass.Companion| {
                LAZY_super<<implicit>>
            }

            public final const [ResolvedTo(CONTRACTS)] val outer: <implicit> = LAZY_EXPRESSION
                public [ResolvedTo(CONTRACTS)] [ContainingClassKey=Companion] get(): <implicit>

            public final const [ResolvedTo(CONTRACTS)] val inner: <implicit> = LAZY_EXPRESSION
                public [ResolvedTo(CONTRACTS)] [ContainingClassKey=Companion] get(): <implicit>

        }

        public final [ResolvedTo(CONSTANT_EVALUATION)] object NestedObject : R|@R|second/Anno|(LAZY_EXPRESSION)  second/Second<@R|second/Anno|(LAZY_EXPRESSION)  kotlin/String>| {
            private [ResolvedTo(CONSTANT_EVALUATION)] [ContainingClassKey=NestedObject] constructor(): R|second/MyClass.NestedObject| {
                LAZY_super<<implicit>>
            }

        }

    }