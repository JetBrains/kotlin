package

package api {
    @api.ExperimentalAPI public val property: kotlin.String = ""
    @api.ExperimentalAPI public fun function(): kotlin.String

    @kotlin.Experimental(level = Level.WARNING) @kotlin.annotation.Target(allowedTargets = {AnnotationTarget.TYPE, AnnotationTarget.CLASS, AnnotationTarget.FUNCTION, AnnotationTarget.PROPERTY, AnnotationTarget.TYPEALIAS, AnnotationTarget.VALUE_PARAMETER}) public final annotation class ExperimentalAPI : kotlin.Annotation {
        public constructor ExperimentalAPI()
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
    @api.ExperimentalAPI public typealias Typealias = kotlin.String
}

package usage1 {
    @api.ExperimentalAPI public fun useAll(): kotlin.Unit

    @api.ExperimentalAPI public final class Use {
        public constructor Use()
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        public final fun useAll(): kotlin.Unit
    }
}

package usage2 {
    public fun useAll(): kotlin.Unit

    @kotlin.UseExperimental(markerClass = {api.ExperimentalAPI::class}) public final class Use {
        public constructor Use()
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        public final fun useAll(): kotlin.Unit
    }
}

package usage3 {
    public fun use(): kotlin.Unit
}
