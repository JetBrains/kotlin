library {
  // module name: <dependency.def>

  library fragment {
    // package name: dependency

    // class name: dependency/Foo
    // class name: dependency/Foo.Companion

    @kotlinx/cinterop/internal/CStruct(spelling = "struct  { int x; }")
    @kotlinx/cinterop/ExperimentalForeignApi
    public final class dependency/Foo : kotlinx/cinterop/CStructVar {

      public constructor(rawPtr: kotlin/native/internal/NativePtr /* = kotlinx/cinterop/NativePtr^ */)

      public final var x: kotlin/Int
        @kotlinx/cinterop/internal/CStruct.MemberAt(offset = 0L)
        public final /* non-default */ external get
        @kotlinx/cinterop/internal/CStruct.MemberAt(offset = 0L)
        public final /* non-default */ external set(value: kotlin/Int)

      // companion object: Companion

      // nested class: Companion
    }

    @kotlinx/cinterop/internal/CStruct.VarType(size = 4L, align = 4)
    @kotlin/Deprecated(message = "Use sizeOf<T>() or alignOf<T>() instead.", replaceWith = kotlin/ReplaceWith(imports = [], expression = ""), level = kotlin/DeprecationLevel.WARNING)
    public final companion object dependency/Foo.Companion : kotlinx/cinterop/CStructVar.Type {

      private constructor()
    }
  }
}
