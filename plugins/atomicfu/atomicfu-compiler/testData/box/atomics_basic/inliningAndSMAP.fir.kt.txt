class TestClass {
  private var atomicRefProp$volatile: Any?
    field = "OK"
    private get(): Any? {
      return <this>.#atomicRefProp$volatile
    }
    private set(value: Any?) {
      return <this>.#atomicRefProp$volatile = value
    }

  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  fun foo(): String {
    return inlineBar$atomicfu$NATIVE_PROPERTY_REF$Any(handler$atomicfu = local inline fun <atomicRefProp$volatile-getter>(): KMutableProperty0<Any?> {
      return <this>::atomicRefProp$volatile
    }
)
  }

}

internal inline fun inlineBar$atomicfu$ATOMIC_ARRAY$Any(handler$atomicfu: AtomicArray<Any?>, index$atomicfu: Int): String {
  return handler$atomicfu.get(index = index$atomicfu) as Any?
}

internal inline fun inlineBar$atomicfu$NATIVE_PROPERTY_REF$Any(crossinline handler$atomicfu: Function0<KMutableProperty0<Any?>>): String {
  return atomicGetField<Any?>(/* <this> = handler$atomicfu.invoke() */) as Any?
}

fun box(): String {
  return TestClass().foo()
}
