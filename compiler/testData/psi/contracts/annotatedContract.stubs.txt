Anno.kt:
  FILE[kind=File[packageFqName=<root>]]
    PACKAGE_DIRECTIVE
    IMPORT_LIST
    CLASS[classId=/Anno, fqName=Anno, isClsStubCompiledToJvmDefaultImplementation=false, isEnumEntry=false, isInterface=false, isLocal=false, isTopLevel=true, name=Anno, superNames=[]]
      MODIFIER_LIST[annotation]
        ANNOTATION_ENTRY[hasValueArguments=true, shortName=Target]
          CONSTRUCTOR_CALLEE
            TYPE_REFERENCE
              USER_TYPE
                REFERENCE_EXPRESSION[referencedName=Target]
          VALUE_ARGUMENT_LIST
            VALUE_ARGUMENT[isSpread=false]
              DOT_QUALIFIED_EXPRESSION
                REFERENCE_EXPRESSION[referencedName=AnnotationTarget]
                REFERENCE_EXPRESSION[referencedName=EXPRESSION]
        ANNOTATION_ENTRY[hasValueArguments=true, shortName=Retention]
          CONSTRUCTOR_CALLEE
            TYPE_REFERENCE
              USER_TYPE
                REFERENCE_EXPRESSION[referencedName=Retention]
          VALUE_ARGUMENT_LIST
            VALUE_ARGUMENT[isSpread=false]
              DOT_QUALIFIED_EXPRESSION
                REFERENCE_EXPRESSION[referencedName=AnnotationRetention]
                REFERENCE_EXPRESSION[referencedName=SOURCE]


check.kt:
  FILE[kind=Facade[packageFqName=<root>, facadeFqName=CheckKt]]
    PACKAGE_DIRECTIVE
    IMPORT_LIST
      IMPORT_DIRECTIVE[importedFqName=kotlin.contracts, isAllUnder=true, isValid=true]
        DOT_QUALIFIED_EXPRESSION
          REFERENCE_EXPRESSION[referencedName=kotlin]
          REFERENCE_EXPRESSION[referencedName=contracts]
    FUN[fqName=myCheck, hasBody=true, hasNoExpressionBody=true, hasTypeParameterListBeforeFunctionName=false, isExtension=true, isTopLevel=true, mayHaveContract=true, name=myCheck]
      MODIFIER_LIST[]
        ANNOTATION_ENTRY[hasValueArguments=true, shortName=OptIn]
          CONSTRUCTOR_CALLEE
            TYPE_REFERENCE
              USER_TYPE
                REFERENCE_EXPRESSION[referencedName=OptIn]
          VALUE_ARGUMENT_LIST
            VALUE_ARGUMENT[isSpread=false]
              CLASS_LITERAL_EXPRESSION
                REFERENCE_EXPRESSION[referencedName=ExperimentalContracts]
      TYPE_REFERENCE
        USER_TYPE
          REFERENCE_EXPRESSION[referencedName=Boolean]
      VALUE_PARAMETER_LIST
        VALUE_PARAMETER[fqName=null, hasDefaultValue=false, hasValOrVar=false, isMutable=false, name=x]
          TYPE_REFERENCE
            USER_TYPE
              REFERENCE_EXPRESSION[referencedName=Boolean]
      TYPE_REFERENCE
        USER_TYPE
          REFERENCE_EXPRESSION[referencedName=Boolean]
