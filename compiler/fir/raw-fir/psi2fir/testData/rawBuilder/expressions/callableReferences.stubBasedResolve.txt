FILE: [ResolvedTo(ANNOTATION_ARGUMENTS)] callableReferences.kt
    public final [ResolvedTo(ANNOTATION_ARGUMENTS)] class A : R|kotlin/Any| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=A] constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(ANNOTATION_ARGUMENTS)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

        public final [ResolvedTo(CONTRACTS)] val bar: <implicit> = LAZY_EXPRESSION
            public [ResolvedTo(CONTRACTS)] [ContainingClassKey=A] get(): <implicit>

    }
    public final [ResolvedTo(ANNOTATION_ARGUMENTS)] fun [ResolvedTo(ANNOTATION_ARGUMENTS)] R|A|.qux(): R|kotlin/Unit| { LAZY_BLOCK }
    public final [ResolvedTo(ANNOTATION_ARGUMENTS)] fun baz(): R|kotlin/Unit| { LAZY_BLOCK }
    public final [ResolvedTo(CONTRACTS)] val test1: <implicit> = LAZY_EXPRESSION
        public [ResolvedTo(CONTRACTS)] get(): <implicit>
    public final [ResolvedTo(CONTRACTS)] val test2: <implicit> = LAZY_EXPRESSION
        public [ResolvedTo(CONTRACTS)] get(): <implicit>
    public final [ResolvedTo(CONTRACTS)] val test3: <implicit> = LAZY_EXPRESSION
        public [ResolvedTo(CONTRACTS)] get(): <implicit>
    public final [ResolvedTo(CONTRACTS)] val test4: <implicit> = LAZY_EXPRESSION
        public [ResolvedTo(CONTRACTS)] get(): <implicit>
    public final [ResolvedTo(CONTRACTS)] val test5: <implicit> = LAZY_EXPRESSION
        public [ResolvedTo(CONTRACTS)] get(): <implicit>
    public final [ResolvedTo(CONTRACTS)] val test6: <implicit> = LAZY_EXPRESSION
        public [ResolvedTo(CONTRACTS)] get(): <implicit>
    public final [ResolvedTo(CONTRACTS)] val test7: <implicit> = LAZY_EXPRESSION
        public [ResolvedTo(CONTRACTS)] get(): <implicit>
    public final [ResolvedTo(CONTRACTS)] val test8: <implicit> = LAZY_EXPRESSION
        public [ResolvedTo(CONTRACTS)] get(): <implicit>