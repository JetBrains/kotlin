package

public fun use(/*0*/ a: A, /*1*/ b: B, /*2*/ c: C): kotlin.Unit

public final class A {
    @kotlin.Deprecated(message = "") public constructor A(/*0*/ i: kotlin.Int)
    public constructor A(/*0*/ s: kotlin.String)
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public open class B : A {
    @kotlin.Deprecated(message = "Deprecated in Java") public constructor B(/*0*/ i: kotlin.Int)
    public constructor B(/*0*/ s: kotlin.String!)
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public final class C {
    @kotlin.Deprecated(message = "") public constructor C(/*0*/ s: kotlin.String)
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}
