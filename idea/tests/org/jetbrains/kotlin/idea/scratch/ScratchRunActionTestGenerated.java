/*
 * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.idea.scratch;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@RunWith(JUnit3RunnerWithInners.class)
public class ScratchRunActionTestGenerated extends AbstractScratchRunActionTest {
    @TestMetadata("idea/testData/scratch")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ScratchCompiling extends AbstractScratchRunActionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doScratchCompilingTest, TargetBackend.ANY, testDataFilePath);
        }

        public void testAllFilesPresentInScratchCompiling() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/scratch"), Pattern.compile("^(.+)\\.kts$"), TargetBackend.ANY, false);
        }

        @TestMetadata("for.kts")
        public void testFor() throws Exception {
            runTest("idea/testData/scratch/for.kts");
        }

        @TestMetadata("generics.kts")
        public void testGenerics() throws Exception {
            runTest("idea/testData/scratch/generics.kts");
        }

        @TestMetadata("klass.kts")
        public void testKlass() throws Exception {
            runTest("idea/testData/scratch/klass.kts");
        }

        @TestMetadata("libraryDepWithKotlinTest.kts")
        public void testLibraryDepWithKotlinTest() throws Exception {
            runTest("idea/testData/scratch/libraryDepWithKotlinTest.kts");
        }

        @TestMetadata("simple.kts")
        public void testSimple() throws Exception {
            runTest("idea/testData/scratch/simple.kts");
        }

        @TestMetadata("simpleFun.kts")
        public void testSimpleFun() throws Exception {
            runTest("idea/testData/scratch/simpleFun.kts");
        }

        @TestMetadata("simpleNoRuntime.kts")
        public void testSimpleNoRuntime() throws Exception {
            runTest("idea/testData/scratch/simpleNoRuntime.kts");
        }

        @TestMetadata("spacesAtLineStart.kts")
        public void testSpacesAtLineStart() throws Exception {
            runTest("idea/testData/scratch/spacesAtLineStart.kts");
        }

        @TestMetadata("stdlibFun.kts")
        public void testStdlibFun() throws Exception {
            runTest("idea/testData/scratch/stdlibFun.kts");
        }

        @TestMetadata("unresolved.kts")
        public void testUnresolved() throws Exception {
            runTest("idea/testData/scratch/unresolved.kts");
        }

        @TestMetadata("unresolvedMultiline.kts")
        public void testUnresolvedMultiline() throws Exception {
            runTest("idea/testData/scratch/unresolvedMultiline.kts");
        }

        @TestMetadata("userOutput.kts")
        public void testUserOutput() throws Exception {
            runTest("idea/testData/scratch/userOutput.kts");
        }

        @TestMetadata("var.kts")
        public void testVar() throws Exception {
            runTest("idea/testData/scratch/var.kts");
        }

        @TestMetadata("veryLongOutput.kts")
        public void testVeryLongOutput() throws Exception {
            runTest("idea/testData/scratch/veryLongOutput.kts");
        }

        @TestMetadata("when.kts")
        public void testWhen() throws Exception {
            runTest("idea/testData/scratch/when.kts");
        }
    }

    @TestMetadata("idea/testData/scratch")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ScratchRepl extends AbstractScratchRunActionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doScratchReplTest, TargetBackend.ANY, testDataFilePath);
        }

        public void testAllFilesPresentInScratchRepl() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/scratch"), Pattern.compile("^(.+)\\.kts$"), TargetBackend.ANY, false);
        }

        @TestMetadata("for.kts")
        public void testFor() throws Exception {
            runTest("idea/testData/scratch/for.kts");
        }

        @TestMetadata("generics.kts")
        public void testGenerics() throws Exception {
            runTest("idea/testData/scratch/generics.kts");
        }

        @TestMetadata("klass.kts")
        public void testKlass() throws Exception {
            runTest("idea/testData/scratch/klass.kts");
        }

        @TestMetadata("libraryDepWithKotlinTest.kts")
        public void testLibraryDepWithKotlinTest() throws Exception {
            runTest("idea/testData/scratch/libraryDepWithKotlinTest.kts");
        }

        @TestMetadata("simple.kts")
        public void testSimple() throws Exception {
            runTest("idea/testData/scratch/simple.kts");
        }

        @TestMetadata("simpleFun.kts")
        public void testSimpleFun() throws Exception {
            runTest("idea/testData/scratch/simpleFun.kts");
        }

        @TestMetadata("simpleNoRuntime.kts")
        public void testSimpleNoRuntime() throws Exception {
            runTest("idea/testData/scratch/simpleNoRuntime.kts");
        }

        @TestMetadata("spacesAtLineStart.kts")
        public void testSpacesAtLineStart() throws Exception {
            runTest("idea/testData/scratch/spacesAtLineStart.kts");
        }

        @TestMetadata("stdlibFun.kts")
        public void testStdlibFun() throws Exception {
            runTest("idea/testData/scratch/stdlibFun.kts");
        }

        @TestMetadata("unresolved.kts")
        public void testUnresolved() throws Exception {
            runTest("idea/testData/scratch/unresolved.kts");
        }

        @TestMetadata("unresolvedMultiline.kts")
        public void testUnresolvedMultiline() throws Exception {
            runTest("idea/testData/scratch/unresolvedMultiline.kts");
        }

        @TestMetadata("userOutput.kts")
        public void testUserOutput() throws Exception {
            runTest("idea/testData/scratch/userOutput.kts");
        }

        @TestMetadata("var.kts")
        public void testVar() throws Exception {
            runTest("idea/testData/scratch/var.kts");
        }

        @TestMetadata("veryLongOutput.kts")
        public void testVeryLongOutput() throws Exception {
            runTest("idea/testData/scratch/veryLongOutput.kts");
        }

        @TestMetadata("when.kts")
        public void testWhen() throws Exception {
            runTest("idea/testData/scratch/when.kts");
        }
    }

    @TestMetadata("idea/testData/scratch/multiFile")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ScratchMultiFile extends AbstractScratchRunActionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doScratchMultiFileTest, TargetBackend.ANY, testDataFilePath);
        }

        public void testAllFilesPresentInScratchMultiFile() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/scratch/multiFile"), Pattern.compile("^([^\\.]+)$"), TargetBackend.ANY, false);
        }

        @TestMetadata("inlineFun")
        public void testInlineFun() throws Exception {
            runTest("idea/testData/scratch/multiFile/inlineFun/");
        }

        @TestMetadata("javaDep")
        public void testJavaDep() throws Exception {
            runTest("idea/testData/scratch/multiFile/javaDep/");
        }
    }

    @TestMetadata("idea/testData/worksheet")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class WorksheetCompiling extends AbstractScratchRunActionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doWorksheetCompilingTest, TargetBackend.ANY, testDataFilePath);
        }

        public void testAllFilesPresentInWorksheetCompiling() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/worksheet"), Pattern.compile("^(.+)\\.ws.kts$"), TargetBackend.ANY, false);
        }

        @TestMetadata("simpleScriptRuntime.ws.kts")
        public void testSimpleScriptRuntime() throws Exception {
            runTest("idea/testData/worksheet/simpleScriptRuntime.ws.kts");
        }
    }

    @TestMetadata("idea/testData/worksheet")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class WorksheetRepl extends AbstractScratchRunActionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doWorksheetReplTest, TargetBackend.ANY, testDataFilePath);
        }

        public void testAllFilesPresentInWorksheetRepl() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/worksheet"), Pattern.compile("^(.+)\\.ws.kts$"), TargetBackend.ANY, false);
        }

        @TestMetadata("simpleScriptRuntime.ws.kts")
        public void testSimpleScriptRuntime() throws Exception {
            runTest("idea/testData/worksheet/simpleScriptRuntime.ws.kts");
        }
    }

    @TestMetadata("idea/testData/worksheet/multiFile")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class WorksheetMultiFile extends AbstractScratchRunActionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doWorksheetMultiFileTest, TargetBackend.ANY, testDataFilePath);
        }

        public void testAllFilesPresentInWorksheetMultiFile() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/worksheet/multiFile"), Pattern.compile("^([^\\.]+)$"), TargetBackend.ANY, false);
        }

        @TestMetadata("inlineFunScriptRuntime")
        public void testInlineFunScriptRuntime() throws Exception {
            runTest("idea/testData/worksheet/multiFile/inlineFunScriptRuntime/");
        }

        @TestMetadata("javaDepScriptRuntime")
        public void testJavaDepScriptRuntime() throws Exception {
            runTest("idea/testData/worksheet/multiFile/javaDepScriptRuntime/");
        }
    }

    @TestMetadata("idea/testData/scratch/rightPanelOutput")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ScratchRightPanelOutput extends AbstractScratchRunActionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doRightPreviewPanelOutputTest, TargetBackend.ANY, testDataFilePath);
        }

        public void testAllFilesPresentInScratchRightPanelOutput() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/scratch/rightPanelOutput"), Pattern.compile("^(.+)\\.kts$"), TargetBackend.ANY, false);
        }

        @TestMetadata("bigSequentialOutputs.kts")
        public void testBigSequentialOutputs() throws Exception {
            runTest("idea/testData/scratch/rightPanelOutput/bigSequentialOutputs.kts");
        }

        @TestMetadata("shortExpression.longOutput.singleTop.kts")
        public void testShortExpression_longOutput_singleTop() throws Exception {
            runTest("idea/testData/scratch/rightPanelOutput/shortExpression.longOutput.singleTop.kts");
        }

        @TestMetadata("shortExpression.shortOutput.singleTop.kts")
        public void testShortExpression_shortOutput_singleTop() throws Exception {
            runTest("idea/testData/scratch/rightPanelOutput/shortExpression.shortOutput.singleTop.kts");
        }
    }
}
