/*
 * Copyright 2010-2013 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.jet.codegen.flags;

import junit.framework.Assert;
import junit.framework.Test;
import junit.framework.TestSuite;

import java.io.File;
import java.util.regex.Pattern;
import org.jetbrains.jet.JetTestUtils;
import org.jetbrains.jet.test.InnerTestClasses;
import org.jetbrains.jet.test.TestMetadata;

import org.jetbrains.jet.codegen.flags.AbstractWriteFlagsTest;

/** This class is generated by {@link org.jetbrains.jet.generators.tests.GenerateTests}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("compiler/testData/writeFlags")
@InnerTestClasses({WriteFlagsTestGenerated.Class.class, WriteFlagsTestGenerated.Function.class, WriteFlagsTestGenerated.InnerClass.class, WriteFlagsTestGenerated.Property.class})
public class WriteFlagsTestGenerated extends AbstractWriteFlagsTest {
    public void testAllFilesPresentInWriteFlags() throws Exception {
        JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/writeFlags"), Pattern.compile("^(.+)\\.kt$"), true);
    }
    
    @TestMetadata("compiler/testData/writeFlags/class")
    @InnerTestClasses({Class.AccessFlags.class, Class.DeprecatedFlag.class, Class.Visibility.class})
    public static class Class extends AbstractWriteFlagsTest {
        public void testAllFilesPresentInClass() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/writeFlags/class"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("compiler/testData/writeFlags/class/accessFlags")
        public static class AccessFlags extends AbstractWriteFlagsTest {
            public void testAllFilesPresentInAccessFlags() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/writeFlags/class/accessFlags"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("publicFinalClass.kt")
            public void testPublicFinalClass() throws Exception {
                doTest("compiler/testData/writeFlags/class/accessFlags/publicFinalClass.kt");
            }
            
            @TestMetadata("publicFinalInnerClass.kt")
            public void testPublicFinalInnerClass() throws Exception {
                doTest("compiler/testData/writeFlags/class/accessFlags/publicFinalInnerClass.kt");
            }
            
            @TestMetadata("publicInnerInterface.kt")
            public void testPublicInnerInterface() throws Exception {
                doTest("compiler/testData/writeFlags/class/accessFlags/publicInnerInterface.kt");
            }
            
            @TestMetadata("publicInterface.kt")
            public void testPublicInterface() throws Exception {
                doTest("compiler/testData/writeFlags/class/accessFlags/publicInterface.kt");
            }
            
        }
        
        @TestMetadata("compiler/testData/writeFlags/class/deprecatedFlag")
        public static class DeprecatedFlag extends AbstractWriteFlagsTest {
            public void testAllFilesPresentInDeprecatedFlag() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/writeFlags/class/deprecatedFlag"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("class.kt")
            public void testClass() throws Exception {
                doTest("compiler/testData/writeFlags/class/deprecatedFlag/class.kt");
            }
            
            @TestMetadata("classObject.kt")
            public void testClassObject() throws Exception {
                doTest("compiler/testData/writeFlags/class/deprecatedFlag/classObject.kt");
            }
            
            @TestMetadata("enumClass.kt")
            public void testEnumClass() throws Exception {
                doTest("compiler/testData/writeFlags/class/deprecatedFlag/enumClass.kt");
            }
            
            @TestMetadata("innerClass.kt")
            public void testInnerClass() throws Exception {
                doTest("compiler/testData/writeFlags/class/deprecatedFlag/innerClass.kt");
            }
            
            @TestMetadata("trait.kt")
            public void testTrait() throws Exception {
                doTest("compiler/testData/writeFlags/class/deprecatedFlag/trait.kt");
            }
            
        }
        
        @TestMetadata("compiler/testData/writeFlags/class/visibility")
        @InnerTestClasses({Visibility.Internal.class, Visibility.Private.class, Visibility.Public.class})
        public static class Visibility extends AbstractWriteFlagsTest {
            public void testAllFilesPresentInVisibility() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/writeFlags/class/visibility"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("compiler/testData/writeFlags/class/visibility/internal")
            public static class Internal extends AbstractWriteFlagsTest {
                public void testAllFilesPresentInInternal() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/writeFlags/class/visibility/internal"), Pattern.compile("^(.+)\\.kt$"), true);
                }
                
                @TestMetadata("class.kt")
                public void testClass() throws Exception {
                    doTest("compiler/testData/writeFlags/class/visibility/internal/class.kt");
                }
                
                @TestMetadata("enum.kt")
                public void testEnum() throws Exception {
                    doTest("compiler/testData/writeFlags/class/visibility/internal/enum.kt");
                }
                
                @TestMetadata("innerClass.kt")
                public void testInnerClass() throws Exception {
                    doTest("compiler/testData/writeFlags/class/visibility/internal/innerClass.kt");
                }
                
                @TestMetadata("innerEnum.kt")
                public void testInnerEnum() throws Exception {
                    doTest("compiler/testData/writeFlags/class/visibility/internal/innerEnum.kt");
                }
                
                @TestMetadata("innerObject.kt")
                public void testInnerObject() throws Exception {
                    doTest("compiler/testData/writeFlags/class/visibility/internal/innerObject.kt");
                }
                
                @TestMetadata("innerTrait.kt")
                public void testInnerTrait() throws Exception {
                    doTest("compiler/testData/writeFlags/class/visibility/internal/innerTrait.kt");
                }
                
                @TestMetadata("object.kt")
                public void testObject() throws Exception {
                    doTest("compiler/testData/writeFlags/class/visibility/internal/object.kt");
                }
                
                @TestMetadata("trait.kt")
                public void testTrait() throws Exception {
                    doTest("compiler/testData/writeFlags/class/visibility/internal/trait.kt");
                }
                
            }
            
            @TestMetadata("compiler/testData/writeFlags/class/visibility/private")
            public static class Private extends AbstractWriteFlagsTest {
                public void testAllFilesPresentInPrivate() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/writeFlags/class/visibility/private"), Pattern.compile("^(.+)\\.kt$"), true);
                }
                
                @TestMetadata("class.kt")
                public void testClass() throws Exception {
                    doTest("compiler/testData/writeFlags/class/visibility/private/class.kt");
                }
                
                @TestMetadata("enum.kt")
                public void testEnum() throws Exception {
                    doTest("compiler/testData/writeFlags/class/visibility/private/enum.kt");
                }
                
                @TestMetadata("innerClass.kt")
                public void testInnerClass() throws Exception {
                    doTest("compiler/testData/writeFlags/class/visibility/private/innerClass.kt");
                }
                
                @TestMetadata("innerEnum.kt")
                public void testInnerEnum() throws Exception {
                    doTest("compiler/testData/writeFlags/class/visibility/private/innerEnum.kt");
                }
                
                @TestMetadata("innerObject.kt")
                public void testInnerObject() throws Exception {
                    doTest("compiler/testData/writeFlags/class/visibility/private/innerObject.kt");
                }
                
                @TestMetadata("innerTrait.kt")
                public void testInnerTrait() throws Exception {
                    doTest("compiler/testData/writeFlags/class/visibility/private/innerTrait.kt");
                }
                
                @TestMetadata("object.kt")
                public void testObject() throws Exception {
                    doTest("compiler/testData/writeFlags/class/visibility/private/object.kt");
                }
                
                @TestMetadata("trait.kt")
                public void testTrait() throws Exception {
                    doTest("compiler/testData/writeFlags/class/visibility/private/trait.kt");
                }
                
            }
            
            @TestMetadata("compiler/testData/writeFlags/class/visibility/public")
            public static class Public extends AbstractWriteFlagsTest {
                public void testAllFilesPresentInPublic() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/writeFlags/class/visibility/public"), Pattern.compile("^(.+)\\.kt$"), true);
                }
                
                @TestMetadata("class.kt")
                public void testClass() throws Exception {
                    doTest("compiler/testData/writeFlags/class/visibility/public/class.kt");
                }
                
                @TestMetadata("enum.kt")
                public void testEnum() throws Exception {
                    doTest("compiler/testData/writeFlags/class/visibility/public/enum.kt");
                }
                
                @TestMetadata("innerClass.kt")
                public void testInnerClass() throws Exception {
                    doTest("compiler/testData/writeFlags/class/visibility/public/innerClass.kt");
                }
                
                @TestMetadata("innerEnum.kt")
                public void testInnerEnum() throws Exception {
                    doTest("compiler/testData/writeFlags/class/visibility/public/innerEnum.kt");
                }
                
                @TestMetadata("innerObject.kt")
                public void testInnerObject() throws Exception {
                    doTest("compiler/testData/writeFlags/class/visibility/public/innerObject.kt");
                }
                
                @TestMetadata("innerTrait.kt")
                public void testInnerTrait() throws Exception {
                    doTest("compiler/testData/writeFlags/class/visibility/public/innerTrait.kt");
                }
                
                @TestMetadata("object.kt")
                public void testObject() throws Exception {
                    doTest("compiler/testData/writeFlags/class/visibility/public/object.kt");
                }
                
                @TestMetadata("trait.kt")
                public void testTrait() throws Exception {
                    doTest("compiler/testData/writeFlags/class/visibility/public/trait.kt");
                }
                
            }
            
            public static Test innerSuite() {
                TestSuite suite = new TestSuite("Visibility");
                suite.addTestSuite(Visibility.class);
                suite.addTestSuite(Internal.class);
                suite.addTestSuite(Private.class);
                suite.addTestSuite(Public.class);
                return suite;
            }
        }
        
        public static Test innerSuite() {
            TestSuite suite = new TestSuite("Class");
            suite.addTestSuite(Class.class);
            suite.addTestSuite(AccessFlags.class);
            suite.addTestSuite(DeprecatedFlag.class);
            suite.addTest(Visibility.innerSuite());
            return suite;
        }
    }
    
    @TestMetadata("compiler/testData/writeFlags/function")
    @InnerTestClasses({Function.ClassObjectPrivate.class, Function.Constructors.class, Function.DeprecatedFlag.class})
    public static class Function extends AbstractWriteFlagsTest {
        public void testAllFilesPresentInFunction() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/writeFlags/function"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("compiler/testData/writeFlags/function/classObjectPrivate")
        public static class ClassObjectPrivate extends AbstractWriteFlagsTest {
            public void testAllFilesPresentInClassObjectPrivate() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/writeFlags/function/classObjectPrivate"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("privateFun.kt")
            public void testPrivateFun() throws Exception {
                doTest("compiler/testData/writeFlags/function/classObjectPrivate/privateFun.kt");
            }
            
            @TestMetadata("privateVal.kt")
            public void testPrivateVal() throws Exception {
                doTest("compiler/testData/writeFlags/function/classObjectPrivate/privateVal.kt");
            }
            
            @TestMetadata("privateVar.kt")
            public void testPrivateVar() throws Exception {
                doTest("compiler/testData/writeFlags/function/classObjectPrivate/privateVar.kt");
            }
            
        }
        
        @TestMetadata("compiler/testData/writeFlags/function/constructors")
        public static class Constructors extends AbstractWriteFlagsTest {
            public void testAllFilesPresentInConstructors() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/writeFlags/function/constructors"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("classObject.kt")
            public void testClassObject() throws Exception {
                doTest("compiler/testData/writeFlags/function/constructors/classObject.kt");
            }
            
            @TestMetadata("objectInClass.kt")
            public void testObjectInClass() throws Exception {
                doTest("compiler/testData/writeFlags/function/constructors/objectInClass.kt");
            }
            
            @TestMetadata("objectLiteral.kt")
            public void testObjectLiteral() throws Exception {
                doTest("compiler/testData/writeFlags/function/constructors/objectLiteral.kt");
            }
            
            @TestMetadata("topLevelObject.kt")
            public void testTopLevelObject() throws Exception {
                doTest("compiler/testData/writeFlags/function/constructors/topLevelObject.kt");
            }
            
        }
        
        @TestMetadata("compiler/testData/writeFlags/function/deprecatedFlag")
        public static class DeprecatedFlag extends AbstractWriteFlagsTest {
            public void testAllFilesPresentInDeprecatedFlag() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/writeFlags/function/deprecatedFlag"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("emptyGetter.kt")
            public void testEmptyGetter() throws Exception {
                doTest("compiler/testData/writeFlags/function/deprecatedFlag/emptyGetter.kt");
            }
            
            @TestMetadata("emptySetter.kt")
            public void testEmptySetter() throws Exception {
                doTest("compiler/testData/writeFlags/function/deprecatedFlag/emptySetter.kt");
            }
            
            @TestMetadata("extentionFun.kt")
            public void testExtentionFun() throws Exception {
                doTest("compiler/testData/writeFlags/function/deprecatedFlag/extentionFun.kt");
            }
            
            @TestMetadata("funInClass.kt")
            public void testFunInClass() throws Exception {
                doTest("compiler/testData/writeFlags/function/deprecatedFlag/funInClass.kt");
            }
            
            @TestMetadata("funInClassObject.kt")
            public void testFunInClassObject() throws Exception {
                doTest("compiler/testData/writeFlags/function/deprecatedFlag/funInClassObject.kt");
            }
            
            @TestMetadata("getter.kt")
            public void testGetter() throws Exception {
                doTest("compiler/testData/writeFlags/function/deprecatedFlag/getter.kt");
            }
            
            @TestMetadata("getterAnnotationOnProperty.kt")
            public void testGetterAnnotationOnProperty() throws Exception {
                doTest("compiler/testData/writeFlags/function/deprecatedFlag/getterAnnotationOnProperty.kt");
            }
            
            @TestMetadata("getterForPropertyInConstructor.kt")
            public void testGetterForPropertyInConstructor() throws Exception {
                doTest("compiler/testData/writeFlags/function/deprecatedFlag/getterForPropertyInConstructor.kt");
            }
            
            @TestMetadata("setter.kt")
            public void testSetter() throws Exception {
                doTest("compiler/testData/writeFlags/function/deprecatedFlag/setter.kt");
            }
            
            @TestMetadata("setterAnnotationOnProperty.kt")
            public void testSetterAnnotationOnProperty() throws Exception {
                doTest("compiler/testData/writeFlags/function/deprecatedFlag/setterAnnotationOnProperty.kt");
            }
            
            @TestMetadata("setterForPropertyInConstructor.kt")
            public void testSetterForPropertyInConstructor() throws Exception {
                doTest("compiler/testData/writeFlags/function/deprecatedFlag/setterForPropertyInConstructor.kt");
            }
            
            @TestMetadata("topLevelFun.kt")
            public void testTopLevelFun() throws Exception {
                doTest("compiler/testData/writeFlags/function/deprecatedFlag/topLevelFun.kt");
            }
            
        }
        
        public static Test innerSuite() {
            TestSuite suite = new TestSuite("Function");
            suite.addTestSuite(Function.class);
            suite.addTestSuite(ClassObjectPrivate.class);
            suite.addTestSuite(Constructors.class);
            suite.addTestSuite(DeprecatedFlag.class);
            return suite;
        }
    }
    
    @TestMetadata("compiler/testData/writeFlags/innerClass")
    @InnerTestClasses({InnerClass.Visibility.class})
    public static class InnerClass extends AbstractWriteFlagsTest {
        public void testAllFilesPresentInInnerClass() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/writeFlags/innerClass"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("compiler/testData/writeFlags/innerClass/visibility")
        public static class Visibility extends AbstractWriteFlagsTest {
            public void testAllFilesPresentInVisibility() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/writeFlags/innerClass/visibility"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("internal.kt")
            public void testInternal() throws Exception {
                doTest("compiler/testData/writeFlags/innerClass/visibility/internal.kt");
            }
            
            @TestMetadata("internalClassObject.kt")
            public void testInternalClassObject() throws Exception {
                doTest("compiler/testData/writeFlags/innerClass/visibility/internalClassObject.kt");
            }
            
            @TestMetadata("private.kt")
            public void testPrivate() throws Exception {
                doTest("compiler/testData/writeFlags/innerClass/visibility/private.kt");
            }
            
            @TestMetadata("privateClassObject.kt")
            public void testPrivateClassObject() throws Exception {
                doTest("compiler/testData/writeFlags/innerClass/visibility/privateClassObject.kt");
            }
            
            @TestMetadata("public.kt")
            public void testPublic() throws Exception {
                doTest("compiler/testData/writeFlags/innerClass/visibility/public.kt");
            }
            
            @TestMetadata("publicClassObject.kt")
            public void testPublicClassObject() throws Exception {
                doTest("compiler/testData/writeFlags/innerClass/visibility/publicClassObject.kt");
            }
            
        }
        
        public static Test innerSuite() {
            TestSuite suite = new TestSuite("InnerClass");
            suite.addTestSuite(InnerClass.class);
            suite.addTestSuite(Visibility.class);
            return suite;
        }
    }
    
    @TestMetadata("compiler/testData/writeFlags/property")
    @InnerTestClasses({Property.ClassObject.class, Property.DeprecatedFlag.class, Property.Visibility.class})
    public static class Property extends AbstractWriteFlagsTest {
        public void testAllFilesPresentInProperty() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/writeFlags/property"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("compiler/testData/writeFlags/property/classObject")
        @InnerTestClasses({ClassObject.Class.class, ClassObject.Rename.class, ClassObject.Trait.class})
        public static class ClassObject extends AbstractWriteFlagsTest {
            public void testAllFilesPresentInClassObject() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/writeFlags/property/classObject"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("compiler/testData/writeFlags/property/classObject/class")
            public static class Class extends AbstractWriteFlagsTest {
                public void testAllFilesPresentInClass() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/writeFlags/property/classObject/class"), Pattern.compile("^(.+)\\.kt$"), true);
                }
                
                @TestMetadata("delegatedProtectedVar.kt")
                public void testDelegatedProtectedVar() throws Exception {
                    doTest("compiler/testData/writeFlags/property/classObject/class/delegatedProtectedVar.kt");
                }
                
                @TestMetadata("delegatedPublicVal.kt")
                public void testDelegatedPublicVal() throws Exception {
                    doTest("compiler/testData/writeFlags/property/classObject/class/delegatedPublicVal.kt");
                }
                
                @TestMetadata("extensionPublicVal.kt")
                public void testExtensionPublicVal() throws Exception {
                    doTest("compiler/testData/writeFlags/property/classObject/class/extensionPublicVal.kt");
                }
                
                @TestMetadata("extensionPublicVar.kt")
                public void testExtensionPublicVar() throws Exception {
                    doTest("compiler/testData/writeFlags/property/classObject/class/extensionPublicVar.kt");
                }
                
                @TestMetadata("internalVal.kt")
                public void testInternalVal() throws Exception {
                    doTest("compiler/testData/writeFlags/property/classObject/class/internalVal.kt");
                }
                
                @TestMetadata("internalVar.kt")
                public void testInternalVar() throws Exception {
                    doTest("compiler/testData/writeFlags/property/classObject/class/internalVar.kt");
                }
                
                @TestMetadata("internalVarPrivateSet.kt")
                public void testInternalVarPrivateSet() throws Exception {
                    doTest("compiler/testData/writeFlags/property/classObject/class/internalVarPrivateSet.kt");
                }
                
                @TestMetadata("noBackingField.kt")
                public void testNoBackingField() throws Exception {
                    doTest("compiler/testData/writeFlags/property/classObject/class/noBackingField.kt");
                }
                
                @TestMetadata("privateVal.kt")
                public void testPrivateVal() throws Exception {
                    doTest("compiler/testData/writeFlags/property/classObject/class/privateVal.kt");
                }
                
                @TestMetadata("privateVar.kt")
                public void testPrivateVar() throws Exception {
                    doTest("compiler/testData/writeFlags/property/classObject/class/privateVar.kt");
                }
                
                @TestMetadata("protectedVal.kt")
                public void testProtectedVal() throws Exception {
                    doTest("compiler/testData/writeFlags/property/classObject/class/protectedVal.kt");
                }
                
                @TestMetadata("protectedVarPrivateSet.kt")
                public void testProtectedVarPrivateSet() throws Exception {
                    doTest("compiler/testData/writeFlags/property/classObject/class/protectedVarPrivateSet.kt");
                }
                
                @TestMetadata("publicVal.kt")
                public void testPublicVal() throws Exception {
                    doTest("compiler/testData/writeFlags/property/classObject/class/publicVal.kt");
                }
                
                @TestMetadata("publicValNonDefault.kt")
                public void testPublicValNonDefault() throws Exception {
                    doTest("compiler/testData/writeFlags/property/classObject/class/publicValNonDefault.kt");
                }
                
                @TestMetadata("publicVar.kt")
                public void testPublicVar() throws Exception {
                    doTest("compiler/testData/writeFlags/property/classObject/class/publicVar.kt");
                }
                
                @TestMetadata("publicVarNonDefault.kt")
                public void testPublicVarNonDefault() throws Exception {
                    doTest("compiler/testData/writeFlags/property/classObject/class/publicVarNonDefault.kt");
                }
                
                @TestMetadata("publicVarPrivateSet.kt")
                public void testPublicVarPrivateSet() throws Exception {
                    doTest("compiler/testData/writeFlags/property/classObject/class/publicVarPrivateSet.kt");
                }
                
                @TestMetadata("publicVarProtectedSet.kt")
                public void testPublicVarProtectedSet() throws Exception {
                    doTest("compiler/testData/writeFlags/property/classObject/class/publicVarProtectedSet.kt");
                }
                
                @TestMetadata("publicVarPublicSet.kt")
                public void testPublicVarPublicSet() throws Exception {
                    doTest("compiler/testData/writeFlags/property/classObject/class/publicVarPublicSet.kt");
                }
                
            }
            
            @TestMetadata("compiler/testData/writeFlags/property/classObject/rename")
            public static class Rename extends AbstractWriteFlagsTest {
                public void testAllFilesPresentInRename() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/writeFlags/property/classObject/rename"), Pattern.compile("^(.+)\\.kt$"), true);
                }
                
                @TestMetadata("constructorAndClassObject.kt")
                public void testConstructorAndClassObject() throws Exception {
                    doTest("compiler/testData/writeFlags/property/classObject/rename/constructorAndClassObject.kt");
                }
                
                @TestMetadata("delegatedAndDelegated.kt")
                public void testDelegatedAndDelegated() throws Exception {
                    doTest("compiler/testData/writeFlags/property/classObject/rename/delegatedAndDelegated.kt");
                }
                
                @TestMetadata("delegatedAndProperty.kt")
                public void testDelegatedAndProperty() throws Exception {
                    doTest("compiler/testData/writeFlags/property/classObject/rename/delegatedAndProperty.kt");
                }
                
                @TestMetadata("extensionAndExtension.kt")
                public void testExtensionAndExtension() throws Exception {
                    doTest("compiler/testData/writeFlags/property/classObject/rename/extensionAndExtension.kt");
                }
                
                @TestMetadata("extensionAndProperty.kt")
                public void testExtensionAndProperty() throws Exception {
                    doTest("compiler/testData/writeFlags/property/classObject/rename/extensionAndProperty.kt");
                }
                
                @TestMetadata("propertyAndProperty.kt")
                public void testPropertyAndProperty() throws Exception {
                    doTest("compiler/testData/writeFlags/property/classObject/rename/propertyAndProperty.kt");
                }
                
            }
            
            @TestMetadata("compiler/testData/writeFlags/property/classObject/trait")
            public static class Trait extends AbstractWriteFlagsTest {
                public void testAllFilesPresentInTrait() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/writeFlags/property/classObject/trait"), Pattern.compile("^(.+)\\.kt$"), true);
                }
                
                @TestMetadata("delegatedProtectedVar.kt")
                public void testDelegatedProtectedVar() throws Exception {
                    doTest("compiler/testData/writeFlags/property/classObject/trait/delegatedProtectedVar.kt");
                }
                
                @TestMetadata("delegatedPublicVal.kt")
                public void testDelegatedPublicVal() throws Exception {
                    doTest("compiler/testData/writeFlags/property/classObject/trait/delegatedPublicVal.kt");
                }
                
                @TestMetadata("extensionPublicVal.kt")
                public void testExtensionPublicVal() throws Exception {
                    doTest("compiler/testData/writeFlags/property/classObject/trait/extensionPublicVal.kt");
                }
                
                @TestMetadata("extensionPublicVar.kt")
                public void testExtensionPublicVar() throws Exception {
                    doTest("compiler/testData/writeFlags/property/classObject/trait/extensionPublicVar.kt");
                }
                
                @TestMetadata("internalVal.kt")
                public void testInternalVal() throws Exception {
                    doTest("compiler/testData/writeFlags/property/classObject/trait/internalVal.kt");
                }
                
                @TestMetadata("internalVar.kt")
                public void testInternalVar() throws Exception {
                    doTest("compiler/testData/writeFlags/property/classObject/trait/internalVar.kt");
                }
                
                @TestMetadata("internalVarPrivateSet.kt")
                public void testInternalVarPrivateSet() throws Exception {
                    doTest("compiler/testData/writeFlags/property/classObject/trait/internalVarPrivateSet.kt");
                }
                
                @TestMetadata("noBackingField.kt")
                public void testNoBackingField() throws Exception {
                    doTest("compiler/testData/writeFlags/property/classObject/trait/noBackingField.kt");
                }
                
                @TestMetadata("privateVal.kt")
                public void testPrivateVal() throws Exception {
                    doTest("compiler/testData/writeFlags/property/classObject/trait/privateVal.kt");
                }
                
                @TestMetadata("privateVar.kt")
                public void testPrivateVar() throws Exception {
                    doTest("compiler/testData/writeFlags/property/classObject/trait/privateVar.kt");
                }
                
                @TestMetadata("protectedVal.kt")
                public void testProtectedVal() throws Exception {
                    doTest("compiler/testData/writeFlags/property/classObject/trait/protectedVal.kt");
                }
                
                @TestMetadata("protectedVarPrivateSet.kt")
                public void testProtectedVarPrivateSet() throws Exception {
                    doTest("compiler/testData/writeFlags/property/classObject/trait/protectedVarPrivateSet.kt");
                }
                
                @TestMetadata("publicVal.kt")
                public void testPublicVal() throws Exception {
                    doTest("compiler/testData/writeFlags/property/classObject/trait/publicVal.kt");
                }
                
                @TestMetadata("publicValNonDefault.kt")
                public void testPublicValNonDefault() throws Exception {
                    doTest("compiler/testData/writeFlags/property/classObject/trait/publicValNonDefault.kt");
                }
                
                @TestMetadata("publicVar.kt")
                public void testPublicVar() throws Exception {
                    doTest("compiler/testData/writeFlags/property/classObject/trait/publicVar.kt");
                }
                
                @TestMetadata("publicVarNonDefault.kt")
                public void testPublicVarNonDefault() throws Exception {
                    doTest("compiler/testData/writeFlags/property/classObject/trait/publicVarNonDefault.kt");
                }
                
                @TestMetadata("publicVarPrivateSet.kt")
                public void testPublicVarPrivateSet() throws Exception {
                    doTest("compiler/testData/writeFlags/property/classObject/trait/publicVarPrivateSet.kt");
                }
                
                @TestMetadata("publicVarProtectedSet.kt")
                public void testPublicVarProtectedSet() throws Exception {
                    doTest("compiler/testData/writeFlags/property/classObject/trait/publicVarProtectedSet.kt");
                }
                
                @TestMetadata("publicVarPublicSet.kt")
                public void testPublicVarPublicSet() throws Exception {
                    doTest("compiler/testData/writeFlags/property/classObject/trait/publicVarPublicSet.kt");
                }
                
            }
            
            public static Test innerSuite() {
                TestSuite suite = new TestSuite("ClassObject");
                suite.addTestSuite(ClassObject.class);
                suite.addTestSuite(Class.class);
                suite.addTestSuite(Rename.class);
                suite.addTestSuite(Trait.class);
                return suite;
            }
        }
        
        @TestMetadata("compiler/testData/writeFlags/property/deprecatedFlag")
        public static class DeprecatedFlag extends AbstractWriteFlagsTest {
            public void testAllFilesPresentInDeprecatedFlag() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/writeFlags/property/deprecatedFlag"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("propertyInClass.kt")
            public void testPropertyInClass() throws Exception {
                doTest("compiler/testData/writeFlags/property/deprecatedFlag/propertyInClass.kt");
            }
            
            @TestMetadata("topLevelProperty.kt")
            public void testTopLevelProperty() throws Exception {
                doTest("compiler/testData/writeFlags/property/deprecatedFlag/topLevelProperty.kt");
            }
            
        }
        
        @TestMetadata("compiler/testData/writeFlags/property/visibility")
        public static class Visibility extends AbstractWriteFlagsTest {
            public void testAllFilesPresentInVisibility() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/writeFlags/property/visibility"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("internal.kt")
            public void testInternal() throws Exception {
                doTest("compiler/testData/writeFlags/property/visibility/internal.kt");
            }
            
            @TestMetadata("private.kt")
            public void testPrivate() throws Exception {
                doTest("compiler/testData/writeFlags/property/visibility/private.kt");
            }
            
            @TestMetadata("public.kt")
            public void testPublic() throws Exception {
                doTest("compiler/testData/writeFlags/property/visibility/public.kt");
            }
            
        }
        
        public static Test innerSuite() {
            TestSuite suite = new TestSuite("Property");
            suite.addTestSuite(Property.class);
            suite.addTest(ClassObject.innerSuite());
            suite.addTestSuite(DeprecatedFlag.class);
            suite.addTestSuite(Visibility.class);
            return suite;
        }
    }
    
    public static Test suite() {
        TestSuite suite = new TestSuite("WriteFlagsTestGenerated");
        suite.addTestSuite(WriteFlagsTestGenerated.class);
        suite.addTest(Class.innerSuite());
        suite.addTest(Function.innerSuite());
        suite.addTest(InnerClass.innerSuite());
        suite.addTest(Property.innerSuite());
        return suite;
    }
}
