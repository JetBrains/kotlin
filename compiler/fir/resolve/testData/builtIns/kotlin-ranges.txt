public open class CharProgression : R|kotlin/collections/Iterable<kotlin/Char>| {
    public open operator fun equals(other: R|kotlin/Any|?): R|kotlin/Boolean|

    public open fun hashCode(): R|kotlin/Int|

    public open fun isEmpty(): R|kotlin/Boolean|

    public open operator fun iterator(): R|kotlin/collections/CharIterator|

    public open fun toString(): R|kotlin/String|

    internal constructor(start: R|kotlin/Char|, endInclusive: R|kotlin/Char|, step: R|kotlin/Int|): R|kotlin/ranges/CharProgression|

    public final companion object Companion : R|kotlin/Any| {
        public final fun fromClosedRange(rangeStart: R|kotlin/Char|, rangeEnd: R|kotlin/Char|, step: R|kotlin/Int|): R|kotlin/ranges/CharProgression|

        private constructor(): R|kotlin/ranges/CharProgression.Companion|

    }

}

internal final class CharProgressionIterator : R|kotlin/collections/CharIterator| {
    public open operator fun hasNext(): R|kotlin/Boolean|

    public open fun nextChar(): R|kotlin/Char|

    public constructor(first: R|kotlin/Char|, last: R|kotlin/Char|, step: R|kotlin/Int|): R|kotlin/ranges/CharProgressionIterator|

}

public final class CharRange : R|kotlin/ranges/CharProgression|, R|kotlin/ranges/ClosedRange<kotlin/Char>| {
    public open operator fun contains(value: R|kotlin/Char|): R|kotlin/Boolean|

    public open operator fun equals(other: R|kotlin/Any|?): R|kotlin/Boolean|

    public open fun hashCode(): R|kotlin/Int|

    public open fun isEmpty(): R|kotlin/Boolean|

    public open fun toString(): R|kotlin/String|

    public constructor(start: R|kotlin/Char|, endInclusive: R|kotlin/Char|): R|kotlin/ranges/CharRange|

    public final companion object Companion : R|kotlin/Any| {
        private constructor(): R|kotlin/ranges/CharRange.Companion|

    }

}

public abstract interface ClosedRange<T> : R|kotlin/Any| {
    public open operator fun contains(value: R|T|): R|kotlin/Boolean|

    public open fun isEmpty(): R|kotlin/Boolean|

}

public open class IntProgression : R|kotlin/collections/Iterable<kotlin/Int>| {
    public open operator fun equals(other: R|kotlin/Any|?): R|kotlin/Boolean|

    public open fun hashCode(): R|kotlin/Int|

    public open fun isEmpty(): R|kotlin/Boolean|

    public open operator fun iterator(): R|kotlin/collections/IntIterator|

    public open fun toString(): R|kotlin/String|

    internal constructor(start: R|kotlin/Int|, endInclusive: R|kotlin/Int|, step: R|kotlin/Int|): R|kotlin/ranges/IntProgression|

    public final companion object Companion : R|kotlin/Any| {
        public final fun fromClosedRange(rangeStart: R|kotlin/Int|, rangeEnd: R|kotlin/Int|, step: R|kotlin/Int|): R|kotlin/ranges/IntProgression|

        private constructor(): R|kotlin/ranges/IntProgression.Companion|

    }

}

internal final class IntProgressionIterator : R|kotlin/collections/IntIterator| {
    public open operator fun hasNext(): R|kotlin/Boolean|

    public open fun nextInt(): R|kotlin/Int|

    public constructor(first: R|kotlin/Int|, last: R|kotlin/Int|, step: R|kotlin/Int|): R|kotlin/ranges/IntProgressionIterator|

}

public final class IntRange : R|kotlin/ranges/IntProgression|, R|kotlin/ranges/ClosedRange<kotlin/Int>| {
    public open operator fun contains(value: R|kotlin/Int|): R|kotlin/Boolean|

    public open operator fun equals(other: R|kotlin/Any|?): R|kotlin/Boolean|

    public open fun hashCode(): R|kotlin/Int|

    public open fun isEmpty(): R|kotlin/Boolean|

    public open fun toString(): R|kotlin/String|

    public constructor(start: R|kotlin/Int|, endInclusive: R|kotlin/Int|): R|kotlin/ranges/IntRange|

    public final companion object Companion : R|kotlin/Any| {
        private constructor(): R|kotlin/ranges/IntRange.Companion|

    }

}

public open class LongProgression : R|kotlin/collections/Iterable<kotlin/Long>| {
    public open operator fun equals(other: R|kotlin/Any|?): R|kotlin/Boolean|

    public open fun hashCode(): R|kotlin/Int|

    public open fun isEmpty(): R|kotlin/Boolean|

    public open operator fun iterator(): R|kotlin/collections/LongIterator|

    public open fun toString(): R|kotlin/String|

    internal constructor(start: R|kotlin/Long|, endInclusive: R|kotlin/Long|, step: R|kotlin/Long|): R|kotlin/ranges/LongProgression|

    public final companion object Companion : R|kotlin/Any| {
        public final fun fromClosedRange(rangeStart: R|kotlin/Long|, rangeEnd: R|kotlin/Long|, step: R|kotlin/Long|): R|kotlin/ranges/LongProgression|

        private constructor(): R|kotlin/ranges/LongProgression.Companion|

    }

}

internal final class LongProgressionIterator : R|kotlin/collections/LongIterator| {
    public open operator fun hasNext(): R|kotlin/Boolean|

    public open fun nextLong(): R|kotlin/Long|

    public constructor(first: R|kotlin/Long|, last: R|kotlin/Long|, step: R|kotlin/Long|): R|kotlin/ranges/LongProgressionIterator|

}

public final class LongRange : R|kotlin/ranges/LongProgression|, R|kotlin/ranges/ClosedRange<kotlin/Long>| {
    public open operator fun contains(value: R|kotlin/Long|): R|kotlin/Boolean|

    public open operator fun equals(other: R|kotlin/Any|?): R|kotlin/Boolean|

    public open fun hashCode(): R|kotlin/Int|

    public open fun isEmpty(): R|kotlin/Boolean|

    public open fun toString(): R|kotlin/String|

    public constructor(start: R|kotlin/Long|, endInclusive: R|kotlin/Long|): R|kotlin/ranges/LongRange|

    public final companion object Companion : R|kotlin/Any| {
        private constructor(): R|kotlin/ranges/LongRange.Companion|

    }

}
