package

public val x: B
public fun test(): kotlin.Unit
public operator fun A.div(/*0*/ s: kotlin.String): A
public infix fun </*0*/ A, /*1*/ B> A.to(/*0*/ that: B): Pair<A, B>
public operator fun kotlin.String.unaryPlus(): A

public final class A {
    public constructor A()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final operator fun get(/*0*/ vararg attrs: Pair<kotlin.String, kotlin.String> /*kotlin.Array<out Pair<kotlin.String, kotlin.String>>*/): A
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public final class B {
    public constructor B()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final operator fun get(/*0*/ s: Pair<kotlin.String, kotlin.String>): B
    public final operator fun get(/*0*/ s: kotlin.String, /*1*/ q: kotlin.String): B
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final operator fun invoke(/*0*/ q: B.() -> kotlin.Unit): B
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public final data class Pair</*0*/ out A, /*1*/ out B> {
    public constructor Pair</*0*/ out A, /*1*/ out B>(/*0*/ first: A, /*1*/ second: B)
    public final val first: A
    public final val second: B
    public final operator /*synthesized*/ fun component1(): A
    public final operator /*synthesized*/ fun component2(): B
    public final /*synthesized*/ fun copy(/*0*/ first: A = ..., /*1*/ second: B = ...): Pair<A, B>
    public open override /*1*/ /*synthesized*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*synthesized*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*synthesized*/ fun toString(): kotlin.String
}
