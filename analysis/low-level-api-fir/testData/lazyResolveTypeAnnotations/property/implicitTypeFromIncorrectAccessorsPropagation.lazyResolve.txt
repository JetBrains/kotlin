RAW_FIR:
FILE: [ResolvedTo(RAW_FIR)] implicitTypeFromIncorrectAccessorsPropagation.kt
    @Target[Unresolved](LAZY_EXPRESSION) public final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=low/Anno.position] position: String): R|low/Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val position: String = R|<local>/position|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

    }
    public? final? const [ResolvedTo(RAW_FIR)] val prop: <implicit> = LAZY_EXPRESSION
        public? [ResolvedTo(RAW_FIR)] get(): <implicit>
    public? final? [ResolvedTo(RAW_FIR)] val resolveMe: <implicit> = LAZY_EXPRESSION
        public? [ResolvedTo(RAW_FIR)] get(): <implicit>
    public? final? [ResolvedTo(RAW_FIR)] var incorrectProperty: <implicit>
        public? [ResolvedTo(RAW_FIR)] get(): <implicit>
        public? [ResolvedTo(RAW_FIR)] set([ResolvedTo(RAW_FIR)] value: <implicit>): R|kotlin/Unit|
    [ResolvedTo(RAW_FIR)] <DANGLING MODIFIER: Top level declaration expected>[ResolvedTo(RAW_FIR)] @Anno[Unresolved](LAZY_EXPRESSION) <DANGLING MODIFIER: Top level declaration expected>[ResolvedTo(RAW_FIR)] @Anno[Unresolved](LAZY_EXPRESSION) <DANGLING MODIFIER: Top level declaration expected>[ResolvedTo(RAW_FIR)] @Anno[Unresolved](LAZY_EXPRESSION) <DANGLING MODIFIER: Top level declaration expected>
IMPORTS:
FILE: [ResolvedTo(IMPORTS)] implicitTypeFromIncorrectAccessorsPropagation.kt
    @Target[Unresolved](LAZY_EXPRESSION) public final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=low/Anno.position] position: String): R|low/Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val position: String = R|<local>/position|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

    }
    public? final? const [ResolvedTo(RAW_FIR)] val prop: <implicit> = LAZY_EXPRESSION
        public? [ResolvedTo(RAW_FIR)] get(): <implicit>
    public? final? [ResolvedTo(RAW_FIR)] val resolveMe: <implicit> = LAZY_EXPRESSION
        public? [ResolvedTo(RAW_FIR)] get(): <implicit>
    public? final? [ResolvedTo(RAW_FIR)] var incorrectProperty: <implicit>
        public? [ResolvedTo(RAW_FIR)] get(): <implicit>
        public? [ResolvedTo(RAW_FIR)] set([ResolvedTo(RAW_FIR)] value: <implicit>): R|kotlin/Unit|
    [ResolvedTo(RAW_FIR)] <DANGLING MODIFIER: Top level declaration expected>[ResolvedTo(RAW_FIR)] @Anno[Unresolved](LAZY_EXPRESSION) <DANGLING MODIFIER: Top level declaration expected>[ResolvedTo(RAW_FIR)] @Anno[Unresolved](LAZY_EXPRESSION) <DANGLING MODIFIER: Top level declaration expected>[ResolvedTo(RAW_FIR)] @Anno[Unresolved](LAZY_EXPRESSION) <DANGLING MODIFIER: Top level declaration expected>
COMPILER_REQUIRED_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] implicitTypeFromIncorrectAccessorsPropagation.kt
    @Target[Unresolved](LAZY_EXPRESSION) public final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=low/Anno.position] position: String): R|low/Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val position: String = R|<local>/position|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

    }
    public? final? const [ResolvedTo(RAW_FIR)] val prop: <implicit> = LAZY_EXPRESSION
        public? [ResolvedTo(RAW_FIR)] get(): <implicit>
    public? final? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] val resolveMe: <implicit> = LAZY_EXPRESSION
        public? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] get(): <implicit>
    public? final? [ResolvedTo(RAW_FIR)] var incorrectProperty: <implicit>
        public? [ResolvedTo(RAW_FIR)] get(): <implicit>
        public? [ResolvedTo(RAW_FIR)] set([ResolvedTo(RAW_FIR)] value: <implicit>): R|kotlin/Unit|
    [ResolvedTo(RAW_FIR)] <DANGLING MODIFIER: Top level declaration expected>[ResolvedTo(RAW_FIR)] @Anno[Unresolved](LAZY_EXPRESSION) <DANGLING MODIFIER: Top level declaration expected>[ResolvedTo(RAW_FIR)] @Anno[Unresolved](LAZY_EXPRESSION) <DANGLING MODIFIER: Top level declaration expected>[ResolvedTo(RAW_FIR)] @Anno[Unresolved](LAZY_EXPRESSION) <DANGLING MODIFIER: Top level declaration expected>
COMPANION_GENERATION:
FILE: [ResolvedTo(IMPORTS)] implicitTypeFromIncorrectAccessorsPropagation.kt
    @Target[Unresolved](LAZY_EXPRESSION) public final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=low/Anno.position] position: String): R|low/Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val position: String = R|<local>/position|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

    }
    public? final? const [ResolvedTo(RAW_FIR)] val prop: <implicit> = LAZY_EXPRESSION
        public? [ResolvedTo(RAW_FIR)] get(): <implicit>
    public? final? [ResolvedTo(COMPANION_GENERATION)] val resolveMe: <implicit> = LAZY_EXPRESSION
        public? [ResolvedTo(COMPANION_GENERATION)] get(): <implicit>
    public? final? [ResolvedTo(RAW_FIR)] var incorrectProperty: <implicit>
        public? [ResolvedTo(RAW_FIR)] get(): <implicit>
        public? [ResolvedTo(RAW_FIR)] set([ResolvedTo(RAW_FIR)] value: <implicit>): R|kotlin/Unit|
    [ResolvedTo(RAW_FIR)] <DANGLING MODIFIER: Top level declaration expected>[ResolvedTo(RAW_FIR)] @Anno[Unresolved](LAZY_EXPRESSION) <DANGLING MODIFIER: Top level declaration expected>[ResolvedTo(RAW_FIR)] @Anno[Unresolved](LAZY_EXPRESSION) <DANGLING MODIFIER: Top level declaration expected>[ResolvedTo(RAW_FIR)] @Anno[Unresolved](LAZY_EXPRESSION) <DANGLING MODIFIER: Top level declaration expected>
SUPER_TYPES:
FILE: [ResolvedTo(IMPORTS)] implicitTypeFromIncorrectAccessorsPropagation.kt
    @Target[Unresolved](LAZY_EXPRESSION) public final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=low/Anno.position] position: String): R|low/Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val position: String = R|<local>/position|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

    }
    public? final? const [ResolvedTo(RAW_FIR)] val prop: <implicit> = LAZY_EXPRESSION
        public? [ResolvedTo(RAW_FIR)] get(): <implicit>
    public? final? [ResolvedTo(SUPER_TYPES)] val resolveMe: <implicit> = LAZY_EXPRESSION
        public? [ResolvedTo(SUPER_TYPES)] get(): <implicit>
    public? final? [ResolvedTo(RAW_FIR)] var incorrectProperty: <implicit>
        public? [ResolvedTo(RAW_FIR)] get(): <implicit>
        public? [ResolvedTo(RAW_FIR)] set([ResolvedTo(RAW_FIR)] value: <implicit>): R|kotlin/Unit|
    [ResolvedTo(RAW_FIR)] <DANGLING MODIFIER: Top level declaration expected>[ResolvedTo(RAW_FIR)] @Anno[Unresolved](LAZY_EXPRESSION) <DANGLING MODIFIER: Top level declaration expected>[ResolvedTo(RAW_FIR)] @Anno[Unresolved](LAZY_EXPRESSION) <DANGLING MODIFIER: Top level declaration expected>[ResolvedTo(RAW_FIR)] @Anno[Unresolved](LAZY_EXPRESSION) <DANGLING MODIFIER: Top level declaration expected>
TYPES:
FILE: [ResolvedTo(IMPORTS)] implicitTypeFromIncorrectAccessorsPropagation.kt
    @Target[Unresolved](LAZY_EXPRESSION) public final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=low/Anno.position] position: String): R|low/Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val position: String = R|<local>/position|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

    }
    public? final? const [ResolvedTo(RAW_FIR)] val prop: <implicit> = LAZY_EXPRESSION
        public? [ResolvedTo(RAW_FIR)] get(): <implicit>
    public? final? [ResolvedTo(TYPES)] val resolveMe: <implicit> = LAZY_EXPRESSION
        public? [ResolvedTo(TYPES)] get(): <implicit>
    public? final? [ResolvedTo(RAW_FIR)] var incorrectProperty: <implicit>
        public? [ResolvedTo(RAW_FIR)] get(): <implicit>
        public? [ResolvedTo(RAW_FIR)] set([ResolvedTo(RAW_FIR)] value: <implicit>): R|kotlin/Unit|
    [ResolvedTo(RAW_FIR)] <DANGLING MODIFIER: Top level declaration expected>[ResolvedTo(RAW_FIR)] @Anno[Unresolved](LAZY_EXPRESSION) <DANGLING MODIFIER: Top level declaration expected>[ResolvedTo(RAW_FIR)] @Anno[Unresolved](LAZY_EXPRESSION) <DANGLING MODIFIER: Top level declaration expected>[ResolvedTo(RAW_FIR)] @Anno[Unresolved](LAZY_EXPRESSION) <DANGLING MODIFIER: Top level declaration expected>
STATUS:
FILE: [ResolvedTo(IMPORTS)] implicitTypeFromIncorrectAccessorsPropagation.kt
    @Target[Unresolved](LAZY_EXPRESSION) public final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=low/Anno.position] position: String): R|low/Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val position: String = R|<local>/position|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

    }
    public? final? const [ResolvedTo(RAW_FIR)] val prop: <implicit> = LAZY_EXPRESSION
        public? [ResolvedTo(RAW_FIR)] get(): <implicit>
    public final [ResolvedTo(STATUS)] val resolveMe: <implicit> = LAZY_EXPRESSION
        public [ResolvedTo(STATUS)] get(): <implicit>
    public? final? [ResolvedTo(RAW_FIR)] var incorrectProperty: <implicit>
        public? [ResolvedTo(RAW_FIR)] get(): <implicit>
        public? [ResolvedTo(RAW_FIR)] set([ResolvedTo(RAW_FIR)] value: <implicit>): R|kotlin/Unit|
    [ResolvedTo(RAW_FIR)] <DANGLING MODIFIER: Top level declaration expected>[ResolvedTo(RAW_FIR)] @Anno[Unresolved](LAZY_EXPRESSION) <DANGLING MODIFIER: Top level declaration expected>[ResolvedTo(RAW_FIR)] @Anno[Unresolved](LAZY_EXPRESSION) <DANGLING MODIFIER: Top level declaration expected>[ResolvedTo(RAW_FIR)] @Anno[Unresolved](LAZY_EXPRESSION) <DANGLING MODIFIER: Top level declaration expected>
EXPECT_ACTUAL_MATCHING:
FILE: [ResolvedTo(IMPORTS)] implicitTypeFromIncorrectAccessorsPropagation.kt
    @Target[Unresolved](LAZY_EXPRESSION) public final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=low/Anno.position] position: String): R|low/Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val position: String = R|<local>/position|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

    }
    public? final? const [ResolvedTo(RAW_FIR)] val prop: <implicit> = LAZY_EXPRESSION
        public? [ResolvedTo(RAW_FIR)] get(): <implicit>
    public final [ResolvedTo(EXPECT_ACTUAL_MATCHING)] val resolveMe: <implicit> = LAZY_EXPRESSION
        public [ResolvedTo(EXPECT_ACTUAL_MATCHING)] get(): <implicit>
    public? final? [ResolvedTo(RAW_FIR)] var incorrectProperty: <implicit>
        public? [ResolvedTo(RAW_FIR)] get(): <implicit>
        public? [ResolvedTo(RAW_FIR)] set([ResolvedTo(RAW_FIR)] value: <implicit>): R|kotlin/Unit|
    [ResolvedTo(RAW_FIR)] <DANGLING MODIFIER: Top level declaration expected>[ResolvedTo(RAW_FIR)] @Anno[Unresolved](LAZY_EXPRESSION) <DANGLING MODIFIER: Top level declaration expected>[ResolvedTo(RAW_FIR)] @Anno[Unresolved](LAZY_EXPRESSION) <DANGLING MODIFIER: Top level declaration expected>[ResolvedTo(RAW_FIR)] @Anno[Unresolved](LAZY_EXPRESSION) <DANGLING MODIFIER: Top level declaration expected>
CONTRACTS:
FILE: [ResolvedTo(IMPORTS)] implicitTypeFromIncorrectAccessorsPropagation.kt
    @Target[Unresolved](LAZY_EXPRESSION) public final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=low/Anno.position] position: String): R|low/Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val position: String = R|<local>/position|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

    }
    public? final? const [ResolvedTo(RAW_FIR)] val prop: <implicit> = LAZY_EXPRESSION
        public? [ResolvedTo(RAW_FIR)] get(): <implicit>
    public final [ResolvedTo(CONTRACTS)] val resolveMe: <implicit> = incorrectProperty#
        public [ResolvedTo(CONTRACTS)] get(): <implicit>
    public? final? [ResolvedTo(RAW_FIR)] var incorrectProperty: <implicit>
        public? [ResolvedTo(RAW_FIR)] get(): <implicit>
        public? [ResolvedTo(RAW_FIR)] set([ResolvedTo(RAW_FIR)] value: <implicit>): R|kotlin/Unit|
    [ResolvedTo(RAW_FIR)] <DANGLING MODIFIER: Top level declaration expected>[ResolvedTo(RAW_FIR)] @Anno[Unresolved](LAZY_EXPRESSION) <DANGLING MODIFIER: Top level declaration expected>[ResolvedTo(RAW_FIR)] @Anno[Unresolved](LAZY_EXPRESSION) <DANGLING MODIFIER: Top level declaration expected>[ResolvedTo(RAW_FIR)] @Anno[Unresolved](LAZY_EXPRESSION) <DANGLING MODIFIER: Top level declaration expected>
IMPLICIT_TYPES_BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] implicitTypeFromIncorrectAccessorsPropagation.kt
    @Target[Unresolved](LAZY_EXPRESSION) public final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=low/Anno.position] position: String): R|low/Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val position: String = R|<local>/position|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

    }
    public? final? const [ResolvedTo(RAW_FIR)] val prop: <implicit> = LAZY_EXPRESSION
        public? [ResolvedTo(RAW_FIR)] get(): <implicit>
    public final [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] val resolveMe: <ERROR TYPE REF: Cannot infer variable type without initializer / getter / delegate> = R|low/incorrectProperty|
        public [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] get(): <ERROR TYPE REF: Cannot infer variable type without initializer / getter / delegate>
    public final [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] var incorrectProperty: <ERROR TYPE REF: Cannot infer variable type without initializer / getter / delegate>
        public [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] get(): <ERROR TYPE REF: Cannot infer variable type without initializer / getter / delegate>
        public [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] set([ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] value: <ERROR TYPE REF: Cannot infer variable type without initializer / getter / delegate>): R|kotlin/Unit|
    [ResolvedTo(RAW_FIR)] <DANGLING MODIFIER: Top level declaration expected>[ResolvedTo(RAW_FIR)] @Anno[Unresolved](LAZY_EXPRESSION) <DANGLING MODIFIER: Top level declaration expected>[ResolvedTo(RAW_FIR)] @Anno[Unresolved](LAZY_EXPRESSION) <DANGLING MODIFIER: Top level declaration expected>[ResolvedTo(RAW_FIR)] @Anno[Unresolved](LAZY_EXPRESSION) <DANGLING MODIFIER: Top level declaration expected>
CONSTANT_EVALUATION:
FILE: [ResolvedTo(IMPORTS)] implicitTypeFromIncorrectAccessorsPropagation.kt
    @Target[Unresolved](LAZY_EXPRESSION) public final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=low/Anno.position] position: String): R|low/Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val position: String = R|<local>/position|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

    }
    public? final? const [ResolvedTo(RAW_FIR)] val prop: <implicit> = LAZY_EXPRESSION
        public? [ResolvedTo(RAW_FIR)] get(): <implicit>
    public final [ResolvedTo(CONSTANT_EVALUATION)] val resolveMe: <ERROR TYPE REF: Cannot infer variable type without initializer / getter / delegate> = R|low/incorrectProperty|
        public [ResolvedTo(CONSTANT_EVALUATION)] get(): <ERROR TYPE REF: Cannot infer variable type without initializer / getter / delegate>
    public final [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] var incorrectProperty: <ERROR TYPE REF: Cannot infer variable type without initializer / getter / delegate>
        public [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] get(): <ERROR TYPE REF: Cannot infer variable type without initializer / getter / delegate>
        public [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] set([ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] value: <ERROR TYPE REF: Cannot infer variable type without initializer / getter / delegate>): R|kotlin/Unit|
    [ResolvedTo(RAW_FIR)] <DANGLING MODIFIER: Top level declaration expected>[ResolvedTo(RAW_FIR)] @Anno[Unresolved](LAZY_EXPRESSION) <DANGLING MODIFIER: Top level declaration expected>[ResolvedTo(RAW_FIR)] @Anno[Unresolved](LAZY_EXPRESSION) <DANGLING MODIFIER: Top level declaration expected>[ResolvedTo(RAW_FIR)] @Anno[Unresolved](LAZY_EXPRESSION) <DANGLING MODIFIER: Top level declaration expected>
ANNOTATION_ARGUMENTS:
FILE: [ResolvedTo(IMPORTS)] implicitTypeFromIncorrectAccessorsPropagation.kt
    @Target[Unresolved](LAZY_EXPRESSION) public final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=low/Anno.position] position: String): R|low/Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val position: String = R|<local>/position|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

    }
    public? final? const [ResolvedTo(RAW_FIR)] val prop: <implicit> = LAZY_EXPRESSION
        public? [ResolvedTo(RAW_FIR)] get(): <implicit>
    public final [ResolvedTo(ANNOTATION_ARGUMENTS)] val resolveMe: <ERROR TYPE REF: Cannot infer variable type without initializer / getter / delegate> = R|low/incorrectProperty|
        public [ResolvedTo(ANNOTATION_ARGUMENTS)] get(): <ERROR TYPE REF: Cannot infer variable type without initializer / getter / delegate>
    public final [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] var incorrectProperty: <ERROR TYPE REF: Cannot infer variable type without initializer / getter / delegate>
        public [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] get(): <ERROR TYPE REF: Cannot infer variable type without initializer / getter / delegate>
        public [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] set([ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] value: <ERROR TYPE REF: Cannot infer variable type without initializer / getter / delegate>): R|kotlin/Unit|
    [ResolvedTo(RAW_FIR)] <DANGLING MODIFIER: Top level declaration expected>[ResolvedTo(RAW_FIR)] @Anno[Unresolved](LAZY_EXPRESSION) <DANGLING MODIFIER: Top level declaration expected>[ResolvedTo(RAW_FIR)] @Anno[Unresolved](LAZY_EXPRESSION) <DANGLING MODIFIER: Top level declaration expected>[ResolvedTo(RAW_FIR)] @Anno[Unresolved](LAZY_EXPRESSION) <DANGLING MODIFIER: Top level declaration expected>
BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] implicitTypeFromIncorrectAccessorsPropagation.kt
    @Target[Unresolved](LAZY_EXPRESSION) public final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=low/Anno.position] position: String): R|low/Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val position: String = R|<local>/position|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

    }
    public? final? const [ResolvedTo(RAW_FIR)] val prop: <implicit> = LAZY_EXPRESSION
        public? [ResolvedTo(RAW_FIR)] get(): <implicit>
    public final [ResolvedTo(BODY_RESOLVE)] val resolveMe: <ERROR TYPE REF: Cannot infer variable type without initializer / getter / delegate> = R|low/incorrectProperty|
        public [ResolvedTo(BODY_RESOLVE)] get(): <ERROR TYPE REF: Cannot infer variable type without initializer / getter / delegate>
    public final [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] var incorrectProperty: <ERROR TYPE REF: Cannot infer variable type without initializer / getter / delegate>
        public [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] get(): <ERROR TYPE REF: Cannot infer variable type without initializer / getter / delegate>
        public [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] set([ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] value: <ERROR TYPE REF: Cannot infer variable type without initializer / getter / delegate>): R|kotlin/Unit|
    [ResolvedTo(RAW_FIR)] <DANGLING MODIFIER: Top level declaration expected>[ResolvedTo(RAW_FIR)] @Anno[Unresolved](LAZY_EXPRESSION) <DANGLING MODIFIER: Top level declaration expected>[ResolvedTo(RAW_FIR)] @Anno[Unresolved](LAZY_EXPRESSION) <DANGLING MODIFIER: Top level declaration expected>[ResolvedTo(RAW_FIR)] @Anno[Unresolved](LAZY_EXPRESSION) <DANGLING MODIFIER: Top level declaration expected>
FILE RAW TO BODY:
FILE: [ResolvedTo(BODY_RESOLVE)] implicitTypeFromIncorrectAccessorsPropagation.kt
    @R|kotlin/annotation/Target|[Types](allowedTargets = vararg(Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.TYPE|)) public final [ResolvedTo(BODY_RESOLVE)] annotation class Anno : R|kotlin/Annotation| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Anno] constructor([ResolvedTo(BODY_RESOLVE)] [CorrespondingProperty=low/Anno.position] position: R|kotlin/String|): R|low/Anno| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(BODY_RESOLVE)] [IsFromPrimaryConstructor=true] val position: R|kotlin/String| = R|<local>/position|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Anno] get(): R|kotlin/String|

    }
    public final const [ResolvedTo(BODY_RESOLVE)] [EvaluatedValue=String(str)] val prop: R|kotlin/String| = String(str)
        public [ResolvedTo(BODY_RESOLVE)] get(): R|kotlin/String|
    public final [ResolvedTo(BODY_RESOLVE)] val resolveMe: <ERROR TYPE REF: Cannot infer variable type without initializer / getter / delegate> = R|low/incorrectProperty|
        public [ResolvedTo(BODY_RESOLVE)] get(): <ERROR TYPE REF: Cannot infer variable type without initializer / getter / delegate>
    public final [ResolvedTo(BODY_RESOLVE)] var incorrectProperty: <ERROR TYPE REF: Cannot infer variable type without initializer / getter / delegate>
        public [ResolvedTo(BODY_RESOLVE)] get(): <ERROR TYPE REF: Cannot infer variable type without initializer / getter / delegate>
        public [ResolvedTo(BODY_RESOLVE)] set([ResolvedTo(BODY_RESOLVE)] value: <ERROR TYPE REF: Cannot infer variable type without initializer / getter / delegate>): R|kotlin/Unit|
    [ResolvedTo(BODY_RESOLVE)] <DANGLING MODIFIER: Top level declaration expected>[ResolvedTo(BODY_RESOLVE)] @R|low/Anno|[Types](position = <strcat>(String(setter parameter type ), R|low/prop|)) <DANGLING MODIFIER: Top level declaration expected>[ResolvedTo(BODY_RESOLVE)] @R|low/Anno|[Types](position = <strcat>(String(setter nested parameter type ), R|low/prop|)) <DANGLING MODIFIER: Top level declaration expected>[ResolvedTo(BODY_RESOLVE)] @R|low/Anno|[Types](position = <strcat>(String(setter nested nested parameter type ), R|low/prop|)) <DANGLING MODIFIER: Top level declaration expected>
