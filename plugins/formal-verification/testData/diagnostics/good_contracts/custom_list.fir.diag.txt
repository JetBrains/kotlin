/custom_list.kt:(168,171): info: Generated Viper text for get:
field class_CustomList_private$backing_field_value: Ref

field special$size: Ref

method class_CustomList$fun_get$fun_take$T_class_global$class_CustomList$T_Int$return$T_Int(this: Ref,
  local$index: Ref)
  returns (ret$0: Ref)
  requires acc(this.special$size, write)
  requires dom$RuntimeType$intFromRef(this.special$size) >= 0
  requires dom$RuntimeType$intFromRef(local$index) >= 0
  requires dom$RuntimeType$intFromRef(this.special$size) >
    dom$RuntimeType$intFromRef(local$index)
  ensures acc(this.special$size, write)
  ensures dom$RuntimeType$intFromRef(this.special$size) >= 0
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$intType())
  ensures dom$RuntimeType$intFromRef(this.special$size) ==
    old(dom$RuntimeType$intFromRef(this.special$size))
{
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(this), dom$RuntimeType$T_class_global$class_CustomList())
  inhale acc(T_class_global$class_CustomList(this), wildcard)
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(local$index), dom$RuntimeType$intType())
  unfold acc(T_class_global$class_CustomList(this), wildcard)
  ret$0 := this.class_CustomList_private$backing_field_value
  goto label$ret$0
  label label$ret$0
}

/custom_list.kt:(248,252): info: Generated Viper text for test:
field class_CustomList_private$backing_field_value: Ref

field special$size: Ref

method class_CustomList$constructor$fun_take$T_Int$T_Int$return$T_class_global$class_CustomList(local$size: Ref,
  local$value: Ref)
  returns (ret: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret), dom$RuntimeType$T_class_global$class_CustomList())
  ensures acc(ret.special$size, write)
  ensures dom$RuntimeType$intFromRef(ret.special$size) >= 0
  ensures acc(T_class_global$class_CustomList(ret), wildcard)


method class_CustomList$fun_get$fun_take$T_class_global$class_CustomList$T_Int$return$T_Int(this: Ref,
  local$index: Ref)
  returns (ret: Ref)
  requires acc(this.special$size, write)
  requires dom$RuntimeType$intFromRef(this.special$size) >= 0
  requires dom$RuntimeType$intFromRef(local$index) >= 0
  requires dom$RuntimeType$intFromRef(this.special$size) >
    dom$RuntimeType$intFromRef(local$index)
  ensures acc(this.special$size, write)
  ensures dom$RuntimeType$intFromRef(this.special$size) >= 0
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret), dom$RuntimeType$intType())
  ensures dom$RuntimeType$intFromRef(this.special$size) ==
    old(dom$RuntimeType$intFromRef(this.special$size))


method class_CustomList$fun_isEmpty$fun_take$T_class_global$class_CustomList$return$T_Boolean(this: Ref)
  returns (ret: Ref)
  requires acc(this.special$size, write)
  requires dom$RuntimeType$intFromRef(this.special$size) >= 0
  ensures acc(this.special$size, write)
  ensures dom$RuntimeType$intFromRef(this.special$size) >= 0
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret), dom$RuntimeType$boolType())
  ensures dom$RuntimeType$intFromRef(this.special$size) ==
    old(dom$RuntimeType$intFromRef(this.special$size))
  ensures dom$RuntimeType$boolFromRef(ret) ==>
    dom$RuntimeType$intFromRef(this.special$size) == 0
  ensures !dom$RuntimeType$boolFromRef(ret) ==>
    dom$RuntimeType$intFromRef(this.special$size) > 0


method global$fun_test$fun_take$T_Int$return$T_Unit(local$n: Ref)
  returns (ret$0: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$unitType())
{
  var local0$customList: Ref
  var anonymous$0: Ref
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(local$n), dom$RuntimeType$intType())
  ret$0 := dom$RuntimeType$unitValue()
  local0$customList := class_CustomList$constructor$fun_take$T_Int$T_Int$return$T_class_global$class_CustomList(local$n,
    dom$RuntimeType$intToRef(0))
  anonymous$0 := class_CustomList$fun_isEmpty$fun_take$T_class_global$class_CustomList$return$T_Boolean(local0$customList)
  if (!dom$RuntimeType$boolFromRef(anonymous$0)) {
    var anonymous$1: Ref
    var anonymous$2: Ref
    var anonymous$3: Ref
    anonymous$2 := local0$customList.special$size
    inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(anonymous$2), dom$RuntimeType$intType())
    anonymous$1 := class_CustomList$fun_get$fun_take$T_class_global$class_CustomList$T_Int$return$T_Int(local0$customList,
      special$minusInts(anonymous$2, dom$RuntimeType$intToRef(1)))
    anonymous$3 := class_CustomList$fun_get$fun_take$T_class_global$class_CustomList$T_Int$return$T_Int(local0$customList,
      dom$RuntimeType$intToRef(0))
  }
  label label$ret$0
}
