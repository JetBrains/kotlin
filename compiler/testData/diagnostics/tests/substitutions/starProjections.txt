package

public fun testA(/*0*/ a: A<*, *>): kotlin.Unit
public fun testB(/*0*/ b: B<*, *>): kotlin.Unit
public fun testC(/*0*/ c: C<*>): kotlin.Unit

public interface A</*0*/ R, /*1*/ T : A<R, T>> {
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public abstract fun r(): R
    public abstract fun t(): T
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public interface B</*0*/ R, /*1*/ T : B<kotlin.List<R>, T>> {
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public abstract fun r(): R
    public abstract fun t(): T
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public interface C</*0*/ T : C<T?>?> {
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public abstract fun t(): T
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}
