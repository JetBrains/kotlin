FILE fqName:<root> fileName:/packageLevelProperties.kt
  PROPERTY name:test1 type:kotlin.Int visibility:public modality:FINAL flags:val
    FIELD PROPERTY_BACKING_FIELD name:test1 type:kotlin.Int visibility:public flags:final
      EXPRESSION_BODY
        CONST Int type=kotlin.Int value=0
    FUN DEFAULT_PROPERTY_ACCESSOR name:<get-test1> visibility:public modality:FINAL <> () returnType:Int flags:
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='<get-test1>(): Int'
          GET_FIELD 'test1: Int' type=kotlin.Int origin=null
  PROPERTY name:test2 type:kotlin.Int visibility:public modality:FINAL flags:val
    FUN name:<get-test2> visibility:public modality:FINAL <> () returnType:Int flags:
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='<get-test2>(): Int'
          CONST Int type=kotlin.Int value=0
  PROPERTY name:test3 type:kotlin.Int visibility:public modality:FINAL flags:var
    FIELD PROPERTY_BACKING_FIELD name:test3 type:kotlin.Int visibility:public flags:
      EXPRESSION_BODY
        CONST Int type=kotlin.Int value=0
    FUN DEFAULT_PROPERTY_ACCESSOR name:<get-test3> visibility:public modality:FINAL <> () returnType:Int flags:
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='<get-test3>(): Int'
          GET_FIELD 'test3: Int' type=kotlin.Int origin=null
    FUN DEFAULT_PROPERTY_ACCESSOR name:<set-test3> visibility:public modality:FINAL <> (<set-?>:kotlin.Int) returnType:Unit flags:
      VALUE_PARAMETER name:<set-?> index:0 type:kotlin.Int flags:
      BLOCK_BODY
        SET_FIELD 'test3: Int' type=kotlin.Unit origin=null
          value: GET_VAR 'value-parameter <set-?>: Int' type=kotlin.Int origin=null
  PROPERTY name:test4 type:kotlin.Int visibility:public modality:FINAL flags:var
    FIELD PROPERTY_BACKING_FIELD name:test4 type:kotlin.Int visibility:public flags:
      EXPRESSION_BODY
        CONST Int type=kotlin.Int value=1
    FUN DEFAULT_PROPERTY_ACCESSOR name:<get-test4> visibility:public modality:FINAL <> () returnType:Int flags:
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='<get-test4>(): Int'
          GET_FIELD 'test4: Int' type=kotlin.Int origin=null
    FUN name:<set-test4> visibility:public modality:FINAL <> (value:kotlin.Int) returnType:Unit flags:
      VALUE_PARAMETER name:value index:0 type:kotlin.Int flags:
      BLOCK_BODY
        SET_FIELD 'test4: Int' type=kotlin.Unit origin=EQ
          value: GET_VAR 'value-parameter value: Int' type=kotlin.Int origin=null
  PROPERTY name:test5 type:kotlin.Int visibility:public modality:FINAL flags:var
    FIELD PROPERTY_BACKING_FIELD name:test5 type:kotlin.Int visibility:public flags:
      EXPRESSION_BODY
        CONST Int type=kotlin.Int value=1
    FUN DEFAULT_PROPERTY_ACCESSOR name:<get-test5> visibility:public modality:FINAL <> () returnType:Int flags:
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='<get-test5>(): Int'
          GET_FIELD 'test5: Int' type=kotlin.Int origin=null
    FUN name:<set-test5> visibility:private modality:FINAL <> (<set-?>:kotlin.Int) returnType:Unit flags:
      VALUE_PARAMETER name:<set-?> index:0 type:kotlin.Int flags:
      BLOCK_BODY
        SET_FIELD 'test5: Int' type=kotlin.Unit origin=null
          value: GET_VAR 'value-parameter <set-?>: Int' type=kotlin.Int origin=null
  PROPERTY name:test6 type:kotlin.Int visibility:public modality:FINAL flags:val
    FIELD PROPERTY_BACKING_FIELD name:test6 type:kotlin.Int visibility:public flags:final
      EXPRESSION_BODY
        CONST Int type=kotlin.Int value=1
    FUN name:<get-test6> visibility:public modality:FINAL <> () returnType:Int flags:
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='<get-test6>(): Int'
          GET_FIELD 'test6: Int' type=kotlin.Int origin=null
  PROPERTY name:test7 type:kotlin.Int visibility:public modality:FINAL flags:delegated,val
    FIELD DELEGATE name:test7$delegate type:kotlin.Lazy<kotlin.Int> visibility:private flags:final
      EXPRESSION_BODY
        CALL 'lazy(() -> Int): Lazy<Int>' type=kotlin.Lazy<kotlin.Int> origin=null
          <T>: Int
          initializer: BLOCK type=() -> kotlin.Int origin=LAMBDA
            FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL <> () returnType:Int flags:
              BLOCK_BODY
                RETURN type=kotlin.Nothing from='<anonymous>(): Int'
                  CONST Int type=kotlin.Int value=42
            FUNCTION_REFERENCE '<anonymous>(): Int' type=() -> kotlin.Int origin=LAMBDA
    FUN DELEGATED_PROPERTY_ACCESSOR name:<get-test7> visibility:public modality:FINAL <> () returnType:Int flags:
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='<get-test7>(): Int'
          CALL 'getValue(Any?, KProperty<*>) on Lazy<Int>: Int' type=kotlin.Int origin=null
            <T>: Int
            $receiver: GET_FIELD '`test7$delegate`: Lazy<Int>' type=kotlin.Lazy<kotlin.Int> origin=null
            thisRef: CONST Null type=kotlin.Nothing? value=null
            property: PROPERTY_REFERENCE 'test7: Int' field=null getter='<get-test7>(): Int' setter=null type=kotlin.reflect.KProperty0<kotlin.Int> origin=PROPERTY_REFERENCE_FOR_DELEGATE
  PROPERTY name:test8 type:kotlin.Int visibility:public modality:FINAL flags:delegated,var
    FIELD DELEGATE name:test8$delegate type:kotlin.collections.HashMap<kotlin.String, kotlin.Int> /* = java.util.HashMap<kotlin.String, kotlin.Int> */ visibility:private flags:final
      EXPRESSION_BODY
        CALL 'hashMapOf(): HashMap<String, Int> /* = HashMap<String, Int> */' type=kotlin.collections.HashMap<kotlin.String, kotlin.Int> /* = java.util.HashMap<kotlin.String, kotlin.Int> */ origin=null
          <K>: String
          <V>: Int
    FUN DELEGATED_PROPERTY_ACCESSOR name:<get-test8> visibility:public modality:FINAL <> () returnType:Int flags:
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='<get-test8>(): Int'
          CALL 'getValue(Any?, KProperty<*>) on MutableMap<in String, out Int>: Int' type=kotlin.Int origin=null
            <V>: Int
            <V1 : V>: Int
            $receiver: GET_FIELD '`test8$delegate`: HashMap<String, Int> /* = HashMap<String, Int> */' type=kotlin.collections.HashMap<kotlin.String, kotlin.Int> /* = java.util.HashMap<kotlin.String, kotlin.Int> */ origin=null
            thisRef: CONST Null type=kotlin.Nothing? value=null
            property: PROPERTY_REFERENCE 'test8: Int' field=null getter='<get-test8>(): Int' setter='<set-test8>(Int): Unit' type=kotlin.reflect.KMutableProperty0<kotlin.Int> origin=PROPERTY_REFERENCE_FOR_DELEGATE
    FUN DELEGATED_PROPERTY_ACCESSOR name:<set-test8> visibility:public modality:FINAL <> (<set-?>:kotlin.Int) returnType:Unit flags:
      VALUE_PARAMETER name:<set-?> index:0 type:kotlin.Int flags:
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='<set-test8>(Int): Unit'
          CALL 'setValue(Any?, KProperty<*>, Int) on MutableMap<in String, in Int>: Unit' type=kotlin.Unit origin=null
            <V>: Int
            $receiver: GET_FIELD '`test8$delegate`: HashMap<String, Int> /* = HashMap<String, Int> */' type=kotlin.collections.HashMap<kotlin.String, kotlin.Int> /* = java.util.HashMap<kotlin.String, kotlin.Int> */ origin=null
            thisRef: CONST Null type=kotlin.Nothing? value=null
            property: PROPERTY_REFERENCE 'test8: Int' field=null getter='<get-test8>(): Int' setter='<set-test8>(Int): Unit' type=kotlin.reflect.KMutableProperty0<kotlin.Int> origin=PROPERTY_REFERENCE_FOR_DELEGATE
            value: GET_VAR 'value-parameter <set-?>: Int' type=kotlin.Int origin=null

