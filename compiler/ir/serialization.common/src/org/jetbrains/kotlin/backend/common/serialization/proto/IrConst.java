// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: compiler/ir/serialization.common/src/KotlinIr.proto
// Protobuf Java Version: 4.29.3

package org.jetbrains.kotlin.backend.common.serialization.proto;

/**
 * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrConst}
 */
public final class IrConst extends
    org.jetbrains.kotlin.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrConst)
    IrConstOrBuilder {
private static final long serialVersionUID = 0L;
  static {
    org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 29,
      /* patch= */ 3,
      /* suffix= */ "",
      IrConst.class.getName());
  }
  // Use IrConst.newBuilder() to construct.
  private IrConst(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
  }
  private IrConst() {
  }

  public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return org.jetbrains.kotlin.backend.common.serialization.proto.KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_IrConst_descriptor;
  }

  @java.lang.Override
  protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.jetbrains.kotlin.backend.common.serialization.proto.KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_IrConst_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.jetbrains.kotlin.backend.common.serialization.proto.IrConst.class, org.jetbrains.kotlin.backend.common.serialization.proto.IrConst.Builder.class);
  }

  private int valueCase_ = 0;
  @SuppressWarnings("serial")
  private java.lang.Object value_;
  public enum ValueCase
      implements org.jetbrains.kotlin.protobuf.Internal.EnumLite,
          org.jetbrains.kotlin.protobuf.AbstractMessage.InternalOneOfEnum {
    NULL(1),
    BOOLEAN(2),
    CHAR(3),
    BYTE(4),
    SHORT(5),
    INT(6),
    LONG(7),
    FLOAT_BITS(8),
    DOUBLE_BITS(9),
    STRING(10),
    VALUE_NOT_SET(0);
    private final int value;
    private ValueCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ValueCase valueOf(int value) {
      return forNumber(value);
    }

    public static ValueCase forNumber(int value) {
      switch (value) {
        case 1: return NULL;
        case 2: return BOOLEAN;
        case 3: return CHAR;
        case 4: return BYTE;
        case 5: return SHORT;
        case 6: return INT;
        case 7: return LONG;
        case 8: return FLOAT_BITS;
        case 9: return DOUBLE_BITS;
        case 10: return STRING;
        case 0: return VALUE_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public ValueCase
  getValueCase() {
    return ValueCase.forNumber(
        valueCase_);
  }

  public static final int NULL_FIELD_NUMBER = 1;
  /**
   * <code>bool null = 1;</code>
   * @return Whether the null field is set.
   */
  @java.lang.Override
  public boolean hasNull() {
    return valueCase_ == 1;
  }
  /**
   * <code>bool null = 1;</code>
   * @return The null.
   */
  @java.lang.Override
  public boolean getNull() {
    if (valueCase_ == 1) {
      return (java.lang.Boolean) value_;
    }
    return false;
  }

  public static final int BOOLEAN_FIELD_NUMBER = 2;
  /**
   * <code>bool boolean = 2;</code>
   * @return Whether the boolean field is set.
   */
  @java.lang.Override
  public boolean hasBoolean() {
    return valueCase_ == 2;
  }
  /**
   * <code>bool boolean = 2;</code>
   * @return The boolean.
   */
  @java.lang.Override
  public boolean getBoolean() {
    if (valueCase_ == 2) {
      return (java.lang.Boolean) value_;
    }
    return false;
  }

  public static final int CHAR_FIELD_NUMBER = 3;
  /**
   * <code>int32 char = 3;</code>
   * @return Whether the char field is set.
   */
  @java.lang.Override
  public boolean hasChar() {
    return valueCase_ == 3;
  }
  /**
   * <code>int32 char = 3;</code>
   * @return The char.
   */
  @java.lang.Override
  public int getChar() {
    if (valueCase_ == 3) {
      return (java.lang.Integer) value_;
    }
    return 0;
  }

  public static final int BYTE_FIELD_NUMBER = 4;
  /**
   * <code>int32 byte = 4;</code>
   * @return Whether the byte field is set.
   */
  @java.lang.Override
  public boolean hasByte() {
    return valueCase_ == 4;
  }
  /**
   * <code>int32 byte = 4;</code>
   * @return The byte.
   */
  @java.lang.Override
  public int getByte() {
    if (valueCase_ == 4) {
      return (java.lang.Integer) value_;
    }
    return 0;
  }

  public static final int SHORT_FIELD_NUMBER = 5;
  /**
   * <code>int32 short = 5;</code>
   * @return Whether the short field is set.
   */
  @java.lang.Override
  public boolean hasShort() {
    return valueCase_ == 5;
  }
  /**
   * <code>int32 short = 5;</code>
   * @return The short.
   */
  @java.lang.Override
  public int getShort() {
    if (valueCase_ == 5) {
      return (java.lang.Integer) value_;
    }
    return 0;
  }

  public static final int INT_FIELD_NUMBER = 6;
  /**
   * <code>int32 int = 6;</code>
   * @return Whether the int field is set.
   */
  @java.lang.Override
  public boolean hasInt() {
    return valueCase_ == 6;
  }
  /**
   * <code>int32 int = 6;</code>
   * @return The int.
   */
  @java.lang.Override
  public int getInt() {
    if (valueCase_ == 6) {
      return (java.lang.Integer) value_;
    }
    return 0;
  }

  public static final int LONG_FIELD_NUMBER = 7;
  /**
   * <code>int64 long = 7;</code>
   * @return Whether the long field is set.
   */
  @java.lang.Override
  public boolean hasLong() {
    return valueCase_ == 7;
  }
  /**
   * <code>int64 long = 7;</code>
   * @return The long.
   */
  @java.lang.Override
  public long getLong() {
    if (valueCase_ == 7) {
      return (java.lang.Long) value_;
    }
    return 0L;
  }

  public static final int FLOAT_BITS_FIELD_NUMBER = 8;
  /**
   * <pre>
   * float/double is stored via fixed 32/64 bit value to avoid raw bit conversion
   * </pre>
   *
   * <code>fixed32 float_bits = 8;</code>
   * @return Whether the floatBits field is set.
   */
  @java.lang.Override
  public boolean hasFloatBits() {
    return valueCase_ == 8;
  }
  /**
   * <pre>
   * float/double is stored via fixed 32/64 bit value to avoid raw bit conversion
   * </pre>
   *
   * <code>fixed32 float_bits = 8;</code>
   * @return The floatBits.
   */
  @java.lang.Override
  public int getFloatBits() {
    if (valueCase_ == 8) {
      return (java.lang.Integer) value_;
    }
    return 0;
  }

  public static final int DOUBLE_BITS_FIELD_NUMBER = 9;
  /**
   * <code>fixed64 double_bits = 9;</code>
   * @return Whether the doubleBits field is set.
   */
  @java.lang.Override
  public boolean hasDoubleBits() {
    return valueCase_ == 9;
  }
  /**
   * <code>fixed64 double_bits = 9;</code>
   * @return The doubleBits.
   */
  @java.lang.Override
  public long getDoubleBits() {
    if (valueCase_ == 9) {
      return (java.lang.Long) value_;
    }
    return 0L;
  }

  public static final int STRING_FIELD_NUMBER = 10;
  /**
   * <code>int32 string = 10;</code>
   * @return Whether the string field is set.
   */
  @java.lang.Override
  public boolean hasString() {
    return valueCase_ == 10;
  }
  /**
   * <code>int32 string = 10;</code>
   * @return The string.
   */
  @java.lang.Override
  public int getString() {
    if (valueCase_ == 10) {
      return (java.lang.Integer) value_;
    }
    return 0;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (valueCase_ == 1) {
      output.writeBool(
          1, (boolean)((java.lang.Boolean) value_));
    }
    if (valueCase_ == 2) {
      output.writeBool(
          2, (boolean)((java.lang.Boolean) value_));
    }
    if (valueCase_ == 3) {
      output.writeInt32(
          3, (int)((java.lang.Integer) value_));
    }
    if (valueCase_ == 4) {
      output.writeInt32(
          4, (int)((java.lang.Integer) value_));
    }
    if (valueCase_ == 5) {
      output.writeInt32(
          5, (int)((java.lang.Integer) value_));
    }
    if (valueCase_ == 6) {
      output.writeInt32(
          6, (int)((java.lang.Integer) value_));
    }
    if (valueCase_ == 7) {
      output.writeInt64(
          7, (long)((java.lang.Long) value_));
    }
    if (valueCase_ == 8) {
      output.writeFixed32(
          8, (int)((java.lang.Integer) value_));
    }
    if (valueCase_ == 9) {
      output.writeFixed64(
          9, (long)((java.lang.Long) value_));
    }
    if (valueCase_ == 10) {
      output.writeInt32(
          10, (int)((java.lang.Integer) value_));
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (valueCase_ == 1) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeBoolSize(
            1, (boolean)((java.lang.Boolean) value_));
    }
    if (valueCase_ == 2) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeBoolSize(
            2, (boolean)((java.lang.Boolean) value_));
    }
    if (valueCase_ == 3) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeInt32Size(
            3, (int)((java.lang.Integer) value_));
    }
    if (valueCase_ == 4) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeInt32Size(
            4, (int)((java.lang.Integer) value_));
    }
    if (valueCase_ == 5) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeInt32Size(
            5, (int)((java.lang.Integer) value_));
    }
    if (valueCase_ == 6) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeInt32Size(
            6, (int)((java.lang.Integer) value_));
    }
    if (valueCase_ == 7) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeInt64Size(
            7, (long)((java.lang.Long) value_));
    }
    if (valueCase_ == 8) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeFixed32Size(
            8, (int)((java.lang.Integer) value_));
    }
    if (valueCase_ == 9) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeFixed64Size(
            9, (long)((java.lang.Long) value_));
    }
    if (valueCase_ == 10) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeInt32Size(
            10, (int)((java.lang.Integer) value_));
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof org.jetbrains.kotlin.backend.common.serialization.proto.IrConst)) {
      return super.equals(obj);
    }
    org.jetbrains.kotlin.backend.common.serialization.proto.IrConst other = (org.jetbrains.kotlin.backend.common.serialization.proto.IrConst) obj;

    if (!getValueCase().equals(other.getValueCase())) return false;
    switch (valueCase_) {
      case 1:
        if (getNull()
            != other.getNull()) return false;
        break;
      case 2:
        if (getBoolean()
            != other.getBoolean()) return false;
        break;
      case 3:
        if (getChar()
            != other.getChar()) return false;
        break;
      case 4:
        if (getByte()
            != other.getByte()) return false;
        break;
      case 5:
        if (getShort()
            != other.getShort()) return false;
        break;
      case 6:
        if (getInt()
            != other.getInt()) return false;
        break;
      case 7:
        if (getLong()
            != other.getLong()) return false;
        break;
      case 8:
        if (getFloatBits()
            != other.getFloatBits()) return false;
        break;
      case 9:
        if (getDoubleBits()
            != other.getDoubleBits()) return false;
        break;
      case 10:
        if (getString()
            != other.getString()) return false;
        break;
      case 0:
      default:
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    switch (valueCase_) {
      case 1:
        hash = (37 * hash) + NULL_FIELD_NUMBER;
        hash = (53 * hash) + org.jetbrains.kotlin.protobuf.Internal.hashBoolean(
            getNull());
        break;
      case 2:
        hash = (37 * hash) + BOOLEAN_FIELD_NUMBER;
        hash = (53 * hash) + org.jetbrains.kotlin.protobuf.Internal.hashBoolean(
            getBoolean());
        break;
      case 3:
        hash = (37 * hash) + CHAR_FIELD_NUMBER;
        hash = (53 * hash) + getChar();
        break;
      case 4:
        hash = (37 * hash) + BYTE_FIELD_NUMBER;
        hash = (53 * hash) + getByte();
        break;
      case 5:
        hash = (37 * hash) + SHORT_FIELD_NUMBER;
        hash = (53 * hash) + getShort();
        break;
      case 6:
        hash = (37 * hash) + INT_FIELD_NUMBER;
        hash = (53 * hash) + getInt();
        break;
      case 7:
        hash = (37 * hash) + LONG_FIELD_NUMBER;
        hash = (53 * hash) + org.jetbrains.kotlin.protobuf.Internal.hashLong(
            getLong());
        break;
      case 8:
        hash = (37 * hash) + FLOAT_BITS_FIELD_NUMBER;
        hash = (53 * hash) + getFloatBits();
        break;
      case 9:
        hash = (37 * hash) + DOUBLE_BITS_FIELD_NUMBER;
        hash = (53 * hash) + org.jetbrains.kotlin.protobuf.Internal.hashLong(
            getDoubleBits());
        break;
      case 10:
        hash = (37 * hash) + STRING_FIELD_NUMBER;
        hash = (53 * hash) + getString();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrConst parseFrom(
      java.nio.ByteBuffer data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrConst parseFrom(
      java.nio.ByteBuffer data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrConst parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrConst parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrConst parseFrom(byte[] data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrConst parseFrom(
      byte[] data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrConst parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrConst parseFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrConst parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrConst parseDelimitedFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrConst parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrConst parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.jetbrains.kotlin.backend.common.serialization.proto.IrConst prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrConst}
   */
  public static final class Builder extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrConst)
      org.jetbrains.kotlin.backend.common.serialization.proto.IrConstOrBuilder {
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.backend.common.serialization.proto.KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_IrConst_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.backend.common.serialization.proto.KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_IrConst_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.backend.common.serialization.proto.IrConst.class, org.jetbrains.kotlin.backend.common.serialization.proto.IrConst.Builder.class);
    }

    // Construct using org.jetbrains.kotlin.backend.common.serialization.proto.IrConst.newBuilder()
    private Builder() {

    }

    private Builder(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      valueCase_ = 0;
      value_ = null;
      return this;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return org.jetbrains.kotlin.backend.common.serialization.proto.KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_IrConst_descriptor;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrConst getDefaultInstanceForType() {
      return org.jetbrains.kotlin.backend.common.serialization.proto.IrConst.getDefaultInstance();
    }

    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrConst build() {
      org.jetbrains.kotlin.backend.common.serialization.proto.IrConst result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrConst buildPartial() {
      org.jetbrains.kotlin.backend.common.serialization.proto.IrConst result = new org.jetbrains.kotlin.backend.common.serialization.proto.IrConst(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      buildPartialOneofs(result);
      onBuilt();
      return result;
    }

    private void buildPartial0(org.jetbrains.kotlin.backend.common.serialization.proto.IrConst result) {
      int from_bitField0_ = bitField0_;
    }

    private void buildPartialOneofs(org.jetbrains.kotlin.backend.common.serialization.proto.IrConst result) {
      result.valueCase_ = valueCase_;
      result.value_ = this.value_;
    }

    @java.lang.Override
    public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
      if (other instanceof org.jetbrains.kotlin.backend.common.serialization.proto.IrConst) {
        return mergeFrom((org.jetbrains.kotlin.backend.common.serialization.proto.IrConst)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(org.jetbrains.kotlin.backend.common.serialization.proto.IrConst other) {
      if (other == org.jetbrains.kotlin.backend.common.serialization.proto.IrConst.getDefaultInstance()) return this;
      switch (other.getValueCase()) {
        case NULL: {
          setNull(other.getNull());
          break;
        }
        case BOOLEAN: {
          setBoolean(other.getBoolean());
          break;
        }
        case CHAR: {
          setChar(other.getChar());
          break;
        }
        case BYTE: {
          setByte(other.getByte());
          break;
        }
        case SHORT: {
          setShort(other.getShort());
          break;
        }
        case INT: {
          setInt(other.getInt());
          break;
        }
        case LONG: {
          setLong(other.getLong());
          break;
        }
        case FLOAT_BITS: {
          setFloatBits(other.getFloatBits());
          break;
        }
        case DOUBLE_BITS: {
          setDoubleBits(other.getDoubleBits());
          break;
        }
        case STRING: {
          setString(other.getString());
          break;
        }
        case VALUE_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              value_ = input.readBool();
              valueCase_ = 1;
              break;
            } // case 8
            case 16: {
              value_ = input.readBool();
              valueCase_ = 2;
              break;
            } // case 16
            case 24: {
              value_ = input.readInt32();
              valueCase_ = 3;
              break;
            } // case 24
            case 32: {
              value_ = input.readInt32();
              valueCase_ = 4;
              break;
            } // case 32
            case 40: {
              value_ = input.readInt32();
              valueCase_ = 5;
              break;
            } // case 40
            case 48: {
              value_ = input.readInt32();
              valueCase_ = 6;
              break;
            } // case 48
            case 56: {
              value_ = input.readInt64();
              valueCase_ = 7;
              break;
            } // case 56
            case 69: {
              value_ = input.readFixed32();
              valueCase_ = 8;
              break;
            } // case 69
            case 73: {
              value_ = input.readFixed64();
              valueCase_ = 9;
              break;
            } // case 73
            case 80: {
              value_ = input.readInt32();
              valueCase_ = 10;
              break;
            } // case 80
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int valueCase_ = 0;
    private java.lang.Object value_;
    public ValueCase
        getValueCase() {
      return ValueCase.forNumber(
          valueCase_);
    }

    public Builder clearValue() {
      valueCase_ = 0;
      value_ = null;
      onChanged();
      return this;
    }

    private int bitField0_;

    /**
     * <code>bool null = 1;</code>
     * @return Whether the null field is set.
     */
    public boolean hasNull() {
      return valueCase_ == 1;
    }
    /**
     * <code>bool null = 1;</code>
     * @return The null.
     */
    public boolean getNull() {
      if (valueCase_ == 1) {
        return (java.lang.Boolean) value_;
      }
      return false;
    }
    /**
     * <code>bool null = 1;</code>
     * @param value The null to set.
     * @return This builder for chaining.
     */
    public Builder setNull(boolean value) {

      valueCase_ = 1;
      value_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>bool null = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearNull() {
      if (valueCase_ == 1) {
        valueCase_ = 0;
        value_ = null;
        onChanged();
      }
      return this;
    }

    /**
     * <code>bool boolean = 2;</code>
     * @return Whether the boolean field is set.
     */
    public boolean hasBoolean() {
      return valueCase_ == 2;
    }
    /**
     * <code>bool boolean = 2;</code>
     * @return The boolean.
     */
    public boolean getBoolean() {
      if (valueCase_ == 2) {
        return (java.lang.Boolean) value_;
      }
      return false;
    }
    /**
     * <code>bool boolean = 2;</code>
     * @param value The boolean to set.
     * @return This builder for chaining.
     */
    public Builder setBoolean(boolean value) {

      valueCase_ = 2;
      value_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>bool boolean = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearBoolean() {
      if (valueCase_ == 2) {
        valueCase_ = 0;
        value_ = null;
        onChanged();
      }
      return this;
    }

    /**
     * <code>int32 char = 3;</code>
     * @return Whether the char field is set.
     */
    public boolean hasChar() {
      return valueCase_ == 3;
    }
    /**
     * <code>int32 char = 3;</code>
     * @return The char.
     */
    public int getChar() {
      if (valueCase_ == 3) {
        return (java.lang.Integer) value_;
      }
      return 0;
    }
    /**
     * <code>int32 char = 3;</code>
     * @param value The char to set.
     * @return This builder for chaining.
     */
    public Builder setChar(int value) {

      valueCase_ = 3;
      value_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 char = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearChar() {
      if (valueCase_ == 3) {
        valueCase_ = 0;
        value_ = null;
        onChanged();
      }
      return this;
    }

    /**
     * <code>int32 byte = 4;</code>
     * @return Whether the byte field is set.
     */
    public boolean hasByte() {
      return valueCase_ == 4;
    }
    /**
     * <code>int32 byte = 4;</code>
     * @return The byte.
     */
    public int getByte() {
      if (valueCase_ == 4) {
        return (java.lang.Integer) value_;
      }
      return 0;
    }
    /**
     * <code>int32 byte = 4;</code>
     * @param value The byte to set.
     * @return This builder for chaining.
     */
    public Builder setByte(int value) {

      valueCase_ = 4;
      value_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 byte = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearByte() {
      if (valueCase_ == 4) {
        valueCase_ = 0;
        value_ = null;
        onChanged();
      }
      return this;
    }

    /**
     * <code>int32 short = 5;</code>
     * @return Whether the short field is set.
     */
    public boolean hasShort() {
      return valueCase_ == 5;
    }
    /**
     * <code>int32 short = 5;</code>
     * @return The short.
     */
    public int getShort() {
      if (valueCase_ == 5) {
        return (java.lang.Integer) value_;
      }
      return 0;
    }
    /**
     * <code>int32 short = 5;</code>
     * @param value The short to set.
     * @return This builder for chaining.
     */
    public Builder setShort(int value) {

      valueCase_ = 5;
      value_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 short = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearShort() {
      if (valueCase_ == 5) {
        valueCase_ = 0;
        value_ = null;
        onChanged();
      }
      return this;
    }

    /**
     * <code>int32 int = 6;</code>
     * @return Whether the int field is set.
     */
    public boolean hasInt() {
      return valueCase_ == 6;
    }
    /**
     * <code>int32 int = 6;</code>
     * @return The int.
     */
    public int getInt() {
      if (valueCase_ == 6) {
        return (java.lang.Integer) value_;
      }
      return 0;
    }
    /**
     * <code>int32 int = 6;</code>
     * @param value The int to set.
     * @return This builder for chaining.
     */
    public Builder setInt(int value) {

      valueCase_ = 6;
      value_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 int = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearInt() {
      if (valueCase_ == 6) {
        valueCase_ = 0;
        value_ = null;
        onChanged();
      }
      return this;
    }

    /**
     * <code>int64 long = 7;</code>
     * @return Whether the long field is set.
     */
    public boolean hasLong() {
      return valueCase_ == 7;
    }
    /**
     * <code>int64 long = 7;</code>
     * @return The long.
     */
    public long getLong() {
      if (valueCase_ == 7) {
        return (java.lang.Long) value_;
      }
      return 0L;
    }
    /**
     * <code>int64 long = 7;</code>
     * @param value The long to set.
     * @return This builder for chaining.
     */
    public Builder setLong(long value) {

      valueCase_ = 7;
      value_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int64 long = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearLong() {
      if (valueCase_ == 7) {
        valueCase_ = 0;
        value_ = null;
        onChanged();
      }
      return this;
    }

    /**
     * <pre>
     * float/double is stored via fixed 32/64 bit value to avoid raw bit conversion
     * </pre>
     *
     * <code>fixed32 float_bits = 8;</code>
     * @return Whether the floatBits field is set.
     */
    public boolean hasFloatBits() {
      return valueCase_ == 8;
    }
    /**
     * <pre>
     * float/double is stored via fixed 32/64 bit value to avoid raw bit conversion
     * </pre>
     *
     * <code>fixed32 float_bits = 8;</code>
     * @return The floatBits.
     */
    public int getFloatBits() {
      if (valueCase_ == 8) {
        return (java.lang.Integer) value_;
      }
      return 0;
    }
    /**
     * <pre>
     * float/double is stored via fixed 32/64 bit value to avoid raw bit conversion
     * </pre>
     *
     * <code>fixed32 float_bits = 8;</code>
     * @param value The floatBits to set.
     * @return This builder for chaining.
     */
    public Builder setFloatBits(int value) {

      valueCase_ = 8;
      value_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * float/double is stored via fixed 32/64 bit value to avoid raw bit conversion
     * </pre>
     *
     * <code>fixed32 float_bits = 8;</code>
     * @return This builder for chaining.
     */
    public Builder clearFloatBits() {
      if (valueCase_ == 8) {
        valueCase_ = 0;
        value_ = null;
        onChanged();
      }
      return this;
    }

    /**
     * <code>fixed64 double_bits = 9;</code>
     * @return Whether the doubleBits field is set.
     */
    public boolean hasDoubleBits() {
      return valueCase_ == 9;
    }
    /**
     * <code>fixed64 double_bits = 9;</code>
     * @return The doubleBits.
     */
    public long getDoubleBits() {
      if (valueCase_ == 9) {
        return (java.lang.Long) value_;
      }
      return 0L;
    }
    /**
     * <code>fixed64 double_bits = 9;</code>
     * @param value The doubleBits to set.
     * @return This builder for chaining.
     */
    public Builder setDoubleBits(long value) {

      valueCase_ = 9;
      value_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>fixed64 double_bits = 9;</code>
     * @return This builder for chaining.
     */
    public Builder clearDoubleBits() {
      if (valueCase_ == 9) {
        valueCase_ = 0;
        value_ = null;
        onChanged();
      }
      return this;
    }

    /**
     * <code>int32 string = 10;</code>
     * @return Whether the string field is set.
     */
    public boolean hasString() {
      return valueCase_ == 10;
    }
    /**
     * <code>int32 string = 10;</code>
     * @return The string.
     */
    public int getString() {
      if (valueCase_ == 10) {
        return (java.lang.Integer) value_;
      }
      return 0;
    }
    /**
     * <code>int32 string = 10;</code>
     * @param value The string to set.
     * @return This builder for chaining.
     */
    public Builder setString(int value) {

      valueCase_ = 10;
      value_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 string = 10;</code>
     * @return This builder for chaining.
     */
    public Builder clearString() {
      if (valueCase_ == 10) {
        valueCase_ = 0;
        value_ = null;
        onChanged();
      }
      return this;
    }

    // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrConst)
  }

  // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrConst)
  private static final org.jetbrains.kotlin.backend.common.serialization.proto.IrConst DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new org.jetbrains.kotlin.backend.common.serialization.proto.IrConst();
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrConst getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final org.jetbrains.kotlin.protobuf.Parser<IrConst>
      PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<IrConst>() {
    @java.lang.Override
    public IrConst parsePartialFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static org.jetbrains.kotlin.protobuf.Parser<IrConst> parser() {
    return PARSER;
  }

  @java.lang.Override
  public org.jetbrains.kotlin.protobuf.Parser<IrConst> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrConst getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}
