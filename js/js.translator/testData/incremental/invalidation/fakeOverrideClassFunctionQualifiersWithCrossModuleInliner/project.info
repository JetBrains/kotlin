MODULES: lib1, lib2, main

STEP 0:
    language: +IrIntraModuleInlinerBeforeKlibSerialization, +IrCrossModuleInlinerBeforeKlibSerialization
    libs: lib1, lib2, main
    dirty js modules: lib1, lib2, main
    dirty js files:   lib1/l1, lib2/l2, main/m, main/m.export, main
STEP 1:
    language: +IrIntraModuleInlinerBeforeKlibSerialization, +IrCrossModuleInlinerBeforeKlibSerialization
    libs: lib1, lib2, main
    dirty js modules: lib1, lib2, main
    dirty js files:   lib1/l1, lib2/l2, main/m
STEP 2:
    language: +IrIntraModuleInlinerBeforeKlibSerialization, +IrCrossModuleInlinerBeforeKlibSerialization
    libs: lib1, lib2, main
    dirty js modules: lib1, lib2
    dirty js files:   lib1/l1, lib2/l2
STEP 3:
    language: +IrIntraModuleInlinerBeforeKlibSerialization, +IrCrossModuleInlinerBeforeKlibSerialization
    libs: lib1, lib2, main
    dirty js modules: lib1
    dirty js files:   lib1/l1
STEP 4:
    language: +IrIntraModuleInlinerBeforeKlibSerialization, +IrCrossModuleInlinerBeforeKlibSerialization
    libs: lib1, lib2, main
    dirty js modules: main, lib1, lib2
    dirty js files:   lib1/l1, lib2/l2, main/m
STEP 5:
    language: +IrIntraModuleInlinerBeforeKlibSerialization, +IrCrossModuleInlinerBeforeKlibSerialization
    libs: lib1, lib2, main
    dirty js modules: lib1
    dirty js files:   lib1/l1
STEP 6..10:
    language: +IrIntraModuleInlinerBeforeKlibSerialization, +IrCrossModuleInlinerBeforeKlibSerialization
    libs: lib1, lib2, main
    dirty js modules: lib1, lib2, main
    dirty js files:   lib1/l1, lib2/l2, main/m
STEP 11:
    language: +IrIntraModuleInlinerBeforeKlibSerialization, +IrCrossModuleInlinerBeforeKlibSerialization
    libs: lib1, lib2, main
    dirty js modules: lib1
    dirty js files:   lib1/l1
