/*
 * Copyright 2010-2024 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.analysis.low.level.api.fir.api;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.util.KtTestUtil;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.analysis.api.GenerateAnalysisApiTestsKt}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("analysis/low-level-api-fir/testData/resolveToFirSymbol")
@TestDataPath("$PROJECT_ROOT")
public class ResolveToFirSymbolTestGenerated extends AbstractResolveToFirSymbolTest {
  @Test
  public void testAllFilesPresentInResolveToFirSymbol() {
    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("analysis/low-level-api-fir/testData/resolveToFirSymbol"), Pattern.compile("^(.+)\\.kt$"), null, true);
  }

  @Test
  @TestMetadata("sdkLibrary.kt")
  public void testSdkLibrary() {
    runTest("analysis/low-level-api-fir/testData/resolveToFirSymbol/sdkLibrary.kt");
  }

  @Nested
  @TestMetadata("analysis/low-level-api-fir/testData/resolveToFirSymbol/ambiguities")
  @TestDataPath("$PROJECT_ROOT")
  public class Ambiguities {
    @Test
    public void testAllFilesPresentInAmbiguities() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("analysis/low-level-api-fir/testData/resolveToFirSymbol/ambiguities"), Pattern.compile("^(.+)\\.kt$"), null, true);
    }

    @Test
    @TestMetadata("classAmbiguityLibraryMultiModule.kt")
    public void testClassAmbiguityLibraryMultiModule() {
      runTest("analysis/low-level-api-fir/testData/resolveToFirSymbol/ambiguities/classAmbiguityLibraryMultiModule.kt");
    }

    @Test
    @TestMetadata("classAmbiguityLibrarySingleModuleMultiRoot.kt")
    public void testClassAmbiguityLibrarySingleModuleMultiRoot() {
      runTest("analysis/low-level-api-fir/testData/resolveToFirSymbol/ambiguities/classAmbiguityLibrarySingleModuleMultiRoot.kt");
    }

    @Test
    @TestMetadata("classAmbiguitySourceSingleModule.kt")
    public void testClassAmbiguitySourceSingleModule() {
      runTest("analysis/low-level-api-fir/testData/resolveToFirSymbol/ambiguities/classAmbiguitySourceSingleModule.kt");
    }

    @Test
    @TestMetadata("classAndTypeAliasAmbiguityLibraryMultiModule.kt")
    public void testClassAndTypeAliasAmbiguityLibraryMultiModule() {
      runTest("analysis/low-level-api-fir/testData/resolveToFirSymbol/ambiguities/classAndTypeAliasAmbiguityLibraryMultiModule.kt");
    }

    @Test
    @TestMetadata("classAndTypeAliasAmbiguityLibrarySingleModuleMultiRoot.kt")
    public void testClassAndTypeAliasAmbiguityLibrarySingleModuleMultiRoot() {
      runTest("analysis/low-level-api-fir/testData/resolveToFirSymbol/ambiguities/classAndTypeAliasAmbiguityLibrarySingleModuleMultiRoot.kt");
    }

    @Test
    @TestMetadata("classAndTypeAliasAmbiguitySourceSingleModule.kt")
    public void testClassAndTypeAliasAmbiguitySourceSingleModule() {
      runTest("analysis/low-level-api-fir/testData/resolveToFirSymbol/ambiguities/classAndTypeAliasAmbiguitySourceSingleModule.kt");
    }

    @Test
    @TestMetadata("classCallableAmbiguityLibraryMultiModule.kt")
    public void testClassCallableAmbiguityLibraryMultiModule() {
      runTest("analysis/low-level-api-fir/testData/resolveToFirSymbol/ambiguities/classCallableAmbiguityLibraryMultiModule.kt");
    }

    @Test
    @TestMetadata("classCallableAmbiguityLibrarySingleModuleMultiRoot.kt")
    public void testClassCallableAmbiguityLibrarySingleModuleMultiRoot() {
      runTest("analysis/low-level-api-fir/testData/resolveToFirSymbol/ambiguities/classCallableAmbiguityLibrarySingleModuleMultiRoot.kt");
    }

    @Test
    @TestMetadata("classCallableAmbiguitySourceSingleModule.kt")
    public void testClassCallableAmbiguitySourceSingleModule() {
      runTest("analysis/low-level-api-fir/testData/resolveToFirSymbol/ambiguities/classCallableAmbiguitySourceSingleModule.kt");
    }

    @Test
    @TestMetadata("enumEntryAmbiguityLibraryMultiModule.kt")
    public void testEnumEntryAmbiguityLibraryMultiModule() {
      runTest("analysis/low-level-api-fir/testData/resolveToFirSymbol/ambiguities/enumEntryAmbiguityLibraryMultiModule.kt");
    }

    @Test
    @TestMetadata("enumEntryAmbiguityLibrarySingleModuleMultiRoot.kt")
    public void testEnumEntryAmbiguityLibrarySingleModuleMultiRoot() {
      runTest("analysis/low-level-api-fir/testData/resolveToFirSymbol/ambiguities/enumEntryAmbiguityLibrarySingleModuleMultiRoot.kt");
    }

    @Test
    @TestMetadata("enumEntryAmbiguitySourceSingleModule.kt")
    public void testEnumEntryAmbiguitySourceSingleModule() {
      runTest("analysis/low-level-api-fir/testData/resolveToFirSymbol/ambiguities/enumEntryAmbiguitySourceSingleModule.kt");
    }

    @Test
    @TestMetadata("namelessClassAmbiguitySourceSingleModule.kt")
    public void testNamelessClassAmbiguitySourceSingleModule() {
      runTest("analysis/low-level-api-fir/testData/resolveToFirSymbol/ambiguities/namelessClassAmbiguitySourceSingleModule.kt");
    }

    @Test
    @TestMetadata("namelessNestedClassAmbiguitySourceSingleModule.kt")
    public void testNamelessNestedClassAmbiguitySourceSingleModule() {
      runTest("analysis/low-level-api-fir/testData/resolveToFirSymbol/ambiguities/namelessNestedClassAmbiguitySourceSingleModule.kt");
    }

    @Test
    @TestMetadata("nestedClassAmbiguityLibraryMultiModule.kt")
    public void testNestedClassAmbiguityLibraryMultiModule() {
      runTest("analysis/low-level-api-fir/testData/resolveToFirSymbol/ambiguities/nestedClassAmbiguityLibraryMultiModule.kt");
    }

    @Test
    @TestMetadata("nestedClassAmbiguityLibrarySingleModuleMultiRoot.kt")
    public void testNestedClassAmbiguityLibrarySingleModuleMultiRoot() {
      runTest("analysis/low-level-api-fir/testData/resolveToFirSymbol/ambiguities/nestedClassAmbiguityLibrarySingleModuleMultiRoot.kt");
    }

    @Test
    @TestMetadata("nestedClassAmbiguitySourceSingleModule.kt")
    public void testNestedClassAmbiguitySourceSingleModule() {
      runTest("analysis/low-level-api-fir/testData/resolveToFirSymbol/ambiguities/nestedClassAmbiguitySourceSingleModule.kt");
    }

    @Test
    @TestMetadata("nestedClassInNamelessClassAmbiguitySourceSingleModule.kt")
    public void testNestedClassInNamelessClassAmbiguitySourceSingleModule() {
      runTest("analysis/low-level-api-fir/testData/resolveToFirSymbol/ambiguities/nestedClassInNamelessClassAmbiguitySourceSingleModule.kt");
    }

    @Test
    @TestMetadata("topLevelCallableAmbiguityLibraryMultiModule.kt")
    public void testTopLevelCallableAmbiguityLibraryMultiModule() {
      runTest("analysis/low-level-api-fir/testData/resolveToFirSymbol/ambiguities/topLevelCallableAmbiguityLibraryMultiModule.kt");
    }

    @Test
    @TestMetadata("topLevelCallableAmbiguityLibrarySingleModuleMultiRoot.kt")
    public void testTopLevelCallableAmbiguityLibrarySingleModuleMultiRoot() {
      runTest("analysis/low-level-api-fir/testData/resolveToFirSymbol/ambiguities/topLevelCallableAmbiguityLibrarySingleModuleMultiRoot.kt");
    }

    @Test
    @TestMetadata("topLevelCallableAmbiguitySourceSingleModule.kt")
    public void testTopLevelCallableAmbiguitySourceSingleModule() {
      runTest("analysis/low-level-api-fir/testData/resolveToFirSymbol/ambiguities/topLevelCallableAmbiguitySourceSingleModule.kt");
    }

    @Test
    @TestMetadata("topLevelCallableAmbiguityWithSameFacadeNameLibraryMultiModule.kt")
    public void testTopLevelCallableAmbiguityWithSameFacadeNameLibraryMultiModule() {
      runTest("analysis/low-level-api-fir/testData/resolveToFirSymbol/ambiguities/topLevelCallableAmbiguityWithSameFacadeNameLibraryMultiModule.kt");
    }

    @Test
    @TestMetadata("topLevelCallableAmbiguityWithSameFacadeNameLibrarySingleModuleMultiRoot.kt")
    public void testTopLevelCallableAmbiguityWithSameFacadeNameLibrarySingleModuleMultiRoot() {
      runTest("analysis/low-level-api-fir/testData/resolveToFirSymbol/ambiguities/topLevelCallableAmbiguityWithSameFacadeNameLibrarySingleModuleMultiRoot.kt");
    }
  }

  @Nested
  @TestMetadata("analysis/low-level-api-fir/testData/resolveToFirSymbol/builtins")
  @TestDataPath("$PROJECT_ROOT")
  public class Builtins {
    @Test
    public void testAllFilesPresentInBuiltins() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("analysis/low-level-api-fir/testData/resolveToFirSymbol/builtins"), Pattern.compile("^(.+)\\.kt$"), null, true);
    }

    @Test
    @TestMetadata("intArrayOfFullStdlib.kt")
    public void testIntArrayOfFullStdlib() {
      runTest("analysis/low-level-api-fir/testData/resolveToFirSymbol/builtins/intArrayOfFullStdlib.kt");
    }

    @Test
    @TestMetadata("intArrayOfMinimalStdlib.kt")
    public void testIntArrayOfMinimalStdlib() {
      runTest("analysis/low-level-api-fir/testData/resolveToFirSymbol/builtins/intArrayOfMinimalStdlib.kt");
    }

    @Test
    @TestMetadata("stringFullStdlib.kt")
    public void testStringFullStdlib() {
      runTest("analysis/low-level-api-fir/testData/resolveToFirSymbol/builtins/stringFullStdlib.kt");
    }

    @Test
    @TestMetadata("stringMinimalStdlib.kt")
    public void testStringMinimalStdlib() {
      runTest("analysis/low-level-api-fir/testData/resolveToFirSymbol/builtins/stringMinimalStdlib.kt");
    }
  }
}
