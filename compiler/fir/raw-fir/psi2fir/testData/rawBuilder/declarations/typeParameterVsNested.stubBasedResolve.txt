FILE: [ResolvedTo(BODY_RESOLVE)] typeParameterVsNested.kt
    public abstract [ResolvedTo(BODY_RESOLVE)] interface Some : R|kotlin/Any| {
    }
    public abstract [ResolvedTo(BODY_RESOLVE)] class My<[ResolvedTo(BODY_RESOLVE)] T : R|test/Some|> : R|kotlin/Any| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=My] constructor<[ResolvedTo(BODY_RESOLVE)] T : R|test/Some|>(): R|test/My<T>| {
            super<R|kotlin/Any|>()
        }

        public final inner [ResolvedTo(BODY_RESOLVE)] class T<[ResolvedTo(BODY_RESOLVE)] Outer(T) : R|test/Some|> : R|kotlin/Any| {
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=T] test/My<T>.constructor(): R|test/My.T<T>| {
                super<R|kotlin/Any|>()
            }

        }

        public abstract [ResolvedTo(BODY_RESOLVE)] val x: R|T|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=My] get(): R|T|

        public abstract [ResolvedTo(BODY_RESOLVE)] fun foo([ResolvedTo(BODY_RESOLVE)] arg: R|T|): R|kotlin/Unit|

        public abstract [ResolvedTo(BODY_RESOLVE)] val y: <ERROR TYPE REF: Wrong number of type arguments>
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=My] get(): <ERROR TYPE REF: Wrong number of type arguments>

        public abstract [ResolvedTo(BODY_RESOLVE)] val z: <ERROR TYPE REF: Wrong number of type arguments>
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=My] get(): <ERROR TYPE REF: Wrong number of type arguments>

        public final [ResolvedTo(ANNOTATION_ARGUMENTS)] class Some : R|test/My.T<T>| {
            public [ResolvedTo(ANNOTATION_ARGUMENTS)] [ContainingClassKey=Some] constructor(): R|test/My.Some| {
                LAZY_super<R|test/My.T<T>|>
            }

        }

    }
