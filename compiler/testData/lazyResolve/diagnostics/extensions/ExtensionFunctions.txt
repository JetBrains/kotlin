namespace <root>

// <namespace name="outer">
namespace outer

internal final class outer.A : jet.Any {
    public final /*constructor*/ fun <init>(): outer.A
}
internal final val jet.Int.abs: jet.Int
internal final val  </*0*/ T : jet.Any?> T.foo: T
internal final val jet.Int?.optval: jet.Tuple0
internal final fun </*0*/ T : jet.Any?, /*1*/ E : jet.Any?>T.foo(/*0*/ x: E, /*1*/ y: outer.A): T
internal final fun jet.Int.foo(): jet.Int
internal final fun </*0*/ T : jet.Any?>T.minus(/*0*/ t: T): jet.Int
internal final fun jet.Int?.optint(): jet.Tuple0
internal final fun outer.A.plus(/*0*/ a: jet.Any): jet.Tuple0
internal final fun outer.A.plus(/*0*/ a: jet.Int): jet.Tuple0
internal final fun test(): jet.Tuple0
// </namespace name="outer">
// <namespace name="null_safety">
namespace null_safety

internal final class null_safety.Command : jet.Any {
    public final /*constructor*/ fun <init>(): null_safety.Command
    internal final val foo: jet.Int
}
internal final fun jet.Any.equals(/*0*/ other: jet.Any?): jet.Boolean
internal final fun jet.Any?.equals1(/*0*/ other: jet.Any?): jet.Boolean
internal final fun jet.Any.equals2(/*0*/ other: jet.Any?): jet.Boolean
internal final fun main(/*0*/ args: jet.Array<jet.String>): jet.Tuple0
internal final fun parse(/*0*/ cmd: jet.String): null_safety.Command?
// </namespace name="null_safety">
