class LateinitPropertiesTest {
  private var a$volatile: Int
    private get(): Int {
      return <this>.#a$volatile
    }
    private set(value: Int) {
      return <this>.#a$volatile = value
    }

  private var head$volatile: Any?
    private get(): Any? {
      return <this>.#head$volatile
    }
    private set(value: Any?) {
      return <this>.#head$volatile = value
    }

  private var dataRef$volatile: Any?
    private get(): Any? {
      return <this>.#dataRef$volatile
    }
    private set(value: Any?) {
      return <this>.#dataRef$volatile = value
    }

  private val lateIntArr: AtomicIntArray
    private get(): AtomicIntArray {
      return <this>.#lateIntArr
    }

  private val lateRefArr: AtomicArray<T>
    private get(): AtomicArray<T> {
      return <this>.#lateRefArr
    }

  init {
    <this>.#a$volatile = 0
    <this>.#head$volatile = "AAA"
    <this>.#lateIntArr = AtomicIntArray(size = 55)
    val data: Data = Data(n = 77)
    <this>.#dataRef$volatile = data
    val size: Int = 10
    <this>.#lateRefArr = AtomicArray<Any?>(array = arrayOfNulls<Any?>(size = size))
  }

  private class Data {
    val n: Int
      field = n
      get

    constructor(n: Int) /* primary */ {
      super/*Any*/()
      /* <init>() */

    }

  }

  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  fun test() {
    assertEquals<Int>(expected = 0, actual = atomicGetField<Int>(/* <this> = LateinitPropertiesTest<this>::a$volatile */) as Int)
    assertTrue(actual = compareAndSetField<Any?>(/* <this> = LateinitPropertiesTest<this>::head$volatile, */ expectedValue = "AAA", newValue = "BBB"))
    assertEquals<String>(expected = "BBB", actual = atomicGetField<Any?>(/* <this> = LateinitPropertiesTest<this>::head$volatile */) as Any?)
    assertEquals<Int>(expected = 0, actual = <this>.<get-lateIntArr>().get(index = 35) as Int)
    assertEquals<Int>(expected = 77, actual = atomicGetField<Any?>(/* <this> = LateinitPropertiesTest<this>::dataRef$volatile */) as Any?.<get-n>())
    assertEquals<String?>(expected = null, actual = <this>.<get-lateRefArr>().get(index = 5) as Any?)
  }

}

fun box(): String {
  val testClass: LateinitPropertiesTest = LateinitPropertiesTest()
  testClass.test()
  return "OK"
}
