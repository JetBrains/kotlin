KtApplicableCallCandidateInfo:
  candidate = KtSimpleFunctionCall:
    isImplicitInvoke = false
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = null
      extensionReceiver = KtExplicitReceiverValue:
        expression = nums.withIndex()
        isSafeNavigation = false
        type = kotlin.collections.Iterable<kotlin.collections.IndexedValue<kotlin.Int>>
      signature = KtFunctionLikeSignature:
        receiverType = kotlin.collections.Iterable<kotlin.collections.IndexedValue<kotlin.Int>>
        returnType = kotlin.collections.Map<kotlin.Int, kotlin.collections.List<kotlin.Int>>
        symbol = kotlin/collections/groupBy(<extension receiver>: kotlin.collections.Iterable<T>, keySelector: kotlin.Function1<T, K>, valueTransform: kotlin.Function1<T, V>): kotlin.collections.Map<K, kotlin.collections.List<V>>
        valueParameters = [
          KtVariableLikeSignature:
            name = keySelector
            receiverType = null
            returnType = kotlin.Function1<kotlin.collections.IndexedValue<kotlin.Int>, kotlin.Int>
            symbol = keySelector: kotlin.Function1<T, K>
            callableIdIfNonLocal = null,
          KtVariableLikeSignature:
            name = valueTransform
            receiverType = null
            returnType = kotlin.Function1<kotlin.collections.IndexedValue<kotlin.Int>, kotlin.Int>
            symbol = valueTransform: kotlin.Function1<T, V>
            callableIdIfNonLocal = null
        ]
        callableIdIfNonLocal = kotlin/collections/groupBy
    typeArgumentsMapping = {
      T -> (kotlin.collections.IndexedValue<kotlin.Int>),
      K -> (kotlin.Int),
      V -> (kotlin.Int)
    }
    argumentMapping = {
      { (_, value) -> value } -> (KtVariableLikeSignature:
        name = keySelector
        receiverType = null
        returnType = kotlin.Function1<kotlin.collections.IndexedValue<kotlin.Int>, kotlin.Int>
        symbol = keySelector: kotlin.Function1<T, K>
        callableIdIfNonLocal = null),
      { (idx, _) -> idx } -> (KtVariableLikeSignature:
        name = valueTransform
        receiverType = null
        returnType = kotlin.Function1<kotlin.collections.IndexedValue<kotlin.Int>, kotlin.Int>
        symbol = valueTransform: kotlin.Function1<T, V>
        callableIdIfNonLocal = null)
    }
  isInBestCandidates = true

KtInapplicableCallCandidateInfo:
  diagnostic = ERROR<TOO_MANY_ARGUMENTS: Too many arguments for 'public final inline fun <T, K> kotlin/collections/Iterable<T>.kotlin/collections/groupBy(keySelector: (T) -> K): kotlin/collections/Map<K, kotlin/collections/List<T>>'.>
  candidate = KtSimpleFunctionCall:
    isImplicitInvoke = false
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = null
      extensionReceiver = KtExplicitReceiverValue:
        expression = nums.withIndex()
        isSafeNavigation = false
        type = kotlin.collections.Iterable<kotlin.collections.IndexedValue<kotlin.Int>>
      signature = KtFunctionLikeSignature:
        receiverType = kotlin.collections.Iterable<kotlin.collections.IndexedValue<kotlin.Int>>
        returnType = kotlin.collections.Map<kotlin.Int, kotlin.collections.List<kotlin.collections.IndexedValue<kotlin.Int>>>
        symbol = kotlin/collections/groupBy(<extension receiver>: kotlin.collections.Iterable<T>, keySelector: kotlin.Function1<T, K>): kotlin.collections.Map<K, kotlin.collections.List<T>>
        valueParameters = [
          KtVariableLikeSignature:
            name = keySelector
            receiverType = null
            returnType = kotlin.Function1<kotlin.collections.IndexedValue<kotlin.Int>, kotlin.Int>
            symbol = keySelector: kotlin.Function1<T, K>
            callableIdIfNonLocal = null
        ]
        callableIdIfNonLocal = kotlin/collections/groupBy
    typeArgumentsMapping = {
      T -> (kotlin.collections.IndexedValue<kotlin.Int>),
      K -> (kotlin.Int)
    }
    argumentMapping = {
      { (_, value) -> value } -> (KtVariableLikeSignature:
        name = keySelector
        receiverType = null
        returnType = kotlin.Function1<kotlin.collections.IndexedValue<kotlin.Int>, kotlin.Int>
        symbol = keySelector: kotlin.Function1<T, K>
        callableIdIfNonLocal = null)
    }
  isInBestCandidates = false

KtInapplicableCallCandidateInfo:
  diagnostic = ERROR<INAPPLICABLE_CANDIDATE: Inapplicable candidate(s): fun <K> List<Pair<Int, Int>>.groupBy(keySelector: (Pair<Int, Int>) -> K, valueTransform: (Pair<Int, Int>) -> Int): Map<K, List<Int>>>
  candidate = KtSimpleFunctionCall:
    isImplicitInvoke = false
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = null
      extensionReceiver = KtExplicitReceiverValue:
        expression = nums.withIndex()
        isSafeNavigation = false
        type = kotlin.collections.Iterable<kotlin.collections.IndexedValue<kotlin.Int>>
      signature = KtFunctionLikeSignature:
        receiverType = kotlin.collections.List<kotlin.Pair<kotlin.Int, kotlin.Int>>
        returnType = kotlin.collections.Map<kotlin.collections.IndexedValue<kotlin.Int>, kotlin.collections.List<kotlin.Int>>
        symbol = /groupBy(<extension receiver>: kotlin.collections.List<kotlin.Pair<kotlin.Int, kotlin.Int>>, keySelector: kotlin.Function1<kotlin.Pair<kotlin.Int, kotlin.Int>, K>, valueTransform: kotlin.Function1<kotlin.Pair<kotlin.Int, kotlin.Int>, kotlin.Int>): kotlin.collections.Map<K, kotlin.collections.List<kotlin.Int>>
        valueParameters = [
          KtVariableLikeSignature:
            name = keySelector
            receiverType = null
            returnType = kotlin.Function1<kotlin.Pair<kotlin.Int, kotlin.Int>, kotlin.collections.IndexedValue<kotlin.Int>>
            symbol = keySelector: kotlin.Function1<kotlin.Pair<kotlin.Int, kotlin.Int>, K>
            callableIdIfNonLocal = null,
          KtVariableLikeSignature:
            name = valueTransform
            receiverType = null
            returnType = kotlin.Function1<kotlin.Pair<kotlin.Int, kotlin.Int>, kotlin.Int>
            symbol = valueTransform: kotlin.Function1<kotlin.Pair<kotlin.Int, kotlin.Int>, kotlin.Int>
            callableIdIfNonLocal = null
        ]
        callableIdIfNonLocal = /groupBy
    typeArgumentsMapping = {
      K -> (kotlin.collections.IndexedValue<kotlin.Int>)
    }
    argumentMapping = {
      { (_, value) -> value } -> (KtVariableLikeSignature:
        name = keySelector
        receiverType = null
        returnType = kotlin.Function1<kotlin.Pair<kotlin.Int, kotlin.Int>, kotlin.collections.IndexedValue<kotlin.Int>>
        symbol = keySelector: kotlin.Function1<kotlin.Pair<kotlin.Int, kotlin.Int>, K>
        callableIdIfNonLocal = null),
      { (idx, _) -> idx } -> (KtVariableLikeSignature:
        name = valueTransform
        receiverType = null
        returnType = kotlin.Function1<kotlin.Pair<kotlin.Int, kotlin.Int>, kotlin.Int>
        symbol = valueTransform: kotlin.Function1<kotlin.Pair<kotlin.Int, kotlin.Int>, kotlin.Int>
        callableIdIfNonLocal = null)
    }
  isInBestCandidates = false