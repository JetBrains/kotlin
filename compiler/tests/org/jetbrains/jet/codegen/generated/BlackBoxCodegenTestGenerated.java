/*
 * Copyright 2010-2013 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.jet.codegen.generated;

import junit.framework.Assert;
import junit.framework.Test;
import junit.framework.TestSuite;

import java.io.File;
import java.util.regex.Pattern;
import org.jetbrains.jet.JetTestUtils;
import org.jetbrains.jet.test.InnerTestClasses;
import org.jetbrains.jet.test.TestMetadata;

import org.jetbrains.jet.codegen.generated.AbstractBlackBoxCodegenTest;

/** This class is generated by {@link org.jetbrains.jet.generators.tests.GenerateTests}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("compiler/testData/codegen/box")
@InnerTestClasses({BlackBoxCodegenTestGenerated.Arrays.class, BlackBoxCodegenTestGenerated.Bridges.class, BlackBoxCodegenTestGenerated.Casts.class, BlackBoxCodegenTestGenerated.Classes.class, BlackBoxCodegenTestGenerated.Closures.class, BlackBoxCodegenTestGenerated.ControlStructures.class, BlackBoxCodegenTestGenerated.DefaultArguments.class, BlackBoxCodegenTestGenerated.Elvis.class, BlackBoxCodegenTestGenerated.Enum.class, BlackBoxCodegenTestGenerated.ExclExcl.class, BlackBoxCodegenTestGenerated.ExtensionFunctions.class, BlackBoxCodegenTestGenerated.ExtensionProperties.class, BlackBoxCodegenTestGenerated.Functions.class, BlackBoxCodegenTestGenerated.InnerNested.class, BlackBoxCodegenTestGenerated.Instructions.class, BlackBoxCodegenTestGenerated.Intrinsics.class, BlackBoxCodegenTestGenerated.Labels.class, BlackBoxCodegenTestGenerated.LocalClasses.class, BlackBoxCodegenTestGenerated.MultiDecl.class, BlackBoxCodegenTestGenerated.Namespace.class, BlackBoxCodegenTestGenerated.Objects.class, BlackBoxCodegenTestGenerated.OperatorConventions.class, BlackBoxCodegenTestGenerated.PrimitiveTypes.class, BlackBoxCodegenTestGenerated.Properties.class, BlackBoxCodegenTestGenerated.SafeCall.class, BlackBoxCodegenTestGenerated.Sam.class, BlackBoxCodegenTestGenerated.Strings.class, BlackBoxCodegenTestGenerated.Super.class, BlackBoxCodegenTestGenerated.Traits.class, BlackBoxCodegenTestGenerated.TypeInfo.class, BlackBoxCodegenTestGenerated.Unit.class, BlackBoxCodegenTestGenerated.Vararg.class, BlackBoxCodegenTestGenerated.When.class})
public class BlackBoxCodegenTestGenerated extends AbstractBlackBoxCodegenTest {
    public void testAllFilesPresentInBox() throws Exception {
        JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/codegen/box"), Pattern.compile("^(.+)\\.kt$"), true);
    }
    
    @TestMetadata("compiler/testData/codegen/box/arrays")
    public static class Arrays extends AbstractBlackBoxCodegenTest {
        public void testAllFilesPresentInArrays() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/codegen/box/arrays"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("arrayGetAssignMultiIndex.kt")
        public void testArrayGetAssignMultiIndex() throws Exception {
            doTest("compiler/testData/codegen/box/arrays/arrayGetAssignMultiIndex.kt");
        }
        
        @TestMetadata("arrayGetMultiIndex.kt")
        public void testArrayGetMultiIndex() throws Exception {
            doTest("compiler/testData/codegen/box/arrays/arrayGetMultiIndex.kt");
        }
        
        @TestMetadata("arrayPlusAssign.kt")
        public void testArrayPlusAssign() throws Exception {
            doTest("compiler/testData/codegen/box/arrays/arrayPlusAssign.kt");
        }
        
        @TestMetadata("collectionAssignGetMultiIndex.kt")
        public void testCollectionAssignGetMultiIndex() throws Exception {
            doTest("compiler/testData/codegen/box/arrays/collectionAssignGetMultiIndex.kt");
        }
        
        @TestMetadata("collectionGetMultiIndex.kt")
        public void testCollectionGetMultiIndex() throws Exception {
            doTest("compiler/testData/codegen/box/arrays/collectionGetMultiIndex.kt");
        }
        
        @TestMetadata("forEachBooleanArray.kt")
        public void testForEachBooleanArray() throws Exception {
            doTest("compiler/testData/codegen/box/arrays/forEachBooleanArray.kt");
        }
        
        @TestMetadata("forEachByteArray.kt")
        public void testForEachByteArray() throws Exception {
            doTest("compiler/testData/codegen/box/arrays/forEachByteArray.kt");
        }
        
        @TestMetadata("forEachCharArray.kt")
        public void testForEachCharArray() throws Exception {
            doTest("compiler/testData/codegen/box/arrays/forEachCharArray.kt");
        }
        
        @TestMetadata("forEachDoubleArray.kt")
        public void testForEachDoubleArray() throws Exception {
            doTest("compiler/testData/codegen/box/arrays/forEachDoubleArray.kt");
        }
        
        @TestMetadata("forEachFloatArray.kt")
        public void testForEachFloatArray() throws Exception {
            doTest("compiler/testData/codegen/box/arrays/forEachFloatArray.kt");
        }
        
        @TestMetadata("forEachIntArray.kt")
        public void testForEachIntArray() throws Exception {
            doTest("compiler/testData/codegen/box/arrays/forEachIntArray.kt");
        }
        
        @TestMetadata("forEachLongArray.kt")
        public void testForEachLongArray() throws Exception {
            doTest("compiler/testData/codegen/box/arrays/forEachLongArray.kt");
        }
        
        @TestMetadata("forEachShortArray.kt")
        public void testForEachShortArray() throws Exception {
            doTest("compiler/testData/codegen/box/arrays/forEachShortArray.kt");
        }
        
        @TestMetadata("hashMap.kt")
        public void testHashMap() throws Exception {
            doTest("compiler/testData/codegen/box/arrays/hashMap.kt");
        }
        
        @TestMetadata("indices.kt")
        public void testIndices() throws Exception {
            doTest("compiler/testData/codegen/box/arrays/indices.kt");
        }
        
        @TestMetadata("indicesChar.kt")
        public void testIndicesChar() throws Exception {
            doTest("compiler/testData/codegen/box/arrays/indicesChar.kt");
        }
        
        @TestMetadata("iterator.kt")
        public void testIterator() throws Exception {
            doTest("compiler/testData/codegen/box/arrays/iterator.kt");
        }
        
        @TestMetadata("iteratorBooleanArray.kt")
        public void testIteratorBooleanArray() throws Exception {
            doTest("compiler/testData/codegen/box/arrays/iteratorBooleanArray.kt");
        }
        
        @TestMetadata("iteratorByteArray.kt")
        public void testIteratorByteArray() throws Exception {
            doTest("compiler/testData/codegen/box/arrays/iteratorByteArray.kt");
        }
        
        @TestMetadata("iteratorByteArrayNextByte.kt")
        public void testIteratorByteArrayNextByte() throws Exception {
            doTest("compiler/testData/codegen/box/arrays/iteratorByteArrayNextByte.kt");
        }
        
        @TestMetadata("iteratorCharArray.kt")
        public void testIteratorCharArray() throws Exception {
            doTest("compiler/testData/codegen/box/arrays/iteratorCharArray.kt");
        }
        
        @TestMetadata("iteratorDoubleArray.kt")
        public void testIteratorDoubleArray() throws Exception {
            doTest("compiler/testData/codegen/box/arrays/iteratorDoubleArray.kt");
        }
        
        @TestMetadata("iteratorFloatArray.kt")
        public void testIteratorFloatArray() throws Exception {
            doTest("compiler/testData/codegen/box/arrays/iteratorFloatArray.kt");
        }
        
        @TestMetadata("iteratorIntArray.kt")
        public void testIteratorIntArray() throws Exception {
            doTest("compiler/testData/codegen/box/arrays/iteratorIntArray.kt");
        }
        
        @TestMetadata("iteratorLongArray.kt")
        public void testIteratorLongArray() throws Exception {
            doTest("compiler/testData/codegen/box/arrays/iteratorLongArray.kt");
        }
        
        @TestMetadata("iteratorLongArrayNextLong.kt")
        public void testIteratorLongArrayNextLong() throws Exception {
            doTest("compiler/testData/codegen/box/arrays/iteratorLongArrayNextLong.kt");
        }
        
        @TestMetadata("iteratorShortArray.kt")
        public void testIteratorShortArray() throws Exception {
            doTest("compiler/testData/codegen/box/arrays/iteratorShortArray.kt");
        }
        
        @TestMetadata("kt238.kt")
        public void testKt238() throws Exception {
            doTest("compiler/testData/codegen/box/arrays/kt238.kt");
        }
        
        @TestMetadata("kt2997.kt")
        public void testKt2997() throws Exception {
            doTest("compiler/testData/codegen/box/arrays/kt2997.kt");
        }
        
        @TestMetadata("kt33.kt")
        public void testKt33() throws Exception {
            doTest("compiler/testData/codegen/box/arrays/kt33.kt");
        }
        
        @TestMetadata("kt503.kt")
        public void testKt503() throws Exception {
            doTest("compiler/testData/codegen/box/arrays/kt503.kt");
        }
        
        @TestMetadata("kt594.kt")
        public void testKt594() throws Exception {
            doTest("compiler/testData/codegen/box/arrays/kt594.kt");
        }
        
        @TestMetadata("kt602.kt")
        public void testKt602() throws Exception {
            doTest("compiler/testData/codegen/box/arrays/kt602.kt");
        }
        
        @TestMetadata("kt779.kt")
        public void testKt779() throws Exception {
            doTest("compiler/testData/codegen/box/arrays/kt779.kt");
        }
        
        @TestMetadata("kt950.kt")
        public void testKt950() throws Exception {
            doTest("compiler/testData/codegen/box/arrays/kt950.kt");
        }
        
        @TestMetadata("longAsIndex.kt")
        public void testLongAsIndex() throws Exception {
            doTest("compiler/testData/codegen/box/arrays/longAsIndex.kt");
        }
        
        @TestMetadata("nonNullArray.kt")
        public void testNonNullArray() throws Exception {
            doTest("compiler/testData/codegen/box/arrays/nonNullArray.kt");
        }
        
    }
    
    @TestMetadata("compiler/testData/codegen/box/bridges")
    public static class Bridges extends AbstractBlackBoxCodegenTest {
        public void testAllFilesPresentInBridges() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/codegen/box/bridges"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("delegation.kt")
        public void testDelegation() throws Exception {
            doTest("compiler/testData/codegen/box/bridges/delegation.kt");
        }
        
        @TestMetadata("delegationProperty.kt")
        public void testDelegationProperty() throws Exception {
            doTest("compiler/testData/codegen/box/bridges/delegationProperty.kt");
        }
        
        @TestMetadata("delegationToTraitImpl.kt")
        public void testDelegationToTraitImpl() throws Exception {
            doTest("compiler/testData/codegen/box/bridges/delegationToTraitImpl.kt");
        }
        
        @TestMetadata("diamond.kt")
        public void testDiamond() throws Exception {
            doTest("compiler/testData/codegen/box/bridges/diamond.kt");
        }
        
        @TestMetadata("kt1939.kt")
        public void testKt1939() throws Exception {
            doTest("compiler/testData/codegen/box/bridges/kt1939.kt");
        }
        
        @TestMetadata("kt1959.kt")
        public void testKt1959() throws Exception {
            doTest("compiler/testData/codegen/box/bridges/kt1959.kt");
        }
        
        @TestMetadata("kt2498.kt")
        public void testKt2498() throws Exception {
            doTest("compiler/testData/codegen/box/bridges/kt2498.kt");
        }
        
        @TestMetadata("kt2702.kt")
        public void testKt2702() throws Exception {
            doTest("compiler/testData/codegen/box/bridges/kt2702.kt");
        }
        
        @TestMetadata("kt2833.kt")
        public void testKt2833() throws Exception {
            doTest("compiler/testData/codegen/box/bridges/kt2833.kt");
        }
        
        @TestMetadata("kt2920.kt")
        public void testKt2920() throws Exception {
            doTest("compiler/testData/codegen/box/bridges/kt2920.kt");
        }
        
        @TestMetadata("longChainOneBridge.kt")
        public void testLongChainOneBridge() throws Exception {
            doTest("compiler/testData/codegen/box/bridges/longChainOneBridge.kt");
        }
        
        @TestMetadata("manyTypeArgumentsSubstitutedSuccessively.kt")
        public void testManyTypeArgumentsSubstitutedSuccessively() throws Exception {
            doTest("compiler/testData/codegen/box/bridges/manyTypeArgumentsSubstitutedSuccessively.kt");
        }
        
        @TestMetadata("methodFromTrait.kt")
        public void testMethodFromTrait() throws Exception {
            doTest("compiler/testData/codegen/box/bridges/methodFromTrait.kt");
        }
        
        @TestMetadata("overrideAbstractProperty.kt")
        public void testOverrideAbstractProperty() throws Exception {
            doTest("compiler/testData/codegen/box/bridges/overrideAbstractProperty.kt");
        }
        
        @TestMetadata("overrideReturnType.kt")
        public void testOverrideReturnType() throws Exception {
            doTest("compiler/testData/codegen/box/bridges/overrideReturnType.kt");
        }
        
        @TestMetadata("propertyAccessorsWithoutBody.kt")
        public void testPropertyAccessorsWithoutBody() throws Exception {
            doTest("compiler/testData/codegen/box/bridges/propertyAccessorsWithoutBody.kt");
        }
        
        @TestMetadata("propertyDiamond.kt")
        public void testPropertyDiamond() throws Exception {
            doTest("compiler/testData/codegen/box/bridges/propertyDiamond.kt");
        }
        
        @TestMetadata("propertyInConstructor.kt")
        public void testPropertyInConstructor() throws Exception {
            doTest("compiler/testData/codegen/box/bridges/propertyInConstructor.kt");
        }
        
        @TestMetadata("propertySetter.kt")
        public void testPropertySetter() throws Exception {
            doTest("compiler/testData/codegen/box/bridges/propertySetter.kt");
        }
        
        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            doTest("compiler/testData/codegen/box/bridges/simple.kt");
        }
        
        @TestMetadata("simpleEnum.kt")
        public void testSimpleEnum() throws Exception {
            doTest("compiler/testData/codegen/box/bridges/simpleEnum.kt");
        }
        
        @TestMetadata("simpleGenericMethod.kt")
        public void testSimpleGenericMethod() throws Exception {
            doTest("compiler/testData/codegen/box/bridges/simpleGenericMethod.kt");
        }
        
        @TestMetadata("simpleObject.kt")
        public void testSimpleObject() throws Exception {
            doTest("compiler/testData/codegen/box/bridges/simpleObject.kt");
        }
        
        @TestMetadata("simpleReturnType.kt")
        public void testSimpleReturnType() throws Exception {
            doTest("compiler/testData/codegen/box/bridges/simpleReturnType.kt");
        }
        
        @TestMetadata("simpleUpperBound.kt")
        public void testSimpleUpperBound() throws Exception {
            doTest("compiler/testData/codegen/box/bridges/simpleUpperBound.kt");
        }
        
        @TestMetadata("substitutionInSuperClass.kt")
        public void testSubstitutionInSuperClass() throws Exception {
            doTest("compiler/testData/codegen/box/bridges/substitutionInSuperClass.kt");
        }
        
        @TestMetadata("substitutionInSuperClassAbstractFun.kt")
        public void testSubstitutionInSuperClassAbstractFun() throws Exception {
            doTest("compiler/testData/codegen/box/bridges/substitutionInSuperClassAbstractFun.kt");
        }
        
        @TestMetadata("substitutionInSuperClassBoundedTypeArguments.kt")
        public void testSubstitutionInSuperClassBoundedTypeArguments() throws Exception {
            doTest("compiler/testData/codegen/box/bridges/substitutionInSuperClassBoundedTypeArguments.kt");
        }
        
        @TestMetadata("substitutionInSuperClassDelegation.kt")
        public void testSubstitutionInSuperClassDelegation() throws Exception {
            doTest("compiler/testData/codegen/box/bridges/substitutionInSuperClassDelegation.kt");
        }
        
        @TestMetadata("substitutionInSuperClassEnum.kt")
        public void testSubstitutionInSuperClassEnum() throws Exception {
            doTest("compiler/testData/codegen/box/bridges/substitutionInSuperClassEnum.kt");
        }
        
        @TestMetadata("substitutionInSuperClassGenericMethod.kt")
        public void testSubstitutionInSuperClassGenericMethod() throws Exception {
            doTest("compiler/testData/codegen/box/bridges/substitutionInSuperClassGenericMethod.kt");
        }
        
        @TestMetadata("substitutionInSuperClassObject.kt")
        public void testSubstitutionInSuperClassObject() throws Exception {
            doTest("compiler/testData/codegen/box/bridges/substitutionInSuperClassObject.kt");
        }
        
        @TestMetadata("substitutionInSuperClassProperty.kt")
        public void testSubstitutionInSuperClassProperty() throws Exception {
            doTest("compiler/testData/codegen/box/bridges/substitutionInSuperClassProperty.kt");
        }
        
        @TestMetadata("substitutionInSuperClassUpperBound.kt")
        public void testSubstitutionInSuperClassUpperBound() throws Exception {
            doTest("compiler/testData/codegen/box/bridges/substitutionInSuperClassUpperBound.kt");
        }
        
        @TestMetadata("twoParentsWithDifferentMethodsTwoBridges.kt")
        public void testTwoParentsWithDifferentMethodsTwoBridges() throws Exception {
            doTest("compiler/testData/codegen/box/bridges/twoParentsWithDifferentMethodsTwoBridges.kt");
        }
        
        @TestMetadata("twoParentsWithTheSameMethodOneBridge.kt")
        public void testTwoParentsWithTheSameMethodOneBridge() throws Exception {
            doTest("compiler/testData/codegen/box/bridges/twoParentsWithTheSameMethodOneBridge.kt");
        }
        
    }
    
    @TestMetadata("compiler/testData/codegen/box/casts")
    public static class Casts extends AbstractBlackBoxCodegenTest {
        public void testAllFilesPresentInCasts() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/codegen/box/casts"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("as.kt")
        public void testAs() throws Exception {
            doTest("compiler/testData/codegen/box/casts/as.kt");
        }
        
        @TestMetadata("asSafe.kt")
        public void testAsSafe() throws Exception {
            doTest("compiler/testData/codegen/box/casts/asSafe.kt");
        }
        
        @TestMetadata("castGenericNull.kt")
        public void testCastGenericNull() throws Exception {
            doTest("compiler/testData/codegen/box/casts/castGenericNull.kt");
        }
        
        @TestMetadata("is.kt")
        public void testIs() throws Exception {
            doTest("compiler/testData/codegen/box/casts/is.kt");
        }
        
        @TestMetadata("notIs.kt")
        public void testNotIs() throws Exception {
            doTest("compiler/testData/codegen/box/casts/notIs.kt");
        }
        
    }
    
    @TestMetadata("compiler/testData/codegen/box/classes")
    public static class Classes extends AbstractBlackBoxCodegenTest {
        public void testAllFilesPresentInClasses() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/codegen/box/classes"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("classObject.kt")
        public void testClassObject() throws Exception {
            doTest("compiler/testData/codegen/box/classes/classObject.kt");
        }
        
        @TestMetadata("classObjectAsStaticInitializer.kt")
        public void testClassObjectAsStaticInitializer() throws Exception {
            doTest("compiler/testData/codegen/box/classes/classObjectAsStaticInitializer.kt");
        }
        
        @TestMetadata("classObjectField.kt")
        public void testClassObjectField() throws Exception {
            doTest("compiler/testData/codegen/box/classes/classObjectField.kt");
        }
        
        @TestMetadata("classObjectInTrait.kt")
        public void testClassObjectInTrait() throws Exception {
            doTest("compiler/testData/codegen/box/classes/classObjectInTrait.kt");
        }
        
        @TestMetadata("classObjectNotOfEnum.kt")
        public void testClassObjectNotOfEnum() throws Exception {
            doTest("compiler/testData/codegen/box/classes/classObjectNotOfEnum.kt");
        }
        
        @TestMetadata("delegation2.kt")
        public void testDelegation2() throws Exception {
            doTest("compiler/testData/codegen/box/classes/delegation2.kt");
        }
        
        @TestMetadata("delegation3.kt")
        public void testDelegation3() throws Exception {
            doTest("compiler/testData/codegen/box/classes/delegation3.kt");
        }
        
        @TestMetadata("delegation4.kt")
        public void testDelegation4() throws Exception {
            doTest("compiler/testData/codegen/box/classes/delegation4.kt");
        }
        
        @TestMetadata("delegationGenericArg.kt")
        public void testDelegationGenericArg() throws Exception {
            doTest("compiler/testData/codegen/box/classes/delegationGenericArg.kt");
        }
        
        @TestMetadata("delegationGenericArgUpperBound.kt")
        public void testDelegationGenericArgUpperBound() throws Exception {
            doTest("compiler/testData/codegen/box/classes/delegationGenericArgUpperBound.kt");
        }
        
        @TestMetadata("delegationGenericLongArg.kt")
        public void testDelegationGenericLongArg() throws Exception {
            doTest("compiler/testData/codegen/box/classes/delegationGenericLongArg.kt");
        }
        
        @TestMetadata("delegationJava.kt")
        public void testDelegationJava() throws Exception {
            doTest("compiler/testData/codegen/box/classes/delegationJava.kt");
        }
        
        @TestMetadata("delegationMethodsWithArgs.kt")
        public void testDelegationMethodsWithArgs() throws Exception {
            doTest("compiler/testData/codegen/box/classes/delegationMethodsWithArgs.kt");
        }
        
        @TestMetadata("diamondInheritance.kt")
        public void testDiamondInheritance() throws Exception {
            doTest("compiler/testData/codegen/box/classes/diamondInheritance.kt");
        }
        
        @TestMetadata("exceptionConstructor.kt")
        public void testExceptionConstructor() throws Exception {
            doTest("compiler/testData/codegen/box/classes/exceptionConstructor.kt");
        }
        
        @TestMetadata("funDelegation.kt")
        public void testFunDelegation() throws Exception {
            doTest("compiler/testData/codegen/box/classes/funDelegation.kt");
        }
        
        @TestMetadata("inheritance.kt")
        public void testInheritance() throws Exception {
            doTest("compiler/testData/codegen/box/classes/inheritance.kt");
        }
        
        @TestMetadata("inheritedInnerClass.kt")
        public void testInheritedInnerClass() throws Exception {
            doTest("compiler/testData/codegen/box/classes/inheritedInnerClass.kt");
        }
        
        @TestMetadata("inheritedMethod.kt")
        public void testInheritedMethod() throws Exception {
            doTest("compiler/testData/codegen/box/classes/inheritedMethod.kt");
        }
        
        @TestMetadata("initializerBlock.kt")
        public void testInitializerBlock() throws Exception {
            doTest("compiler/testData/codegen/box/classes/initializerBlock.kt");
        }
        
        @TestMetadata("initializerBlockDImpl.kt")
        public void testInitializerBlockDImpl() throws Exception {
            doTest("compiler/testData/codegen/box/classes/initializerBlockDImpl.kt");
        }
        
        @TestMetadata("innerClass.kt")
        public void testInnerClass() throws Exception {
            doTest("compiler/testData/codegen/box/classes/innerClass.kt");
        }
        
        @TestMetadata("kt1018.kt")
        public void testKt1018() throws Exception {
            doTest("compiler/testData/codegen/box/classes/kt1018.kt");
        }
        
        @TestMetadata("kt1120.kt")
        public void testKt1120() throws Exception {
            doTest("compiler/testData/codegen/box/classes/kt1120.kt");
        }
        
        @TestMetadata("kt1134.kt")
        public void testKt1134() throws Exception {
            doTest("compiler/testData/codegen/box/classes/kt1134.kt");
        }
        
        @TestMetadata("kt1157.kt")
        public void testKt1157() throws Exception {
            doTest("compiler/testData/codegen/box/classes/kt1157.kt");
        }
        
        @TestMetadata("kt1247.kt")
        public void testKt1247() throws Exception {
            doTest("compiler/testData/codegen/box/classes/kt1247.kt");
        }
        
        @TestMetadata("kt1345.kt")
        public void testKt1345() throws Exception {
            doTest("compiler/testData/codegen/box/classes/kt1345.kt");
        }
        
        @TestMetadata("kt1439.kt")
        public void testKt1439() throws Exception {
            doTest("compiler/testData/codegen/box/classes/kt1439.kt");
        }
        
        @TestMetadata("kt1535.kt")
        public void testKt1535() throws Exception {
            doTest("compiler/testData/codegen/box/classes/kt1535.kt");
        }
        
        @TestMetadata("kt1538.kt")
        public void testKt1538() throws Exception {
            doTest("compiler/testData/codegen/box/classes/kt1538.kt");
        }
        
        @TestMetadata("kt1578.kt")
        public void testKt1578() throws Exception {
            doTest("compiler/testData/codegen/box/classes/kt1578.kt");
        }
        
        @TestMetadata("kt1611.kt")
        public void testKt1611() throws Exception {
            doTest("compiler/testData/codegen/box/classes/kt1611.kt");
        }
        
        @TestMetadata("kt1721.kt")
        public void testKt1721() throws Exception {
            doTest("compiler/testData/codegen/box/classes/kt1721.kt");
        }
        
        @TestMetadata("kt1726.kt")
        public void testKt1726() throws Exception {
            doTest("compiler/testData/codegen/box/classes/kt1726.kt");
        }
        
        @TestMetadata("kt1759.kt")
        public void testKt1759() throws Exception {
            doTest("compiler/testData/codegen/box/classes/kt1759.kt");
        }
        
        @TestMetadata("kt1891.kt")
        public void testKt1891() throws Exception {
            doTest("compiler/testData/codegen/box/classes/kt1891.kt");
        }
        
        @TestMetadata("kt1918.kt")
        public void testKt1918() throws Exception {
            doTest("compiler/testData/codegen/box/classes/kt1918.kt");
        }
        
        @TestMetadata("kt1976.kt")
        public void testKt1976() throws Exception {
            doTest("compiler/testData/codegen/box/classes/kt1976.kt");
        }
        
        @TestMetadata("kt1980.kt")
        public void testKt1980() throws Exception {
            doTest("compiler/testData/codegen/box/classes/kt1980.kt");
        }
        
        @TestMetadata("kt2224.kt")
        public void testKt2224() throws Exception {
            doTest("compiler/testData/codegen/box/classes/kt2224.kt");
        }
        
        @TestMetadata("kt2288.kt")
        public void testKt2288() throws Exception {
            doTest("compiler/testData/codegen/box/classes/kt2288.kt");
        }
        
        @TestMetadata("kt2384.kt")
        public void testKt2384() throws Exception {
            doTest("compiler/testData/codegen/box/classes/kt2384.kt");
        }
        
        @TestMetadata("kt2390.kt")
        public void testKt2390() throws Exception {
            doTest("compiler/testData/codegen/box/classes/kt2390.kt");
        }
        
        @TestMetadata("kt2391.kt")
        public void testKt2391() throws Exception {
            doTest("compiler/testData/codegen/box/classes/kt2391.kt");
        }
        
        @TestMetadata("kt2395.kt")
        public void testKt2395() throws Exception {
            doTest("compiler/testData/codegen/box/classes/kt2395.kt");
        }
        
        @TestMetadata("kt2417.kt")
        public void testKt2417() throws Exception {
            doTest("compiler/testData/codegen/box/classes/kt2417.kt");
        }
        
        @TestMetadata("kt2477.kt")
        public void testKt2477() throws Exception {
            doTest("compiler/testData/codegen/box/classes/kt2477.kt");
        }
        
        @TestMetadata("kt2480.kt")
        public void testKt2480() throws Exception {
            doTest("compiler/testData/codegen/box/classes/kt2480.kt");
        }
        
        @TestMetadata("kt2482.kt")
        public void testKt2482() throws Exception {
            doTest("compiler/testData/codegen/box/classes/kt2482.kt");
        }
        
        @TestMetadata("kt2485.kt")
        public void testKt2485() throws Exception {
            doTest("compiler/testData/codegen/box/classes/kt2485.kt");
        }
        
        @TestMetadata("kt249.kt")
        public void testKt249() throws Exception {
            doTest("compiler/testData/codegen/box/classes/kt249.kt");
        }
        
        @TestMetadata("kt2532.kt")
        public void testKt2532() throws Exception {
            doTest("compiler/testData/codegen/box/classes/kt2532.kt");
        }
        
        @TestMetadata("kt2566.kt")
        public void testKt2566() throws Exception {
            doTest("compiler/testData/codegen/box/classes/kt2566.kt");
        }
        
        @TestMetadata("kt2566_2.kt")
        public void testKt2566_2() throws Exception {
            doTest("compiler/testData/codegen/box/classes/kt2566_2.kt");
        }
        
        @TestMetadata("kt2607.kt")
        public void testKt2607() throws Exception {
            doTest("compiler/testData/codegen/box/classes/kt2607.kt");
        }
        
        @TestMetadata("kt2626.kt")
        public void testKt2626() throws Exception {
            doTest("compiler/testData/codegen/box/classes/kt2626.kt");
        }
        
        @TestMetadata("kt2711.kt")
        public void testKt2711() throws Exception {
            doTest("compiler/testData/codegen/box/classes/kt2711.kt");
        }
        
        @TestMetadata("kt285.kt")
        public void testKt285() throws Exception {
            doTest("compiler/testData/codegen/box/classes/kt285.kt");
        }
        
        @TestMetadata("kt3114.kt")
        public void testKt3114() throws Exception {
            doTest("compiler/testData/codegen/box/classes/kt3114.kt");
        }
        
        @TestMetadata("kt343.kt")
        public void testKt343() throws Exception {
            doTest("compiler/testData/codegen/box/classes/kt343.kt");
        }
        
        @TestMetadata("kt454.kt")
        public void testKt454() throws Exception {
            doTest("compiler/testData/codegen/box/classes/kt454.kt");
        }
        
        @TestMetadata("kt471.kt")
        public void testKt471() throws Exception {
            doTest("compiler/testData/codegen/box/classes/kt471.kt");
        }
        
        @TestMetadata("kt48.kt")
        public void testKt48() throws Exception {
            doTest("compiler/testData/codegen/box/classes/kt48.kt");
        }
        
        @TestMetadata("kt496.kt")
        public void testKt496() throws Exception {
            doTest("compiler/testData/codegen/box/classes/kt496.kt");
        }
        
        @TestMetadata("kt500.kt")
        public void testKt500() throws Exception {
            doTest("compiler/testData/codegen/box/classes/kt500.kt");
        }
        
        @TestMetadata("kt501.kt")
        public void testKt501() throws Exception {
            doTest("compiler/testData/codegen/box/classes/kt501.kt");
        }
        
        @TestMetadata("kt504.kt")
        public void testKt504() throws Exception {
            doTest("compiler/testData/codegen/box/classes/kt504.kt");
        }
        
        @TestMetadata("kt508.kt")
        public void testKt508() throws Exception {
            doTest("compiler/testData/codegen/box/classes/kt508.kt");
        }
        
        @TestMetadata("kt633.kt")
        public void testKt633() throws Exception {
            doTest("compiler/testData/codegen/box/classes/kt633.kt");
        }
        
        @TestMetadata("kt707.kt")
        public void testKt707() throws Exception {
            doTest("compiler/testData/codegen/box/classes/kt707.kt");
        }
        
        @TestMetadata("kt723.kt")
        public void testKt723() throws Exception {
            doTest("compiler/testData/codegen/box/classes/kt723.kt");
        }
        
        @TestMetadata("kt725.kt")
        public void testKt725() throws Exception {
            doTest("compiler/testData/codegen/box/classes/kt725.kt");
        }
        
        @TestMetadata("kt903.kt")
        public void testKt903() throws Exception {
            doTest("compiler/testData/codegen/box/classes/kt903.kt");
        }
        
        @TestMetadata("kt940.kt")
        public void testKt940() throws Exception {
            doTest("compiler/testData/codegen/box/classes/kt940.kt");
        }
        
        @TestMetadata("outerThis.kt")
        public void testOuterThis() throws Exception {
            doTest("compiler/testData/codegen/box/classes/outerThis.kt");
        }
        
        @TestMetadata("overloadBinaryOperator.kt")
        public void testOverloadBinaryOperator() throws Exception {
            doTest("compiler/testData/codegen/box/classes/overloadBinaryOperator.kt");
        }
        
        @TestMetadata("overloadPlusAssign.kt")
        public void testOverloadPlusAssign() throws Exception {
            doTest("compiler/testData/codegen/box/classes/overloadPlusAssign.kt");
        }
        
        @TestMetadata("overloadPlusAssignReturn.kt")
        public void testOverloadPlusAssignReturn() throws Exception {
            doTest("compiler/testData/codegen/box/classes/overloadPlusAssignReturn.kt");
        }
        
        @TestMetadata("overloadPlusToPlusAssign.kt")
        public void testOverloadPlusToPlusAssign() throws Exception {
            doTest("compiler/testData/codegen/box/classes/overloadPlusToPlusAssign.kt");
        }
        
        @TestMetadata("overloadUnaryOperator.kt")
        public void testOverloadUnaryOperator() throws Exception {
            doTest("compiler/testData/codegen/box/classes/overloadUnaryOperator.kt");
        }
        
        @TestMetadata("privateOuterFunctions.kt")
        public void testPrivateOuterFunctions() throws Exception {
            doTest("compiler/testData/codegen/box/classes/privateOuterFunctions.kt");
        }
        
        @TestMetadata("privateOuterProperty.kt")
        public void testPrivateOuterProperty() throws Exception {
            doTest("compiler/testData/codegen/box/classes/privateOuterProperty.kt");
        }
        
        @TestMetadata("propertyDelegation.kt")
        public void testPropertyDelegation() throws Exception {
            doTest("compiler/testData/codegen/box/classes/propertyDelegation.kt");
        }
        
        @TestMetadata("propertyInInitializer.kt")
        public void testPropertyInInitializer() throws Exception {
            doTest("compiler/testData/codegen/box/classes/propertyInInitializer.kt");
        }
        
        @TestMetadata("resolveOrder.kt")
        public void testResolveOrder() throws Exception {
            doTest("compiler/testData/codegen/box/classes/resolveOrder.kt");
        }
        
        @TestMetadata("rightHandOverride.kt")
        public void testRightHandOverride() throws Exception {
            doTest("compiler/testData/codegen/box/classes/rightHandOverride.kt");
        }
        
        @TestMetadata("selfcreate.kt")
        public void testSelfcreate() throws Exception {
            doTest("compiler/testData/codegen/box/classes/selfcreate.kt");
        }
        
        @TestMetadata("simpleBox.kt")
        public void testSimpleBox() throws Exception {
            doTest("compiler/testData/codegen/box/classes/simpleBox.kt");
        }
        
        @TestMetadata("typedDelegation.kt")
        public void testTypedDelegation() throws Exception {
            doTest("compiler/testData/codegen/box/classes/typedDelegation.kt");
        }
        
    }
    
    @TestMetadata("compiler/testData/codegen/box/closures")
    @InnerTestClasses({Closures.ClosureInsideClosure.class})
    public static class Closures extends AbstractBlackBoxCodegenTest {
        public void testAllFilesPresentInClosures() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/codegen/box/closures"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("closureInsideConstrucor.kt")
        public void testClosureInsideConstrucor() throws Exception {
            doTest("compiler/testData/codegen/box/closures/closureInsideConstrucor.kt");
        }
        
        @TestMetadata("closureWithParameter.kt")
        public void testClosureWithParameter() throws Exception {
            doTest("compiler/testData/codegen/box/closures/closureWithParameter.kt");
        }
        
        @TestMetadata("closureWithParameterAndBoxing.kt")
        public void testClosureWithParameterAndBoxing() throws Exception {
            doTest("compiler/testData/codegen/box/closures/closureWithParameterAndBoxing.kt");
        }
        
        @TestMetadata("doubleEnclosedLocalVariable.kt")
        public void testDoubleEnclosedLocalVariable() throws Exception {
            doTest("compiler/testData/codegen/box/closures/doubleEnclosedLocalVariable.kt");
        }
        
        @TestMetadata("enclosingLocalVariable.kt")
        public void testEnclosingLocalVariable() throws Exception {
            doTest("compiler/testData/codegen/box/closures/enclosingLocalVariable.kt");
        }
        
        @TestMetadata("enclosingThis.kt")
        public void testEnclosingThis() throws Exception {
            doTest("compiler/testData/codegen/box/closures/enclosingThis.kt");
        }
        
        @TestMetadata("extensionClosure.kt")
        public void testExtensionClosure() throws Exception {
            doTest("compiler/testData/codegen/box/closures/extensionClosure.kt");
        }
        
        @TestMetadata("kt2151.kt")
        public void testKt2151() throws Exception {
            doTest("compiler/testData/codegen/box/closures/kt2151.kt");
        }
        
        @TestMetadata("localFunctionInFunction.kt")
        public void testLocalFunctionInFunction() throws Exception {
            doTest("compiler/testData/codegen/box/closures/localFunctionInFunction.kt");
        }
        
        @TestMetadata("localFunctionInInitializer.kt")
        public void testLocalFunctionInInitializer() throws Exception {
            doTest("compiler/testData/codegen/box/closures/localFunctionInInitializer.kt");
        }
        
        @TestMetadata("recursiveClosure.kt")
        public void testRecursiveClosure() throws Exception {
            doTest("compiler/testData/codegen/box/closures/recursiveClosure.kt");
        }
        
        @TestMetadata("simplestClosure.kt")
        public void testSimplestClosure() throws Exception {
            doTest("compiler/testData/codegen/box/closures/simplestClosure.kt");
        }
        
        @TestMetadata("simplestClosureAndBoxing.kt")
        public void testSimplestClosureAndBoxing() throws Exception {
            doTest("compiler/testData/codegen/box/closures/simplestClosureAndBoxing.kt");
        }
        
        @TestMetadata("compiler/testData/codegen/box/closures/closureInsideClosure")
        public static class ClosureInsideClosure extends AbstractBlackBoxCodegenTest {
            public void testAllFilesPresentInClosureInsideClosure() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/codegen/box/closures/closureInsideClosure"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("localFunInsideLocalFun.kt")
            public void testLocalFunInsideLocalFun() throws Exception {
                doTest("compiler/testData/codegen/box/closures/closureInsideClosure/localFunInsideLocalFun.kt");
            }
            
            @TestMetadata("localFunInsideLocalFunDifferentSignatures.kt")
            public void testLocalFunInsideLocalFunDifferentSignatures() throws Exception {
                doTest("compiler/testData/codegen/box/closures/closureInsideClosure/localFunInsideLocalFunDifferentSignatures.kt");
            }
            
            @TestMetadata("threeLevels.kt")
            public void testThreeLevels() throws Exception {
                doTest("compiler/testData/codegen/box/closures/closureInsideClosure/threeLevels.kt");
            }
            
            @TestMetadata("threeLevelsDifferentSignatures.kt")
            public void testThreeLevelsDifferentSignatures() throws Exception {
                doTest("compiler/testData/codegen/box/closures/closureInsideClosure/threeLevelsDifferentSignatures.kt");
            }
            
            @TestMetadata("varAsFunInsideLocalFun.kt")
            public void testVarAsFunInsideLocalFun() throws Exception {
                doTest("compiler/testData/codegen/box/closures/closureInsideClosure/varAsFunInsideLocalFun.kt");
            }
            
        }
        
        public static Test innerSuite() {
            TestSuite suite = new TestSuite("Closures");
            suite.addTestSuite(Closures.class);
            suite.addTestSuite(ClosureInsideClosure.class);
            return suite;
        }
    }
    
    @TestMetadata("compiler/testData/codegen/box/controlStructures")
    public static class ControlStructures extends AbstractBlackBoxCodegenTest {
        public void testAllFilesPresentInControlStructures() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/codegen/box/controlStructures"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("compareBoxedIntegerToZero.kt")
        public void testCompareBoxedIntegerToZero() throws Exception {
            doTest("compiler/testData/codegen/box/controlStructures/compareBoxedIntegerToZero.kt");
        }
        
        @TestMetadata("conditionOfEmptyIf.kt")
        public void testConditionOfEmptyIf() throws Exception {
            doTest("compiler/testData/codegen/box/controlStructures/conditionOfEmptyIf.kt");
        }
        
        @TestMetadata("continueInFor.kt")
        public void testContinueInFor() throws Exception {
            doTest("compiler/testData/codegen/box/controlStructures/continueInFor.kt");
        }
        
        @TestMetadata("continueToLabelInFor.kt")
        public void testContinueToLabelInFor() throws Exception {
            doTest("compiler/testData/codegen/box/controlStructures/continueToLabelInFor.kt");
        }
        
        @TestMetadata("doWhile.kt")
        public void testDoWhile() throws Exception {
            doTest("compiler/testData/codegen/box/controlStructures/doWhile.kt");
        }
        
        @TestMetadata("doWhileFib.kt")
        public void testDoWhileFib() throws Exception {
            doTest("compiler/testData/codegen/box/controlStructures/doWhileFib.kt");
        }
        
        @TestMetadata("finallyOnEmptyReturn.kt")
        public void testFinallyOnEmptyReturn() throws Exception {
            doTest("compiler/testData/codegen/box/controlStructures/finallyOnEmptyReturn.kt");
        }
        
        @TestMetadata("forInSmartCastedToArray.kt")
        public void testForInSmartCastedToArray() throws Exception {
            doTest("compiler/testData/codegen/box/controlStructures/forInSmartCastedToArray.kt");
        }
        
        @TestMetadata("forIntArray.kt")
        public void testForIntArray() throws Exception {
            doTest("compiler/testData/codegen/box/controlStructures/forIntArray.kt");
        }
        
        @TestMetadata("forIntRange.kt")
        public void testForIntRange() throws Exception {
            doTest("compiler/testData/codegen/box/controlStructures/forIntRange.kt");
        }
        
        @TestMetadata("forLoopMemberExtensionAll.kt")
        public void testForLoopMemberExtensionAll() throws Exception {
            doTest("compiler/testData/codegen/box/controlStructures/forLoopMemberExtensionAll.kt");
        }
        
        @TestMetadata("forLoopMemberExtensionHasNext.kt")
        public void testForLoopMemberExtensionHasNext() throws Exception {
            doTest("compiler/testData/codegen/box/controlStructures/forLoopMemberExtensionHasNext.kt");
        }
        
        @TestMetadata("forLoopMemberExtensionNext.kt")
        public void testForLoopMemberExtensionNext() throws Exception {
            doTest("compiler/testData/codegen/box/controlStructures/forLoopMemberExtensionNext.kt");
        }
        
        @TestMetadata("forNullableIntArray.kt")
        public void testForNullableIntArray() throws Exception {
            doTest("compiler/testData/codegen/box/controlStructures/forNullableIntArray.kt");
        }
        
        @TestMetadata("forPrimitiveIntArray.kt")
        public void testForPrimitiveIntArray() throws Exception {
            doTest("compiler/testData/codegen/box/controlStructures/forPrimitiveIntArray.kt");
        }
        
        @TestMetadata("forUserType.kt")
        public void testForUserType() throws Exception {
            doTest("compiler/testData/codegen/box/controlStructures/forUserType.kt");
        }
        
        @TestMetadata("inRangeConditionsInWhen.kt")
        public void testInRangeConditionsInWhen() throws Exception {
            doTest("compiler/testData/codegen/box/controlStructures/inRangeConditionsInWhen.kt");
        }
        
        @TestMetadata("kt1441.kt")
        public void testKt1441() throws Exception {
            doTest("compiler/testData/codegen/box/controlStructures/kt1441.kt");
        }
        
        @TestMetadata("kt1688.kt")
        public void testKt1688() throws Exception {
            doTest("compiler/testData/codegen/box/controlStructures/kt1688.kt");
        }
        
        @TestMetadata("kt1742.kt")
        public void testKt1742() throws Exception {
            doTest("compiler/testData/codegen/box/controlStructures/kt1742.kt");
        }
        
        @TestMetadata("kt1899.kt")
        public void testKt1899() throws Exception {
            doTest("compiler/testData/codegen/box/controlStructures/kt1899.kt");
        }
        
        @TestMetadata("kt2062.kt")
        public void testKt2062() throws Exception {
            doTest("compiler/testData/codegen/box/controlStructures/kt2062.kt");
        }
        
        @TestMetadata("kt2147.kt")
        public void testKt2147() throws Exception {
            doTest("compiler/testData/codegen/box/controlStructures/kt2147.kt");
        }
        
        @TestMetadata("kt2259.kt")
        public void testKt2259() throws Exception {
            doTest("compiler/testData/codegen/box/controlStructures/kt2259.kt");
        }
        
        @TestMetadata("kt2291.kt")
        public void testKt2291() throws Exception {
            doTest("compiler/testData/codegen/box/controlStructures/kt2291.kt");
        }
        
        @TestMetadata("kt237.kt")
        public void testKt237() throws Exception {
            doTest("compiler/testData/codegen/box/controlStructures/kt237.kt");
        }
        
        @TestMetadata("kt2416.kt")
        public void testKt2416() throws Exception {
            doTest("compiler/testData/codegen/box/controlStructures/kt2416.kt");
        }
        
        @TestMetadata("kt2577.kt")
        public void testKt2577() throws Exception {
            doTest("compiler/testData/codegen/box/controlStructures/kt2577.kt");
        }
        
        @TestMetadata("kt2597.kt")
        public void testKt2597() throws Exception {
            doTest("compiler/testData/codegen/box/controlStructures/kt2597.kt");
        }
        
        @TestMetadata("kt2598.kt")
        public void testKt2598() throws Exception {
            doTest("compiler/testData/codegen/box/controlStructures/kt2598.kt");
        }
        
        @TestMetadata("kt299.kt")
        public void testKt299() throws Exception {
            doTest("compiler/testData/codegen/box/controlStructures/kt299.kt");
        }
        
        @TestMetadata("kt3087.kt")
        public void testKt3087() throws Exception {
            doTest("compiler/testData/codegen/box/controlStructures/kt3087.kt");
        }
        
        @TestMetadata("kt3203_1.kt")
        public void testKt3203_1() throws Exception {
            doTest("compiler/testData/codegen/box/controlStructures/kt3203_1.kt");
        }
        
        @TestMetadata("kt3203_2.kt")
        public void testKt3203_2() throws Exception {
            doTest("compiler/testData/codegen/box/controlStructures/kt3203_2.kt");
        }
        
        @TestMetadata("kt3273.kt")
        public void testKt3273() throws Exception {
            doTest("compiler/testData/codegen/box/controlStructures/kt3273.kt");
        }
        
        @TestMetadata("kt3280.kt")
        public void testKt3280() throws Exception {
            doTest("compiler/testData/codegen/box/controlStructures/kt3280.kt");
        }
        
        @TestMetadata("kt416.kt")
        public void testKt416() throws Exception {
            doTest("compiler/testData/codegen/box/controlStructures/kt416.kt");
        }
        
        @TestMetadata("kt513.kt")
        public void testKt513() throws Exception {
            doTest("compiler/testData/codegen/box/controlStructures/kt513.kt");
        }
        
        @TestMetadata("kt628.kt")
        public void testKt628() throws Exception {
            doTest("compiler/testData/codegen/box/controlStructures/kt628.kt");
        }
        
        @TestMetadata("kt769.kt")
        public void testKt769() throws Exception {
            doTest("compiler/testData/codegen/box/controlStructures/kt769.kt");
        }
        
        @TestMetadata("kt772.kt")
        public void testKt772() throws Exception {
            doTest("compiler/testData/codegen/box/controlStructures/kt772.kt");
        }
        
        @TestMetadata("kt773.kt")
        public void testKt773() throws Exception {
            doTest("compiler/testData/codegen/box/controlStructures/kt773.kt");
        }
        
        @TestMetadata("kt870.kt")
        public void testKt870() throws Exception {
            doTest("compiler/testData/codegen/box/controlStructures/kt870.kt");
        }
        
        @TestMetadata("kt910.kt")
        public void testKt910() throws Exception {
            doTest("compiler/testData/codegen/box/controlStructures/kt910.kt");
        }
        
        @TestMetadata("kt958.kt")
        public void testKt958() throws Exception {
            doTest("compiler/testData/codegen/box/controlStructures/kt958.kt");
        }
        
        @TestMetadata("kt998.kt")
        public void testKt998() throws Exception {
            doTest("compiler/testData/codegen/box/controlStructures/kt998.kt");
        }
        
        @TestMetadata("longRange.kt")
        public void testLongRange() throws Exception {
            doTest("compiler/testData/codegen/box/controlStructures/longRange.kt");
        }
        
        @TestMetadata("quicksort.kt")
        public void testQuicksort() throws Exception {
            doTest("compiler/testData/codegen/box/controlStructures/quicksort.kt");
        }
        
        @TestMetadata("tryCatchFinallyChain.kt")
        public void testTryCatchFinallyChain() throws Exception {
            doTest("compiler/testData/codegen/box/controlStructures/tryCatchFinallyChain.kt");
        }
        
    }
    
    @TestMetadata("compiler/testData/codegen/box/defaultArguments")
    @InnerTestClasses({DefaultArguments.Constructor.class, DefaultArguments.Function.class})
    public static class DefaultArguments extends AbstractBlackBoxCodegenTest {
        public void testAllFilesPresentInDefaultArguments() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/codegen/box/defaultArguments"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("compiler/testData/codegen/box/defaultArguments/constructor")
        public static class Constructor extends AbstractBlackBoxCodegenTest {
            public void testAllFilesPresentInConstructor() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/codegen/box/defaultArguments/constructor"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("annotation.kt")
            public void testAnnotation() throws Exception {
                doTest("compiler/testData/codegen/box/defaultArguments/constructor/annotation.kt");
            }
            
            @TestMetadata("defArgs1.kt")
            public void testDefArgs1() throws Exception {
                doTest("compiler/testData/codegen/box/defaultArguments/constructor/defArgs1.kt");
            }
            
            @TestMetadata("defArgs1InnerClass.kt")
            public void testDefArgs1InnerClass() throws Exception {
                doTest("compiler/testData/codegen/box/defaultArguments/constructor/defArgs1InnerClass.kt");
            }
            
            @TestMetadata("defArgs2.kt")
            public void testDefArgs2() throws Exception {
                doTest("compiler/testData/codegen/box/defaultArguments/constructor/defArgs2.kt");
            }
            
            @TestMetadata("doubleDefArgs1InnerClass.kt")
            public void testDoubleDefArgs1InnerClass() throws Exception {
                doTest("compiler/testData/codegen/box/defaultArguments/constructor/doubleDefArgs1InnerClass.kt");
            }
            
            @TestMetadata("enum.kt")
            public void testEnum() throws Exception {
                doTest("compiler/testData/codegen/box/defaultArguments/constructor/enum.kt");
            }
            
            @TestMetadata("enumWithOneDefArg.kt")
            public void testEnumWithOneDefArg() throws Exception {
                doTest("compiler/testData/codegen/box/defaultArguments/constructor/enumWithOneDefArg.kt");
            }
            
            @TestMetadata("enumWithTwoDefArgs.kt")
            public void testEnumWithTwoDefArgs() throws Exception {
                doTest("compiler/testData/codegen/box/defaultArguments/constructor/enumWithTwoDefArgs.kt");
            }
            
            @TestMetadata("enumWithTwoDoubleDefArgs.kt")
            public void testEnumWithTwoDoubleDefArgs() throws Exception {
                doTest("compiler/testData/codegen/box/defaultArguments/constructor/enumWithTwoDoubleDefArgs.kt");
            }
            
            @TestMetadata("kt2852.kt")
            public void testKt2852() throws Exception {
                doTest("compiler/testData/codegen/box/defaultArguments/constructor/kt2852.kt");
            }
            
        }
        
        @TestMetadata("compiler/testData/codegen/box/defaultArguments/function")
        public static class Function extends AbstractBlackBoxCodegenTest {
            public void testAllFilesPresentInFunction() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/codegen/box/defaultArguments/function"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("extentionFunction.kt")
            public void testExtentionFunction() throws Exception {
                doTest("compiler/testData/codegen/box/defaultArguments/function/extentionFunction.kt");
            }
            
            @TestMetadata("extentionFunctionDouble.kt")
            public void testExtentionFunctionDouble() throws Exception {
                doTest("compiler/testData/codegen/box/defaultArguments/function/extentionFunctionDouble.kt");
            }
            
            @TestMetadata("extentionFunctionDoubleTwoArgs.kt")
            public void testExtentionFunctionDoubleTwoArgs() throws Exception {
                doTest("compiler/testData/codegen/box/defaultArguments/function/extentionFunctionDoubleTwoArgs.kt");
            }
            
            @TestMetadata("extentionFunctionInClassObject.kt")
            public void testExtentionFunctionInClassObject() throws Exception {
                doTest("compiler/testData/codegen/box/defaultArguments/function/extentionFunctionInClassObject.kt");
            }
            
            @TestMetadata("extentionFunctionInObject.kt")
            public void testExtentionFunctionInObject() throws Exception {
                doTest("compiler/testData/codegen/box/defaultArguments/function/extentionFunctionInObject.kt");
            }
            
            @TestMetadata("extentionFunctionWithOneDefArg.kt")
            public void testExtentionFunctionWithOneDefArg() throws Exception {
                doTest("compiler/testData/codegen/box/defaultArguments/function/extentionFunctionWithOneDefArg.kt");
            }
            
            @TestMetadata("funInTrait.kt")
            public void testFunInTrait() throws Exception {
                doTest("compiler/testData/codegen/box/defaultArguments/function/funInTrait.kt");
            }
            
            @TestMetadata("innerExtentionFunction.kt")
            public void testInnerExtentionFunction() throws Exception {
                doTest("compiler/testData/codegen/box/defaultArguments/function/innerExtentionFunction.kt");
            }
            
            @TestMetadata("innerExtentionFunctionDouble.kt")
            public void testInnerExtentionFunctionDouble() throws Exception {
                doTest("compiler/testData/codegen/box/defaultArguments/function/innerExtentionFunctionDouble.kt");
            }
            
            @TestMetadata("innerExtentionFunctionDoubleTwoArgs.kt")
            public void testInnerExtentionFunctionDoubleTwoArgs() throws Exception {
                doTest("compiler/testData/codegen/box/defaultArguments/function/innerExtentionFunctionDoubleTwoArgs.kt");
            }
            
            @TestMetadata("mixingNamedAndPositioned.kt")
            public void testMixingNamedAndPositioned() throws Exception {
                doTest("compiler/testData/codegen/box/defaultArguments/function/mixingNamedAndPositioned.kt");
            }
            
        }
        
        public static Test innerSuite() {
            TestSuite suite = new TestSuite("DefaultArguments");
            suite.addTestSuite(DefaultArguments.class);
            suite.addTestSuite(Constructor.class);
            suite.addTestSuite(Function.class);
            return suite;
        }
    }
    
    @TestMetadata("compiler/testData/codegen/box/elvis")
    public static class Elvis extends AbstractBlackBoxCodegenTest {
        public void testAllFilesPresentInElvis() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/codegen/box/elvis"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("genericNull.kt")
        public void testGenericNull() throws Exception {
            doTest("compiler/testData/codegen/box/elvis/genericNull.kt");
        }
        
        @TestMetadata("primitive.kt")
        public void testPrimitive() throws Exception {
            doTest("compiler/testData/codegen/box/elvis/primitive.kt");
        }
        
    }
    
    @TestMetadata("compiler/testData/codegen/box/enum")
    public static class Enum extends AbstractBlackBoxCodegenTest {
        @TestMetadata("abstractMethodInEnum.kt")
        public void testAbstractMethodInEnum() throws Exception {
            doTest("compiler/testData/codegen/box/enum/abstractMethodInEnum.kt");
        }
        
        @TestMetadata("abstractmethod.kt")
        public void testAbstractmethod() throws Exception {
            doTest("compiler/testData/codegen/box/enum/abstractmethod.kt");
        }
        
        public void testAllFilesPresentInEnum() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/codegen/box/enum"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("asReturnExpression.kt")
        public void testAsReturnExpression() throws Exception {
            doTest("compiler/testData/codegen/box/enum/asReturnExpression.kt");
        }
        
        @TestMetadata("entrywithinner.kt")
        public void testEntrywithinner() throws Exception {
            doTest("compiler/testData/codegen/box/enum/entrywithinner.kt");
        }
        
        @TestMetadata("inFunction.kt")
        public void testInFunction() throws Exception {
            doTest("compiler/testData/codegen/box/enum/inFunction.kt");
        }
        
        @TestMetadata("inPackage.kt")
        public void testInPackage() throws Exception {
            doTest("compiler/testData/codegen/box/enum/inPackage.kt");
        }
        
        @TestMetadata("inclassobj.kt")
        public void testInclassobj() throws Exception {
            doTest("compiler/testData/codegen/box/enum/inclassobj.kt");
        }
        
        @TestMetadata("inner.kt")
        public void testInner() throws Exception {
            doTest("compiler/testData/codegen/box/enum/inner.kt");
        }
        
        @TestMetadata("innerWithExistingClassObject.kt")
        public void testInnerWithExistingClassObject() throws Exception {
            doTest("compiler/testData/codegen/box/enum/innerWithExistingClassObject.kt");
        }
        
        @TestMetadata("kt1119.kt")
        public void testKt1119() throws Exception {
            doTest("compiler/testData/codegen/box/enum/kt1119.kt");
        }
        
        @TestMetadata("kt2350.kt")
        public void testKt2350() throws Exception {
            doTest("compiler/testData/codegen/box/enum/kt2350.kt");
        }
        
        @TestMetadata("kt2673.kt")
        public void testKt2673() throws Exception {
            doTest("compiler/testData/codegen/box/enum/kt2673.kt");
        }
        
        @TestMetadata("name.kt")
        public void testName() throws Exception {
            doTest("compiler/testData/codegen/box/enum/name.kt");
        }
        
        @TestMetadata("ordinal.kt")
        public void testOrdinal() throws Exception {
            doTest("compiler/testData/codegen/box/enum/ordinal.kt");
        }
        
        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            doTest("compiler/testData/codegen/box/enum/simple.kt");
        }
        
        @TestMetadata("toString.kt")
        public void testToString() throws Exception {
            doTest("compiler/testData/codegen/box/enum/toString.kt");
        }
        
        @TestMetadata("valueof.kt")
        public void testValueof() throws Exception {
            doTest("compiler/testData/codegen/box/enum/valueof.kt");
        }
        
    }
    
    @TestMetadata("compiler/testData/codegen/box/exclExcl")
    public static class ExclExcl extends AbstractBlackBoxCodegenTest {
        public void testAllFilesPresentInExclExcl() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/codegen/box/exclExcl"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("genericNull.kt")
        public void testGenericNull() throws Exception {
            doTest("compiler/testData/codegen/box/exclExcl/genericNull.kt");
        }
        
        @TestMetadata("primitive.kt")
        public void testPrimitive() throws Exception {
            doTest("compiler/testData/codegen/box/exclExcl/primitive.kt");
        }
        
    }
    
    @TestMetadata("compiler/testData/codegen/box/extensionFunctions")
    public static class ExtensionFunctions extends AbstractBlackBoxCodegenTest {
        public void testAllFilesPresentInExtensionFunctions() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/codegen/box/extensionFunctions"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("kt1061.kt")
        public void testKt1061() throws Exception {
            doTest("compiler/testData/codegen/box/extensionFunctions/kt1061.kt");
        }
        
        @TestMetadata("kt1249.kt")
        public void testKt1249() throws Exception {
            doTest("compiler/testData/codegen/box/extensionFunctions/kt1249.kt");
        }
        
        @TestMetadata("kt1290.kt")
        public void testKt1290() throws Exception {
            doTest("compiler/testData/codegen/box/extensionFunctions/kt1290.kt");
        }
        
        @TestMetadata("kt1953.kt")
        public void testKt1953() throws Exception {
            doTest("compiler/testData/codegen/box/extensionFunctions/kt1953.kt");
        }
        
        @TestMetadata("kt1953_class.kt")
        public void testKt1953_class() throws Exception {
            doTest("compiler/testData/codegen/box/extensionFunctions/kt1953_class.kt");
        }
        
        @TestMetadata("kt475.kt")
        public void testKt475() throws Exception {
            doTest("compiler/testData/codegen/box/extensionFunctions/kt475.kt");
        }
        
        @TestMetadata("kt606.kt")
        public void testKt606() throws Exception {
            doTest("compiler/testData/codegen/box/extensionFunctions/kt606.kt");
        }
        
        @TestMetadata("kt865.kt")
        public void testKt865() throws Exception {
            doTest("compiler/testData/codegen/box/extensionFunctions/kt865.kt");
        }
        
        @TestMetadata("nested2.kt")
        public void testNested2() throws Exception {
            doTest("compiler/testData/codegen/box/extensionFunctions/nested2.kt");
        }
        
        @TestMetadata("shared.kt")
        public void testShared() throws Exception {
            doTest("compiler/testData/codegen/box/extensionFunctions/shared.kt");
        }
        
        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            doTest("compiler/testData/codegen/box/extensionFunctions/simple.kt");
        }
        
        @TestMetadata("thisMethodInObjectLiteral.kt")
        public void testThisMethodInObjectLiteral() throws Exception {
            doTest("compiler/testData/codegen/box/extensionFunctions/thisMethodInObjectLiteral.kt");
        }
        
        @TestMetadata("virtual.kt")
        public void testVirtual() throws Exception {
            doTest("compiler/testData/codegen/box/extensionFunctions/virtual.kt");
        }
        
        @TestMetadata("whenFail.kt")
        public void testWhenFail() throws Exception {
            doTest("compiler/testData/codegen/box/extensionFunctions/whenFail.kt");
        }
        
    }
    
    @TestMetadata("compiler/testData/codegen/box/extensionProperties")
    public static class ExtensionProperties extends AbstractBlackBoxCodegenTest {
        public void testAllFilesPresentInExtensionProperties() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/codegen/box/extensionProperties"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("inClass.kt")
        public void testInClass() throws Exception {
            doTest("compiler/testData/codegen/box/extensionProperties/inClass.kt");
        }
        
        @TestMetadata("inClassLongTypeInReceiver.kt")
        public void testInClassLongTypeInReceiver() throws Exception {
            doTest("compiler/testData/codegen/box/extensionProperties/inClassLongTypeInReceiver.kt");
        }
        
        @TestMetadata("inClassWithEmptySetter.kt")
        public void testInClassWithEmptySetter() throws Exception {
            doTest("compiler/testData/codegen/box/extensionProperties/inClassWithEmptySetter.kt");
        }
        
        @TestMetadata("inClassWithGetter.kt")
        public void testInClassWithGetter() throws Exception {
            doTest("compiler/testData/codegen/box/extensionProperties/inClassWithGetter.kt");
        }
        
        @TestMetadata("inClassWithPrivateGetter.kt")
        public void testInClassWithPrivateGetter() throws Exception {
            doTest("compiler/testData/codegen/box/extensionProperties/inClassWithPrivateGetter.kt");
        }
        
        @TestMetadata("inClassWithPrivateSetter.kt")
        public void testInClassWithPrivateSetter() throws Exception {
            doTest("compiler/testData/codegen/box/extensionProperties/inClassWithPrivateSetter.kt");
        }
        
        @TestMetadata("inClassWithSetter.kt")
        public void testInClassWithSetter() throws Exception {
            doTest("compiler/testData/codegen/box/extensionProperties/inClassWithSetter.kt");
        }
        
        @TestMetadata("topLevel.kt")
        public void testTopLevel() throws Exception {
            doTest("compiler/testData/codegen/box/extensionProperties/topLevel.kt");
        }
        
        @TestMetadata("topLevelLongTypeInReceiver.kt")
        public void testTopLevelLongTypeInReceiver() throws Exception {
            doTest("compiler/testData/codegen/box/extensionProperties/topLevelLongTypeInReceiver.kt");
        }
        
        @TestMetadata("topLevelSetterLongTypeInReceiver.kt")
        public void testTopLevelSetterLongTypeInReceiver() throws Exception {
            doTest("compiler/testData/codegen/box/extensionProperties/topLevelSetterLongTypeInReceiver.kt");
        }
        
        @TestMetadata("topLevelWithGetter.kt")
        public void testTopLevelWithGetter() throws Exception {
            doTest("compiler/testData/codegen/box/extensionProperties/topLevelWithGetter.kt");
        }
        
        @TestMetadata("topLevelWithSetter.kt")
        public void testTopLevelWithSetter() throws Exception {
            doTest("compiler/testData/codegen/box/extensionProperties/topLevelWithSetter.kt");
        }
        
    }
    
    @TestMetadata("compiler/testData/codegen/box/functions")
    @InnerTestClasses({Functions.LocalFunctions.class})
    public static class Functions extends AbstractBlackBoxCodegenTest {
        public void testAllFilesPresentInFunctions() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/codegen/box/functions"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("defaultargs.kt")
        public void testDefaultargs() throws Exception {
            doTest("compiler/testData/codegen/box/functions/defaultargs.kt");
        }
        
        @TestMetadata("defaultargs1.kt")
        public void testDefaultargs1() throws Exception {
            doTest("compiler/testData/codegen/box/functions/defaultargs1.kt");
        }
        
        @TestMetadata("defaultargs2.kt")
        public void testDefaultargs2() throws Exception {
            doTest("compiler/testData/codegen/box/functions/defaultargs2.kt");
        }
        
        @TestMetadata("defaultargs3.kt")
        public void testDefaultargs3() throws Exception {
            doTest("compiler/testData/codegen/box/functions/defaultargs3.kt");
        }
        
        @TestMetadata("defaultargs4.kt")
        public void testDefaultargs4() throws Exception {
            doTest("compiler/testData/codegen/box/functions/defaultargs4.kt");
        }
        
        @TestMetadata("defaultargs5.kt")
        public void testDefaultargs5() throws Exception {
            doTest("compiler/testData/codegen/box/functions/defaultargs5.kt");
        }
        
        @TestMetadata("defaultargs6.kt")
        public void testDefaultargs6() throws Exception {
            doTest("compiler/testData/codegen/box/functions/defaultargs6.kt");
        }
        
        @TestMetadata("defaultargs7.kt")
        public void testDefaultargs7() throws Exception {
            doTest("compiler/testData/codegen/box/functions/defaultargs7.kt");
        }
        
        @TestMetadata("ea33909.kt")
        public void testEa33909() throws Exception {
            doTest("compiler/testData/codegen/box/functions/ea33909.kt");
        }
        
        @TestMetadata("fakeDescriptorWithSeveralOverridenOne.kt")
        public void testFakeDescriptorWithSeveralOverridenOne() throws Exception {
            doTest("compiler/testData/codegen/box/functions/fakeDescriptorWithSeveralOverridenOne.kt");
        }
        
        @TestMetadata("functionExpression.kt")
        public void testFunctionExpression() throws Exception {
            doTest("compiler/testData/codegen/box/functions/functionExpression.kt");
        }
        
        @TestMetadata("invoke.kt")
        public void testInvoke() throws Exception {
            doTest("compiler/testData/codegen/box/functions/invoke.kt");
        }
        
        @TestMetadata("kt1038.kt")
        public void testKt1038() throws Exception {
            doTest("compiler/testData/codegen/box/functions/kt1038.kt");
        }
        
        @TestMetadata("kt1199.kt")
        public void testKt1199() throws Exception {
            doTest("compiler/testData/codegen/box/functions/kt1199.kt");
        }
        
        @TestMetadata("kt1413.kt")
        public void testKt1413() throws Exception {
            doTest("compiler/testData/codegen/box/functions/kt1413.kt");
        }
        
        @TestMetadata("kt1649_1.kt")
        public void testKt1649_1() throws Exception {
            doTest("compiler/testData/codegen/box/functions/kt1649_1.kt");
        }
        
        @TestMetadata("kt1649_2.kt")
        public void testKt1649_2() throws Exception {
            doTest("compiler/testData/codegen/box/functions/kt1649_2.kt");
        }
        
        @TestMetadata("kt1739.kt")
        public void testKt1739() throws Exception {
            doTest("compiler/testData/codegen/box/functions/kt1739.kt");
        }
        
        @TestMetadata("kt2270.kt")
        public void testKt2270() throws Exception {
            doTest("compiler/testData/codegen/box/functions/kt2270.kt");
        }
        
        @TestMetadata("kt2271.kt")
        public void testKt2271() throws Exception {
            doTest("compiler/testData/codegen/box/functions/kt2271.kt");
        }
        
        @TestMetadata("kt2280.kt")
        public void testKt2280() throws Exception {
            doTest("compiler/testData/codegen/box/functions/kt2280.kt");
        }
        
        @TestMetadata("kt2481.kt")
        public void testKt2481() throws Exception {
            doTest("compiler/testData/codegen/box/functions/kt2481.kt");
        }
        
        @TestMetadata("kt2716.kt")
        public void testKt2716() throws Exception {
            doTest("compiler/testData/codegen/box/functions/kt2716.kt");
        }
        
        @TestMetadata("kt2739.kt")
        public void testKt2739() throws Exception {
            doTest("compiler/testData/codegen/box/functions/kt2739.kt");
        }
        
        @TestMetadata("kt2929.kt")
        public void testKt2929() throws Exception {
            doTest("compiler/testData/codegen/box/functions/kt2929.kt");
        }
        
        @TestMetadata("kt3313.kt")
        public void testKt3313() throws Exception {
            doTest("compiler/testData/codegen/box/functions/kt3313.kt");
        }
        
        @TestMetadata("kt395.kt")
        public void testKt395() throws Exception {
            doTest("compiler/testData/codegen/box/functions/kt395.kt");
        }
        
        @TestMetadata("kt785.kt")
        public void testKt785() throws Exception {
            doTest("compiler/testData/codegen/box/functions/kt785.kt");
        }
        
        @TestMetadata("kt873.kt")
        public void testKt873() throws Exception {
            doTest("compiler/testData/codegen/box/functions/kt873.kt");
        }
        
        @TestMetadata("localFunction.kt")
        public void testLocalFunction() throws Exception {
            doTest("compiler/testData/codegen/box/functions/localFunction.kt");
        }
        
        @TestMetadata("nothisnoclosure.kt")
        public void testNothisnoclosure() throws Exception {
            doTest("compiler/testData/codegen/box/functions/nothisnoclosure.kt");
        }
        
        @TestMetadata("compiler/testData/codegen/box/functions/localFunctions")
        public static class LocalFunctions extends AbstractBlackBoxCodegenTest {
            public void testAllFilesPresentInLocalFunctions() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/codegen/box/functions/localFunctions"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("localFunctionInConstructor.kt")
            public void testLocalFunctionInConstructor() throws Exception {
                doTest("compiler/testData/codegen/box/functions/localFunctions/localFunctionInConstructor.kt");
            }
            
        }
        
        public static Test innerSuite() {
            TestSuite suite = new TestSuite("Functions");
            suite.addTestSuite(Functions.class);
            suite.addTestSuite(LocalFunctions.class);
            return suite;
        }
    }
    
    @TestMetadata("compiler/testData/codegen/box/innerNested")
    public static class InnerNested extends AbstractBlackBoxCodegenTest {
        public void testAllFilesPresentInInnerNested() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/codegen/box/innerNested"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("createNestedClass.kt")
        public void testCreateNestedClass() throws Exception {
            doTest("compiler/testData/codegen/box/innerNested/createNestedClass.kt");
        }
        
        @TestMetadata("createdNestedInOuterMember.kt")
        public void testCreatedNestedInOuterMember() throws Exception {
            doTest("compiler/testData/codegen/box/innerNested/createdNestedInOuterMember.kt");
        }
        
        @TestMetadata("dataLocalVariable.kt")
        public void testDataLocalVariable() throws Exception {
            doTest("compiler/testData/codegen/box/innerNested/dataLocalVariable.kt");
        }
        
        @TestMetadata("extensionFun.kt")
        public void testExtensionFun() throws Exception {
            doTest("compiler/testData/codegen/box/innerNested/extensionFun.kt");
        }
        
        @TestMetadata("importNestedClass.kt")
        public void testImportNestedClass() throws Exception {
            doTest("compiler/testData/codegen/box/innerNested/importNestedClass.kt");
        }
        
        @TestMetadata("innerGeneric.kt")
        public void testInnerGeneric() throws Exception {
            doTest("compiler/testData/codegen/box/innerNested/innerGeneric.kt");
        }
        
        @TestMetadata("innerLabeledThis.kt")
        public void testInnerLabeledThis() throws Exception {
            doTest("compiler/testData/codegen/box/innerNested/innerLabeledThis.kt");
        }
        
        @TestMetadata("innerSimple.kt")
        public void testInnerSimple() throws Exception {
            doTest("compiler/testData/codegen/box/innerNested/innerSimple.kt");
        }
        
        @TestMetadata("kt3132.kt")
        public void testKt3132() throws Exception {
            doTest("compiler/testData/codegen/box/innerNested/kt3132.kt");
        }
        
        @TestMetadata("nestedClassObject.kt")
        public void testNestedClassObject() throws Exception {
            doTest("compiler/testData/codegen/box/innerNested/nestedClassObject.kt");
        }
        
        @TestMetadata("nestedEnumConstant.kt")
        public void testNestedEnumConstant() throws Exception {
            doTest("compiler/testData/codegen/box/innerNested/nestedEnumConstant.kt");
        }
        
        @TestMetadata("nestedGeneric.kt")
        public void testNestedGeneric() throws Exception {
            doTest("compiler/testData/codegen/box/innerNested/nestedGeneric.kt");
        }
        
        @TestMetadata("nestedInPackage.kt")
        public void testNestedInPackage() throws Exception {
            doTest("compiler/testData/codegen/box/innerNested/nestedInPackage.kt");
        }
        
        @TestMetadata("nestedObjects.kt")
        public void testNestedObjects() throws Exception {
            doTest("compiler/testData/codegen/box/innerNested/nestedObjects.kt");
        }
        
        @TestMetadata("nestedSimple.kt")
        public void testNestedSimple() throws Exception {
            doTest("compiler/testData/codegen/box/innerNested/nestedSimple.kt");
        }
        
    }
    
    @TestMetadata("compiler/testData/codegen/box/instructions")
    @InnerTestClasses({Instructions.Swap.class})
    public static class Instructions extends AbstractBlackBoxCodegenTest {
        public void testAllFilesPresentInInstructions() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/codegen/box/instructions"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("compiler/testData/codegen/box/instructions/swap")
        public static class Swap extends AbstractBlackBoxCodegenTest {
            public void testAllFilesPresentInSwap() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/codegen/box/instructions/swap"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("swapRefToSharedVarInt.kt")
            public void testSwapRefToSharedVarInt() throws Exception {
                doTest("compiler/testData/codegen/box/instructions/swap/swapRefToSharedVarInt.kt");
            }
            
            @TestMetadata("swapRefToSharedVarLong.kt")
            public void testSwapRefToSharedVarLong() throws Exception {
                doTest("compiler/testData/codegen/box/instructions/swap/swapRefToSharedVarLong.kt");
            }
            
        }
        
        public static Test innerSuite() {
            TestSuite suite = new TestSuite("Instructions");
            suite.addTestSuite(Instructions.class);
            suite.addTestSuite(Swap.class);
            return suite;
        }
    }
    
    @TestMetadata("compiler/testData/codegen/box/intrinsics")
    public static class Intrinsics extends AbstractBlackBoxCodegenTest {
        public void testAllFilesPresentInIntrinsics() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/codegen/box/intrinsics"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("compareTo.kt")
        public void testCompareTo() throws Exception {
            doTest("compiler/testData/codegen/box/intrinsics/compareTo.kt");
        }
        
        @TestMetadata("ea35953.kt")
        public void testEa35953() throws Exception {
            doTest("compiler/testData/codegen/box/intrinsics/ea35953.kt");
        }
        
        @TestMetadata("longRangeWithExplicitDot.kt")
        public void testLongRangeWithExplicitDot() throws Exception {
            doTest("compiler/testData/codegen/box/intrinsics/longRangeWithExplicitDot.kt");
        }
        
        @TestMetadata("tostring.kt")
        public void testTostring() throws Exception {
            doTest("compiler/testData/codegen/box/intrinsics/tostring.kt");
        }
        
    }
    
    @TestMetadata("compiler/testData/codegen/box/labels")
    public static class Labels extends AbstractBlackBoxCodegenTest {
        public void testAllFilesPresentInLabels() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/codegen/box/labels"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("propertyAccessor.kt")
        public void testPropertyAccessor() throws Exception {
            doTest("compiler/testData/codegen/box/labels/propertyAccessor.kt");
        }
        
        @TestMetadata("propertyAccessorFunctionLiteral.kt")
        public void testPropertyAccessorFunctionLiteral() throws Exception {
            doTest("compiler/testData/codegen/box/labels/propertyAccessorFunctionLiteral.kt");
        }
        
        @TestMetadata("propertyAccessorInnerExtensionFun.kt")
        public void testPropertyAccessorInnerExtensionFun() throws Exception {
            doTest("compiler/testData/codegen/box/labels/propertyAccessorInnerExtensionFun.kt");
        }
        
        @TestMetadata("propertyAccessorObject.kt")
        public void testPropertyAccessorObject() throws Exception {
            doTest("compiler/testData/codegen/box/labels/propertyAccessorObject.kt");
        }
        
        @TestMetadata("propertyInClassAccessor.kt")
        public void testPropertyInClassAccessor() throws Exception {
            doTest("compiler/testData/codegen/box/labels/propertyInClassAccessor.kt");
        }
        
    }
    
    @TestMetadata("compiler/testData/codegen/box/localClasses")
    public static class LocalClasses extends AbstractBlackBoxCodegenTest {
        public void testAllFilesPresentInLocalClasses() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/codegen/box/localClasses"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("enum.kt")
        public void testEnum() throws Exception {
            doTest("compiler/testData/codegen/box/localClasses/enum.kt");
        }
        
        @TestMetadata("noclosure.kt")
        public void testNoclosure() throws Exception {
            doTest("compiler/testData/codegen/box/localClasses/noclosure.kt");
        }
        
        @TestMetadata("object.kt")
        public void testObject() throws Exception {
            doTest("compiler/testData/codegen/box/localClasses/object.kt");
        }
        
        @TestMetadata("withclosure.kt")
        public void testWithclosure() throws Exception {
            doTest("compiler/testData/codegen/box/localClasses/withclosure.kt");
        }
        
    }
    
    @TestMetadata("compiler/testData/codegen/box/multiDecl")
    @InnerTestClasses({MultiDecl.ForArray.class, MultiDecl.ForIterator.class, MultiDecl.ForRange.class})
    public static class MultiDecl extends AbstractBlackBoxCodegenTest {
        public void testAllFilesPresentInMultiDecl() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/codegen/box/multiDecl"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("ComplexInitializer.kt")
        public void testComplexInitializer() throws Exception {
            doTest("compiler/testData/codegen/box/multiDecl/ComplexInitializer.kt");
        }
        
        @TestMetadata("component.kt")
        public void testComponent() throws Exception {
            doTest("compiler/testData/codegen/box/multiDecl/component.kt");
        }
        
        @TestMetadata("SimpleVals.kt")
        public void testSimpleVals() throws Exception {
            doTest("compiler/testData/codegen/box/multiDecl/SimpleVals.kt");
        }
        
        @TestMetadata("SimpleValsExtensions.kt")
        public void testSimpleValsExtensions() throws Exception {
            doTest("compiler/testData/codegen/box/multiDecl/SimpleValsExtensions.kt");
        }
        
        @TestMetadata("SimpleVarsExtensions.kt")
        public void testSimpleVarsExtensions() throws Exception {
            doTest("compiler/testData/codegen/box/multiDecl/SimpleVarsExtensions.kt");
        }
        
        @TestMetadata("ValCapturedInFunctionLiteral.kt")
        public void testValCapturedInFunctionLiteral() throws Exception {
            doTest("compiler/testData/codegen/box/multiDecl/ValCapturedInFunctionLiteral.kt");
        }
        
        @TestMetadata("ValCapturedInLocalFunction.kt")
        public void testValCapturedInLocalFunction() throws Exception {
            doTest("compiler/testData/codegen/box/multiDecl/ValCapturedInLocalFunction.kt");
        }
        
        @TestMetadata("ValCapturedInObjectLiteral.kt")
        public void testValCapturedInObjectLiteral() throws Exception {
            doTest("compiler/testData/codegen/box/multiDecl/ValCapturedInObjectLiteral.kt");
        }
        
        @TestMetadata("VarCapturedInFunctionLiteral.kt")
        public void testVarCapturedInFunctionLiteral() throws Exception {
            doTest("compiler/testData/codegen/box/multiDecl/VarCapturedInFunctionLiteral.kt");
        }
        
        @TestMetadata("VarCapturedInLocalFunction.kt")
        public void testVarCapturedInLocalFunction() throws Exception {
            doTest("compiler/testData/codegen/box/multiDecl/VarCapturedInLocalFunction.kt");
        }
        
        @TestMetadata("VarCapturedInObjectLiteral.kt")
        public void testVarCapturedInObjectLiteral() throws Exception {
            doTest("compiler/testData/codegen/box/multiDecl/VarCapturedInObjectLiteral.kt");
        }
        
        @TestMetadata("compiler/testData/codegen/box/multiDecl/forArray")
        @InnerTestClasses({ForArray.Int.class, ForArray.Long.class})
        public static class ForArray extends AbstractBlackBoxCodegenTest {
            public void testAllFilesPresentInForArray() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/codegen/box/multiDecl/forArray"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("MultiDeclFor.kt")
            public void testMultiDeclFor() throws Exception {
                doTest("compiler/testData/codegen/box/multiDecl/forArray/MultiDeclFor.kt");
            }
            
            @TestMetadata("MultiDeclForComponentExtensions.kt")
            public void testMultiDeclForComponentExtensions() throws Exception {
                doTest("compiler/testData/codegen/box/multiDecl/forArray/MultiDeclForComponentExtensions.kt");
            }
            
            @TestMetadata("MultiDeclForComponentMemberExtensions.kt")
            public void testMultiDeclForComponentMemberExtensions() throws Exception {
                doTest("compiler/testData/codegen/box/multiDecl/forArray/MultiDeclForComponentMemberExtensions.kt");
            }
            
            @TestMetadata("MultiDeclForComponentMemberExtensionsInExtensionFunction.kt")
            public void testMultiDeclForComponentMemberExtensionsInExtensionFunction() throws Exception {
                doTest("compiler/testData/codegen/box/multiDecl/forArray/MultiDeclForComponentMemberExtensionsInExtensionFunction.kt");
            }
            
            @TestMetadata("MultiDeclForValCaptured.kt")
            public void testMultiDeclForValCaptured() throws Exception {
                doTest("compiler/testData/codegen/box/multiDecl/forArray/MultiDeclForValCaptured.kt");
            }
            
            @TestMetadata("compiler/testData/codegen/box/multiDecl/forArray/int")
            public static class Int extends AbstractBlackBoxCodegenTest {
                public void testAllFilesPresentInInt() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/codegen/box/multiDecl/forArray/int"), Pattern.compile("^(.+)\\.kt$"), true);
                }
                
                @TestMetadata("MultiDeclForComponentExtensions.kt")
                public void testMultiDeclForComponentExtensions() throws Exception {
                    doTest("compiler/testData/codegen/box/multiDecl/forArray/int/MultiDeclForComponentExtensions.kt");
                }
                
                @TestMetadata("MultiDeclForComponentExtensionsValCaptured.kt")
                public void testMultiDeclForComponentExtensionsValCaptured() throws Exception {
                    doTest("compiler/testData/codegen/box/multiDecl/forArray/int/MultiDeclForComponentExtensionsValCaptured.kt");
                }
                
                @TestMetadata("MultiDeclForComponentMemberExtensions.kt")
                public void testMultiDeclForComponentMemberExtensions() throws Exception {
                    doTest("compiler/testData/codegen/box/multiDecl/forArray/int/MultiDeclForComponentMemberExtensions.kt");
                }
                
                @TestMetadata("MultiDeclForComponentMemberExtensionsInExtensionFunction.kt")
                public void testMultiDeclForComponentMemberExtensionsInExtensionFunction() throws Exception {
                    doTest("compiler/testData/codegen/box/multiDecl/forArray/int/MultiDeclForComponentMemberExtensionsInExtensionFunction.kt");
                }
                
            }
            
            @TestMetadata("compiler/testData/codegen/box/multiDecl/forArray/long")
            public static class Long extends AbstractBlackBoxCodegenTest {
                public void testAllFilesPresentInLong() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/codegen/box/multiDecl/forArray/long"), Pattern.compile("^(.+)\\.kt$"), true);
                }
                
                @TestMetadata("MultiDeclForComponentExtensions.kt")
                public void testMultiDeclForComponentExtensions() throws Exception {
                    doTest("compiler/testData/codegen/box/multiDecl/forArray/long/MultiDeclForComponentExtensions.kt");
                }
                
                @TestMetadata("MultiDeclForComponentExtensionsValCaptured.kt")
                public void testMultiDeclForComponentExtensionsValCaptured() throws Exception {
                    doTest("compiler/testData/codegen/box/multiDecl/forArray/long/MultiDeclForComponentExtensionsValCaptured.kt");
                }
                
                @TestMetadata("MultiDeclForComponentMemberExtensions.kt")
                public void testMultiDeclForComponentMemberExtensions() throws Exception {
                    doTest("compiler/testData/codegen/box/multiDecl/forArray/long/MultiDeclForComponentMemberExtensions.kt");
                }
                
                @TestMetadata("MultiDeclForComponentMemberExtensionsInExtensionFunction.kt")
                public void testMultiDeclForComponentMemberExtensionsInExtensionFunction() throws Exception {
                    doTest("compiler/testData/codegen/box/multiDecl/forArray/long/MultiDeclForComponentMemberExtensionsInExtensionFunction.kt");
                }
                
            }
            
            public static Test innerSuite() {
                TestSuite suite = new TestSuite("ForArray");
                suite.addTestSuite(ForArray.class);
                suite.addTestSuite(Int.class);
                suite.addTestSuite(Long.class);
                return suite;
            }
        }
        
        @TestMetadata("compiler/testData/codegen/box/multiDecl/forIterator")
        @InnerTestClasses({ForIterator.LongIterator.class})
        public static class ForIterator extends AbstractBlackBoxCodegenTest {
            public void testAllFilesPresentInForIterator() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/codegen/box/multiDecl/forIterator"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("MultiDeclFor.kt")
            public void testMultiDeclFor() throws Exception {
                doTest("compiler/testData/codegen/box/multiDecl/forIterator/MultiDeclFor.kt");
            }
            
            @TestMetadata("MultiDeclForComponentExtensions.kt")
            public void testMultiDeclForComponentExtensions() throws Exception {
                doTest("compiler/testData/codegen/box/multiDecl/forIterator/MultiDeclForComponentExtensions.kt");
            }
            
            @TestMetadata("MultiDeclForComponentMemberExtensions.kt")
            public void testMultiDeclForComponentMemberExtensions() throws Exception {
                doTest("compiler/testData/codegen/box/multiDecl/forIterator/MultiDeclForComponentMemberExtensions.kt");
            }
            
            @TestMetadata("MultiDeclForComponentMemberExtensionsInExtensionFunction.kt")
            public void testMultiDeclForComponentMemberExtensionsInExtensionFunction() throws Exception {
                doTest("compiler/testData/codegen/box/multiDecl/forIterator/MultiDeclForComponentMemberExtensionsInExtensionFunction.kt");
            }
            
            @TestMetadata("MultiDeclForValCaptured.kt")
            public void testMultiDeclForValCaptured() throws Exception {
                doTest("compiler/testData/codegen/box/multiDecl/forIterator/MultiDeclForValCaptured.kt");
            }
            
            @TestMetadata("compiler/testData/codegen/box/multiDecl/forIterator/longIterator")
            public static class LongIterator extends AbstractBlackBoxCodegenTest {
                public void testAllFilesPresentInLongIterator() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/codegen/box/multiDecl/forIterator/longIterator"), Pattern.compile("^(.+)\\.kt$"), true);
                }
                
                @TestMetadata("MultiDeclForComponentExtensions.kt")
                public void testMultiDeclForComponentExtensions() throws Exception {
                    doTest("compiler/testData/codegen/box/multiDecl/forIterator/longIterator/MultiDeclForComponentExtensions.kt");
                }
                
                @TestMetadata("MultiDeclForComponentExtensionsValCaptured.kt")
                public void testMultiDeclForComponentExtensionsValCaptured() throws Exception {
                    doTest("compiler/testData/codegen/box/multiDecl/forIterator/longIterator/MultiDeclForComponentExtensionsValCaptured.kt");
                }
                
                @TestMetadata("MultiDeclForComponentMemberExtensions.kt")
                public void testMultiDeclForComponentMemberExtensions() throws Exception {
                    doTest("compiler/testData/codegen/box/multiDecl/forIterator/longIterator/MultiDeclForComponentMemberExtensions.kt");
                }
                
                @TestMetadata("MultiDeclForComponentMemberExtensionsInExtensionFunction.kt")
                public void testMultiDeclForComponentMemberExtensionsInExtensionFunction() throws Exception {
                    doTest("compiler/testData/codegen/box/multiDecl/forIterator/longIterator/MultiDeclForComponentMemberExtensionsInExtensionFunction.kt");
                }
                
            }
            
            public static Test innerSuite() {
                TestSuite suite = new TestSuite("ForIterator");
                suite.addTestSuite(ForIterator.class);
                suite.addTestSuite(LongIterator.class);
                return suite;
            }
        }
        
        @TestMetadata("compiler/testData/codegen/box/multiDecl/forRange")
        @InnerTestClasses({ForRange.ExplicitRangeTo.class, ForRange.ExplicitRangeToWithDot.class, ForRange.Int.class, ForRange.Long.class})
        public static class ForRange extends AbstractBlackBoxCodegenTest {
            public void testAllFilesPresentInForRange() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/codegen/box/multiDecl/forRange"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("MultiDeclFor.kt")
            public void testMultiDeclFor() throws Exception {
                doTest("compiler/testData/codegen/box/multiDecl/forRange/MultiDeclFor.kt");
            }
            
            @TestMetadata("MultiDeclForComponentExtensions.kt")
            public void testMultiDeclForComponentExtensions() throws Exception {
                doTest("compiler/testData/codegen/box/multiDecl/forRange/MultiDeclForComponentExtensions.kt");
            }
            
            @TestMetadata("MultiDeclForComponentMemberExtensions.kt")
            public void testMultiDeclForComponentMemberExtensions() throws Exception {
                doTest("compiler/testData/codegen/box/multiDecl/forRange/MultiDeclForComponentMemberExtensions.kt");
            }
            
            @TestMetadata("MultiDeclForComponentMemberExtensionsInExtensionFunction.kt")
            public void testMultiDeclForComponentMemberExtensionsInExtensionFunction() throws Exception {
                doTest("compiler/testData/codegen/box/multiDecl/forRange/MultiDeclForComponentMemberExtensionsInExtensionFunction.kt");
            }
            
            @TestMetadata("MultiDeclForValCaptured.kt")
            public void testMultiDeclForValCaptured() throws Exception {
                doTest("compiler/testData/codegen/box/multiDecl/forRange/MultiDeclForValCaptured.kt");
            }
            
            @TestMetadata("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo")
            @InnerTestClasses({ExplicitRangeTo.Int.class, ExplicitRangeTo.Long.class})
            public static class ExplicitRangeTo extends AbstractBlackBoxCodegenTest {
                public void testAllFilesPresentInExplicitRangeTo() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo"), Pattern.compile("^(.+)\\.kt$"), true);
                }
                
                @TestMetadata("MultiDeclFor.kt")
                public void testMultiDeclFor() throws Exception {
                    doTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/MultiDeclFor.kt");
                }
                
                @TestMetadata("MultiDeclForComponentExtensions.kt")
                public void testMultiDeclForComponentExtensions() throws Exception {
                    doTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/MultiDeclForComponentExtensions.kt");
                }
                
                @TestMetadata("MultiDeclForComponentMemberExtensions.kt")
                public void testMultiDeclForComponentMemberExtensions() throws Exception {
                    doTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/MultiDeclForComponentMemberExtensions.kt");
                }
                
                @TestMetadata("MultiDeclForComponentMemberExtensionsInExtensionFunction.kt")
                public void testMultiDeclForComponentMemberExtensionsInExtensionFunction() throws Exception {
                    doTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/MultiDeclForComponentMemberExtensionsInExtensionFunction.kt");
                }
                
                @TestMetadata("MultiDeclForValCaptured.kt")
                public void testMultiDeclForValCaptured() throws Exception {
                    doTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/MultiDeclForValCaptured.kt");
                }
                
                @TestMetadata("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/int")
                public static class Int extends AbstractBlackBoxCodegenTest {
                    public void testAllFilesPresentInInt() throws Exception {
                        JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/int"), Pattern.compile("^(.+)\\.kt$"), true);
                    }
                    
                    @TestMetadata("MultiDeclForComponentExtensions.kt")
                    public void testMultiDeclForComponentExtensions() throws Exception {
                        doTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/int/MultiDeclForComponentExtensions.kt");
                    }
                    
                    @TestMetadata("MultiDeclForComponentExtensionsValCaptured.kt")
                    public void testMultiDeclForComponentExtensionsValCaptured() throws Exception {
                        doTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/int/MultiDeclForComponentExtensionsValCaptured.kt");
                    }
                    
                    @TestMetadata("MultiDeclForComponentMemberExtensions.kt")
                    public void testMultiDeclForComponentMemberExtensions() throws Exception {
                        doTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/int/MultiDeclForComponentMemberExtensions.kt");
                    }
                    
                    @TestMetadata("MultiDeclForComponentMemberExtensionsInExtensionFunction.kt")
                    public void testMultiDeclForComponentMemberExtensionsInExtensionFunction() throws Exception {
                        doTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/int/MultiDeclForComponentMemberExtensionsInExtensionFunction.kt");
                    }
                    
                }
                
                @TestMetadata("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/long")
                public static class Long extends AbstractBlackBoxCodegenTest {
                    public void testAllFilesPresentInLong() throws Exception {
                        JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/long"), Pattern.compile("^(.+)\\.kt$"), true);
                    }
                    
                    @TestMetadata("MultiDeclForComponentExtensions.kt")
                    public void testMultiDeclForComponentExtensions() throws Exception {
                        doTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/long/MultiDeclForComponentExtensions.kt");
                    }
                    
                    @TestMetadata("MultiDeclForComponentExtensionsValCaptured.kt")
                    public void testMultiDeclForComponentExtensionsValCaptured() throws Exception {
                        doTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/long/MultiDeclForComponentExtensionsValCaptured.kt");
                    }
                    
                    @TestMetadata("MultiDeclForComponentMemberExtensions.kt")
                    public void testMultiDeclForComponentMemberExtensions() throws Exception {
                        doTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/long/MultiDeclForComponentMemberExtensions.kt");
                    }
                    
                    @TestMetadata("MultiDeclForComponentMemberExtensionsInExtensionFunction.kt")
                    public void testMultiDeclForComponentMemberExtensionsInExtensionFunction() throws Exception {
                        doTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/long/MultiDeclForComponentMemberExtensionsInExtensionFunction.kt");
                    }
                    
                }
                
                public static Test innerSuite() {
                    TestSuite suite = new TestSuite("ExplicitRangeTo");
                    suite.addTestSuite(ExplicitRangeTo.class);
                    suite.addTestSuite(Int.class);
                    suite.addTestSuite(Long.class);
                    return suite;
                }
            }
            
            @TestMetadata("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot")
            @InnerTestClasses({ExplicitRangeToWithDot.Int.class, ExplicitRangeToWithDot.Long.class})
            public static class ExplicitRangeToWithDot extends AbstractBlackBoxCodegenTest {
                public void testAllFilesPresentInExplicitRangeToWithDot() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot"), Pattern.compile("^(.+)\\.kt$"), true);
                }
                
                @TestMetadata("MultiDeclFor.kt")
                public void testMultiDeclFor() throws Exception {
                    doTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/MultiDeclFor.kt");
                }
                
                @TestMetadata("MultiDeclForComponentExtensions.kt")
                public void testMultiDeclForComponentExtensions() throws Exception {
                    doTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/MultiDeclForComponentExtensions.kt");
                }
                
                @TestMetadata("MultiDeclForComponentMemberExtensions.kt")
                public void testMultiDeclForComponentMemberExtensions() throws Exception {
                    doTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/MultiDeclForComponentMemberExtensions.kt");
                }
                
                @TestMetadata("MultiDeclForComponentMemberExtensionsInExtensionFunction.kt")
                public void testMultiDeclForComponentMemberExtensionsInExtensionFunction() throws Exception {
                    doTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/MultiDeclForComponentMemberExtensionsInExtensionFunction.kt");
                }
                
                @TestMetadata("MultiDeclForValCaptured.kt")
                public void testMultiDeclForValCaptured() throws Exception {
                    doTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/MultiDeclForValCaptured.kt");
                }
                
                @TestMetadata("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/int")
                public static class Int extends AbstractBlackBoxCodegenTest {
                    public void testAllFilesPresentInInt() throws Exception {
                        JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/int"), Pattern.compile("^(.+)\\.kt$"), true);
                    }
                    
                    @TestMetadata("MultiDeclForComponentExtensions.kt")
                    public void testMultiDeclForComponentExtensions() throws Exception {
                        doTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/int/MultiDeclForComponentExtensions.kt");
                    }
                    
                    @TestMetadata("MultiDeclForComponentExtensionsValCaptured.kt")
                    public void testMultiDeclForComponentExtensionsValCaptured() throws Exception {
                        doTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/int/MultiDeclForComponentExtensionsValCaptured.kt");
                    }
                    
                    @TestMetadata("MultiDeclForComponentMemberExtensions.kt")
                    public void testMultiDeclForComponentMemberExtensions() throws Exception {
                        doTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/int/MultiDeclForComponentMemberExtensions.kt");
                    }
                    
                    @TestMetadata("MultiDeclForComponentMemberExtensionsInExtensionFunction.kt")
                    public void testMultiDeclForComponentMemberExtensionsInExtensionFunction() throws Exception {
                        doTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/int/MultiDeclForComponentMemberExtensionsInExtensionFunction.kt");
                    }
                    
                }
                
                @TestMetadata("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/long")
                public static class Long extends AbstractBlackBoxCodegenTest {
                    public void testAllFilesPresentInLong() throws Exception {
                        JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/long"), Pattern.compile("^(.+)\\.kt$"), true);
                    }
                    
                    @TestMetadata("MultiDeclForComponentExtensions.kt")
                    public void testMultiDeclForComponentExtensions() throws Exception {
                        doTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/long/MultiDeclForComponentExtensions.kt");
                    }
                    
                    @TestMetadata("MultiDeclForComponentExtensionsValCaptured.kt")
                    public void testMultiDeclForComponentExtensionsValCaptured() throws Exception {
                        doTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/long/MultiDeclForComponentExtensionsValCaptured.kt");
                    }
                    
                    @TestMetadata("MultiDeclForComponentMemberExtensions.kt")
                    public void testMultiDeclForComponentMemberExtensions() throws Exception {
                        doTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/long/MultiDeclForComponentMemberExtensions.kt");
                    }
                    
                    @TestMetadata("MultiDeclForComponentMemberExtensionsInExtensionFunction.kt")
                    public void testMultiDeclForComponentMemberExtensionsInExtensionFunction() throws Exception {
                        doTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/long/MultiDeclForComponentMemberExtensionsInExtensionFunction.kt");
                    }
                    
                }
                
                public static Test innerSuite() {
                    TestSuite suite = new TestSuite("ExplicitRangeToWithDot");
                    suite.addTestSuite(ExplicitRangeToWithDot.class);
                    suite.addTestSuite(Int.class);
                    suite.addTestSuite(Long.class);
                    return suite;
                }
            }
            
            @TestMetadata("compiler/testData/codegen/box/multiDecl/forRange/int")
            public static class Int extends AbstractBlackBoxCodegenTest {
                public void testAllFilesPresentInInt() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/codegen/box/multiDecl/forRange/int"), Pattern.compile("^(.+)\\.kt$"), true);
                }
                
                @TestMetadata("MultiDeclForComponentExtensions.kt")
                public void testMultiDeclForComponentExtensions() throws Exception {
                    doTest("compiler/testData/codegen/box/multiDecl/forRange/int/MultiDeclForComponentExtensions.kt");
                }
                
                @TestMetadata("MultiDeclForComponentExtensionsValCaptured.kt")
                public void testMultiDeclForComponentExtensionsValCaptured() throws Exception {
                    doTest("compiler/testData/codegen/box/multiDecl/forRange/int/MultiDeclForComponentExtensionsValCaptured.kt");
                }
                
                @TestMetadata("MultiDeclForComponentMemberExtensions.kt")
                public void testMultiDeclForComponentMemberExtensions() throws Exception {
                    doTest("compiler/testData/codegen/box/multiDecl/forRange/int/MultiDeclForComponentMemberExtensions.kt");
                }
                
                @TestMetadata("MultiDeclForComponentMemberExtensionsInExtensionFunction.kt")
                public void testMultiDeclForComponentMemberExtensionsInExtensionFunction() throws Exception {
                    doTest("compiler/testData/codegen/box/multiDecl/forRange/int/MultiDeclForComponentMemberExtensionsInExtensionFunction.kt");
                }
                
            }
            
            @TestMetadata("compiler/testData/codegen/box/multiDecl/forRange/long")
            public static class Long extends AbstractBlackBoxCodegenTest {
                public void testAllFilesPresentInLong() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/codegen/box/multiDecl/forRange/long"), Pattern.compile("^(.+)\\.kt$"), true);
                }
                
                @TestMetadata("MultiDeclForComponentExtensions.kt")
                public void testMultiDeclForComponentExtensions() throws Exception {
                    doTest("compiler/testData/codegen/box/multiDecl/forRange/long/MultiDeclForComponentExtensions.kt");
                }
                
                @TestMetadata("MultiDeclForComponentExtensionsValCaptured.kt")
                public void testMultiDeclForComponentExtensionsValCaptured() throws Exception {
                    doTest("compiler/testData/codegen/box/multiDecl/forRange/long/MultiDeclForComponentExtensionsValCaptured.kt");
                }
                
                @TestMetadata("MultiDeclForComponentMemberExtensions.kt")
                public void testMultiDeclForComponentMemberExtensions() throws Exception {
                    doTest("compiler/testData/codegen/box/multiDecl/forRange/long/MultiDeclForComponentMemberExtensions.kt");
                }
                
                @TestMetadata("MultiDeclForComponentMemberExtensionsInExtensionFunction.kt")
                public void testMultiDeclForComponentMemberExtensionsInExtensionFunction() throws Exception {
                    doTest("compiler/testData/codegen/box/multiDecl/forRange/long/MultiDeclForComponentMemberExtensionsInExtensionFunction.kt");
                }
                
            }
            
            public static Test innerSuite() {
                TestSuite suite = new TestSuite("ForRange");
                suite.addTestSuite(ForRange.class);
                suite.addTest(ExplicitRangeTo.innerSuite());
                suite.addTest(ExplicitRangeToWithDot.innerSuite());
                suite.addTestSuite(Int.class);
                suite.addTestSuite(Long.class);
                return suite;
            }
        }
        
        public static Test innerSuite() {
            TestSuite suite = new TestSuite("MultiDecl");
            suite.addTestSuite(MultiDecl.class);
            suite.addTest(ForArray.innerSuite());
            suite.addTest(ForIterator.innerSuite());
            suite.addTest(ForRange.innerSuite());
            return suite;
        }
    }
    
    @TestMetadata("compiler/testData/codegen/box/namespace")
    public static class Namespace extends AbstractBlackBoxCodegenTest {
        public void testAllFilesPresentInNamespace() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/codegen/box/namespace"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("checkCast.kt")
        public void testCheckCast() throws Exception {
            doTest("compiler/testData/codegen/box/namespace/checkCast.kt");
        }
        
        @TestMetadata("incrementProperty.kt")
        public void testIncrementProperty() throws Exception {
            doTest("compiler/testData/codegen/box/namespace/incrementProperty.kt");
        }
        
        @TestMetadata("invokespecial.kt")
        public void testInvokespecial() throws Exception {
            doTest("compiler/testData/codegen/box/namespace/invokespecial.kt");
        }
        
        @TestMetadata("namespaceQualifiedMethod.kt")
        public void testNamespaceQualifiedMethod() throws Exception {
            doTest("compiler/testData/codegen/box/namespace/namespaceQualifiedMethod.kt");
        }
        
        @TestMetadata("privateTopLevelPropAndVarInInner.kt")
        public void testPrivateTopLevelPropAndVarInInner() throws Exception {
            doTest("compiler/testData/codegen/box/namespace/privateTopLevelPropAndVarInInner.kt");
        }
        
    }
    
    @TestMetadata("compiler/testData/codegen/box/objects")
    public static class Objects extends AbstractBlackBoxCodegenTest {
        public void testAllFilesPresentInObjects() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/codegen/box/objects"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("flist.kt")
        public void testFlist() throws Exception {
            doTest("compiler/testData/codegen/box/objects/flist.kt");
        }
        
        @TestMetadata("kt1047.kt")
        public void testKt1047() throws Exception {
            doTest("compiler/testData/codegen/box/objects/kt1047.kt");
        }
        
        @TestMetadata("kt1136.kt")
        public void testKt1136() throws Exception {
            doTest("compiler/testData/codegen/box/objects/kt1136.kt");
        }
        
        @TestMetadata("kt1186.kt")
        public void testKt1186() throws Exception {
            doTest("compiler/testData/codegen/box/objects/kt1186.kt");
        }
        
        @TestMetadata("kt1600.kt")
        public void testKt1600() throws Exception {
            doTest("compiler/testData/codegen/box/objects/kt1600.kt");
        }
        
        @TestMetadata("kt1737.kt")
        public void testKt1737() throws Exception {
            doTest("compiler/testData/codegen/box/objects/kt1737.kt");
        }
        
        @TestMetadata("kt2398.kt")
        public void testKt2398() throws Exception {
            doTest("compiler/testData/codegen/box/objects/kt2398.kt");
        }
        
        @TestMetadata("kt2663.kt")
        public void testKt2663() throws Exception {
            doTest("compiler/testData/codegen/box/objects/kt2663.kt");
        }
        
        @TestMetadata("kt2663_2.kt")
        public void testKt2663_2() throws Exception {
            doTest("compiler/testData/codegen/box/objects/kt2663_2.kt");
        }
        
        @TestMetadata("kt2675.kt")
        public void testKt2675() throws Exception {
            doTest("compiler/testData/codegen/box/objects/kt2675.kt");
        }
        
        @TestMetadata("kt2719.kt")
        public void testKt2719() throws Exception {
            doTest("compiler/testData/codegen/box/objects/kt2719.kt");
        }
        
        @TestMetadata("kt2822.kt")
        public void testKt2822() throws Exception {
            doTest("compiler/testData/codegen/box/objects/kt2822.kt");
        }
        
        @TestMetadata("kt3238.kt")
        public void testKt3238() throws Exception {
            doTest("compiler/testData/codegen/box/objects/kt3238.kt");
        }
        
        @TestMetadata("kt535.kt")
        public void testKt535() throws Exception {
            doTest("compiler/testData/codegen/box/objects/kt535.kt");
        }
        
        @TestMetadata("kt560.kt")
        public void testKt560() throws Exception {
            doTest("compiler/testData/codegen/box/objects/kt560.kt");
        }
        
        @TestMetadata("kt640.kt")
        public void testKt640() throws Exception {
            doTest("compiler/testData/codegen/box/objects/kt640.kt");
        }
        
        @TestMetadata("kt694.kt")
        public void testKt694() throws Exception {
            doTest("compiler/testData/codegen/box/objects/kt694.kt");
        }
        
        @TestMetadata("methodOnObject.kt")
        public void testMethodOnObject() throws Exception {
            doTest("compiler/testData/codegen/box/objects/methodOnObject.kt");
        }
        
        @TestMetadata("objectLiteral.kt")
        public void testObjectLiteral() throws Exception {
            doTest("compiler/testData/codegen/box/objects/objectLiteral.kt");
        }
        
        @TestMetadata("objectLiteralInClosure.kt")
        public void testObjectLiteralInClosure() throws Exception {
            doTest("compiler/testData/codegen/box/objects/objectLiteralInClosure.kt");
        }
        
        @TestMetadata("receiverInConstructor.kt")
        public void testReceiverInConstructor() throws Exception {
            doTest("compiler/testData/codegen/box/objects/receiverInConstructor.kt");
        }
        
        @TestMetadata("simpleObject.kt")
        public void testSimpleObject() throws Exception {
            doTest("compiler/testData/codegen/box/objects/simpleObject.kt");
        }
        
        @TestMetadata("thisInConstructor.kt")
        public void testThisInConstructor() throws Exception {
            doTest("compiler/testData/codegen/box/objects/thisInConstructor.kt");
        }
        
    }
    
    @TestMetadata("compiler/testData/codegen/box/operatorConventions")
    @InnerTestClasses({OperatorConventions.CompareTo.class})
    public static class OperatorConventions extends AbstractBlackBoxCodegenTest {
        public void testAllFilesPresentInOperatorConventions() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/codegen/box/operatorConventions"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("assignmentOperations.kt")
        public void testAssignmentOperations() throws Exception {
            doTest("compiler/testData/codegen/box/operatorConventions/assignmentOperations.kt");
        }
        
        @TestMetadata("compiler/testData/codegen/box/operatorConventions/compareTo")
        public static class CompareTo extends AbstractBlackBoxCodegenTest {
            public void testAllFilesPresentInCompareTo() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/codegen/box/operatorConventions/compareTo"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("comparable.kt")
            public void testComparable() throws Exception {
                doTest("compiler/testData/codegen/box/operatorConventions/compareTo/comparable.kt");
            }
            
            @TestMetadata("doubleInt.kt")
            public void testDoubleInt() throws Exception {
                doTest("compiler/testData/codegen/box/operatorConventions/compareTo/doubleInt.kt");
            }
            
            @TestMetadata("doubleLong.kt")
            public void testDoubleLong() throws Exception {
                doTest("compiler/testData/codegen/box/operatorConventions/compareTo/doubleLong.kt");
            }
            
            @TestMetadata("extensionArray.kt")
            public void testExtensionArray() throws Exception {
                doTest("compiler/testData/codegen/box/operatorConventions/compareTo/extensionArray.kt");
            }
            
            @TestMetadata("extensionObject.kt")
            public void testExtensionObject() throws Exception {
                doTest("compiler/testData/codegen/box/operatorConventions/compareTo/extensionObject.kt");
            }
            
            @TestMetadata("intDouble.kt")
            public void testIntDouble() throws Exception {
                doTest("compiler/testData/codegen/box/operatorConventions/compareTo/intDouble.kt");
            }
            
            @TestMetadata("intLong.kt")
            public void testIntLong() throws Exception {
                doTest("compiler/testData/codegen/box/operatorConventions/compareTo/intLong.kt");
            }
            
            @TestMetadata("longDouble.kt")
            public void testLongDouble() throws Exception {
                doTest("compiler/testData/codegen/box/operatorConventions/compareTo/longDouble.kt");
            }
            
            @TestMetadata("longInt.kt")
            public void testLongInt() throws Exception {
                doTest("compiler/testData/codegen/box/operatorConventions/compareTo/longInt.kt");
            }
            
        }
        
        public static Test innerSuite() {
            TestSuite suite = new TestSuite("OperatorConventions");
            suite.addTestSuite(OperatorConventions.class);
            suite.addTestSuite(CompareTo.class);
            return suite;
        }
    }
    
    @TestMetadata("compiler/testData/codegen/box/primitiveTypes")
    public static class PrimitiveTypes extends AbstractBlackBoxCodegenTest {
        public void testAllFilesPresentInPrimitiveTypes() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/codegen/box/primitiveTypes"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("comparisonWithNullCallsFun.kt")
        public void testComparisonWithNullCallsFun() throws Exception {
            doTest("compiler/testData/codegen/box/primitiveTypes/comparisonWithNullCallsFun.kt");
        }
        
        @TestMetadata("ea35963.kt")
        public void testEa35963() throws Exception {
            doTest("compiler/testData/codegen/box/primitiveTypes/ea35963.kt");
        }
        
        @TestMetadata("intLiteralIsNotNull.kt")
        public void testIntLiteralIsNotNull() throws Exception {
            doTest("compiler/testData/codegen/box/primitiveTypes/intLiteralIsNotNull.kt");
        }
        
        @TestMetadata("kt1054.kt")
        public void testKt1054() throws Exception {
            doTest("compiler/testData/codegen/box/primitiveTypes/kt1054.kt");
        }
        
        @TestMetadata("kt1055.kt")
        public void testKt1055() throws Exception {
            doTest("compiler/testData/codegen/box/primitiveTypes/kt1055.kt");
        }
        
        @TestMetadata("kt1093.kt")
        public void testKt1093() throws Exception {
            doTest("compiler/testData/codegen/box/primitiveTypes/kt1093.kt");
        }
        
        @TestMetadata("kt1508.kt")
        public void testKt1508() throws Exception {
            doTest("compiler/testData/codegen/box/primitiveTypes/kt1508.kt");
        }
        
        @TestMetadata("kt1634.kt")
        public void testKt1634() throws Exception {
            doTest("compiler/testData/codegen/box/primitiveTypes/kt1634.kt");
        }
        
        @TestMetadata("kt2251.kt")
        public void testKt2251() throws Exception {
            doTest("compiler/testData/codegen/box/primitiveTypes/kt2251.kt");
        }
        
        @TestMetadata("kt2269.kt")
        public void testKt2269() throws Exception {
            doTest("compiler/testData/codegen/box/primitiveTypes/kt2269.kt");
        }
        
        @TestMetadata("kt2275.kt")
        public void testKt2275() throws Exception {
            doTest("compiler/testData/codegen/box/primitiveTypes/kt2275.kt");
        }
        
        @TestMetadata("kt239.kt")
        public void testKt239() throws Exception {
            doTest("compiler/testData/codegen/box/primitiveTypes/kt239.kt");
        }
        
        @TestMetadata("kt242.kt")
        public void testKt242() throws Exception {
            doTest("compiler/testData/codegen/box/primitiveTypes/kt242.kt");
        }
        
        @TestMetadata("kt243.kt")
        public void testKt243() throws Exception {
            doTest("compiler/testData/codegen/box/primitiveTypes/kt243.kt");
        }
        
        @TestMetadata("kt248.kt")
        public void testKt248() throws Exception {
            doTest("compiler/testData/codegen/box/primitiveTypes/kt248.kt");
        }
        
        @TestMetadata("kt2794.kt")
        public void testKt2794() throws Exception {
            doTest("compiler/testData/codegen/box/primitiveTypes/kt2794.kt");
        }
        
        @TestMetadata("kt3078.kt")
        public void testKt3078() throws Exception {
            doTest("compiler/testData/codegen/box/primitiveTypes/kt3078.kt");
        }
        
        @TestMetadata("kt446.kt")
        public void testKt446() throws Exception {
            doTest("compiler/testData/codegen/box/primitiveTypes/kt446.kt");
        }
        
        @TestMetadata("kt518.kt")
        public void testKt518() throws Exception {
            doTest("compiler/testData/codegen/box/primitiveTypes/kt518.kt");
        }
        
        @TestMetadata("kt665.kt")
        public void testKt665() throws Exception {
            doTest("compiler/testData/codegen/box/primitiveTypes/kt665.kt");
        }
        
        @TestMetadata("kt684.kt")
        public void testKt684() throws Exception {
            doTest("compiler/testData/codegen/box/primitiveTypes/kt684.kt");
        }
        
        @TestMetadata("kt711.kt")
        public void testKt711() throws Exception {
            doTest("compiler/testData/codegen/box/primitiveTypes/kt711.kt");
        }
        
        @TestMetadata("kt737.kt")
        public void testKt737() throws Exception {
            doTest("compiler/testData/codegen/box/primitiveTypes/kt737.kt");
        }
        
        @TestMetadata("kt752.kt")
        public void testKt752() throws Exception {
            doTest("compiler/testData/codegen/box/primitiveTypes/kt752.kt");
        }
        
        @TestMetadata("kt753.kt")
        public void testKt753() throws Exception {
            doTest("compiler/testData/codegen/box/primitiveTypes/kt753.kt");
        }
        
        @TestMetadata("kt756.kt")
        public void testKt756() throws Exception {
            doTest("compiler/testData/codegen/box/primitiveTypes/kt756.kt");
        }
        
        @TestMetadata("kt757.kt")
        public void testKt757() throws Exception {
            doTest("compiler/testData/codegen/box/primitiveTypes/kt757.kt");
        }
        
        @TestMetadata("kt828.kt")
        public void testKt828() throws Exception {
            doTest("compiler/testData/codegen/box/primitiveTypes/kt828.kt");
        }
        
        @TestMetadata("kt877.kt")
        public void testKt877() throws Exception {
            doTest("compiler/testData/codegen/box/primitiveTypes/kt877.kt");
        }
        
        @TestMetadata("kt882.kt")
        public void testKt882() throws Exception {
            doTest("compiler/testData/codegen/box/primitiveTypes/kt882.kt");
        }
        
        @TestMetadata("kt887.kt")
        public void testKt887() throws Exception {
            doTest("compiler/testData/codegen/box/primitiveTypes/kt887.kt");
        }
        
        @TestMetadata("kt935.kt")
        public void testKt935() throws Exception {
            doTest("compiler/testData/codegen/box/primitiveTypes/kt935.kt");
        }
        
        @TestMetadata("kt945.kt")
        public void testKt945() throws Exception {
            doTest("compiler/testData/codegen/box/primitiveTypes/kt945.kt");
        }
        
        @TestMetadata("nullAsNullableIntIsNull.kt")
        public void testNullAsNullableIntIsNull() throws Exception {
            doTest("compiler/testData/codegen/box/primitiveTypes/nullAsNullableIntIsNull.kt");
        }
        
        @TestMetadata("unboxComparable.kt")
        public void testUnboxComparable() throws Exception {
            doTest("compiler/testData/codegen/box/primitiveTypes/unboxComparable.kt");
        }
        
    }
    
    @TestMetadata("compiler/testData/codegen/box/properties")
    public static class Properties extends AbstractBlackBoxCodegenTest {
        @TestMetadata("accessToPrivateProperty.kt")
        public void testAccessToPrivateProperty() throws Exception {
            doTest("compiler/testData/codegen/box/properties/accessToPrivateProperty.kt");
        }
        
        @TestMetadata("accessToPrivateSetter.kt")
        public void testAccessToPrivateSetter() throws Exception {
            doTest("compiler/testData/codegen/box/properties/accessToPrivateSetter.kt");
        }
        
        public void testAllFilesPresentInProperties() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/codegen/box/properties"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("kt1159.kt")
        public void testKt1159() throws Exception {
            doTest("compiler/testData/codegen/box/properties/kt1159.kt");
        }
        
        @TestMetadata("kt1165.kt")
        public void testKt1165() throws Exception {
            doTest("compiler/testData/codegen/box/properties/kt1165.kt");
        }
        
        @TestMetadata("kt1168.kt")
        public void testKt1168() throws Exception {
            doTest("compiler/testData/codegen/box/properties/kt1168.kt");
        }
        
        @TestMetadata("kt1170.kt")
        public void testKt1170() throws Exception {
            doTest("compiler/testData/codegen/box/properties/kt1170.kt");
        }
        
        @TestMetadata("kt1398.kt")
        public void testKt1398() throws Exception {
            doTest("compiler/testData/codegen/box/properties/kt1398.kt");
        }
        
        @TestMetadata("kt1417.kt")
        public void testKt1417() throws Exception {
            doTest("compiler/testData/codegen/box/properties/kt1417.kt");
        }
        
        @TestMetadata("kt1482_2279.kt")
        public void testKt1482_2279() throws Exception {
            doTest("compiler/testData/codegen/box/properties/kt1482_2279.kt");
        }
        
        @TestMetadata("kt1714.kt")
        public void testKt1714() throws Exception {
            doTest("compiler/testData/codegen/box/properties/kt1714.kt");
        }
        
        @TestMetadata("kt1714_minimal.kt")
        public void testKt1714_minimal() throws Exception {
            doTest("compiler/testData/codegen/box/properties/kt1714_minimal.kt");
        }
        
        @TestMetadata("kt1892.kt")
        public void testKt1892() throws Exception {
            doTest("compiler/testData/codegen/box/properties/kt1892.kt");
        }
        
        @TestMetadata("kt2331.kt")
        public void testKt2331() throws Exception {
            doTest("compiler/testData/codegen/box/properties/kt2331.kt");
        }
        
        @TestMetadata("kt257.kt")
        public void testKt257() throws Exception {
            doTest("compiler/testData/codegen/box/properties/kt257.kt");
        }
        
        @TestMetadata("kt2655.kt")
        public void testKt2655() throws Exception {
            doTest("compiler/testData/codegen/box/properties/kt2655.kt");
        }
        
        @TestMetadata("kt2786.kt")
        public void testKt2786() throws Exception {
            doTest("compiler/testData/codegen/box/properties/kt2786.kt");
        }
        
        @TestMetadata("kt2892.kt")
        public void testKt2892() throws Exception {
            doTest("compiler/testData/codegen/box/properties/kt2892.kt");
        }
        
        @TestMetadata("kt613.kt")
        public void testKt613() throws Exception {
            doTest("compiler/testData/codegen/box/properties/kt613.kt");
        }
        
    }
    
    @TestMetadata("compiler/testData/codegen/box/safeCall")
    public static class SafeCall extends AbstractBlackBoxCodegenTest {
        public void testAllFilesPresentInSafeCall() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/codegen/box/safeCall"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("genericNull.kt")
        public void testGenericNull() throws Exception {
            doTest("compiler/testData/codegen/box/safeCall/genericNull.kt");
        }
        
        @TestMetadata("kt1572.kt")
        public void testKt1572() throws Exception {
            doTest("compiler/testData/codegen/box/safeCall/kt1572.kt");
        }
        
        @TestMetadata("kt232.kt")
        public void testKt232() throws Exception {
            doTest("compiler/testData/codegen/box/safeCall/kt232.kt");
        }
        
        @TestMetadata("kt245.kt")
        public void testKt245() throws Exception {
            doTest("compiler/testData/codegen/box/safeCall/kt245.kt");
        }
        
        @TestMetadata("kt247.kt")
        public void testKt247() throws Exception {
            doTest("compiler/testData/codegen/box/safeCall/kt247.kt");
        }
        
        @TestMetadata("primitive.kt")
        public void testPrimitive() throws Exception {
            doTest("compiler/testData/codegen/box/safeCall/primitive.kt");
        }
        
    }
    
    @TestMetadata("compiler/testData/codegen/box/sam")
    public static class Sam extends AbstractBlackBoxCodegenTest {
        public void testAllFilesPresentInSam() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/codegen/box/sam"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("runnable.kt")
        public void testRunnable() throws Exception {
            doTest("compiler/testData/codegen/box/sam/runnable.kt");
        }
        
        @TestMetadata("runnableAccessingClosure1.kt")
        public void testRunnableAccessingClosure1() throws Exception {
            doTest("compiler/testData/codegen/box/sam/runnableAccessingClosure1.kt");
        }
        
        @TestMetadata("runnableAccessingClosure2.kt")
        public void testRunnableAccessingClosure2() throws Exception {
            doTest("compiler/testData/codegen/box/sam/runnableAccessingClosure2.kt");
        }
        
    }
    
    @TestMetadata("compiler/testData/codegen/box/strings")
    public static class Strings extends AbstractBlackBoxCodegenTest {
        public void testAllFilesPresentInStrings() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/codegen/box/strings"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("ea35743.kt")
        public void testEa35743() throws Exception {
            doTest("compiler/testData/codegen/box/strings/ea35743.kt");
        }
        
        @TestMetadata("kt881.kt")
        public void testKt881() throws Exception {
            doTest("compiler/testData/codegen/box/strings/kt881.kt");
        }
        
        @TestMetadata("kt889.kt")
        public void testKt889() throws Exception {
            doTest("compiler/testData/codegen/box/strings/kt889.kt");
        }
        
        @TestMetadata("kt894.kt")
        public void testKt894() throws Exception {
            doTest("compiler/testData/codegen/box/strings/kt894.kt");
        }
        
        @TestMetadata("multilineStringsWithTemplates.kt")
        public void testMultilineStringsWithTemplates() throws Exception {
            doTest("compiler/testData/codegen/box/strings/multilineStringsWithTemplates.kt");
        }
        
        @TestMetadata("rawStrings.kt")
        public void testRawStrings() throws Exception {
            doTest("compiler/testData/codegen/box/strings/rawStrings.kt");
        }
        
    }
    
    @TestMetadata("compiler/testData/codegen/box/super")
    public static class Super extends AbstractBlackBoxCodegenTest {
        public void testAllFilesPresentInSuper() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/codegen/box/super"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("basicmethodSuperClass.kt")
        public void testBasicmethodSuperClass() throws Exception {
            doTest("compiler/testData/codegen/box/super/basicmethodSuperClass.kt");
        }
        
        @TestMetadata("basicmethodSuperTrait.kt")
        public void testBasicmethodSuperTrait() throws Exception {
            doTest("compiler/testData/codegen/box/super/basicmethodSuperTrait.kt");
        }
        
        @TestMetadata("basicproperty.kt")
        public void testBasicproperty() throws Exception {
            doTest("compiler/testData/codegen/box/super/basicproperty.kt");
        }
        
        @TestMetadata("enclosedFun.kt")
        public void testEnclosedFun() throws Exception {
            doTest("compiler/testData/codegen/box/super/enclosedFun.kt");
        }
        
        @TestMetadata("enclosedVar.kt")
        public void testEnclosedVar() throws Exception {
            doTest("compiler/testData/codegen/box/super/enclosedVar.kt");
        }
        
        @TestMetadata("innerClassLabeledSuper.kt")
        public void testInnerClassLabeledSuper() throws Exception {
            doTest("compiler/testData/codegen/box/super/innerClassLabeledSuper.kt");
        }
        
        @TestMetadata("innerClassLabeledSuperProperty.kt")
        public void testInnerClassLabeledSuperProperty() throws Exception {
            doTest("compiler/testData/codegen/box/super/innerClassLabeledSuperProperty.kt");
        }
        
        @TestMetadata("multipleSuperTraits.kt")
        public void testMultipleSuperTraits() throws Exception {
            doTest("compiler/testData/codegen/box/super/multipleSuperTraits.kt");
        }
        
        @TestMetadata("traitproperty.kt")
        public void testTraitproperty() throws Exception {
            doTest("compiler/testData/codegen/box/super/traitproperty.kt");
        }
        
    }
    
    @TestMetadata("compiler/testData/codegen/box/traits")
    public static class Traits extends AbstractBlackBoxCodegenTest {
        public void testAllFilesPresentInTraits() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/codegen/box/traits"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("finalMethod.kt")
        public void testFinalMethod() throws Exception {
            doTest("compiler/testData/codegen/box/traits/finalMethod.kt");
        }
        
        @TestMetadata("inheritedFun.kt")
        public void testInheritedFun() throws Exception {
            doTest("compiler/testData/codegen/box/traits/inheritedFun.kt");
        }
        
        @TestMetadata("inheritedVar.kt")
        public void testInheritedVar() throws Exception {
            doTest("compiler/testData/codegen/box/traits/inheritedVar.kt");
        }
        
        @TestMetadata("kt1936_1.kt")
        public void testKt1936_1() throws Exception {
            doTest("compiler/testData/codegen/box/traits/kt1936_1.kt");
        }
        
        @TestMetadata("kt1936_2.kt")
        public void testKt1936_2() throws Exception {
            doTest("compiler/testData/codegen/box/traits/kt1936_2.kt");
        }
        
        @TestMetadata("kt2260.kt")
        public void testKt2260() throws Exception {
            doTest("compiler/testData/codegen/box/traits/kt2260.kt");
        }
        
        @TestMetadata("kt2399.kt")
        public void testKt2399() throws Exception {
            doTest("compiler/testData/codegen/box/traits/kt2399.kt");
        }
        
        @TestMetadata("kt2541.kt")
        public void testKt2541() throws Exception {
            doTest("compiler/testData/codegen/box/traits/kt2541.kt");
        }
        
        @TestMetadata("kt2963.kt")
        public void testKt2963() throws Exception {
            doTest("compiler/testData/codegen/box/traits/kt2963.kt");
        }
        
        @TestMetadata("kt3413.kt")
        public void testKt3413() throws Exception {
            doTest("compiler/testData/codegen/box/traits/kt3413.kt");
        }
        
        @TestMetadata("multiple.kt")
        public void testMultiple() throws Exception {
            doTest("compiler/testData/codegen/box/traits/multiple.kt");
        }
        
        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            doTest("compiler/testData/codegen/box/traits/simple.kt");
        }
        
        @TestMetadata("stdlib.kt")
        public void testStdlib() throws Exception {
            doTest("compiler/testData/codegen/box/traits/stdlib.kt");
        }
        
        @TestMetadata("traitFuncCall.kt")
        public void testTraitFuncCall() throws Exception {
            doTest("compiler/testData/codegen/box/traits/traitFuncCall.kt");
        }
        
        @TestMetadata("withRequired.kt")
        public void testWithRequired() throws Exception {
            doTest("compiler/testData/codegen/box/traits/withRequired.kt");
        }
        
        @TestMetadata("withRequiredGenericProperty.kt")
        public void testWithRequiredGenericProperty() throws Exception {
            doTest("compiler/testData/codegen/box/traits/withRequiredGenericProperty.kt");
        }
        
        @TestMetadata("withRequiredProperty.kt")
        public void testWithRequiredProperty() throws Exception {
            doTest("compiler/testData/codegen/box/traits/withRequiredProperty.kt");
        }
        
        @TestMetadata("withRequiredPropertyViaBridge.kt")
        public void testWithRequiredPropertyViaBridge() throws Exception {
            doTest("compiler/testData/codegen/box/traits/withRequiredPropertyViaBridge.kt");
        }
        
        @TestMetadata("withRequiredSuper.kt")
        public void testWithRequiredSuper() throws Exception {
            doTest("compiler/testData/codegen/box/traits/withRequiredSuper.kt");
        }
        
        @TestMetadata("withRequiredSuperViaBridge.kt")
        public void testWithRequiredSuperViaBridge() throws Exception {
            doTest("compiler/testData/codegen/box/traits/withRequiredSuperViaBridge.kt");
        }
        
    }
    
    @TestMetadata("compiler/testData/codegen/box/typeInfo")
    public static class TypeInfo extends AbstractBlackBoxCodegenTest {
        public void testAllFilesPresentInTypeInfo() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/codegen/box/typeInfo"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("asInLoop.kt")
        public void testAsInLoop() throws Exception {
            doTest("compiler/testData/codegen/box/typeInfo/asInLoop.kt");
        }
        
        @TestMetadata("inheritance.kt")
        public void testInheritance() throws Exception {
            doTest("compiler/testData/codegen/box/typeInfo/inheritance.kt");
        }
        
        @TestMetadata("kt2811.kt")
        public void testKt2811() throws Exception {
            doTest("compiler/testData/codegen/box/typeInfo/kt2811.kt");
        }
        
        @TestMetadata("kt511.kt")
        public void testKt511() throws Exception {
            doTest("compiler/testData/codegen/box/typeInfo/kt511.kt");
        }
        
        @TestMetadata("primitiveTypeInfo.kt")
        public void testPrimitiveTypeInfo() throws Exception {
            doTest("compiler/testData/codegen/box/typeInfo/primitiveTypeInfo.kt");
        }
        
    }
    
    @TestMetadata("compiler/testData/codegen/box/unit")
    public static class Unit extends AbstractBlackBoxCodegenTest {
        public void testAllFilesPresentInUnit() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/codegen/box/unit"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("UnitValue.kt")
        public void testUnitValue() throws Exception {
            doTest("compiler/testData/codegen/box/unit/UnitValue.kt");
        }
        
    }
    
    @TestMetadata("compiler/testData/codegen/box/vararg")
    public static class Vararg extends AbstractBlackBoxCodegenTest {
        public void testAllFilesPresentInVararg() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/codegen/box/vararg"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("kt1978.kt")
        public void testKt1978() throws Exception {
            doTest("compiler/testData/codegen/box/vararg/kt1978.kt");
        }
        
        @TestMetadata("kt581.kt")
        public void testKt581() throws Exception {
            doTest("compiler/testData/codegen/box/vararg/kt581.kt");
        }
        
        @TestMetadata("kt796_797.kt")
        public void testKt796_797() throws Exception {
            doTest("compiler/testData/codegen/box/vararg/kt796_797.kt");
        }
        
        @TestMetadata("varargsAndFunctionLiterals.kt")
        public void testVarargsAndFunctionLiterals() throws Exception {
            doTest("compiler/testData/codegen/box/vararg/varargsAndFunctionLiterals.kt");
        }
        
    }
    
    @TestMetadata("compiler/testData/codegen/box/when")
    public static class When extends AbstractBlackBoxCodegenTest {
        public void testAllFilesPresentInWhen() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/codegen/box/when"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("callProperty.kt")
        public void testCallProperty() throws Exception {
            doTest("compiler/testData/codegen/box/when/callProperty.kt");
        }
        
        @TestMetadata("is.kt")
        public void testIs() throws Exception {
            doTest("compiler/testData/codegen/box/when/is.kt");
        }
        
        @TestMetadata("kt2457.kt")
        public void testKt2457() throws Exception {
            doTest("compiler/testData/codegen/box/when/kt2457.kt");
        }
        
        @TestMetadata("kt2466.kt")
        public void testKt2466() throws Exception {
            doTest("compiler/testData/codegen/box/when/kt2466.kt");
        }
        
        @TestMetadata("longInRange.kt")
        public void testLongInRange() throws Exception {
            doTest("compiler/testData/codegen/box/when/longInRange.kt");
        }
        
        @TestMetadata("matchNotNullAgainstNullable.kt")
        public void testMatchNotNullAgainstNullable() throws Exception {
            doTest("compiler/testData/codegen/box/when/matchNotNullAgainstNullable.kt");
        }
        
        @TestMetadata("nullableWhen.kt")
        public void testNullableWhen() throws Exception {
            doTest("compiler/testData/codegen/box/when/nullableWhen.kt");
        }
        
        @TestMetadata("range.kt")
        public void testRange() throws Exception {
            doTest("compiler/testData/codegen/box/when/range.kt");
        }
        
        @TestMetadata("whenArgumentIsEvaluatedOnlyOnce.kt")
        public void testWhenArgumentIsEvaluatedOnlyOnce() throws Exception {
            doTest("compiler/testData/codegen/box/when/whenArgumentIsEvaluatedOnlyOnce.kt");
        }
        
    }
    
    public static Test suite() {
        TestSuite suite = new TestSuite("BlackBoxCodegenTestGenerated");
        suite.addTestSuite(BlackBoxCodegenTestGenerated.class);
        suite.addTestSuite(Arrays.class);
        suite.addTestSuite(Bridges.class);
        suite.addTestSuite(Casts.class);
        suite.addTestSuite(Classes.class);
        suite.addTest(Closures.innerSuite());
        suite.addTestSuite(ControlStructures.class);
        suite.addTest(DefaultArguments.innerSuite());
        suite.addTestSuite(Elvis.class);
        suite.addTestSuite(Enum.class);
        suite.addTestSuite(ExclExcl.class);
        suite.addTestSuite(ExtensionFunctions.class);
        suite.addTestSuite(ExtensionProperties.class);
        suite.addTest(Functions.innerSuite());
        suite.addTestSuite(InnerNested.class);
        suite.addTest(Instructions.innerSuite());
        suite.addTestSuite(Intrinsics.class);
        suite.addTestSuite(Labels.class);
        suite.addTestSuite(LocalClasses.class);
        suite.addTest(MultiDecl.innerSuite());
        suite.addTestSuite(Namespace.class);
        suite.addTestSuite(Objects.class);
        suite.addTest(OperatorConventions.innerSuite());
        suite.addTestSuite(PrimitiveTypes.class);
        suite.addTestSuite(Properties.class);
        suite.addTestSuite(SafeCall.class);
        suite.addTestSuite(Sam.class);
        suite.addTestSuite(Strings.class);
        suite.addTestSuite(Super.class);
        suite.addTestSuite(Traits.class);
        suite.addTestSuite(TypeInfo.class);
        suite.addTestSuite(Unit.class);
        suite.addTestSuite(Vararg.class);
        suite.addTestSuite(When.class);
        return suite;
    }
}
