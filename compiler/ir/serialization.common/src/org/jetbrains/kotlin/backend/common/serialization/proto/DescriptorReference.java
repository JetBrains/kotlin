// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: compiler/ir/serialization.common/src/KotlinIr.proto

package org.jetbrains.kotlin.backend.common.serialization.proto;

/**
 * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.DescriptorReference}
 */
public final class DescriptorReference extends
    org.jetbrains.kotlin.protobuf.GeneratedMessageLite implements
    // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.common.serialization.proto.DescriptorReference)
    DescriptorReferenceOrBuilder {
  // Use DescriptorReference.newBuilder() to construct.
  private DescriptorReference(org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder builder) {
    super(builder);
    this.unknownFields = builder.getUnknownFields();
  }
  private DescriptorReference(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.ByteString.EMPTY;}

  private static final DescriptorReference defaultInstance;
  public static DescriptorReference getDefaultInstance() {
    return defaultInstance;
  }

  public DescriptorReference getDefaultInstanceForType() {
    return defaultInstance;
  }

  private final org.jetbrains.kotlin.protobuf.ByteString unknownFields;
  private DescriptorReference(
      org.jetbrains.kotlin.protobuf.CodedInputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    initFields();
    int mutable_bitField0_ = 0;
    org.jetbrains.kotlin.protobuf.ByteString.Output unknownFieldsOutput =
        org.jetbrains.kotlin.protobuf.ByteString.newOutput();
    org.jetbrains.kotlin.protobuf.CodedOutputStream unknownFieldsCodedOutput =
        org.jetbrains.kotlin.protobuf.CodedOutputStream.newInstance(
            unknownFieldsOutput);
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                   extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
          case 10: {
            org.jetbrains.kotlin.backend.common.serialization.proto.String.Builder subBuilder = null;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
              subBuilder = packageFqName_.toBuilder();
            }
            packageFqName_ = input.readMessage(org.jetbrains.kotlin.backend.common.serialization.proto.String.PARSER, extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(packageFqName_);
              packageFqName_ = subBuilder.buildPartial();
            }
            bitField0_ |= 0x00000001;
            break;
          }
          case 18: {
            org.jetbrains.kotlin.backend.common.serialization.proto.String.Builder subBuilder = null;
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
              subBuilder = classFqName_.toBuilder();
            }
            classFqName_ = input.readMessage(org.jetbrains.kotlin.backend.common.serialization.proto.String.PARSER, extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(classFqName_);
              classFqName_ = subBuilder.buildPartial();
            }
            bitField0_ |= 0x00000002;
            break;
          }
          case 26: {
            org.jetbrains.kotlin.backend.common.serialization.proto.String.Builder subBuilder = null;
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
              subBuilder = name_.toBuilder();
            }
            name_ = input.readMessage(org.jetbrains.kotlin.backend.common.serialization.proto.String.PARSER, extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(name_);
              name_ = subBuilder.buildPartial();
            }
            bitField0_ |= 0x00000004;
            break;
          }
          case 34: {
            org.jetbrains.kotlin.backend.common.serialization.proto.UniqId.Builder subBuilder = null;
            if (((bitField0_ & 0x00000008) == 0x00000008)) {
              subBuilder = uniqId_.toBuilder();
            }
            uniqId_ = input.readMessage(org.jetbrains.kotlin.backend.common.serialization.proto.UniqId.PARSER, extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(uniqId_);
              uniqId_ = subBuilder.buildPartial();
            }
            bitField0_ |= 0x00000008;
            break;
          }
          case 40: {
            bitField0_ |= 0x00000010;
            isGetter_ = input.readBool();
            break;
          }
          case 48: {
            bitField0_ |= 0x00000020;
            isSetter_ = input.readBool();
            break;
          }
          case 56: {
            bitField0_ |= 0x00000040;
            isBackingField_ = input.readBool();
            break;
          }
          case 64: {
            bitField0_ |= 0x00000080;
            isFakeOverride_ = input.readBool();
            break;
          }
          case 72: {
            bitField0_ |= 0x00000100;
            isDefaultConstructor_ = input.readBool();
            break;
          }
          case 80: {
            bitField0_ |= 0x00000200;
            isEnumEntry_ = input.readBool();
            break;
          }
          case 88: {
            bitField0_ |= 0x00000400;
            isEnumSpecial_ = input.readBool();
            break;
          }
          case 96: {
            bitField0_ |= 0x00000800;
            isTypeParameter_ = input.readBool();
            break;
          }
        }
      }
    } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
          e.getMessage()).setUnfinishedMessage(this);
    } finally {
      try {
        unknownFieldsCodedOutput.flush();
      } catch (java.io.IOException e) {
      // Should not happen
      } finally {
        unknownFields = unknownFieldsOutput.toByteString();
      }
      makeExtensionsImmutable();
    }
  }
  public static org.jetbrains.kotlin.protobuf.Parser<DescriptorReference> PARSER =
      new org.jetbrains.kotlin.protobuf.AbstractParser<DescriptorReference>() {
    public DescriptorReference parsePartialFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return new DescriptorReference(input, extensionRegistry);
    }
  };

  @java.lang.Override
  public org.jetbrains.kotlin.protobuf.Parser<DescriptorReference> getParserForType() {
    return PARSER;
  }

  private int bitField0_;
  public static final int PACKAGE_FQ_NAME_FIELD_NUMBER = 1;
  private org.jetbrains.kotlin.backend.common.serialization.proto.String packageFqName_;
  /**
   * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.String package_fq_name = 1;</code>
   */
  public boolean hasPackageFqName() {
    return ((bitField0_ & 0x00000001) == 0x00000001);
  }
  /**
   * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.String package_fq_name = 1;</code>
   */
  public org.jetbrains.kotlin.backend.common.serialization.proto.String getPackageFqName() {
    return packageFqName_;
  }

  public static final int CLASS_FQ_NAME_FIELD_NUMBER = 2;
  private org.jetbrains.kotlin.backend.common.serialization.proto.String classFqName_;
  /**
   * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.String class_fq_name = 2;</code>
   */
  public boolean hasClassFqName() {
    return ((bitField0_ & 0x00000002) == 0x00000002);
  }
  /**
   * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.String class_fq_name = 2;</code>
   */
  public org.jetbrains.kotlin.backend.common.serialization.proto.String getClassFqName() {
    return classFqName_;
  }

  public static final int NAME_FIELD_NUMBER = 3;
  private org.jetbrains.kotlin.backend.common.serialization.proto.String name_;
  /**
   * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.String name = 3;</code>
   */
  public boolean hasName() {
    return ((bitField0_ & 0x00000004) == 0x00000004);
  }
  /**
   * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.String name = 3;</code>
   */
  public org.jetbrains.kotlin.backend.common.serialization.proto.String getName() {
    return name_;
  }

  public static final int UNIQ_ID_FIELD_NUMBER = 4;
  private org.jetbrains.kotlin.backend.common.serialization.proto.UniqId uniqId_;
  /**
   * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.UniqId uniq_id = 4;</code>
   */
  public boolean hasUniqId() {
    return ((bitField0_ & 0x00000008) == 0x00000008);
  }
  /**
   * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.UniqId uniq_id = 4;</code>
   */
  public org.jetbrains.kotlin.backend.common.serialization.proto.UniqId getUniqId() {
    return uniqId_;
  }

  public static final int IS_GETTER_FIELD_NUMBER = 5;
  private boolean isGetter_;
  /**
   * <code>optional bool is_getter = 5 [default = false];</code>
   */
  public boolean hasIsGetter() {
    return ((bitField0_ & 0x00000010) == 0x00000010);
  }
  /**
   * <code>optional bool is_getter = 5 [default = false];</code>
   */
  public boolean getIsGetter() {
    return isGetter_;
  }

  public static final int IS_SETTER_FIELD_NUMBER = 6;
  private boolean isSetter_;
  /**
   * <code>optional bool is_setter = 6 [default = false];</code>
   */
  public boolean hasIsSetter() {
    return ((bitField0_ & 0x00000020) == 0x00000020);
  }
  /**
   * <code>optional bool is_setter = 6 [default = false];</code>
   */
  public boolean getIsSetter() {
    return isSetter_;
  }

  public static final int IS_BACKING_FIELD_FIELD_NUMBER = 7;
  private boolean isBackingField_;
  /**
   * <code>optional bool is_backing_field = 7 [default = false];</code>
   */
  public boolean hasIsBackingField() {
    return ((bitField0_ & 0x00000040) == 0x00000040);
  }
  /**
   * <code>optional bool is_backing_field = 7 [default = false];</code>
   */
  public boolean getIsBackingField() {
    return isBackingField_;
  }

  public static final int IS_FAKE_OVERRIDE_FIELD_NUMBER = 8;
  private boolean isFakeOverride_;
  /**
   * <code>optional bool is_fake_override = 8 [default = false];</code>
   */
  public boolean hasIsFakeOverride() {
    return ((bitField0_ & 0x00000080) == 0x00000080);
  }
  /**
   * <code>optional bool is_fake_override = 8 [default = false];</code>
   */
  public boolean getIsFakeOverride() {
    return isFakeOverride_;
  }

  public static final int IS_DEFAULT_CONSTRUCTOR_FIELD_NUMBER = 9;
  private boolean isDefaultConstructor_;
  /**
   * <code>optional bool is_default_constructor = 9 [default = false];</code>
   */
  public boolean hasIsDefaultConstructor() {
    return ((bitField0_ & 0x00000100) == 0x00000100);
  }
  /**
   * <code>optional bool is_default_constructor = 9 [default = false];</code>
   */
  public boolean getIsDefaultConstructor() {
    return isDefaultConstructor_;
  }

  public static final int IS_ENUM_ENTRY_FIELD_NUMBER = 10;
  private boolean isEnumEntry_;
  /**
   * <code>optional bool is_enum_entry = 10 [default = false];</code>
   */
  public boolean hasIsEnumEntry() {
    return ((bitField0_ & 0x00000200) == 0x00000200);
  }
  /**
   * <code>optional bool is_enum_entry = 10 [default = false];</code>
   */
  public boolean getIsEnumEntry() {
    return isEnumEntry_;
  }

  public static final int IS_ENUM_SPECIAL_FIELD_NUMBER = 11;
  private boolean isEnumSpecial_;
  /**
   * <code>optional bool is_enum_special = 11 [default = false];</code>
   */
  public boolean hasIsEnumSpecial() {
    return ((bitField0_ & 0x00000400) == 0x00000400);
  }
  /**
   * <code>optional bool is_enum_special = 11 [default = false];</code>
   */
  public boolean getIsEnumSpecial() {
    return isEnumSpecial_;
  }

  public static final int IS_TYPE_PARAMETER_FIELD_NUMBER = 12;
  private boolean isTypeParameter_;
  /**
   * <code>optional bool is_type_parameter = 12 [default = false];</code>
   */
  public boolean hasIsTypeParameter() {
    return ((bitField0_ & 0x00000800) == 0x00000800);
  }
  /**
   * <code>optional bool is_type_parameter = 12 [default = false];</code>
   */
  public boolean getIsTypeParameter() {
    return isTypeParameter_;
  }

  private void initFields() {
    packageFqName_ = org.jetbrains.kotlin.backend.common.serialization.proto.String.getDefaultInstance();
    classFqName_ = org.jetbrains.kotlin.backend.common.serialization.proto.String.getDefaultInstance();
    name_ = org.jetbrains.kotlin.backend.common.serialization.proto.String.getDefaultInstance();
    uniqId_ = org.jetbrains.kotlin.backend.common.serialization.proto.UniqId.getDefaultInstance();
    isGetter_ = false;
    isSetter_ = false;
    isBackingField_ = false;
    isFakeOverride_ = false;
    isDefaultConstructor_ = false;
    isEnumEntry_ = false;
    isEnumSpecial_ = false;
    isTypeParameter_ = false;
  }
  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    if (!hasPackageFqName()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!hasClassFqName()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!hasName()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!getPackageFqName().isInitialized()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!getClassFqName().isInitialized()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!getName().isInitialized()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (hasUniqId()) {
      if (!getUniqId().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
    }
    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    getSerializedSize();
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      output.writeMessage(1, packageFqName_);
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      output.writeMessage(2, classFqName_);
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      output.writeMessage(3, name_);
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      output.writeMessage(4, uniqId_);
    }
    if (((bitField0_ & 0x00000010) == 0x00000010)) {
      output.writeBool(5, isGetter_);
    }
    if (((bitField0_ & 0x00000020) == 0x00000020)) {
      output.writeBool(6, isSetter_);
    }
    if (((bitField0_ & 0x00000040) == 0x00000040)) {
      output.writeBool(7, isBackingField_);
    }
    if (((bitField0_ & 0x00000080) == 0x00000080)) {
      output.writeBool(8, isFakeOverride_);
    }
    if (((bitField0_ & 0x00000100) == 0x00000100)) {
      output.writeBool(9, isDefaultConstructor_);
    }
    if (((bitField0_ & 0x00000200) == 0x00000200)) {
      output.writeBool(10, isEnumEntry_);
    }
    if (((bitField0_ & 0x00000400) == 0x00000400)) {
      output.writeBool(11, isEnumSpecial_);
    }
    if (((bitField0_ & 0x00000800) == 0x00000800)) {
      output.writeBool(12, isTypeParameter_);
    }
    output.writeRawBytes(unknownFields);
  }

  private int memoizedSerializedSize = -1;
  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeMessageSize(1, packageFqName_);
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeMessageSize(2, classFqName_);
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeMessageSize(3, name_);
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeMessageSize(4, uniqId_);
    }
    if (((bitField0_ & 0x00000010) == 0x00000010)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeBoolSize(5, isGetter_);
    }
    if (((bitField0_ & 0x00000020) == 0x00000020)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeBoolSize(6, isSetter_);
    }
    if (((bitField0_ & 0x00000040) == 0x00000040)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeBoolSize(7, isBackingField_);
    }
    if (((bitField0_ & 0x00000080) == 0x00000080)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeBoolSize(8, isFakeOverride_);
    }
    if (((bitField0_ & 0x00000100) == 0x00000100)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeBoolSize(9, isDefaultConstructor_);
    }
    if (((bitField0_ & 0x00000200) == 0x00000200)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeBoolSize(10, isEnumEntry_);
    }
    if (((bitField0_ & 0x00000400) == 0x00000400)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeBoolSize(11, isEnumSpecial_);
    }
    if (((bitField0_ & 0x00000800) == 0x00000800)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeBoolSize(12, isTypeParameter_);
    }
    size += unknownFields.size();
    memoizedSerializedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @java.lang.Override
  protected java.lang.Object writeReplace()
      throws java.io.ObjectStreamException {
    return super.writeReplace();
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.DescriptorReference parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.DescriptorReference parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.DescriptorReference parseFrom(byte[] data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.DescriptorReference parseFrom(
      byte[] data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.DescriptorReference parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.DescriptorReference parseFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.DescriptorReference parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.DescriptorReference parseDelimitedFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.DescriptorReference parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.DescriptorReference parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }

  public static Builder newBuilder() { return Builder.create(); }
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder(org.jetbrains.kotlin.backend.common.serialization.proto.DescriptorReference prototype) {
    return newBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() { return newBuilder(this); }

  /**
   * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.DescriptorReference}
   */
  public static final class Builder extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
        org.jetbrains.kotlin.backend.common.serialization.proto.DescriptorReference, Builder>
      implements
      // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.common.serialization.proto.DescriptorReference)
      org.jetbrains.kotlin.backend.common.serialization.proto.DescriptorReferenceOrBuilder {
    // Construct using org.jetbrains.kotlin.backend.common.serialization.proto.DescriptorReference.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private void maybeForceBuilderInitialization() {
    }
    private static Builder create() {
      return new Builder();
    }

    public Builder clear() {
      super.clear();
      packageFqName_ = org.jetbrains.kotlin.backend.common.serialization.proto.String.getDefaultInstance();
      bitField0_ = (bitField0_ & ~0x00000001);
      classFqName_ = org.jetbrains.kotlin.backend.common.serialization.proto.String.getDefaultInstance();
      bitField0_ = (bitField0_ & ~0x00000002);
      name_ = org.jetbrains.kotlin.backend.common.serialization.proto.String.getDefaultInstance();
      bitField0_ = (bitField0_ & ~0x00000004);
      uniqId_ = org.jetbrains.kotlin.backend.common.serialization.proto.UniqId.getDefaultInstance();
      bitField0_ = (bitField0_ & ~0x00000008);
      isGetter_ = false;
      bitField0_ = (bitField0_ & ~0x00000010);
      isSetter_ = false;
      bitField0_ = (bitField0_ & ~0x00000020);
      isBackingField_ = false;
      bitField0_ = (bitField0_ & ~0x00000040);
      isFakeOverride_ = false;
      bitField0_ = (bitField0_ & ~0x00000080);
      isDefaultConstructor_ = false;
      bitField0_ = (bitField0_ & ~0x00000100);
      isEnumEntry_ = false;
      bitField0_ = (bitField0_ & ~0x00000200);
      isEnumSpecial_ = false;
      bitField0_ = (bitField0_ & ~0x00000400);
      isTypeParameter_ = false;
      bitField0_ = (bitField0_ & ~0x00000800);
      return this;
    }

    public Builder clone() {
      return create().mergeFrom(buildPartial());
    }

    public org.jetbrains.kotlin.backend.common.serialization.proto.DescriptorReference getDefaultInstanceForType() {
      return org.jetbrains.kotlin.backend.common.serialization.proto.DescriptorReference.getDefaultInstance();
    }

    public org.jetbrains.kotlin.backend.common.serialization.proto.DescriptorReference build() {
      org.jetbrains.kotlin.backend.common.serialization.proto.DescriptorReference result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public org.jetbrains.kotlin.backend.common.serialization.proto.DescriptorReference buildPartial() {
      org.jetbrains.kotlin.backend.common.serialization.proto.DescriptorReference result = new org.jetbrains.kotlin.backend.common.serialization.proto.DescriptorReference(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
        to_bitField0_ |= 0x00000001;
      }
      result.packageFqName_ = packageFqName_;
      if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
        to_bitField0_ |= 0x00000002;
      }
      result.classFqName_ = classFqName_;
      if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
        to_bitField0_ |= 0x00000004;
      }
      result.name_ = name_;
      if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
        to_bitField0_ |= 0x00000008;
      }
      result.uniqId_ = uniqId_;
      if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
        to_bitField0_ |= 0x00000010;
      }
      result.isGetter_ = isGetter_;
      if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
        to_bitField0_ |= 0x00000020;
      }
      result.isSetter_ = isSetter_;
      if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
        to_bitField0_ |= 0x00000040;
      }
      result.isBackingField_ = isBackingField_;
      if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
        to_bitField0_ |= 0x00000080;
      }
      result.isFakeOverride_ = isFakeOverride_;
      if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
        to_bitField0_ |= 0x00000100;
      }
      result.isDefaultConstructor_ = isDefaultConstructor_;
      if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
        to_bitField0_ |= 0x00000200;
      }
      result.isEnumEntry_ = isEnumEntry_;
      if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
        to_bitField0_ |= 0x00000400;
      }
      result.isEnumSpecial_ = isEnumSpecial_;
      if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
        to_bitField0_ |= 0x00000800;
      }
      result.isTypeParameter_ = isTypeParameter_;
      result.bitField0_ = to_bitField0_;
      return result;
    }

    public Builder mergeFrom(org.jetbrains.kotlin.backend.common.serialization.proto.DescriptorReference other) {
      if (other == org.jetbrains.kotlin.backend.common.serialization.proto.DescriptorReference.getDefaultInstance()) return this;
      if (other.hasPackageFqName()) {
        mergePackageFqName(other.getPackageFqName());
      }
      if (other.hasClassFqName()) {
        mergeClassFqName(other.getClassFqName());
      }
      if (other.hasName()) {
        mergeName(other.getName());
      }
      if (other.hasUniqId()) {
        mergeUniqId(other.getUniqId());
      }
      if (other.hasIsGetter()) {
        setIsGetter(other.getIsGetter());
      }
      if (other.hasIsSetter()) {
        setIsSetter(other.getIsSetter());
      }
      if (other.hasIsBackingField()) {
        setIsBackingField(other.getIsBackingField());
      }
      if (other.hasIsFakeOverride()) {
        setIsFakeOverride(other.getIsFakeOverride());
      }
      if (other.hasIsDefaultConstructor()) {
        setIsDefaultConstructor(other.getIsDefaultConstructor());
      }
      if (other.hasIsEnumEntry()) {
        setIsEnumEntry(other.getIsEnumEntry());
      }
      if (other.hasIsEnumSpecial()) {
        setIsEnumSpecial(other.getIsEnumSpecial());
      }
      if (other.hasIsTypeParameter()) {
        setIsTypeParameter(other.getIsTypeParameter());
      }
      setUnknownFields(
          getUnknownFields().concat(other.unknownFields));
      return this;
    }

    public final boolean isInitialized() {
      if (!hasPackageFqName()) {
        
        return false;
      }
      if (!hasClassFqName()) {
        
        return false;
      }
      if (!hasName()) {
        
        return false;
      }
      if (!getPackageFqName().isInitialized()) {
        
        return false;
      }
      if (!getClassFqName().isInitialized()) {
        
        return false;
      }
      if (!getName().isInitialized()) {
        
        return false;
      }
      if (hasUniqId()) {
        if (!getUniqId().isInitialized()) {
          
          return false;
        }
      }
      return true;
    }

    public Builder mergeFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      org.jetbrains.kotlin.backend.common.serialization.proto.DescriptorReference parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (org.jetbrains.kotlin.backend.common.serialization.proto.DescriptorReference) e.getUnfinishedMessage();
        throw e;
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private org.jetbrains.kotlin.backend.common.serialization.proto.String packageFqName_ = org.jetbrains.kotlin.backend.common.serialization.proto.String.getDefaultInstance();
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.String package_fq_name = 1;</code>
     */
    public boolean hasPackageFqName() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.String package_fq_name = 1;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.String getPackageFqName() {
      return packageFqName_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.String package_fq_name = 1;</code>
     */
    public Builder setPackageFqName(org.jetbrains.kotlin.backend.common.serialization.proto.String value) {
      if (value == null) {
        throw new NullPointerException();
      }
      packageFqName_ = value;

      bitField0_ |= 0x00000001;
      return this;
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.String package_fq_name = 1;</code>
     */
    public Builder setPackageFqName(
        org.jetbrains.kotlin.backend.common.serialization.proto.String.Builder builderForValue) {
      packageFqName_ = builderForValue.build();

      bitField0_ |= 0x00000001;
      return this;
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.String package_fq_name = 1;</code>
     */
    public Builder mergePackageFqName(org.jetbrains.kotlin.backend.common.serialization.proto.String value) {
      if (((bitField0_ & 0x00000001) == 0x00000001) &&
          packageFqName_ != org.jetbrains.kotlin.backend.common.serialization.proto.String.getDefaultInstance()) {
        packageFqName_ =
          org.jetbrains.kotlin.backend.common.serialization.proto.String.newBuilder(packageFqName_).mergeFrom(value).buildPartial();
      } else {
        packageFqName_ = value;
      }

      bitField0_ |= 0x00000001;
      return this;
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.String package_fq_name = 1;</code>
     */
    public Builder clearPackageFqName() {
      packageFqName_ = org.jetbrains.kotlin.backend.common.serialization.proto.String.getDefaultInstance();

      bitField0_ = (bitField0_ & ~0x00000001);
      return this;
    }

    private org.jetbrains.kotlin.backend.common.serialization.proto.String classFqName_ = org.jetbrains.kotlin.backend.common.serialization.proto.String.getDefaultInstance();
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.String class_fq_name = 2;</code>
     */
    public boolean hasClassFqName() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.String class_fq_name = 2;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.String getClassFqName() {
      return classFqName_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.String class_fq_name = 2;</code>
     */
    public Builder setClassFqName(org.jetbrains.kotlin.backend.common.serialization.proto.String value) {
      if (value == null) {
        throw new NullPointerException();
      }
      classFqName_ = value;

      bitField0_ |= 0x00000002;
      return this;
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.String class_fq_name = 2;</code>
     */
    public Builder setClassFqName(
        org.jetbrains.kotlin.backend.common.serialization.proto.String.Builder builderForValue) {
      classFqName_ = builderForValue.build();

      bitField0_ |= 0x00000002;
      return this;
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.String class_fq_name = 2;</code>
     */
    public Builder mergeClassFqName(org.jetbrains.kotlin.backend.common.serialization.proto.String value) {
      if (((bitField0_ & 0x00000002) == 0x00000002) &&
          classFqName_ != org.jetbrains.kotlin.backend.common.serialization.proto.String.getDefaultInstance()) {
        classFqName_ =
          org.jetbrains.kotlin.backend.common.serialization.proto.String.newBuilder(classFqName_).mergeFrom(value).buildPartial();
      } else {
        classFqName_ = value;
      }

      bitField0_ |= 0x00000002;
      return this;
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.String class_fq_name = 2;</code>
     */
    public Builder clearClassFqName() {
      classFqName_ = org.jetbrains.kotlin.backend.common.serialization.proto.String.getDefaultInstance();

      bitField0_ = (bitField0_ & ~0x00000002);
      return this;
    }

    private org.jetbrains.kotlin.backend.common.serialization.proto.String name_ = org.jetbrains.kotlin.backend.common.serialization.proto.String.getDefaultInstance();
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.String name = 3;</code>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.String name = 3;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.String getName() {
      return name_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.String name = 3;</code>
     */
    public Builder setName(org.jetbrains.kotlin.backend.common.serialization.proto.String value) {
      if (value == null) {
        throw new NullPointerException();
      }
      name_ = value;

      bitField0_ |= 0x00000004;
      return this;
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.String name = 3;</code>
     */
    public Builder setName(
        org.jetbrains.kotlin.backend.common.serialization.proto.String.Builder builderForValue) {
      name_ = builderForValue.build();

      bitField0_ |= 0x00000004;
      return this;
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.String name = 3;</code>
     */
    public Builder mergeName(org.jetbrains.kotlin.backend.common.serialization.proto.String value) {
      if (((bitField0_ & 0x00000004) == 0x00000004) &&
          name_ != org.jetbrains.kotlin.backend.common.serialization.proto.String.getDefaultInstance()) {
        name_ =
          org.jetbrains.kotlin.backend.common.serialization.proto.String.newBuilder(name_).mergeFrom(value).buildPartial();
      } else {
        name_ = value;
      }

      bitField0_ |= 0x00000004;
      return this;
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.String name = 3;</code>
     */
    public Builder clearName() {
      name_ = org.jetbrains.kotlin.backend.common.serialization.proto.String.getDefaultInstance();

      bitField0_ = (bitField0_ & ~0x00000004);
      return this;
    }

    private org.jetbrains.kotlin.backend.common.serialization.proto.UniqId uniqId_ = org.jetbrains.kotlin.backend.common.serialization.proto.UniqId.getDefaultInstance();
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.UniqId uniq_id = 4;</code>
     */
    public boolean hasUniqId() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.UniqId uniq_id = 4;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.UniqId getUniqId() {
      return uniqId_;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.UniqId uniq_id = 4;</code>
     */
    public Builder setUniqId(org.jetbrains.kotlin.backend.common.serialization.proto.UniqId value) {
      if (value == null) {
        throw new NullPointerException();
      }
      uniqId_ = value;

      bitField0_ |= 0x00000008;
      return this;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.UniqId uniq_id = 4;</code>
     */
    public Builder setUniqId(
        org.jetbrains.kotlin.backend.common.serialization.proto.UniqId.Builder builderForValue) {
      uniqId_ = builderForValue.build();

      bitField0_ |= 0x00000008;
      return this;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.UniqId uniq_id = 4;</code>
     */
    public Builder mergeUniqId(org.jetbrains.kotlin.backend.common.serialization.proto.UniqId value) {
      if (((bitField0_ & 0x00000008) == 0x00000008) &&
          uniqId_ != org.jetbrains.kotlin.backend.common.serialization.proto.UniqId.getDefaultInstance()) {
        uniqId_ =
          org.jetbrains.kotlin.backend.common.serialization.proto.UniqId.newBuilder(uniqId_).mergeFrom(value).buildPartial();
      } else {
        uniqId_ = value;
      }

      bitField0_ |= 0x00000008;
      return this;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.UniqId uniq_id = 4;</code>
     */
    public Builder clearUniqId() {
      uniqId_ = org.jetbrains.kotlin.backend.common.serialization.proto.UniqId.getDefaultInstance();

      bitField0_ = (bitField0_ & ~0x00000008);
      return this;
    }

    private boolean isGetter_ ;
    /**
     * <code>optional bool is_getter = 5 [default = false];</code>
     */
    public boolean hasIsGetter() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional bool is_getter = 5 [default = false];</code>
     */
    public boolean getIsGetter() {
      return isGetter_;
    }
    /**
     * <code>optional bool is_getter = 5 [default = false];</code>
     */
    public Builder setIsGetter(boolean value) {
      bitField0_ |= 0x00000010;
      isGetter_ = value;
      
      return this;
    }
    /**
     * <code>optional bool is_getter = 5 [default = false];</code>
     */
    public Builder clearIsGetter() {
      bitField0_ = (bitField0_ & ~0x00000010);
      isGetter_ = false;
      
      return this;
    }

    private boolean isSetter_ ;
    /**
     * <code>optional bool is_setter = 6 [default = false];</code>
     */
    public boolean hasIsSetter() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional bool is_setter = 6 [default = false];</code>
     */
    public boolean getIsSetter() {
      return isSetter_;
    }
    /**
     * <code>optional bool is_setter = 6 [default = false];</code>
     */
    public Builder setIsSetter(boolean value) {
      bitField0_ |= 0x00000020;
      isSetter_ = value;
      
      return this;
    }
    /**
     * <code>optional bool is_setter = 6 [default = false];</code>
     */
    public Builder clearIsSetter() {
      bitField0_ = (bitField0_ & ~0x00000020);
      isSetter_ = false;
      
      return this;
    }

    private boolean isBackingField_ ;
    /**
     * <code>optional bool is_backing_field = 7 [default = false];</code>
     */
    public boolean hasIsBackingField() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional bool is_backing_field = 7 [default = false];</code>
     */
    public boolean getIsBackingField() {
      return isBackingField_;
    }
    /**
     * <code>optional bool is_backing_field = 7 [default = false];</code>
     */
    public Builder setIsBackingField(boolean value) {
      bitField0_ |= 0x00000040;
      isBackingField_ = value;
      
      return this;
    }
    /**
     * <code>optional bool is_backing_field = 7 [default = false];</code>
     */
    public Builder clearIsBackingField() {
      bitField0_ = (bitField0_ & ~0x00000040);
      isBackingField_ = false;
      
      return this;
    }

    private boolean isFakeOverride_ ;
    /**
     * <code>optional bool is_fake_override = 8 [default = false];</code>
     */
    public boolean hasIsFakeOverride() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional bool is_fake_override = 8 [default = false];</code>
     */
    public boolean getIsFakeOverride() {
      return isFakeOverride_;
    }
    /**
     * <code>optional bool is_fake_override = 8 [default = false];</code>
     */
    public Builder setIsFakeOverride(boolean value) {
      bitField0_ |= 0x00000080;
      isFakeOverride_ = value;
      
      return this;
    }
    /**
     * <code>optional bool is_fake_override = 8 [default = false];</code>
     */
    public Builder clearIsFakeOverride() {
      bitField0_ = (bitField0_ & ~0x00000080);
      isFakeOverride_ = false;
      
      return this;
    }

    private boolean isDefaultConstructor_ ;
    /**
     * <code>optional bool is_default_constructor = 9 [default = false];</code>
     */
    public boolean hasIsDefaultConstructor() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional bool is_default_constructor = 9 [default = false];</code>
     */
    public boolean getIsDefaultConstructor() {
      return isDefaultConstructor_;
    }
    /**
     * <code>optional bool is_default_constructor = 9 [default = false];</code>
     */
    public Builder setIsDefaultConstructor(boolean value) {
      bitField0_ |= 0x00000100;
      isDefaultConstructor_ = value;
      
      return this;
    }
    /**
     * <code>optional bool is_default_constructor = 9 [default = false];</code>
     */
    public Builder clearIsDefaultConstructor() {
      bitField0_ = (bitField0_ & ~0x00000100);
      isDefaultConstructor_ = false;
      
      return this;
    }

    private boolean isEnumEntry_ ;
    /**
     * <code>optional bool is_enum_entry = 10 [default = false];</code>
     */
    public boolean hasIsEnumEntry() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional bool is_enum_entry = 10 [default = false];</code>
     */
    public boolean getIsEnumEntry() {
      return isEnumEntry_;
    }
    /**
     * <code>optional bool is_enum_entry = 10 [default = false];</code>
     */
    public Builder setIsEnumEntry(boolean value) {
      bitField0_ |= 0x00000200;
      isEnumEntry_ = value;
      
      return this;
    }
    /**
     * <code>optional bool is_enum_entry = 10 [default = false];</code>
     */
    public Builder clearIsEnumEntry() {
      bitField0_ = (bitField0_ & ~0x00000200);
      isEnumEntry_ = false;
      
      return this;
    }

    private boolean isEnumSpecial_ ;
    /**
     * <code>optional bool is_enum_special = 11 [default = false];</code>
     */
    public boolean hasIsEnumSpecial() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional bool is_enum_special = 11 [default = false];</code>
     */
    public boolean getIsEnumSpecial() {
      return isEnumSpecial_;
    }
    /**
     * <code>optional bool is_enum_special = 11 [default = false];</code>
     */
    public Builder setIsEnumSpecial(boolean value) {
      bitField0_ |= 0x00000400;
      isEnumSpecial_ = value;
      
      return this;
    }
    /**
     * <code>optional bool is_enum_special = 11 [default = false];</code>
     */
    public Builder clearIsEnumSpecial() {
      bitField0_ = (bitField0_ & ~0x00000400);
      isEnumSpecial_ = false;
      
      return this;
    }

    private boolean isTypeParameter_ ;
    /**
     * <code>optional bool is_type_parameter = 12 [default = false];</code>
     */
    public boolean hasIsTypeParameter() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional bool is_type_parameter = 12 [default = false];</code>
     */
    public boolean getIsTypeParameter() {
      return isTypeParameter_;
    }
    /**
     * <code>optional bool is_type_parameter = 12 [default = false];</code>
     */
    public Builder setIsTypeParameter(boolean value) {
      bitField0_ |= 0x00000800;
      isTypeParameter_ = value;
      
      return this;
    }
    /**
     * <code>optional bool is_type_parameter = 12 [default = false];</code>
     */
    public Builder clearIsTypeParameter() {
      bitField0_ = (bitField0_ & ~0x00000800);
      isTypeParameter_ = false;
      
      return this;
    }

    // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.common.serialization.proto.DescriptorReference)
  }

  static {
    defaultInstance = new DescriptorReference(true);
    defaultInstance.initFields();
  }

  // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.common.serialization.proto.DescriptorReference)
}
