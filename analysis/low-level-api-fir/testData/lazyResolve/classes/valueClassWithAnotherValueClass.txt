RAW_FIR:
FILE: [ResolvedTo(RAW_FIR)] valueClassWithAnotherValueClass.kt
    @JvmInline[Unresolved]() public final? inline [ResolvedTo(RAW_FIR)] class AnotherValueClass : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=AnotherValueClass] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=pack/AnotherValueClass.s] s: String): R|pack/AnotherValueClass| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val s: String = R|<local>/s|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=AnotherValueClass] get(): String

    }
    @JvmInline[Unresolved]() public final? inline [ResolvedTo(RAW_FIR)] class ValueClass : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ValueClass] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=pack/ValueClass.value] value: AnotherValueClass): R|pack/ValueClass| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val value: AnotherValueClass = R|<local>/value|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ValueClass] get(): AnotherValueClass

    }

IMPORTS:
FILE: [ResolvedTo(IMPORTS)] valueClassWithAnotherValueClass.kt
    @JvmInline[Unresolved]() public final? inline [ResolvedTo(RAW_FIR)] class AnotherValueClass : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=AnotherValueClass] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=pack/AnotherValueClass.s] s: String): R|pack/AnotherValueClass| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val s: String = R|<local>/s|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=AnotherValueClass] get(): String

    }
    @JvmInline[Unresolved]() public final? inline [ResolvedTo(RAW_FIR)] class ValueClass : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ValueClass] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=pack/ValueClass.value] value: AnotherValueClass): R|pack/ValueClass| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val value: AnotherValueClass = R|<local>/value|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ValueClass] get(): AnotherValueClass

    }

COMPILER_REQUIRED_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] valueClassWithAnotherValueClass.kt
    @JvmInline[Unresolved]() public final? inline [ResolvedTo(RAW_FIR)] class AnotherValueClass : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=AnotherValueClass] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=pack/AnotherValueClass.s] s: String): R|pack/AnotherValueClass| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val s: String = R|<local>/s|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=AnotherValueClass] get(): String

    }
    @JvmInline[Unresolved]() public final? inline [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] class ValueClass : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ValueClass] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=pack/ValueClass.value] value: AnotherValueClass): R|pack/ValueClass| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val value: AnotherValueClass = R|<local>/value|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ValueClass] get(): AnotherValueClass

    }

COMPANION_GENERATION:
FILE: [ResolvedTo(IMPORTS)] valueClassWithAnotherValueClass.kt
    @JvmInline[Unresolved]() public final? inline [ResolvedTo(RAW_FIR)] class AnotherValueClass : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=AnotherValueClass] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=pack/AnotherValueClass.s] s: String): R|pack/AnotherValueClass| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val s: String = R|<local>/s|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=AnotherValueClass] get(): String

    }
    @JvmInline[Unresolved]() public final? inline [ResolvedTo(COMPANION_GENERATION)] class ValueClass : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ValueClass] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=pack/ValueClass.value] value: AnotherValueClass): R|pack/ValueClass| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val value: AnotherValueClass = R|<local>/value|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ValueClass] get(): AnotherValueClass

    }

SUPER_TYPES:
FILE: [ResolvedTo(IMPORTS)] valueClassWithAnotherValueClass.kt
    @JvmInline[Unresolved]() public final? inline [ResolvedTo(RAW_FIR)] class AnotherValueClass : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=AnotherValueClass] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=pack/AnotherValueClass.s] s: String): R|pack/AnotherValueClass| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val s: String = R|<local>/s|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=AnotherValueClass] get(): String

    }
    @JvmInline[Unresolved]() public final? inline [ResolvedTo(SUPER_TYPES)] class ValueClass : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ValueClass] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=pack/ValueClass.value] value: AnotherValueClass): R|pack/ValueClass| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val value: AnotherValueClass = R|<local>/value|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ValueClass] get(): AnotherValueClass

    }

TYPES:
FILE: [ResolvedTo(IMPORTS)] valueClassWithAnotherValueClass.kt
    @JvmInline[Unresolved]() public final? inline [ResolvedTo(RAW_FIR)] class AnotherValueClass : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=AnotherValueClass] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=pack/AnotherValueClass.s] s: String): R|pack/AnotherValueClass| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val s: String = R|<local>/s|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=AnotherValueClass] get(): String

    }
    @R|kotlin/jvm/JvmInline|[Types]() public final? inline [ResolvedTo(TYPES)] class ValueClass : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ValueClass] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=pack/ValueClass.value] value: AnotherValueClass): R|pack/ValueClass| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val value: AnotherValueClass = R|<local>/value|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ValueClass] get(): AnotherValueClass

    }

STATUS:
FILE: [ResolvedTo(IMPORTS)] valueClassWithAnotherValueClass.kt
    @R|kotlin/jvm/JvmInline|[Types]() public final? inline [ResolvedTo(TYPES)] class AnotherValueClass : R|kotlin/Any| {
        public? [ResolvedTo(TYPES)] [ContainingClassKey=AnotherValueClass] constructor([ResolvedTo(TYPES)] [CorrespondingProperty=pack/AnotherValueClass.s] s: R|kotlin/String|): R|pack/AnotherValueClass| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val s: String = R|<local>/s|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=AnotherValueClass] get(): String

    }
    @R|kotlin/jvm/JvmInline|[Types]() public final inline [ResolvedTo(STATUS)] [FirValueClassRepresentationKey=InlineClassRepresentation(underlyingPropertyName=value, underlyingType=pack/AnotherValueClass)] class ValueClass : R|kotlin/Any| {
        public? [ResolvedTo(TYPES)] [ContainingClassKey=ValueClass] constructor([ResolvedTo(TYPES)] [CorrespondingProperty=pack/ValueClass.value] value: R|pack/AnotherValueClass|): R|pack/ValueClass| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val value: AnotherValueClass = R|<local>/value|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ValueClass] get(): AnotherValueClass

    }

EXPECT_ACTUAL_MATCHING:
FILE: [ResolvedTo(IMPORTS)] valueClassWithAnotherValueClass.kt
    @R|kotlin/jvm/JvmInline|[Types]() public final? inline [ResolvedTo(TYPES)] class AnotherValueClass : R|kotlin/Any| {
        public? [ResolvedTo(TYPES)] [ContainingClassKey=AnotherValueClass] constructor([ResolvedTo(TYPES)] [CorrespondingProperty=pack/AnotherValueClass.s] s: R|kotlin/String|): R|pack/AnotherValueClass| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val s: String = R|<local>/s|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=AnotherValueClass] get(): String

    }
    @R|kotlin/jvm/JvmInline|[Types]() public final inline [ResolvedTo(EXPECT_ACTUAL_MATCHING)] [FirValueClassRepresentationKey=InlineClassRepresentation(underlyingPropertyName=value, underlyingType=pack/AnotherValueClass)] class ValueClass : R|kotlin/Any| {
        public? [ResolvedTo(TYPES)] [ContainingClassKey=ValueClass] constructor([ResolvedTo(TYPES)] [CorrespondingProperty=pack/ValueClass.value] value: R|pack/AnotherValueClass|): R|pack/ValueClass| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val value: AnotherValueClass = R|<local>/value|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ValueClass] get(): AnotherValueClass

    }

CONTRACTS:
FILE: [ResolvedTo(IMPORTS)] valueClassWithAnotherValueClass.kt
    @R|kotlin/jvm/JvmInline|[Types]() public final? inline [ResolvedTo(TYPES)] class AnotherValueClass : R|kotlin/Any| {
        public? [ResolvedTo(TYPES)] [ContainingClassKey=AnotherValueClass] constructor([ResolvedTo(TYPES)] [CorrespondingProperty=pack/AnotherValueClass.s] s: R|kotlin/String|): R|pack/AnotherValueClass| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val s: String = R|<local>/s|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=AnotherValueClass] get(): String

    }
    @R|kotlin/jvm/JvmInline|[Types]() public final inline [ResolvedTo(CONTRACTS)] [FirValueClassRepresentationKey=InlineClassRepresentation(underlyingPropertyName=value, underlyingType=pack/AnotherValueClass)] class ValueClass : R|kotlin/Any| {
        public? [ResolvedTo(TYPES)] [ContainingClassKey=ValueClass] constructor([ResolvedTo(TYPES)] [CorrespondingProperty=pack/ValueClass.value] value: R|pack/AnotherValueClass|): R|pack/ValueClass| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val value: AnotherValueClass = R|<local>/value|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ValueClass] get(): AnotherValueClass

    }

IMPLICIT_TYPES_BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] valueClassWithAnotherValueClass.kt
    @R|kotlin/jvm/JvmInline|[Types]() public final? inline [ResolvedTo(TYPES)] class AnotherValueClass : R|kotlin/Any| {
        public? [ResolvedTo(TYPES)] [ContainingClassKey=AnotherValueClass] constructor([ResolvedTo(TYPES)] [CorrespondingProperty=pack/AnotherValueClass.s] s: R|kotlin/String|): R|pack/AnotherValueClass| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val s: String = R|<local>/s|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=AnotherValueClass] get(): String

    }
    @R|kotlin/jvm/JvmInline|[Types]() public final inline [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] [FirValueClassRepresentationKey=InlineClassRepresentation(underlyingPropertyName=value, underlyingType=pack/AnotherValueClass)] class ValueClass : R|kotlin/Any| {
        public? [ResolvedTo(TYPES)] [ContainingClassKey=ValueClass] constructor([ResolvedTo(TYPES)] [CorrespondingProperty=pack/ValueClass.value] value: R|pack/AnotherValueClass|): R|pack/ValueClass| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val value: AnotherValueClass = R|<local>/value|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ValueClass] get(): AnotherValueClass

    }

CONSTANT_EVALUATION:
FILE: [ResolvedTo(IMPORTS)] valueClassWithAnotherValueClass.kt
    @R|kotlin/jvm/JvmInline|[Types]() public final? inline [ResolvedTo(TYPES)] class AnotherValueClass : R|kotlin/Any| {
        public? [ResolvedTo(TYPES)] [ContainingClassKey=AnotherValueClass] constructor([ResolvedTo(TYPES)] [CorrespondingProperty=pack/AnotherValueClass.s] s: R|kotlin/String|): R|pack/AnotherValueClass| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val s: String = R|<local>/s|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=AnotherValueClass] get(): String

    }
    @R|kotlin/jvm/JvmInline|[Types]() public final inline [ResolvedTo(CONSTANT_EVALUATION)] [FirValueClassRepresentationKey=InlineClassRepresentation(underlyingPropertyName=value, underlyingType=pack/AnotherValueClass)] class ValueClass : R|kotlin/Any| {
        public? [ResolvedTo(TYPES)] [ContainingClassKey=ValueClass] constructor([ResolvedTo(TYPES)] [CorrespondingProperty=pack/ValueClass.value] value: R|pack/AnotherValueClass|): R|pack/ValueClass| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val value: AnotherValueClass = R|<local>/value|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ValueClass] get(): AnotherValueClass

    }

ANNOTATION_ARGUMENTS:
FILE: [ResolvedTo(IMPORTS)] valueClassWithAnotherValueClass.kt
    @R|kotlin/jvm/JvmInline|[Types]() public final? inline [ResolvedTo(TYPES)] class AnotherValueClass : R|kotlin/Any| {
        public? [ResolvedTo(TYPES)] [ContainingClassKey=AnotherValueClass] constructor([ResolvedTo(TYPES)] [CorrespondingProperty=pack/AnotherValueClass.s] s: R|kotlin/String|): R|pack/AnotherValueClass| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val s: String = R|<local>/s|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=AnotherValueClass] get(): String

    }
    @R|kotlin/jvm/JvmInline|[Types]() public final inline [ResolvedTo(ANNOTATION_ARGUMENTS)] [FirValueClassRepresentationKey=InlineClassRepresentation(underlyingPropertyName=value, underlyingType=pack/AnotherValueClass)] class ValueClass : R|kotlin/Any| {
        public? [ResolvedTo(TYPES)] [ContainingClassKey=ValueClass] constructor([ResolvedTo(TYPES)] [CorrespondingProperty=pack/ValueClass.value] value: R|pack/AnotherValueClass|): R|pack/ValueClass| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val value: AnotherValueClass = R|<local>/value|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ValueClass] get(): AnotherValueClass

    }

BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] valueClassWithAnotherValueClass.kt
    @R|kotlin/jvm/JvmInline|[Types]() public final? inline [ResolvedTo(TYPES)] class AnotherValueClass : R|kotlin/Any| {
        public? [ResolvedTo(TYPES)] [ContainingClassKey=AnotherValueClass] constructor([ResolvedTo(TYPES)] [CorrespondingProperty=pack/AnotherValueClass.s] s: R|kotlin/String|): R|pack/AnotherValueClass| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val s: String = R|<local>/s|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=AnotherValueClass] get(): String

    }
    @R|kotlin/jvm/JvmInline|[Types]() public final inline [ResolvedTo(BODY_RESOLVE)] [FirValueClassRepresentationKey=InlineClassRepresentation(underlyingPropertyName=value, underlyingType=pack/AnotherValueClass)] class ValueClass : R|kotlin/Any| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=ValueClass] constructor([ResolvedTo(BODY_RESOLVE)] [CorrespondingProperty=pack/ValueClass.value] value: R|pack/AnotherValueClass|): R|pack/ValueClass| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(BODY_RESOLVE)] [IsFromPrimaryConstructor=true] val value: R|pack/AnotherValueClass| = R|<local>/value|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=ValueClass] get(): R|pack/AnotherValueClass|

    }

FILE RAW TO BODY:
FILE: [ResolvedTo(BODY_RESOLVE)] valueClassWithAnotherValueClass.kt
    @R|kotlin/jvm/JvmInline|[Types]() public final inline [ResolvedTo(BODY_RESOLVE)] [FirValueClassRepresentationKey=InlineClassRepresentation(underlyingPropertyName=s, underlyingType=kotlin/String)] class AnotherValueClass : R|kotlin/Any| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=AnotherValueClass] constructor([ResolvedTo(BODY_RESOLVE)] [CorrespondingProperty=pack/AnotherValueClass.s] s: R|kotlin/String|): R|pack/AnotherValueClass| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(BODY_RESOLVE)] [IsFromPrimaryConstructor=true] val s: R|kotlin/String| = R|<local>/s|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=AnotherValueClass] get(): R|kotlin/String|

    }
    @R|kotlin/jvm/JvmInline|[Types]() public final inline [ResolvedTo(BODY_RESOLVE)] [FirValueClassRepresentationKey=InlineClassRepresentation(underlyingPropertyName=value, underlyingType=pack/AnotherValueClass)] class ValueClass : R|kotlin/Any| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=ValueClass] constructor([ResolvedTo(BODY_RESOLVE)] [CorrespondingProperty=pack/ValueClass.value] value: R|pack/AnotherValueClass|): R|pack/ValueClass| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(BODY_RESOLVE)] [IsFromPrimaryConstructor=true] val value: R|pack/AnotherValueClass| = R|<local>/value|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=ValueClass] get(): R|pack/AnotherValueClass|

    }
