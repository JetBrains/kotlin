//
// Source
// ------------------------------------------

import androidx.compose.runtime.*

fun interface Consumer {
    @Composable operator fun invoke(t: Int)
}

@Composable fun Test(int: Int) {
    Example { _ ->
    }
}

@Composable fun Example(consumer: Consumer) {
}

//
// Transformed IR
// ------------------------------------------

interface Consumer {
  @Composable
  @FunctionKeyMeta(key = 1929556621, startOffset = 122, endOffset = 140)
  abstract fun invoke(t: Int, %composer: Composer?, %changed: Int)
}
@Composable
@FunctionKeyMeta(key = -1502623783, startOffset = 180, endOffset = 263)
fun Test(int: Int, %composer: Composer?, %changed: Int) {
  %composer = %composer.startRestartGroup(<>)
  sourceInformation(%composer, "C(Test)N(int)<Exampl...>:Test.kt")
  if (%composer.shouldExecute(%changed and 0b0001 != 0, %changed and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(<>, %changed, -1, <>)
    }
    Example(<block>{
      class <no name provided> : Consumer {
        @Composable
        @FunctionKeyMeta(key = -1259324577, startOffset = 225, endOffset = 249)
        override fun invoke(<unused var>: Int, %composer: Composer?, %changed: Int) {
          %composer = %composer.startRestartGroup(<>)
          sourceInformation(%composer, "C(invoke):Test.kt")
          val %dirty = %changed
          if (%changed and 0b00110000 == 0) {
            %dirty = %dirty or if (%composer.changed(<this>)) 0b00100000 else 0b00010000
          }
          if (%composer.shouldExecute(%dirty and 0b00010001 != 0b00010000, %dirty and 0b0001)) {
            if (isTraceInProgress()) {
              traceEventStart(<>, %dirty, -1, <>)
            }
            Unit
            if (isTraceInProgress()) {
              traceEventEnd()
            }
          } else {
            %composer.skipToGroupEnd()
          }
          val tmp0_rcvr = <this>
          %composer.endRestartGroup()?.updateScope { %composer: Composer?, %force: Int ->
            tmp0_rcvr.invoke(<unused var>, %composer, updateChangedFlags(%changed or 0b0001))
          }
        }
      }
      <no name provided>()
    }, %composer, 0)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    %composer.skipToGroupEnd()
  }
  %composer.endRestartGroup()?.updateScope { %composer: Composer?, %force: Int ->
    Test(int, %composer, updateChangedFlags(%changed or 0b0001))
  }
}
@Composable
@FunctionKeyMeta(key = -1139663906, startOffset = 289, endOffset = 336)
fun Example(consumer: Consumer, %composer: Composer?, %changed: Int) {
  %composer = %composer.startRestartGroup(<>)
  sourceInformation(%composer, "C(Example)N(consumer):Test.kt")
  if (%composer.shouldExecute(%changed and 0b0001 != 0, %changed and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(<>, %changed, -1, <>)
    }
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    %composer.skipToGroupEnd()
  }
  %composer.endRestartGroup()?.updateScope { %composer: Composer?, %force: Int ->
    Example(consumer, %composer, updateChangedFlags(%changed or 0b0001))
  }
}
