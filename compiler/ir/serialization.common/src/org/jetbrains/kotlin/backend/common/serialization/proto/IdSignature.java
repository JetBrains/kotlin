// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: compiler/ir/serialization.common/src/KotlinIr.proto
// Protobuf Java Version: 4.29.3

package org.jetbrains.kotlin.backend.common.serialization.proto;

/**
 * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature}
 */
public  final class IdSignature extends
    org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
        IdSignature, IdSignature.Builder> implements
    // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature)
    IdSignatureOrBuilder {
  private IdSignature() {
  }
  private int idSigCase_ = 0;
  private java.lang.Object idSig_;
  public enum IdSigCase {
    PUBLIC_SIG(1),
    PRIVATE_SIG(2),
    ACCESSOR_SIG(3),
    SCOPED_LOCAL_SIG(4),
    COMPOSITE_SIG(5),
    LOCAL_SIG(6),
    FILE_SIG(7),
    IDSIG_NOT_SET(0);
    private final int value;
    private IdSigCase(int value) {
      this.value = value;
    }
    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static IdSigCase valueOf(int value) {
      return forNumber(value);
    }

    public static IdSigCase forNumber(int value) {
      switch (value) {
        case 1: return PUBLIC_SIG;
        case 2: return PRIVATE_SIG;
        case 3: return ACCESSOR_SIG;
        case 4: return SCOPED_LOCAL_SIG;
        case 5: return COMPOSITE_SIG;
        case 6: return LOCAL_SIG;
        case 7: return FILE_SIG;
        case 0: return IDSIG_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  @java.lang.Override
  public IdSigCase
  getIdSigCase() {
    return IdSigCase.forNumber(
        idSigCase_);
  }

  private void clearIdSig() {
    idSigCase_ = 0;
    idSig_ = null;
  }

  public static final int PUBLIC_SIG_FIELD_NUMBER = 1;
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature public_sig = 1;</code>
   */
  @java.lang.Override
  public boolean hasPublicSig() {
    return idSigCase_ == 1;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature public_sig = 1;</code>
   */
  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature getPublicSig() {
    if (idSigCase_ == 1) {
       return (org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature) idSig_;
    }
    return org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature.getDefaultInstance();
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature public_sig = 1;</code>
   */
  @java.lang.SuppressWarnings("ReturnValueIgnored")
  private void setPublicSig(org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature value) {
    value.getClass();  // minimal bytecode null check
    idSig_ = value;
    idSigCase_ = 1;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature public_sig = 1;</code>
   */
  @java.lang.SuppressWarnings("ReturnValueIgnored")
  private void mergePublicSig(org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature value) {
    value.getClass();  // minimal bytecode null check
    if (idSigCase_ == 1 &&
        idSig_ != org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature.getDefaultInstance()) {
      idSig_ = org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature.newBuilder((org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature) idSig_)
          .mergeFrom(value).buildPartial();
    } else {
      idSig_ = value;
    }
    idSigCase_ = 1;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature public_sig = 1;</code>
   */
  private void clearPublicSig() {
    if (idSigCase_ == 1) {
      idSigCase_ = 0;
      idSig_ = null;
    }
  }

  public static final int PRIVATE_SIG_FIELD_NUMBER = 2;
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.FileLocalIdSignature private_sig = 2;</code>
   */
  @java.lang.Override
  public boolean hasPrivateSig() {
    return idSigCase_ == 2;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.FileLocalIdSignature private_sig = 2;</code>
   */
  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.FileLocalIdSignature getPrivateSig() {
    if (idSigCase_ == 2) {
       return (org.jetbrains.kotlin.backend.common.serialization.proto.FileLocalIdSignature) idSig_;
    }
    return org.jetbrains.kotlin.backend.common.serialization.proto.FileLocalIdSignature.getDefaultInstance();
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.FileLocalIdSignature private_sig = 2;</code>
   */
  @java.lang.SuppressWarnings("ReturnValueIgnored")
  private void setPrivateSig(org.jetbrains.kotlin.backend.common.serialization.proto.FileLocalIdSignature value) {
    value.getClass();  // minimal bytecode null check
    idSig_ = value;
    idSigCase_ = 2;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.FileLocalIdSignature private_sig = 2;</code>
   */
  @java.lang.SuppressWarnings("ReturnValueIgnored")
  private void mergePrivateSig(org.jetbrains.kotlin.backend.common.serialization.proto.FileLocalIdSignature value) {
    value.getClass();  // minimal bytecode null check
    if (idSigCase_ == 2 &&
        idSig_ != org.jetbrains.kotlin.backend.common.serialization.proto.FileLocalIdSignature.getDefaultInstance()) {
      idSig_ = org.jetbrains.kotlin.backend.common.serialization.proto.FileLocalIdSignature.newBuilder((org.jetbrains.kotlin.backend.common.serialization.proto.FileLocalIdSignature) idSig_)
          .mergeFrom(value).buildPartial();
    } else {
      idSig_ = value;
    }
    idSigCase_ = 2;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.FileLocalIdSignature private_sig = 2;</code>
   */
  private void clearPrivateSig() {
    if (idSigCase_ == 2) {
      idSigCase_ = 0;
      idSig_ = null;
    }
  }

  public static final int ACCESSOR_SIG_FIELD_NUMBER = 3;
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature accessor_sig = 3;</code>
   */
  @java.lang.Override
  public boolean hasAccessorSig() {
    return idSigCase_ == 3;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature accessor_sig = 3;</code>
   */
  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature getAccessorSig() {
    if (idSigCase_ == 3) {
       return (org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature) idSig_;
    }
    return org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature.getDefaultInstance();
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature accessor_sig = 3;</code>
   */
  @java.lang.SuppressWarnings("ReturnValueIgnored")
  private void setAccessorSig(org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature value) {
    value.getClass();  // minimal bytecode null check
    idSig_ = value;
    idSigCase_ = 3;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature accessor_sig = 3;</code>
   */
  @java.lang.SuppressWarnings("ReturnValueIgnored")
  private void mergeAccessorSig(org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature value) {
    value.getClass();  // minimal bytecode null check
    if (idSigCase_ == 3 &&
        idSig_ != org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature.getDefaultInstance()) {
      idSig_ = org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature.newBuilder((org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature) idSig_)
          .mergeFrom(value).buildPartial();
    } else {
      idSig_ = value;
    }
    idSigCase_ = 3;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature accessor_sig = 3;</code>
   */
  private void clearAccessorSig() {
    if (idSigCase_ == 3) {
      idSigCase_ = 0;
      idSig_ = null;
    }
  }

  public static final int SCOPED_LOCAL_SIG_FIELD_NUMBER = 4;
  /**
   * <code>int32 scoped_local_sig = 4;</code>
   * @return Whether the scopedLocalSig field is set.
   */
  @java.lang.Override
  public boolean hasScopedLocalSig() {
    return idSigCase_ == 4;
  }
  /**
   * <code>int32 scoped_local_sig = 4;</code>
   * @return The scopedLocalSig.
   */
  @java.lang.Override
  public int getScopedLocalSig() {
    if (idSigCase_ == 4) {
      return (java.lang.Integer) idSig_;
    }
    return 0;
  }
  /**
   * <code>int32 scoped_local_sig = 4;</code>
   * @param value The scopedLocalSig to set.
   */
  private void setScopedLocalSig(int value) {
    idSigCase_ = 4;
    idSig_ = value;
  }
  /**
   * <code>int32 scoped_local_sig = 4;</code>
   */
  private void clearScopedLocalSig() {
    if (idSigCase_ == 4) {
      idSigCase_ = 0;
      idSig_ = null;
    }
  }

  public static final int COMPOSITE_SIG_FIELD_NUMBER = 5;
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.CompositeSignature composite_sig = 5;</code>
   */
  @java.lang.Override
  public boolean hasCompositeSig() {
    return idSigCase_ == 5;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.CompositeSignature composite_sig = 5;</code>
   */
  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.CompositeSignature getCompositeSig() {
    if (idSigCase_ == 5) {
       return (org.jetbrains.kotlin.backend.common.serialization.proto.CompositeSignature) idSig_;
    }
    return org.jetbrains.kotlin.backend.common.serialization.proto.CompositeSignature.getDefaultInstance();
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.CompositeSignature composite_sig = 5;</code>
   */
  @java.lang.SuppressWarnings("ReturnValueIgnored")
  private void setCompositeSig(org.jetbrains.kotlin.backend.common.serialization.proto.CompositeSignature value) {
    value.getClass();  // minimal bytecode null check
    idSig_ = value;
    idSigCase_ = 5;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.CompositeSignature composite_sig = 5;</code>
   */
  @java.lang.SuppressWarnings("ReturnValueIgnored")
  private void mergeCompositeSig(org.jetbrains.kotlin.backend.common.serialization.proto.CompositeSignature value) {
    value.getClass();  // minimal bytecode null check
    if (idSigCase_ == 5 &&
        idSig_ != org.jetbrains.kotlin.backend.common.serialization.proto.CompositeSignature.getDefaultInstance()) {
      idSig_ = org.jetbrains.kotlin.backend.common.serialization.proto.CompositeSignature.newBuilder((org.jetbrains.kotlin.backend.common.serialization.proto.CompositeSignature) idSig_)
          .mergeFrom(value).buildPartial();
    } else {
      idSig_ = value;
    }
    idSigCase_ = 5;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.CompositeSignature composite_sig = 5;</code>
   */
  private void clearCompositeSig() {
    if (idSigCase_ == 5) {
      idSigCase_ = 0;
      idSig_ = null;
    }
  }

  public static final int LOCAL_SIG_FIELD_NUMBER = 6;
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature local_sig = 6;</code>
   */
  @java.lang.Override
  public boolean hasLocalSig() {
    return idSigCase_ == 6;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature local_sig = 6;</code>
   */
  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature getLocalSig() {
    if (idSigCase_ == 6) {
       return (org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature) idSig_;
    }
    return org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature.getDefaultInstance();
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature local_sig = 6;</code>
   */
  @java.lang.SuppressWarnings("ReturnValueIgnored")
  private void setLocalSig(org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature value) {
    value.getClass();  // minimal bytecode null check
    idSig_ = value;
    idSigCase_ = 6;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature local_sig = 6;</code>
   */
  @java.lang.SuppressWarnings("ReturnValueIgnored")
  private void mergeLocalSig(org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature value) {
    value.getClass();  // minimal bytecode null check
    if (idSigCase_ == 6 &&
        idSig_ != org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature.getDefaultInstance()) {
      idSig_ = org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature.newBuilder((org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature) idSig_)
          .mergeFrom(value).buildPartial();
    } else {
      idSig_ = value;
    }
    idSigCase_ = 6;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature local_sig = 6;</code>
   */
  private void clearLocalSig() {
    if (idSigCase_ == 6) {
      idSigCase_ = 0;
      idSig_ = null;
    }
  }

  public static final int FILE_SIG_FIELD_NUMBER = 7;
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature file_sig = 7;</code>
   */
  @java.lang.Override
  public boolean hasFileSig() {
    return idSigCase_ == 7;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature file_sig = 7;</code>
   */
  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature getFileSig() {
    if (idSigCase_ == 7) {
       return (org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature) idSig_;
    }
    return org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature.getDefaultInstance();
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature file_sig = 7;</code>
   */
  @java.lang.SuppressWarnings("ReturnValueIgnored")
  private void setFileSig(org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature value) {
    value.getClass();  // minimal bytecode null check
    idSig_ = value;
    idSigCase_ = 7;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature file_sig = 7;</code>
   */
  @java.lang.SuppressWarnings("ReturnValueIgnored")
  private void mergeFileSig(org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature value) {
    value.getClass();  // minimal bytecode null check
    if (idSigCase_ == 7 &&
        idSig_ != org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature.getDefaultInstance()) {
      idSig_ = org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature.newBuilder((org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature) idSig_)
          .mergeFrom(value).buildPartial();
    } else {
      idSig_ = value;
    }
    idSigCase_ = 7;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature file_sig = 7;</code>
   */
  private void clearFileSig() {
    if (idSigCase_ == 7) {
      idSigCase_ = 0;
      idSig_ = null;
    }
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature parseFrom(
      java.nio.ByteBuffer data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature parseFrom(
      java.nio.ByteBuffer data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature parseFrom(byte[] data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature parseFrom(
      byte[] data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature parseFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature parseDelimitedFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature prototype) {
    return DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature}
   */
  public static final class Builder extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
        org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature, Builder> implements
      // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature)
      org.jetbrains.kotlin.backend.common.serialization.proto.IdSignatureOrBuilder {
    // Construct using org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }

    @java.lang.Override
    public IdSigCase
        getIdSigCase() {
      return instance.getIdSigCase();
    }

    public Builder clearIdSig() {
      copyOnWrite();
      instance.clearIdSig();
      return this;
    }


    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature public_sig = 1;</code>
     */
    @java.lang.Override
    public boolean hasPublicSig() {
      return instance.hasPublicSig();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature public_sig = 1;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature getPublicSig() {
      return instance.getPublicSig();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature public_sig = 1;</code>
     */
    public Builder setPublicSig(org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature value) {
      copyOnWrite();
      instance.setPublicSig(value);
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature public_sig = 1;</code>
     */
    public Builder setPublicSig(
        org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature.Builder builderForValue) {
      copyOnWrite();
      instance.setPublicSig(builderForValue.build());
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature public_sig = 1;</code>
     */
    public Builder mergePublicSig(org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature value) {
      copyOnWrite();
      instance.mergePublicSig(value);
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature public_sig = 1;</code>
     */
    public Builder clearPublicSig() {
      copyOnWrite();
      instance.clearPublicSig();
      return this;
    }

    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.FileLocalIdSignature private_sig = 2;</code>
     */
    @java.lang.Override
    public boolean hasPrivateSig() {
      return instance.hasPrivateSig();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.FileLocalIdSignature private_sig = 2;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.FileLocalIdSignature getPrivateSig() {
      return instance.getPrivateSig();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.FileLocalIdSignature private_sig = 2;</code>
     */
    public Builder setPrivateSig(org.jetbrains.kotlin.backend.common.serialization.proto.FileLocalIdSignature value) {
      copyOnWrite();
      instance.setPrivateSig(value);
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.FileLocalIdSignature private_sig = 2;</code>
     */
    public Builder setPrivateSig(
        org.jetbrains.kotlin.backend.common.serialization.proto.FileLocalIdSignature.Builder builderForValue) {
      copyOnWrite();
      instance.setPrivateSig(builderForValue.build());
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.FileLocalIdSignature private_sig = 2;</code>
     */
    public Builder mergePrivateSig(org.jetbrains.kotlin.backend.common.serialization.proto.FileLocalIdSignature value) {
      copyOnWrite();
      instance.mergePrivateSig(value);
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.FileLocalIdSignature private_sig = 2;</code>
     */
    public Builder clearPrivateSig() {
      copyOnWrite();
      instance.clearPrivateSig();
      return this;
    }

    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature accessor_sig = 3;</code>
     */
    @java.lang.Override
    public boolean hasAccessorSig() {
      return instance.hasAccessorSig();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature accessor_sig = 3;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature getAccessorSig() {
      return instance.getAccessorSig();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature accessor_sig = 3;</code>
     */
    public Builder setAccessorSig(org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature value) {
      copyOnWrite();
      instance.setAccessorSig(value);
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature accessor_sig = 3;</code>
     */
    public Builder setAccessorSig(
        org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature.Builder builderForValue) {
      copyOnWrite();
      instance.setAccessorSig(builderForValue.build());
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature accessor_sig = 3;</code>
     */
    public Builder mergeAccessorSig(org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature value) {
      copyOnWrite();
      instance.mergeAccessorSig(value);
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature accessor_sig = 3;</code>
     */
    public Builder clearAccessorSig() {
      copyOnWrite();
      instance.clearAccessorSig();
      return this;
    }

    /**
     * <code>int32 scoped_local_sig = 4;</code>
     * @return Whether the scopedLocalSig field is set.
     */
    @java.lang.Override
    public boolean hasScopedLocalSig() {
      return instance.hasScopedLocalSig();
    }
    /**
     * <code>int32 scoped_local_sig = 4;</code>
     * @return The scopedLocalSig.
     */
    @java.lang.Override
    public int getScopedLocalSig() {
      return instance.getScopedLocalSig();
    }
    /**
     * <code>int32 scoped_local_sig = 4;</code>
     * @param value The scopedLocalSig to set.
     * @return This builder for chaining.
     */
    public Builder setScopedLocalSig(int value) {
      copyOnWrite();
      instance.setScopedLocalSig(value);
      return this;
    }
    /**
     * <code>int32 scoped_local_sig = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearScopedLocalSig() {
      copyOnWrite();
      instance.clearScopedLocalSig();
      return this;
    }

    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.CompositeSignature composite_sig = 5;</code>
     */
    @java.lang.Override
    public boolean hasCompositeSig() {
      return instance.hasCompositeSig();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.CompositeSignature composite_sig = 5;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.CompositeSignature getCompositeSig() {
      return instance.getCompositeSig();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.CompositeSignature composite_sig = 5;</code>
     */
    public Builder setCompositeSig(org.jetbrains.kotlin.backend.common.serialization.proto.CompositeSignature value) {
      copyOnWrite();
      instance.setCompositeSig(value);
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.CompositeSignature composite_sig = 5;</code>
     */
    public Builder setCompositeSig(
        org.jetbrains.kotlin.backend.common.serialization.proto.CompositeSignature.Builder builderForValue) {
      copyOnWrite();
      instance.setCompositeSig(builderForValue.build());
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.CompositeSignature composite_sig = 5;</code>
     */
    public Builder mergeCompositeSig(org.jetbrains.kotlin.backend.common.serialization.proto.CompositeSignature value) {
      copyOnWrite();
      instance.mergeCompositeSig(value);
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.CompositeSignature composite_sig = 5;</code>
     */
    public Builder clearCompositeSig() {
      copyOnWrite();
      instance.clearCompositeSig();
      return this;
    }

    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature local_sig = 6;</code>
     */
    @java.lang.Override
    public boolean hasLocalSig() {
      return instance.hasLocalSig();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature local_sig = 6;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature getLocalSig() {
      return instance.getLocalSig();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature local_sig = 6;</code>
     */
    public Builder setLocalSig(org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature value) {
      copyOnWrite();
      instance.setLocalSig(value);
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature local_sig = 6;</code>
     */
    public Builder setLocalSig(
        org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature.Builder builderForValue) {
      copyOnWrite();
      instance.setLocalSig(builderForValue.build());
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature local_sig = 6;</code>
     */
    public Builder mergeLocalSig(org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature value) {
      copyOnWrite();
      instance.mergeLocalSig(value);
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature local_sig = 6;</code>
     */
    public Builder clearLocalSig() {
      copyOnWrite();
      instance.clearLocalSig();
      return this;
    }

    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature file_sig = 7;</code>
     */
    @java.lang.Override
    public boolean hasFileSig() {
      return instance.hasFileSig();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature file_sig = 7;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature getFileSig() {
      return instance.getFileSig();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature file_sig = 7;</code>
     */
    public Builder setFileSig(org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature value) {
      copyOnWrite();
      instance.setFileSig(value);
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature file_sig = 7;</code>
     */
    public Builder setFileSig(
        org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature.Builder builderForValue) {
      copyOnWrite();
      instance.setFileSig(builderForValue.build());
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature file_sig = 7;</code>
     */
    public Builder mergeFileSig(org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature value) {
      copyOnWrite();
      instance.mergeFileSig(value);
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature file_sig = 7;</code>
     */
    public Builder clearFileSig() {
      copyOnWrite();
      instance.clearFileSig();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature)
  }
  private byte memoizedIsInitialized = 2;
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "idSig_",
            "idSigCase_",
            org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature.class,
            org.jetbrains.kotlin.backend.common.serialization.proto.FileLocalIdSignature.class,
            org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature.class,
            org.jetbrains.kotlin.backend.common.serialization.proto.CompositeSignature.class,
            org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature.class,
            org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature.class,
          };
          java.lang.String info =
              "\u0004\u0007\u0001\u0000\u0001\u0007\u0007\u0000\u0000\u0003\u0001<\u0000\u0002\u043c" +
              "\u0000\u0003\u043c\u0000\u00047\u0000\u0005\u043c\u0000\u0006<\u0000\u0007<\u0000" +
              "";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature> parser = PARSER;
        if (parser == null) {
          synchronized (org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return memoizedIsInitialized;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature)
  private static final org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature DEFAULT_INSTANCE;
  static {
    IdSignature defaultInstance = new IdSignature();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
      IdSignature.class, defaultInstance);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile org.jetbrains.kotlin.protobuf.Parser<IdSignature> PARSER;

  public static org.jetbrains.kotlin.protobuf.Parser<IdSignature> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}
