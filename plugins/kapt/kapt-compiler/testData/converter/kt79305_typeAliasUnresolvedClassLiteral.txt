import kotlin.reflect.KClass;

@java.lang.annotation.Retention(value = java.lang.annotation.RetentionPolicy.RUNTIME)
/**
 * public final annotation class Anno : kotlin/Annotation {
 *
 *   // signature: <init>(Lkotlin/reflect/KClass;)V
 *   public constructor(value: kotlin/reflect/KClass<*>)
 *
 *   // getter: value()Ljava/lang/Class;
 *   public final val value: kotlin/reflect/KClass<*>
 *     public final get
 *
 *   // module name: main
 * }
 */
@kotlin.Metadata()
public abstract @interface Anno {

    public abstract java.lang.Class<?> value();
}

////////////////////


import kotlin.reflect.KClass;

@Anno(value = T.class)
/**
 * public final class C : kotlin/Any {
 *
 *   // signature: <init>()V
 *   public constructor()
 *
 *   // module name: main
 * }
 */
@kotlin.Metadata()
public final class C {

    public C() {
        super();
    }
}

////////////////////


import kotlin.reflect.KClass;

/**
 * package {
 *
 *   public typealias T = error/NonExistentClass (* = error/NonExistentClass *)
 *
 *   // module name: main
 * }
 */
@kotlin.Metadata()
@kotlin.Suppress(names = {"UNRESOLVED_REFERENCE", "ANNOTATION_ARGUMENT_MUST_BE_CONST"})
public final class Kt79305_typeAliasUnresolvedClassLiteralKt {
}
