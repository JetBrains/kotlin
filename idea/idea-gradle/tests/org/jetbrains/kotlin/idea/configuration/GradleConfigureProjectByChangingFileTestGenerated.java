/*
 * Copyright 2010-2017 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.kotlin.idea.configuration;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@RunWith(JUnit3RunnerWithInners.class)
public class GradleConfigureProjectByChangingFileTestGenerated extends AbstractGradleConfigureProjectByChangingFileTest {
    @TestMetadata("idea/testData/configuration/gradle")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Gradle extends AbstractGradleConfigureProjectByChangingFileTest {
        public void testAllFilesPresentInGradle() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/configuration/gradle"), Pattern.compile("^([^\\.]+)$"), TargetBackend.ANY, false);
        }

        @TestMetadata("default")
        public void testDefault() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("idea/testData/configuration/gradle/default/");
            doTestGradle(fileName);
        }

        @TestMetadata("eapVersion")
        public void testEapVersion() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("idea/testData/configuration/gradle/eapVersion/");
            doTestGradle(fileName);
        }

        @TestMetadata("jreLib")
        public void testJreLib() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("idea/testData/configuration/gradle/jreLib/");
            doTestGradle(fileName);
        }

        @TestMetadata("js")
        public void testJs() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("idea/testData/configuration/gradle/js/");
            doTestGradle(fileName);
        }

        @TestMetadata("m04Version")
        public void testM04Version() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("idea/testData/configuration/gradle/m04Version/");
            doTestGradle(fileName);
        }

        @TestMetadata("missedLibrary")
        public void testMissedLibrary() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("idea/testData/configuration/gradle/missedLibrary/");
            doTestGradle(fileName);
        }

        @TestMetadata("plugin_present")
        public void testPlugin_present() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("idea/testData/configuration/gradle/plugin_present/");
            doTestGradle(fileName);
        }

        @TestMetadata("rcVersion")
        public void testRcVersion() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("idea/testData/configuration/gradle/rcVersion/");
            doTestGradle(fileName);
        }

        @TestMetadata("withJava9ModuleInfo")
        public void testWithJava9ModuleInfo() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("idea/testData/configuration/gradle/withJava9ModuleInfo/");
            doTestGradle(fileName);
        }
    }

    @TestMetadata("idea/testData/configuration/gsk")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Gsk extends AbstractGradleConfigureProjectByChangingFileTest {
        public void testAllFilesPresentInGsk() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/configuration/gsk"), Pattern.compile("^([^\\.]+)$"), TargetBackend.ANY, false);
        }

        @TestMetadata("eap11Version")
        public void testEap11Version() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("idea/testData/configuration/gsk/eap11Version/");
            doTestGradle(fileName);
        }

        @TestMetadata("eapVersion")
        public void testEapVersion() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("idea/testData/configuration/gsk/eapVersion/");
            doTestGradle(fileName);
        }

        @TestMetadata("helloWorld")
        public void testHelloWorld() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("idea/testData/configuration/gsk/helloWorld/");
            doTestGradle(fileName);
        }

        @TestMetadata("missedLibrary")
        public void testMissedLibrary() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("idea/testData/configuration/gsk/missedLibrary/");
            doTestGradle(fileName);
        }

        @TestMetadata("pluginPresent")
        public void testPluginPresent() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("idea/testData/configuration/gsk/pluginPresent/");
            doTestGradle(fileName);
        }
    }
}
