// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: compiler/ir/serialization.common/src/KotlinIr.proto

package org.jetbrains.kotlin.backend.common.serialization.proto;

/**
 * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrClass}
 */
public final class IrClass extends
    org.jetbrains.kotlin.protobuf.GeneratedMessageLite implements
    // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrClass)
    IrClassOrBuilder {
  // Use IrClass.newBuilder() to construct.
  private IrClass(org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder builder) {
    super(builder);
    this.unknownFields = builder.getUnknownFields();
  }
  private IrClass(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.ByteString.EMPTY;}

  private static final IrClass defaultInstance;
  public static IrClass getDefaultInstance() {
    return defaultInstance;
  }

  public IrClass getDefaultInstanceForType() {
    return defaultInstance;
  }

  private final org.jetbrains.kotlin.protobuf.ByteString unknownFields;
  private IrClass(
      org.jetbrains.kotlin.protobuf.CodedInputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    initFields();
    int mutable_bitField0_ = 0;
    org.jetbrains.kotlin.protobuf.ByteString.Output unknownFieldsOutput =
        org.jetbrains.kotlin.protobuf.ByteString.newOutput();
    org.jetbrains.kotlin.protobuf.CodedOutputStream unknownFieldsCodedOutput =
        org.jetbrains.kotlin.protobuf.CodedOutputStream.newInstance(
            unknownFieldsOutput);
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                   extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
          case 10: {
            org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase.Builder subBuilder = null;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
              subBuilder = base_.toBuilder();
            }
            base_ = input.readMessage(org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase.PARSER, extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(base_);
              base_ = subBuilder.buildPartial();
            }
            bitField0_ |= 0x00000001;
            break;
          }
          case 18: {
            org.jetbrains.kotlin.backend.common.serialization.proto.IrDataIndex.Builder subBuilder = null;
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
              subBuilder = name_.toBuilder();
            }
            name_ = input.readMessage(org.jetbrains.kotlin.backend.common.serialization.proto.IrDataIndex.PARSER, extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(name_);
              name_ = subBuilder.buildPartial();
            }
            bitField0_ |= 0x00000002;
            break;
          }
          case 24: {
            int rawValue = input.readEnum();
            org.jetbrains.kotlin.backend.common.serialization.proto.ClassKind value = org.jetbrains.kotlin.backend.common.serialization.proto.ClassKind.valueOf(rawValue);
            if (value == null) {
              unknownFieldsCodedOutput.writeRawVarint32(tag);
              unknownFieldsCodedOutput.writeRawVarint32(rawValue);
            } else {
              bitField0_ |= 0x00000004;
              kind_ = value;
            }
            break;
          }
          case 34: {
            org.jetbrains.kotlin.backend.common.serialization.proto.Visibility.Builder subBuilder = null;
            if (((bitField0_ & 0x00000008) == 0x00000008)) {
              subBuilder = visibility_.toBuilder();
            }
            visibility_ = input.readMessage(org.jetbrains.kotlin.backend.common.serialization.proto.Visibility.PARSER, extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(visibility_);
              visibility_ = subBuilder.buildPartial();
            }
            bitField0_ |= 0x00000008;
            break;
          }
          case 40: {
            int rawValue = input.readEnum();
            org.jetbrains.kotlin.backend.common.serialization.proto.ModalityKind value = org.jetbrains.kotlin.backend.common.serialization.proto.ModalityKind.valueOf(rawValue);
            if (value == null) {
              unknownFieldsCodedOutput.writeRawVarint32(tag);
              unknownFieldsCodedOutput.writeRawVarint32(rawValue);
            } else {
              bitField0_ |= 0x00000010;
              modality_ = value;
            }
            break;
          }
          case 48: {
            bitField0_ |= 0x00000020;
            isCompanion_ = input.readBool();
            break;
          }
          case 56: {
            bitField0_ |= 0x00000040;
            isInner_ = input.readBool();
            break;
          }
          case 64: {
            bitField0_ |= 0x00000080;
            isData_ = input.readBool();
            break;
          }
          case 72: {
            bitField0_ |= 0x00000100;
            isExternal_ = input.readBool();
            break;
          }
          case 80: {
            bitField0_ |= 0x00000200;
            isInline_ = input.readBool();
            break;
          }
          case 90: {
            org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter.Builder subBuilder = null;
            if (((bitField0_ & 0x00000400) == 0x00000400)) {
              subBuilder = thisReceiver_.toBuilder();
            }
            thisReceiver_ = input.readMessage(org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter.PARSER, extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(thisReceiver_);
              thisReceiver_ = subBuilder.buildPartial();
            }
            bitField0_ |= 0x00000400;
            break;
          }
          case 98: {
            org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameterContainer.Builder subBuilder = null;
            if (((bitField0_ & 0x00000800) == 0x00000800)) {
              subBuilder = typeParameters_.toBuilder();
            }
            typeParameters_ = input.readMessage(org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameterContainer.PARSER, extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(typeParameters_);
              typeParameters_ = subBuilder.buildPartial();
            }
            bitField0_ |= 0x00000800;
            break;
          }
          case 106: {
            org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationContainer.Builder subBuilder = null;
            if (((bitField0_ & 0x00001000) == 0x00001000)) {
              subBuilder = declarationContainer_.toBuilder();
            }
            declarationContainer_ = input.readMessage(org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationContainer.PARSER, extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(declarationContainer_);
              declarationContainer_ = subBuilder.buildPartial();
            }
            bitField0_ |= 0x00001000;
            break;
          }
          case 114: {
            if (!((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
              superType_ = new java.util.ArrayList<org.jetbrains.kotlin.backend.common.serialization.proto.IrDataIndex>();
              mutable_bitField0_ |= 0x00002000;
            }
            superType_.add(input.readMessage(org.jetbrains.kotlin.backend.common.serialization.proto.IrDataIndex.PARSER, extensionRegistry));
            break;
          }
        }
      }
    } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
          e.getMessage()).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
        superType_ = java.util.Collections.unmodifiableList(superType_);
      }
      try {
        unknownFieldsCodedOutput.flush();
      } catch (java.io.IOException e) {
      // Should not happen
      } finally {
        unknownFields = unknownFieldsOutput.toByteString();
      }
      makeExtensionsImmutable();
    }
  }
  public static org.jetbrains.kotlin.protobuf.Parser<IrClass> PARSER =
      new org.jetbrains.kotlin.protobuf.AbstractParser<IrClass>() {
    public IrClass parsePartialFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return new IrClass(input, extensionRegistry);
    }
  };

  @java.lang.Override
  public org.jetbrains.kotlin.protobuf.Parser<IrClass> getParserForType() {
    return PARSER;
  }

  private int bitField0_;
  public static final int BASE_FIELD_NUMBER = 1;
  private org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base_;
  /**
   * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1;</code>
   */
  public boolean hasBase() {
    return ((bitField0_ & 0x00000001) == 0x00000001);
  }
  /**
   * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1;</code>
   */
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase getBase() {
    return base_;
  }

  public static final int NAME_FIELD_NUMBER = 2;
  private org.jetbrains.kotlin.backend.common.serialization.proto.IrDataIndex name_;
  /**
   * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrDataIndex name = 2;</code>
   */
  public boolean hasName() {
    return ((bitField0_ & 0x00000002) == 0x00000002);
  }
  /**
   * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrDataIndex name = 2;</code>
   */
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrDataIndex getName() {
    return name_;
  }

  public static final int KIND_FIELD_NUMBER = 3;
  private org.jetbrains.kotlin.backend.common.serialization.proto.ClassKind kind_;
  /**
   * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.ClassKind kind = 3;</code>
   */
  public boolean hasKind() {
    return ((bitField0_ & 0x00000004) == 0x00000004);
  }
  /**
   * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.ClassKind kind = 3;</code>
   */
  public org.jetbrains.kotlin.backend.common.serialization.proto.ClassKind getKind() {
    return kind_;
  }

  public static final int VISIBILITY_FIELD_NUMBER = 4;
  private org.jetbrains.kotlin.backend.common.serialization.proto.Visibility visibility_;
  /**
   * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.Visibility visibility = 4;</code>
   */
  public boolean hasVisibility() {
    return ((bitField0_ & 0x00000008) == 0x00000008);
  }
  /**
   * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.Visibility visibility = 4;</code>
   */
  public org.jetbrains.kotlin.backend.common.serialization.proto.Visibility getVisibility() {
    return visibility_;
  }

  public static final int MODALITY_FIELD_NUMBER = 5;
  private org.jetbrains.kotlin.backend.common.serialization.proto.ModalityKind modality_;
  /**
   * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.ModalityKind modality = 5;</code>
   */
  public boolean hasModality() {
    return ((bitField0_ & 0x00000010) == 0x00000010);
  }
  /**
   * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.ModalityKind modality = 5;</code>
   */
  public org.jetbrains.kotlin.backend.common.serialization.proto.ModalityKind getModality() {
    return modality_;
  }

  public static final int IS_COMPANION_FIELD_NUMBER = 6;
  private boolean isCompanion_;
  /**
   * <code>required bool is_companion = 6;</code>
   *
   * <pre>
   * TODO: consider using flags for the booleans.
   * </pre>
   */
  public boolean hasIsCompanion() {
    return ((bitField0_ & 0x00000020) == 0x00000020);
  }
  /**
   * <code>required bool is_companion = 6;</code>
   *
   * <pre>
   * TODO: consider using flags for the booleans.
   * </pre>
   */
  public boolean getIsCompanion() {
    return isCompanion_;
  }

  public static final int IS_INNER_FIELD_NUMBER = 7;
  private boolean isInner_;
  /**
   * <code>required bool is_inner = 7;</code>
   */
  public boolean hasIsInner() {
    return ((bitField0_ & 0x00000040) == 0x00000040);
  }
  /**
   * <code>required bool is_inner = 7;</code>
   */
  public boolean getIsInner() {
    return isInner_;
  }

  public static final int IS_DATA_FIELD_NUMBER = 8;
  private boolean isData_;
  /**
   * <code>required bool is_data = 8;</code>
   */
  public boolean hasIsData() {
    return ((bitField0_ & 0x00000080) == 0x00000080);
  }
  /**
   * <code>required bool is_data = 8;</code>
   */
  public boolean getIsData() {
    return isData_;
  }

  public static final int IS_EXTERNAL_FIELD_NUMBER = 9;
  private boolean isExternal_;
  /**
   * <code>required bool is_external = 9;</code>
   */
  public boolean hasIsExternal() {
    return ((bitField0_ & 0x00000100) == 0x00000100);
  }
  /**
   * <code>required bool is_external = 9;</code>
   */
  public boolean getIsExternal() {
    return isExternal_;
  }

  public static final int IS_INLINE_FIELD_NUMBER = 10;
  private boolean isInline_;
  /**
   * <code>required bool is_inline = 10;</code>
   */
  public boolean hasIsInline() {
    return ((bitField0_ & 0x00000200) == 0x00000200);
  }
  /**
   * <code>required bool is_inline = 10;</code>
   */
  public boolean getIsInline() {
    return isInline_;
  }

  public static final int THIS_RECEIVER_FIELD_NUMBER = 11;
  private org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter thisReceiver_;
  /**
   * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter this_receiver = 11;</code>
   */
  public boolean hasThisReceiver() {
    return ((bitField0_ & 0x00000400) == 0x00000400);
  }
  /**
   * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter this_receiver = 11;</code>
   */
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter getThisReceiver() {
    return thisReceiver_;
  }

  public static final int TYPE_PARAMETERS_FIELD_NUMBER = 12;
  private org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameterContainer typeParameters_;
  /**
   * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameterContainer type_parameters = 12;</code>
   */
  public boolean hasTypeParameters() {
    return ((bitField0_ & 0x00000800) == 0x00000800);
  }
  /**
   * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameterContainer type_parameters = 12;</code>
   */
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameterContainer getTypeParameters() {
    return typeParameters_;
  }

  public static final int DECLARATION_CONTAINER_FIELD_NUMBER = 13;
  private org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationContainer declarationContainer_;
  /**
   * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationContainer declaration_container = 13;</code>
   */
  public boolean hasDeclarationContainer() {
    return ((bitField0_ & 0x00001000) == 0x00001000);
  }
  /**
   * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationContainer declaration_container = 13;</code>
   */
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationContainer getDeclarationContainer() {
    return declarationContainer_;
  }

  public static final int SUPER_TYPE_FIELD_NUMBER = 14;
  private java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.IrDataIndex> superType_;
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDataIndex super_type = 14;</code>
   */
  public java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.IrDataIndex> getSuperTypeList() {
    return superType_;
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDataIndex super_type = 14;</code>
   */
  public java.util.List<? extends org.jetbrains.kotlin.backend.common.serialization.proto.IrDataIndexOrBuilder> 
      getSuperTypeOrBuilderList() {
    return superType_;
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDataIndex super_type = 14;</code>
   */
  public int getSuperTypeCount() {
    return superType_.size();
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDataIndex super_type = 14;</code>
   */
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrDataIndex getSuperType(int index) {
    return superType_.get(index);
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDataIndex super_type = 14;</code>
   */
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrDataIndexOrBuilder getSuperTypeOrBuilder(
      int index) {
    return superType_.get(index);
  }

  private void initFields() {
    base_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase.getDefaultInstance();
    name_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrDataIndex.getDefaultInstance();
    kind_ = org.jetbrains.kotlin.backend.common.serialization.proto.ClassKind.CLASS;
    visibility_ = org.jetbrains.kotlin.backend.common.serialization.proto.Visibility.getDefaultInstance();
    modality_ = org.jetbrains.kotlin.backend.common.serialization.proto.ModalityKind.FINAL_MODALITY;
    isCompanion_ = false;
    isInner_ = false;
    isData_ = false;
    isExternal_ = false;
    isInline_ = false;
    thisReceiver_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter.getDefaultInstance();
    typeParameters_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameterContainer.getDefaultInstance();
    declarationContainer_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationContainer.getDefaultInstance();
    superType_ = java.util.Collections.emptyList();
  }
  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    if (!hasBase()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!hasName()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!hasKind()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!hasVisibility()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!hasModality()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!hasIsCompanion()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!hasIsInner()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!hasIsData()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!hasIsExternal()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!hasIsInline()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!hasTypeParameters()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!hasDeclarationContainer()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!getBase().isInitialized()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!getName().isInitialized()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!getVisibility().isInitialized()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (hasThisReceiver()) {
      if (!getThisReceiver().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
    }
    if (!getTypeParameters().isInitialized()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!getDeclarationContainer().isInitialized()) {
      memoizedIsInitialized = 0;
      return false;
    }
    for (int i = 0; i < getSuperTypeCount(); i++) {
      if (!getSuperType(i).isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
    }
    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    getSerializedSize();
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      output.writeMessage(1, base_);
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      output.writeMessage(2, name_);
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      output.writeEnum(3, kind_.getNumber());
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      output.writeMessage(4, visibility_);
    }
    if (((bitField0_ & 0x00000010) == 0x00000010)) {
      output.writeEnum(5, modality_.getNumber());
    }
    if (((bitField0_ & 0x00000020) == 0x00000020)) {
      output.writeBool(6, isCompanion_);
    }
    if (((bitField0_ & 0x00000040) == 0x00000040)) {
      output.writeBool(7, isInner_);
    }
    if (((bitField0_ & 0x00000080) == 0x00000080)) {
      output.writeBool(8, isData_);
    }
    if (((bitField0_ & 0x00000100) == 0x00000100)) {
      output.writeBool(9, isExternal_);
    }
    if (((bitField0_ & 0x00000200) == 0x00000200)) {
      output.writeBool(10, isInline_);
    }
    if (((bitField0_ & 0x00000400) == 0x00000400)) {
      output.writeMessage(11, thisReceiver_);
    }
    if (((bitField0_ & 0x00000800) == 0x00000800)) {
      output.writeMessage(12, typeParameters_);
    }
    if (((bitField0_ & 0x00001000) == 0x00001000)) {
      output.writeMessage(13, declarationContainer_);
    }
    for (int i = 0; i < superType_.size(); i++) {
      output.writeMessage(14, superType_.get(i));
    }
    output.writeRawBytes(unknownFields);
  }

  private int memoizedSerializedSize = -1;
  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeMessageSize(1, base_);
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeMessageSize(2, name_);
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeEnumSize(3, kind_.getNumber());
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeMessageSize(4, visibility_);
    }
    if (((bitField0_ & 0x00000010) == 0x00000010)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeEnumSize(5, modality_.getNumber());
    }
    if (((bitField0_ & 0x00000020) == 0x00000020)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeBoolSize(6, isCompanion_);
    }
    if (((bitField0_ & 0x00000040) == 0x00000040)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeBoolSize(7, isInner_);
    }
    if (((bitField0_ & 0x00000080) == 0x00000080)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeBoolSize(8, isData_);
    }
    if (((bitField0_ & 0x00000100) == 0x00000100)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeBoolSize(9, isExternal_);
    }
    if (((bitField0_ & 0x00000200) == 0x00000200)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeBoolSize(10, isInline_);
    }
    if (((bitField0_ & 0x00000400) == 0x00000400)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeMessageSize(11, thisReceiver_);
    }
    if (((bitField0_ & 0x00000800) == 0x00000800)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeMessageSize(12, typeParameters_);
    }
    if (((bitField0_ & 0x00001000) == 0x00001000)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeMessageSize(13, declarationContainer_);
    }
    for (int i = 0; i < superType_.size(); i++) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeMessageSize(14, superType_.get(i));
    }
    size += unknownFields.size();
    memoizedSerializedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @java.lang.Override
  protected java.lang.Object writeReplace()
      throws java.io.ObjectStreamException {
    return super.writeReplace();
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrClass parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrClass parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrClass parseFrom(byte[] data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrClass parseFrom(
      byte[] data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrClass parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrClass parseFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrClass parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrClass parseDelimitedFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrClass parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrClass parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }

  public static Builder newBuilder() { return Builder.create(); }
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder(org.jetbrains.kotlin.backend.common.serialization.proto.IrClass prototype) {
    return newBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() { return newBuilder(this); }

  /**
   * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrClass}
   */
  public static final class Builder extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
        org.jetbrains.kotlin.backend.common.serialization.proto.IrClass, Builder>
      implements
      // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrClass)
      org.jetbrains.kotlin.backend.common.serialization.proto.IrClassOrBuilder {
    // Construct using org.jetbrains.kotlin.backend.common.serialization.proto.IrClass.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private void maybeForceBuilderInitialization() {
    }
    private static Builder create() {
      return new Builder();
    }

    public Builder clear() {
      super.clear();
      base_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase.getDefaultInstance();
      bitField0_ = (bitField0_ & ~0x00000001);
      name_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrDataIndex.getDefaultInstance();
      bitField0_ = (bitField0_ & ~0x00000002);
      kind_ = org.jetbrains.kotlin.backend.common.serialization.proto.ClassKind.CLASS;
      bitField0_ = (bitField0_ & ~0x00000004);
      visibility_ = org.jetbrains.kotlin.backend.common.serialization.proto.Visibility.getDefaultInstance();
      bitField0_ = (bitField0_ & ~0x00000008);
      modality_ = org.jetbrains.kotlin.backend.common.serialization.proto.ModalityKind.FINAL_MODALITY;
      bitField0_ = (bitField0_ & ~0x00000010);
      isCompanion_ = false;
      bitField0_ = (bitField0_ & ~0x00000020);
      isInner_ = false;
      bitField0_ = (bitField0_ & ~0x00000040);
      isData_ = false;
      bitField0_ = (bitField0_ & ~0x00000080);
      isExternal_ = false;
      bitField0_ = (bitField0_ & ~0x00000100);
      isInline_ = false;
      bitField0_ = (bitField0_ & ~0x00000200);
      thisReceiver_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter.getDefaultInstance();
      bitField0_ = (bitField0_ & ~0x00000400);
      typeParameters_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameterContainer.getDefaultInstance();
      bitField0_ = (bitField0_ & ~0x00000800);
      declarationContainer_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationContainer.getDefaultInstance();
      bitField0_ = (bitField0_ & ~0x00001000);
      superType_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00002000);
      return this;
    }

    public Builder clone() {
      return create().mergeFrom(buildPartial());
    }

    public org.jetbrains.kotlin.backend.common.serialization.proto.IrClass getDefaultInstanceForType() {
      return org.jetbrains.kotlin.backend.common.serialization.proto.IrClass.getDefaultInstance();
    }

    public org.jetbrains.kotlin.backend.common.serialization.proto.IrClass build() {
      org.jetbrains.kotlin.backend.common.serialization.proto.IrClass result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public org.jetbrains.kotlin.backend.common.serialization.proto.IrClass buildPartial() {
      org.jetbrains.kotlin.backend.common.serialization.proto.IrClass result = new org.jetbrains.kotlin.backend.common.serialization.proto.IrClass(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
        to_bitField0_ |= 0x00000001;
      }
      result.base_ = base_;
      if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
        to_bitField0_ |= 0x00000002;
      }
      result.name_ = name_;
      if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
        to_bitField0_ |= 0x00000004;
      }
      result.kind_ = kind_;
      if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
        to_bitField0_ |= 0x00000008;
      }
      result.visibility_ = visibility_;
      if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
        to_bitField0_ |= 0x00000010;
      }
      result.modality_ = modality_;
      if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
        to_bitField0_ |= 0x00000020;
      }
      result.isCompanion_ = isCompanion_;
      if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
        to_bitField0_ |= 0x00000040;
      }
      result.isInner_ = isInner_;
      if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
        to_bitField0_ |= 0x00000080;
      }
      result.isData_ = isData_;
      if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
        to_bitField0_ |= 0x00000100;
      }
      result.isExternal_ = isExternal_;
      if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
        to_bitField0_ |= 0x00000200;
      }
      result.isInline_ = isInline_;
      if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
        to_bitField0_ |= 0x00000400;
      }
      result.thisReceiver_ = thisReceiver_;
      if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
        to_bitField0_ |= 0x00000800;
      }
      result.typeParameters_ = typeParameters_;
      if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
        to_bitField0_ |= 0x00001000;
      }
      result.declarationContainer_ = declarationContainer_;
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        superType_ = java.util.Collections.unmodifiableList(superType_);
        bitField0_ = (bitField0_ & ~0x00002000);
      }
      result.superType_ = superType_;
      result.bitField0_ = to_bitField0_;
      return result;
    }

    public Builder mergeFrom(org.jetbrains.kotlin.backend.common.serialization.proto.IrClass other) {
      if (other == org.jetbrains.kotlin.backend.common.serialization.proto.IrClass.getDefaultInstance()) return this;
      if (other.hasBase()) {
        mergeBase(other.getBase());
      }
      if (other.hasName()) {
        mergeName(other.getName());
      }
      if (other.hasKind()) {
        setKind(other.getKind());
      }
      if (other.hasVisibility()) {
        mergeVisibility(other.getVisibility());
      }
      if (other.hasModality()) {
        setModality(other.getModality());
      }
      if (other.hasIsCompanion()) {
        setIsCompanion(other.getIsCompanion());
      }
      if (other.hasIsInner()) {
        setIsInner(other.getIsInner());
      }
      if (other.hasIsData()) {
        setIsData(other.getIsData());
      }
      if (other.hasIsExternal()) {
        setIsExternal(other.getIsExternal());
      }
      if (other.hasIsInline()) {
        setIsInline(other.getIsInline());
      }
      if (other.hasThisReceiver()) {
        mergeThisReceiver(other.getThisReceiver());
      }
      if (other.hasTypeParameters()) {
        mergeTypeParameters(other.getTypeParameters());
      }
      if (other.hasDeclarationContainer()) {
        mergeDeclarationContainer(other.getDeclarationContainer());
      }
      if (!other.superType_.isEmpty()) {
        if (superType_.isEmpty()) {
          superType_ = other.superType_;
          bitField0_ = (bitField0_ & ~0x00002000);
        } else {
          ensureSuperTypeIsMutable();
          superType_.addAll(other.superType_);
        }
        
      }
      setUnknownFields(
          getUnknownFields().concat(other.unknownFields));
      return this;
    }

    public final boolean isInitialized() {
      if (!hasBase()) {
        
        return false;
      }
      if (!hasName()) {
        
        return false;
      }
      if (!hasKind()) {
        
        return false;
      }
      if (!hasVisibility()) {
        
        return false;
      }
      if (!hasModality()) {
        
        return false;
      }
      if (!hasIsCompanion()) {
        
        return false;
      }
      if (!hasIsInner()) {
        
        return false;
      }
      if (!hasIsData()) {
        
        return false;
      }
      if (!hasIsExternal()) {
        
        return false;
      }
      if (!hasIsInline()) {
        
        return false;
      }
      if (!hasTypeParameters()) {
        
        return false;
      }
      if (!hasDeclarationContainer()) {
        
        return false;
      }
      if (!getBase().isInitialized()) {
        
        return false;
      }
      if (!getName().isInitialized()) {
        
        return false;
      }
      if (!getVisibility().isInitialized()) {
        
        return false;
      }
      if (hasThisReceiver()) {
        if (!getThisReceiver().isInitialized()) {
          
          return false;
        }
      }
      if (!getTypeParameters().isInitialized()) {
        
        return false;
      }
      if (!getDeclarationContainer().isInitialized()) {
        
        return false;
      }
      for (int i = 0; i < getSuperTypeCount(); i++) {
        if (!getSuperType(i).isInitialized()) {
          
          return false;
        }
      }
      return true;
    }

    public Builder mergeFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      org.jetbrains.kotlin.backend.common.serialization.proto.IrClass parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (org.jetbrains.kotlin.backend.common.serialization.proto.IrClass) e.getUnfinishedMessage();
        throw e;
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase.getDefaultInstance();
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1;</code>
     */
    public boolean hasBase() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase getBase() {
      return base_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1;</code>
     */
    public Builder setBase(org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase value) {
      if (value == null) {
        throw new NullPointerException();
      }
      base_ = value;

      bitField0_ |= 0x00000001;
      return this;
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1;</code>
     */
    public Builder setBase(
        org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase.Builder builderForValue) {
      base_ = builderForValue.build();

      bitField0_ |= 0x00000001;
      return this;
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1;</code>
     */
    public Builder mergeBase(org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase value) {
      if (((bitField0_ & 0x00000001) == 0x00000001) &&
          base_ != org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase.getDefaultInstance()) {
        base_ =
          org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase.newBuilder(base_).mergeFrom(value).buildPartial();
      } else {
        base_ = value;
      }

      bitField0_ |= 0x00000001;
      return this;
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1;</code>
     */
    public Builder clearBase() {
      base_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase.getDefaultInstance();

      bitField0_ = (bitField0_ & ~0x00000001);
      return this;
    }

    private org.jetbrains.kotlin.backend.common.serialization.proto.IrDataIndex name_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrDataIndex.getDefaultInstance();
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrDataIndex name = 2;</code>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrDataIndex name = 2;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrDataIndex getName() {
      return name_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrDataIndex name = 2;</code>
     */
    public Builder setName(org.jetbrains.kotlin.backend.common.serialization.proto.IrDataIndex value) {
      if (value == null) {
        throw new NullPointerException();
      }
      name_ = value;

      bitField0_ |= 0x00000002;
      return this;
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrDataIndex name = 2;</code>
     */
    public Builder setName(
        org.jetbrains.kotlin.backend.common.serialization.proto.IrDataIndex.Builder builderForValue) {
      name_ = builderForValue.build();

      bitField0_ |= 0x00000002;
      return this;
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrDataIndex name = 2;</code>
     */
    public Builder mergeName(org.jetbrains.kotlin.backend.common.serialization.proto.IrDataIndex value) {
      if (((bitField0_ & 0x00000002) == 0x00000002) &&
          name_ != org.jetbrains.kotlin.backend.common.serialization.proto.IrDataIndex.getDefaultInstance()) {
        name_ =
          org.jetbrains.kotlin.backend.common.serialization.proto.IrDataIndex.newBuilder(name_).mergeFrom(value).buildPartial();
      } else {
        name_ = value;
      }

      bitField0_ |= 0x00000002;
      return this;
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrDataIndex name = 2;</code>
     */
    public Builder clearName() {
      name_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrDataIndex.getDefaultInstance();

      bitField0_ = (bitField0_ & ~0x00000002);
      return this;
    }

    private org.jetbrains.kotlin.backend.common.serialization.proto.ClassKind kind_ = org.jetbrains.kotlin.backend.common.serialization.proto.ClassKind.CLASS;
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.ClassKind kind = 3;</code>
     */
    public boolean hasKind() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.ClassKind kind = 3;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.ClassKind getKind() {
      return kind_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.ClassKind kind = 3;</code>
     */
    public Builder setKind(org.jetbrains.kotlin.backend.common.serialization.proto.ClassKind value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000004;
      kind_ = value;
      
      return this;
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.ClassKind kind = 3;</code>
     */
    public Builder clearKind() {
      bitField0_ = (bitField0_ & ~0x00000004);
      kind_ = org.jetbrains.kotlin.backend.common.serialization.proto.ClassKind.CLASS;
      
      return this;
    }

    private org.jetbrains.kotlin.backend.common.serialization.proto.Visibility visibility_ = org.jetbrains.kotlin.backend.common.serialization.proto.Visibility.getDefaultInstance();
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.Visibility visibility = 4;</code>
     */
    public boolean hasVisibility() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.Visibility visibility = 4;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.Visibility getVisibility() {
      return visibility_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.Visibility visibility = 4;</code>
     */
    public Builder setVisibility(org.jetbrains.kotlin.backend.common.serialization.proto.Visibility value) {
      if (value == null) {
        throw new NullPointerException();
      }
      visibility_ = value;

      bitField0_ |= 0x00000008;
      return this;
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.Visibility visibility = 4;</code>
     */
    public Builder setVisibility(
        org.jetbrains.kotlin.backend.common.serialization.proto.Visibility.Builder builderForValue) {
      visibility_ = builderForValue.build();

      bitField0_ |= 0x00000008;
      return this;
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.Visibility visibility = 4;</code>
     */
    public Builder mergeVisibility(org.jetbrains.kotlin.backend.common.serialization.proto.Visibility value) {
      if (((bitField0_ & 0x00000008) == 0x00000008) &&
          visibility_ != org.jetbrains.kotlin.backend.common.serialization.proto.Visibility.getDefaultInstance()) {
        visibility_ =
          org.jetbrains.kotlin.backend.common.serialization.proto.Visibility.newBuilder(visibility_).mergeFrom(value).buildPartial();
      } else {
        visibility_ = value;
      }

      bitField0_ |= 0x00000008;
      return this;
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.Visibility visibility = 4;</code>
     */
    public Builder clearVisibility() {
      visibility_ = org.jetbrains.kotlin.backend.common.serialization.proto.Visibility.getDefaultInstance();

      bitField0_ = (bitField0_ & ~0x00000008);
      return this;
    }

    private org.jetbrains.kotlin.backend.common.serialization.proto.ModalityKind modality_ = org.jetbrains.kotlin.backend.common.serialization.proto.ModalityKind.FINAL_MODALITY;
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.ModalityKind modality = 5;</code>
     */
    public boolean hasModality() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.ModalityKind modality = 5;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.ModalityKind getModality() {
      return modality_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.ModalityKind modality = 5;</code>
     */
    public Builder setModality(org.jetbrains.kotlin.backend.common.serialization.proto.ModalityKind value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000010;
      modality_ = value;
      
      return this;
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.ModalityKind modality = 5;</code>
     */
    public Builder clearModality() {
      bitField0_ = (bitField0_ & ~0x00000010);
      modality_ = org.jetbrains.kotlin.backend.common.serialization.proto.ModalityKind.FINAL_MODALITY;
      
      return this;
    }

    private boolean isCompanion_ ;
    /**
     * <code>required bool is_companion = 6;</code>
     *
     * <pre>
     * TODO: consider using flags for the booleans.
     * </pre>
     */
    public boolean hasIsCompanion() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>required bool is_companion = 6;</code>
     *
     * <pre>
     * TODO: consider using flags for the booleans.
     * </pre>
     */
    public boolean getIsCompanion() {
      return isCompanion_;
    }
    /**
     * <code>required bool is_companion = 6;</code>
     *
     * <pre>
     * TODO: consider using flags for the booleans.
     * </pre>
     */
    public Builder setIsCompanion(boolean value) {
      bitField0_ |= 0x00000020;
      isCompanion_ = value;
      
      return this;
    }
    /**
     * <code>required bool is_companion = 6;</code>
     *
     * <pre>
     * TODO: consider using flags for the booleans.
     * </pre>
     */
    public Builder clearIsCompanion() {
      bitField0_ = (bitField0_ & ~0x00000020);
      isCompanion_ = false;
      
      return this;
    }

    private boolean isInner_ ;
    /**
     * <code>required bool is_inner = 7;</code>
     */
    public boolean hasIsInner() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>required bool is_inner = 7;</code>
     */
    public boolean getIsInner() {
      return isInner_;
    }
    /**
     * <code>required bool is_inner = 7;</code>
     */
    public Builder setIsInner(boolean value) {
      bitField0_ |= 0x00000040;
      isInner_ = value;
      
      return this;
    }
    /**
     * <code>required bool is_inner = 7;</code>
     */
    public Builder clearIsInner() {
      bitField0_ = (bitField0_ & ~0x00000040);
      isInner_ = false;
      
      return this;
    }

    private boolean isData_ ;
    /**
     * <code>required bool is_data = 8;</code>
     */
    public boolean hasIsData() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>required bool is_data = 8;</code>
     */
    public boolean getIsData() {
      return isData_;
    }
    /**
     * <code>required bool is_data = 8;</code>
     */
    public Builder setIsData(boolean value) {
      bitField0_ |= 0x00000080;
      isData_ = value;
      
      return this;
    }
    /**
     * <code>required bool is_data = 8;</code>
     */
    public Builder clearIsData() {
      bitField0_ = (bitField0_ & ~0x00000080);
      isData_ = false;
      
      return this;
    }

    private boolean isExternal_ ;
    /**
     * <code>required bool is_external = 9;</code>
     */
    public boolean hasIsExternal() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>required bool is_external = 9;</code>
     */
    public boolean getIsExternal() {
      return isExternal_;
    }
    /**
     * <code>required bool is_external = 9;</code>
     */
    public Builder setIsExternal(boolean value) {
      bitField0_ |= 0x00000100;
      isExternal_ = value;
      
      return this;
    }
    /**
     * <code>required bool is_external = 9;</code>
     */
    public Builder clearIsExternal() {
      bitField0_ = (bitField0_ & ~0x00000100);
      isExternal_ = false;
      
      return this;
    }

    private boolean isInline_ ;
    /**
     * <code>required bool is_inline = 10;</code>
     */
    public boolean hasIsInline() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>required bool is_inline = 10;</code>
     */
    public boolean getIsInline() {
      return isInline_;
    }
    /**
     * <code>required bool is_inline = 10;</code>
     */
    public Builder setIsInline(boolean value) {
      bitField0_ |= 0x00000200;
      isInline_ = value;
      
      return this;
    }
    /**
     * <code>required bool is_inline = 10;</code>
     */
    public Builder clearIsInline() {
      bitField0_ = (bitField0_ & ~0x00000200);
      isInline_ = false;
      
      return this;
    }

    private org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter thisReceiver_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter.getDefaultInstance();
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter this_receiver = 11;</code>
     */
    public boolean hasThisReceiver() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter this_receiver = 11;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter getThisReceiver() {
      return thisReceiver_;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter this_receiver = 11;</code>
     */
    public Builder setThisReceiver(org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter value) {
      if (value == null) {
        throw new NullPointerException();
      }
      thisReceiver_ = value;

      bitField0_ |= 0x00000400;
      return this;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter this_receiver = 11;</code>
     */
    public Builder setThisReceiver(
        org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter.Builder builderForValue) {
      thisReceiver_ = builderForValue.build();

      bitField0_ |= 0x00000400;
      return this;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter this_receiver = 11;</code>
     */
    public Builder mergeThisReceiver(org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter value) {
      if (((bitField0_ & 0x00000400) == 0x00000400) &&
          thisReceiver_ != org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter.getDefaultInstance()) {
        thisReceiver_ =
          org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter.newBuilder(thisReceiver_).mergeFrom(value).buildPartial();
      } else {
        thisReceiver_ = value;
      }

      bitField0_ |= 0x00000400;
      return this;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter this_receiver = 11;</code>
     */
    public Builder clearThisReceiver() {
      thisReceiver_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter.getDefaultInstance();

      bitField0_ = (bitField0_ & ~0x00000400);
      return this;
    }

    private org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameterContainer typeParameters_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameterContainer.getDefaultInstance();
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameterContainer type_parameters = 12;</code>
     */
    public boolean hasTypeParameters() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameterContainer type_parameters = 12;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameterContainer getTypeParameters() {
      return typeParameters_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameterContainer type_parameters = 12;</code>
     */
    public Builder setTypeParameters(org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameterContainer value) {
      if (value == null) {
        throw new NullPointerException();
      }
      typeParameters_ = value;

      bitField0_ |= 0x00000800;
      return this;
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameterContainer type_parameters = 12;</code>
     */
    public Builder setTypeParameters(
        org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameterContainer.Builder builderForValue) {
      typeParameters_ = builderForValue.build();

      bitField0_ |= 0x00000800;
      return this;
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameterContainer type_parameters = 12;</code>
     */
    public Builder mergeTypeParameters(org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameterContainer value) {
      if (((bitField0_ & 0x00000800) == 0x00000800) &&
          typeParameters_ != org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameterContainer.getDefaultInstance()) {
        typeParameters_ =
          org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameterContainer.newBuilder(typeParameters_).mergeFrom(value).buildPartial();
      } else {
        typeParameters_ = value;
      }

      bitField0_ |= 0x00000800;
      return this;
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameterContainer type_parameters = 12;</code>
     */
    public Builder clearTypeParameters() {
      typeParameters_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameterContainer.getDefaultInstance();

      bitField0_ = (bitField0_ & ~0x00000800);
      return this;
    }

    private org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationContainer declarationContainer_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationContainer.getDefaultInstance();
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationContainer declaration_container = 13;</code>
     */
    public boolean hasDeclarationContainer() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationContainer declaration_container = 13;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationContainer getDeclarationContainer() {
      return declarationContainer_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationContainer declaration_container = 13;</code>
     */
    public Builder setDeclarationContainer(org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationContainer value) {
      if (value == null) {
        throw new NullPointerException();
      }
      declarationContainer_ = value;

      bitField0_ |= 0x00001000;
      return this;
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationContainer declaration_container = 13;</code>
     */
    public Builder setDeclarationContainer(
        org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationContainer.Builder builderForValue) {
      declarationContainer_ = builderForValue.build();

      bitField0_ |= 0x00001000;
      return this;
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationContainer declaration_container = 13;</code>
     */
    public Builder mergeDeclarationContainer(org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationContainer value) {
      if (((bitField0_ & 0x00001000) == 0x00001000) &&
          declarationContainer_ != org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationContainer.getDefaultInstance()) {
        declarationContainer_ =
          org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationContainer.newBuilder(declarationContainer_).mergeFrom(value).buildPartial();
      } else {
        declarationContainer_ = value;
      }

      bitField0_ |= 0x00001000;
      return this;
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationContainer declaration_container = 13;</code>
     */
    public Builder clearDeclarationContainer() {
      declarationContainer_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationContainer.getDefaultInstance();

      bitField0_ = (bitField0_ & ~0x00001000);
      return this;
    }

    private java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.IrDataIndex> superType_ =
      java.util.Collections.emptyList();
    private void ensureSuperTypeIsMutable() {
      if (!((bitField0_ & 0x00002000) == 0x00002000)) {
        superType_ = new java.util.ArrayList<org.jetbrains.kotlin.backend.common.serialization.proto.IrDataIndex>(superType_);
        bitField0_ |= 0x00002000;
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDataIndex super_type = 14;</code>
     */
    public java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.IrDataIndex> getSuperTypeList() {
      return java.util.Collections.unmodifiableList(superType_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDataIndex super_type = 14;</code>
     */
    public int getSuperTypeCount() {
      return superType_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDataIndex super_type = 14;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrDataIndex getSuperType(int index) {
      return superType_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDataIndex super_type = 14;</code>
     */
    public Builder setSuperType(
        int index, org.jetbrains.kotlin.backend.common.serialization.proto.IrDataIndex value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureSuperTypeIsMutable();
      superType_.set(index, value);

      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDataIndex super_type = 14;</code>
     */
    public Builder setSuperType(
        int index, org.jetbrains.kotlin.backend.common.serialization.proto.IrDataIndex.Builder builderForValue) {
      ensureSuperTypeIsMutable();
      superType_.set(index, builderForValue.build());

      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDataIndex super_type = 14;</code>
     */
    public Builder addSuperType(org.jetbrains.kotlin.backend.common.serialization.proto.IrDataIndex value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureSuperTypeIsMutable();
      superType_.add(value);

      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDataIndex super_type = 14;</code>
     */
    public Builder addSuperType(
        int index, org.jetbrains.kotlin.backend.common.serialization.proto.IrDataIndex value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureSuperTypeIsMutable();
      superType_.add(index, value);

      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDataIndex super_type = 14;</code>
     */
    public Builder addSuperType(
        org.jetbrains.kotlin.backend.common.serialization.proto.IrDataIndex.Builder builderForValue) {
      ensureSuperTypeIsMutable();
      superType_.add(builderForValue.build());

      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDataIndex super_type = 14;</code>
     */
    public Builder addSuperType(
        int index, org.jetbrains.kotlin.backend.common.serialization.proto.IrDataIndex.Builder builderForValue) {
      ensureSuperTypeIsMutable();
      superType_.add(index, builderForValue.build());

      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDataIndex super_type = 14;</code>
     */
    public Builder addAllSuperType(
        java.lang.Iterable<? extends org.jetbrains.kotlin.backend.common.serialization.proto.IrDataIndex> values) {
      ensureSuperTypeIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
          values, superType_);

      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDataIndex super_type = 14;</code>
     */
    public Builder clearSuperType() {
      superType_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00002000);

      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDataIndex super_type = 14;</code>
     */
    public Builder removeSuperType(int index) {
      ensureSuperTypeIsMutable();
      superType_.remove(index);

      return this;
    }

    // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrClass)
  }

  static {
    defaultInstance = new IrClass(true);
    defaultInstance.initFields();
  }

  // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrClass)
}
