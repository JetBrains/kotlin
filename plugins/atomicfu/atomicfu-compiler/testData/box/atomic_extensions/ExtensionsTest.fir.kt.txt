class ExtensionsTest {
  private var a$volatile: Int
    field = 0
    private get(): Int {
      return <this>.#a$volatile
    }
    private set(value: Int) {
      return <this>.#a$volatile = value
    }

  private var l$volatile: Long
    field = 0L
    private get(): Long {
      return <this>.#l$volatile
    }
    private set(value: Long) {
      return <this>.#l$volatile = value
    }

  private var s$volatile: Any?
    field = null
    private get(): Any? {
      return <this>.#s$volatile
    }
    private set(value: Any?) {
      return <this>.#s$volatile = value
    }

  private var b$volatile: Boolean
    field = true
    private get(): Boolean {
      return <this>.#b$volatile
    }
    private set(value: Boolean) {
      return <this>.#b$volatile = value
    }

  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  private inline fun booleanExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Boolean(handler$atomicfu: AtomicIntArray, index$atomicfu: Int) {
    handler$atomicfu.set(index = index$atomicfu, newValue = when {
      false -> 1
      else -> 0
    })
    check(value = EQEQ(arg0 = handler$atomicfu.get(index = index$atomicfu), arg1 = 1) as Boolean.not())
    handler$atomicfu.set(index = index$atomicfu, newValue = when {
      true -> 1
      else -> 0
    })
    check(value = EQEQ(arg0 = handler$atomicfu.get(index = index$atomicfu), arg1 = 1) as Boolean)
    check(value = EQEQ(arg0 = handler$atomicfu.getAndSet(index = index$atomicfu, newValue = when {
      true -> 1
      else -> 0
    }), arg1 = 1))
    check(value = handler$atomicfu.compareAndSet(index = index$atomicfu, expectedValue = when {
      EQEQ(arg0 = handler$atomicfu.get(index = index$atomicfu), arg1 = 1) as Boolean -> 1
      else -> 0
    }, newValue = when {
      false -> 1
      else -> 0
    }))
    check(value = EQEQ(arg0 = handler$atomicfu.get(index = index$atomicfu), arg1 = 1) as Boolean.not())
  }

  private inline fun booleanExtensionArithmetic$atomicfu$NATIVE_PROPERTY_REF$Boolean(crossinline handler$atomicfu: Function0<KMutableProperty0<Boolean>>) {
    atomicSetField<Boolean>(/* <this> = handler$atomicfu.invoke(), */ newValue = false)
    check(value = atomicGetField<Boolean>(/* <this> = handler$atomicfu.invoke() */) as Boolean.not())
    atomicSetField<Boolean>(/* <this> = handler$atomicfu.invoke(), */ newValue = true)
    check(value = atomicGetField<Boolean>(/* <this> = handler$atomicfu.invoke() */) as Boolean)
    check(value = getAndSetField<Boolean>(/* <this> = handler$atomicfu.invoke(), */ newValue = true))
    check(value = compareAndSetField<Boolean>(/* <this> = handler$atomicfu.invoke(), */ expectedValue = atomicGetField<Boolean>(/* <this> = handler$atomicfu.invoke() */) as Boolean, newValue = false))
    check(value = atomicGetField<Boolean>(/* <this> = handler$atomicfu.invoke() */) as Boolean.not())
  }

  private inline fun intExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Int(handler$atomicfu: AtomicIntArray, index$atomicfu: Int) {
    handler$atomicfu.set(index = index$atomicfu, newValue = 0)
    check(value = EQEQ(arg0 = handler$atomicfu.get(index = index$atomicfu) as Int, arg1 = 0))
    val update: Int = 3
    handler$atomicfu.set(index = index$atomicfu, newValue = update)
    check(value = handler$atomicfu.compareAndSet(index = index$atomicfu, expectedValue = update, newValue = 8))
    handler$atomicfu.set(index = index$atomicfu, newValue = 1)
    check(value = EQEQ(arg0 = handler$atomicfu.get(index = index$atomicfu) as Int, arg1 = 1))
    check(value = EQEQ(arg0 = handler$atomicfu.getAndSet(index = index$atomicfu, newValue = 2), arg1 = 1))
    check(value = EQEQ(arg0 = handler$atomicfu.get(index = index$atomicfu) as Int, arg1 = 2))
    check(value = EQEQ(arg0 = handler$atomicfu.getAndIncrement(index = index$atomicfu), arg1 = 2))
    check(value = EQEQ(arg0 = handler$atomicfu.get(index = index$atomicfu) as Int, arg1 = 3))
    check(value = EQEQ(arg0 = handler$atomicfu.getAndDecrement(index = index$atomicfu), arg1 = 3))
    check(value = EQEQ(arg0 = handler$atomicfu.get(index = index$atomicfu) as Int, arg1 = 2))
    check(value = EQEQ(arg0 = handler$atomicfu.getAndAdd(index = index$atomicfu, delta = 2), arg1 = 2))
    check(value = EQEQ(arg0 = handler$atomicfu.get(index = index$atomicfu) as Int, arg1 = 4))
    check(value = EQEQ(arg0 = handler$atomicfu.addAndGet(index = index$atomicfu, delta = 3), arg1 = 7))
    check(value = EQEQ(arg0 = handler$atomicfu.get(index = index$atomicfu) as Int, arg1 = 7))
    check(value = EQEQ(arg0 = handler$atomicfu.incrementAndGet(index = index$atomicfu), arg1 = 8))
    check(value = EQEQ(arg0 = handler$atomicfu.get(index = index$atomicfu) as Int, arg1 = 8))
    check(value = EQEQ(arg0 = handler$atomicfu.decrementAndGet(index = index$atomicfu), arg1 = 7))
    check(value = EQEQ(arg0 = handler$atomicfu.get(index = index$atomicfu) as Int, arg1 = 7))
    check(value = handler$atomicfu.compareAndSet(index = index$atomicfu, expectedValue = 7, newValue = 10))
    check(value = handler$atomicfu.compareAndSet(index = index$atomicfu, expectedValue = handler$atomicfu.get(index = index$atomicfu) as Int, newValue = 55))
    check(value = EQEQ(arg0 = handler$atomicfu.get(index = index$atomicfu) as Int, arg1 = 55))
  }

  private inline fun intExtensionArithmetic$atomicfu$NATIVE_PROPERTY_REF$Int(crossinline handler$atomicfu: Function0<KMutableProperty0<Int>>) {
    atomicSetField<Int>(/* <this> = handler$atomicfu.invoke(), */ newValue = 0)
    check(value = EQEQ(arg0 = atomicGetField<Int>(/* <this> = handler$atomicfu.invoke() */) as Int, arg1 = 0))
    val update: Int = 3
    atomicSetField<Int>(/* <this> = handler$atomicfu.invoke(), */ newValue = update)
    check(value = compareAndSetField<Int>(/* <this> = handler$atomicfu.invoke(), */ expectedValue = update, newValue = 8))
    atomicSetField<Int>(/* <this> = handler$atomicfu.invoke(), */ newValue = 1)
    check(value = EQEQ(arg0 = atomicGetField<Int>(/* <this> = handler$atomicfu.invoke() */) as Int, arg1 = 1))
    check(value = EQEQ(arg0 = getAndSetField<Int>(/* <this> = handler$atomicfu.invoke(), */ newValue = 2), arg1 = 1))
    check(value = EQEQ(arg0 = atomicGetField<Int>(/* <this> = handler$atomicfu.invoke() */) as Int, arg1 = 2))
    check(value = EQEQ(arg0 = getAndAddField(/* <this> = handler$atomicfu.invoke(), */ delta = 1), arg1 = 2))
    check(value = EQEQ(arg0 = atomicGetField<Int>(/* <this> = handler$atomicfu.invoke() */) as Int, arg1 = 3))
    check(value = EQEQ(arg0 = getAndAddField(/* <this> = handler$atomicfu.invoke(), */ delta = -1), arg1 = 3))
    check(value = EQEQ(arg0 = atomicGetField<Int>(/* <this> = handler$atomicfu.invoke() */) as Int, arg1 = 2))
    check(value = EQEQ(arg0 = getAndAddField(/* <this> = handler$atomicfu.invoke(), */ delta = 2), arg1 = 2))
    check(value = EQEQ(arg0 = atomicGetField<Int>(/* <this> = handler$atomicfu.invoke() */) as Int, arg1 = 4))
    check(value = EQEQ(arg0 = getAndAddField(/* <this> = handler$atomicfu.invoke(), */ delta = 3).plus(other = 3), arg1 = 7))
    check(value = EQEQ(arg0 = atomicGetField<Int>(/* <this> = handler$atomicfu.invoke() */) as Int, arg1 = 7))
    check(value = EQEQ(arg0 = getAndAddField(/* <this> = handler$atomicfu.invoke(), */ delta = 1).plus(other = 1), arg1 = 8))
    check(value = EQEQ(arg0 = atomicGetField<Int>(/* <this> = handler$atomicfu.invoke() */) as Int, arg1 = 8))
    check(value = EQEQ(arg0 = getAndAddField(/* <this> = handler$atomicfu.invoke(), */ delta = -1).plus(other = -1), arg1 = 7))
    check(value = EQEQ(arg0 = atomicGetField<Int>(/* <this> = handler$atomicfu.invoke() */) as Int, arg1 = 7))
    check(value = compareAndSetField<Int>(/* <this> = handler$atomicfu.invoke(), */ expectedValue = 7, newValue = 10))
    check(value = compareAndSetField<Int>(/* <this> = handler$atomicfu.invoke(), */ expectedValue = atomicGetField<Int>(/* <this> = handler$atomicfu.invoke() */) as Int, newValue = 55))
    check(value = EQEQ(arg0 = atomicGetField<Int>(/* <this> = handler$atomicfu.invoke() */) as Int, arg1 = 55))
  }

  private inline fun longExtensionArithmetic$atomicfu$ATOMIC_ARRAY$Long(handler$atomicfu: AtomicLongArray, index$atomicfu: Int) {
    handler$atomicfu.set(index = index$atomicfu, newValue = 2424920024888888848L)
    check(value = EQEQ(arg0 = handler$atomicfu.get(index = index$atomicfu) as Long, arg1 = 2424920024888888848L))
    handler$atomicfu.set(index = index$atomicfu, newValue = 8424920024888888848L)
    check(value = EQEQ(arg0 = handler$atomicfu.get(index = index$atomicfu) as Long, arg1 = 8424920024888888848L))
    check(value = EQEQ(arg0 = handler$atomicfu.getAndSet(index = index$atomicfu, newValue = 8924920024888888848L), arg1 = 8424920024888888848L))
    check(value = EQEQ(arg0 = handler$atomicfu.get(index = index$atomicfu) as Long, arg1 = 8924920024888888848L))
    check(value = EQEQ(arg0 = handler$atomicfu.incrementAndGet(index = index$atomicfu), arg1 = 8924920024888888849L))
    check(value = EQEQ(arg0 = handler$atomicfu.get(index = index$atomicfu) as Long, arg1 = 8924920024888888849L))
    check(value = EQEQ(arg0 = handler$atomicfu.getAndDecrement(index = index$atomicfu), arg1 = 8924920024888888849L))
    check(value = EQEQ(arg0 = handler$atomicfu.get(index = index$atomicfu) as Long, arg1 = 8924920024888888848L))
    check(value = EQEQ(arg0 = handler$atomicfu.getAndAdd(index = index$atomicfu, delta = 100000000000000000L), arg1 = 8924920024888888848L))
    check(value = EQEQ(arg0 = handler$atomicfu.get(index = index$atomicfu) as Long, arg1 = 9024920024888888848L))
    check(value = EQEQ(arg0 = handler$atomicfu.addAndGet(index = index$atomicfu, delta = -9223372036854775807L), arg1 = -198452011965886959L))
    check(value = EQEQ(arg0 = handler$atomicfu.get(index = index$atomicfu) as Long, arg1 = -198452011965886959L))
    check(value = EQEQ(arg0 = handler$atomicfu.incrementAndGet(index = index$atomicfu), arg1 = -198452011965886958L))
    check(value = EQEQ(arg0 = handler$atomicfu.get(index = index$atomicfu) as Long, arg1 = -198452011965886958L))
    check(value = EQEQ(arg0 = handler$atomicfu.decrementAndGet(index = index$atomicfu), arg1 = -198452011965886959L))
    check(value = EQEQ(arg0 = handler$atomicfu.get(index = index$atomicfu) as Long, arg1 = -198452011965886959L))
  }

  private inline fun longExtensionArithmetic$atomicfu$NATIVE_PROPERTY_REF$Long(crossinline handler$atomicfu: Function0<KMutableProperty0<Long>>) {
    atomicSetField<Long>(/* <this> = handler$atomicfu.invoke(), */ newValue = 2424920024888888848L)
    check(value = EQEQ(arg0 = atomicGetField<Long>(/* <this> = handler$atomicfu.invoke() */) as Long, arg1 = 2424920024888888848L))
    atomicSetField<Long>(/* <this> = handler$atomicfu.invoke(), */ newValue = 8424920024888888848L)
    check(value = EQEQ(arg0 = atomicGetField<Long>(/* <this> = handler$atomicfu.invoke() */) as Long, arg1 = 8424920024888888848L))
    check(value = EQEQ(arg0 = getAndSetField<Long>(/* <this> = handler$atomicfu.invoke(), */ newValue = 8924920024888888848L), arg1 = 8424920024888888848L))
    check(value = EQEQ(arg0 = atomicGetField<Long>(/* <this> = handler$atomicfu.invoke() */) as Long, arg1 = 8924920024888888848L))
    check(value = EQEQ(arg0 = getAndAddField(/* <this> = handler$atomicfu.invoke(), */ delta = 1L /*as Long */).plus(other = 1L), arg1 = 8924920024888888849L))
    check(value = EQEQ(arg0 = atomicGetField<Long>(/* <this> = handler$atomicfu.invoke() */) as Long, arg1 = 8924920024888888849L))
    check(value = EQEQ(arg0 = getAndAddField(/* <this> = handler$atomicfu.invoke(), */ delta = -1L /*as Long */), arg1 = 8924920024888888849L))
    check(value = EQEQ(arg0 = atomicGetField<Long>(/* <this> = handler$atomicfu.invoke() */) as Long, arg1 = 8924920024888888848L))
    check(value = EQEQ(arg0 = getAndAddField(/* <this> = handler$atomicfu.invoke(), */ delta = 100000000000000000L /*as Long */), arg1 = 8924920024888888848L))
    check(value = EQEQ(arg0 = atomicGetField<Long>(/* <this> = handler$atomicfu.invoke() */) as Long, arg1 = 9024920024888888848L))
    check(value = EQEQ(arg0 = getAndAddField(/* <this> = handler$atomicfu.invoke(), */ delta = -9223372036854775807L /*as Long */).plus(other = -9223372036854775807L), arg1 = -198452011965886959L))
    check(value = EQEQ(arg0 = atomicGetField<Long>(/* <this> = handler$atomicfu.invoke() */) as Long, arg1 = -198452011965886959L))
    check(value = EQEQ(arg0 = getAndAddField(/* <this> = handler$atomicfu.invoke(), */ delta = 1L /*as Long */).plus(other = 1L), arg1 = -198452011965886958L))
    check(value = EQEQ(arg0 = atomicGetField<Long>(/* <this> = handler$atomicfu.invoke() */) as Long, arg1 = -198452011965886958L))
    check(value = EQEQ(arg0 = getAndAddField(/* <this> = handler$atomicfu.invoke(), */ delta = -1L /*as Long */).plus(other = -1L), arg1 = -198452011965886959L))
    check(value = EQEQ(arg0 = atomicGetField<Long>(/* <this> = handler$atomicfu.invoke() */) as Long, arg1 = -198452011965886959L))
  }

  private inline fun refExtension$atomicfu$ATOMIC_ARRAY$Any(handler$atomicfu: AtomicArray<Any?>, index$atomicfu: Int) {
    handler$atomicfu.set(index = index$atomicfu, newValue = "aaa")
    check(value = EQEQ(arg0 = handler$atomicfu.get(index = index$atomicfu) as Any?, arg1 = "aaa"))
    handler$atomicfu.set(index = index$atomicfu, newValue = "bb")
    check(value = EQEQ(arg0 = handler$atomicfu.get(index = index$atomicfu) as Any?, arg1 = "bb"))
    check(value = EQEQ(arg0 = handler$atomicfu.getAndSet(index = index$atomicfu, newValue = "ccc"), arg1 = "bb"))
    check(value = EQEQ(arg0 = handler$atomicfu.get(index = index$atomicfu) as Any?, arg1 = "ccc"))
  }

  private inline fun refExtension$atomicfu$NATIVE_PROPERTY_REF$Any(crossinline handler$atomicfu: Function0<KMutableProperty0<Any?>>) {
    atomicSetField<Any?>(/* <this> = handler$atomicfu.invoke(), */ newValue = "aaa")
    check(value = EQEQ(arg0 = atomicGetField<Any?>(/* <this> = handler$atomicfu.invoke() */) as Any?, arg1 = "aaa"))
    atomicSetField<Any?>(/* <this> = handler$atomicfu.invoke(), */ newValue = "bb")
    check(value = EQEQ(arg0 = atomicGetField<Any?>(/* <this> = handler$atomicfu.invoke() */) as Any?, arg1 = "bb"))
    check(value = EQEQ(arg0 = getAndSetField<Any?>(/* <this> = handler$atomicfu.invoke(), */ newValue = "ccc"), arg1 = "bb"))
    check(value = EQEQ(arg0 = atomicGetField<Any?>(/* <this> = handler$atomicfu.invoke() */) as Any?, arg1 = "ccc"))
  }

  fun testExtension() {
    <this>.intExtensionArithmetic$atomicfu$NATIVE_PROPERTY_REF$Int(handler$atomicfu = local inline fun <a$volatile-getter>(): KMutableProperty0<Int> {
      return ExtensionsTest<this>::a$volatile
    }
)
    <this>.longExtensionArithmetic$atomicfu$NATIVE_PROPERTY_REF$Long(handler$atomicfu = local inline fun <l$volatile-getter>(): KMutableProperty0<Long> {
      return ExtensionsTest<this>::l$volatile
    }
)
    <this>.refExtension$atomicfu$NATIVE_PROPERTY_REF$Any(handler$atomicfu = local inline fun <s$volatile-getter>(): KMutableProperty0<Any?> {
      return ExtensionsTest<this>::s$volatile
    }
)
    <this>.booleanExtensionArithmetic$atomicfu$NATIVE_PROPERTY_REF$Boolean(handler$atomicfu = local inline fun <b$volatile-getter>(): KMutableProperty0<Boolean> {
      return ExtensionsTest<this>::b$volatile
    }
)
  }

  fun testScopedFieldGetters() {
    check(value = EQEQ(arg0 = atomicGetField<Int>(/* <this> = ExtensionsTest<this>::a$volatile */) as Int, arg1 = 0))
    val update: Int = 3
    atomicSetField<Int>(/* <this> = ExtensionsTest<this>::a$volatile, */ newValue = update)
    check(value = compareAndSetField<Int>(/* <this> = ExtensionsTest<this>::a$volatile, */ expectedValue = update, newValue = 8))
    atomicSetField<Int>(/* <this> = ExtensionsTest<this>::a$volatile, */ newValue = 1)
    check(value = EQEQ(arg0 = atomicGetField<Int>(/* <this> = ExtensionsTest<this>::a$volatile */) as Int, arg1 = 1))
    check(value = EQEQ(arg0 = getAndSetField<Int>(/* <this> = ExtensionsTest<this>::a$volatile, */ newValue = 2), arg1 = 1))
    check(value = EQEQ(arg0 = atomicGetField<Int>(/* <this> = ExtensionsTest<this>::a$volatile */) as Int, arg1 = 2))
    check(value = EQEQ(arg0 = getAndAddField(/* <this> = ExtensionsTest<this>::a$volatile, */ delta = 1), arg1 = 2))
    check(value = EQEQ(arg0 = atomicGetField<Int>(/* <this> = ExtensionsTest<this>::a$volatile */) as Int, arg1 = 3))
    check(value = EQEQ(arg0 = getAndAddField(/* <this> = ExtensionsTest<this>::a$volatile, */ delta = -1), arg1 = 3))
    check(value = EQEQ(arg0 = atomicGetField<Int>(/* <this> = ExtensionsTest<this>::a$volatile */) as Int, arg1 = 2))
    check(value = EQEQ(arg0 = getAndAddField(/* <this> = ExtensionsTest<this>::a$volatile, */ delta = 2), arg1 = 2))
    check(value = EQEQ(arg0 = atomicGetField<Int>(/* <this> = ExtensionsTest<this>::a$volatile */) as Int, arg1 = 4))
    check(value = EQEQ(arg0 = getAndAddField(/* <this> = ExtensionsTest<this>::a$volatile, */ delta = 3).plus(other = 3), arg1 = 7))
    check(value = EQEQ(arg0 = atomicGetField<Int>(/* <this> = ExtensionsTest<this>::a$volatile */) as Int, arg1 = 7))
    check(value = EQEQ(arg0 = getAndAddField(/* <this> = ExtensionsTest<this>::a$volatile, */ delta = 1).plus(other = 1), arg1 = 8))
    check(value = EQEQ(arg0 = atomicGetField<Int>(/* <this> = ExtensionsTest<this>::a$volatile */) as Int, arg1 = 8))
    check(value = EQEQ(arg0 = getAndAddField(/* <this> = ExtensionsTest<this>::a$volatile, */ delta = -1).plus(other = -1), arg1 = 7))
    check(value = EQEQ(arg0 = atomicGetField<Int>(/* <this> = ExtensionsTest<this>::a$volatile */) as Int, arg1 = 7))
    check(value = compareAndSetField<Int>(/* <this> = ExtensionsTest<this>::a$volatile, */ expectedValue = 7, newValue = 10))
  }

}

fun box(): String {
  val testClass: ExtensionsTest = ExtensionsTest()
  testClass.testScopedFieldGetters()
  testClass.testExtension()
  return "OK"
}
