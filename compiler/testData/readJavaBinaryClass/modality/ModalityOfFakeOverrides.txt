namespace test

public open class test.ModalityOfFakeOverrides : java.util.AbstractList<jet.String> {
    public final /*constructor*/ fun <init>(): test.ModalityOfFakeOverrides
    public open override /*1*/ fun add(/*0*/ p0: jet.Int, /*1*/ p1: jet.String?): jet.Tuple0
    public open override /*1*/ fun add(/*0*/ p0: jet.String?): jet.Boolean
    public open override /*1*/ fun addAll(/*0*/ p0: java.util.Collection<out jet.String>?): jet.Boolean
    public open override /*1*/ fun addAll(/*0*/ p0: jet.Int, /*1*/ p1: java.util.Collection<out jet.String>?): jet.Boolean
    public open override /*1*/ fun clear(): jet.Tuple0
    public open override /*1*/ fun contains(/*0*/ p0: jet.Any?): jet.Boolean
    public open override /*1*/ fun containsAll(/*0*/ p0: java.util.Collection<out jet.Any?>?): jet.Boolean
    public open override /*1*/ fun get(/*0*/ p0: jet.Int): jet.String?
    public open override /*1*/ fun indexOf(/*0*/ p0: jet.Any?): jet.Int
    public open override /*1*/ fun isEmpty(): jet.Boolean
    public open override /*1*/ fun iterator(): java.util.Iterator<jet.String>?
    public open override /*1*/ fun lastIndexOf(/*0*/ p0: jet.Any?): jet.Int
    public open override /*1*/ fun listIterator(): java.util.ListIterator<jet.String>?
    public open override /*1*/ fun listIterator(/*0*/ p0: jet.Int): java.util.ListIterator<jet.String>?
    protected final override /*1*/ var modCount: jet.Int
    public open override /*1*/ fun remove(/*0*/ p0: jet.Any?): jet.Boolean
    public open override /*1*/ fun remove(/*0*/ p0: jet.Int): jet.String?
    public open override /*1*/ fun removeAll(/*0*/ p0: java.util.Collection<out jet.Any?>?): jet.Boolean
    protected open override /*1*/ fun removeRange(/*0*/ p0: jet.Int, /*1*/ p1: jet.Int): jet.Tuple0
    public open override /*1*/ fun retainAll(/*0*/ p0: java.util.Collection<out jet.Any?>?): jet.Boolean
    public open override /*1*/ fun set(/*0*/ p0: jet.Int, /*1*/ p1: jet.String?): jet.String?
    public open override /*1*/ fun size(): jet.Int
    public open override /*1*/ fun subList(/*0*/ p0: jet.Int, /*1*/ p1: jet.Int): java.util.List<jet.String>?
    public open override /*1*/ fun toArray(): jet.Array<jet.Any?>?
    public open override /*1*/ fun </*0*/ T : jet.Any?>toArray(/*0*/ p0: jet.Array<T?>?): jet.Array<T?>?
}
