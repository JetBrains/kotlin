IGNORE_PER_FILE: true
// ^^^KT-80697
// Mismatched rebuilt modules at step 8
// Expected :[lib1/l1, lib2/l2int]
// Actual   :[lib1/l1, lib2/l2int, lib2/l2]

IGNORE_BACKEND: WASM
// ^^^KT-80698
// Mismatched file stats for module [kotlin_lib2] at step 2
// Expected :[updated imports=[l2int.kt, l2string.kt]]
// Actual   :[updated imports=[l2.kt, l2int.kt, l2string.kt]]

MODULES: lib1, lib2, main

STEP 0:
    language: +IrIntraModuleInlinerBeforeKlibSerialization, -IrCrossModuleInlinerBeforeKlibSerialization
    libs: lib1, lib2, main
    dirty js modules: lib1, lib2, main
    dirty js files:   lib1/l1, lib2/l2, lib2/l2string, main/m, main/m.export, main
STEP 1:
    language: +IrIntraModuleInlinerBeforeKlibSerialization, -IrCrossModuleInlinerBeforeKlibSerialization
    libs: lib1, lib2, main
    dirty js modules: lib1, lib2
    dirty js files:   lib1/l1, lib2/l2, lib2/l2int
STEP 2:
    language: +IrIntraModuleInlinerBeforeKlibSerialization, -IrCrossModuleInlinerBeforeKlibSerialization
    libs: lib1, lib2, main
    dirty js modules: lib1
    dirty js files:   lib1/l1
STEP 3:
    language: +IrIntraModuleInlinerBeforeKlibSerialization, -IrCrossModuleInlinerBeforeKlibSerialization
    libs: lib1, lib2, main
    dirty js modules: lib1, lib2
    dirty js files:   lib1/l1, lib2/l2, lib2/l2pair
STEP 4:
    language: +IrIntraModuleInlinerBeforeKlibSerialization, -IrCrossModuleInlinerBeforeKlibSerialization
    libs: lib1, lib2, main
    dirty js modules: lib1, lib2
    dirty js files:   lib1/l1, lib2/l2, lib2/l2func, lib2/l2string
STEP 5:
    language: +IrIntraModuleInlinerBeforeKlibSerialization, -IrCrossModuleInlinerBeforeKlibSerialization
    libs: lib1, lib2, main
    dirty js modules: lib1
    dirty js files:   lib1/l1
STEP 6:
    language: +IrIntraModuleInlinerBeforeKlibSerialization, -IrCrossModuleInlinerBeforeKlibSerialization
    libs: lib1, lib2, main
    dirty js modules: lib1, lib2
    dirty js files:   lib1/l1, lib2/l2, lib2/l2func, lib2/l2string, lib2/l2pair
STEP 7:
    language: +IrIntraModuleInlinerBeforeKlibSerialization, -IrCrossModuleInlinerBeforeKlibSerialization
    libs: lib1, lib2, main
    dirty js modules: lib1, lib2
    dirty js files:   lib1/l1
STEP 8:
    language: +IrIntraModuleInlinerBeforeKlibSerialization, -IrCrossModuleInlinerBeforeKlibSerialization
    libs: lib1, lib2, main
    dirty js modules: lib1, lib2
    dirty js files:   lib1/l1, lib2/l2int
STEP 9..10:
    language: +IrIntraModuleInlinerBeforeKlibSerialization, -IrCrossModuleInlinerBeforeKlibSerialization
    libs: lib1, lib2, main
    dirty js modules: lib1, lib2
    dirty js files:   lib1/l1, lib2/l2, lib2/l2int
