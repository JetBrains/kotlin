// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: compiler/ir/serialization.common/src/KotlinIr.proto

package org.jetbrains.kotlin.backend.common.serialization.proto;

/**
 * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall}
 */
public final class IrConstructorCall extends
    org.jetbrains.kotlin.protobuf.GeneratedMessageLite implements
    // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall)
    IrConstructorCallOrBuilder {
  // Use IrConstructorCall.newBuilder() to construct.
  private IrConstructorCall(org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder builder) {
    super(builder);
    this.unknownFields = builder.getUnknownFields();
  }
  private IrConstructorCall(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.ByteString.EMPTY;}

  private static final IrConstructorCall defaultInstance;
  public static IrConstructorCall getDefaultInstance() {
    return defaultInstance;
  }

  public IrConstructorCall getDefaultInstanceForType() {
    return defaultInstance;
  }

  private final org.jetbrains.kotlin.protobuf.ByteString unknownFields;
  private IrConstructorCall(
      org.jetbrains.kotlin.protobuf.CodedInputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    initFields();
    int mutable_bitField0_ = 0;
    org.jetbrains.kotlin.protobuf.ByteString.Output unknownFieldsOutput =
        org.jetbrains.kotlin.protobuf.ByteString.newOutput();
    org.jetbrains.kotlin.protobuf.CodedOutputStream unknownFieldsCodedOutput =
        org.jetbrains.kotlin.protobuf.CodedOutputStream.newInstance(
            unknownFieldsOutput, 1);
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                   extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
          case 8: {
            bitField0_ |= 0x00000001;
            symbol_ = input.readInt64();
            break;
          }
          case 16: {
            bitField0_ |= 0x00000002;
            constructorTypeArgumentsCount_ = input.readInt32();
            break;
          }
          case 26: {
            org.jetbrains.kotlin.backend.common.serialization.proto.MemberAccessCommon.Builder subBuilder = null;
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
              subBuilder = memberAccess_.toBuilder();
            }
            memberAccess_ = input.readMessage(org.jetbrains.kotlin.backend.common.serialization.proto.MemberAccessCommon.PARSER, extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(memberAccess_);
              memberAccess_ = subBuilder.buildPartial();
            }
            bitField0_ |= 0x00000004;
            break;
          }
        }
      }
    } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
          e.getMessage()).setUnfinishedMessage(this);
    } finally {
      try {
        unknownFieldsCodedOutput.flush();
      } catch (java.io.IOException e) {
      // Should not happen
      } finally {
        unknownFields = unknownFieldsOutput.toByteString();
      }
      makeExtensionsImmutable();
    }
  }
  public static org.jetbrains.kotlin.protobuf.Parser<IrConstructorCall> PARSER =
      new org.jetbrains.kotlin.protobuf.AbstractParser<IrConstructorCall>() {
    public IrConstructorCall parsePartialFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return new IrConstructorCall(input, extensionRegistry);
    }
  };

  @java.lang.Override
  public org.jetbrains.kotlin.protobuf.Parser<IrConstructorCall> getParserForType() {
    return PARSER;
  }

  private int bitField0_;
  public static final int SYMBOL_FIELD_NUMBER = 1;
  private long symbol_;
  /**
   * <code>required int64 symbol = 1;</code>
   */
  public boolean hasSymbol() {
    return ((bitField0_ & 0x00000001) == 0x00000001);
  }
  /**
   * <code>required int64 symbol = 1;</code>
   */
  public long getSymbol() {
    return symbol_;
  }

  public static final int CONSTRUCTOR_TYPE_ARGUMENTS_COUNT_FIELD_NUMBER = 2;
  private int constructorTypeArgumentsCount_;
  /**
   * <code>required int32 constructor_type_arguments_count = 2;</code>
   */
  public boolean hasConstructorTypeArgumentsCount() {
    return ((bitField0_ & 0x00000002) == 0x00000002);
  }
  /**
   * <code>required int32 constructor_type_arguments_count = 2;</code>
   */
  public int getConstructorTypeArgumentsCount() {
    return constructorTypeArgumentsCount_;
  }

  public static final int MEMBER_ACCESS_FIELD_NUMBER = 3;
  private org.jetbrains.kotlin.backend.common.serialization.proto.MemberAccessCommon memberAccess_;
  /**
   * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.MemberAccessCommon member_access = 3;</code>
   */
  public boolean hasMemberAccess() {
    return ((bitField0_ & 0x00000004) == 0x00000004);
  }
  /**
   * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.MemberAccessCommon member_access = 3;</code>
   */
  public org.jetbrains.kotlin.backend.common.serialization.proto.MemberAccessCommon getMemberAccess() {
    return memberAccess_;
  }

  private void initFields() {
    symbol_ = 0L;
    constructorTypeArgumentsCount_ = 0;
    memberAccess_ = org.jetbrains.kotlin.backend.common.serialization.proto.MemberAccessCommon.getDefaultInstance();
  }
  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    if (!hasSymbol()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!hasConstructorTypeArgumentsCount()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!hasMemberAccess()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!getMemberAccess().isInitialized()) {
      memoizedIsInitialized = 0;
      return false;
    }
    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    getSerializedSize();
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      output.writeInt64(1, symbol_);
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      output.writeInt32(2, constructorTypeArgumentsCount_);
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      output.writeMessage(3, memberAccess_);
    }
    output.writeRawBytes(unknownFields);
  }

  private int memoizedSerializedSize = -1;
  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeInt64Size(1, symbol_);
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeInt32Size(2, constructorTypeArgumentsCount_);
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeMessageSize(3, memberAccess_);
    }
    size += unknownFields.size();
    memoizedSerializedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @java.lang.Override
  protected java.lang.Object writeReplace()
      throws java.io.ObjectStreamException {
    return super.writeReplace();
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall parseFrom(byte[] data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall parseFrom(
      byte[] data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall parseFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall parseDelimitedFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }

  public static Builder newBuilder() { return Builder.create(); }
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder(org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall prototype) {
    return newBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() { return newBuilder(this); }

  /**
   * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall}
   */
  public static final class Builder extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
        org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall, Builder>
      implements
      // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall)
      org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCallOrBuilder {
    // Construct using org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private void maybeForceBuilderInitialization() {
    }
    private static Builder create() {
      return new Builder();
    }

    public Builder clear() {
      super.clear();
      symbol_ = 0L;
      bitField0_ = (bitField0_ & ~0x00000001);
      constructorTypeArgumentsCount_ = 0;
      bitField0_ = (bitField0_ & ~0x00000002);
      memberAccess_ = org.jetbrains.kotlin.backend.common.serialization.proto.MemberAccessCommon.getDefaultInstance();
      bitField0_ = (bitField0_ & ~0x00000004);
      return this;
    }

    public Builder clone() {
      return create().mergeFrom(buildPartial());
    }

    public org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall getDefaultInstanceForType() {
      return org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall.getDefaultInstance();
    }

    public org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall build() {
      org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall buildPartial() {
      org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall result = new org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
        to_bitField0_ |= 0x00000001;
      }
      result.symbol_ = symbol_;
      if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
        to_bitField0_ |= 0x00000002;
      }
      result.constructorTypeArgumentsCount_ = constructorTypeArgumentsCount_;
      if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
        to_bitField0_ |= 0x00000004;
      }
      result.memberAccess_ = memberAccess_;
      result.bitField0_ = to_bitField0_;
      return result;
    }

    public Builder mergeFrom(org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall other) {
      if (other == org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall.getDefaultInstance()) return this;
      if (other.hasSymbol()) {
        setSymbol(other.getSymbol());
      }
      if (other.hasConstructorTypeArgumentsCount()) {
        setConstructorTypeArgumentsCount(other.getConstructorTypeArgumentsCount());
      }
      if (other.hasMemberAccess()) {
        mergeMemberAccess(other.getMemberAccess());
      }
      setUnknownFields(
          getUnknownFields().concat(other.unknownFields));
      return this;
    }

    public final boolean isInitialized() {
      if (!hasSymbol()) {
        
        return false;
      }
      if (!hasConstructorTypeArgumentsCount()) {
        
        return false;
      }
      if (!hasMemberAccess()) {
        
        return false;
      }
      if (!getMemberAccess().isInitialized()) {
        
        return false;
      }
      return true;
    }

    public Builder mergeFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall) e.getUnfinishedMessage();
        throw e;
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private long symbol_ ;
    /**
     * <code>required int64 symbol = 1;</code>
     */
    public boolean hasSymbol() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int64 symbol = 1;</code>
     */
    public long getSymbol() {
      return symbol_;
    }
    /**
     * <code>required int64 symbol = 1;</code>
     */
    public Builder setSymbol(long value) {
      bitField0_ |= 0x00000001;
      symbol_ = value;
      
      return this;
    }
    /**
     * <code>required int64 symbol = 1;</code>
     */
    public Builder clearSymbol() {
      bitField0_ = (bitField0_ & ~0x00000001);
      symbol_ = 0L;
      
      return this;
    }

    private int constructorTypeArgumentsCount_ ;
    /**
     * <code>required int32 constructor_type_arguments_count = 2;</code>
     */
    public boolean hasConstructorTypeArgumentsCount() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required int32 constructor_type_arguments_count = 2;</code>
     */
    public int getConstructorTypeArgumentsCount() {
      return constructorTypeArgumentsCount_;
    }
    /**
     * <code>required int32 constructor_type_arguments_count = 2;</code>
     */
    public Builder setConstructorTypeArgumentsCount(int value) {
      bitField0_ |= 0x00000002;
      constructorTypeArgumentsCount_ = value;
      
      return this;
    }
    /**
     * <code>required int32 constructor_type_arguments_count = 2;</code>
     */
    public Builder clearConstructorTypeArgumentsCount() {
      bitField0_ = (bitField0_ & ~0x00000002);
      constructorTypeArgumentsCount_ = 0;
      
      return this;
    }

    private org.jetbrains.kotlin.backend.common.serialization.proto.MemberAccessCommon memberAccess_ = org.jetbrains.kotlin.backend.common.serialization.proto.MemberAccessCommon.getDefaultInstance();
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.MemberAccessCommon member_access = 3;</code>
     */
    public boolean hasMemberAccess() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.MemberAccessCommon member_access = 3;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.MemberAccessCommon getMemberAccess() {
      return memberAccess_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.MemberAccessCommon member_access = 3;</code>
     */
    public Builder setMemberAccess(org.jetbrains.kotlin.backend.common.serialization.proto.MemberAccessCommon value) {
      if (value == null) {
        throw new NullPointerException();
      }
      memberAccess_ = value;

      bitField0_ |= 0x00000004;
      return this;
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.MemberAccessCommon member_access = 3;</code>
     */
    public Builder setMemberAccess(
        org.jetbrains.kotlin.backend.common.serialization.proto.MemberAccessCommon.Builder builderForValue) {
      memberAccess_ = builderForValue.build();

      bitField0_ |= 0x00000004;
      return this;
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.MemberAccessCommon member_access = 3;</code>
     */
    public Builder mergeMemberAccess(org.jetbrains.kotlin.backend.common.serialization.proto.MemberAccessCommon value) {
      if (((bitField0_ & 0x00000004) == 0x00000004) &&
          memberAccess_ != org.jetbrains.kotlin.backend.common.serialization.proto.MemberAccessCommon.getDefaultInstance()) {
        memberAccess_ =
          org.jetbrains.kotlin.backend.common.serialization.proto.MemberAccessCommon.newBuilder(memberAccess_).mergeFrom(value).buildPartial();
      } else {
        memberAccess_ = value;
      }

      bitField0_ |= 0x00000004;
      return this;
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.MemberAccessCommon member_access = 3;</code>
     */
    public Builder clearMemberAccess() {
      memberAccess_ = org.jetbrains.kotlin.backend.common.serialization.proto.MemberAccessCommon.getDefaultInstance();

      bitField0_ = (bitField0_ & ~0x00000004);
      return this;
    }

    // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall)
  }

  static {
    defaultInstance = new IrConstructorCall(true);
    defaultInstance.initFields();
  }

  // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall)
}
