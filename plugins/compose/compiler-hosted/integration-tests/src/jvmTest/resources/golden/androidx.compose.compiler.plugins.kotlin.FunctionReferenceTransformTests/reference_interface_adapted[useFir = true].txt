//
// Source
// ------------------------------------------

import androidx.compose.runtime.*

@Composable
fun Ref(intf: Intf, content: @Composable () -> Unit) {
    Ref(intf, intf::Fn)
}

//
// Transformed IR
// ------------------------------------------

@Composable
@FunctionKeyMeta(key = -704485017, startOffset = 84, endOffset = 188)
fun Ref(intf: Intf, content: Function2<Composer, Int, Unit>, %composer: Composer?, %changed: Int) {
  %composer = %composer.startRestartGroup(<>)
  sourceInformation(%composer, "C(Ref)N(intf,content)<intf::...>,<intf::...>,<Ref(in...>:Test.kt")
  val %dirty = %changed
  if (%changed and 0b0110 == 0) {
    %dirty = %dirty or if (if (%changed and 0b1000 == 0) {
      %composer.changed(intf)
    } else {
      %composer.changedInstance(intf)
    }
    ) 0b0100 else 0b0010
  }
  if (%composer.shouldExecute(%dirty and 0b0011 != 0b0010, %dirty and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(<>, %dirty, -1, <>)
    }
    Ref(intf, <block>{
      val tmp0 = intf
      sourceInformationMarkerStart(%composer, <>, "CC(remember):Test.kt#9igjgp")
      val tmp0_group = %composer.cache(%dirty and 0b1110 == 0b0100 || %dirty and 0b1000 != 0 && %composer.changedInstance(tmp0)) {
        @Composable
        @ComposableInferredTarget(scheme = "[0[0]]")
        @FunctionKeyMeta(key = -1747373846, startOffset = 165, endOffset = 173)
        fun Intf.Fn(%composer: Composer?, %changed: Int) {
          Fn%default(0, receiver, %composer, 0b01110000 and %changed shl 0b0011, 0b0001)
        }
        tmp0::Fn
      }
      sourceInformationMarkerEnd(%composer)
      tmp0_group
    }, %composer, 0b1110 and %dirty)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    %composer.skipToGroupEnd()
  }
  %composer.endRestartGroup()?.updateScope { %composer: Composer?, %force: Int ->
    Ref(intf, content, %composer, updateChangedFlags(%changed or 0b0001))
  }
}
