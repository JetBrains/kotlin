FILE: moreThenOneContext.kt
    public final class A : R|kotlin/Any| {
        public constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

        public final fun foo(a: R|kotlin/String|): R|kotlin/String| {
            ^foo R|<local>/a|
        }

    }
    public final class B : R|kotlin/Any| {
        public constructor(): R|B| {
            super<R|kotlin/Any|>()
        }

        public final fun foo(b: R|kotlin/String|): R|kotlin/String| {
            ^foo R|<local>/b|
        }

    }
    context(ctx: R|T|)
    public final fun <T> implicit(): R|T| {
        ^implicit R|<local>/ctx|
    }
    context(a: R|A|, b: R|B|)
    public final fun test1(): R|kotlin/Unit| {
        R|<local>/a|.R|/A.foo|(String())
        R|<local>/b|.R|/B.foo|(String())
    }
    context(a: R|A|, b: R|B|)
    public final val property1: R|kotlin/String|
        public get(): R|kotlin/String| {
            R|<local>/a|.R|/A.foo|(String())
            ^ R|<local>/b|.R|/B.foo|(String())
        }
    public final fun inTypePosition(a: R|@ContextFunctionTypeParams (A, B) -> kotlin/Unit|): R|kotlin/Unit| {
    }
    context(<unused var>: R|A|, b: R|B|)
    public final fun test2(): R|kotlin/Unit| {
        R|/implicit|<R|A|>().R|/A.foo|(String())
        R|<local>/b|.R|/B.foo|(String())
    }
    context(<unused var>: R|A|, b: R|B|)
    public final val property2: R|kotlin/String|
        public get(): R|kotlin/String| {
            R|/implicit|<R|A|>().R|/A.foo|(String())
            ^ R|<local>/b|.R|/B.foo|(String())
        }
    public final fun usage1(): R|kotlin/Unit| {
        R|kotlin/with|<R|A|, R|kotlin/String|>(R|/A.A|(), <L> = with@fun R|A|.<anonymous>(): R|kotlin/String| <inline=Inline, kind=EXACTLY_ONCE>  {
            ^ R|kotlin/with|<R|B|, R|kotlin/String|>(R|/B.B|(), <L> = with@fun R|B|.<anonymous>(): R|kotlin/String| <inline=Inline, kind=EXACTLY_ONCE>  {
                R|/test1|()
                R|/test2|()
                R|/property1|
                ^ R|/property2|
            }
            )
        }
        )
        R|/inTypePosition|(<L> = inTypePosition@fun <anonymous>(): R|kotlin/Unit| <inline=NoInline>  {
            R|/implicit|<R|A|>().R|/A.foo|(String())
            R|/implicit|<R|B|>().R|/B.foo|(String())
        }
        )
    }
