package

public val testCallableRef: kotlin.reflect.KFunction0<kotlin.Unit>
public val testCallableRef2: kotlin.reflect.KFunction0<kotlin.Unit>
public val testCallableRefLHSObject: kotlin.reflect.KFunction0<kotlin.String>
public val testCallableRefLHSObject2: kotlin.reflect.KFunction0<kotlin.String>
public val testQualified: kotlin.Int = 42
public val testQualified2: kotlin.Int = 42
public val testQualifier: kotlin.Int = 42
public val testQualifier2: kotlin.Int = 42
public val testQualifier3: kotlin.Int = 4
public val testQualifier4: kotlin.Int = 4
public fun __(): kotlin.Unit
public fun test(/*0*/ _: kotlin.Int): kotlin.Unit
public fun testCall(): kotlin.Unit
public fun testCallableRefLHSValue(/*0*/ _: kotlin.Any): kotlin.reflect.KFunction0<kotlin.String>
public fun testCallableRefLHSValue2(/*0*/ _: kotlin.Any): kotlin.reflect.KFunction0<kotlin.String>

public object Host {
    private constructor Host()
    public final val _: kotlin.Int = 42
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

    public object __ {
        private constructor __()
        public final val bar: kotlin.Int = 4
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}

public object ___ {
    private constructor ___()
    public final val test: kotlin.Int = 42
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}
