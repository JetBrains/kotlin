package

public object T2 {
    private constructor T2()
    public final val test2: kotlin.String
    public final val kotlin.String.test1: kotlin.String
    public final fun </*0*/ T> delegate(): T2.Foo<T>
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    public final operator fun </*0*/ T> T2.Foo<T>.getValue(/*0*/ receiver: kotlin.String, /*1*/ p: kotlin.Any?): T
    public final operator fun </*0*/ T> T2.Foo<T>.provideDelegate(/*0*/ host: T2, /*1*/ p: kotlin.Any?): T2.Foo<T>

    public interface Foo</*0*/ T> {
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}
