/as_type_contract.kt:(152,162): info: Generated Viper text for asOperator:
method global$fun_asOperator$fun_take$T_class_global$class_Foo$return$T_class_global$class_Bar(local$foo: Ref)
  returns (ret$0: Ref)
  ensures dom$Type$isSubtype((dom$TypeOf$typeOf(ret$0): dom$Type), dom$Type$global$class_Bar())
  ensures true ==>
    dom$Type$isSubtype((dom$TypeOf$typeOf(local$foo): dom$Type), dom$Type$global$class_Bar())
{
  var anonymous$0: Ref
  inhale dom$Type$isSubtype((dom$TypeOf$typeOf(local$foo): dom$Type), dom$Type$global$class_Foo())
  anonymous$0 := (dom$Casting$cast(local$foo, dom$Type$global$class_Bar()): Ref)
  ret$0 := anonymous$0
  goto label$ret$0
  label label$ret$0
}

/as_type_contract.kt:(307,321): info: Generated Viper text for safeAsOperator:
method global$fun_safeAsOperator$fun_take$T_class_global$class_Foo$return$NT_class_global$class_Bar(local$foo: Ref)
  returns (ret$0: dom$Nullable[Ref])
  ensures dom$Type$isSubtype((dom$TypeOf$typeOf(ret$0): dom$Type), dom$Type$special$Nullable(dom$Type$global$class_Bar()))
  ensures ret$0 != (dom$Nullable$null(): dom$Nullable[Ref]) ==>
    dom$Type$isSubtype((dom$TypeOf$typeOf(local$foo): dom$Type), dom$Type$global$class_Bar())
{
  var anonymous$0: dom$Nullable[Ref]
  inhale dom$Type$isSubtype((dom$TypeOf$typeOf(local$foo): dom$Type), dom$Type$global$class_Foo())
  anonymous$0 := (dom$Casting$cast(local$foo, dom$Type$special$Nullable(dom$Type$global$class_Bar())): dom$Nullable[Ref])
  ret$0 := anonymous$0
  goto label$ret$0
  label label$ret$0
}

/as_type_contract.kt:(504,508): info: Generated Viper text for getX:
field class_IntHolder$member_x: Int

method global$fun_getX$fun_take$T_Any$return$NT_Int(local$a: dom$Any)
  returns (ret$0: dom$Nullable[Int])
  ensures dom$Type$isSubtype((dom$TypeOf$typeOf(ret$0): dom$Type), dom$Type$special$Nullable(dom$Type$Int()))
  ensures ret$0 != (dom$Nullable$null(): dom$Nullable[Int]) ==>
    dom$Type$isSubtype((dom$TypeOf$typeOf(local$a): dom$Type), dom$Type$global$class_IntHolder())
  ensures ret$0 == (dom$Nullable$null(): dom$Nullable[Int]) ==>
    !dom$Type$isSubtype((dom$TypeOf$typeOf(local$a): dom$Type), dom$Type$global$class_IntHolder())
{
  var anonymous$0: dom$Nullable[Ref]
  var anonymous$1: dom$Nullable[Int]
  inhale dom$Type$isSubtype((dom$TypeOf$typeOf(local$a): dom$Type), dom$Type$Any())
  if (dom$Type$isSubtype((dom$TypeOf$typeOf(local$a): dom$Type), dom$Type$global$class_IntHolder())) {
    anonymous$0 := (dom$Casting$cast(local$a, dom$Type$special$Nullable(dom$Type$global$class_IntHolder())): dom$Nullable[Ref])
    inhale acc((dom$Casting$cast(anonymous$0, dom$Type$global$class_IntHolder()): Ref).class_IntHolder$member_x, wildcard)
  } else {
    anonymous$0 := (dom$Nullable$null(): dom$Nullable[Ref])}
  if (anonymous$0 == (dom$Nullable$null(): dom$Nullable[Ref])) {
    anonymous$1 := (dom$Nullable$null(): dom$Nullable[Int])
  } else {
    var anonymous$2: Int
    anonymous$2 := (dom$Casting$cast(anonymous$0, dom$Type$global$class_IntHolder()): Ref).class_IntHolder$member_x
    anonymous$1 := (dom$Casting$cast(anonymous$2, dom$Type$special$Nullable(dom$Type$Int())): dom$Nullable[Int])
  }
  ret$0 := anonymous$1
  goto label$ret$0
  label label$ret$0
}
