package events

open external class internal {
  external constructor() /* primary */ 
  open external class EventEmitterP : internal {
    external constructor() /* primary */ 

  }

  open external class EventEmitterS : internal {
    external constructor(a: Any) 

  }

  external object NestedExternalObject : internal {
    private external constructor() /* primary */ 

  }

  external enum class NestedExternalEnum : Enum<NestedExternalEnum> {
    private external constructor() /* primary */ 
    A = NestedExternalEnum()

    B = NestedExternalEnum()

    external fun values(): Array<NestedExternalEnum> /* Synthetic body for ENUM_VALUES */

    external fun valueOf(value: String): NestedExternalEnum /* Synthetic body for ENUM_VALUEOF */

  }

  external interface NestedExternalInterface {

  }

}

